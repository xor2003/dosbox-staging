/* THIS IS GENERATED FILE */

        
#include "cfix.exe.h"

                

 bool start(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    start:
    _begin:
cs=0x1a2;eip=0x000000; 	T(CLI);	// 35                  cli ;~ 01A2:0000
cs=0x1a2;eip=0x000001; 	T(CLD);	// 36                  cld ;~ 01A2:0001
cs=0x1a2;eip=0x000002; 	T(ax = seg_offset(seg046););	// 37                  mov     ax, seg seg046 ;~ 01A2:0002
cs=0x1a2;eip=0x000005; 	S(ss = ax;);	// 38                  mov     ss, ax ;~ 01A2:0005
cs=0x1a2;eip=0x000007; 	T(sp = 0x0D596;);	// 39                  mov     sp, 0D596h ;~ 01A2:0007
cs=0x1a2;eip=0x00000a; 	T(ax = seg_offset(seg002););	// 40                  mov     ax, seg seg002 ;~ 01A2:000A
cs=0x1a2;eip=0x00000d; 	T(ds = ax;);	// 41                  mov     ds, ax ;~ 01A2:000D
cs=0x1a2;eip=0x00000f; 	T(es = ax;);	// 43                  mov     es, ax ;~ 01A2:000F
cs=0x1a2;eip=0x000011; 	T(STI);	// 45                  sti ;~ 01A2:0011
cs=0x1a2;eip=0x000012; 	T(ax = 0x0DEC8;);	// 46                  mov     ax, 0DEC8h ;~ 01A2:0012
cs=0x1a2;eip=0x000015; 	T(ax = 0x0BA0;);	// 47                  mov     ax, 0BA0h ;~ 01A2:0015
cs=0x1a2;eip=0x000018; 	T(ax = 0;);	// 48                  mov     ax, 0 ;~ 01A2:0018
cs=0x1a2;eip=0x00001b; 	X(*(dw*)(((db*)&seg_1f171)+1) = 0x0A000;);	// 49                  mov     seg_1F171+1, 0A000h ;~ 01A2:001B
cs=0x1a2;eip=0x000021; 	X(*(dw*)(&unk_1f170) = 0x0A200;);	// 50                  mov     word ptr unk_1F170, 0A200h ;~ 01A2:0021
cs=0x1a2;eip=0x000027; 	X(word_1f210 = 0x0A800;);	// 51                  mov     word_1F210, 0A800h ;~ 01A2:0027
cs=0x1a2;eip=0x00002d; 	J(CALL(sub_10d69,0));	// 52                  call    sub_10D69 ;~ 01A2:002D
cs=0x1a2;eip=0x000030; 	J(CALL(sub_1b2c6,0));	// 53                  call    sub_1B2C6 ;~ 01A2:0030
cs=0x1a2;eip=0x000033; 	T(CMP(ax, 0));	// 54                  cmp     ax, 0 ;~ 01A2:0033
cs=0x1a2;eip=0x000036; 	J(JNS(loc_1003b));	// 55                  jns     short loc_1003B ;~ 01A2:0036
cs=0x1a2;eip=0x000038; 	J(return _group2(m2c::kloc_11190, _state););	// 56                  jmp     loc_11190 ;~ 01A2:0038
loc_1003b:
	// 4369 
cs=0x1a2;eip=0x00003b; 	J(JZ(loc_10040));	// 60                  jz      short loc_10040 ;~ 01A2:003B
cs=0x1a2;eip=0x00003d; 	J(return _group2(m2c::kloc_111a4, _state););	// 61                  jmp     loc_111A4 ;~ 01A2:003D
loc_10040:
	// 4370 
cs=0x1a2;eip=0x000040; 	J(CALL(sub_11136,0));	// 65                  call    sub_11136 ;~ 01A2:0040
cs=0x1a2;eip=0x000043; 	J(CALL(sub_10fcc,0));	// 67                  call    sub_10FCC ;~ 01A2:0043
cs=0x1a2;eip=0x000046; 	J(CALL(sub_1d3fb,0));	// 68                  call    sub_1D3FB ;~ 01A2:0046
cs=0x1a2;eip=0x000049; 	J(CALL(nullsub_9,0));	// 70                  call    nullsub_9 ;~ 01A2:0049
cs=0x1a2;eip=0x00004c; 	J(CALL(sub_10f2a,0));	// 71                  call    sub_10F2A ;~ 01A2:004C
cs=0x1a2;eip=0x00004f; 	J(CALL(sub_1b4a9,0));	// 72                  call    sub_1B4A9 ;~ 01A2:004F
cs=0x1a2;eip=0x000052; 	T(CMP(ax, 0));	// 74                  cmp     ax, 0 ;~ 01A2:0052
cs=0x1a2;eip=0x000055; 	J(JZ(loc_1005a));	// 75                  jz      short loc_1005A ;~ 01A2:0055
cs=0x1a2;eip=0x000057; 	J(return _group2(m2c::kloc_111a4, _state););	// 76                  jmp     loc_111A4 ;~ 01A2:0057
loc_1005a:
	// 4371 
cs=0x1a2;eip=0x00005a; 	J(CALL(sub_1b422,0));	// 80                  call    sub_1B422 ;~ 01A2:005A
cs=0x1a2;eip=0x00005d; 	T(CMP(ax, 0));	// 81                  cmp     ax, 0 ;~ 01A2:005D
cs=0x1a2;eip=0x000060; 	J(JZ(loc_10065));	// 82                  jz      short loc_10065 ;~ 01A2:0060
cs=0x1a2;eip=0x000062; 	J(return _group2(m2c::kloc_111a4, _state););	// 83                  jmp     loc_111A4 ;~ 01A2:0062
loc_10065:
	// 4372 
cs=0x1a2;eip=0x000065; 	J(CALL(sub_1c013,0));	// 87                  call    sub_1C013 ;~ 01A2:0065
cs=0x1a2;eip=0x000068; 	X(word_2f05c = sp;);	// 88                  mov     ds:word_2F05C, sp ;~ 01A2:0068
loc_1006c:
	// 4373 
cs=0x1a2;eip=0x00006c; 	X(byte_1f878 = 0x0FF;);	// 91                  mov     ds:byte_1F878, 0FFh ;~ 01A2:006C
loc_10071:
	// 4374 
cs=0x1a2;eip=0x000071; 	T(sp = word_2f05c;);	// 95                  mov     sp, ds:word_2F05C ;~ 01A2:0071
cs=0x1a2;eip=0x000075; 	T(TEST(byte_1f85d, 1));	// 96                  test    ds:byte_1F85D, 1 ;~ 01A2:0075
cs=0x1a2;eip=0x00007a; 	X(PUSHF);	// 97                  pushf ;~ 01A2:007A
cs=0x1a2;eip=0x00007b; 	X(AND(byte_1f85d, 0x0FE));	// 98                  and     ds:byte_1F85D, 0FEh ;~ 01A2:007B
cs=0x1a2;eip=0x000080; 	X(POPF);	// 99                  popf ;~ 01A2:0080
cs=0x1a2;eip=0x000081; 	J(CALL(sub_10f2a,0));	// 100                  call    sub_10F2A ;~ 01A2:0081
cs=0x1a2;eip=0x000084; 	J(CALL(sub_10ea5,0));	// 102                  call    sub_10EA5 ;~ 01A2:0084
cs=0x1a2;eip=0x000087; 	J(CALL(sub_1c034,0));	// 103                  call    sub_1C034 ;~ 01A2:0087
cs=0x1a2;eip=0x00008a; 	J(JS(loc_1008f));	// 104                  js      short loc_1008F ;~ 01A2:008A
cs=0x1a2;eip=0x00008c; 	J(JMP(loc_101e4));	// 105                  jmp     loc_101E4 ;~ 01A2:008C
loc_1008f:
	// 4375 
cs=0x1a2;eip=0x00008f; 	J(CALL(sub_19d33,0));	// 109                  call    sub_19D33 ;~ 01A2:008F
cs=0x1a2;eip=0x000092; 	X(byte_1f878 = 0;);	// 110                  mov     ds:byte_1F878, 0 ;~ 01A2:0092
loc_10097:
	// 4376 
cs=0x1a2;eip=0x000097; 	J(CALL(sub_13514,0));	// 114                  call    sub_13514 ;~ 01A2:0097
cs=0x1a2;eip=0x00009a; 	T(TEST(byte_1f85d, 1));	// 115                  test    ds:byte_1F85D, 1 ;~ 01A2:009A
cs=0x1a2;eip=0x00009f; 	X(PUSHF);	// 116                  pushf ;~ 01A2:009F
cs=0x1a2;eip=0x0000a0; 	X(AND(byte_1f85d, 0x0FE));	// 117                  and     ds:byte_1F85D, 0FEh ;~ 01A2:00A0
cs=0x1a2;eip=0x0000a5; 	X(POPF);	// 118                  popf ;~ 01A2:00A5
cs=0x1a2;eip=0x0000a6; 	X(*(dw*)(((db*)&seg_1f171)+1) = 0x0A000;);	// 119                  mov     seg_1F171+1, 0A000h ;~ 01A2:00A6
cs=0x1a2;eip=0x0000ac; 	X(*(dw*)(&unk_1f170) = 0x0A200;);	// 120                  mov     word ptr unk_1F170, 0A200h ;~ 01A2:00AC
cs=0x1a2;eip=0x0000b2; 	X(word_1f210 = 0x0A800;);	// 121                  mov     word_1F210, 0A800h ;~ 01A2:00B2
cs=0x1a2;eip=0x0000b8; 	J(CALL(sub_18888,0));	// 122                  call    sub_18888 ;~ 01A2:00B8
cs=0x1a2;eip=0x0000bb; 	X(PUSH(si));	// 124                  push    si ;~ 01A2:00BB
cs=0x1a2;eip=0x0000bc; 	T(si = 0x0F812;);	// 125                  mov     si, 0F812h ;~ 01A2:00BC
cs=0x1a2;eip=0x0000bf; 	J(CALL(sub_1d4c6,0));	// 126                  call    sub_1D4C6 ;~ 01A2:00BF
cs=0x1a2;eip=0x0000c2; 	X(POP(si));	// 128                  pop     si ;~ 01A2:00C2
cs=0x1a2;eip=0x0000c3; 	J(CALL(sub_1d448,0));	// 129                  call    sub_1D448 ;~ 01A2:00C3
cs=0x1a2;eip=0x0000c6; 	T(sp = word_2f05c;);	// 130                  mov     sp, ds:word_2F05C ;~ 01A2:00C6
cs=0x1a2;eip=0x0000ca; 	J(CALL(sub_10ea5,0));	// 131                  call    sub_10EA5 ;~ 01A2:00CA
cs=0x1a2;eip=0x0000cd; 	T(CMP(byte_1f872, 0));	// 132                  cmp     ds:byte_1F872, 0 ;~ 01A2:00CD
cs=0x1a2;eip=0x0000d2; 	J(JZ(loc_1010e));	// 133                  jz      short loc_1010E ;~ 01A2:00D2
cs=0x1a2;eip=0x0000d4; 	J(JS(loc_100ec));	// 134                  js      short loc_100EC ;~ 01A2:00D4
cs=0x1a2;eip=0x0000d6; 	J(CALL(sub_1befc,0));	// 135                  call    sub_1BEFC ;~ 01A2:00D6
cs=0x1a2;eip=0x0000d9; 	J(JNS(loc_100de));	// 136                  jns     short loc_100DE ;~ 01A2:00D9
cs=0x1a2;eip=0x0000db; 	J(return _group2(m2c::kloc_111a4, _state););	// 137                  jmp     loc_111A4 ;~ 01A2:00DB
loc_100de:
	// 4377 
cs=0x1a2;eip=0x0000de; 	T(al = 8;);	// 141                  mov     al, 8 ;~ 01A2:00DE
cs=0x1a2;eip=0x0000e0; 	J(CALL(sub_14275,0));	// 142                  call    sub_14275 ;~ 01A2:00E0
cs=0x1a2;eip=0x0000e3; 	T(al = 9;);	// 143                  mov     al, 9 ;~ 01A2:00E3
cs=0x1a2;eip=0x0000e5; 	J(CALL(sub_14275,0));	// 144                  call    sub_14275 ;~ 01A2:00E5
cs=0x1a2;eip=0x0000e8; 	T(al = 1;);	// 145                  mov     al, 1 ;~ 01A2:00E8
cs=0x1a2;eip=0x0000ea; 	J(JMP(loc_1011e));	// 146                  jmp     short loc_1011E ;~ 01A2:00EA
loc_100ec:
	// 4378 
cs=0x1a2;eip=0x0000ec; 	T(TEST(byte_1f85d, 1));	// 150                  test    ds:byte_1F85D, 1 ;~ 01A2:00EC
cs=0x1a2;eip=0x0000f1; 	X(PUSHF);	// 151                  pushf ;~ 01A2:00F1
cs=0x1a2;eip=0x0000f2; 	X(AND(byte_1f85d, 0x0FE));	// 152                  and     ds:byte_1F85D, 0FEh ;~ 01A2:00F2
cs=0x1a2;eip=0x0000f7; 	X(POPF);	// 153                  popf ;~ 01A2:00F7
cs=0x1a2;eip=0x0000f8; 	X(byte_1f872 = 0;);	// 154                  mov     ds:byte_1F872, 0 ;~ 01A2:00F8
cs=0x1a2;eip=0x0000fd; 	T(al = 1;);	// 155                  mov     al, 1 ;~ 01A2:00FD
cs=0x1a2;eip=0x0000ff; 	J(CALL(sub_1befc,0));	// 156                  call    sub_1BEFC ;~ 01A2:00FF
cs=0x1a2;eip=0x000102; 	J(JNS(loc_10107));	// 157                  jns     short loc_10107 ;~ 01A2:0102
cs=0x1a2;eip=0x000104; 	J(return _group2(m2c::kloc_111a4, _state););	// 158                  jmp     loc_111A4 ;~ 01A2:0104
loc_10107:
	// 4379 
cs=0x1a2;eip=0x000107; 	T(al = 9;);	// 162                  mov     al, 9 ;~ 01A2:0107
cs=0x1a2;eip=0x000109; 	J(CALL(sub_14275,0));	// 163                  call    sub_14275 ;~ 01A2:0109
cs=0x1a2;eip=0x00010c; 	J(JMP(loc_1011e));	// 164                  jmp     short loc_1011E ;~ 01A2:010C
loc_1010e:
	// 4380 
cs=0x1a2;eip=0x00010e; 	T(al = 1;);	// 168                  mov     al, 1 ;~ 01A2:010E
cs=0x1a2;eip=0x000110; 	J(CALL(sub_1befc,0));	// 169                  call    sub_1BEFC ;~ 01A2:0110
cs=0x1a2;eip=0x000113; 	J(JNS(loc_10118));	// 171                  jns     short loc_10118 ;~ 01A2:0113
cs=0x1a2;eip=0x000115; 	J(return _group2(m2c::kloc_111a4, _state););	// 172                  jmp     loc_111A4 ;~ 01A2:0115
loc_10118:
	// 4381 
cs=0x1a2;eip=0x000118; 	T(ax = word_1f870;);	// 176                  mov     ax, ds:word_1F870 ;~ 01A2:0118
cs=0x1a2;eip=0x00011b; 	X(word_1f3aa = ax;);	// 177                  mov     ds:word_1F3AA, ax ;~ 01A2:011B
loc_1011e:
	// 4382 
cs=0x1a2;eip=0x00011e; 	T(al = 6;);	// 181                  mov     al, 6 ;~ 01A2:011E
cs=0x1a2;eip=0x000120; 	T(dx = word_1f868;);	// 182                  mov     dx, ds:word_1F868 ;~ 01A2:0120
cs=0x1a2;eip=0x000124; 	J(CALL(sub_1413d,0));	// 183                  call    sub_1413D ;~ 01A2:0124
cs=0x1a2;eip=0x000127; 	X(word_1f71a = ax;);	// 184                  mov     ds:word_1F71A, ax ;~ 01A2:0127
cs=0x1a2;eip=0x00012a; 	T(ax = 6;);	// 185                  mov     ax, 6 ;~ 01A2:012A
cs=0x1a2;eip=0x00012d; 	J(CALL(sub_1410e,0));	// 186                  call    sub_1410E ;~ 01A2:012D
cs=0x1a2;eip=0x000130; 	X(word_1f36c = di;);	// 187                  mov     ds:word_1F36C, di ;~ 01A2:0130
cs=0x1a2;eip=0x000134; 	T(MOV(dx, *(dw*)(raddr(ds,di+6))));	// 188                  mov     dx, [di+6] ;~ 01A2:0134
cs=0x1a2;eip=0x000137; 	T(ax = 2;);	// 189                  mov     ax, 2 ;~ 01A2:0137
cs=0x1a2;eip=0x00013a; 	J(CALL(sub_1410e,0));	// 190                  call    sub_1410E ;~ 01A2:013A
cs=0x1a2;eip=0x00013d; 	X(seg_1f368 = es;);	// 192                  mov     ds:seg_1F368, es ;~ 01A2:013D
cs=0x1a2;eip=0x000141; 	X(word_1f36a = di;);	// 193                  mov     ds:word_1F36A, di ;~ 01A2:0141
cs=0x1a2;eip=0x000145; 	X(byte_1f872 = 1;);	// 194                  mov     ds:byte_1F872, 1 ;~ 01A2:0145
cs=0x1a2;eip=0x00014a; 	J(CALL(sub_1887b,0));	// 195                  call    sub_1887B ;~ 01A2:014A
cs=0x1a2;eip=0x00014d; 	X(PUSH(si));	// 197                  push    si ;~ 01A2:014D
cs=0x1a2;eip=0x00014e; 	T(si = 0x0F812;);	// 198                  mov     si, 0F812h ;~ 01A2:014E
cs=0x1a2;eip=0x000151; 	J(CALL(sub_1d4c6,0));	// 199                  call    sub_1D4C6 ;~ 01A2:0151
cs=0x1a2;eip=0x000154; 	X(POP(si));	// 201                  pop     si ;~ 01A2:0154
cs=0x1a2;eip=0x000155; 	J(CALL(sub_13514,0));	// 202                  call    sub_13514 ;~ 01A2:0155
cs=0x1a2;eip=0x000158; 	T(ax = word_1f1ca;);	// 203                  mov     ax, word_1F1CA ;~ 01A2:0158
cs=0x1a2;eip=0x00015b; 	X(word_1f1f4 = ax;);	// 204                  mov     word_1F1F4, ax ;~ 01A2:015B
cs=0x1a2;eip=0x00015e; 	T(ax = 0x27E;);	// 205                  mov     ax, 27Eh ;~ 01A2:015E
cs=0x1a2;eip=0x000161; 	X(word_1f1f6 = ax;);	// 206                  mov     word_1F1F6, ax ;~ 01A2:0161
cs=0x1a2;eip=0x000164; 	T(CMP(byte_1f87a, 0));	// 207                  cmp     ds:byte_1F87A, 0 ;~ 01A2:0164
cs=0x1a2;eip=0x000169; 	J(JZ(loc_10181));	// 208                  jz      short loc_10181 ;~ 01A2:0169
cs=0x1a2;eip=0x00016b; 	X(byte_1f87a = 0;);	// 209                  mov     ds:byte_1F87A, 0 ;~ 01A2:016B
cs=0x1a2;eip=0x000170; 	T(TEST(byte_1f84b, 1));	// 210                  test    ds:byte_1F84B, 1 ;~ 01A2:0170
cs=0x1a2;eip=0x000175; 	X(PUSHF);	// 211                  pushf ;~ 01A2:0175
cs=0x1a2;eip=0x000176; 	X(OR(byte_1f84b, 1));	// 212                  or      ds:byte_1F84B, 1 ;~ 01A2:0176
cs=0x1a2;eip=0x00017b; 	X(POPF);	// 213                  popf ;~ 01A2:017B
cs=0x1a2;eip=0x00017c; 	J(CALL(sub_1c377,0));	// 214                  call    sub_1C377 ;~ 01A2:017C
cs=0x1a2;eip=0x00017f; 	J(JMP(loc_101d2));	// 216                  jmp     short loc_101D2 ;~ 01A2:017F
loc_10181:
	// 4383 
cs=0x1a2;eip=0x000181; 	J(CALL(sub_18888,0));	// 220                  call    sub_18888 ;~ 01A2:0181
cs=0x1a2;eip=0x000184; 	T(CMP(byte_1f878, 0));	// 222                  cmp     ds:byte_1F878, 0 ;~ 01A2:0184
cs=0x1a2;eip=0x000189; 	J(JZ(loc_10191));	// 223                  jz      short loc_10191 ;~ 01A2:0189
cs=0x1a2;eip=0x00018b; 	T(NOP);	// 224                  nop ;~ 01A2:018B
cs=0x1a2;eip=0x00018c; 	T(NOP);	// 225                  nop ;~ 01A2:018C
cs=0x1a2;eip=0x00018d; 	T(NOP);	// 226                  nop ;~ 01A2:018D
cs=0x1a2;eip=0x00018e; 	J(CALL(sub_18888,0));	// 227                  call    sub_18888 ;~ 01A2:018E
loc_10191:
	// 4384 
cs=0x1a2;eip=0x000191; 	J(CALL(sub_1da1f,0));	// 230                  call    sub_1DA1F ;~ 01A2:0191
cs=0x1a2;eip=0x000194; 	X(byte_1f87a = 0;);	// 231                  mov     ds:byte_1F87A, 0 ;~ 01A2:0194
cs=0x1a2;eip=0x000199; 	X(word_1f3b4 = 0x0FFFF;);	// 232                  mov     ds:word_1F3B4, 0FFFFh ;~ 01A2:0199
cs=0x1a2;eip=0x00019f; 	J(JMP(loc_101b2));	// 233                  jmp     short loc_101B2 ;~ 01A2:019F
loc_101a1:
	// 4385 
cs=0x1a2;eip=0x0001a1; 	J(JMP(loc_101a1));	// 237                  jmp     short loc_101A1 ;~ 01A2:01A1
ret_1a2_1a3:
	// 4386 
cs=0x1a2;eip=0x0001a3; 	T(al = 1;);	// 239                  mov     al, 1 ;~ 01A2:01A3
cs=0x1a2;eip=0x0001a5; 	X(MOV(*(raddr(ds,bx)), al));	// 240                  mov     [bx], al ;~ 01A2:01A5
cs=0x1a2;eip=0x0001a7; 	T(al = byte_1f8e1;);	// 241                  mov     al, ds:byte_1F8E1 ;~ 01A2:01A7
cs=0x1a2;eip=0x0001aa; 	T(XOR(ah, ah));	// 242                  xor     ah, ah ;~ 01A2:01AA
cs=0x1a2;eip=0x0001ac; 	S(_INT(0x10));	// 243                  int     10h             ; - VIDEO - SET VIDEO MODE ;~ 01A2:01AC
cs=0x1a2;eip=0x0001ae; 	T(XOR(ax, ax));	// 245                  xor     ax, ax ;~ 01A2:01AE
cs=0x1a2;eip=0x0001b0; 	S(_INT(0x21));	// 246                  int     21h             ; DOS - PROGRAM TERMINATION ;~ 01A2:01B0
loc_101b2:
	// 4387 
cs=0x1a2;eip=0x0001b2; 	J(CALL(sub_1da60,0));	// 250                  call    sub_1DA60 ;~ 01A2:01B2
cs=0x1a2;eip=0x0001b5; 	T(CMP(byte_1f879, 0));	// 252                  cmp     ds:byte_1F879, 0 ;~ 01A2:01B5
cs=0x1a2;eip=0x0001ba; 	J(JZ(loc_101d2));	// 253                  jz      short loc_101D2 ;~ 01A2:01BA
cs=0x1a2;eip=0x0001bc; 	J(CALL(sub_163a1,0));	// 254                  call    sub_163A1 ;~ 01A2:01BC
cs=0x1a2;eip=0x0001bf; 	J(CALL(sub_1ddb5,0));	// 255                  call    sub_1DDB5 ;~ 01A2:01BF
cs=0x1a2;eip=0x0001c2; 	T(si = *(dw*)(((db*)&seg_1f171)+1););	// 256                  mov     si, seg_1F171+1 ;~ 01A2:01C2
cs=0x1a2;eip=0x0001c6; 	T(di = word_1f190;);	// 257                  mov     di, word_1F190 ;~ 01A2:01C6
cs=0x1a2;eip=0x0001ca; 	J(CALL(sub_188ac,0));	// 258                  call    sub_188AC ;~ 01A2:01CA
cs=0x1a2;eip=0x0001cd; 	X(byte_1f879 = 0;);	// 259                  mov     ds:byte_1F879, 0 ;~ 01A2:01CD
loc_101d2:
	// 4388 
cs=0x1a2;eip=0x0001d2; 	X(word_1f1f8 = 0;);	// 263                  mov     word_1F1F8, 0 ;~ 01A2:01D2
cs=0x1a2;eip=0x0001d8; 	T(TEST(byte_1f873, 8));	// 264                  test    ds:byte_1F873, 8 ;~ 01A2:01D8
cs=0x1a2;eip=0x0001dd; 	X(PUSHF);	// 265                  pushf ;~ 01A2:01DD
cs=0x1a2;eip=0x0001de; 	X(AND(byte_1f873, 0x0F7));	// 266                  and     ds:byte_1F873, 0F7h ;~ 01A2:01DE
cs=0x1a2;eip=0x0001e3; 	X(POPF);	// 267                  popf ;~ 01A2:01E3
loc_101e4:
	// 4389 
cs=0x1a2;eip=0x0001e4; 	J(CALL(sub_19d33,0));	// 271                  call    sub_19D33 ;~ 01A2:01E4
cs=0x1a2;eip=0x0001e7; 	X(byte_1f835 = 0x0FF;);	// 272                  mov     ds:byte_1F835, 0FFh ;~ 01A2:01E7
cs=0x1a2;eip=0x0001ec; 	X(byte_1f87a = 0;);	// 273                  mov     ds:byte_1F87A, 0 ;~ 01A2:01EC
cs=0x1a2;eip=0x0001f1; 	T(TEST(byte_1f844, 1));	// 274                  test    ds:byte_1F844, 1 ;~ 01A2:01F1
cs=0x1a2;eip=0x0001f6; 	X(PUSHF);	// 275                  pushf ;~ 01A2:01F6
cs=0x1a2;eip=0x0001f7; 	X(AND(byte_1f844, 0x0FE));	// 276                  and     ds:byte_1F844, 0FEh ;~ 01A2:01F7
cs=0x1a2;eip=0x0001fc; 	X(POPF);	// 277                  popf ;~ 01A2:01FC
cs=0x1a2;eip=0x0001fd; 	J(CALL(sub_1572b,0));	// 278                  call    sub_1572B ;~ 01A2:01FD
cs=0x1a2;eip=0x000200; 	X(*(db*)(((db*)&off_1f831)+2) = 0x11;);	// 279                  mov     byte ptr ds:off_1F831+2, 11h ;~ 01A2:0200
cs=0x1a2;eip=0x000205; 	J(CALL(sub_16041,0));	// 280                  call    sub_16041 ;~ 01A2:0205
cs=0x1a2;eip=0x000208; 	J(CALL(sub_188c9,0));	// 281                  call    sub_188C9 ;~ 01A2:0208
cs=0x1a2;eip=0x00020b; 	X(byte_1f740 = 0;);	// 282                  mov     ds:byte_1F740, 0 ;~ 01A2:020B
cs=0x1a2;eip=0x000210; 	X(byte_1f857 = 0;);	// 283                  mov     ds:byte_1F857, 0 ;~ 01A2:0210
cs=0x1a2;eip=0x000215; 	X(word_1f1e4 = 0;);	// 284                  mov     word_1F1E4, 0 ;~ 01A2:0215
cs=0x1a2;eip=0x00021b; 	X(byte_1f852 = 0;);	// 285                  mov     ds:byte_1F852, 0 ;~ 01A2:021B
cs=0x1a2;eip=0x000220; 	X(byte_1f856 = 0;);	// 286                  mov     ds:byte_1F856, 0 ;~ 01A2:0220
cs=0x1a2;eip=0x000225; 	X(byte_1f847 = 0x22;);	// 287                  mov     ds:byte_1F847, 22h ; '"' ;~ 01A2:0225
cs=0x1a2;eip=0x00022a; 	X(byte_1f873 = 0;);	// 288                  mov     ds:byte_1F873, 0 ;~ 01A2:022A
cs=0x1a2;eip=0x00022f; 	J(CALL(sub_10b61,0));	// 289                  call    sub_10B61 ;~ 01A2:022F
loc_10232:
	// 4390 
cs=0x1a2;eip=0x000232; 	T(CMP(byte_1f780, 0));	// 292                  cmp     ds:byte_1F780, 0 ;~ 01A2:0232
cs=0x1a2;eip=0x000237; 	J(JZ(loc_10240));	// 293                  jz      short loc_10240 ;~ 01A2:0237
cs=0x1a2;eip=0x000239; 	X(byte_1f780 = 0;);	// 294                  mov     ds:byte_1F780, 0 ;~ 01A2:0239
cs=0x1a2;eip=0x00023e; 	J(JMP(loc_101e4));	// 295                  jmp     short loc_101E4 ;~ 01A2:023E
loc_10240:
	// 4391 
cs=0x1a2;eip=0x000240; 	J(CALL(sub_10247,0));	// 299                  call    sub_10247 ;~ 01A2:0240
cs=0x1a2;eip=0x000243; 	J(JMP(loc_10232));	// 300                  jmp     short loc_10232 ;~ 01A2:0243

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1003b: 	goto loc_1003b;
        case m2c::kloc_10040: 	goto loc_10040;
        case m2c::kloc_1005a: 	goto loc_1005a;
        case m2c::kloc_10065: 	goto loc_10065;
        case m2c::kloc_1006c: 	goto loc_1006c;
        case m2c::kloc_10071: 	goto loc_10071;
        case m2c::kloc_1008f: 	goto loc_1008f;
        case m2c::kloc_10097: 	goto loc_10097;
        case m2c::kloc_100de: 	goto loc_100de;
        case m2c::kloc_100ec: 	goto loc_100ec;
        case m2c::kloc_10107: 	goto loc_10107;
        case m2c::kloc_1010e: 	goto loc_1010e;
        case m2c::kloc_10118: 	goto loc_10118;
        case m2c::kloc_1011e: 	goto loc_1011e;
        case m2c::kloc_10181: 	goto loc_10181;
        case m2c::kloc_10191: 	goto loc_10191;
        case m2c::kloc_101a1: 	goto loc_101a1;
        case m2c::kloc_101b2: 	goto loc_101b2;
        case m2c::kloc_101d2: 	goto loc_101d2;
        case m2c::kloc_101e4: 	goto loc_101e4;
        case m2c::kloc_10232: 	goto loc_10232;
        case m2c::kloc_10240: 	goto loc_10240;
        case m2c::kret_1a2_1a3: 	goto ret_1a2_1a3;
        case m2c::kstart: 	goto start;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group1(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group1:
    _begin:
sub_10247:
	// 309 
cs=0x1a2;eip=0x000247; 	X(INC(seg_10245));	// 310                  inc     cs:seg_10245 ;~ 01A2:0247
cs=0x1a2;eip=0x00024c; 	J(CALL(sub_1dec8,0));	// 311                  call    sub_1DEC8 ;~ 01A2:024C
cs=0x1a2;eip=0x00024f; 	X(byte_1f8de = 0;);	// 312                  mov     ds:byte_1F8DE, 0 ;~ 01A2:024F
cs=0x1a2;eip=0x000254; 	X(byte_1f8df = 0;);	// 313                  mov     ds:byte_1F8DF, 0 ;~ 01A2:0254
cs=0x1a2;eip=0x000259; 	X(byte_1f8e0 = 0;);	// 314                  mov     ds:byte_1F8E0, 0 ;~ 01A2:0259
cs=0x1a2;eip=0x00025e; 	X(INC(seg_1f882));	// 315                  inc     ds:seg_1F882 ;~ 01A2:025E
cs=0x1a2;eip=0x000262; 	J(CALL(sub_11043,0));	// 316                  call    sub_11043 ;~ 01A2:0262
cs=0x1a2;eip=0x000265; 	T(CMP(byte_1f851, 0));	// 317                  cmp     ds:byte_1F851, 0 ;~ 01A2:0265
cs=0x1a2;eip=0x00026a; 	J(JZ(loc_10270));	// 318                  jz      short loc_10270 ;~ 01A2:026A
cs=0x1a2;eip=0x00026c; 	X(DEC(byte_1f851));	// 319                  dec     ds:byte_1F851 ;~ 01A2:026C
loc_10270:
	// 4392 
cs=0x1a2;eip=0x000270; 	T(TEST(byte_1f873, 0x20));	// 322                  test    ds:byte_1F873, 20h ;~ 01A2:0270
cs=0x1a2;eip=0x000275; 	X(PUSHF);	// 323                  pushf ;~ 01A2:0275
cs=0x1a2;eip=0x000276; 	X(AND(byte_1f873, 0x0DF));	// 324                  and     ds:byte_1F873, 0DFh ;~ 01A2:0276
cs=0x1a2;eip=0x00027b; 	X(POPF);	// 325                  popf ;~ 01A2:027B
cs=0x1a2;eip=0x00027c; 	X(word_1f70e = 0x0FFFF;);	// 326                  mov     ds:word_1F70E, 0FFFFh ;~ 01A2:027C
cs=0x1a2;eip=0x000282; 	X(byte_1f841 = 0;);	// 327                  mov     ds:byte_1F841, 0 ;~ 01A2:0282
cs=0x1a2;eip=0x000287; 	T(CMP(byte_1f847, 0));	// 328                  cmp     ds:byte_1F847, 0 ;~ 01A2:0287
cs=0x1a2;eip=0x00028c; 	J(JZ(loc_10292));	// 329                  jz      short loc_10292 ;~ 01A2:028C
cs=0x1a2;eip=0x00028e; 	X(DEC(byte_1f847));	// 330                  dec     ds:byte_1F847 ;~ 01A2:028E
loc_10292:
	// 4393 
cs=0x1a2;eip=0x000292; 	X(INC(*(db*)(((db*)&off_1f83c)+2)));	// 333                  inc     byte ptr ds:off_1F83C+2 ;~ 01A2:0292
cs=0x1a2;eip=0x000296; 	T(al = byte_1f769;);	// 334                  mov     al, ds:byte_1F769 ;~ 01A2:0296
cs=0x1a2;eip=0x000299; 	X(byte_1f817 = al;);	// 335                  mov     ds:byte_1F817, al ;~ 01A2:0299
cs=0x1a2;eip=0x00029c; 	T(al = byte_1f885;);	// 336                  mov     al, ds:byte_1F885 ;~ 01A2:029C
cs=0x1a2;eip=0x00029f; 	X(byte_1f769 = al;);	// 337                  mov     ds:byte_1F769, al ;~ 01A2:029F
cs=0x1a2;eip=0x0002a2; 	T(TEST(byte_1f85a, 4));	// 338                  test    ds:byte_1F85A, 4 ;~ 01A2:02A2
cs=0x1a2;eip=0x0002a7; 	J(JZ(loc_102bd));	// 339                  jz      short loc_102BD ;~ 01A2:02A7
cs=0x1a2;eip=0x0002a9; 	T(al = byte_1f885;);	// 340                  mov     al, ds:byte_1F885 ;~ 01A2:02A9
cs=0x1a2;eip=0x0002ac; 	T(AND(al, 0x8F));	// 341                  and     al, 8Fh ;~ 01A2:02AC
cs=0x1a2;eip=0x0002ae; 	T(ah = al;);	// 342                  mov     ah, al ;~ 01A2:02AE
cs=0x1a2;eip=0x0002b0; 	T(AND(ah, 3));	// 343                  and     ah, 3 ;~ 01A2:02B0
cs=0x1a2;eip=0x0002b3; 	J(JZ(loc_102bd));	// 344                  jz      short loc_102BD ;~ 01A2:02B3
cs=0x1a2;eip=0x0002b5; 	T(AND(al, 0x83));	// 345                  and     al, 83h ;~ 01A2:02B5
cs=0x1a2;eip=0x0002b7; 	X(byte_1f885 = al;);	// 346                  mov     ds:byte_1F885, al ;~ 01A2:02B7
cs=0x1a2;eip=0x0002ba; 	X(byte_1f769 = al;);	// 347                  mov     ds:byte_1F769, al ;~ 01A2:02BA
loc_102bd:
	// 4394 
cs=0x1a2;eip=0x0002bd; 	T(CMP(byte_1f799, 0));	// 351                  cmp     ds:byte_1F799, 0 ;~ 01A2:02BD
cs=0x1a2;eip=0x0002c2; 	J(JZ(loc_102c8));	// 352                  jz      short loc_102C8 ;~ 01A2:02C2
cs=0x1a2;eip=0x0002c4; 	X(DEC(byte_1f799));	// 353                  dec     ds:byte_1F799 ;~ 01A2:02C4
loc_102c8:
	// 4395 
cs=0x1a2;eip=0x0002c8; 	T(al = byte_1f830;);	// 356                  mov     al, ds:byte_1F830 ;~ 01A2:02C8
cs=0x1a2;eip=0x0002cb; 	T(INC(al));	// 357                  inc     al ;~ 01A2:02CB
cs=0x1a2;eip=0x0002cd; 	T(CMP(al, 3));	// 358                  cmp     al, 3 ;~ 01A2:02CD
cs=0x1a2;eip=0x0002cf; 	J(JC(loc_102d3));	// 359                  jb      short loc_102D3 ;~ 01A2:02CF
cs=0x1a2;eip=0x0002d1; 	T(XOR(al, al));	// 360                  xor     al, al ;~ 01A2:02D1
loc_102d3:
	// 4396 
cs=0x1a2;eip=0x0002d3; 	X(byte_1f830 = al;);	// 363                  mov     ds:byte_1F830, al ;~ 01A2:02D3
cs=0x1a2;eip=0x0002d6; 	J(CALL(sub_15f4c,0));	// 364                  call    sub_15F4C ;~ 01A2:02D6
cs=0x1a2;eip=0x0002d9; 	J(CALL(sub_13b35,0));	// 365                  call    sub_13B35 ;~ 01A2:02D9
cs=0x1a2;eip=0x0002dc; 	J(CALL(sub_1570b,0));	// 366                  call    sub_1570B ;~ 01A2:02DC
cs=0x1a2;eip=0x0002df; 	J(CALL(sub_1545e,0));	// 367                  call    sub_1545E ;~ 01A2:02DF
cs=0x1a2;eip=0x0002e2; 	T(CMP(byte_1f76f, 0));	// 368                  cmp     ds:byte_1F76F, 0 ;~ 01A2:02E2
cs=0x1a2;eip=0x0002e7; 	J(JZ(loc_102ec));	// 369                  jz      short loc_102EC ;~ 01A2:02E7
cs=0x1a2;eip=0x0002e9; 	J(CALL(sub_1d8c3,0));	// 371                  call    sub_1D8C3 ;~ 01A2:02E9
loc_102ec:
	// 4397 
cs=0x1a2;eip=0x0002ec; 	T(CMP(byte_1f726, 0));	// 374                  cmp     ds:byte_1F726, 0 ;~ 01A2:02EC
cs=0x1a2;eip=0x0002f1; 	J(JZ(loc_102ff));	// 375                  jz      short loc_102FF ;~ 01A2:02F1
cs=0x1a2;eip=0x0002f3; 	J(JS(loc_102ff));	// 376                  js      short loc_102FF ;~ 01A2:02F3
cs=0x1a2;eip=0x0002f5; 	J(CALL(sub_1ddb5,0));	// 377                  call    sub_1DDB5 ;~ 01A2:02F5
cs=0x1a2;eip=0x0002f8; 	X(byte_1f726 = 0;);	// 378                  mov     ds:byte_1F726, 0 ;~ 01A2:02F8
cs=0x1a2;eip=0x0002fd; 	J(JMP(loc_10306));	// 379                  jmp     short loc_10306 ;~ 01A2:02FD
loc_102ff:
	// 4398 
cs=0x1a2;eip=0x0002ff; 	T(CMP(byte_1f740, 0));	// 384                  cmp     ds:byte_1F740, 0 ;~ 01A2:02FF
cs=0x1a2;eip=0x000304; 	J(JZ(loc_10316));	// 385                  jz      short loc_10316 ;~ 01A2:0304
loc_10306:
	// 4399 
cs=0x1a2;eip=0x000306; 	T(si = *(dw*)(((db*)&seg_1f171)+1););	// 388                  mov     si, seg_1F171+1 ;~ 01A2:0306
cs=0x1a2;eip=0x00030a; 	T(di = word_1f190;);	// 389                  mov     di, word_1F190 ;~ 01A2:030A
cs=0x1a2;eip=0x00030e; 	X(byte_1f76f = 0;);	// 390                  mov     ds:byte_1F76F, 0 ;~ 01A2:030E
cs=0x1a2;eip=0x000313; 	J(CALL(sub_188ac,0));	// 391                  call    sub_188AC ;~ 01A2:0313
loc_10316:
	// 4400 
cs=0x1a2;eip=0x000316; 	J(CALL(sub_15465,0));	// 394                  call    sub_15465 ;~ 01A2:0316
cs=0x1a2;eip=0x000319; 	J(CALL(sub_110e3,0));	// 395                  call    sub_110E3 ;~ 01A2:0319
cs=0x1a2;eip=0x00031c; 	J(CALL(sub_13618,0));	// 396                  call    sub_13618 ;~ 01A2:031C
cs=0x1a2;eip=0x00031f; 	J(CALL(sub_1d448,0));	// 397                  call    sub_1D448 ;~ 01A2:031F
cs=0x1a2;eip=0x000322; 	J(CALL(sub_18706,0));	// 398                  call    sub_18706 ;~ 01A2:0322
cs=0x1a2;eip=0x000325; 	J(CALL(sub_10f68,0));	// 399                  call    sub_10F68 ;~ 01A2:0325
loc_10328:
	// 4401 
cs=0x1a2;eip=0x000328; 	T(CMP(seg_1149a, 2));	// 402                  cmp     cs:seg_1149A, 2 ;~ 01A2:0328
cs=0x1a2;eip=0x00032e; 	J(JC(loc_10328));	// 403                  jb      short loc_10328 ;~ 01A2:032E
cs=0x1a2;eip=0x000330; 	X(seg_1149a = 0;);	// 404                  mov     cs:seg_1149A, 0 ;~ 01A2:0330
cs=0x1a2;eip=0x000337; 	T(TEST(byte_1f839, 0x80));	// 405                  test    ds:byte_1F839, 80h ;~ 01A2:0337
cs=0x1a2;eip=0x00033c; 	X(PUSHF);	// 406                  pushf ;~ 01A2:033C
cs=0x1a2;eip=0x00033d; 	X(AND(byte_1f839, 0x7F));	// 407                  and     ds:byte_1F839, 7Fh ;~ 01A2:033D
cs=0x1a2;eip=0x000342; 	X(POPF);	// 408                  popf ;~ 01A2:0342
cs=0x1a2;eip=0x000343; 	J(JZ(loc_10348));	// 409                  jz      short loc_10348 ;~ 01A2:0343
cs=0x1a2;eip=0x000345; 	J(CALL(sub_1369f,0));	// 410                  call    sub_1369F ;~ 01A2:0345
loc_10348:
	// 4402 
cs=0x1a2;eip=0x000348; 	X(PUSH(ax));	// 413                  push    ax ;~ 01A2:0348
cs=0x1a2;eip=0x000349; 	X(PUSH(bx));	// 414                  push    bx ;~ 01A2:0349
cs=0x1a2;eip=0x00034a; 	X(PUSH(cx));	// 415                  push    cx ;~ 01A2:034A
cs=0x1a2;eip=0x00034b; 	X(PUSH(dx));	// 416                  push    dx ;~ 01A2:034B
cs=0x1a2;eip=0x00034c; 	X(PUSH(bp));	// 417                  push    bp ;~ 01A2:034C
cs=0x1a2;eip=0x00034d; 	X(PUSH(si));	// 418                  push    si ;~ 01A2:034D
cs=0x1a2;eip=0x00034e; 	X(PUSH(di));	// 419                  push    di ;~ 01A2:034E
cs=0x1a2;eip=0x00034f; 	X(PUSH(es));	// 420                  push    es ;~ 01A2:034F
cs=0x1a2;eip=0x000350; 	X(PUSH(ds));	// 421                  push    ds ;~ 01A2:0350
cs=0x1a2;eip=0x000351; 	J(CALL(sub_1c566,0));	// 422                  call    sub_1C566 ;~ 01A2:0351
cs=0x1a2;eip=0x000354; 	J(JNZ(loc_1035c));	// 423                  jnz     short loc_1035C ;~ 01A2:0354
cs=0x1a2;eip=0x000356; 	J(CALL(sub_1c5dd,0));	// 424                  call    sub_1C5DD ;~ 01A2:0356
cs=0x1a2;eip=0x000359; 	X(byte_1f886 = al;);	// 425                  mov     ds:byte_1F886, al ;~ 01A2:0359
loc_1035c:
	// 4403 
cs=0x1a2;eip=0x00035c; 	X(POP(ds));	// 428                  pop     ds ;~ 01A2:035C
cs=0x1a2;eip=0x00035d; 	X(POP(es));	// 429                  pop     es ;~ 01A2:035D
cs=0x1a2;eip=0x00035e; 	X(POP(di));	// 431                  pop     di ;~ 01A2:035E
cs=0x1a2;eip=0x00035f; 	X(POP(si));	// 432                  pop     si ;~ 01A2:035F
cs=0x1a2;eip=0x000360; 	X(POP(bp));	// 433                  pop     bp ;~ 01A2:0360
cs=0x1a2;eip=0x000361; 	X(POP(dx));	// 434                  pop     dx ;~ 01A2:0361
cs=0x1a2;eip=0x000362; 	X(POP(cx));	// 435                  pop     cx ;~ 01A2:0362
cs=0x1a2;eip=0x000363; 	X(POP(bx));	// 436                  pop     bx ;~ 01A2:0363
cs=0x1a2;eip=0x000364; 	X(POP(ax));	// 437                  pop     ax ;~ 01A2:0364
cs=0x1a2;eip=0x000365; 	T(al = byte_1f886;);	// 438                  mov     al, ds:byte_1F886 ;~ 01A2:0365
cs=0x1a2;eip=0x000368; 	T(CMP(al, 0x3F));	// 439                  cmp     al, 3Fh ; '?' ;~ 01A2:0368
cs=0x1a2;eip=0x00036a; 	J(JNZ(loc_1037a));	// 440                  jnz     short loc_1037A ;~ 01A2:036A
cs=0x1a2;eip=0x00036c; 	T(TEST(byte_1f873, 8));	// 442                  test    ds:byte_1F873, 8 ;~ 01A2:036C
cs=0x1a2;eip=0x000371; 	X(PUSHF);	// 443                  pushf ;~ 01A2:0371
cs=0x1a2;eip=0x000372; 	X(OR(byte_1f873, 8));	// 444                  or      ds:byte_1F873, 8 ;~ 01A2:0372
cs=0x1a2;eip=0x000377; 	X(POPF);	// 445                  popf ;~ 01A2:0377
cs=0x1a2;eip=0x000378; 	T(XOR(al, al));	// 446                  xor     al, al ;~ 01A2:0378
loc_1037a:
	// 4404 
cs=0x1a2;eip=0x00037a; 	T(CMP(al, 0x40));	// 449                  cmp     al, 40h ; '@' ;~ 01A2:037A
cs=0x1a2;eip=0x00037c; 	J(JNZ(loc_1038c));	// 450                  jnz     short loc_1038C ;~ 01A2:037C
cs=0x1a2;eip=0x00037e; 	T(TEST(byte_1f873, 0x10));	// 451                  test    ds:byte_1F873, 10h ;~ 01A2:037E
cs=0x1a2;eip=0x000383; 	X(PUSHF);	// 452                  pushf ;~ 01A2:0383
cs=0x1a2;eip=0x000384; 	X(OR(byte_1f873, 0x10));	// 453                  or      ds:byte_1F873, 10h ;~ 01A2:0384
cs=0x1a2;eip=0x000389; 	X(POPF);	// 454                  popf ;~ 01A2:0389
cs=0x1a2;eip=0x00038a; 	T(XOR(al, al));	// 455                  xor     al, al ;~ 01A2:038A
loc_1038c:
	// 4405 
cs=0x1a2;eip=0x00038c; 	T(OR(al, al));	// 458                  or      al, al ;~ 01A2:038C
cs=0x1a2;eip=0x00038e; 	J(JNZ(loc_10393));	// 459                  jnz     short loc_10393 ;~ 01A2:038E
cs=0x1a2;eip=0x000390; 	J(JMP(loc_10484));	// 460                  jmp     loc_10484 ;~ 01A2:0390
loc_10393:
	// 4406 
cs=0x1a2;eip=0x000393; 	T(CMP(al, 0x42));	// 464                  cmp     al, 42h ; 'B' ;~ 01A2:0393
cs=0x1a2;eip=0x000395; 	J(JNZ(loc_1039d));	// 465                  jnz     short loc_1039D ;~ 01A2:0395
cs=0x1a2;eip=0x000397; 	J(CALL(sub_13514,0));	// 466                  call    sub_13514 ;~ 01A2:0397
cs=0x1a2;eip=0x00039a; 	J(CALL(sub_19d33,0));	// 467                  call    sub_19D33 ;~ 01A2:039A
loc_1039d:
	// 4407 
cs=0x1a2;eip=0x00039d; 	T(CMP(al, 0x41));	// 470                  cmp     al, 41h ; 'A' ;~ 01A2:039D
cs=0x1a2;eip=0x00039f; 	J(JNZ(loc_103ad));	// 471                  jnz     short loc_103AD ;~ 01A2:039F
cs=0x1a2;eip=0x0003a1; 	J(CALL(sub_115eb,0));	// 472                  call    sub_115EB ;~ 01A2:03A1
cs=0x1a2;eip=0x0003a4; 	J(CALL(sub_19ce8,0));	// 473                  call    sub_19CE8 ;~ 01A2:03A4
cs=0x1a2;eip=0x0003a7; 	J(CALL(sub_11685,0));	// 474                  call    sub_11685 ;~ 01A2:03A7
cs=0x1a2;eip=0x0003aa; 	J(JMP(loc_10484));	// 475                  jmp     loc_10484 ;~ 01A2:03AA
loc_103ad:
	// 4408 
cs=0x1a2;eip=0x0003ad; 	T(TEST(byte_1f85a, 1));	// 479                  test    ds:byte_1F85A, 1 ;~ 01A2:03AD
cs=0x1a2;eip=0x0003b2; 	J(JZ(loc_103bb));	// 480                  jz      short loc_103BB ;~ 01A2:03B2
cs=0x1a2;eip=0x0003b4; 	T(CMP(al, 0x43));	// 481                  cmp     al, 43h ; 'C' ;~ 01A2:03B4
cs=0x1a2;eip=0x0003b6; 	J(JNZ(loc_103bb));	// 482                  jnz     short loc_103BB ;~ 01A2:03B6
cs=0x1a2;eip=0x0003b8; 	J(JMP(loc_10484));	// 483                  jmp     loc_10484 ;~ 01A2:03B8
loc_103bb:
	// 4409 
cs=0x1a2;eip=0x0003bb; 	J(CALL(sub_19d33,0));	// 488                  call    sub_19D33 ;~ 01A2:03BB
cs=0x1a2;eip=0x0003be; 	T(CMP(byte_1f73f, 0));	// 489                  cmp     ds:byte_1F73F, 0 ;~ 01A2:03BE
cs=0x1a2;eip=0x0003c3; 	J(JZ(loc_103cd));	// 490                  jz      short loc_103CD ;~ 01A2:03C3
cs=0x1a2;eip=0x0003c5; 	J(CALL(sub_121aa,0));	// 491                  call    sub_121AA ;~ 01A2:03C5
cs=0x1a2;eip=0x0003c8; 	J(JS(loc_103cd));	// 492                  js      short loc_103CD ;~ 01A2:03C8
cs=0x1a2;eip=0x0003ca; 	J(JMP(loc_10484));	// 493                  jmp     loc_10484 ;~ 01A2:03CA
loc_103cd:
	// 4410 
cs=0x1a2;eip=0x0003cd; 	T(CMP(al, 0x23));	// 498                  cmp     al, 23h ; '#' ;~ 01A2:03CD
cs=0x1a2;eip=0x0003cf; 	J(JNZ(loc_10420));	// 499                  jnz     short loc_10420 ;~ 01A2:03CF
cs=0x1a2;eip=0x0003d1; 	T(CMP(word_1f3ea, 0));	// 500                  cmp     ds:word_1F3EA, 0 ;~ 01A2:03D1
cs=0x1a2;eip=0x0003d6; 	J(JNZ(loc_10403));	// 501                  jnz     short loc_10403 ;~ 01A2:03D6
cs=0x1a2;eip=0x0003d8; 	T(cx = word_1f6fa;);	// 502                  mov     cx, ds:word_1F6FA ;~ 01A2:03D8
cs=0x1a2;eip=0x0003dc; 	T(OR(cx, cx));	// 503                  or      cx, cx ;~ 01A2:03DC
cs=0x1a2;eip=0x0003de; 	J(JNZ(loc_103e3));	// 504                  jnz     short loc_103E3 ;~ 01A2:03DE
cs=0x1a2;eip=0x0003e0; 	J(JMP(loc_10484));	// 505                  jmp     loc_10484 ;~ 01A2:03E0
loc_103e3:
	// 4411 
cs=0x1a2;eip=0x0003e3; 	J(CALL(sub_186d1,0));	// 509                  call    sub_186D1 ;~ 01A2:03E3
cs=0x1a2;eip=0x0003e6; 	J(JNZ(loc_103eb));	// 510                  jnz     short loc_103EB ;~ 01A2:03E6
cs=0x1a2;eip=0x0003e8; 	J(JMP(loc_10484));	// 511                  jmp     loc_10484 ;~ 01A2:03E8
loc_103eb:
	// 4412 
cs=0x1a2;eip=0x0003eb; 	J(CALL(sub_1d445,0));	// 515                  call    sub_1D445 ;~ 01A2:03EB
cs=0x1a2;eip=0x0003ee; 	X(PUSH(cx));	// 516                  push    cx ;~ 01A2:03EE
cs=0x1a2;eip=0x0003ef; 	J(CALL(sub_188c9,0));	// 517                  call    sub_188C9 ;~ 01A2:03EF
cs=0x1a2;eip=0x0003f2; 	X(POP(cx));	// 518                  pop     cx ;~ 01A2:03F2
cs=0x1a2;eip=0x0003f3; 	T(al = byte_1f837;);	// 519                  mov     al, ds:byte_1F837 ;~ 01A2:03F3
cs=0x1a2;eip=0x0003f6; 	X(byte_1f836 = al;);	// 520                  mov     ds:byte_1F836, al ;~ 01A2:03F6
cs=0x1a2;eip=0x0003f9; 	X(word_1f3ea = cx;);	// 521                  mov     ds:word_1F3EA, cx ;~ 01A2:03F9
cs=0x1a2;eip=0x0003fd; 	J(CALL(sub_129cf,0));	// 522                  call    sub_129CF ;~ 01A2:03FD
cs=0x1a2;eip=0x000400; 	J(JMP(loc_1048f));	// 523                  jmp     loc_1048F ;~ 01A2:0400
loc_10403:
	// 4413 
cs=0x1a2;eip=0x000403; 	J(CALL(sub_1d445,0));	// 527                  call    sub_1D445 ;~ 01A2:0403
cs=0x1a2;eip=0x000406; 	J(CALL(sub_188c9,0));	// 528                  call    sub_188C9 ;~ 01A2:0406
cs=0x1a2;eip=0x000409; 	T(ax = word_1f3ea;);	// 529                  mov     ax, ds:word_1F3EA ;~ 01A2:0409
cs=0x1a2;eip=0x00040c; 	X(word_1f6fa = ax;);	// 530                  mov     ds:word_1F6FA, ax ;~ 01A2:040C
cs=0x1a2;eip=0x00040f; 	T(al = byte_1f836;);	// 531                  mov     al, ds:byte_1F836 ;~ 01A2:040F
cs=0x1a2;eip=0x000412; 	X(byte_1f837 = al;);	// 532                  mov     ds:byte_1F837, al ;~ 01A2:0412
cs=0x1a2;eip=0x000415; 	J(CALL(sub_134bf,0));	// 533                  call    sub_134BF ;~ 01A2:0415
cs=0x1a2;eip=0x000418; 	J(CALL(sub_1d9c3,0));	// 534                  call    sub_1D9C3 ;~ 01A2:0418
cs=0x1a2;eip=0x00041b; 	J(CALL(sub_129cf,0));	// 535                  call    sub_129CF ;~ 01A2:041B
cs=0x1a2;eip=0x00041e; 	J(JMP(loc_1048f));	// 536                  jmp     short loc_1048F ;~ 01A2:041E
loc_10420:
	// 4414 
cs=0x1a2;eip=0x000420; 	T(CMP(al, 0x1F));	// 540                  cmp     al, 1Fh ;~ 01A2:0420
cs=0x1a2;eip=0x000422; 	J(JNZ(loc_10430));	// 541                  jnz     short loc_10430 ;~ 01A2:0422
cs=0x1a2;eip=0x000424; 	T(TEST(byte_1f841, 1));	// 542                  test    ds:byte_1F841, 1 ;~ 01A2:0424
cs=0x1a2;eip=0x000429; 	X(PUSHF);	// 543                  pushf ;~ 01A2:0429
cs=0x1a2;eip=0x00042a; 	X(OR(byte_1f841, 1));	// 544                  or      ds:byte_1F841, 1 ;~ 01A2:042A
cs=0x1a2;eip=0x00042f; 	X(POPF);	// 545                  popf ;~ 01A2:042F
loc_10430:
	// 4415 
cs=0x1a2;eip=0x000430; 	T(TEST(byte_1f873, 2));	// 548                  test    ds:byte_1F873, 2 ;~ 01A2:0430
cs=0x1a2;eip=0x000435; 	X(PUSHF);	// 549                  pushf ;~ 01A2:0435
cs=0x1a2;eip=0x000436; 	X(OR(byte_1f873, 2));	// 550                  or      ds:byte_1F873, 2 ;~ 01A2:0436
cs=0x1a2;eip=0x00043b; 	X(POPF);	// 551                  popf ;~ 01A2:043B
cs=0x1a2;eip=0x00043c; 	T(CMP(al, 0x1C));	// 552                  cmp     al, 1Ch ;~ 01A2:043C
cs=0x1a2;eip=0x00043e; 	J(JZ(loc_10450));	// 553                  jz      short loc_10450 ;~ 01A2:043E
cs=0x1a2;eip=0x000440; 	T(TEST(byte_1f873, 2));	// 554                  test    ds:byte_1F873, 2 ;~ 01A2:0440
cs=0x1a2;eip=0x000445; 	X(PUSHF);	// 555                  pushf ;~ 01A2:0445
cs=0x1a2;eip=0x000446; 	X(AND(byte_1f873, 0x0FD));	// 556                  and     ds:byte_1F873, 0FDh ;~ 01A2:0446
cs=0x1a2;eip=0x00044b; 	X(POPF);	// 557                  popf ;~ 01A2:044B
cs=0x1a2;eip=0x00044c; 	T(CMP(al, 0x39));	// 558                  cmp     al, 39h ; '9' ;~ 01A2:044C
cs=0x1a2;eip=0x00044e; 	J(JNZ(loc_10475));	// 559                  jnz     short loc_10475 ;~ 01A2:044E
loc_10450:
	// 4416 
cs=0x1a2;eip=0x000450; 	T(CMP(byte_1f81d, 0));	// 562                  cmp     ds:byte_1F81D, 0 ;~ 01A2:0450
cs=0x1a2;eip=0x000455; 	J(JZ(loc_10475));	// 563                  jz      short loc_10475 ;~ 01A2:0455
cs=0x1a2;eip=0x000457; 	J(CALL(sub_115eb,0));	// 564                  call    sub_115EB ;~ 01A2:0457
cs=0x1a2;eip=0x00045a; 	J(CALL(sub_124c9,0));	// 565                  call    sub_124C9 ;~ 01A2:045A
cs=0x1a2;eip=0x00045d; 	T(CMP(byte_1f770, 0));	// 566                  cmp     ds:byte_1F770, 0 ;~ 01A2:045D
cs=0x1a2;eip=0x000462; 	J(JZ(loc_1046c));	// 567                  jz      short loc_1046C ;~ 01A2:0462
cs=0x1a2;eip=0x000464; 	J(CALL(sub_188c9,0));	// 568                  call    sub_188C9 ;~ 01A2:0464
cs=0x1a2;eip=0x000467; 	X(byte_1f740 = 0;);	// 569                  mov     ds:byte_1F740, 0 ;~ 01A2:0467
loc_1046c:
	// 4417 
cs=0x1a2;eip=0x00046c; 	J(CALL(_group20,m2c::kloc_16f62));	// 572                  call    loc_16F62 ;~ 01A2:046C
cs=0x1a2;eip=0x00046f; 	J(CALL(sub_11685,0));	// 573                  call    sub_11685 ;~ 01A2:046F
cs=0x1a2;eip=0x000472; 	J(JMP(sub_10b61));	// 574                  jmp     sub_10B61 ;~ 01A2:0472
loc_10475:
	// 4418 
cs=0x1a2;eip=0x000475; 	T(CMP(al, 0x3B));	// 579                  cmp     al, 3Bh ; ';' ;~ 01A2:0475
cs=0x1a2;eip=0x000477; 	J(JNZ(loc_10484));	// 580                  jnz     short loc_10484 ;~ 01A2:0477
cs=0x1a2;eip=0x000479; 	X(byte_1f839 = 0;);	// 582                  mov     ds:byte_1F839, 0 ;~ 01A2:0479
cs=0x1a2;eip=0x00047e; 	J(CALL(sub_1369f,0));	// 583                  call    sub_1369F ;~ 01A2:047E
cs=0x1a2;eip=0x000481; 	J(JMP(sub_10b61));	// 585                  jmp     sub_10B61 ;~ 01A2:0481
loc_10484:
	// 4419 
cs=0x1a2;eip=0x000484; 	J(CALL(sub_1d887,0));	// 590                  call    sub_1D887 ;~ 01A2:0484
cs=0x1a2;eip=0x000487; 	J(CALL(sub_188c9,0));	// 591                  call    sub_188C9 ;~ 01A2:0487
cs=0x1a2;eip=0x00048a; 	X(byte_1f740 = 0;);	// 592                  mov     ds:byte_1F740, 0 ;~ 01A2:048A
loc_1048f:
	// 4420 
cs=0x1a2;eip=0x00048f; 	J(CALL(_group20,m2c::kloc_16f62));	// 596                  call    loc_16F62 ;~ 01A2:048F
loc_10492:
	// 4421 
cs=0x1a2;eip=0x000492; 	T(ax = word_1f1f8;);	// 599                  mov     ax, word_1F1F8 ;~ 01A2:0492
cs=0x1a2;eip=0x000495; 	T(OR(ax, ax));	// 600                  or      ax, ax ;~ 01A2:0495
cs=0x1a2;eip=0x000497; 	J(JNZ(loc_1049c));	// 601                  jnz     short loc_1049C ;~ 01A2:0497
cs=0x1a2;eip=0x000499; 	J(JMP(loc_10573));	// 602                  jmp     loc_10573 ;~ 01A2:0499
loc_1049c:
	// 4422 
cs=0x1a2;eip=0x00049c; 	X(PUSH(ax));	// 606                  push    ax ;~ 01A2:049C
cs=0x1a2;eip=0x00049d; 	T(CMP(byte_1f73f, 0));	// 607                  cmp     ds:byte_1F73F, 0 ;~ 01A2:049D
cs=0x1a2;eip=0x0004a2; 	J(JZ(loc_104a7));	// 608                  jz      short loc_104A7 ;~ 01A2:04A2
cs=0x1a2;eip=0x0004a4; 	J(CALL(sub_129cf,0));	// 609                  call    sub_129CF ;~ 01A2:04A4
loc_104a7:
	// 4423 
cs=0x1a2;eip=0x0004a7; 	X(POP(ax));	// 612                  pop     ax ;~ 01A2:04A7
cs=0x1a2;eip=0x0004a8; 	T(si = ax;);	// 613                  mov     si, ax ;~ 01A2:04A8
cs=0x1a2;eip=0x0004aa; 	T(CMP(*(raddr(ds,si)), 0x50));	// 614                  cmp     byte ptr [si], 50h ; 'P' ;~ 01A2:04AA
cs=0x1a2;eip=0x0004ad; 	J(JNZ(loc_104b2));	// 615                  jnz     short loc_104B2 ;~ 01A2:04AD
cs=0x1a2;eip=0x0004af; 	T(DEC(si));	// 616                  dec     si ;~ 01A2:04AF
cs=0x1a2;eip=0x0004b0; 	T(ax = si;);	// 617                  mov     ax, si ;~ 01A2:04B0
loc_104b2:
	// 4424 
cs=0x1a2;eip=0x0004b2; 	T(INC(ax));	// 620                  inc     ax ;~ 01A2:04B2
cs=0x1a2;eip=0x0004b3; 	X(word_1f1f8 = ax;);	// 621                  mov     word_1F1F8, ax ;~ 01A2:04B3
cs=0x1a2;eip=0x0004b6; 	T(al = byte_1f777;);	// 622                  mov     al, ds:byte_1F777 ;~ 01A2:04B6
cs=0x1a2;eip=0x0004b9; 	X(PUSH(si));	// 623                  push    si ;~ 01A2:04B9
cs=0x1a2;eip=0x0004ba; 	J(CALL(sub_10bb0,0));	// 624                  call    sub_10BB0 ;~ 01A2:04BA
cs=0x1a2;eip=0x0004bd; 	X(POP(si));	// 625                  pop     si ;~ 01A2:04BD
cs=0x1a2;eip=0x0004be; 	T(MOV(cl, *(raddr(ds,si))));	// 626                  mov     cl, [si] ;~ 01A2:04BE
cs=0x1a2;eip=0x0004c0; 	T(CMP(cl, 0x40));	// 627                  cmp     cl, 40h ; '@' ;~ 01A2:04C0
cs=0x1a2;eip=0x0004c3; 	J(JNZ(loc_104d1));	// 628                  jnz     short loc_104D1 ;~ 01A2:04C3
cs=0x1a2;eip=0x0004c5; 	X(byte_1f82f = 1;);	// 629                  mov     ds:byte_1F82F, 1 ;~ 01A2:04C5
cs=0x1a2;eip=0x0004ca; 	T(INC(si));	// 630                  inc     si ;~ 01A2:04CA
cs=0x1a2;eip=0x0004cb; 	T(MOV(cl, *(raddr(ds,si))));	// 631                  mov     cl, [si] ;~ 01A2:04CB
cs=0x1a2;eip=0x0004cd; 	X(INC(word_1f1f8));	// 632                  inc     word_1F1F8 ;~ 01A2:04CD
loc_104d1:
	// 4425 
cs=0x1a2;eip=0x0004d1; 	X(byte_1f8de = cl;);	// 635                  mov     ds:byte_1F8DE, cl ;~ 01A2:04D1
cs=0x1a2;eip=0x0004d5; 	T(ADD(ch, cl));	// 636                  add     ch, cl ;~ 01A2:04D5
cs=0x1a2;eip=0x0004d7; 	T(es = *(dw*)(((db*)&off_1f194)+2););	// 637                  mov     es, word ptr off_1F194+2 ;~ 01A2:04D7
cs=0x1a2;eip=0x0004db; 	T(di = word_1f198;);	// 639                  mov     di, word_1F198 ;~ 01A2:04DB
cs=0x1a2;eip=0x0004df; 	T(si = word_1f1cc;);	// 640                  mov     si, word_1F1CC ;~ 01A2:04DF
cs=0x1a2;eip=0x0004e3; 	J(CALL(sub_116e0,0));	// 641                  call    sub_116E0 ;~ 01A2:04E3
cs=0x1a2;eip=0x0004e6; 	J(JNZ(loc_104eb));	// 642                  jnz     short loc_104EB ;~ 01A2:04E6
cs=0x1a2;eip=0x0004e8; 	J(JMP(loc_10867));	// 643                  jmp     loc_10867 ;~ 01A2:04E8
loc_104eb:
	// 4426 
cs=0x1a2;eip=0x0004eb; 	T(di = word_1f1ac;);	// 647                  mov     di, word_1F1AC ;~ 01A2:04EB
cs=0x1a2;eip=0x0004ef; 	T(MOV(al, *(raddr(ds,di+1))));	// 648                  mov     al, [di+1] ;~ 01A2:04EF
cs=0x1a2;eip=0x0004f2; 	T(OR(al, al));	// 649                  or      al, al ;~ 01A2:04F2
cs=0x1a2;eip=0x0004f4; 	J(JNS(loc_104fa));	// 650                  jns     short loc_104FA ;~ 01A2:04F4
cs=0x1a2;eip=0x0004f6; 	T(CMP(al, 0x0FD));	// 651                  cmp     al, 0FDh ;~ 01A2:04F6
cs=0x1a2;eip=0x0004f8; 	J(JNZ(loc_10530));	// 652                  jnz     short loc_10530 ;~ 01A2:04F8
loc_104fa:
	// 4427 
cs=0x1a2;eip=0x0004fa; 	T(MOV(si, *(dw*)(raddr(ds,di+2))));	// 655                  mov     si, [di+2] ;~ 01A2:04FA
cs=0x1a2;eip=0x0004fd; 	T(TEST(*(raddr(ds,si+3)), 0x40));	// 656                  test    byte ptr [si+3], 40h ;~ 01A2:04FD
cs=0x1a2;eip=0x000501; 	J(JZ(loc_10530));	// 657                  jz      short loc_10530 ;~ 01A2:0501
cs=0x1a2;eip=0x000503; 	X(PUSH(ax));	// 658                  push    ax ;~ 01A2:0503
cs=0x1a2;eip=0x000504; 	X(PUSH(dx));	// 659                  push    dx ;~ 01A2:0504
cs=0x1a2;eip=0x000505; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 660                  mov     ax, [si+4] ;~ 01A2:0505
cs=0x1a2;eip=0x000508; 	T(dx = 0;);	// 661                  mov     dx, 0 ;~ 01A2:0508
cs=0x1a2;eip=0x00050b; 	J(CALL(sub_16441,0));	// 662                  call    sub_16441 ;~ 01A2:050B
cs=0x1a2;eip=0x00050e; 	X(POP(dx));	// 663                  pop     dx ;~ 01A2:050E
cs=0x1a2;eip=0x00050f; 	X(POP(ax));	// 664                  pop     ax ;~ 01A2:050F
cs=0x1a2;eip=0x000510; 	J(JZ(loc_10530));	// 665                  jz      short loc_10530 ;~ 01A2:0510
cs=0x1a2;eip=0x000512; 	X(PUSH(di));	// 666                  push    di ;~ 01A2:0512
cs=0x1a2;eip=0x000513; 	X(PUSH(ax));	// 667                  push    ax ;~ 01A2:0513
cs=0x1a2;eip=0x000514; 	T(di = word_1f1f4;);	// 668                  mov     di, word_1F1F4 ;~ 01A2:0514
cs=0x1a2;eip=0x000518; 	X(MOV(*(dw*)(raddr(ds,di)), 9));	// 669                  mov     word ptr [di], 9 ;~ 01A2:0518
cs=0x1a2;eip=0x00051c; 	X(MOV(*(dw*)(raddr(ds,di+2)), si));	// 670                  mov     [di+2], si ;~ 01A2:051C
cs=0x1a2;eip=0x00051f; 	T(ax = 0;);	// 671                  mov     ax, 0 ;~ 01A2:051F
cs=0x1a2;eip=0x000522; 	X(MOV(*(dw*)(raddr(ds,di+4)), ax));	// 672                  mov     [di+4], ax ;~ 01A2:0522
cs=0x1a2;eip=0x000525; 	X(ADD(word_1f1f4, 6));	// 673                  add     word_1F1F4, 6 ;~ 01A2:0525
cs=0x1a2;eip=0x00052a; 	X(INC(word_1f396));	// 674                  inc     ds:word_1F396 ;~ 01A2:052A
cs=0x1a2;eip=0x00052e; 	X(POP(ax));	// 675                  pop     ax ;~ 01A2:052E
cs=0x1a2;eip=0x00052f; 	X(POP(di));	// 676                  pop     di ;~ 01A2:052F
loc_10530:
	// 4428 
cs=0x1a2;eip=0x000530; 	X(ADD(byte_1f8de, 2));	// 680                  add     ds:byte_1F8DE, 2 ;~ 01A2:0530
cs=0x1a2;eip=0x000535; 	J(JNS(loc_10553));	// 681                  jns     short loc_10553 ;~ 01A2:0535
cs=0x1a2;eip=0x000537; 	T(si = word_1f1c2;);	// 682                  mov     si, word_1F1C2 ;~ 01A2:0537
cs=0x1a2;eip=0x00053b; 	T(TEST(*(raddr(ds,si+0x12)), 1));	// 683                  test    byte ptr [si+12h], 1 ;~ 01A2:053B
cs=0x1a2;eip=0x00053f; 	J(JNZ(loc_10553));	// 684                  jnz     short loc_10553 ;~ 01A2:053F
cs=0x1a2;eip=0x000541; 	X(PUSH(ax));	// 685                  push    ax ;~ 01A2:0541
cs=0x1a2;eip=0x000542; 	T(ax = 0x18;);	// 686                  mov     ax, 18h ;~ 01A2:0542
cs=0x1a2;eip=0x000545; 	J(CALL(sub_1156c,0));	// 687                  call    sub_1156C ;~ 01A2:0545
cs=0x1a2;eip=0x000548; 	X(POP(ax));	// 688                  pop     ax ;~ 01A2:0548
cs=0x1a2;eip=0x000549; 	T(TEST(*(raddr(ds,si+0x12)), 1));	// 689                  test    byte ptr [si+12h], 1 ;~ 01A2:0549
cs=0x1a2;eip=0x00054d; 	X(PUSHF);	// 690                  pushf ;~ 01A2:054D
cs=0x1a2;eip=0x00054e; 	X(OR(*(raddr(ds,si+0x12)), 1));	// 691                  or      byte ptr [si+12h], 1 ;~ 01A2:054E
cs=0x1a2;eip=0x000552; 	X(POPF);	// 692                  popf ;~ 01A2:0552
loc_10553:
	// 4429 
cs=0x1a2;eip=0x000553; 	T(XOR(ah, ah));	// 696                  xor     ah, ah ;~ 01A2:0553
cs=0x1a2;eip=0x000555; 	T(si = 0x0FAC6;);	// 697                  mov     si, 0FAC6h ;~ 01A2:0555
cs=0x1a2;eip=0x000558; 	T(al = byte_1f773;);	// 698                  mov     al, ds:byte_1F773 ;~ 01A2:0558
cs=0x1a2;eip=0x00055b; 	T(ADD(si, ax));	// 699                  add     si, ax ;~ 01A2:055B
cs=0x1a2;eip=0x00055d; 	T(MOV(al, *(raddr(ds,si))));	// 700                  mov     al, [si] ;~ 01A2:055D
cs=0x1a2;eip=0x00055f; 	T(ADD(si, ax));	// 701                  add     si, ax ;~ 01A2:055F
cs=0x1a2;eip=0x000561; 	X(word_1f21e = si;);	// 702                  mov     word_1F21E, si ;~ 01A2:0561
cs=0x1a2;eip=0x000565; 	X(byte_1f779 = 0;);	// 703                  mov     ds:byte_1F779, 0 ;~ 01A2:0565
cs=0x1a2;eip=0x00056a; 	X(word_1f1f8 = 0;);	// 704                  mov     word_1F1F8, 0 ;~ 01A2:056A
cs=0x1a2;eip=0x000570; 	J(JMP(sub_10b61));	// 705                  jmp     sub_10B61 ;~ 01A2:0570
loc_10573:
	// 4430 
cs=0x1a2;eip=0x000573; 	T(si = word_1f1cc;);	// 709                  mov     si, word_1F1CC ;~ 01A2:0573
cs=0x1a2;eip=0x000577; 	T(MOV(ch, *(raddr(ds,si+2))));	// 710                  mov     ch, [si+2] ;~ 01A2:0577
cs=0x1a2;eip=0x00057a; 	T(OR(ch, ch));	// 711                  or      ch, ch ;~ 01A2:057A
cs=0x1a2;eip=0x00057c; 	J(JZ(loc_105a0));	// 712                  jz      short loc_105A0 ;~ 01A2:057C
cs=0x1a2;eip=0x00057e; 	T(MOV(dl, *(raddr(ds,si))));	// 713                  mov     dl, [si] ;~ 01A2:057E
cs=0x1a2;eip=0x000580; 	T(MOV(dh, *(raddr(ds,si+1))));	// 714                  mov     dh, [si+1] ;~ 01A2:0580
cs=0x1a2;eip=0x000583; 	T(es = *(dw*)(((db*)&off_1f194)+2););	// 715                  mov     es, word ptr off_1F194+2 ;~ 01A2:0583
cs=0x1a2;eip=0x000587; 	T(di = word_1f198;);	// 716                  mov     di, word_1F198 ;~ 01A2:0587
cs=0x1a2;eip=0x00058b; 	T(DEC(ch));	// 717                  dec     ch ;~ 01A2:058B
cs=0x1a2;eip=0x00058d; 	J(CALL(sub_116e0,0));	// 718                  call    sub_116E0 ;~ 01A2:058D
cs=0x1a2;eip=0x000590; 	J(JNZ(loc_105a0));	// 719                  jnz     short loc_105A0 ;~ 01A2:0590
cs=0x1a2;eip=0x000592; 	X(byte_1f777 = 0;);	// 720                  mov     ds:byte_1F777, 0 ;~ 01A2:0592
cs=0x1a2;eip=0x000597; 	T(ax = 0x0FB8E;);	// 721                  mov     ax, 0FB8Eh ;~ 01A2:0597
cs=0x1a2;eip=0x00059a; 	X(word_1f1f8 = ax;);	// 722                  mov     word_1F1F8, ax ;~ 01A2:059A
cs=0x1a2;eip=0x00059d; 	J(JMP(loc_10492));	// 723                  jmp     loc_10492 ;~ 01A2:059D
loc_105a0:
	// 4431 
cs=0x1a2;eip=0x0005a0; 	T(al = byte_1f769;);	// 728                  mov     al, ds:byte_1F769 ;~ 01A2:05A0
cs=0x1a2;eip=0x0005a3; 	J(CALL(sub_10bb0,0));	// 729                  call    sub_10BB0 ;~ 01A2:05A3
cs=0x1a2;eip=0x0005a6; 	J(JZ(loc_105b1));	// 730                  jz      short loc_105B1 ;~ 01A2:05A6
cs=0x1a2;eip=0x0005a8; 	T(CMP(byte_1f841, 0));	// 731                  cmp     ds:byte_1F841, 0 ;~ 01A2:05A8
cs=0x1a2;eip=0x0005ad; 	J(JZ(loc_105d8));	// 732                  jz      short loc_105D8 ;~ 01A2:05AD
cs=0x1a2;eip=0x0005af; 	J(JMP(loc_105cc));	// 733                  jmp     short loc_105CC ;~ 01A2:05AF
loc_105b1:
	// 4432 
cs=0x1a2;eip=0x0005b1; 	T(CMP(byte_1f841, 0));	// 737                  cmp     ds:byte_1F841, 0 ;~ 01A2:05B1
cs=0x1a2;eip=0x0005b6; 	J(JNZ(loc_105cc));	// 738                  jnz     short loc_105CC ;~ 01A2:05B6
cs=0x1a2;eip=0x0005b8; 	T(TEST(byte_1f769, 0x80));	// 739                  test    ds:byte_1F769, 80h ;~ 01A2:05B8
cs=0x1a2;eip=0x0005bd; 	J(JNZ(loc_105c2));	// 740                  jnz     short loc_105C2 ;~ 01A2:05BD
cs=0x1a2;eip=0x0005bf; 	J(JMP(loc_10ad0));	// 741                  jmp     loc_10AD0 ;~ 01A2:05BF
loc_105c2:
	// 4433 
cs=0x1a2;eip=0x0005c2; 	T(CMP(byte_1f73f, 0));	// 745                  cmp     ds:byte_1F73F, 0 ;~ 01A2:05C2
cs=0x1a2;eip=0x0005c7; 	J(JZ(loc_105cc));	// 746                  jz      short loc_105CC ;~ 01A2:05C7
cs=0x1a2;eip=0x0005c9; 	J(JMP(loc_10ad0));	// 747                  jmp     loc_10AD0 ;~ 01A2:05C9
loc_105cc:
	// 4434 
cs=0x1a2;eip=0x0005cc; 	X(PUSH(ax));	// 752                  push    ax ;~ 01A2:05CC
cs=0x1a2;eip=0x0005cd; 	X(PUSH(bx));	// 753                  push    bx ;~ 01A2:05CD
cs=0x1a2;eip=0x0005ce; 	X(PUSH(cx));	// 754                  push    cx ;~ 01A2:05CE
cs=0x1a2;eip=0x0005cf; 	X(PUSH(dx));	// 755                  push    dx ;~ 01A2:05CF
cs=0x1a2;eip=0x0005d0; 	X(PUSH(bp));	// 756                  push    bp ;~ 01A2:05D0
cs=0x1a2;eip=0x0005d1; 	X(PUSH(si));	// 757                  push    si ;~ 01A2:05D1
cs=0x1a2;eip=0x0005d2; 	X(PUSH(di));	// 758                  push    di ;~ 01A2:05D2
cs=0x1a2;eip=0x0005d3; 	X(PUSH(es));	// 759                  push    es ;~ 01A2:05D3
cs=0x1a2;eip=0x0005d4; 	X(PUSH(ds));	// 760                  push    ds ;~ 01A2:05D4
cs=0x1a2;eip=0x0005d5; 	J(JMP(loc_10687));	// 761                  jmp     loc_10687 ;~ 01A2:05D5
loc_105d8:
	// 4435 
cs=0x1a2;eip=0x0005d8; 	T(es = *(dw*)(((db*)&off_1f194)+2););	// 766                  mov     es, word ptr off_1F194+2 ;~ 01A2:05D8
cs=0x1a2;eip=0x0005dc; 	T(di = word_1f198;);	// 767                  mov     di, word_1F198 ;~ 01A2:05DC
cs=0x1a2;eip=0x0005e0; 	T(si = word_1f1cc;);	// 768                  mov     si, word_1F1CC ;~ 01A2:05E0
cs=0x1a2;eip=0x0005e4; 	J(CALL(sub_116e0,0));	// 769                  call    sub_116E0 ;~ 01A2:05E4
cs=0x1a2;eip=0x0005e7; 	J(JNS(loc_105ec));	// 770                  jns     short loc_105EC ;~ 01A2:05E7
cs=0x1a2;eip=0x0005e9; 	J(JMP(loc_1089c));	// 771                  jmp     loc_1089C ;~ 01A2:05E9
loc_105ec:
	// 4436 
cs=0x1a2;eip=0x0005ec; 	J(JNZ(loc_105f1));	// 775                  jnz     short loc_105F1 ;~ 01A2:05EC
cs=0x1a2;eip=0x0005ee; 	J(JMP(loc_1066f));	// 776                  jmp     loc_1066F ;~ 01A2:05EE
loc_105f1:
	// 4437 
cs=0x1a2;eip=0x0005f1; 	T(bp = word_1f1ac;);	// 780                  mov     bp, word_1F1AC ;~ 01A2:05F1
cs=0x1a2;eip=0x0005f5; 	T(CMP(*(raddr(ds,bp+1)), 0x0FD));	// 781                  cmp     byte ptr ds:[bp+1], 0FDh ;~ 01A2:05F5
cs=0x1a2;eip=0x0005fa; 	J(JNZ(loc_1063b));	// 782                  jnz     short loc_1063B ;~ 01A2:05FA
cs=0x1a2;eip=0x0005fc; 	T(CMP(*(raddr(ds,bp+0)), 2));	// 783                  cmp     byte ptr ds:[bp+0], 2 ;~ 01A2:05FC
cs=0x1a2;eip=0x000601; 	J(JG(loc_1063b));	// 784                  jg      short loc_1063B ;~ 01A2:0601
cs=0x1a2;eip=0x000603; 	T(ADD(bp, 2));	// 785                  add     bp, 2 ;~ 01A2:0603
cs=0x1a2;eip=0x000606; 	T(MOV(bp, *(dw*)(raddr(ds,bp+0))));	// 786                  mov     bp, ds:[bp+0] ;~ 01A2:0606
cs=0x1a2;eip=0x00060a; 	X(PUSH(si));	// 787                  push    si ;~ 01A2:060A
cs=0x1a2;eip=0x00060b; 	X(PUSH(es));	// 788                  push    es ;~ 01A2:060B
cs=0x1a2;eip=0x00060c; 	T(MOV(si, *(dw*)(raddr(ds,bp+8))));	// 789                  mov     si, ds:[bp+8] ;~ 01A2:060C
cs=0x1a2;eip=0x000610; 	T(MOV(es, *(dw*)(raddr(ds,si+6))));	// 790                  mov     es, word ptr [si+6] ;~ 01A2:0610
cs=0x1a2;eip=0x000613; 	T(MOV(bp, *(dw*)(raddr(ds,si+8))));	// 792                  mov     bp, [si+8] ;~ 01A2:0613
cs=0x1a2;eip=0x000616; 	T(TEST(*(raddr(es,bp+0x0C)), 8));	// 793                  test    byte ptr es:[bp+0Ch], 8 ;~ 01A2:0616
cs=0x1a2;eip=0x00061b; 	T(bp = si;);	// 794                  mov     bp, si ;~ 01A2:061B
cs=0x1a2;eip=0x00061d; 	X(POP(es));	// 795                  pop     es ;~ 01A2:061D
cs=0x1a2;eip=0x00061e; 	X(POP(si));	// 797                  pop     si ;~ 01A2:061E
cs=0x1a2;eip=0x00061f; 	J(JZ(loc_1063b));	// 798                  jz      short loc_1063B ;~ 01A2:061F
cs=0x1a2;eip=0x000621; 	X(PUSH(cx));	// 799                  push    cx ;~ 01A2:0621
cs=0x1a2;eip=0x000622; 	T(MOV(ch, *(raddr(ds,bp+4))));	// 800                  mov     ch, ds:[bp+4] ;~ 01A2:0622
cs=0x1a2;eip=0x000626; 	T(INC(ch));	// 801                  inc     ch ;~ 01A2:0626
cs=0x1a2;eip=0x000628; 	J(CALL(sub_116e0,0));	// 802                  call    sub_116E0 ;~ 01A2:0628
cs=0x1a2;eip=0x00062b; 	X(POP(ax));	// 803                  pop     ax ;~ 01A2:062B
cs=0x1a2;eip=0x00062c; 	J(JNZ(loc_10667));	// 804                  jnz     short loc_10667 ;~ 01A2:062C
cs=0x1a2;eip=0x00062e; 	T(al = ch;);	// 805                  mov     al, ch ;~ 01A2:062E
cs=0x1a2;eip=0x000630; 	T(SUB(al, ah));	// 806                  sub     al, ah ;~ 01A2:0630
cs=0x1a2;eip=0x000632; 	T(CMP(al, 0x14));	// 807                  cmp     al, 14h ;~ 01A2:0632
cs=0x1a2;eip=0x000634; 	J(JNC(loc_10667));	// 808                  jnb     short loc_10667 ;~ 01A2:0634
cs=0x1a2;eip=0x000636; 	X(byte_1f8de = al;);	// 809                  mov     ds:byte_1F8DE, al ;~ 01A2:0636
cs=0x1a2;eip=0x000639; 	J(JMP(loc_10674));	// 810                  jmp     short loc_10674 ;~ 01A2:0639
loc_1063b:
	// 4438 
cs=0x1a2;eip=0x00063b; 	T(TEST(byte_1f77e, 1));	// 815                  test    ds:byte_1F77E, 1 ;~ 01A2:063B
cs=0x1a2;eip=0x000640; 	J(JNZ(loc_10664));	// 816                  jnz     short loc_10664 ;~ 01A2:0640
cs=0x1a2;eip=0x000642; 	T(al = byte_1f8df;);	// 817                  mov     al, ds:byte_1F8DF ;~ 01A2:0642
cs=0x1a2;eip=0x000645; 	T(ah = byte_1f8e0;);	// 818                  mov     ah, ds:byte_1F8E0 ;~ 01A2:0645
cs=0x1a2;eip=0x000649; 	T(TEST(al, 1));	// 819                  test    al, 1 ;~ 01A2:0649
cs=0x1a2;eip=0x00064b; 	J(JNZ(loc_10664));	// 820                  jnz     short loc_10664 ;~ 01A2:064B
cs=0x1a2;eip=0x00064d; 	T(TEST(ah, 1));	// 821                  test    ah, 1 ;~ 01A2:064D
cs=0x1a2;eip=0x000650; 	J(JNZ(loc_10664));	// 822                  jnz     short loc_10664 ;~ 01A2:0650
cs=0x1a2;eip=0x000652; 	T(SAR(al, 1));	// 823                  sar     al, 1 ;~ 01A2:0652
cs=0x1a2;eip=0x000654; 	T(SAR(ah, 1));	// 824                  sar     ah, 1 ;~ 01A2:0654
cs=0x1a2;eip=0x000656; 	T(SUB(dl, al));	// 825                  sub     dl, al ;~ 01A2:0656
cs=0x1a2;eip=0x000658; 	T(SUB(dh, ah));	// 826                  sub     dh, ah ;~ 01A2:0658
cs=0x1a2;eip=0x00065a; 	X(byte_1f8df = al;);	// 827                  mov     ds:byte_1F8DF, al ;~ 01A2:065A
cs=0x1a2;eip=0x00065d; 	X(byte_1f8e0 = ah;);	// 828                  mov     ds:byte_1F8E0, ah ;~ 01A2:065D
cs=0x1a2;eip=0x000661; 	J(JMP(loc_105d8));	// 829                  jmp     loc_105D8 ;~ 01A2:0661
loc_10664:
	// 4439 
cs=0x1a2;eip=0x000664; 	J(JMP(loc_10aae));	// 834                  jmp     loc_10AAE ;~ 01A2:0664
loc_10667:
	// 4440 
cs=0x1a2;eip=0x000667; 	T(ch = ah;);	// 839                  mov     ch, ah ;~ 01A2:0667
cs=0x1a2;eip=0x000669; 	J(CALL(sub_116e0,0));	// 840                  call    sub_116E0 ;~ 01A2:0669
cs=0x1a2;eip=0x00066c; 	J(JMP(loc_10aae));	// 841                  jmp     loc_10AAE ;~ 01A2:066C
loc_1066f:
	// 4441 
cs=0x1a2;eip=0x00066f; 	X(byte_1f8de = 0;);	// 845                  mov     ds:byte_1F8DE, 0 ;~ 01A2:066F
loc_10674:
	// 4442 
cs=0x1a2;eip=0x000674; 	X(PUSH(ax));	// 848                  push    ax ;~ 01A2:0674
cs=0x1a2;eip=0x000675; 	X(PUSH(bx));	// 849                  push    bx ;~ 01A2:0675
cs=0x1a2;eip=0x000676; 	X(PUSH(cx));	// 850                  push    cx ;~ 01A2:0676
cs=0x1a2;eip=0x000677; 	X(PUSH(dx));	// 851                  push    dx ;~ 01A2:0677
cs=0x1a2;eip=0x000678; 	X(PUSH(bp));	// 852                  push    bp ;~ 01A2:0678
cs=0x1a2;eip=0x000679; 	X(PUSH(si));	// 853                  push    si ;~ 01A2:0679
cs=0x1a2;eip=0x00067a; 	X(PUSH(di));	// 854                  push    di ;~ 01A2:067A
cs=0x1a2;eip=0x00067b; 	X(PUSH(es));	// 855                  push    es ;~ 01A2:067B
cs=0x1a2;eip=0x00067c; 	X(PUSH(ds));	// 856                  push    ds ;~ 01A2:067C
cs=0x1a2;eip=0x00067d; 	T(TEST(byte_1f769, 0x80));	// 857                  test    ds:byte_1F769, 80h ;~ 01A2:067D
cs=0x1a2;eip=0x000682; 	J(JNZ(loc_10687));	// 858                  jnz     short loc_10687 ;~ 01A2:0682
cs=0x1a2;eip=0x000684; 	J(JMP(loc_10732));	// 859                  jmp     loc_10732 ;~ 01A2:0684
loc_10687:
	// 4443 
cs=0x1a2;eip=0x000687; 	X(word_1f1e4 = 0;);	// 864                  mov     word_1F1E4, 0 ;~ 01A2:0687
cs=0x1a2;eip=0x00068d; 	T(CMP(word_1f3ea, 0));	// 865                  cmp     ds:word_1F3EA, 0 ;~ 01A2:068D
cs=0x1a2;eip=0x000692; 	J(JZ(loc_106be));	// 866                  jz      short loc_106BE ;~ 01A2:0692
cs=0x1a2;eip=0x000694; 	T(al = byte_1f836;);	// 867                  mov     al, ds:byte_1F836 ;~ 01A2:0694
cs=0x1a2;eip=0x000697; 	T(OR(al, al));	// 868                  or      al, al ;~ 01A2:0697
cs=0x1a2;eip=0x000699; 	J(JZ(loc_106a3));	// 869                  jz      short loc_106A3 ;~ 01A2:0699
cs=0x1a2;eip=0x00069b; 	T(CMP(al, 1));	// 870                  cmp     al, 1 ;~ 01A2:069B
cs=0x1a2;eip=0x00069d; 	J(JZ(loc_10701));	// 871                  jz      short loc_10701 ;~ 01A2:069D
cs=0x1a2;eip=0x00069f; 	T(CMP(al, 4));	// 872                  cmp     al, 4 ;~ 01A2:069F
cs=0x1a2;eip=0x0006a1; 	J(JZ(loc_106f5));	// 873                  jz      short loc_106F5 ;~ 01A2:06A1
loc_106a3:
	// 4444 
cs=0x1a2;eip=0x0006a3; 	J(CALL(sub_12de2,0));	// 877                  call    sub_12DE2 ;~ 01A2:06A3
cs=0x1a2;eip=0x0006a6; 	J(JNZ(loc_106be));	// 878                  jnz     short loc_106BE ;~ 01A2:06A6
cs=0x1a2;eip=0x0006a8; 	J(CALL(sub_134bf,0));	// 879                  call    sub_134BF ;~ 01A2:06A8
cs=0x1a2;eip=0x0006ab; 	X(byte_1f769 = 0;);	// 880                  mov     ds:byte_1F769, 0 ;~ 01A2:06AB
cs=0x1a2;eip=0x0006b0; 	T(TEST(byte_1f844, 1));	// 881                  test    ds:byte_1F844, 1 ;~ 01A2:06B0
cs=0x1a2;eip=0x0006b5; 	X(PUSHF);	// 882                  pushf ;~ 01A2:06B5
cs=0x1a2;eip=0x0006b6; 	X(OR(byte_1f844, 1));	// 883                  or      ds:byte_1F844, 1 ;~ 01A2:06B6
cs=0x1a2;eip=0x0006bb; 	X(POPF);	// 884                  popf ;~ 01A2:06BB
cs=0x1a2;eip=0x0006bc; 	J(JMP(loc_1070b));	// 885                  jmp     short loc_1070B ;~ 01A2:06BC
loc_106be:
	// 4445 
cs=0x1a2;eip=0x0006be; 	X(POP(ds));	// 890                  pop     ds ;~ 01A2:06BE
cs=0x1a2;eip=0x0006bf; 	X(POP(es));	// 891                  pop     es ;~ 01A2:06BF
cs=0x1a2;eip=0x0006c0; 	X(POP(di));	// 893                  pop     di ;~ 01A2:06C0
cs=0x1a2;eip=0x0006c1; 	X(POP(si));	// 894                  pop     si ;~ 01A2:06C1
cs=0x1a2;eip=0x0006c2; 	X(POP(bp));	// 895                  pop     bp ;~ 01A2:06C2
cs=0x1a2;eip=0x0006c3; 	X(POP(dx));	// 896                  pop     dx ;~ 01A2:06C3
cs=0x1a2;eip=0x0006c4; 	X(POP(cx));	// 897                  pop     cx ;~ 01A2:06C4
cs=0x1a2;eip=0x0006c5; 	X(POP(bx));	// 898                  pop     bx ;~ 01A2:06C5
cs=0x1a2;eip=0x0006c6; 	X(POP(ax));	// 899                  pop     ax ;~ 01A2:06C6
cs=0x1a2;eip=0x0006c7; 	T(CMP(byte_1f851, 0));	// 900                  cmp     ds:byte_1F851, 0 ;~ 01A2:06C7
cs=0x1a2;eip=0x0006cc; 	J(JZ(loc_106d1));	// 901                  jz      short loc_106D1 ;~ 01A2:06CC
cs=0x1a2;eip=0x0006ce; 	J(JMP(sub_10b61));	// 902                  jmp     sub_10B61 ;~ 01A2:06CE
loc_106d1:
	// 4446 
cs=0x1a2;eip=0x0006d1; 	X(PUSH(si));	// 906                  push    si ;~ 01A2:06D1
cs=0x1a2;eip=0x0006d2; 	T(si = word_1f1c2;);	// 907                  mov     si, word_1F1C2 ;~ 01A2:06D2
cs=0x1a2;eip=0x0006d6; 	T(TEST(*(raddr(ds,si+0x12)), 1));	// 908                  test    byte ptr [si+12h], 1 ;~ 01A2:06D6
cs=0x1a2;eip=0x0006da; 	X(PUSHF);	// 909                  pushf ;~ 01A2:06DA
cs=0x1a2;eip=0x0006db; 	X(AND(*(raddr(ds,si+0x12)), 0x0FE));	// 910                  and     byte ptr [si+12h], 0FEh ;~ 01A2:06DB
cs=0x1a2;eip=0x0006df; 	X(POPF);	// 911                  popf ;~ 01A2:06DF
cs=0x1a2;eip=0x0006e0; 	X(POP(si));	// 912                  pop     si ;~ 01A2:06E0
cs=0x1a2;eip=0x0006e1; 	X(byte_1f771 = 5;);	// 913                  mov     ds:byte_1F771, 5 ;~ 01A2:06E1
cs=0x1a2;eip=0x0006e6; 	T(al = byte_1f769;);	// 914                  mov     al, ds:byte_1F769 ;~ 01A2:06E6
cs=0x1a2;eip=0x0006e9; 	X(byte_1f777 = al;);	// 915                  mov     ds:byte_1F777, al ;~ 01A2:06E9
cs=0x1a2;eip=0x0006ec; 	T(ax = word_1f1fa;);	// 916                  mov     ax, word_1F1FA ;~ 01A2:06EC
cs=0x1a2;eip=0x0006ef; 	X(word_1f1f8 = ax;);	// 917                  mov     word_1F1F8, ax ;~ 01A2:06EF
cs=0x1a2;eip=0x0006f2; 	J(JMP(sub_10b61));	// 918                  jmp     sub_10B61 ;~ 01A2:06F2
loc_106f5:
	// 4447 
cs=0x1a2;eip=0x0006f5; 	T(CMP(byte_1f799, 0));	// 922                  cmp     ds:byte_1F799, 0 ;~ 01A2:06F5
cs=0x1a2;eip=0x0006fa; 	J(JNZ(loc_10726));	// 923                  jnz     short loc_10726 ;~ 01A2:06FA
cs=0x1a2;eip=0x0006fc; 	J(CALL(sub_169cf,0));	// 924                  call    sub_169CF ;~ 01A2:06FC
cs=0x1a2;eip=0x0006ff; 	J(JMP(loc_1070b));	// 926                  jmp     short loc_1070B ;~ 01A2:06FF
loc_10701:
	// 4448 
cs=0x1a2;eip=0x000701; 	T(CMP(byte_1f799, 0));	// 930                  cmp     ds:byte_1F799, 0 ;~ 01A2:0701
cs=0x1a2;eip=0x000706; 	J(JNZ(loc_10726));	// 931                  jnz     short loc_10726 ;~ 01A2:0706
cs=0x1a2;eip=0x000708; 	J(CALL(sub_16896,0));	// 932                  call    sub_16896 ;~ 01A2:0708
loc_1070b:
	// 4449 
cs=0x1a2;eip=0x00070b; 	X(byte_1f851 = 7;);	// 936                  mov     ds:byte_1F851, 7 ;~ 01A2:070B
cs=0x1a2;eip=0x000710; 	T(al = byte_1f769;);	// 937                  mov     al, ds:byte_1F769 ;~ 01A2:0710
cs=0x1a2;eip=0x000713; 	T(AND(al, 0x0F));	// 938                  and     al, 0Fh ;~ 01A2:0713
cs=0x1a2;eip=0x000715; 	J(JZ(loc_1071a));	// 939                  jz      short loc_1071A ;~ 01A2:0715
cs=0x1a2;eip=0x000717; 	J(JMP(loc_10854));	// 940                  jmp     loc_10854 ;~ 01A2:0717
loc_1071a:
	// 4450 
cs=0x1a2;eip=0x00071a; 	X(POP(ds));	// 944                  pop     ds ;~ 01A2:071A
cs=0x1a2;eip=0x00071b; 	X(POP(es));	// 945                  pop     es ;~ 01A2:071B
cs=0x1a2;eip=0x00071c; 	X(POP(di));	// 947                  pop     di ;~ 01A2:071C
cs=0x1a2;eip=0x00071d; 	X(POP(si));	// 948                  pop     si ;~ 01A2:071D
cs=0x1a2;eip=0x00071e; 	X(POP(bp));	// 949                  pop     bp ;~ 01A2:071E
cs=0x1a2;eip=0x00071f; 	X(POP(dx));	// 950                  pop     dx ;~ 01A2:071F
cs=0x1a2;eip=0x000720; 	X(POP(cx));	// 951                  pop     cx ;~ 01A2:0720
cs=0x1a2;eip=0x000721; 	X(POP(bx));	// 952                  pop     bx ;~ 01A2:0721
cs=0x1a2;eip=0x000722; 	X(POP(ax));	// 953                  pop     ax ;~ 01A2:0722
cs=0x1a2;eip=0x000723; 	J(JMP(loc_10ad0));	// 954                  jmp     loc_10AD0 ;~ 01A2:0723
loc_10726:
	// 4451 
cs=0x1a2;eip=0x000726; 	T(TEST(byte_1f817, 0x80));	// 960                  test    ds:byte_1F817, 80h ;~ 01A2:0726
cs=0x1a2;eip=0x00072b; 	J(JZ(loc_10730));	// 961                  jz      short loc_10730 ;~ 01A2:072B
cs=0x1a2;eip=0x00072d; 	J(JMP(loc_10854));	// 962                  jmp     loc_10854 ;~ 01A2:072D
loc_10730:
	// 4452 
cs=0x1a2;eip=0x000730; 	J(JMP(loc_1070b));	// 966                  jmp     short loc_1070B ;~ 01A2:0730
loc_10732:
	// 4453 
cs=0x1a2;eip=0x000732; 	T(CMP(word_1f1e4, 0));	// 971                  cmp     word_1F1E4, 0 ;~ 01A2:0732
cs=0x1a2;eip=0x000737; 	J(JNZ(loc_1073c));	// 972                  jnz     short loc_1073C ;~ 01A2:0737
cs=0x1a2;eip=0x000739; 	J(JMP(loc_10854));	// 973                  jmp     loc_10854 ;~ 01A2:0739
loc_1073c:
	// 4454 
cs=0x1a2;eip=0x00073c; 	T(SUB(dl, byte_1f8df));	// 977                  sub     dl, ds:byte_1F8DF ;~ 01A2:073C
cs=0x1a2;eip=0x000740; 	T(SUB(dl, byte_1f8df));	// 978                  sub     dl, ds:byte_1F8DF ;~ 01A2:0740
cs=0x1a2;eip=0x000744; 	T(SUB(dh, byte_1f8e0));	// 979                  sub     dh, ds:byte_1F8E0 ;~ 01A2:0744
cs=0x1a2;eip=0x000748; 	T(SUB(dh, byte_1f8e0));	// 980                  sub     dh, ds:byte_1F8E0 ;~ 01A2:0748
cs=0x1a2;eip=0x00074c; 	T(es = *(dw*)(((db*)&off_1f194)+2););	// 981                  mov     es, word ptr off_1F194+2 ;~ 01A2:074C
cs=0x1a2;eip=0x000750; 	T(di = word_1f198;);	// 982                  mov     di, word_1F198 ;~ 01A2:0750
cs=0x1a2;eip=0x000754; 	T(si = word_1f1cc;);	// 983                  mov     si, word_1F1CC ;~ 01A2:0754
cs=0x1a2;eip=0x000758; 	J(CALL(sub_116e0,0));	// 984                  call    sub_116E0 ;~ 01A2:0758
cs=0x1a2;eip=0x00075b; 	J(JS(loc_1075f));	// 985                  js      short loc_1075F ;~ 01A2:075B
cs=0x1a2;eip=0x00075d; 	J(JNZ(loc_10762));	// 986                  jnz     short loc_10762 ;~ 01A2:075D
loc_1075f:
	// 4455 
cs=0x1a2;eip=0x00075f; 	J(JMP(loc_1084e));	// 990                  jmp     loc_1084E ;~ 01A2:075F
loc_10762:
	// 4456 
cs=0x1a2;eip=0x000762; 	T(si = word_1f1ac;);	// 994                  mov     si, word_1F1AC ;~ 01A2:0762
cs=0x1a2;eip=0x000766; 	T(CMP(*(raddr(ds,si+1)), 0));	// 995                  cmp     byte ptr [si+1], 0 ;~ 01A2:0766
cs=0x1a2;eip=0x00076a; 	J(JS(loc_1075f));	// 996                  js      short loc_1075F ;~ 01A2:076A
cs=0x1a2;eip=0x00076c; 	X(PUSH(dx));	// 997                  push    dx ;~ 01A2:076C
cs=0x1a2;eip=0x00076d; 	T(dx = word_1f1e4;);	// 998                  mov     dx, word_1F1E4 ;~ 01A2:076D
cs=0x1a2;eip=0x000771; 	J(CALL(seg000_6c3f_proc,m2c::kloc_16c3f));	// 999                  call    loc_16C3F ;~ 01A2:0771
cs=0x1a2;eip=0x000774; 	X(POP(dx));	// 1000                  pop     dx ;~ 01A2:0774
cs=0x1a2;eip=0x000775; 	J(JNZ(loc_1075f));	// 1001                  jnz     short loc_1075F ;~ 01A2:0775
cs=0x1a2;eip=0x000777; 	J(CALL(sub_11a49,0));	// 1002                  call    sub_11A49 ;~ 01A2:0777
cs=0x1a2;eip=0x00077a; 	T(si = word_1f19a;);	// 1003                  mov     si, word_1F19A ;~ 01A2:077A
cs=0x1a2;eip=0x00077e; 	J(CALL(sub_11c76,0));	// 1004                  call    sub_11C76 ;~ 01A2:077E
cs=0x1a2;eip=0x000781; 	T(si = word_1f1ac;);	// 1005                  mov     si, word_1F1AC ;~ 01A2:0781
cs=0x1a2;eip=0x000785; 	X(PUSH(si));	// 1006                  push    si ;~ 01A2:0785
cs=0x1a2;eip=0x000786; 	X(byte_1f772 = 0;);	// 1007                  mov     ds:byte_1F772, 0 ;~ 01A2:0786
cs=0x1a2;eip=0x00078b; 	T(ax = word_1f1f0;);	// 1008                  mov     ax, word_1F1F0 ;~ 01A2:078B
cs=0x1a2;eip=0x00078e; 	X(word_1f1f2 = ax;);	// 1009                  mov     word_1F1F2, ax ;~ 01A2:078E
cs=0x1a2;eip=0x000791; 	T(ax = word_1f70c;);	// 1010                  mov     ax, ds:word_1F70C ;~ 01A2:0791
cs=0x1a2;eip=0x000794; 	X(word_1f3ce = ax;);	// 1011                  mov     ds:word_1F3CE, ax ;~ 01A2:0794
cs=0x1a2;eip=0x000797; 	T(ax = word_1f70c;);	// 1012                  mov     ax, ds:word_1F70C ;~ 01A2:0797
cs=0x1a2;eip=0x00079a; 	X(word_1f3ce = ax;);	// 1013                  mov     ds:word_1F3CE, ax ;~ 01A2:079A
cs=0x1a2;eip=0x00079d; 	X(PUSH(ax));	// 1014                  push    ax ;~ 01A2:079D
cs=0x1a2;eip=0x00079e; 	T(ax = word_1f1f4;);	// 1015                  mov     ax, word_1F1F4 ;~ 01A2:079E
cs=0x1a2;eip=0x0007a1; 	X(word_1f206 = ax;);	// 1016                  mov     word_1F206, ax ;~ 01A2:07A1
cs=0x1a2;eip=0x0007a4; 	T(ax = word_1f396;);	// 1017                  mov     ax, ds:word_1F396 ;~ 01A2:07A4
cs=0x1a2;eip=0x0007a7; 	X(word_1f708 = ax;);	// 1018                  mov     ds:word_1F708, ax ;~ 01A2:07A7
cs=0x1a2;eip=0x0007aa; 	X(POP(ax));	// 1019                  pop     ax ;~ 01A2:07AA
cs=0x1a2;eip=0x0007ab; 	X(PUSH(dx));	// 1020                  push    dx ;~ 01A2:07AB
cs=0x1a2;eip=0x0007ac; 	X(PUSH(cx));	// 1021                  push    cx ;~ 01A2:07AC
cs=0x1a2;eip=0x0007ad; 	T(XOR(ch, ch));	// 1022                  xor     ch, ch ;~ 01A2:07AD
cs=0x1a2;eip=0x0007af; 	T(XOR(ch, ch));	// 1023                  xor     ch, ch ;~ 01A2:07AF
cs=0x1a2;eip=0x0007b1; 	T(dl = byte_1f8df;);	// 1024                  mov     dl, ds:byte_1F8DF ;~ 01A2:07B1
cs=0x1a2;eip=0x0007b5; 	T(dh = byte_1f8e0;);	// 1025                  mov     dh, ds:byte_1F8E0 ;~ 01A2:07B5
cs=0x1a2;eip=0x0007b9; 	T(di = word_1f1cc;);	// 1026                  mov     di, word_1F1CC ;~ 01A2:07B9
cs=0x1a2;eip=0x0007bd; 	J(CALL(sub_16570,0));	// 1027                  call    sub_16570 ;~ 01A2:07BD
cs=0x1a2;eip=0x0007c0; 	X(POP(cx));	// 1028                  pop     cx ;~ 01A2:07C0
cs=0x1a2;eip=0x0007c1; 	X(POP(dx));	// 1029                  pop     dx ;~ 01A2:07C1
cs=0x1a2;eip=0x0007c2; 	X(POP(si));	// 1030                  pop     si ;~ 01A2:07C2
cs=0x1a2;eip=0x0007c3; 	J(JNZ(loc_10840));	// 1031                  jnz     short loc_10840 ;~ 01A2:07C3
cs=0x1a2;eip=0x0007c5; 	T(CMP(byte_1f772, 0));	// 1032                  cmp     ds:byte_1F772, 0 ;~ 01A2:07C5
cs=0x1a2;eip=0x0007ca; 	J(JZ(loc_10840));	// 1033                  jz      short loc_10840 ;~ 01A2:07CA
cs=0x1a2;eip=0x0007cc; 	X(word_1f71c = 0;);	// 1034                  mov     ds:word_1F71C, 0 ;~ 01A2:07CC
cs=0x1a2;eip=0x0007d2; 	X(PUSH(ax));	// 1035                  push    ax ;~ 01A2:07D2
cs=0x1a2;eip=0x0007d3; 	X(PUSH(bx));	// 1036                  push    bx ;~ 01A2:07D3
cs=0x1a2;eip=0x0007d4; 	X(PUSH(cx));	// 1037                  push    cx ;~ 01A2:07D4
cs=0x1a2;eip=0x0007d5; 	X(PUSH(dx));	// 1038                  push    dx ;~ 01A2:07D5
cs=0x1a2;eip=0x0007d6; 	X(PUSH(bp));	// 1039                  push    bp ;~ 01A2:07D6
cs=0x1a2;eip=0x0007d7; 	X(PUSH(si));	// 1040                  push    si ;~ 01A2:07D7
cs=0x1a2;eip=0x0007d8; 	X(PUSH(di));	// 1041                  push    di ;~ 01A2:07D8
cs=0x1a2;eip=0x0007d9; 	X(PUSH(es));	// 1042                  push    es ;~ 01A2:07D9
cs=0x1a2;eip=0x0007da; 	X(PUSH(ds));	// 1043                  push    ds ;~ 01A2:07DA
cs=0x1a2;eip=0x0007db; 	T(si = word_1f1f0;);	// 1044                  mov     si, word_1F1F0 ;~ 01A2:07DB
cs=0x1a2;eip=0x0007df; 	T(MOV(si, *(dw*)(raddr(ds,si))));	// 1045                  mov     si, [si] ;~ 01A2:07DF
cs=0x1a2;eip=0x0007e1; 	T(MOV(di, *(dw*)(raddr(ds,si+8))));	// 1046                  mov     di, [si+8] ;~ 01A2:07E1
cs=0x1a2;eip=0x0007e4; 	T(MOV(es, *(dw*)(raddr(ds,di+6))));	// 1047                  mov     es, word ptr [di+6] ;~ 01A2:07E4
cs=0x1a2;eip=0x0007e7; 	T(MOV(di, *(dw*)(raddr(ds,di+8))));	// 1049                  mov     di, [di+8] ;~ 01A2:07E7
cs=0x1a2;eip=0x0007ea; 	T(XOR(bh, bh));	// 1050                  xor     bh, bh ;~ 01A2:07EA
cs=0x1a2;eip=0x0007ec; 	T(XOR(bh, bh));	// 1051                  xor     bh, bh ;~ 01A2:07EC
cs=0x1a2;eip=0x0007ee; 	T(si = 0x0FED9;);	// 1052                  mov     si, 0FED9h ;~ 01A2:07EE
cs=0x1a2;eip=0x0007f1; 	T(MOV(bl, *(raddr(es,di+0x1D))));	// 1053                  mov     bl, es:[di+1Dh] ;~ 01A2:07F1
cs=0x1a2;eip=0x0007f5; 	T(MOV(al, *(raddr(ds,bx+si))));	// 1054                  mov     al, [bx+si] ;~ 01A2:07F5
cs=0x1a2;eip=0x0007f7; 	T(CMP(byte_1f852, 0));	// 1055                  cmp     ds:byte_1F852, 0 ;~ 01A2:07F7
cs=0x1a2;eip=0x0007fc; 	J(JZ(loc_10810));	// 1056                  jz      short loc_10810 ;~ 01A2:07FC
cs=0x1a2;eip=0x0007fe; 	T(CMP(al, byte_1f852));	// 1057                  cmp     al, ds:byte_1F852 ;~ 01A2:07FE
cs=0x1a2;eip=0x000802; 	J(JZ(loc_10816));	// 1058                  jz      short loc_10816 ;~ 01A2:0802
cs=0x1a2;eip=0x000804; 	X(PUSH(ax));	// 1059                  push    ax ;~ 01A2:0804
cs=0x1a2;eip=0x000805; 	T(al = byte_1f852;);	// 1060                  mov     al, ds:byte_1F852 ;~ 01A2:0805
cs=0x1a2;eip=0x000808; 	T(OR(al, al));	// 1061                  or      al, al ;~ 01A2:0808
cs=0x1a2;eip=0x00080a; 	J(JZ(loc_1080f));	// 1062                  jz      short loc_1080F ;~ 01A2:080A
cs=0x1a2;eip=0x00080c; 	J(CALL(sub_11613,0));	// 1063                  call    sub_11613 ;~ 01A2:080C
loc_1080f:
	// 4457 
cs=0x1a2;eip=0x00080f; 	X(POP(ax));	// 1066                  pop     ax ;~ 01A2:080F
loc_10810:
	// 4458 
cs=0x1a2;eip=0x000810; 	X(byte_1f852 = al;);	// 1069                  mov     ds:byte_1F852, al ;~ 01A2:0810
cs=0x1a2;eip=0x000813; 	J(CALL(sub_1164e,0));	// 1070                  call    sub_1164E ;~ 01A2:0813
loc_10816:
	// 4459 
cs=0x1a2;eip=0x000816; 	X(POP(ds));	// 1073                  pop     ds ;~ 01A2:0816
cs=0x1a2;eip=0x000817; 	X(POP(es));	// 1074                  pop     es ;~ 01A2:0817
cs=0x1a2;eip=0x000818; 	X(POP(di));	// 1076                  pop     di ;~ 01A2:0818
cs=0x1a2;eip=0x000819; 	X(POP(si));	// 1077                  pop     si ;~ 01A2:0819
cs=0x1a2;eip=0x00081a; 	X(POP(bp));	// 1078                  pop     bp ;~ 01A2:081A
cs=0x1a2;eip=0x00081b; 	X(POP(dx));	// 1079                  pop     dx ;~ 01A2:081B
cs=0x1a2;eip=0x00081c; 	X(POP(cx));	// 1080                  pop     cx ;~ 01A2:081C
cs=0x1a2;eip=0x00081d; 	X(POP(bx));	// 1081                  pop     bx ;~ 01A2:081D
cs=0x1a2;eip=0x00081e; 	X(POP(ax));	// 1082                  pop     ax ;~ 01A2:081E
cs=0x1a2;eip=0x00081f; 	X(PUSH(dx));	// 1083                  push    dx ;~ 01A2:081F
cs=0x1a2;eip=0x000820; 	X(PUSH(cx));	// 1084                  push    cx ;~ 01A2:0820
cs=0x1a2;eip=0x000821; 	T(XOR(ch, ch));	// 1085                  xor     ch, ch ;~ 01A2:0821
cs=0x1a2;eip=0x000823; 	T(XOR(ch, ch));	// 1086                  xor     ch, ch ;~ 01A2:0823
cs=0x1a2;eip=0x000825; 	T(dl = byte_1f8df;);	// 1087                  mov     dl, ds:byte_1F8DF ;~ 01A2:0825
cs=0x1a2;eip=0x000829; 	T(dh = byte_1f8e0;);	// 1088                  mov     dh, ds:byte_1F8E0 ;~ 01A2:0829
cs=0x1a2;eip=0x00082d; 	J(CALL(sub_167df,0));	// 1089                  call    sub_167DF ;~ 01A2:082D
cs=0x1a2;eip=0x000830; 	X(POP(cx));	// 1090                  pop     cx ;~ 01A2:0830
cs=0x1a2;eip=0x000831; 	X(POP(dx));	// 1091                  pop     dx ;~ 01A2:0831
cs=0x1a2;eip=0x000832; 	T(TEST(byte_1f857, 2));	// 1092                  test    ds:byte_1F857, 2 ;~ 01A2:0832
cs=0x1a2;eip=0x000837; 	X(PUSHF);	// 1093                  pushf ;~ 01A2:0837
cs=0x1a2;eip=0x000838; 	X(OR(byte_1f857, 2));	// 1094                  or      ds:byte_1F857, 2 ;~ 01A2:0838
cs=0x1a2;eip=0x00083d; 	X(POPF);	// 1095                  popf ;~ 01A2:083D
cs=0x1a2;eip=0x00083e; 	J(JMP(loc_10854));	// 1096                  jmp     short loc_10854 ;~ 01A2:083E
loc_10840:
	// 4460 
cs=0x1a2;eip=0x000840; 	X(PUSH(ax));	// 1101                  push    ax ;~ 01A2:0840
cs=0x1a2;eip=0x000841; 	T(ax = word_1f206;);	// 1102                  mov     ax, word_1F206 ;~ 01A2:0841
cs=0x1a2;eip=0x000844; 	X(word_1f1f4 = ax;);	// 1103                  mov     word_1F1F4, ax ;~ 01A2:0844
cs=0x1a2;eip=0x000847; 	T(ax = word_1f708;);	// 1104                  mov     ax, ds:word_1F708 ;~ 01A2:0847
cs=0x1a2;eip=0x00084a; 	X(word_1f396 = ax;);	// 1105                  mov     ds:word_1F396, ax ;~ 01A2:084A
cs=0x1a2;eip=0x00084d; 	X(POP(ax));	// 1106                  pop     ax ;~ 01A2:084D
loc_1084e:
	// 4461 
cs=0x1a2;eip=0x00084e; 	X(word_1f1e4 = 0;);	// 1109                  mov     word_1F1E4, 0 ;~ 01A2:084E
loc_10854:
	// 4462 
cs=0x1a2;eip=0x000854; 	T(CMP(byte_1f73f, 0));	// 1113                  cmp     ds:byte_1F73F, 0 ;~ 01A2:0854
cs=0x1a2;eip=0x000859; 	J(JZ(loc_1085e));	// 1114                  jz      short loc_1085E ;~ 01A2:0859
cs=0x1a2;eip=0x00085b; 	J(CALL(sub_129cf,0));	// 1115                  call    sub_129CF ;~ 01A2:085B
loc_1085e:
	// 4463 
cs=0x1a2;eip=0x00085e; 	X(POP(ds));	// 1118                  pop     ds ;~ 01A2:085E
cs=0x1a2;eip=0x00085f; 	X(POP(es));	// 1119                  pop     es ;~ 01A2:085F
cs=0x1a2;eip=0x000860; 	X(POP(di));	// 1120                  pop     di ;~ 01A2:0860
cs=0x1a2;eip=0x000861; 	X(POP(si));	// 1121                  pop     si ;~ 01A2:0861
cs=0x1a2;eip=0x000862; 	X(POP(bp));	// 1122                  pop     bp ;~ 01A2:0862
cs=0x1a2;eip=0x000863; 	X(POP(dx));	// 1123                  pop     dx ;~ 01A2:0863
cs=0x1a2;eip=0x000864; 	X(POP(cx));	// 1124                  pop     cx ;~ 01A2:0864
cs=0x1a2;eip=0x000865; 	X(POP(bx));	// 1125                  pop     bx ;~ 01A2:0865
cs=0x1a2;eip=0x000866; 	X(POP(ax));	// 1126                  pop     ax ;~ 01A2:0866
loc_10867:
	// 4464 
cs=0x1a2;eip=0x000867; 	T(si = word_1f19a;);	// 1129                  mov     si, word_1F19A ;~ 01A2:0867
cs=0x1a2;eip=0x00086b; 	T(di = word_1f1cc;);	// 1130                  mov     di, word_1F1CC ;~ 01A2:086B
cs=0x1a2;eip=0x00086f; 	T(al = byte_1f8df;);	// 1131                  mov     al, ds:byte_1F8DF ;~ 01A2:086F
cs=0x1a2;eip=0x000872; 	X(ADD(*(raddr(ds,si)), al));	// 1132                  add     [si], al ;~ 01A2:0872
cs=0x1a2;eip=0x000874; 	X(ADD(*(raddr(ds,si+2)), al));	// 1133                  add     [si+2], al ;~ 01A2:0874
cs=0x1a2;eip=0x000877; 	T(CMP(dl, *(raddr(ds,si))));	// 1134                  cmp     dl, [si] ;~ 01A2:0877
cs=0x1a2;eip=0x000879; 	J(JZ(loc_1087c));	// 1135                  jz      short loc_1087C ;~ 01A2:0879
cs=0x1a2;eip=0x00087b; 	T(NOP);	// 1136                  nop ;~ 01A2:087B
loc_1087c:
	// 4465 
cs=0x1a2;eip=0x00087c; 	T(al = byte_1f8e0;);	// 1139                  mov     al, ds:byte_1F8E0 ;~ 01A2:087C
cs=0x1a2;eip=0x00087f; 	X(ADD(*(raddr(ds,si+1)), al));	// 1140                  add     [si+1], al ;~ 01A2:087F
cs=0x1a2;eip=0x000882; 	X(ADD(*(raddr(ds,si+3)), al));	// 1141                  add     [si+3], al ;~ 01A2:0882
cs=0x1a2;eip=0x000885; 	T(al = byte_1f8de;);	// 1142                  mov     al, ds:byte_1F8DE ;~ 01A2:0885
cs=0x1a2;eip=0x000888; 	X(ADD(*(raddr(ds,si+4)), al));	// 1143                  add     [si+4], al ;~ 01A2:0888
cs=0x1a2;eip=0x00088b; 	X(ADD(*(raddr(ds,si+5)), al));	// 1144                  add     [si+5], al ;~ 01A2:088B
cs=0x1a2;eip=0x00088e; 	X(MOV(*(raddr(ds,di)), dl));	// 1145                  mov     [di], dl ;~ 01A2:088E
cs=0x1a2;eip=0x000890; 	X(MOV(*(raddr(ds,di+1)), dh));	// 1146                  mov     [di+1], dh ;~ 01A2:0890
cs=0x1a2;eip=0x000893; 	X(MOV(*(raddr(ds,di+2)), ch));	// 1147                  mov     [di+2], ch ;~ 01A2:0893
cs=0x1a2;eip=0x000896; 	J(CALL(sub_1530e,0));	// 1148                  call    sub_1530E ;~ 01A2:0896
cs=0x1a2;eip=0x000899; 	J(JMP(sub_10b61));	// 1150                  jmp     sub_10B61 ;~ 01A2:0899
loc_1089c:
	// 4466 
cs=0x1a2;eip=0x00089c; 	T(TEST(byte_1f779, 0x80));	// 1155                  test    ds:byte_1F779, 80h ;~ 01A2:089C
cs=0x1a2;eip=0x0008a1; 	X(PUSHF);	// 1156                  pushf ;~ 01A2:08A1
cs=0x1a2;eip=0x0008a2; 	X(OR(byte_1f779, 0x80));	// 1157                  or      ds:byte_1F779, 80h ;~ 01A2:08A2
cs=0x1a2;eip=0x0008a7; 	X(POPF);	// 1158                  popf ;~ 01A2:08A7
cs=0x1a2;eip=0x0008a8; 	X(word_1f1e4 = 0;);	// 1159                  mov     word_1F1E4, 0 ;~ 01A2:08A8
cs=0x1a2;eip=0x0008ae; 	X(word_1f1e4 = 0;);	// 1160                  mov     word_1F1E4, 0 ;~ 01A2:08AE
cs=0x1a2;eip=0x0008b4; 	X(PUSH(ax));	// 1161                  push    ax ;~ 01A2:08B4
cs=0x1a2;eip=0x0008b5; 	X(PUSH(bx));	// 1162                  push    bx ;~ 01A2:08B5
cs=0x1a2;eip=0x0008b6; 	X(PUSH(cx));	// 1163                  push    cx ;~ 01A2:08B6
cs=0x1a2;eip=0x0008b7; 	X(PUSH(dx));	// 1164                  push    dx ;~ 01A2:08B7
cs=0x1a2;eip=0x0008b8; 	X(PUSH(bp));	// 1165                  push    bp ;~ 01A2:08B8
cs=0x1a2;eip=0x0008b9; 	X(PUSH(si));	// 1166                  push    si ;~ 01A2:08B9
cs=0x1a2;eip=0x0008ba; 	X(PUSH(di));	// 1167                  push    di ;~ 01A2:08BA
cs=0x1a2;eip=0x0008bb; 	X(PUSH(es));	// 1168                  push    es ;~ 01A2:08BB
cs=0x1a2;eip=0x0008bc; 	X(PUSH(ds));	// 1169                  push    ds ;~ 01A2:08BC
cs=0x1a2;eip=0x0008bd; 	T(CMP(byte_1f73f, 0));	// 1170                  cmp     ds:byte_1F73F, 0 ;~ 01A2:08BD
cs=0x1a2;eip=0x0008c2; 	J(JZ(loc_108c7));	// 1171                  jz      short loc_108C7 ;~ 01A2:08C2
cs=0x1a2;eip=0x0008c4; 	J(CALL(sub_129cf,0));	// 1172                  call    sub_129CF ;~ 01A2:08C4
loc_108c7:
	// 4467 
cs=0x1a2;eip=0x0008c7; 	X(POP(ds));	// 1175                  pop     ds ;~ 01A2:08C7
cs=0x1a2;eip=0x0008c8; 	X(POP(es));	// 1176                  pop     es ;~ 01A2:08C8
cs=0x1a2;eip=0x0008c9; 	X(POP(di));	// 1177                  pop     di ;~ 01A2:08C9
cs=0x1a2;eip=0x0008ca; 	X(POP(si));	// 1178                  pop     si ;~ 01A2:08CA
cs=0x1a2;eip=0x0008cb; 	X(POP(bp));	// 1179                  pop     bp ;~ 01A2:08CB
cs=0x1a2;eip=0x0008cc; 	X(POP(dx));	// 1180                  pop     dx ;~ 01A2:08CC
cs=0x1a2;eip=0x0008cd; 	X(POP(cx));	// 1181                  pop     cx ;~ 01A2:08CD
cs=0x1a2;eip=0x0008ce; 	X(POP(bx));	// 1182                  pop     bx ;~ 01A2:08CE
cs=0x1a2;eip=0x0008cf; 	X(POP(ax));	// 1183                  pop     ax ;~ 01A2:08CF
cs=0x1a2;eip=0x0008d0; 	T(di = word_1f1ac;);	// 1184                  mov     di, word_1F1AC ;~ 01A2:08D0
cs=0x1a2;eip=0x0008d4; 	T(CMP(*(raddr(ds,di)), 0x0FF));	// 1185                  cmp     byte ptr [di], 0FFh ;~ 01A2:08D4
cs=0x1a2;eip=0x0008d7; 	J(JNZ(loc_108dc));	// 1186                  jnz     short loc_108DC ;~ 01A2:08D7
cs=0x1a2;eip=0x0008d9; 	J(JMP(loc_10aab));	// 1187                  jmp     loc_10AAB ;~ 01A2:08D9
loc_108dc:
	// 4468 
cs=0x1a2;eip=0x0008dc; 	X(PUSH(ax));	// 1191                  push    ax ;~ 01A2:08DC
cs=0x1a2;eip=0x0008dd; 	X(PUSH(bx));	// 1192                  push    bx ;~ 01A2:08DD
cs=0x1a2;eip=0x0008de; 	X(PUSH(cx));	// 1193                  push    cx ;~ 01A2:08DE
cs=0x1a2;eip=0x0008df; 	X(PUSH(dx));	// 1194                  push    dx ;~ 01A2:08DF
cs=0x1a2;eip=0x0008e0; 	X(PUSH(bp));	// 1195                  push    bp ;~ 01A2:08E0
cs=0x1a2;eip=0x0008e1; 	X(PUSH(si));	// 1196                  push    si ;~ 01A2:08E1
cs=0x1a2;eip=0x0008e2; 	X(PUSH(di));	// 1197                  push    di ;~ 01A2:08E2
cs=0x1a2;eip=0x0008e3; 	X(PUSH(es));	// 1198                  push    es ;~ 01A2:08E3
cs=0x1a2;eip=0x0008e4; 	X(PUSH(ds));	// 1199                  push    ds ;~ 01A2:08E4
cs=0x1a2;eip=0x0008e5; 	J(CALL(sub_17634,0));	// 1200                  call    sub_17634 ;~ 01A2:08E5
cs=0x1a2;eip=0x0008e8; 	J(CALL(sub_1608f,0));	// 1201                  call    sub_1608F ;~ 01A2:08E8
cs=0x1a2;eip=0x0008eb; 	X(POP(ds));	// 1202                  pop     ds ;~ 01A2:08EB
cs=0x1a2;eip=0x0008ec; 	X(POP(es));	// 1203                  pop     es ;~ 01A2:08EC
cs=0x1a2;eip=0x0008ed; 	X(POP(di));	// 1204                  pop     di ;~ 01A2:08ED
cs=0x1a2;eip=0x0008ee; 	X(POP(si));	// 1205                  pop     si ;~ 01A2:08EE
cs=0x1a2;eip=0x0008ef; 	X(POP(bp));	// 1206                  pop     bp ;~ 01A2:08EF
cs=0x1a2;eip=0x0008f0; 	X(POP(dx));	// 1207                  pop     dx ;~ 01A2:08F0
cs=0x1a2;eip=0x0008f1; 	X(POP(cx));	// 1208                  pop     cx ;~ 01A2:08F1
cs=0x1a2;eip=0x0008f2; 	X(POP(bx));	// 1209                  pop     bx ;~ 01A2:08F2
cs=0x1a2;eip=0x0008f3; 	X(POP(ax));	// 1210                  pop     ax ;~ 01A2:08F3
cs=0x1a2;eip=0x0008f4; 	T(CMP(byte_1f780, 0));	// 1211                  cmp     ds:byte_1F780, 0 ;~ 01A2:08F4
cs=0x1a2;eip=0x0008f9; 	J(JZ(loc_10903));	// 1212                  jz      short loc_10903 ;~ 01A2:08F9
cs=0x1a2;eip=0x0008fb; 	X(byte_1f780 = 0;);	// 1213                  mov     ds:byte_1F780, 0 ;~ 01A2:08FB
cs=0x1a2;eip=0x000900; 	J(return start(m2c::kloc_101e4, _state););	// 1214                  jmp     loc_101E4 ;~ 01A2:0900
loc_10903:
	// 4469 
cs=0x1a2;eip=0x000903; 	T(MOV(di, *(dw*)(raddr(ds,di+2))));	// 1218                  mov     di, [di+2] ;~ 01A2:0903
cs=0x1a2;eip=0x000906; 	T(MOV(al, *(raddr(ds,di+5))));	// 1219                  mov     al, [di+5] ;~ 01A2:0906
cs=0x1a2;eip=0x000909; 	X(byte_1f77a = al;);	// 1220                  mov     ds:byte_1F77A, al ;~ 01A2:0909
cs=0x1a2;eip=0x00090c; 	T(MOV(al, *(raddr(ds,di+5))));	// 1221                  mov     al, [di+5] ;~ 01A2:090C
cs=0x1a2;eip=0x00090f; 	X(byte_1f77a = al;);	// 1222                  mov     ds:byte_1F77A, al ;~ 01A2:090F
cs=0x1a2;eip=0x000912; 	T(MOV(ax, *(dw*)(raddr(ds,di+2))));	// 1223                  mov     ax, [di+2] ;~ 01A2:0912
cs=0x1a2;eip=0x000915; 	T(XCHG(al, ah));	// 1224                  xchg    al, ah ;~ 01A2:0915
cs=0x1a2;eip=0x000917; 	T(OR(ax, ax));	// 1225                  or      ax, ax ;~ 01A2:0917
cs=0x1a2;eip=0x000919; 	J(JZ(loc_10963));	// 1226                  jz      short loc_10963 ;~ 01A2:0919
cs=0x1a2;eip=0x00091b; 	T(CMP(ax, 0x0FFFF));	// 1227                  cmp     ax, 0FFFFh ;~ 01A2:091B
cs=0x1a2;eip=0x00091e; 	J(JNZ(loc_10923));	// 1228                  jnz     short loc_10923 ;~ 01A2:091E
cs=0x1a2;eip=0x000920; 	J(JMP(loc_10a6b));	// 1229                  jmp     loc_10A6B ;~ 01A2:0920
loc_10923:
	// 4470 
cs=0x1a2;eip=0x000923; 	X(PUSH(di));	// 1233                  push    di ;~ 01A2:0923
cs=0x1a2;eip=0x000924; 	X(PUSH(dx));	// 1234                  push    dx ;~ 01A2:0924
cs=0x1a2;eip=0x000925; 	X(PUSH(cx));	// 1235                  push    cx ;~ 01A2:0925
cs=0x1a2;eip=0x000926; 	T(cx = ax;);	// 1236                  mov     cx, ax ;~ 01A2:0926
cs=0x1a2;eip=0x000928; 	X(PUSH(di));	// 1237                  push    di ;~ 01A2:0928
cs=0x1a2;eip=0x000929; 	X(PUSH(ax));	// 1238                  push    ax ;~ 01A2:0929
cs=0x1a2;eip=0x00092a; 	J(CALL(sub_186d1,0));	// 1239                  call    sub_186D1 ;~ 01A2:092A
cs=0x1a2;eip=0x00092d; 	X(POP(ax));	// 1240                  pop     ax ;~ 01A2:092D
cs=0x1a2;eip=0x00092e; 	X(POP(di));	// 1241                  pop     di ;~ 01A2:092E
cs=0x1a2;eip=0x00092f; 	J(JNZ(loc_10934));	// 1242                  jnz     short loc_10934 ;~ 01A2:092F
cs=0x1a2;eip=0x000931; 	J(JMP(loc_10a93));	// 1243                  jmp     loc_10A93 ;~ 01A2:0931
loc_10934:
	// 4471 
cs=0x1a2;eip=0x000934; 	T(TEST(*(raddr(ds,di+7)), 2));	// 1247                  test    byte ptr [di+7], 2 ;~ 01A2:0934
cs=0x1a2;eip=0x000938; 	J(JZ(loc_10948));	// 1248                  jz      short loc_10948 ;~ 01A2:0938
cs=0x1a2;eip=0x00093a; 	T(dx = ax;);	// 1249                  mov     dx, ax ;~ 01A2:093A
cs=0x1a2;eip=0x00093c; 	X(PUSH(ax));	// 1250                  push    ax ;~ 01A2:093C
cs=0x1a2;eip=0x00093d; 	J(CALL(sub_13efd,0));	// 1251                  call    sub_13EFD ;~ 01A2:093D
cs=0x1a2;eip=0x000940; 	X(POP(ax));	// 1252                  pop     ax ;~ 01A2:0940
cs=0x1a2;eip=0x000941; 	T(dx = ax;);	// 1253                  mov     dx, ax ;~ 01A2:0941
cs=0x1a2;eip=0x000943; 	J(CALL(sub_162a4,0));	// 1254                  call    sub_162A4 ;~ 01A2:0943
cs=0x1a2;eip=0x000946; 	J(JMP(loc_1094e));	// 1255                  jmp     short loc_1094E ;~ 01A2:0946
loc_10948:
	// 4472 
cs=0x1a2;eip=0x000948; 	T(TEST(*(raddr(ds,di+7)), 4));	// 1259                  test    byte ptr [di+7], 4 ;~ 01A2:0948
cs=0x1a2;eip=0x00094c; 	J(JZ(loc_10958));	// 1260                  jz      short loc_10958 ;~ 01A2:094C
loc_1094e:
	// 4473 
cs=0x1a2;eip=0x00094e; 	X(MOV(*(dw*)(raddr(ds,di+2)), 0));	// 1263                  mov     word ptr [di+2], 0 ;~ 01A2:094E
cs=0x1a2;eip=0x000953; 	X(MOV(*(dw*)(raddr(ds,di+2)), 0));	// 1264                  mov     word ptr [di+2], 0 ;~ 01A2:0953
loc_10958:
	// 4474 
cs=0x1a2;eip=0x000958; 	X(PUSH(ax));	// 1267                  push    ax ;~ 01A2:0958
cs=0x1a2;eip=0x000959; 	T(ax = 0x12;);	// 1268                  mov     ax, 12h ;~ 01A2:0959
cs=0x1a2;eip=0x00095c; 	J(CALL(sub_1156c,0));	// 1269                  call    sub_1156C ;~ 01A2:095C
cs=0x1a2;eip=0x00095f; 	X(POP(ax));	// 1270                  pop     ax ;~ 01A2:095F
cs=0x1a2;eip=0x000960; 	X(POP(cx));	// 1271                  pop     cx ;~ 01A2:0960
cs=0x1a2;eip=0x000961; 	X(POP(dx));	// 1272                  pop     dx ;~ 01A2:0961
cs=0x1a2;eip=0x000962; 	X(POP(di));	// 1273                  pop     di ;~ 01A2:0962
loc_10963:
	// 4475 
cs=0x1a2;eip=0x000963; 	X(PUSH(dx));	// 1276                  push    dx ;~ 01A2:0963
cs=0x1a2;eip=0x000964; 	X(PUSH(cx));	// 1277                  push    cx ;~ 01A2:0964
cs=0x1a2;eip=0x000965; 	X(PUSH(si));	// 1278                  push    si ;~ 01A2:0965
cs=0x1a2;eip=0x000966; 	T(al = dl;);	// 1279                  mov     al, dl ;~ 01A2:0966
cs=0x1a2;eip=0x000968; 	T(AND(dl, 0x0F8));	// 1280                  and     dl, 0F8h ;~ 01A2:0968
cs=0x1a2;eip=0x00096b; 	T(cl = 3;);	// 1281                  mov     cl, 3 ;~ 01A2:096B
cs=0x1a2;eip=0x00096d; 	T(SHR(dl, cl));	// 1282                  shr     dl, cl ;~ 01A2:096D
cs=0x1a2;eip=0x00096f; 	T(ah = dh;);	// 1283                  mov     ah, dh ;~ 01A2:096F
cs=0x1a2;eip=0x000971; 	T(AND(dh, 0x0F8));	// 1284                  and     dh, 0F8h ;~ 01A2:0971
cs=0x1a2;eip=0x000974; 	T(SHR(dh, cl));	// 1285                  shr     dh, cl ;~ 01A2:0974
cs=0x1a2;eip=0x000976; 	T(CMP(*(raddr(ds,di+5)), 0));	// 1286                  cmp     byte ptr [di+5], 0 ;~ 01A2:0976
cs=0x1a2;eip=0x00097a; 	J(JNZ(loc_109a5));	// 1287                  jnz     short loc_109A5 ;~ 01A2:097A
cs=0x1a2;eip=0x00097c; 	T(MOV(dh, *(raddr(ds,di+1))));	// 1288                  mov     dh, [di+1] ;~ 01A2:097C
cs=0x1a2;eip=0x00097f; 	T(INC(dh));	// 1289                  inc     dh ;~ 01A2:097F
cs=0x1a2;eip=0x000981; 	T(ah = 4;);	// 1290                  mov     ah, 4 ;~ 01A2:0981
cs=0x1a2;eip=0x000983; 	T(SUB(al, byte_1f742));	// 1291                  sub     al, ds:byte_1F742 ;~ 01A2:0983
cs=0x1a2;eip=0x000987; 	T(XOR(dl, dl));	// 1292                  xor     dl, dl ;~ 01A2:0987
cs=0x1a2;eip=0x000989; 	T(XCHG(dl, dh));	// 1293                  xchg    dl, dh ;~ 01A2:0989
cs=0x1a2;eip=0x00098b; 	X(word_1f704 = dx;);	// 1294                  mov     ds:word_1F704, dx ;~ 01A2:098B
cs=0x1a2;eip=0x00098f; 	T(XCHG(dl, dh));	// 1295                  xchg    dl, dh ;~ 01A2:098F
cs=0x1a2;eip=0x000991; 	T(AND(al, 0x0F8));	// 1296                  and     al, 0F8h ;~ 01A2:0991
cs=0x1a2;eip=0x000993; 	J(JZ(loc_1099d));	// 1297                  jz      short loc_1099D ;~ 01A2:0993
cs=0x1a2;eip=0x000995; 	X(word_1f702 = 0x0FFFF;);	// 1298                  mov     ds:word_1F702, 0FFFFh ;~ 01A2:0995
cs=0x1a2;eip=0x00099b; 	J(JMP(loc_109c8));	// 1299                  jmp     short loc_109C8 ;~ 01A2:099B
loc_1099d:
	// 4476 
cs=0x1a2;eip=0x00099d; 	X(word_1f702 = 0x0FFFE;);	// 1303                  mov     ds:word_1F702, 0FFFEh ;~ 01A2:099D
cs=0x1a2;eip=0x0009a3; 	J(JMP(loc_109c8));	// 1304                  jmp     short loc_109C8 ;~ 01A2:09A3
loc_109a5:
	// 4477 
cs=0x1a2;eip=0x0009a5; 	T(MOV(dl, *(raddr(ds,di))));	// 1308                  mov     dl, [di] ;~ 01A2:09A5
cs=0x1a2;eip=0x0009a7; 	T(INC(dl));	// 1309                  inc     dl ;~ 01A2:09A7
cs=0x1a2;eip=0x0009a9; 	T(al = 4;);	// 1310                  mov     al, 4 ;~ 01A2:09A9
cs=0x1a2;eip=0x0009ab; 	T(SUB(ah, byte_1f741));	// 1311                  sub     ah, ds:byte_1F741 ;~ 01A2:09AB
cs=0x1a2;eip=0x0009af; 	T(XOR(dh, dh));	// 1312                  xor     dh, dh ;~ 01A2:09AF
cs=0x1a2;eip=0x0009b1; 	X(word_1f702 = dx;);	// 1313                  mov     ds:word_1F702, dx ;~ 01A2:09B1
cs=0x1a2;eip=0x0009b5; 	T(AND(ah, 0x0F8));	// 1314                  and     ah, 0F8h ;~ 01A2:09B5
cs=0x1a2;eip=0x0009b8; 	J(JZ(loc_109c2));	// 1315                  jz      short loc_109C2 ;~ 01A2:09B8
cs=0x1a2;eip=0x0009ba; 	X(word_1f704 = 0x0FFFF;);	// 1316                  mov     ds:word_1F704, 0FFFFh ;~ 01A2:09BA
cs=0x1a2;eip=0x0009c0; 	J(JMP(loc_109c8));	// 1317                  jmp     short loc_109C8 ;~ 01A2:09C0
loc_109c2:
	// 4478 
cs=0x1a2;eip=0x0009c2; 	X(word_1f704 = 0x0FFFE;);	// 1321                  mov     ds:word_1F704, 0FFFEh ;~ 01A2:09C2
loc_109c8:
	// 4479 
cs=0x1a2;eip=0x0009c8; 	X(PUSH(cx));	// 1325                  push    cx ;~ 01A2:09C8
cs=0x1a2;eip=0x0009c9; 	X(MOV(*(raddr(ds,si)), al));	// 1326                  mov     [si], al ;~ 01A2:09C9
cs=0x1a2;eip=0x0009cb; 	X(MOV(*(raddr(ds,si+1)), ah));	// 1327                  mov     [si+1], ah ;~ 01A2:09CB
cs=0x1a2;eip=0x0009ce; 	T(MOV(al, *(raddr(ds,si+2))));	// 1328                  mov     al, [si+2] ;~ 01A2:09CE
cs=0x1a2;eip=0x0009d1; 	T(ah = al;);	// 1329                  mov     ah, al ;~ 01A2:09D1
cs=0x1a2;eip=0x0009d3; 	T(AND(ah, 0x0F));	// 1330                  and     ah, 0Fh ;~ 01A2:09D3
cs=0x1a2;eip=0x0009d6; 	T(cl = ah;);	// 1331                  mov     cl, ah ;~ 01A2:09D6
cs=0x1a2;eip=0x0009d8; 	X(word_1f706 = cx;);	// 1332                  mov     ds:word_1F706, cx ;~ 01A2:09D8
cs=0x1a2;eip=0x0009dc; 	X(POP(cx));	// 1333                  pop     cx ;~ 01A2:09DC
cs=0x1a2;eip=0x0009dd; 	T(cl = 4;);	// 1334                  mov     cl, 4 ;~ 01A2:09DD
cs=0x1a2;eip=0x0009df; 	T(SHR(al, cl));	// 1335                  shr     al, cl ;~ 01A2:09DF
cs=0x1a2;eip=0x0009e1; 	X(PUSH(si));	// 1336                  push    si ;~ 01A2:09E1
cs=0x1a2;eip=0x0009e2; 	T(si = word_1f1ce;);	// 1337                  mov     si, word_1F1CE ;~ 01A2:09E2
cs=0x1a2;eip=0x0009e6; 	T(ADD(al, *(raddr(ds,si+0x1E))));	// 1338                  add     al, [si+1Eh] ;~ 01A2:09E6
cs=0x1a2;eip=0x0009e9; 	X(POP(si));	// 1339                  pop     si ;~ 01A2:09E9
cs=0x1a2;eip=0x0009ea; 	X(MOV(*(raddr(ds,si+2)), al));	// 1340                  mov     [si+2], al ;~ 01A2:09EA
cs=0x1a2;eip=0x0009ed; 	T(MOV(dl, *(raddr(ds,di))));	// 1341                  mov     dl, [di] ;~ 01A2:09ED
cs=0x1a2;eip=0x0009ef; 	T(MOV(dh, *(raddr(ds,di+1))));	// 1342                  mov     dh, [di+1] ;~ 01A2:09EF
cs=0x1a2;eip=0x0009f2; 	X(PUSH(di));	// 1343                  push    di ;~ 01A2:09F2
cs=0x1a2;eip=0x0009f3; 	J(CALL(sub_15c0e,0));	// 1344                  call    sub_15C0E ;~ 01A2:09F3
cs=0x1a2;eip=0x0009f6; 	X(POP(di));	// 1345                  pop     di ;~ 01A2:09F6
cs=0x1a2;eip=0x0009f7; 	T(OR(ax, ax));	// 1346                  or      ax, ax ;~ 01A2:09F7
cs=0x1a2;eip=0x0009f9; 	T(CMP(ax, word_1f3a2));	// 1347                  cmp     ax, ds:word_1F3A2 ;~ 01A2:09F9
cs=0x1a2;eip=0x0009fd; 	J(JZ(loc_10a00));	// 1348                  jz      short loc_10A00 ;~ 01A2:09FD
cs=0x1a2;eip=0x0009ff; 	T(XCHG(ax, dx));	// 1349                  xchg    ax, dx ;~ 01A2:09FF
loc_10a00:
	// 4480 
cs=0x1a2;eip=0x000a00; 	T(cx = ax;);	// 1352                  mov     cx, ax ;~ 01A2:0A00
cs=0x1a2;eip=0x000a02; 	X(word_1f3a2 = dx;);	// 1353                  mov     ds:word_1F3A2, dx ;~ 01A2:0A02
cs=0x1a2;eip=0x000a06; 	T(TEST(*(raddr(ds,di+4)), 1));	// 1354                  test    byte ptr [di+4], 1 ;~ 01A2:0A06
cs=0x1a2;eip=0x000a0a; 	J(JZ(loc_10a19));	// 1355                  jz      short loc_10A19 ;~ 01A2:0A0A
cs=0x1a2;eip=0x000a0c; 	J(CALL(sub_115eb,0));	// 1356                  call    sub_115EB ;~ 01A2:0A0C
cs=0x1a2;eip=0x000a0f; 	X(PUSH(ax));	// 1357                  push    ax ;~ 01A2:0A0F
cs=0x1a2;eip=0x000a10; 	T(ax = 7;);	// 1358                  mov     ax, 7 ;~ 01A2:0A10
cs=0x1a2;eip=0x000a13; 	J(CALL(sub_1156c,0));	// 1359                  call    sub_1156C ;~ 01A2:0A13
cs=0x1a2;eip=0x000a16; 	X(POP(ax));	// 1360                  pop     ax ;~ 01A2:0A16
cs=0x1a2;eip=0x000a17; 	J(JMP(loc_10a1c));	// 1361                  jmp     short loc_10A1C ;~ 01A2:0A17
loc_10a19:
	// 4481 
cs=0x1a2;eip=0x000a19; 	J(CALL(sub_115eb,0));	// 1365                  call    sub_115EB ;~ 01A2:0A19
loc_10a1c:
	// 4482 
cs=0x1a2;eip=0x000a1c; 	X(PUSH(cx));	// 1368                  push    cx ;~ 01A2:0A1C
cs=0x1a2;eip=0x000a1d; 	X(PUSH(di));	// 1369                  push    di ;~ 01A2:0A1D
cs=0x1a2;eip=0x000a1e; 	J(CALL(sub_1da60,0));	// 1370                  call    sub_1DA60 ;~ 01A2:0A1E
cs=0x1a2;eip=0x000a21; 	J(JS(loc_10a35));	// 1372                  js      short loc_10A35 ;~ 01A2:0A21
cs=0x1a2;eip=0x000a23; 	X(POP(di));	// 1373                  pop     di ;~ 01A2:0A23
cs=0x1a2;eip=0x000a24; 	X(POP(cx));	// 1374                  pop     cx ;~ 01A2:0A24
cs=0x1a2;eip=0x000a25; 	X(POP(si));	// 1375                  pop     si ;~ 01A2:0A25
cs=0x1a2;eip=0x000a26; 	X(POP(cx));	// 1376                  pop     cx ;~ 01A2:0A26
cs=0x1a2;eip=0x000a27; 	X(POP(dx));	// 1377                  pop     dx ;~ 01A2:0A27
cs=0x1a2;eip=0x000a28; 	T(TEST(*(raddr(ds,di+7)), 8));	// 1378                  test    byte ptr [di+7], 8 ;~ 01A2:0A28
cs=0x1a2;eip=0x000a2c; 	X(PUSHF);	// 1379                  pushf ;~ 01A2:0A2C
cs=0x1a2;eip=0x000a2d; 	X(OR(*(raddr(ds,di+7)), 8));	// 1380                  or      byte ptr [di+7], 8 ;~ 01A2:0A2D
cs=0x1a2;eip=0x000a31; 	X(POPF);	// 1381                  popf ;~ 01A2:0A31
cs=0x1a2;eip=0x000a32; 	J(return start(m2c::kloc_101e4, _state););	// 1382                  jmp     loc_101E4 ;~ 01A2:0A32
loc_10a35:
	// 4483 
cs=0x1a2;eip=0x000a35; 	X(POP(di));	// 1386                  pop     di ;~ 01A2:0A35
cs=0x1a2;eip=0x000a36; 	X(POP(cx));	// 1387                  pop     cx ;~ 01A2:0A36
cs=0x1a2;eip=0x000a37; 	X(word_1f3a2 = cx;);	// 1388                  mov     ds:word_1F3A2, cx ;~ 01A2:0A37
cs=0x1a2;eip=0x000a3b; 	X(POP(si));	// 1389                  pop     si ;~ 01A2:0A3B
cs=0x1a2;eip=0x000a3c; 	X(POP(cx));	// 1390                  pop     cx ;~ 01A2:0A3C
cs=0x1a2;eip=0x000a3d; 	X(POP(dx));	// 1391                  pop     dx ;~ 01A2:0A3D
cs=0x1a2;eip=0x000a3e; 	T(SUB(dl, byte_1f8df));	// 1392                  sub     dl, ds:byte_1F8DF ;~ 01A2:0A3E
cs=0x1a2;eip=0x000a42; 	T(SUB(dh, byte_1f8e0));	// 1393                  sub     dh, ds:byte_1F8E0 ;~ 01A2:0A42
cs=0x1a2;eip=0x000a46; 	T(si = word_1f1cc;);	// 1394                  mov     si, word_1F1CC ;~ 01A2:0A46
cs=0x1a2;eip=0x000a4a; 	X(MOV(*(raddr(ds,si+2)), ch));	// 1395                  mov     [si+2], ch ;~ 01A2:0A4A
cs=0x1a2;eip=0x000a4d; 	X(MOV(*(raddr(ds,si)), dl));	// 1396                  mov     [si], dl ;~ 01A2:0A4D
cs=0x1a2;eip=0x000a4f; 	X(MOV(*(raddr(ds,si+1)), dh));	// 1397                  mov     [si+1], dh ;~ 01A2:0A4F
cs=0x1a2;eip=0x000a52; 	X(PUSH(ax));	// 1398                  push    ax ;~ 01A2:0A52
cs=0x1a2;eip=0x000a53; 	J(CALL(_group34,m2c::kloc_1da59));	// 1399                  call    loc_1DA59 ;~ 01A2:0A53
cs=0x1a2;eip=0x000a56; 	X(POP(ax));	// 1400                  pop     ax ;~ 01A2:0A56
cs=0x1a2;eip=0x000a57; 	T(ADD(ax, 2));	// 1401                  add     ax, 2 ;~ 01A2:0A57
cs=0x1a2;eip=0x000a5a; 	J(JS(loc_10a5f));	// 1402                  js      short loc_10A5F ;~ 01A2:0A5A
cs=0x1a2;eip=0x000a5c; 	J(return start(m2c::kloc_101e4, _state););	// 1403                  jmp     loc_101E4 ;~ 01A2:0A5C
loc_10a5f:
	// 4484 
cs=0x1a2;eip=0x000a5f; 	X(word_1f70a = 2;);	// 1407                  mov     ds:word_1F70A, 2 ;~ 01A2:0A5F
cs=0x1a2;eip=0x000a65; 	J(CALL(sub_15c9c,0));	// 1408                  call    sub_15C9C ;~ 01A2:0A65
cs=0x1a2;eip=0x000a68; 	J(return start(m2c::kloc_101e4, _state););	// 1409                  jmp     loc_101E4 ;~ 01A2:0A68
loc_10a6b:
	// 4485 
cs=0x1a2;eip=0x000a6b; 	T(TEST(*(raddr(ds,di+7)), 0x40));	// 1413                  test    byte ptr [di+7], 40h ;~ 01A2:0A6B
cs=0x1a2;eip=0x000a6f; 	J(JZ(loc_10a91));	// 1414                  jz      short loc_10A91 ;~ 01A2:0A6F
cs=0x1a2;eip=0x000a71; 	T(ax = 0x30;);	// 1415                  mov     ax, 30h ; '0' ;~ 01A2:0A71
cs=0x1a2;eip=0x000a74; 	X(PUSH(si));	// 1416                  push    si ;~ 01A2:0A74
cs=0x1a2;eip=0x000a75; 	T(si = word_1f1f4;);	// 1417                  mov     si, word_1F1F4 ;~ 01A2:0A75
cs=0x1a2;eip=0x000a79; 	X(MOV(*(dw*)(raddr(ds,si)), 8));	// 1418                  mov     word ptr [si], 8 ;~ 01A2:0A79
cs=0x1a2;eip=0x000a7d; 	T(ADD(si, 2));	// 1419                  add     si, 2 ;~ 01A2:0A7D
cs=0x1a2;eip=0x000a80; 	X(MOV(*(dw*)(raddr(ds,si)), ax));	// 1420                  mov     [si], ax ;~ 01A2:0A80
cs=0x1a2;eip=0x000a82; 	T(ADD(si, 2));	// 1421                  add     si, 2 ;~ 01A2:0A82
cs=0x1a2;eip=0x000a85; 	T(ADD(si, 2));	// 1422                  add     si, 2 ;~ 01A2:0A85
cs=0x1a2;eip=0x000a88; 	X(word_1f1f4 = si;);	// 1423                  mov     word_1F1F4, si ;~ 01A2:0A88
cs=0x1a2;eip=0x000a8c; 	X(INC(word_1f396));	// 1424                  inc     ds:word_1F396 ;~ 01A2:0A8C
cs=0x1a2;eip=0x000a90; 	X(POP(si));	// 1425                  pop     si ;~ 01A2:0A90
loc_10a91:
	// 4486 
cs=0x1a2;eip=0x000a91; 	J(JMP(loc_10a96));	// 1428                  jmp     short loc_10A96 ;~ 01A2:0A91
loc_10a93:
	// 4487 
cs=0x1a2;eip=0x000a93; 	X(POP(cx));	// 1432                  pop     cx ;~ 01A2:0A93
cs=0x1a2;eip=0x000a94; 	X(POP(dx));	// 1433                  pop     dx ;~ 01A2:0A94
cs=0x1a2;eip=0x000a95; 	X(POP(di));	// 1434                  pop     di ;~ 01A2:0A95
loc_10a96:
	// 4488 
cs=0x1a2;eip=0x000a96; 	X(ADD(byte_1f855, 8));	// 1437                  add     ds:byte_1F855, 8 ;~ 01A2:0A96
cs=0x1a2;eip=0x000a9b; 	J(JZ(loc_10aa0));	// 1438                  jz      short loc_10AA0 ;~ 01A2:0A9B
cs=0x1a2;eip=0x000a9d; 	J(JMP(loc_10ba6));	// 1439                  jmp     loc_10BA6 ;~ 01A2:0A9D
loc_10aa0:
	// 4489 
cs=0x1a2;eip=0x000aa0; 	X(PUSH(ax));	// 1443                  push    ax ;~ 01A2:0AA0
cs=0x1a2;eip=0x000aa1; 	T(ax = 0x3C;);	// 1444                  mov     ax, 3Ch ; '<' ;~ 01A2:0AA1
cs=0x1a2;eip=0x000aa4; 	J(CALL(sub_1156c,0));	// 1445                  call    sub_1156C ;~ 01A2:0AA4
cs=0x1a2;eip=0x000aa7; 	X(POP(ax));	// 1446                  pop     ax ;~ 01A2:0AA7
cs=0x1a2;eip=0x000aa8; 	J(JMP(loc_10ba6));	// 1447                  jmp     loc_10BA6 ;~ 01A2:0AA8
loc_10aab:
	// 4490 
cs=0x1a2;eip=0x000aab; 	J(JMP(sub_10b61));	// 1452                  jmp     sub_10B61 ;~ 01A2:0AAB
loc_10aae:
	// 4491 
cs=0x1a2;eip=0x000aae; 	X(word_1f1e4 = 0;);	// 1457                  mov     word_1F1E4, 0 ;~ 01A2:0AAE
cs=0x1a2;eip=0x000ab4; 	X(word_1f1e4 = 0;);	// 1458                  mov     word_1F1E4, 0 ;~ 01A2:0AB4
cs=0x1a2;eip=0x000aba; 	T(dl = byte_1f8df;);	// 1459                  mov     dl, ds:byte_1F8DF ;~ 01A2:0ABA
cs=0x1a2;eip=0x000abe; 	T(dh = byte_1f8e0;);	// 1460                  mov     dh, ds:byte_1F8E0 ;~ 01A2:0ABE
cs=0x1a2;eip=0x000ac2; 	T(si = word_1f1ac;);	// 1461                  mov     si, word_1F1AC ;~ 01A2:0AC2
cs=0x1a2;eip=0x000ac6; 	T(di = word_1f1cc;);	// 1462                  mov     di, word_1F1CC ;~ 01A2:0AC6
cs=0x1a2;eip=0x000aca; 	J(CALL(sub_121b0,0));	// 1463                  call    sub_121B0 ;~ 01A2:0ACA
cs=0x1a2;eip=0x000acd; 	J(JMP(sub_10b61));	// 1464                  jmp     sub_10B61 ;~ 01A2:0ACD
loc_10ad0:
	// 4492 
cs=0x1a2;eip=0x000ad0; 	J(JMP(loc_10af6));	// 1469                  jmp     short loc_10AF6 ;~ 01A2:0AD0
ret_1a2_ad2:
	// 4493 
cs=0x1a2;eip=0x000ad2; 	T(CMP(byte_1f856, 0));	// 1471                  cmp     ds:byte_1F856, 0 ;~ 01A2:0AD2
cs=0x1a2;eip=0x000ad7; 	J(JZ(loc_10ae4));	// 1472                  jz      short loc_10AE4 ;~ 01A2:0AD7
cs=0x1a2;eip=0x000ad9; 	T(al = byte_1f856;);	// 1473                  mov     al, ds:byte_1F856 ;~ 01A2:0AD9
cs=0x1a2;eip=0x000adc; 	X(byte_1f856 = 0;);	// 1474                  mov     ds:byte_1F856, 0 ;~ 01A2:0ADC
cs=0x1a2;eip=0x000ae1; 	J(CALL(sub_11613,0));	// 1475                  call    sub_11613 ;~ 01A2:0AE1
loc_10ae4:
	// 4494 
cs=0x1a2;eip=0x000ae4; 	T(CMP(byte_1f852, 0));	// 1478                  cmp     ds:byte_1F852, 0 ;~ 01A2:0AE4
cs=0x1a2;eip=0x000ae9; 	J(JZ(loc_10af6));	// 1479                  jz      short loc_10AF6 ;~ 01A2:0AE9
cs=0x1a2;eip=0x000aeb; 	T(al = byte_1f856;);	// 1480                  mov     al, ds:byte_1F856 ;~ 01A2:0AEB
cs=0x1a2;eip=0x000aee; 	X(byte_1f852 = 0;);	// 1481                  mov     ds:byte_1F852, 0 ;~ 01A2:0AEE
cs=0x1a2;eip=0x000af3; 	J(CALL(sub_11613,0));	// 1482                  call    sub_11613 ;~ 01A2:0AF3
loc_10af6:
	// 4495 
cs=0x1a2;eip=0x000af6; 	T(XOR(bh, bh));	// 1486                  xor     bh, bh ;~ 01A2:0AF6
cs=0x1a2;eip=0x000af8; 	T(bl = byte_1f778;);	// 1487                  mov     bl, ds:byte_1F778 ;~ 01A2:0AF8
cs=0x1a2;eip=0x000afc; 	T(AND(bl, 0x0F));	// 1488                  and     bl, 0Fh ;~ 01A2:0AFC
cs=0x1a2;eip=0x000aff; 	T(SHL(bx, 1));	// 1489                  shl     bx, 1 ;~ 01A2:0AFF
cs=0x1a2;eip=0x000b01; 	T(si = 0x0FA04;);	// 1490                  mov     si, 0FA04h ;~ 01A2:0B01
cs=0x1a2;eip=0x000b04; 	T(ADD(si, bx));	// 1491                  add     si, bx ;~ 01A2:0B04
cs=0x1a2;eip=0x000b06; 	T(LODSW);	// 1492                  lodsw ;~ 01A2:0B06
cs=0x1a2;eip=0x000b07; 	T(CMP(byte_1f7bb, 0));	// 1493                  cmp     ds:byte_1F7BB, 0 ;~ 01A2:0B07
cs=0x1a2;eip=0x000b0c; 	T(CMP(byte_1f7bb, 0));	// 1494                  cmp     ds:byte_1F7BB, 0 ;~ 01A2:0B0C
cs=0x1a2;eip=0x000b11; 	J(JZ(loc_10b17));	// 1495                  jz      short loc_10B17 ;~ 01A2:0B11
cs=0x1a2;eip=0x000b13; 	T(NEG(al));	// 1496                  neg     al ;~ 01A2:0B13
cs=0x1a2;eip=0x000b15; 	T(NEG(ah));	// 1497                  neg     ah ;~ 01A2:0B15
loc_10b17:
	// 4496 
cs=0x1a2;eip=0x000b17; 	T(ADD(dl, al));	// 1500                  add     dl, al ;~ 01A2:0B17
cs=0x1a2;eip=0x000b19; 	T(ADD(dh, ah));	// 1501                  add     dh, ah ;~ 01A2:0B19
cs=0x1a2;eip=0x000b1b; 	X(byte_1f8df = al;);	// 1502                  mov     ds:byte_1F8DF, al ;~ 01A2:0B1B
cs=0x1a2;eip=0x000b1e; 	X(byte_1f8e0 = ah;);	// 1503                  mov     ds:byte_1F8E0, ah ;~ 01A2:0B1E
cs=0x1a2;eip=0x000b22; 	T(es = *(dw*)(((db*)&off_1f194)+2););	// 1504                  mov     es, word ptr off_1F194+2 ;~ 01A2:0B22
cs=0x1a2;eip=0x000b26; 	T(di = word_1f198;);	// 1505                  mov     di, word_1F198 ;~ 01A2:0B26
cs=0x1a2;eip=0x000b2a; 	T(si = word_1f1cc;);	// 1506                  mov     si, word_1F1CC ;~ 01A2:0B2A
cs=0x1a2;eip=0x000b2e; 	J(CALL(sub_116e0,0));	// 1507                  call    sub_116E0 ;~ 01A2:0B2E
cs=0x1a2;eip=0x000b31; 	J(JS(loc_10b57));	// 1508                  js      short loc_10B57 ;~ 01A2:0B31
cs=0x1a2;eip=0x000b33; 	J(JZ(loc_10b42));	// 1509                  jz      short loc_10B42 ;~ 01A2:0B33
cs=0x1a2;eip=0x000b35; 	T(di = word_1f1cc;);	// 1510                  mov     di, word_1F1CC ;~ 01A2:0B35
cs=0x1a2;eip=0x000b39; 	T(si = word_1f1ac;);	// 1511                  mov     si, word_1F1AC ;~ 01A2:0B39
cs=0x1a2;eip=0x000b3d; 	J(CALL(sub_122c4,0));	// 1512                  call    sub_122C4 ;~ 01A2:0B3D
cs=0x1a2;eip=0x000b40; 	J(JMP(sub_10b61));	// 1513                  jmp     short sub_10B61 ;~ 01A2:0B40
loc_10b42:
	// 4497 
cs=0x1a2;eip=0x000b42; 	T(OR(ch, ch));	// 1517                  or      ch, ch ;~ 01A2:0B42
cs=0x1a2;eip=0x000b44; 	J(JZ(loc_10b57));	// 1518                  jz      short loc_10B57 ;~ 01A2:0B44
cs=0x1a2;eip=0x000b46; 	T(DEC(ch));	// 1519                  dec     ch ;~ 01A2:0B46
cs=0x1a2;eip=0x000b48; 	T(TEST(byte_1f873, 0x20));	// 1520                  test    ds:byte_1F873, 20h ;~ 01A2:0B48
cs=0x1a2;eip=0x000b4d; 	X(PUSHF);	// 1521                  pushf ;~ 01A2:0B4D
cs=0x1a2;eip=0x000b4e; 	X(OR(byte_1f873, 0x20));	// 1522                  or      ds:byte_1F873, 20h ;~ 01A2:0B4E
cs=0x1a2;eip=0x000b53; 	X(POPF);	// 1523                  popf ;~ 01A2:0B53
cs=0x1a2;eip=0x000b54; 	J(CALL(sub_116e0,0));	// 1524                  call    sub_116E0 ;~ 01A2:0B54
loc_10b57:
	// 4498 
cs=0x1a2;eip=0x000b57; 	T(CMP(byte_1f73f, 0));	// 1528                  cmp     ds:byte_1F73F, 0 ;~ 01A2:0B57
cs=0x1a2;eip=0x000b5c; 	J(JZ(sub_10b61));	// 1529                  jz      short sub_10B61 ;~ 01A2:0B5C
cs=0x1a2;eip=0x000b5e; 	J(CALL(sub_129cf,0));	// 1530                  call    sub_129CF ;~ 01A2:0B5E
sub_10b61:
	// 1537 
cs=0x1a2;eip=0x000b61; 	T(TEST(byte_1f857, 1));	// 1539                  test    ds:byte_1F857, 1 ;~ 01A2:0B61
cs=0x1a2;eip=0x000b66; 	X(PUSHF);	// 1540                  pushf ;~ 01A2:0B66
cs=0x1a2;eip=0x000b67; 	X(AND(byte_1f857, 0x0FE));	// 1541                  and     ds:byte_1F857, 0FEh ;~ 01A2:0B67
cs=0x1a2;eip=0x000b6c; 	X(POPF);	// 1542                  popf ;~ 01A2:0B6C
cs=0x1a2;eip=0x000b6d; 	J(JNZ(loc_10b81));	// 1543                  jnz     short loc_10B81 ;~ 01A2:0B6D
cs=0x1a2;eip=0x000b6f; 	T(CMP(byte_1f856, 0));	// 1544                  cmp     ds:byte_1F856, 0 ;~ 01A2:0B6F
cs=0x1a2;eip=0x000b74; 	J(JZ(loc_10b81));	// 1545                  jz      short loc_10B81 ;~ 01A2:0B74
cs=0x1a2;eip=0x000b76; 	T(al = byte_1f856;);	// 1546                  mov     al, ds:byte_1F856 ;~ 01A2:0B76
cs=0x1a2;eip=0x000b79; 	X(byte_1f856 = 0;);	// 1547                  mov     ds:byte_1F856, 0 ;~ 01A2:0B79
cs=0x1a2;eip=0x000b7e; 	J(CALL(sub_11613,0));	// 1548                  call    sub_11613 ;~ 01A2:0B7E
loc_10b81:
	// 4499 
cs=0x1a2;eip=0x000b81; 	T(TEST(byte_1f857, 2));	// 1552                  test    ds:byte_1F857, 2 ;~ 01A2:0B81
cs=0x1a2;eip=0x000b86; 	X(PUSHF);	// 1553                  pushf ;~ 01A2:0B86
cs=0x1a2;eip=0x000b87; 	X(AND(byte_1f857, 0x0FD));	// 1554                  and     ds:byte_1F857, 0FDh ;~ 01A2:0B87
cs=0x1a2;eip=0x000b8c; 	X(POPF);	// 1555                  popf ;~ 01A2:0B8C
cs=0x1a2;eip=0x000b8d; 	J(JNZ(loc_10ba1));	// 1556                  jnz     short loc_10BA1 ;~ 01A2:0B8D
cs=0x1a2;eip=0x000b8f; 	T(CMP(byte_1f852, 0));	// 1557                  cmp     ds:byte_1F852, 0 ;~ 01A2:0B8F
cs=0x1a2;eip=0x000b94; 	J(JZ(loc_10ba1));	// 1558                  jz      short loc_10BA1 ;~ 01A2:0B94
cs=0x1a2;eip=0x000b96; 	T(al = byte_1f852;);	// 1559                  mov     al, ds:byte_1F852 ;~ 01A2:0B96
cs=0x1a2;eip=0x000b99; 	X(byte_1f852 = 0;);	// 1560                  mov     ds:byte_1F852, 0 ;~ 01A2:0B99
cs=0x1a2;eip=0x000b9e; 	J(CALL(sub_11613,0));	// 1561                  call    sub_11613 ;~ 01A2:0B9E
loc_10ba1:
	// 4500 
cs=0x1a2;eip=0x000ba1; 	X(byte_1f855 = 0x0F8;);	// 1565                  mov     ds:byte_1F855, 0F8h ;~ 01A2:0BA1
loc_10ba6:
	// 4501 
cs=0x1a2;eip=0x000ba6; 	J(CALL(sub_11eb5,0));	// 1569                  call    sub_11EB5 ;~ 01A2:0BA6
cs=0x1a2;eip=0x000ba9; 	J(CALL(sub_17634,0));	// 1570                  call    sub_17634 ;~ 01A2:0BA9
cs=0x1a2;eip=0x000bac; 	J(CALL(sub_1608f,0));	// 1571                  call    sub_1608F ;~ 01A2:0BAC
cs=0x1a2;eip=0x000baf; 	J(RETN(0));	// 1572                  retn ;~ 01A2:0BAF

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_10270: 	goto loc_10270;
        case m2c::kloc_10292: 	goto loc_10292;
        case m2c::kloc_102bd: 	goto loc_102bd;
        case m2c::kloc_102c8: 	goto loc_102c8;
        case m2c::kloc_102d3: 	goto loc_102d3;
        case m2c::kloc_102ec: 	goto loc_102ec;
        case m2c::kloc_102ff: 	goto loc_102ff;
        case m2c::kloc_10306: 	goto loc_10306;
        case m2c::kloc_10316: 	goto loc_10316;
        case m2c::kloc_10328: 	goto loc_10328;
        case m2c::kloc_10348: 	goto loc_10348;
        case m2c::kloc_1035c: 	goto loc_1035c;
        case m2c::kloc_1037a: 	goto loc_1037a;
        case m2c::kloc_1038c: 	goto loc_1038c;
        case m2c::kloc_10393: 	goto loc_10393;
        case m2c::kloc_1039d: 	goto loc_1039d;
        case m2c::kloc_103ad: 	goto loc_103ad;
        case m2c::kloc_103bb: 	goto loc_103bb;
        case m2c::kloc_103cd: 	goto loc_103cd;
        case m2c::kloc_103e3: 	goto loc_103e3;
        case m2c::kloc_103eb: 	goto loc_103eb;
        case m2c::kloc_10403: 	goto loc_10403;
        case m2c::kloc_10420: 	goto loc_10420;
        case m2c::kloc_10430: 	goto loc_10430;
        case m2c::kloc_10450: 	goto loc_10450;
        case m2c::kloc_1046c: 	goto loc_1046c;
        case m2c::kloc_10475: 	goto loc_10475;
        case m2c::kloc_10484: 	goto loc_10484;
        case m2c::kloc_1048f: 	goto loc_1048f;
        case m2c::kloc_10492: 	goto loc_10492;
        case m2c::kloc_1049c: 	goto loc_1049c;
        case m2c::kloc_104a7: 	goto loc_104a7;
        case m2c::kloc_104b2: 	goto loc_104b2;
        case m2c::kloc_104d1: 	goto loc_104d1;
        case m2c::kloc_104eb: 	goto loc_104eb;
        case m2c::kloc_104fa: 	goto loc_104fa;
        case m2c::kloc_10530: 	goto loc_10530;
        case m2c::kloc_10553: 	goto loc_10553;
        case m2c::kloc_10573: 	goto loc_10573;
        case m2c::kloc_105a0: 	goto loc_105a0;
        case m2c::kloc_105b1: 	goto loc_105b1;
        case m2c::kloc_105c2: 	goto loc_105c2;
        case m2c::kloc_105cc: 	goto loc_105cc;
        case m2c::kloc_105d8: 	goto loc_105d8;
        case m2c::kloc_105ec: 	goto loc_105ec;
        case m2c::kloc_105f1: 	goto loc_105f1;
        case m2c::kloc_1063b: 	goto loc_1063b;
        case m2c::kloc_10664: 	goto loc_10664;
        case m2c::kloc_10667: 	goto loc_10667;
        case m2c::kloc_1066f: 	goto loc_1066f;
        case m2c::kloc_10674: 	goto loc_10674;
        case m2c::kloc_10687: 	goto loc_10687;
        case m2c::kloc_106a3: 	goto loc_106a3;
        case m2c::kloc_106be: 	goto loc_106be;
        case m2c::kloc_106d1: 	goto loc_106d1;
        case m2c::kloc_106f5: 	goto loc_106f5;
        case m2c::kloc_10701: 	goto loc_10701;
        case m2c::kloc_1070b: 	goto loc_1070b;
        case m2c::kloc_1071a: 	goto loc_1071a;
        case m2c::kloc_10726: 	goto loc_10726;
        case m2c::kloc_10730: 	goto loc_10730;
        case m2c::kloc_10732: 	goto loc_10732;
        case m2c::kloc_1073c: 	goto loc_1073c;
        case m2c::kloc_1075f: 	goto loc_1075f;
        case m2c::kloc_10762: 	goto loc_10762;
        case m2c::kloc_1080f: 	goto loc_1080f;
        case m2c::kloc_10810: 	goto loc_10810;
        case m2c::kloc_10816: 	goto loc_10816;
        case m2c::kloc_10840: 	goto loc_10840;
        case m2c::kloc_1084e: 	goto loc_1084e;
        case m2c::kloc_10854: 	goto loc_10854;
        case m2c::kloc_1085e: 	goto loc_1085e;
        case m2c::kloc_10867: 	goto loc_10867;
        case m2c::kloc_1087c: 	goto loc_1087c;
        case m2c::kloc_1089c: 	goto loc_1089c;
        case m2c::kloc_108c7: 	goto loc_108c7;
        case m2c::kloc_108dc: 	goto loc_108dc;
        case m2c::kloc_10903: 	goto loc_10903;
        case m2c::kloc_10923: 	goto loc_10923;
        case m2c::kloc_10934: 	goto loc_10934;
        case m2c::kloc_10948: 	goto loc_10948;
        case m2c::kloc_1094e: 	goto loc_1094e;
        case m2c::kloc_10958: 	goto loc_10958;
        case m2c::kloc_10963: 	goto loc_10963;
        case m2c::kloc_1099d: 	goto loc_1099d;
        case m2c::kloc_109a5: 	goto loc_109a5;
        case m2c::kloc_109c2: 	goto loc_109c2;
        case m2c::kloc_109c8: 	goto loc_109c8;
        case m2c::kloc_10a00: 	goto loc_10a00;
        case m2c::kloc_10a19: 	goto loc_10a19;
        case m2c::kloc_10a1c: 	goto loc_10a1c;
        case m2c::kloc_10a35: 	goto loc_10a35;
        case m2c::kloc_10a5f: 	goto loc_10a5f;
        case m2c::kloc_10a6b: 	goto loc_10a6b;
        case m2c::kloc_10a91: 	goto loc_10a91;
        case m2c::kloc_10a93: 	goto loc_10a93;
        case m2c::kloc_10a96: 	goto loc_10a96;
        case m2c::kloc_10aa0: 	goto loc_10aa0;
        case m2c::kloc_10aab: 	goto loc_10aab;
        case m2c::kloc_10aae: 	goto loc_10aae;
        case m2c::kloc_10ad0: 	goto loc_10ad0;
        case m2c::kloc_10ae4: 	goto loc_10ae4;
        case m2c::kloc_10af6: 	goto loc_10af6;
        case m2c::kloc_10b17: 	goto loc_10b17;
        case m2c::kloc_10b42: 	goto loc_10b42;
        case m2c::kloc_10b57: 	goto loc_10b57;
        case m2c::kloc_10b81: 	goto loc_10b81;
        case m2c::kloc_10ba1: 	goto loc_10ba1;
        case m2c::kloc_10ba6: 	goto loc_10ba6;
        case m2c::kret_1a2_ad2: 	goto ret_1a2_ad2;
        case m2c::ksub_10247: 	goto sub_10247;
        case m2c::ksub_10b61: 	goto sub_10b61;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_10bb0(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_10bb0:
    _begin:
cs=0x1a2;eip=0x000bb0; 	T(XOR(dl, dl));	// 1581                  xor     dl, dl ;~ 01A2:0BB0
cs=0x1a2;eip=0x000bb2; 	X(byte_1f8df = dl;);	// 1582                  mov     ds:byte_1F8DF, dl ;~ 01A2:0BB2
cs=0x1a2;eip=0x000bb6; 	X(byte_1f8e0 = dl;);	// 1583                  mov     ds:byte_1F8E0, dl ;~ 01A2:0BB6
cs=0x1a2;eip=0x000bba; 	T(AND(al, 0x0F));	// 1584                  and     al, 0Fh ;~ 01A2:0BBA
cs=0x1a2;eip=0x000bbc; 	J(JZ(loc_10bce));	// 1585                  jz      short loc_10BCE ;~ 01A2:0BBC
cs=0x1a2;eip=0x000bbe; 	X(PUSH(si));	// 1586                  push    si ;~ 01A2:0BBE
cs=0x1a2;eip=0x000bbf; 	T(si = word_1f1c2;);	// 1587                  mov     si, word_1F1C2 ;~ 01A2:0BBF
cs=0x1a2;eip=0x000bc3; 	T(TEST(*(raddr(ds,si+0x12)), 1));	// 1588                  test    byte ptr [si+12h], 1 ;~ 01A2:0BC3
cs=0x1a2;eip=0x000bc7; 	X(PUSHF);	// 1589                  pushf ;~ 01A2:0BC7
cs=0x1a2;eip=0x000bc8; 	X(AND(*(raddr(ds,si+0x12)), 0x0FE));	// 1590                  and     byte ptr [si+12h], 0FEh ;~ 01A2:0BC8
cs=0x1a2;eip=0x000bcc; 	X(POPF);	// 1591                  popf ;~ 01A2:0BCC
cs=0x1a2;eip=0x000bcd; 	X(POP(si));	// 1592                  pop     si ;~ 01A2:0BCD
loc_10bce:
	// 4502 
cs=0x1a2;eip=0x000bce; 	T(dl = byte_1f771;);	// 1595                  mov     dl, ds:byte_1F771 ;~ 01A2:0BCE
cs=0x1a2;eip=0x000bd2; 	T(CMP(dl, 4));	// 1596                  cmp     dl, 4 ;~ 01A2:0BD2
cs=0x1a2;eip=0x000bd5; 	J(JZ(loc_10bf9));	// 1597                  jz      short loc_10BF9 ;~ 01A2:0BD5
cs=0x1a2;eip=0x000bd7; 	T(CMP(dl, 5));	// 1598                  cmp     dl, 5 ;~ 01A2:0BD7
cs=0x1a2;eip=0x000bda; 	J(JNZ(loc_10c05));	// 1599                  jnz     short loc_10C05 ;~ 01A2:0BDA
cs=0x1a2;eip=0x000bdc; 	X(byte_1f82f = 0;);	// 1600                  mov     ds:byte_1F82F, 0 ;~ 01A2:0BDC
cs=0x1a2;eip=0x000be1; 	X(byte_1f82f = 0;);	// 1601                  mov     ds:byte_1F82F, 0 ;~ 01A2:0BE1
cs=0x1a2;eip=0x000be6; 	X(byte_1f771 = 2;);	// 1602                  mov     ds:byte_1F771, 2 ;~ 01A2:0BE6
cs=0x1a2;eip=0x000beb; 	T(si = 0x0FB00;);	// 1603                  mov     si, 0FB00h ;~ 01A2:0BEB
cs=0x1a2;eip=0x000bee; 	T(OR(al, al));	// 1604                  or      al, al ;~ 01A2:0BEE
cs=0x1a2;eip=0x000bf0; 	J(JNZ(loc_10bf5));	// 1605                  jnz     short loc_10BF5 ;~ 01A2:0BF0
cs=0x1a2;eip=0x000bf2; 	T(si = 0x0FB23;);	// 1606                  mov     si, 0FB23h ;~ 01A2:0BF2
loc_10bf5:
	// 4503 
cs=0x1a2;eip=0x000bf5; 	T(XOR(ax, ax));	// 1609                  xor     ax, ax ;~ 01A2:0BF5
cs=0x1a2;eip=0x000bf7; 	J(JMP(loc_10c75));	// 1610                  jmp     short loc_10C75 ;~ 01A2:0BF7
loc_10bf9:
	// 4504 
cs=0x1a2;eip=0x000bf9; 	X(byte_1f771 = 3;);	// 1615                  mov     ds:byte_1F771, 3 ;~ 01A2:0BF9
cs=0x1a2;eip=0x000bfe; 	T(si = 0x0FADD;);	// 1616                  mov     si, 0FADDh ;~ 01A2:0BFE
cs=0x1a2;eip=0x000c01; 	T(XOR(ax, ax));	// 1617                  xor     ax, ax ;~ 01A2:0C01
cs=0x1a2;eip=0x000c03; 	J(JMP(loc_10c75));	// 1618                  jmp     short loc_10C75 ;~ 01A2:0C03
loc_10c05:
	// 4505 
cs=0x1a2;eip=0x000c05; 	T(dl = byte_1f779;);	// 1622                  mov     dl, ds:byte_1F779 ;~ 01A2:0C05
cs=0x1a2;eip=0x000c09; 	T(OR(dl, dl));	// 1623                  or      dl, dl ;~ 01A2:0C09
cs=0x1a2;eip=0x000c0b; 	J(JZ(loc_10c2d));	// 1624                  jz      short loc_10C2D ;~ 01A2:0C0B
cs=0x1a2;eip=0x000c0d; 	X(byte_1f773 = dl;);	// 1625                  mov     ds:byte_1F773, dl ;~ 01A2:0C0D
cs=0x1a2;eip=0x000c11; 	X(byte_1f778 = dl;);	// 1626                  mov     ds:byte_1F778, dl ;~ 01A2:0C11
cs=0x1a2;eip=0x000c15; 	T(TEST(byte_1f773, 0x80));	// 1627                  test    ds:byte_1F773, 80h ;~ 01A2:0C15
cs=0x1a2;eip=0x000c1a; 	X(PUSHF);	// 1628                  pushf ;~ 01A2:0C1A
cs=0x1a2;eip=0x000c1b; 	X(AND(byte_1f773, 0x7F));	// 1629                  and     ds:byte_1F773, 7Fh ;~ 01A2:0C1B
cs=0x1a2;eip=0x000c20; 	X(POPF);	// 1630                  popf ;~ 01A2:0C20
cs=0x1a2;eip=0x000c21; 	T(TEST(byte_1f778, 0x80));	// 1631                  test    ds:byte_1F778, 80h ;~ 01A2:0C21
cs=0x1a2;eip=0x000c26; 	X(PUSHF);	// 1632                  pushf ;~ 01A2:0C26
cs=0x1a2;eip=0x000c27; 	X(AND(byte_1f778, 0x7F));	// 1633                  and     ds:byte_1F778, 7Fh ;~ 01A2:0C27
cs=0x1a2;eip=0x000c2c; 	X(POPF);	// 1634                  popf ;~ 01A2:0C2C
loc_10c2d:
	// 4506 
cs=0x1a2;eip=0x000c2d; 	X(byte_1f779 = al;);	// 1637                  mov     ds:byte_1F779, al ;~ 01A2:0C2D
cs=0x1a2;eip=0x000c30; 	T(CMP(byte_1f771, 3));	// 1638                  cmp     ds:byte_1F771, 3 ;~ 01A2:0C30
cs=0x1a2;eip=0x000c35; 	J(JNZ(loc_10c3a));	// 1639                  jnz     short loc_10C3A ;~ 01A2:0C35
cs=0x1a2;eip=0x000c37; 	J(JMP(loc_10cd2));	// 1640                  jmp     loc_10CD2 ;~ 01A2:0C37
loc_10c3a:
	// 4507 
cs=0x1a2;eip=0x000c3a; 	T(OR(dl, dl));	// 1644                  or      dl, dl ;~ 01A2:0C3A
cs=0x1a2;eip=0x000c3c; 	J(JS(loc_10c5c));	// 1645                  js      short loc_10C5C ;~ 01A2:0C3C
cs=0x1a2;eip=0x000c3e; 	T(CMP(dl, al));	// 1646                  cmp     dl, al ;~ 01A2:0C3E
cs=0x1a2;eip=0x000c40; 	J(JNZ(loc_10c50));	// 1647                  jnz     short loc_10C50 ;~ 01A2:0C40
cs=0x1a2;eip=0x000c42; 	T(TEST(byte_1f854, 1));	// 1648                  test    ds:byte_1F854, 1 ;~ 01A2:0C42
cs=0x1a2;eip=0x000c47; 	X(PUSHF);	// 1649                  pushf ;~ 01A2:0C47
cs=0x1a2;eip=0x000c48; 	X(AND(byte_1f854, 0x0FE));	// 1650                  and     ds:byte_1F854, 0FEh ;~ 01A2:0C48
cs=0x1a2;eip=0x000c4d; 	X(POPF);	// 1651                  popf ;~ 01A2:0C4D
cs=0x1a2;eip=0x000c4e; 	J(JZ(loc_10c94));	// 1652                  jz      short loc_10C94 ;~ 01A2:0C4E
loc_10c50:
	// 4508 
cs=0x1a2;eip=0x000c50; 	T(dl = al;);	// 1655                  mov     dl, al ;~ 01A2:0C50
cs=0x1a2;eip=0x000c52; 	T(OR(dl, dl));	// 1656                  or      dl, dl ;~ 01A2:0C52
cs=0x1a2;eip=0x000c54; 	J(JNZ(loc_10c7b));	// 1657                  jnz     short loc_10C7B ;~ 01A2:0C54
cs=0x1a2;eip=0x000c56; 	T(dl = byte_1f773;);	// 1658                  mov     dl, ds:byte_1F773 ;~ 01A2:0C56
cs=0x1a2;eip=0x000c5a; 	J(JMP(loc_10c70));	// 1659                  jmp     short loc_10C70 ;~ 01A2:0C5A
loc_10c5c:
	// 4509 
cs=0x1a2;eip=0x000c5c; 	T(TEST(byte_1f854, 1));	// 1663                  test    ds:byte_1F854, 1 ;~ 01A2:0C5C
cs=0x1a2;eip=0x000c61; 	X(PUSHF);	// 1664                  pushf ;~ 01A2:0C61
cs=0x1a2;eip=0x000c62; 	X(OR(byte_1f854, 1));	// 1665                  or      ds:byte_1F854, 1 ;~ 01A2:0C62
cs=0x1a2;eip=0x000c67; 	X(POPF);	// 1666                  popf ;~ 01A2:0C67
cs=0x1a2;eip=0x000c68; 	T(TEST(dl, 0x80));	// 1667                  test    dl, 80h ;~ 01A2:0C68
cs=0x1a2;eip=0x000c6b; 	X(PUSHF);	// 1668                  pushf ;~ 01A2:0C6B
cs=0x1a2;eip=0x000c6c; 	T(AND(dl, 0x7F));	// 1669                  and     dl, 7Fh ;~ 01A2:0C6C
cs=0x1a2;eip=0x000c6f; 	X(POPF);	// 1670                  popf ;~ 01A2:0C6F
loc_10c70:
	// 4510 
cs=0x1a2;eip=0x000c70; 	T(si = 0x0FAC6;);	// 1673                  mov     si, 0FAC6h ;~ 01A2:0C70
cs=0x1a2;eip=0x000c73; 	J(JMP(loc_10c88));	// 1674                  jmp     short loc_10C88 ;~ 01A2:0C73
loc_10c75:
	// 4511 
cs=0x1a2;eip=0x000c75; 	T(dl = byte_1f773;);	// 1679                  mov     dl, ds:byte_1F773 ;~ 01A2:0C75
cs=0x1a2;eip=0x000c79; 	J(JMP(loc_10c88));	// 1680                  jmp     short loc_10C88 ;~ 01A2:0C79
loc_10c7b:
	// 4512 
cs=0x1a2;eip=0x000c7b; 	T(si = 0x0FA60;);	// 1684                  mov     si, 0FA60h ;~ 01A2:0C7B
cs=0x1a2;eip=0x000c7e; 	T(CMP(word_1f1e4, 0));	// 1685                  cmp     word_1F1E4, 0 ;~ 01A2:0C7E
cs=0x1a2;eip=0x000c83; 	J(JZ(loc_10c88));	// 1686                  jz      short loc_10C88 ;~ 01A2:0C83
cs=0x1a2;eip=0x000c85; 	T(si = 0x0FA93;);	// 1687                  mov     si, 0FA93h ;~ 01A2:0C85
loc_10c88:
	// 4513 
cs=0x1a2;eip=0x000c88; 	T(XOR(dh, dh));	// 1691                  xor     dh, dh ;~ 01A2:0C88
cs=0x1a2;eip=0x000c8a; 	T(ADD(si, dx));	// 1692                  add     si, dx ;~ 01A2:0C8A
cs=0x1a2;eip=0x000c8c; 	T(MOV(dl, *(raddr(ds,si))));	// 1693                  mov     dl, [si] ;~ 01A2:0C8C
cs=0x1a2;eip=0x000c8e; 	T(ADD(si, dx));	// 1694                  add     si, dx ;~ 01A2:0C8E
cs=0x1a2;eip=0x000c90; 	X(word_1f21e = si;);	// 1695                  mov     word_1F21E, si ;~ 01A2:0C90
loc_10c94:
	// 4514 
cs=0x1a2;eip=0x000c94; 	T(XOR(dx, dx));	// 1698                  xor     dx, dx ;~ 01A2:0C94
cs=0x1a2;eip=0x000c96; 	X(byte_1f771 = 0;);	// 1699                  mov     ds:byte_1F771, 0 ;~ 01A2:0C96
cs=0x1a2;eip=0x000c9b; 	T(TEST(al, 1));	// 1700                  test    al, 1 ;~ 01A2:0C9B
cs=0x1a2;eip=0x000c9d; 	J(JZ(loc_10cac));	// 1701                  jz      short loc_10CAC ;~ 01A2:0C9D
cs=0x1a2;eip=0x000c9f; 	T(dl = byte_1f77f;);	// 1702                  mov     dl, ds:byte_1F77F ;~ 01A2:0C9F
cs=0x1a2;eip=0x000ca3; 	T(NEG(dl));	// 1703                  neg     dl ;~ 01A2:0CA3
cs=0x1a2;eip=0x000ca5; 	X(byte_1f771 = 1;);	// 1704                  mov     ds:byte_1F771, 1 ;~ 01A2:0CA5
cs=0x1a2;eip=0x000caa; 	J(JMP(loc_10cb9));	// 1705                  jmp     short loc_10CB9 ;~ 01A2:0CAA
loc_10cac:
	// 4515 
cs=0x1a2;eip=0x000cac; 	T(TEST(al, 2));	// 1709                  test    al, 2 ;~ 01A2:0CAC
cs=0x1a2;eip=0x000cae; 	J(JZ(loc_10cb9));	// 1710                  jz      short loc_10CB9 ;~ 01A2:0CAE
cs=0x1a2;eip=0x000cb0; 	T(dl = byte_1f77f;);	// 1711                  mov     dl, ds:byte_1F77F ;~ 01A2:0CB0
cs=0x1a2;eip=0x000cb4; 	X(byte_1f771 = 1;);	// 1712                  mov     ds:byte_1F771, 1 ;~ 01A2:0CB4
loc_10cb9:
	// 4516 
cs=0x1a2;eip=0x000cb9; 	T(TEST(al, 4));	// 1716                  test    al, 4 ;~ 01A2:0CB9
cs=0x1a2;eip=0x000cbb; 	J(JZ(loc_10cc5));	// 1717                  jz      short loc_10CC5 ;~ 01A2:0CBB
cs=0x1a2;eip=0x000cbd; 	T(dh = byte_1f77e;);	// 1718                  mov     dh, ds:byte_1F77E ;~ 01A2:0CBD
cs=0x1a2;eip=0x000cc1; 	T(NEG(dh));	// 1719                  neg     dh ;~ 01A2:0CC1
cs=0x1a2;eip=0x000cc3; 	J(JMP(loc_10ccd));	// 1720                  jmp     short loc_10CCD ;~ 01A2:0CC3
loc_10cc5:
	// 4517 
cs=0x1a2;eip=0x000cc5; 	T(TEST(al, 8));	// 1724                  test    al, 8 ;~ 01A2:0CC5
cs=0x1a2;eip=0x000cc7; 	J(JZ(loc_10cd2));	// 1725                  jz      short loc_10CD2 ;~ 01A2:0CC7
cs=0x1a2;eip=0x000cc9; 	T(dh = byte_1f77e;);	// 1726                  mov     dh, ds:byte_1F77E ;~ 01A2:0CC9
loc_10ccd:
	// 4518 
cs=0x1a2;eip=0x000ccd; 	X(byte_1f771 = 1;);	// 1729                  mov     ds:byte_1F771, 1 ;~ 01A2:0CCD
loc_10cd2:
	// 4519 
cs=0x1a2;eip=0x000cd2; 	X(byte_1f8df = dh;);	// 1733                  mov     ds:byte_1F8DF, dh ;~ 01A2:0CD2
cs=0x1a2;eip=0x000cd6; 	X(byte_1f8e0 = dl;);	// 1734                  mov     ds:byte_1F8E0, dl ;~ 01A2:0CD6
cs=0x1a2;eip=0x000cda; 	T(CMP(byte_1f830, 0));	// 1735                  cmp     ds:byte_1F830, 0 ;~ 01A2:0CDA
cs=0x1a2;eip=0x000cdf; 	J(JNZ(loc_10d34));	// 1736                  jnz     short loc_10D34 ;~ 01A2:0CDF
cs=0x1a2;eip=0x000ce1; 	T(si = word_1f21e;);	// 1738                  mov     si, word_1F21E ;~ 01A2:0CE1
loc_10ce5:
	// 4520 
cs=0x1a2;eip=0x000ce5; 	T(LODSB);	// 1742                  lodsb ;~ 01A2:0CE5
cs=0x1a2;eip=0x000ce6; 	T(OR(al, al));	// 1743                  or      al, al ;~ 01A2:0CE6
cs=0x1a2;eip=0x000ce8; 	J(JNS(loc_10d2d));	// 1744                  jns     short loc_10D2D ;~ 01A2:0CE8
cs=0x1a2;eip=0x000cea; 	T(CMP(al, 0x0FF));	// 1745                  cmp     al, 0FFh ;~ 01A2:0CEA
cs=0x1a2;eip=0x000cec; 	J(JZ(loc_10d19));	// 1746                  jz      short loc_10D19 ;~ 01A2:0CEC
cs=0x1a2;eip=0x000cee; 	T(CMP(al, 0x0FC));	// 1747                  cmp     al, 0FCh ;~ 01A2:0CEE
cs=0x1a2;eip=0x000cf0; 	J(JNZ(loc_10d01));	// 1748                  jnz     short loc_10D01 ;~ 01A2:0CF0
cs=0x1a2;eip=0x000cf2; 	T(LODSB);	// 1749                  lodsb ;~ 01A2:0CF2
cs=0x1a2;eip=0x000cf3; 	T(CMP(word_1f1e4, 0));	// 1750                  cmp     word_1F1E4, 0 ;~ 01A2:0CF3
cs=0x1a2;eip=0x000cf8; 	J(JNZ(loc_10ce5));	// 1751                  jnz     short loc_10CE5 ;~ 01A2:0CF8
cs=0x1a2;eip=0x000cfa; 	X(PUSH(si));	// 1752                  push    si ;~ 01A2:0CFA
cs=0x1a2;eip=0x000cfb; 	J(CALL(sub_1164e,0));	// 1753                  call    sub_1164E ;~ 01A2:0CFB
cs=0x1a2;eip=0x000cfe; 	X(POP(si));	// 1754                  pop     si ;~ 01A2:0CFE
cs=0x1a2;eip=0x000cff; 	J(JMP(loc_10ce5));	// 1755                  jmp     short loc_10CE5 ;~ 01A2:0CFF
loc_10d01:
	// 4521 
cs=0x1a2;eip=0x000d01; 	T(CMP(byte_1f82f, 0));	// 1759                  cmp     ds:byte_1F82F, 0 ;~ 01A2:0D01
cs=0x1a2;eip=0x000d06; 	J(JZ(loc_10d14));	// 1760                  jz      short loc_10D14 ;~ 01A2:0D06
cs=0x1a2;eip=0x000d08; 	X(byte_1f82f = 0;);	// 1761                  mov     ds:byte_1F82F, 0 ;~ 01A2:0D08
cs=0x1a2;eip=0x000d0d; 	X(byte_1f82f = 0;);	// 1762                  mov     ds:byte_1F82F, 0 ;~ 01A2:0D0D
cs=0x1a2;eip=0x000d12; 	J(JMP(loc_10ce5));	// 1763                  jmp     short loc_10CE5 ;~ 01A2:0D12
loc_10d14:
	// 4522 
cs=0x1a2;eip=0x000d14; 	T(MOV(al, *(raddr(ds,si))));	// 1767                  mov     al, [si] ;~ 01A2:0D14
cs=0x1a2;eip=0x000d16; 	T(DEC(si));	// 1768                  dec     si ;~ 01A2:0D16
cs=0x1a2;eip=0x000d17; 	J(JMP(loc_10d2d));	// 1769                  jmp     short loc_10D2D ;~ 01A2:0D17
loc_10d19:
	// 4523 
cs=0x1a2;eip=0x000d19; 	T(TEST(byte_1f844, 1));	// 1773                  test    ds:byte_1F844, 1 ;~ 01A2:0D19
cs=0x1a2;eip=0x000d1e; 	X(PUSHF);	// 1774                  pushf ;~ 01A2:0D1E
cs=0x1a2;eip=0x000d1f; 	X(AND(byte_1f844, 0x0FE));	// 1775                  and     ds:byte_1F844, 0FEh ;~ 01A2:0D1F
cs=0x1a2;eip=0x000d24; 	X(POPF);	// 1776                  popf ;~ 01A2:0D24
cs=0x1a2;eip=0x000d25; 	T(XOR(ah, ah));	// 1777                  xor     ah, ah ;~ 01A2:0D25
cs=0x1a2;eip=0x000d27; 	T(MOV(al, *(raddr(ds,si))));	// 1778                  mov     al, [si] ;~ 01A2:0D27
cs=0x1a2;eip=0x000d29; 	T(SUB(si, ax));	// 1779                  sub     si, ax ;~ 01A2:0D29
cs=0x1a2;eip=0x000d2b; 	J(JMP(loc_10ce5));	// 1780                  jmp     short loc_10CE5 ;~ 01A2:0D2B
loc_10d2d:
	// 4524 
cs=0x1a2;eip=0x000d2d; 	X(byte_1f82e = al;);	// 1785                  mov     ds:byte_1F82E, al ;~ 01A2:0D2D
cs=0x1a2;eip=0x000d30; 	X(word_1f21e = si;);	// 1786                  mov     word_1F21E, si ;~ 01A2:0D30
loc_10d34:
	// 4525 
cs=0x1a2;eip=0x000d34; 	T(si = word_1f1cc;);	// 1789                  mov     si, word_1F1CC ;~ 01A2:0D34
cs=0x1a2;eip=0x000d38; 	T(MOV(dl, *(raddr(ds,si))));	// 1790                  mov     dl, [si] ;~ 01A2:0D38
cs=0x1a2;eip=0x000d3a; 	T(MOV(dh, *(raddr(ds,si+1))));	// 1791                  mov     dh, [si+1] ;~ 01A2:0D3A
cs=0x1a2;eip=0x000d3d; 	T(MOV(ch, *(raddr(ds,si+2))));	// 1792                  mov     ch, [si+2] ;~ 01A2:0D3D
cs=0x1a2;eip=0x000d40; 	T(CMP(byte_1f7bb, 0));	// 1793                  cmp     ds:byte_1F7BB, 0 ;~ 01A2:0D40
cs=0x1a2;eip=0x000d45; 	J(JZ(loc_10d4f));	// 1794                  jz      short loc_10D4F ;~ 01A2:0D45
cs=0x1a2;eip=0x000d47; 	X(NEG(byte_1f8df));	// 1795                  neg     ds:byte_1F8DF ;~ 01A2:0D47
cs=0x1a2;eip=0x000d4b; 	X(NEG(byte_1f8e0));	// 1796                  neg     ds:byte_1F8E0 ;~ 01A2:0D4B
loc_10d4f:
	// 4526 
cs=0x1a2;eip=0x000d4f; 	T(ADD(dl, byte_1f8df));	// 1799                  add     dl, ds:byte_1F8DF ;~ 01A2:0D4F
cs=0x1a2;eip=0x000d53; 	T(ADD(dh, byte_1f8e0));	// 1800                  add     dh, ds:byte_1F8E0 ;~ 01A2:0D53
cs=0x1a2;eip=0x000d57; 	T(al = byte_1f8df;);	// 1801                  mov     al, ds:byte_1F8DF ;~ 01A2:0D57
cs=0x1a2;eip=0x000d5a; 	T(OR(al, byte_1f8e0));	// 1802                  or      al, ds:byte_1F8E0 ;~ 01A2:0D5A
cs=0x1a2;eip=0x000d5e; 	J(JZ(loc_10d64));	// 1803                  jz      short loc_10D64 ;~ 01A2:0D5E
cs=0x1a2;eip=0x000d60; 	T(al = 1;);	// 1804                  mov     al, 1 ;~ 01A2:0D60
cs=0x1a2;eip=0x000d62; 	J(JMP(loc_10d66));	// 1805                  jmp     short loc_10D66 ;~ 01A2:0D62
loc_10d64:
	// 4527 
cs=0x1a2;eip=0x000d64; 	T(XOR(al, al));	// 1809                  xor     al, al ;~ 01A2:0D64
loc_10d66:
	// 4528 
cs=0x1a2;eip=0x000d66; 	T(OR(al, al));	// 1812                  or      al, al ;~ 01A2:0D66
cs=0x1a2;eip=0x000d68; 	J(RETN(0));	// 1813                  retn ;~ 01A2:0D68

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_10bce: 	goto loc_10bce;
        case m2c::kloc_10bf5: 	goto loc_10bf5;
        case m2c::kloc_10bf9: 	goto loc_10bf9;
        case m2c::kloc_10c05: 	goto loc_10c05;
        case m2c::kloc_10c2d: 	goto loc_10c2d;
        case m2c::kloc_10c3a: 	goto loc_10c3a;
        case m2c::kloc_10c50: 	goto loc_10c50;
        case m2c::kloc_10c5c: 	goto loc_10c5c;
        case m2c::kloc_10c70: 	goto loc_10c70;
        case m2c::kloc_10c75: 	goto loc_10c75;
        case m2c::kloc_10c7b: 	goto loc_10c7b;
        case m2c::kloc_10c88: 	goto loc_10c88;
        case m2c::kloc_10c94: 	goto loc_10c94;
        case m2c::kloc_10cac: 	goto loc_10cac;
        case m2c::kloc_10cb9: 	goto loc_10cb9;
        case m2c::kloc_10cc5: 	goto loc_10cc5;
        case m2c::kloc_10ccd: 	goto loc_10ccd;
        case m2c::kloc_10cd2: 	goto loc_10cd2;
        case m2c::kloc_10ce5: 	goto loc_10ce5;
        case m2c::kloc_10d01: 	goto loc_10d01;
        case m2c::kloc_10d14: 	goto loc_10d14;
        case m2c::kloc_10d19: 	goto loc_10d19;
        case m2c::kloc_10d2d: 	goto loc_10d2d;
        case m2c::kloc_10d34: 	goto loc_10d34;
        case m2c::kloc_10d4f: 	goto loc_10d4f;
        case m2c::kloc_10d64: 	goto loc_10d64;
        case m2c::kloc_10d66: 	goto loc_10d66;
        case m2c::ksub_10bb0: 	goto sub_10bb0;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_10d69(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_10d69:
    _begin:
cs=0x1a2;eip=0x000d69; 	T(di = 0;);	// 1822                  mov     di, 0 ;~ 01A2:0D69
cs=0x1a2;eip=0x000d6c; 	T(cx = 0x0BA0;);	// 1823                  mov     cx, 0BA0h ;~ 01A2:0D6C
cs=0x1a2;eip=0x000d6f; 	T(SUB(cx, di));	// 1824                  sub     cx, di ;~ 01A2:0D6F
cs=0x1a2;eip=0x000d71; 	T(SHR(cx, 1));	// 1825                  shr     cx, 1 ;~ 01A2:0D71
cs=0x1a2;eip=0x000d73; 	T(ax = seg_offset(seg002););	// 1826                  mov     ax, seg seg002 ;~ 01A2:0D73
cs=0x1a2;eip=0x000d76; 	T(es = ax;);	// 1827                  mov     es, ax ;~ 01A2:0D76
cs=0x1a2;eip=0x000d78; 	T(XOR(ax, ax));	// 1828                  xor     ax, ax ;~ 01A2:0D78
	// 1829                  rep stosw ;~ 01A2:0D7A
cs=0x1a2;eip=0x000d7a; 	X(	REP STOSW);	// 1829                  rep stosw ;~ 01A2:0D7A
cs=0x1a2;eip=0x000d7c; 	T(ax = seg_offset(seg002););	// 1830                  mov     ax, seg seg002 ;~ 01A2:0D7C
cs=0x1a2;eip=0x000d7f; 	T(ds = ax;);	// 1831                  mov     ds, ax ;~ 01A2:0D7F
cs=0x1a2;eip=0x000d81; 	T(es = ax;);	// 1832                  mov     es, ax ;~ 01A2:0D81
cs=0x1a2;eip=0x000d83; 	X(seg_1f8f4 = ax;);	// 1833                  mov     ds:seg_1F8F4, ax ;~ 01A2:0D83
cs=0x1a2;eip=0x000d86; 	X(seg_1f8f6 = ss;);	// 1834                  mov     ds:seg_1F8F6, ss ;~ 01A2:0D86
cs=0x1a2;eip=0x000d8a; 	X(word_1f1a2 = 0x4DB0;);	// 1835                  mov     word_1F1A2, 4DB0h ;~ 01A2:0D8A
cs=0x1a2;eip=0x000d90; 	X(word_1f1a4 = 0x5740;);	// 1836                  mov     word_1F1A4, 5740h ;~ 01A2:0D90
cs=0x1a2;eip=0x000d96; 	X(word_1f1aa = 0x5EE0;);	// 1837                  mov     word_1F1AA, 5EE0h ;~ 01A2:0D96
cs=0x1a2;eip=0x000d9c; 	X(word_1f19c = 0x10B6;);	// 1838                  mov     word_1F19C, 10B6h ;~ 01A2:0D9C
cs=0x1a2;eip=0x000da2; 	X(word_1f19e = 0x123A;);	// 1839                  mov     word_1F19E, 123Ah ;~ 01A2:0DA2
cs=0x1a2;eip=0x000da8; 	X(word_1f208 = 0x13BE;);	// 1840                  mov     word_1F208, 13BEh ;~ 01A2:0DA8
cs=0x1a2;eip=0x000dae; 	X(word_1f20a = 0x153E;);	// 1841                  mov     word_1F20A, 153Eh ;~ 01A2:0DAE
cs=0x1a2;eip=0x000db4; 	X(word_1f1a0 = 0x16BE;);	// 1842                  mov     word_1F1A0, 16BEh ;~ 01A2:0DB4
cs=0x1a2;eip=0x000dba; 	X(word_1f1ac = 0x1CBE;);	// 1843                  mov     word_1F1AC, 1CBEh ;~ 01A2:0DBA
cs=0x1a2;eip=0x000dc0; 	X(word_1f25e = 0x1D80;);	// 1844                  mov     word_1F25E, 1D80h ;~ 01A2:0DC0
cs=0x1a2;eip=0x000dc6; 	X(word_1f19a = 0x1E40;);	// 1845                  mov     word_1F19A, 1E40h ;~ 01A2:0DC6
cs=0x1a2;eip=0x000dcc; 	X(word_1f1ca = 0x3132;);	// 1846                  mov     word_1F1CA, 3132h ;~ 01A2:0DCC
cs=0x1a2;eip=0x000dd2; 	X(word_1f1b4 = 0x3772;);	// 1847                  mov     word_1F1B4, 3772h ;~ 01A2:0DD2
cs=0x1a2;eip=0x000dd8; 	X(word_1f1b6 = 0x3A92;);	// 1848                  mov     word_1F1B6, 3A92h ;~ 01A2:0DD8
cs=0x1a2;eip=0x000dde; 	X(word_1f1b8 = 0x3DB2;);	// 1849                  mov     word_1F1B8, 3DB2h ;~ 01A2:0DDE
cs=0x1a2;eip=0x000de4; 	X(word_1f1ae = 0x0D2B6;);	// 1850                  mov     word_1F1AE, 0D2B6h ;~ 01A2:0DE4
cs=0x1a2;eip=0x000dea; 	X(word_1f1b0 = 0x0D356;);	// 1851                  mov     word_1F1B0, 0D356h ;~ 01A2:0DEA
cs=0x1a2;eip=0x000df0; 	X(word_1f25a = 0x0F49A;);	// 1852                  mov     word_1F25A, 0F49Ah ;~ 01A2:0DF0
cs=0x1a2;eip=0x000df6; 	X(word_1f1d4 = 0x0F4AE;);	// 1853                  mov     word_1F1D4, 0F4AEh ;~ 01A2:0DF6
cs=0x1a2;eip=0x000dfc; 	X(word_1f378 = 0x0F526;);	// 1854                  mov     ds:word_1F378, 0F526h ;~ 01A2:0DFC
cs=0x1a2;eip=0x000e02; 	X(word_1f1a8 = 0x0F726;);	// 1855                  mov     word_1F1A8, 0F726h ;~ 01A2:0E02
cs=0x1a2;eip=0x000e08; 	X(word_1f1f0 = 0x0F7A6;);	// 1856                  mov     word_1F1F0, 0F7A6h ;~ 01A2:0E08
cs=0x1a2;eip=0x000e0e; 	X(seg_1f8b6 = seg_offset(seg010););	// 1857                  mov     ds:seg_1F8B6, seg seg010 ;~ 01A2:0E0E
cs=0x1a2;eip=0x000e14; 	X(word_1f88e = 0x6042;);	// 1858                  mov     ds:word_1F88E, 6042h ;~ 01A2:0E14
cs=0x1a2;eip=0x000e1a; 	X(seg_1f8a2 = ss;);	// 1859                  mov     ds:seg_1F8A2, ss ;~ 01A2:0E1A
cs=0x1a2;eip=0x000e1e; 	X(word_1f890 = 0x7410;);	// 1860                  mov     ds:word_1F890, 7410h ;~ 01A2:0E1E
cs=0x1a2;eip=0x000e24; 	X(seg_1f8a4 = ss;);	// 1861                  mov     ds:seg_1F8A4, ss ;~ 01A2:0E24
cs=0x1a2;eip=0x000e28; 	X(word_1f892 = 0;);	// 1862                  mov     ds:word_1F892, 0 ;~ 01A2:0E28
cs=0x1a2;eip=0x000e2e; 	X(seg_1f8a6 = seg_offset(seg016););	// 1863                  mov     ds:seg_1F8A6, seg seg016 ;~ 01A2:0E2E
cs=0x1a2;eip=0x000e34; 	X(word_1f894 = 0x3DDA;);	// 1864                  mov     ds:word_1F894, 3DDAh ;~ 01A2:0E34
cs=0x1a2;eip=0x000e3a; 	X(seg_1f8a8 = ds;);	// 1865                  mov     ds:seg_1F8A8, ds ;~ 01A2:0E3A
cs=0x1a2;eip=0x000e3e; 	X(word_1f896 = 0x5194;);	// 1866                  mov     ds:word_1F896, 5194h ;~ 01A2:0E3E
cs=0x1a2;eip=0x000e44; 	X(seg_1f8aa = ds;);	// 1867                  mov     ds:seg_1F8AA, ds ;~ 01A2:0E44
cs=0x1a2;eip=0x000e48; 	X(word_1f898 = 0x5E14;);	// 1868                  mov     ds:word_1F898, 5E14h ;~ 01A2:0E48
cs=0x1a2;eip=0x000e4e; 	X(seg_1f8ac = ds;);	// 1869                  mov     ds:seg_1F8AC, ds ;~ 01A2:0E4E
cs=0x1a2;eip=0x000e52; 	X(word_1f89a = 0x65E4;);	// 1870                  mov     ds:word_1F89A, 65E4h ;~ 01A2:0E52
cs=0x1a2;eip=0x000e58; 	X(seg_1f8ae = ds;);	// 1871                  mov     ds:seg_1F8AE, ds ;~ 01A2:0E58
cs=0x1a2;eip=0x000e5c; 	X(word_1f89c = 0x0CF5C;);	// 1872                  mov     ds:word_1F89C, 0CF5Ch ;~ 01A2:0E5C
cs=0x1a2;eip=0x000e62; 	X(seg_1f8b0 = ds;);	// 1873                  mov     ds:seg_1F8B0, ds ;~ 01A2:0E62
cs=0x1a2;eip=0x000e66; 	X(word_1f89e = 0x0CF5E;);	// 1874                  mov     ds:word_1F89E, 0CF5Eh ;~ 01A2:0E66
cs=0x1a2;eip=0x000e6c; 	X(seg_1f8b2 = ds;);	// 1875                  mov     ds:seg_1F8B2, ds ;~ 01A2:0E6C
cs=0x1a2;eip=0x000e70; 	X(word_1f8a0 = 0x0D05E;);	// 1876                  mov     ds:word_1F8A0, 0D05Eh ;~ 01A2:0E70
cs=0x1a2;eip=0x000e76; 	X(seg_1f8b4 = ds;);	// 1877                  mov     ds:seg_1F8B4, ds ;~ 01A2:0E76
cs=0x1a2;eip=0x000e7a; 	X(word_1f1d0 = 0x9738;);	// 1878                  mov     word_1F1D0, 9738h ;~ 01A2:0E7A
cs=0x1a2;eip=0x000e80; 	X(word_1f1d2 = 0x9B20;);	// 1879                  mov     word_1F1D2, 9B20h ;~ 01A2:0E80
cs=0x1a2;eip=0x000e86; 	X(word_1f372 = 0x0C582;);	// 1880                  mov     ds:word_1F372, 0C582h ;~ 01A2:0E86
cs=0x1a2;eip=0x000e8c; 	X(word_1f178 = 0x0A;);	// 1881                  mov     word_1F178, 0Ah ;~ 01A2:0E8C
cs=0x1a2;eip=0x000e92; 	X(seg_1f176 = seg_offset(seg014););	// 1882                  mov     seg_1F176, seg seg014 ;~ 01A2:0E92
cs=0x1a2;eip=0x000e98; 	X(word_1f17c = 0x0A;);	// 1883                  mov     word_1F17C, 0Ah ;~ 01A2:0E98
cs=0x1a2;eip=0x000e9e; 	X(seg_1f17a = seg_offset(seg011););	// 1884                  mov     seg_1F17A, seg seg011 ;~ 01A2:0E9E
cs=0x1a2;eip=0x000ea4; 	J(RETN(0));	// 1885                  retn ;~ 01A2:0EA4

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_10d69: 	goto sub_10d69;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_10ea5(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_10ea5:
    _begin:
cs=0x1a2;eip=0x000ea5; 	X(PUSH(word_1f3b6));	// 1894                  push    ds:word_1F3B6 ;~ 01A2:0EA5
cs=0x1a2;eip=0x000ea9; 	T(di = 0x20C;);	// 1895                  mov     di, 20Ch ;~ 01A2:0EA9
cs=0x1a2;eip=0x000eac; 	T(cx = 0x6F8;);	// 1896                  mov     cx, 6F8h ;~ 01A2:0EAC
cs=0x1a2;eip=0x000eaf; 	T(SUB(cx, di));	// 1897                  sub     cx, di ;~ 01A2:0EAF
cs=0x1a2;eip=0x000eb1; 	T(XOR(al, al));	// 1898                  xor     al, al ;~ 01A2:0EB1
cs=0x1a2;eip=0x000eb3; 	T(es = seg_1f8f4;);	// 1899                  mov     es, ds:seg_1F8F4 ;~ 01A2:0EB3
	// 1900                  rep stosb ;~ 01A2:0EB7
cs=0x1a2;eip=0x000eb7; 	X(	REP STOSB);	// 1900                  rep stosb ;~ 01A2:0EB7
cs=0x1a2;eip=0x000eb9; 	X(POP(word_1f3b6));	// 1901                  pop     ds:word_1F3B6 ;~ 01A2:0EB9
cs=0x1a2;eip=0x000ebd; 	T(di = 0x0FDCC;);	// 1902                  mov     di, 0FDCCh ;~ 01A2:0EBD
cs=0x1a2;eip=0x000ec0; 	T(cx = 6;);	// 1903                  mov     cx, 6 ;~ 01A2:0EC0
	// 1904                  rep stosb ;~ 01A2:0EC3
cs=0x1a2;eip=0x000ec3; 	X(	REP STOSB);	// 1904                  rep stosb ;~ 01A2:0EC3
cs=0x1a2;eip=0x000ec5; 	X(word_1f714 = 0x0FFFF;);	// 1905                  mov     ds:word_1F714, 0FFFFh ;~ 01A2:0EC5
cs=0x1a2;eip=0x000ecb; 	T(ax = 1;);	// 1906                  mov     ax, 1 ;~ 01A2:0ECB
cs=0x1a2;eip=0x000ece; 	X(byte_1f77e = al;);	// 1907                  mov     ds:byte_1F77E, al ;~ 01A2:0ECE
cs=0x1a2;eip=0x000ed1; 	X(byte_1f77f = al;);	// 1908                  mov     ds:byte_1F77F, al ;~ 01A2:0ED1
cs=0x1a2;eip=0x000ed4; 	X(byte_1f76f = al;);	// 1909                  mov     ds:byte_1F76F, al ;~ 01A2:0ED4
cs=0x1a2;eip=0x000ed7; 	X(byte_1f84c = 8;);	// 1910                  mov     ds:byte_1F84C, 8 ;~ 01A2:0ED7
cs=0x1a2;eip=0x000edc; 	X(word_1f21e = 0x0FAD1;);	// 1911                  mov     word_1F21E, 0FAD1h ;~ 01A2:0EDC
cs=0x1a2;eip=0x000ee2; 	X(word_1f246 = 0x0FDC2;);	// 1912                  mov     word_1F246, 0FDC2h ;~ 01A2:0EE2
cs=0x1a2;eip=0x000ee8; 	X(word_1f248 = 0x0FB5D;);	// 1913                  mov     word_1F248, 0FB5Dh ;~ 01A2:0EE8
cs=0x1a2;eip=0x000eee; 	X(word_1f1fa = 0x0FB5D;);	// 1914                  mov     word_1F1FA, 0FB5Dh ;~ 01A2:0EEE
cs=0x1a2;eip=0x000ef4; 	X(word_1f380 = 2;);	// 1915                  mov     ds:word_1F380, 2 ;~ 01A2:0EF4
cs=0x1a2;eip=0x000efa; 	X(word_1f70c = 0x32;);	// 1916                  mov     ds:word_1F70C, 32h ; '2' ;~ 01A2:0EFA
cs=0x1a2;eip=0x000f00; 	X(word_1f710 = 0x20;);	// 1917                  mov     ds:word_1F710, 20h ; ' ' ;~ 01A2:0F00
cs=0x1a2;eip=0x000f06; 	T(TEST(byte_1f84b, 1));	// 1918                  test    ds:byte_1F84B, 1 ;~ 01A2:0F06
cs=0x1a2;eip=0x000f0b; 	X(PUSHF);	// 1919                  pushf ;~ 01A2:0F0B
cs=0x1a2;eip=0x000f0c; 	X(OR(byte_1f84b, 1));	// 1920                  or      ds:byte_1F84B, 1 ;~ 01A2:0F0C
cs=0x1a2;eip=0x000f11; 	X(POPF);	// 1921                  popf ;~ 01A2:0F11
cs=0x1a2;eip=0x000f12; 	X(byte_1f722 = 0;);	// 1922                  mov     ds:byte_1F722, 0 ;~ 01A2:0F12
cs=0x1a2;eip=0x000f17; 	X(*(db*)(((db*)&seg_1f727)+1) = 0x32;);	// 1923                  mov     byte ptr ds:seg_1F727+1, 32h ; '2' ;~ 01A2:0F17
cs=0x1a2;eip=0x000f1c; 	J(CALL(sub_15cb8,0));	// 1924                  call    sub_15CB8 ;~ 01A2:0F1C
cs=0x1a2;eip=0x000f1f; 	X(byte_1f774 = 0x0FF;);	// 1925                  mov     ds:byte_1F774, 0FFh ;~ 01A2:0F1F
cs=0x1a2;eip=0x000f24; 	X(byte_1f773 = 0;);	// 1926                  mov     ds:byte_1F773, 0 ;~ 01A2:0F24
cs=0x1a2;eip=0x000f29; 	J(RETN(0));	// 1927                  retn ;~ 01A2:0F29

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_10ea5: 	goto sub_10ea5;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_10f2a(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_10f2a:
    _begin:
cs=0x1a2;eip=0x000f2a; 	X(word_1f3b6 = 0;);	// 1936                  mov     ds:word_1F3B6, 0 ;~ 01A2:0F2A
cs=0x1a2;eip=0x000f30; 	J(CALL(sub_13514,0));	// 1937                  call    sub_13514 ;~ 01A2:0F30
cs=0x1a2;eip=0x000f33; 	T(ax = word_1f1ca;);	// 1938                  mov     ax, word_1F1CA ;~ 01A2:0F33
cs=0x1a2;eip=0x000f36; 	X(word_1f1f4 = ax;);	// 1939                  mov     word_1F1F4, ax ;~ 01A2:0F36
cs=0x1a2;eip=0x000f39; 	T(ax = 0x27E;);	// 1940                  mov     ax, 27Eh ;~ 01A2:0F39
cs=0x1a2;eip=0x000f3c; 	X(word_1f1f6 = ax;);	// 1941                  mov     word_1F1F6, ax ;~ 01A2:0F3C
cs=0x1a2;eip=0x000f3f; 	X(word_1f396 = 0;);	// 1942                  mov     ds:word_1F396, 0 ;~ 01A2:0F3F
cs=0x1a2;eip=0x000f45; 	X(byte_1f872 = 0;);	// 1943                  mov     ds:byte_1F872, 0 ;~ 01A2:0F45
cs=0x1a2;eip=0x000f4a; 	X(byte_1f879 = 0;);	// 1944                  mov     ds:byte_1F879, 0 ;~ 01A2:0F4A
cs=0x1a2;eip=0x000f4f; 	J(CALL(sub_1887b,0));	// 1945                  call    sub_1887B ;~ 01A2:0F4F
cs=0x1a2;eip=0x000f52; 	X(PUSH(si));	// 1947                  push    si ;~ 01A2:0F52
cs=0x1a2;eip=0x000f53; 	T(si = 0x0F812;);	// 1948                  mov     si, 0F812h ;~ 01A2:0F53
cs=0x1a2;eip=0x000f56; 	J(CALL(sub_1d4c6,0));	// 1949                  call    sub_1D4C6 ;~ 01A2:0F56
cs=0x1a2;eip=0x000f59; 	X(POP(si));	// 1951                  pop     si ;~ 01A2:0F59
cs=0x1a2;eip=0x000f5a; 	X(byte_1f87a = 0;);	// 1952                  mov     ds:byte_1F87A, 0 ;~ 01A2:0F5A
cs=0x1a2;eip=0x000f5f; 	J(CALL(sub_1d448,0));	// 1953                  call    sub_1D448 ;~ 01A2:0F5F
cs=0x1a2;eip=0x000f62; 	X(byte_1f886 = 0;);	// 1954                  mov     ds:byte_1F886, 0 ;~ 01A2:0F62
cs=0x1a2;eip=0x000f67; 	J(RETN(0));	// 1955                  retn ;~ 01A2:0F67

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_10f2a: 	goto sub_10f2a;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_10f68(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_10f68:
    _begin:
cs=0x1a2;eip=0x000f68; 	T(CMP(word_1f466, 0));	// 1963                  cmp     ds:word_1F466, 0 ;~ 01A2:0F68
cs=0x1a2;eip=0x000f6d; 	J(JNZ(locret_10fcb));	// 1964                  jnz     short locret_10FCB ;~ 01A2:0F6D
cs=0x1a2;eip=0x000f6f; 	T(CMP(word_1f4b6, 0));	// 1965                  cmp     ds:word_1F4B6, 0 ;~ 01A2:0F6F
cs=0x1a2;eip=0x000f74; 	J(JNZ(locret_10fcb));	// 1966                  jnz     short locret_10FCB ;~ 01A2:0F74
cs=0x1a2;eip=0x000f76; 	T(ax = *(dw*)(&unk_1f170););	// 1967                  mov     ax, word ptr unk_1F170 ;~ 01A2:0F76
cs=0x1a2;eip=0x000f79; 	T(CMP(ax, word_1f18a));	// 1968                  cmp     ax, word_1F18A ;~ 01A2:0F79
cs=0x1a2;eip=0x000f7d; 	J(JNZ(locret_10fcb));	// 1969                  jnz     short locret_10FCB ;~ 01A2:0F7D
cs=0x1a2;eip=0x000f7f; 	T(CMP(byte_1f740, 0));	// 1970                  cmp     ds:byte_1F740, 0 ;~ 01A2:0F7F
cs=0x1a2;eip=0x000f84; 	J(JNZ(locret_10fcb));	// 1971                  jnz     short locret_10FCB ;~ 01A2:0F84
cs=0x1a2;eip=0x000f86; 	T(TEST(byte_1f873, 8));	// 1972                  test    ds:byte_1F873, 8 ;~ 01A2:0F86
cs=0x1a2;eip=0x000f8b; 	X(PUSHF);	// 1973                  pushf ;~ 01A2:0F8B
cs=0x1a2;eip=0x000f8c; 	X(AND(byte_1f873, 0x0F7));	// 1974                  and     ds:byte_1F873, 0F7h ;~ 01A2:0F8C
cs=0x1a2;eip=0x000f91; 	X(POPF);	// 1975                  popf ;~ 01A2:0F91
cs=0x1a2;eip=0x000f92; 	J(JZ(loc_10fa6));	// 1976                  jz      short loc_10FA6 ;~ 01A2:0F92
cs=0x1a2;eip=0x000f94; 	T(TEST(byte_1f85d, 1));	// 1978                  test    ds:byte_1F85D, 1 ;~ 01A2:0F94
cs=0x1a2;eip=0x000f99; 	J(JNZ(loc_10fa6));	// 1979                  jnz     short loc_10FA6 ;~ 01A2:0F99
cs=0x1a2;eip=0x000f9b; 	J(CALL(seg000_bf92_proc,m2c::kloc_1bf92));	// 1980                  call    loc_1BF92 ;~ 01A2:0F9B
cs=0x1a2;eip=0x000f9e; 	X(byte_1f740 = 0;);	// 1982                  mov     ds:byte_1F740, 0 ;~ 01A2:0F9E
cs=0x1a2;eip=0x000fa3; 	J(CALL(sub_19d33,0));	// 1983                  call    sub_19D33 ;~ 01A2:0FA3
loc_10fa6:
	// 4529 
cs=0x1a2;eip=0x000fa6; 	T(TEST(byte_1f873, 0x10));	// 1987                  test    ds:byte_1F873, 10h ;~ 01A2:0FA6
cs=0x1a2;eip=0x000fab; 	X(PUSHF);	// 1988                  pushf ;~ 01A2:0FAB
cs=0x1a2;eip=0x000fac; 	X(AND(byte_1f873, 0x0EF));	// 1989                  and     ds:byte_1F873, 0EFh ;~ 01A2:0FAC
cs=0x1a2;eip=0x000fb1; 	X(POPF);	// 1990                  popf ;~ 01A2:0FB1
cs=0x1a2;eip=0x000fb2; 	J(JZ(locret_10fcb));	// 1991                  jz      short locret_10FCB ;~ 01A2:0FB2
cs=0x1a2;eip=0x000fb4; 	T(TEST(byte_1f85d, 1));	// 1993                  test    ds:byte_1F85D, 1 ;~ 01A2:0FB4
cs=0x1a2;eip=0x000fb9; 	J(JNZ(locret_10fcb));	// 1994                  jnz     short locret_10FCB ;~ 01A2:0FB9
cs=0x1a2;eip=0x000fbb; 	J(CALL(seg000_bf92_proc,m2c::kloc_1bfe9));	// 1995                  call    loc_1BFE9 ;~ 01A2:0FBB
cs=0x1a2;eip=0x000fbe; 	J(JS(loc_10fc3));	// 1997                  js      short loc_10FC3 ;~ 01A2:0FBE
cs=0x1a2;eip=0x000fc0; 	J(return start(m2c::kloc_101e4, _state););	// 1998                  jmp     loc_101E4 ;~ 01A2:0FC0
loc_10fc3:
	// 4530 
cs=0x1a2;eip=0x000fc3; 	X(byte_1f740 = 0;);	// 2002                  mov     ds:byte_1F740, 0 ;~ 01A2:0FC3
cs=0x1a2;eip=0x000fc8; 	J(CALL(sub_19d33,0));	// 2003                  call    sub_19D33 ;~ 01A2:0FC8
locret_10fcb:
	// 4531 
cs=0x1a2;eip=0x000fcb; 	J(RETN(0));	// 2007                  retn ;~ 01A2:0FCB

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_10fa6: 	goto loc_10fa6;
        case m2c::kloc_10fc3: 	goto loc_10fc3;
        case m2c::klocret_10fcb: 	goto locret_10fcb;
        case m2c::ksub_10f68: 	goto sub_10f68;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_10fcc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_10fcc:
    _begin:
cs=0x1a2;eip=0x000fcc; 	T(CLI);	// 2016                  cli ;~ 01A2:0FCC
cs=0x1a2;eip=0x000fcd; 	T(dx = 0x201;);	// 2017                  mov     dx, 201h ;~ 01A2:0FCD
cs=0x1a2;eip=0x000fd0; 	T(XOR(bx, bx));	// 2018                  xor     bx, bx ;~ 01A2:0FD0
cs=0x1a2;eip=0x000fd2; 	S(IN(al, dx));	// 2019                  in      al, dx          ; Game I/O port ;~ 01A2:0FD2
cs=0x1a2;eip=0x000fd3; 	T(TEST(al, 0x0F));	// 2022                  test    al, 0Fh ;~ 01A2:0FD3
cs=0x1a2;eip=0x000fd5; 	J(JNZ(loc_10fda));	// 2023                  jnz     short loc_10FDA ;~ 01A2:0FD5
cs=0x1a2;eip=0x000fd7; 	T(bx = 1;);	// 2024                  mov     bx, 1 ;~ 01A2:0FD7
loc_10fda:
	// 4532 
cs=0x1a2;eip=0x000fda; 	T(bp = 0x100;);	// 2027                  mov     bp, 100h ;~ 01A2:0FDA
cs=0x1a2;eip=0x000fdd; 	S(OUT(dx, al));	// 2028                  out     dx, al          ; Game I/O port ;~ 01A2:0FDD
cs=0x1a2;eip=0x000fde; 	T(XOR(bx, bx));	// 2031                  xor     bx, bx ;~ 01A2:0FDE
cs=0x1a2;eip=0x000fe0; 	T(cx = bx;);	// 2032                  mov     cx, bx ;~ 01A2:0FE0
loc_10fe2:
	// 4533 
cs=0x1a2;eip=0x000fe2; 	S(IN(al, dx));	// 2035                  in      al, dx          ; Game I/O port ;~ 01A2:0FE2
cs=0x1a2;eip=0x000fe3; 	T(TEST(al, 1));	// 2038                  test    al, 1 ;~ 01A2:0FE3
cs=0x1a2;eip=0x000fe5; 	J(JZ(loc_10fe9));	// 2039                  jz      short loc_10FE9 ;~ 01A2:0FE5
cs=0x1a2;eip=0x000fe7; 	T(INC(bh));	// 2040                  inc     bh ;~ 01A2:0FE7
loc_10fe9:
	// 4534 
cs=0x1a2;eip=0x000fe9; 	S(IN(al, dx));	// 2043                  in      al, dx          ; Game I/O port ;~ 01A2:0FE9
cs=0x1a2;eip=0x000fea; 	T(TEST(al, 2));	// 2046                  test    al, 2 ;~ 01A2:0FEA
cs=0x1a2;eip=0x000fec; 	J(JZ(loc_10ff0));	// 2047                  jz      short loc_10FF0 ;~ 01A2:0FEC
cs=0x1a2;eip=0x000fee; 	T(INC(bl));	// 2048                  inc     bl ;~ 01A2:0FEE
loc_10ff0:
	// 4535 
cs=0x1a2;eip=0x000ff0; 	S(IN(al, dx));	// 2051                  in      al, dx          ; Game I/O port ;~ 01A2:0FF0
cs=0x1a2;eip=0x000ff1; 	T(TEST(al, 4));	// 2054                  test    al, 4 ;~ 01A2:0FF1
cs=0x1a2;eip=0x000ff3; 	J(JZ(loc_10ff7));	// 2055                  jz      short loc_10FF7 ;~ 01A2:0FF3
cs=0x1a2;eip=0x000ff5; 	T(INC(ch));	// 2056                  inc     ch ;~ 01A2:0FF5
loc_10ff7:
	// 4536 
cs=0x1a2;eip=0x000ff7; 	S(IN(al, dx));	// 2059                  in      al, dx          ; Game I/O port ;~ 01A2:0FF7
cs=0x1a2;eip=0x000ff8; 	T(TEST(al, 8));	// 2062                  test    al, 8 ;~ 01A2:0FF8
cs=0x1a2;eip=0x000ffa; 	J(JZ(loc_10ffe));	// 2063                  jz      short loc_10FFE ;~ 01A2:0FFA
cs=0x1a2;eip=0x000ffc; 	T(INC(cl));	// 2064                  inc     cl ;~ 01A2:0FFC
loc_10ffe:
	// 4537 
cs=0x1a2;eip=0x000ffe; 	T(DEC(bp));	// 2067                  dec     bp ;~ 01A2:0FFE
cs=0x1a2;eip=0x000fff; 	J(JNZ(loc_10fe2));	// 2068                  jnz     short loc_10FE2 ;~ 01A2:0FFF
cs=0x1a2;eip=0x001001; 	T(STI);	// 2069                  sti ;~ 01A2:1001
cs=0x1a2;eip=0x001002; 	T(SHR(bh, 1));	// 2070                  shr     bh, 1 ;~ 01A2:1002
cs=0x1a2;eip=0x001004; 	T(SHR(bl, 1));	// 2071                  shr     bl, 1 ;~ 01A2:1004
cs=0x1a2;eip=0x001006; 	T(SHR(ch, 1));	// 2072                  shr     ch, 1 ;~ 01A2:1006
cs=0x1a2;eip=0x001008; 	T(SHR(cl, 1));	// 2073                  shr     cl, 1 ;~ 01A2:1008
cs=0x1a2;eip=0x00100a; 	X(word_1f8e8 = bx;);	// 2074                  mov     ds:word_1F8E8, bx ;~ 01A2:100A
cs=0x1a2;eip=0x00100e; 	X(word_1f8ec = cx;);	// 2075                  mov     ds:word_1F8EC, cx ;~ 01A2:100E
cs=0x1a2;eip=0x001012; 	T(al = bh;);	// 2076                  mov     al, bh ;~ 01A2:1012
cs=0x1a2;eip=0x001014; 	T(SHL(bh, 1));	// 2077                  shl     bh, 1 ;~ 01A2:1014
cs=0x1a2;eip=0x001016; 	T(ADD(bh, al));	// 2078                  add     bh, al ;~ 01A2:1016
cs=0x1a2;eip=0x001018; 	T(al = bl;);	// 2079                  mov     al, bl ;~ 01A2:1018
cs=0x1a2;eip=0x00101a; 	T(SHL(bl, 1));	// 2080                  shl     bl, 1 ;~ 01A2:101A
cs=0x1a2;eip=0x00101c; 	T(ADD(bl, al));	// 2081                  add     bl, al ;~ 01A2:101C
cs=0x1a2;eip=0x00101e; 	T(al = cl;);	// 2082                  mov     al, cl ;~ 01A2:101E
cs=0x1a2;eip=0x001020; 	T(SHL(cl, 1));	// 2083                  shl     cl, 1 ;~ 01A2:1020
cs=0x1a2;eip=0x001022; 	T(ADD(cl, al));	// 2084                  add     cl, al ;~ 01A2:1022
cs=0x1a2;eip=0x001024; 	T(al = ch;);	// 2085                  mov     al, ch ;~ 01A2:1024
cs=0x1a2;eip=0x001026; 	T(SHL(ch, 1));	// 2086                  shl     ch, 1 ;~ 01A2:1026
cs=0x1a2;eip=0x001028; 	T(ADD(ch, al));	// 2087                  add     ch, al ;~ 01A2:1028
cs=0x1a2;eip=0x00102a; 	X(word_1f8e6 = bx;);	// 2088                  mov     ds:word_1F8E6, bx ;~ 01A2:102A
cs=0x1a2;eip=0x00102e; 	X(word_1f8ea = cx;);	// 2089                  mov     ds:word_1F8EA, cx ;~ 01A2:102E
cs=0x1a2;eip=0x001032; 	T(ax = *(dw*)(((db*)&word_1f8e6)+1););	// 2090                  mov     ax, ds:word_1F8E6+1 ;~ 01A2:1032
cs=0x1a2;eip=0x001035; 	T(XCHG(ah, al));	// 2091                  xchg    ah, al ;~ 01A2:1035
cs=0x1a2;eip=0x001037; 	X(*(dw*)(((db*)&word_1f8e6)+1) = ax;);	// 2092                  mov     ds:word_1F8E6+1, ax ;~ 01A2:1037
cs=0x1a2;eip=0x00103a; 	T(ax = *(dw*)(((db*)&word_1f8ea)+1););	// 2093                  mov     ax, ds:word_1F8EA+1 ;~ 01A2:103A
cs=0x1a2;eip=0x00103d; 	T(XCHG(ah, al));	// 2094                  xchg    ah, al ;~ 01A2:103D
cs=0x1a2;eip=0x00103f; 	X(*(dw*)(((db*)&word_1f8ea)+1) = ax;);	// 2095                  mov     ds:word_1F8EA+1, ax ;~ 01A2:103F
cs=0x1a2;eip=0x001042; 	J(RETN(0));	// 2096                  retn ;~ 01A2:1042

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_10fda: 	goto loc_10fda;
        case m2c::kloc_10fe2: 	goto loc_10fe2;
        case m2c::kloc_10fe9: 	goto loc_10fe9;
        case m2c::kloc_10ff0: 	goto loc_10ff0;
        case m2c::kloc_10ff7: 	goto loc_10ff7;
        case m2c::kloc_10ffe: 	goto loc_10ffe;
        case m2c::ksub_10fcc: 	goto sub_10fcc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_11043(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_11043:
    _begin:
cs=0x1a2;eip=0x001043; 	X(PUSH(bx));	// 2105                  push    bx ;~ 01A2:1043
cs=0x1a2;eip=0x001044; 	X(PUSH(ax));	// 2106                  push    ax ;~ 01A2:1044
cs=0x1a2;eip=0x001045; 	X(PUSH(dx));	// 2107                  push    dx ;~ 01A2:1045
cs=0x1a2;eip=0x001046; 	X(PUSH(cx));	// 2108                  push    cx ;~ 01A2:1046
cs=0x1a2;eip=0x001047; 	X(PUSH(si));	// 2109                  push    si ;~ 01A2:1047
cs=0x1a2;eip=0x001048; 	X(PUSH(di));	// 2110                  push    di ;~ 01A2:1048
cs=0x1a2;eip=0x001049; 	X(PUSH(bp));	// 2111                  push    bp ;~ 01A2:1049
cs=0x1a2;eip=0x00104a; 	J(CALL(sub_1126d,0));	// 2112                  call    sub_1126D ;~ 01A2:104A
cs=0x1a2;eip=0x00104d; 	T(CLI);	// 2113                  cli ;~ 01A2:104D
cs=0x1a2;eip=0x00104e; 	T(dx = 0x201;);	// 2114                  mov     dx, 201h ;~ 01A2:104E
cs=0x1a2;eip=0x001051; 	T(bp = 0x100;);	// 2115                  mov     bp, 100h ;~ 01A2:1051
cs=0x1a2;eip=0x001054; 	S(OUT(dx, al));	// 2116                  out     dx, al          ; Game I/O port ;~ 01A2:1054
cs=0x1a2;eip=0x001055; 	T(XOR(bx, bx));	// 2119                  xor     bx, bx ;~ 01A2:1055
cs=0x1a2;eip=0x001057; 	T(cx = bx;);	// 2120                  mov     cx, bx ;~ 01A2:1057
loc_11059:
	// 4538 
cs=0x1a2;eip=0x001059; 	S(IN(al, dx));	// 2123                  in      al, dx          ; Game I/O port ;~ 01A2:1059
cs=0x1a2;eip=0x00105a; 	T(TEST(al, 1));	// 2126                  test    al, 1 ;~ 01A2:105A
cs=0x1a2;eip=0x00105c; 	J(JZ(loc_11060));	// 2127                  jz      short loc_11060 ;~ 01A2:105C
cs=0x1a2;eip=0x00105e; 	T(INC(bh));	// 2128                  inc     bh ;~ 01A2:105E
loc_11060:
	// 4539 
cs=0x1a2;eip=0x001060; 	S(IN(al, dx));	// 2131                  in      al, dx          ; Game I/O port ;~ 01A2:1060
cs=0x1a2;eip=0x001061; 	T(TEST(al, 2));	// 2134                  test    al, 2 ;~ 01A2:1061
cs=0x1a2;eip=0x001063; 	J(JZ(loc_11067));	// 2135                  jz      short loc_11067 ;~ 01A2:1063
cs=0x1a2;eip=0x001065; 	T(INC(bl));	// 2136                  inc     bl ;~ 01A2:1065
loc_11067:
	// 4540 
cs=0x1a2;eip=0x001067; 	S(IN(al, dx));	// 2139                  in      al, dx          ; Game I/O port ;~ 01A2:1067
cs=0x1a2;eip=0x001068; 	T(TEST(al, 4));	// 2142                  test    al, 4 ;~ 01A2:1068
cs=0x1a2;eip=0x00106a; 	J(JZ(loc_1106e));	// 2143                  jz      short loc_1106E ;~ 01A2:106A
cs=0x1a2;eip=0x00106c; 	T(INC(ch));	// 2144                  inc     ch ;~ 01A2:106C
loc_1106e:
	// 4541 
cs=0x1a2;eip=0x00106e; 	S(IN(al, dx));	// 2147                  in      al, dx          ; Game I/O port ;~ 01A2:106E
cs=0x1a2;eip=0x00106f; 	T(TEST(al, 8));	// 2150                  test    al, 8 ;~ 01A2:106F
cs=0x1a2;eip=0x001071; 	J(JZ(loc_11075));	// 2151                  jz      short loc_11075 ;~ 01A2:1071
cs=0x1a2;eip=0x001073; 	T(INC(cl));	// 2152                  inc     cl ;~ 01A2:1073
loc_11075:
	// 4542 
cs=0x1a2;eip=0x001075; 	T(DEC(bp));	// 2155                  dec     bp ;~ 01A2:1075
cs=0x1a2;eip=0x001076; 	J(JNZ(loc_11059));	// 2156                  jnz     short loc_11059 ;~ 01A2:1076
cs=0x1a2;eip=0x001078; 	T(STI);	// 2157                  sti ;~ 01A2:1078
cs=0x1a2;eip=0x001079; 	T(XOR(dx, dx));	// 2158                  xor     dx, dx ;~ 01A2:1079
cs=0x1a2;eip=0x00107b; 	T(TEST(al, 0x10));	// 2159                  test    al, 10h ;~ 01A2:107B
cs=0x1a2;eip=0x00107d; 	J(JNZ(loc_11081));	// 2160                  jnz     short loc_11081 ;~ 01A2:107D
cs=0x1a2;eip=0x00107f; 	T(dl = 8;);	// 2161                  mov     dl, 8 ;~ 01A2:107F
loc_11081:
	// 4543 
cs=0x1a2;eip=0x001081; 	T(TEST(al, 0x40));	// 2164                  test    al, 40h ;~ 01A2:1081
cs=0x1a2;eip=0x001083; 	J(JNZ(loc_11087));	// 2165                  jnz     short loc_11087 ;~ 01A2:1083
cs=0x1a2;eip=0x001085; 	T(dh = 8;);	// 2166                  mov     dh, 8 ;~ 01A2:1085
loc_11087:
	// 4544 
cs=0x1a2;eip=0x001087; 	T(TEST(al, 0x20));	// 2169                  test    al, 20h ;~ 01A2:1087
cs=0x1a2;eip=0x001089; 	J(JNZ(loc_1108c));	// 2170                  jnz     short loc_1108C ;~ 01A2:1089
cs=0x1a2;eip=0x00108b; 	T(NOP);	// 2171                  nop ;~ 01A2:108B
loc_1108c:
	// 4545 
cs=0x1a2;eip=0x00108c; 	T(ax = word_1f8e6;);	// 2174                  mov     ax, ds:word_1F8E6 ;~ 01A2:108C
cs=0x1a2;eip=0x00108f; 	T(CMP(al, bh));	// 2175                  cmp     al, bh ;~ 01A2:108F
cs=0x1a2;eip=0x001091; 	T(RCL(dl, 1));	// 2176                  rcl     dl, 1 ;~ 01A2:1091
cs=0x1a2;eip=0x001093; 	T(CMP(bh, ah));	// 2177                  cmp     bh, ah ;~ 01A2:1093
cs=0x1a2;eip=0x001095; 	T(RCL(dl, 1));	// 2178                  rcl     dl, 1 ;~ 01A2:1095
cs=0x1a2;eip=0x001097; 	T(ax = word_1f8e8;);	// 2179                  mov     ax, ds:word_1F8E8 ;~ 01A2:1097
cs=0x1a2;eip=0x00109a; 	T(CMP(al, bl));	// 2180                  cmp     al, bl ;~ 01A2:109A
cs=0x1a2;eip=0x00109c; 	T(RCL(dl, 1));	// 2181                  rcl     dl, 1 ;~ 01A2:109C
cs=0x1a2;eip=0x00109e; 	T(CMP(bl, ah));	// 2182                  cmp     bl, ah ;~ 01A2:109E
cs=0x1a2;eip=0x0010a0; 	T(RCL(dl, 1));	// 2183                  rcl     dl, 1 ;~ 01A2:10A0
cs=0x1a2;eip=0x0010a2; 	T(XCHG(dl, dh));	// 2184                  xchg    dl, dh ;~ 01A2:10A2
cs=0x1a2;eip=0x0010a4; 	T(ax = word_1f8ea;);	// 2185                  mov     ax, ds:word_1F8EA ;~ 01A2:10A4
cs=0x1a2;eip=0x0010a7; 	T(CMP(al, ch));	// 2186                  cmp     al, ch ;~ 01A2:10A7
cs=0x1a2;eip=0x0010a9; 	T(RCL(dl, 1));	// 2187                  rcl     dl, 1 ;~ 01A2:10A9
cs=0x1a2;eip=0x0010ab; 	T(CMP(ch, ah));	// 2188                  cmp     ch, ah ;~ 01A2:10AB
cs=0x1a2;eip=0x0010ad; 	T(RCL(dl, 1));	// 2189                  rcl     dl, 1 ;~ 01A2:10AD
cs=0x1a2;eip=0x0010af; 	T(ax = word_1f8ec;);	// 2190                  mov     ax, ds:word_1F8EC ;~ 01A2:10AF
cs=0x1a2;eip=0x0010b2; 	T(CMP(al, cl));	// 2191                  cmp     al, cl ;~ 01A2:10B2
cs=0x1a2;eip=0x0010b4; 	T(RCL(dl, 1));	// 2192                  rcl     dl, 1 ;~ 01A2:10B4
cs=0x1a2;eip=0x0010b6; 	T(CMP(cl, ah));	// 2193                  cmp     cl, ah ;~ 01A2:10B6
cs=0x1a2;eip=0x0010b8; 	T(RCL(dl, 1));	// 2194                  rcl     dl, 1 ;~ 01A2:10B8
cs=0x1a2;eip=0x0010ba; 	T(al = dh;);	// 2195                  mov     al, dh ;~ 01A2:10BA
cs=0x1a2;eip=0x0010bc; 	T(TEST(byte_1f8e5, 1));	// 2196                  test    ds:byte_1F8E5, 1 ;~ 01A2:10BC
cs=0x1a2;eip=0x0010c1; 	J(JNZ(loc_110c6));	// 2197                  jnz     short loc_110C6 ;~ 01A2:10C1
cs=0x1a2;eip=0x0010c3; 	T(al = byte_1f8e3;);	// 2198                  mov     al, ds:byte_1F8E3 ;~ 01A2:10C3
loc_110c6:
	// 4546 
cs=0x1a2;eip=0x0010c6; 	X(byte_1f885 = al;);	// 2201                  mov     ds:byte_1F885, al ;~ 01A2:10C6
cs=0x1a2;eip=0x0010c9; 	T(XCHG(dl, al));	// 2202                  xchg    dl, al ;~ 01A2:10C9
cs=0x1a2;eip=0x0010cb; 	T(TEST(byte_1f8e5, 2));	// 2203                  test    ds:byte_1F8E5, 2 ;~ 01A2:10CB
cs=0x1a2;eip=0x0010d0; 	J(JNZ(loc_110d5));	// 2204                  jnz     short loc_110D5 ;~ 01A2:10D0
cs=0x1a2;eip=0x0010d2; 	T(al = byte_1f8e4;);	// 2205                  mov     al, ds:byte_1F8E4 ;~ 01A2:10D2
loc_110d5:
	// 4547 
cs=0x1a2;eip=0x0010d5; 	X(byte_1f884 = al;);	// 2208                  mov     ds:byte_1F884, al ;~ 01A2:10D5
cs=0x1a2;eip=0x0010d8; 	J(CALL(sub_1c658,0));	// 2209                  call    sub_1C658 ;~ 01A2:10D8
cs=0x1a2;eip=0x0010db; 	X(POP(bp));	// 2210                  pop     bp ;~ 01A2:10DB
cs=0x1a2;eip=0x0010dc; 	X(POP(di));	// 2211                  pop     di ;~ 01A2:10DC
cs=0x1a2;eip=0x0010dd; 	X(POP(si));	// 2212                  pop     si ;~ 01A2:10DD
cs=0x1a2;eip=0x0010de; 	X(POP(cx));	// 2213                  pop     cx ;~ 01A2:10DE
cs=0x1a2;eip=0x0010df; 	X(POP(dx));	// 2214                  pop     dx ;~ 01A2:10DF
cs=0x1a2;eip=0x0010e0; 	X(POP(ax));	// 2215                  pop     ax ;~ 01A2:10E0
cs=0x1a2;eip=0x0010e1; 	X(POP(bx));	// 2216                  pop     bx ;~ 01A2:10E1
cs=0x1a2;eip=0x0010e2; 	J(RETN(0));	// 2217                  retn ;~ 01A2:10E2

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_11059: 	goto loc_11059;
        case m2c::kloc_11060: 	goto loc_11060;
        case m2c::kloc_11067: 	goto loc_11067;
        case m2c::kloc_1106e: 	goto loc_1106e;
        case m2c::kloc_11075: 	goto loc_11075;
        case m2c::kloc_11081: 	goto loc_11081;
        case m2c::kloc_11087: 	goto loc_11087;
        case m2c::kloc_1108c: 	goto loc_1108c;
        case m2c::kloc_110c6: 	goto loc_110c6;
        case m2c::kloc_110d5: 	goto loc_110d5;
        case m2c::ksub_11043: 	goto sub_11043;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_110e3(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_110e3:
    _begin:
cs=0x1a2;eip=0x0010e3; 	X(PUSH(ax));	// 2225                  push    ax ;~ 01A2:10E3
cs=0x1a2;eip=0x0010e4; 	X(PUSH(bx));	// 2226                  push    bx ;~ 01A2:10E4
cs=0x1a2;eip=0x0010e5; 	X(PUSH(cx));	// 2227                  push    cx ;~ 01A2:10E5
cs=0x1a2;eip=0x0010e6; 	X(PUSH(dx));	// 2228                  push    dx ;~ 01A2:10E6
cs=0x1a2;eip=0x0010e7; 	X(PUSH(bp));	// 2229                  push    bp ;~ 01A2:10E7
cs=0x1a2;eip=0x0010e8; 	X(PUSH(si));	// 2230                  push    si ;~ 01A2:10E8
cs=0x1a2;eip=0x0010e9; 	X(PUSH(di));	// 2231                  push    di ;~ 01A2:10E9
cs=0x1a2;eip=0x0010ea; 	X(PUSH(es));	// 2232                  push    es ;~ 01A2:10EA
cs=0x1a2;eip=0x0010eb; 	X(PUSH(ds));	// 2233                  push    ds ;~ 01A2:10EB
cs=0x1a2;eip=0x0010ec; 	T(ax = 9;);	// 2234                  mov     ax, 9 ;~ 01A2:10EC
loc_110ef:
	// 4548 
cs=0x1a2;eip=0x0010ef; 	X(PUSH(ax));	// 2237                  push    ax ;~ 01A2:10EF
cs=0x1a2;eip=0x0010f0; 	T(CMP(al, 2));	// 2238                  cmp     al, 2 ;~ 01A2:10F0
cs=0x1a2;eip=0x0010f2; 	J(JZ(loc_11128));	// 2239                  jz      short loc_11128 ;~ 01A2:10F2
cs=0x1a2;eip=0x0010f4; 	J(CALL(sub_14060,0));	// 2240                  call    sub_14060 ;~ 01A2:10F4
cs=0x1a2;eip=0x0010f7; 	T(ADD(di, 8));	// 2241                  add     di, 8 ;~ 01A2:10F7
cs=0x1a2;eip=0x0010fa; 	X(POP(ax));	// 2242                  pop     ax ;~ 01A2:10FA
cs=0x1a2;eip=0x0010fb; 	X(PUSH(ax));	// 2243                  push    ax ;~ 01A2:10FB
cs=0x1a2;eip=0x0010fc; 	T(XOR(ah, ah));	// 2244                  xor     ah, ah ;~ 01A2:10FC
cs=0x1a2;eip=0x0010fe; 	T(ADD(ax, ax));	// 2245                  add     ax, ax ;~ 01A2:10FE
cs=0x1a2;eip=0x001100; 	T(bp = 0x4020;);	// 2246                  mov     bp, 4020h ;~ 01A2:1100
cs=0x1a2;eip=0x001103; 	T(ADD(bp, ax));	// 2247                  add     bp, ax ;~ 01A2:1103
cs=0x1a2;eip=0x001105; 	T(MOV(ax, *(dw*)(raddr(ds,di+2))));	// 2248                  mov     ax, [di+2] ;~ 01A2:1105
cs=0x1a2;eip=0x001108; 	T(MOV(dx, *(dw*)(raddr(ss,bp+0))));	// 2249                  mov     dx, [bp+0] ;~ 01A2:1108
cs=0x1a2;eip=0x00110b; 	T(SUB(dx, ax));	// 2250                  sub     dx, ax ;~ 01A2:110B
cs=0x1a2;eip=0x00110d; 	J(JNS(loc_11128));	// 2251                  jns     short loc_11128 ;~ 01A2:110D
cs=0x1a2;eip=0x00110f; 	T(NEG(dx));	// 2252                  neg     dx ;~ 01A2:110F
cs=0x1a2;eip=0x001111; 	T(si = 0x0F8AA;);	// 2253                  mov     si, 0F8AAh ;~ 01A2:1111
cs=0x1a2;eip=0x001114; 	J(CALL(sub_19ba0,m2c::kloc_19bb7));	// 2254                  call    loc_19BB7 ;~ 01A2:1114
cs=0x1a2;eip=0x001117; 	X(MOV(*(raddr(ds,si)), 0x20));	// 2255                  mov     byte ptr [si], 20h ; ' ' ;~ 01A2:1117
cs=0x1a2;eip=0x00111a; 	X(POP(ax));	// 2256                  pop     ax ;~ 01A2:111A
cs=0x1a2;eip=0x00111b; 	X(PUSH(ax));	// 2257                  push    ax ;~ 01A2:111B
cs=0x1a2;eip=0x00111c; 	T(ADD(al, 0x31));	// 2258                  add     al, 31h ; '1' ;~ 01A2:111C
cs=0x1a2;eip=0x00111e; 	T(di = 0x0F89A;);	// 2259                  mov     di, 0F89Ah ;~ 01A2:111E
cs=0x1a2;eip=0x001121; 	X(MOV(*(raddr(ds,di)), al));	// 2260                  mov     [di], al ;~ 01A2:1121
cs=0x1a2;eip=0x001123; 	T(al = 0x0E;);	// 2261                  mov     al, 0Eh ;~ 01A2:1123
cs=0x1a2;eip=0x001125; 	J(CALL(sub_15dcb,0));	// 2262                  call    sub_15DCB ;~ 01A2:1125
loc_11128:
	// 4549 
cs=0x1a2;eip=0x001128; 	X(POP(ax));	// 2266                  pop     ax ;~ 01A2:1128
cs=0x1a2;eip=0x001129; 	T(DEC(ax));	// 2267                  dec     ax ;~ 01A2:1129
cs=0x1a2;eip=0x00112a; 	J(JNS(loc_110ef));	// 2268                  jns     short loc_110EF ;~ 01A2:112A
cs=0x1a2;eip=0x00112c; 	X(POP(ds));	// 2269                  pop     ds ;~ 01A2:112C
cs=0x1a2;eip=0x00112d; 	X(POP(es));	// 2270                  pop     es ;~ 01A2:112D
cs=0x1a2;eip=0x00112e; 	X(POP(di));	// 2272                  pop     di ;~ 01A2:112E
cs=0x1a2;eip=0x00112f; 	X(POP(si));	// 2273                  pop     si ;~ 01A2:112F
cs=0x1a2;eip=0x001130; 	X(POP(bp));	// 2274                  pop     bp ;~ 01A2:1130
cs=0x1a2;eip=0x001131; 	X(POP(dx));	// 2275                  pop     dx ;~ 01A2:1131
cs=0x1a2;eip=0x001132; 	X(POP(cx));	// 2276                  pop     cx ;~ 01A2:1132
cs=0x1a2;eip=0x001133; 	X(POP(bx));	// 2277                  pop     bx ;~ 01A2:1133
cs=0x1a2;eip=0x001134; 	X(POP(ax));	// 2278                  pop     ax ;~ 01A2:1134
cs=0x1a2;eip=0x001135; 	J(RETN(0));	// 2279                  retn ;~ 01A2:1135

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_110ef: 	goto loc_110ef;
        case m2c::kloc_11128: 	goto loc_11128;
        case m2c::ksub_110e3: 	goto sub_110e3;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_11136(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_11136:
    _begin:
cs=0x1a2;eip=0x001136; 	J(CALL(sub_1149c,0));	// 2288                  call    sub_1149C ;~ 01A2:1136
cs=0x1a2;eip=0x001139; 	T(CMP(*(dw*)(((db*)&dword_1f90c)+2), 0));	// 2289                  cmp     word ptr ds:dword_1F90C+2, 0 ;~ 01A2:1139
cs=0x1a2;eip=0x00113e; 	J(JNZ(locret_1117a));	// 2290                  jnz     short locret_1117A ;~ 01A2:113E
cs=0x1a2;eip=0x001140; 	X(PUSH(ds));	// 2291                  push    ds ;~ 01A2:1140
cs=0x1a2;eip=0x001141; 	T(ax = 0x3509;);	// 2292                  mov     ax, 3509h ;~ 01A2:1141
cs=0x1a2;eip=0x001144; 	S(_INT(0x21));	// 2293                  int     21h             ; DOS - 2+ - GET INTERRUPT VECTOR ;~ 01A2:1144
cs=0x1a2;eip=0x001146; 	X(POP(ds));	// 2297                  pop     ds ;~ 01A2:1146
cs=0x1a2;eip=0x001147; 	X(*(dw*)(((db*)&dword_1f90c)+2) = es;);	// 2298                  mov     word ptr ds:dword_1F90C+2, es ;~ 01A2:1147
cs=0x1a2;eip=0x00114b; 	X(*(dw*)(&dword_1f90c) = bx;);	// 2299                  mov     word ptr ds:dword_1F90C, bx ;~ 01A2:114B
cs=0x1a2;eip=0x00114f; 	X(PUSH(ds));	// 2300                  push    ds ;~ 01A2:114F
cs=0x1a2;eip=0x001150; 	T(ax = cs;);	// 2301                  mov     ax, cs ;~ 01A2:1150
cs=0x1a2;eip=0x001152; 	T(ds = ax;);	// 2302                  mov     ds, ax ;~ 01A2:1152
cs=0x1a2;eip=0x001154; 	T(dx = 0x11E9;);	// 2304                  mov     dx, 11E9h ;~ 01A2:1154
cs=0x1a2;eip=0x001157; 	T(ax = 0x2509;);	// 2305                  mov     ax, 2509h ;~ 01A2:1157
cs=0x1a2;eip=0x00115a; 	S(_INT(0x21));	// 2306                  int     21h             ; DOS - SET INTERRUPT VECTOR ;~ 01A2:115A
cs=0x1a2;eip=0x00115c; 	X(POP(ds));	// 2309                  pop     ds ;~ 01A2:115C
cs=0x1a2;eip=0x00115d; 	X(PUSH(ds));	// 2311                  push    ds ;~ 01A2:115D
cs=0x1a2;eip=0x00115e; 	T(ax = 0x3524;);	// 2312                  mov     ax, 3524h ;~ 01A2:115E
cs=0x1a2;eip=0x001161; 	S(_INT(0x21));	// 2313                  int     21h             ; DOS - 2+ - GET INTERRUPT VECTOR ;~ 01A2:1161
cs=0x1a2;eip=0x001163; 	X(POP(ds));	// 2317                  pop     ds ;~ 01A2:1163
cs=0x1a2;eip=0x001164; 	X(PUSH(ds));	// 2318                  push    ds ;~ 01A2:1164
cs=0x1a2;eip=0x001165; 	X(word_1f910 = es;);	// 2319                  mov     ds:word_1F910, es ;~ 01A2:1165
cs=0x1a2;eip=0x001169; 	X(word_1f912 = bx;);	// 2320                  mov     ds:word_1F912, bx ;~ 01A2:1169
cs=0x1a2;eip=0x00116d; 	T(ax = cs;);	// 2321                  mov     ax, cs ;~ 01A2:116D
cs=0x1a2;eip=0x00116f; 	T(ds = ax;);	// 2322                  mov     ds, ax ;~ 01A2:116F
cs=0x1a2;eip=0x001171; 	T(dx = 0x117D;);	// 2324                  mov     dx, 117Dh ;~ 01A2:1171
cs=0x1a2;eip=0x001174; 	T(ax = 0x2524;);	// 2325                  mov     ax, 2524h ;~ 01A2:1174
cs=0x1a2;eip=0x001177; 	S(_INT(0x21));	// 2326                  int     21h             ; DOS - SET INTERRUPT VECTOR ;~ 01A2:1177
cs=0x1a2;eip=0x001179; 	X(POP(ds));	// 2329                  pop     ds ;~ 01A2:1179
locret_1117a:
	// 4550 
cs=0x1a2;eip=0x00117a; 	J(RETN(0));	// 2333                  retn ;~ 01A2:117A

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::klocret_1117a: 	goto locret_1117a;
        case m2c::ksub_11136: 	goto sub_11136;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group2(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group2:
    _begin:
seg000_117d_proc:
	// 2340 
cs=0x1a2;eip=0x00117d; 	X(word_1117b = 0x0FFFF;);	// 2340                  mov     cs:word_1117B, 0FFFFh ;~ 01A2:117D
cs=0x1a2;eip=0x001184; 	T(al = 0;);	// 2341                  mov     al, 0 ;~ 01A2:1184
cs=0x1a2;eip=0x001186; 	J(IRET);	// 2342                  iret ;~ 01A2:1186
loc_11187:
	// 4551 
cs=0x1a2;eip=0x001187; 	J(CALL(sub_111b8,0));	// 2349                  call    sub_111B8 ;~ 01A2:1187
cs=0x1a2;eip=0x00118a; 	T(ah = 0x4C;);	// 2350                  mov     ah, 4Ch ; 'L' ;~ 01A2:118A
cs=0x1a2;eip=0x00118c; 	T(al = 0;);	// 2351                  mov     al, 0 ;~ 01A2:118C
cs=0x1a2;eip=0x00118e; 	S(_INT(0x21));	// 2352                  int     21h             ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT) ;~ 01A2:118E
loc_11190:
	// 4552 
cs=0x1a2;eip=0x001190; 	J(CALL(sub_111b8,0));	// 2359                  call    sub_111B8 ;~ 01A2:1190
cs=0x1a2;eip=0x001193; 	T(dx = 0x1D8;);	// 2360                  mov     dx, 1D8h ;~ 01A2:1193
cs=0x1a2;eip=0x001196; 	T(ax = ss;);	// 2361                  mov     ax, ss ;~ 01A2:1196
cs=0x1a2;eip=0x001198; 	T(ds = ax;);	// 2362                  mov     ds, ax ;~ 01A2:1198
cs=0x1a2;eip=0x00119a; 	T(ah = 9;);	// 2364                  mov     ah, 9 ;~ 01A2:119A
cs=0x1a2;eip=0x00119c; 	S(_INT(0x21));	// 2365                  int     21h             ; DOS - PRINT STRING ;~ 01A2:119C
cs=0x1a2;eip=0x00119e; 	T(ah = 0x4C;);	// 2367                  mov     ah, 4Ch ; 'L' ;~ 01A2:119E
cs=0x1a2;eip=0x0011a0; 	T(al = 0;);	// 2368                  mov     al, 0 ;~ 01A2:11A0
cs=0x1a2;eip=0x0011a2; 	S(_INT(0x21));	// 2369                  int     21h             ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT) ;~ 01A2:11A2
loc_111a4:
	// 4553 
cs=0x1a2;eip=0x0011a4; 	J(CALL(sub_111b8,0));	// 2375                  call    sub_111B8 ;~ 01A2:11A4
cs=0x1a2;eip=0x0011a7; 	T(dx = 0x1A8;);	// 2376                  mov     dx, 1A8h ;~ 01A2:11A7
cs=0x1a2;eip=0x0011aa; 	T(ax = ss;);	// 2377                  mov     ax, ss ;~ 01A2:11AA
cs=0x1a2;eip=0x0011ac; 	T(ds = ax;);	// 2378                  mov     ds, ax ;~ 01A2:11AC
cs=0x1a2;eip=0x0011ae; 	T(ah = 9;);	// 2379                  mov     ah, 9 ;~ 01A2:11AE
cs=0x1a2;eip=0x0011b0; 	S(_INT(0x21));	// 2380                  int     21h             ; DOS - PRINT STRING ;~ 01A2:11B0
cs=0x1a2;eip=0x0011b2; 	T(ah = 0x4C;);	// 2382                  mov     ah, 4Ch ; 'L' ;~ 01A2:11B2
cs=0x1a2;eip=0x0011b4; 	T(al = 0;);	// 2383                  mov     al, 0 ;~ 01A2:11B4
cs=0x1a2;eip=0x0011b6; 	S(_INT(0x21));	// 2384                  int     21h             ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT) ;~ 01A2:11B6
sub_111b8:
	// 2390 
cs=0x1a2;eip=0x0011b8; 	J(CALL(sub_114c8,0));	// 2392                  call    sub_114C8 ;~ 01A2:11B8
cs=0x1a2;eip=0x0011bb; 	T(dx = word_6c81c;);	// 2393                  mov     dx, word_6C81C ;~ 01A2:11BB
cs=0x1a2;eip=0x0011bf; 	T(AND(dx, dx));	// 2394                  and     dx, dx ;~ 01A2:11BF
cs=0x1a2;eip=0x0011c1; 	J(JZ(loc_111ce));	// 2395                  jz      short loc_111CE ;~ 01A2:11C1
cs=0x1a2;eip=0x0011c3; 	X(PUSH(ds));	// 2396                  push    ds ;~ 01A2:11C3
cs=0x1a2;eip=0x0011c4; 	T(ds = word_6c81e;);	// 2397                  mov     ds, word_6C81E ;~ 01A2:11C4
cs=0x1a2;eip=0x0011c8; 	T(ax = 0x2509;);	// 2399                  mov     ax, 2509h ;~ 01A2:11C8
cs=0x1a2;eip=0x0011cb; 	S(_INT(0x21));	// 2400                  int     21h             ; DOS - SET INTERRUPT VECTOR ;~ 01A2:11CB
cs=0x1a2;eip=0x0011cd; 	X(POP(ds));	// 2403                  pop     ds ;~ 01A2:11CD
loc_111ce:
	// 4554 
cs=0x1a2;eip=0x0011ce; 	T(MOV(dx, *(dw*)(raddr(ds,0x7A2))));	// 2407                  mov     dx, ds:7A2h ;~ 01A2:11CE
cs=0x1a2;eip=0x0011d2; 	T(AND(dx, dx));	// 2408                  and     dx, dx ;~ 01A2:11D2
cs=0x1a2;eip=0x0011d4; 	J(JZ(loc_111e1));	// 2409                  jz      short loc_111E1 ;~ 01A2:11D4
cs=0x1a2;eip=0x0011d6; 	X(PUSH(ds));	// 2410                  push    ds ;~ 01A2:11D6
cs=0x1a2;eip=0x0011d7; 	T(MOV(ds, *(dw*)(raddr(ds,0x7A0))));	// 2411                  mov     ds, word ptr ds:7A0h ;~ 01A2:11D7
cs=0x1a2;eip=0x0011db; 	T(ax = 0x2524;);	// 2412                  mov     ax, 2524h ;~ 01A2:11DB
cs=0x1a2;eip=0x0011de; 	S(_INT(0x21));	// 2413                  int     21h             ; DOS - SET INTERRUPT VECTOR ;~ 01A2:11DE
cs=0x1a2;eip=0x0011e0; 	X(POP(ds));	// 2416                  pop     ds ;~ 01A2:11E0
loc_111e1:
	// 4555 
cs=0x1a2;eip=0x0011e1; 	T(MOV(al, *(raddr(ds,0x771))));	// 2419                  mov     al, ds:771h ;~ 01A2:11E1
cs=0x1a2;eip=0x0011e4; 	T(ah = 0;);	// 2420                  mov     ah, 0 ;~ 01A2:11E4
cs=0x1a2;eip=0x0011e6; 	S(_INT(0x10));	// 2421                  int     10h             ; - VIDEO - SET VIDEO MODE ;~ 01A2:11E6
cs=0x1a2;eip=0x0011e8; 	J(RETN(0));	// 2423                  retn ;~ 01A2:11E8

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_11187: 	goto loc_11187;
        case m2c::kloc_11190: 	goto loc_11190;
        case m2c::kloc_111a4: 	goto loc_111a4;
        case m2c::kloc_111ce: 	goto loc_111ce;
        case m2c::kloc_111e1: 	goto loc_111e1;
        case m2c::kseg000_117d_proc: 	goto seg000_117d_proc;
        case m2c::ksub_111b8: 	goto sub_111b8;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_11e9_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_11e9_proc:
    _begin:
cs=0x1a2;eip=0x0011e9; 	T(CLI);	// 2427                  cli ;~ 01A2:11E9
cs=0x1a2;eip=0x0011ea; 	X(PUSH(ax));	// 2428                  push    ax ;~ 01A2:11EA
cs=0x1a2;eip=0x0011eb; 	X(PUSH(bx));	// 2429                  push    bx ;~ 01A2:11EB
cs=0x1a2;eip=0x0011ec; 	X(PUSH(cx));	// 2430                  push    cx ;~ 01A2:11EC
cs=0x1a2;eip=0x0011ed; 	X(PUSH(ds));	// 2431                  push    ds ;~ 01A2:11ED
cs=0x1a2;eip=0x0011ee; 	X(PUSH(dx));	// 2432                  push    dx ;~ 01A2:11EE
cs=0x1a2;eip=0x0011ef; 	T(ax = seg_offset(seg002););	// 2433                  mov     ax, seg seg002 ;~ 01A2:11EF
cs=0x1a2;eip=0x0011f2; 	T(ds = ax;);	// 2434                  mov     ds, ax ;~ 01A2:11F2
cs=0x1a2;eip=0x0011f4; 	S(IN(al, 0x60));	// 2436                  in      al, 60h         ; 8042 keyboard controller data register ;~ 01A2:11F4
cs=0x1a2;eip=0x0011f6; 	T(CMP(al, 0x1D));	// 2437                  cmp     al, 1Dh ;~ 01A2:11F6
cs=0x1a2;eip=0x0011f8; 	J(JNZ(loc_111fd));	// 2438                  jnz     short loc_111FD ;~ 01A2:11F8
cs=0x1a2;eip=0x0011fa; 	X(byte_1f91a = al;);	// 2440                  mov     ds:byte_1F91A, al ;~ 01A2:11FA
loc_111fd:
	// 4556 
cs=0x1a2;eip=0x0011fd; 	T(CMP(al, 0x9D));	// 2443                  cmp     al, 9Dh ;~ 01A2:11FD
cs=0x1a2;eip=0x0011ff; 	J(JNZ(loc_11206));	// 2444                  jnz     short loc_11206 ;~ 01A2:11FF
cs=0x1a2;eip=0x001201; 	X(byte_1f91a = 0;);	// 2446                  mov     ds:byte_1F91A, 0 ;~ 01A2:1201
loc_11206:
	// 4557 
cs=0x1a2;eip=0x001206; 	T(CMP(al, 0x2E));	// 2449                  cmp     al, 2Eh ; '.' ;~ 01A2:1206
cs=0x1a2;eip=0x001208; 	J(JNZ(loc_11214));	// 2450                  jnz     short loc_11214 ;~ 01A2:1208
cs=0x1a2;eip=0x00120a; 	T(CMP(byte_1f91a, 0));	// 2451                  cmp     ds:byte_1F91A, 0 ;~ 01A2:120A
cs=0x1a2;eip=0x00120f; 	J(JZ(loc_11214));	// 2452                  jz      short loc_11214 ;~ 01A2:120F
cs=0x1a2;eip=0x001211; 	X(byte_1f919 = al;);	// 2453                  mov     ds:byte_1F919, al ;~ 01A2:1211
loc_11214:
	// 4558 
cs=0x1a2;eip=0x001214; 	T(CMP(al, 0x10));	// 2457                  cmp     al, 10h ;~ 01A2:1214
cs=0x1a2;eip=0x001216; 	J(JNZ(loc_11222));	// 2458                  jnz     short loc_11222 ;~ 01A2:1216
cs=0x1a2;eip=0x001218; 	T(CMP(byte_1f91a, 0));	// 2459                  cmp     ds:byte_1F91A, 0 ;~ 01A2:1218
cs=0x1a2;eip=0x00121d; 	J(JZ(loc_11222));	// 2460                  jz      short loc_11222 ;~ 01A2:121D
cs=0x1a2;eip=0x00121f; 	X(byte_1f919 = al;);	// 2462                  mov     ds:byte_1F919, al ;~ 01A2:121F
loc_11222:
	// 4559 
cs=0x1a2;eip=0x001222; 	T(cl = al;);	// 2466                  mov     cl, al ;~ 01A2:1222
cs=0x1a2;eip=0x001224; 	T(TEST(cl, 0x80));	// 2467                  test    cl, 80h ;~ 01A2:1224
cs=0x1a2;eip=0x001227; 	X(byte_1f887 = 0;);	// 2468                  mov     ds:byte_1F887, 0 ;~ 01A2:1227
cs=0x1a2;eip=0x00122c; 	J(JNZ(loc_11232));	// 2469                  jnz     short loc_11232 ;~ 01A2:122C
cs=0x1a2;eip=0x00122e; 	X(byte_1f887 = cl;);	// 2470                  mov     ds:byte_1F887, cl ;~ 01A2:122E
loc_11232:
	// 4560 
cs=0x1a2;eip=0x001232; 	T(XOR(bx, bx));	// 2473                  xor     bx, bx ;~ 01A2:1232
cs=0x1a2;eip=0x001234; 	T(bl = al;);	// 2474                  mov     bl, al ;~ 01A2:1234
cs=0x1a2;eip=0x001236; 	T(SHL(bx, 1));	// 2475                  shl     bx, 1 ;~ 01A2:1236
cs=0x1a2;eip=0x001238; 	T(ADD(bx, offset(seg000,byte_1128e)));	// 2476                  add     bx, offset byte_1128E ;~ 01A2:1238
cs=0x1a2;eip=0x00123c; 	T(MOV(ax, *(dw*)(raddr(cs,bx))));	// 2477                  mov     ax, cs:[bx] ;~ 01A2:123C
cs=0x1a2;eip=0x00123f; 	T(AND(ax, ax));	// 2478                  and     ax, ax ;~ 01A2:123F
cs=0x1a2;eip=0x001241; 	J(JZ(loc_11261));	// 2479                  jz      short loc_11261 ;~ 01A2:1241
cs=0x1a2;eip=0x001243; 	X(byte_1f887 = 0;);	// 2480                  mov     ds:byte_1F887, 0 ;~ 01A2:1243
cs=0x1a2;eip=0x001248; 	T(TEST(cl, 0x80));	// 2481                  test    cl, 80h ;~ 01A2:1248
cs=0x1a2;eip=0x00124b; 	J(JZ(loc_11259));	// 2482                  jz      short loc_11259 ;~ 01A2:124B
cs=0x1a2;eip=0x00124d; 	T(bx = word_1f914;);	// 2483                  mov     bx, ds:word_1F914 ;~ 01A2:124D
cs=0x1a2;eip=0x001251; 	T(AND(bx, ax));	// 2484                  and     bx, ax ;~ 01A2:1251
cs=0x1a2;eip=0x001253; 	X(word_1f914 = bx;);	// 2485                  mov     ds:word_1F914, bx ;~ 01A2:1253
cs=0x1a2;eip=0x001257; 	J(JMP(loc_11261));	// 2486                  jmp     short loc_11261 ;~ 01A2:1257
loc_11259:
	// 4561 
cs=0x1a2;eip=0x001259; 	X(OR(word_1f916, ax));	// 2490                  or      ds:word_1F916, ax ;~ 01A2:1259
cs=0x1a2;eip=0x00125d; 	X(OR(word_1f914, ax));	// 2491                  or      ds:word_1F914, ax ;~ 01A2:125D
loc_11261:
	// 4562 
cs=0x1a2;eip=0x001261; 	T(STI);	// 2495                  sti ;~ 01A2:1261
cs=0x1a2;eip=0x001262; 	X(PUSHF);	// 2496                  pushf ;~ 01A2:1262
cs=0x1a2;eip=0x001263; 	J(CALL(__dispatch_call,dword_1f90c));	// 2497                  call    ds:dword_1F90C ;~ 01A2:1263
cs=0x1a2;eip=0x001267; 	X(POP(dx));	// 2498                  pop     dx ;~ 01A2:1267
cs=0x1a2;eip=0x001268; 	X(POP(ds));	// 2499                  pop     ds ;~ 01A2:1268
cs=0x1a2;eip=0x001269; 	X(POP(cx));	// 2501                  pop     cx ;~ 01A2:1269
cs=0x1a2;eip=0x00126a; 	X(POP(bx));	// 2502                  pop     bx ;~ 01A2:126A
cs=0x1a2;eip=0x00126b; 	X(POP(ax));	// 2503                  pop     ax ;~ 01A2:126B
cs=0x1a2;eip=0x00126c; 	J(IRET);	// 2504                  iret ;~ 01A2:126C

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_111fd: 	goto loc_111fd;
        case m2c::kloc_11206: 	goto loc_11206;
        case m2c::kloc_11214: 	goto loc_11214;
        case m2c::kloc_11222: 	goto loc_11222;
        case m2c::kloc_11232: 	goto loc_11232;
        case m2c::kloc_11259: 	goto loc_11259;
        case m2c::kloc_11261: 	goto loc_11261;
        case m2c::kseg000_11e9_proc: 	goto seg000_11e9_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1126d(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1126d:
    _begin:
cs=0x1a2;eip=0x00126d; 	T(ax = word_1f916;);	// 2511                  mov     ax, ds:word_1F916 ;~ 01A2:126D
cs=0x1a2;eip=0x001270; 	T(OR(ax, word_1f914));	// 2512                  or      ax, ds:word_1F914 ;~ 01A2:1270
cs=0x1a2;eip=0x001274; 	X(word_1f916 = 0;);	// 2513                  mov     ds:word_1F916, 0 ;~ 01A2:1274
cs=0x1a2;eip=0x00127a; 	T(bx = ax;);	// 2514                  mov     bx, ax ;~ 01A2:127A
cs=0x1a2;eip=0x00127c; 	T(AND(bx, 0x0A0A));	// 2515                  and     bx, 0A0Ah ;~ 01A2:127C
cs=0x1a2;eip=0x001280; 	T(SHR(bx, 1));	// 2516                  shr     bx, 1 ;~ 01A2:1280
cs=0x1a2;eip=0x001282; 	T(NOT(bx));	// 2517                  not     bx ;~ 01A2:1282
cs=0x1a2;eip=0x001284; 	T(AND(ax, bx));	// 2518                  and     ax, bx ;~ 01A2:1284
cs=0x1a2;eip=0x001286; 	X(byte_1f8e3 = al;);	// 2519                  mov     ds:byte_1F8E3, al ;~ 01A2:1286
cs=0x1a2;eip=0x001289; 	X(byte_1f8e4 = ah;);	// 2520                  mov     ds:byte_1F8E4, ah ;~ 01A2:1289
cs=0x1a2;eip=0x00128d; 	J(RETN(0));	// 2521                  retn ;~ 01A2:128D

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1126d: 	goto sub_1126d;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group3(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group3:
    _begin:
sub_1149c:
	// 3049 
cs=0x1a2;eip=0x00149c; 	T(CLI);	// 3050                  cli ;~ 01A2:149C
cs=0x1a2;eip=0x00149d; 	X(PUSH(es));	// 3051                  push    es ;~ 01A2:149D
cs=0x1a2;eip=0x00149e; 	T(ax = 0x3508;);	// 3052                  mov     ax, 3508h ;~ 01A2:149E
cs=0x1a2;eip=0x0014a1; 	S(_INT(0x21));	// 3053                  int     21h             ; DOS - 2+ - GET INTERRUPT VECTOR ;~ 01A2:14A1
cs=0x1a2;eip=0x0014a3; 	T(di = offset(seg000,dword_1148c););	// 3057                  mov     di, offset dword_1148C ;~ 01A2:14A3
cs=0x1a2;eip=0x0014a6; 	X(MOV(*(dw*)(raddr(cs,di)), bx));	// 3058                  mov     cs:[di], bx ;~ 01A2:14A6
cs=0x1a2;eip=0x0014a9; 	X(MOV(*(dw*)(raddr(cs,di+2)), es));	// 3059                  mov     word ptr cs:[di+2], es ;~ 01A2:14A9
cs=0x1a2;eip=0x0014ad; 	X(POP(es));	// 3060                  pop     es ;~ 01A2:14AD
cs=0x1a2;eip=0x0014ae; 	T(al = 0x36;);	// 3062                  mov     al, 36h ; '6' ;~ 01A2:14AE
cs=0x1a2;eip=0x0014b0; 	S(OUT(0x43, al));	// 3063                  out     43h, al         ; Timer 8253-5 (AT: 8254.2). ;~ 01A2:14B0
cs=0x1a2;eip=0x0014b2; 	T(al = 0x0EC;);	// 3064                  mov     al, 0ECh ;~ 01A2:14B2
cs=0x1a2;eip=0x0014b4; 	S(OUT(0x40, al));	// 3065                  out     40h, al         ; Timer 8253-5 (AT: 8254.2). ;~ 01A2:14B4
cs=0x1a2;eip=0x0014b6; 	T(al = 0x5C;);	// 3066                  mov     al, 5Ch ; '\' ;~ 01A2:14B6
cs=0x1a2;eip=0x0014b8; 	S(OUT(0x40, al));	// 3067                  out     40h, al         ; Timer 8253-5 (AT: 8254.2). ;~ 01A2:14B8
cs=0x1a2;eip=0x0014ba; 	X(PUSH(ds));	// 3068                  push    ds ;~ 01A2:14BA
cs=0x1a2;eip=0x0014bb; 	X(PUSH(cs));	// 3069                  push    cs ;~ 01A2:14BB
cs=0x1a2;eip=0x0014bc; 	X(POP(ds));	// 3070                  pop     ds ;~ 01A2:14BC
cs=0x1a2;eip=0x0014bd; 	T(dx = m2c::kloc_114e5;);	// 3072                  mov     dx, offset loc_114E5 ;~ 01A2:14BD
cs=0x1a2;eip=0x0014c0; 	T(ax = 0x2508;);	// 3073                  mov     ax, 2508h ;~ 01A2:14C0
cs=0x1a2;eip=0x0014c3; 	S(_INT(0x21));	// 3074                  int     21h             ; DOS - SET INTERRUPT VECTOR ;~ 01A2:14C3
cs=0x1a2;eip=0x0014c5; 	X(POP(ds));	// 3077                  pop     ds ;~ 01A2:14C5
cs=0x1a2;eip=0x0014c6; 	T(STI);	// 3079                  sti ;~ 01A2:14C6
cs=0x1a2;eip=0x0014c7; 	J(RETN(0));	// 3080                  retn ;~ 01A2:14C7
seg000_14e5_proc:
	// 3112 
loc_114e5:
	// 4564 
cs=0x1a2;eip=0x0014e5; 	X(PUSH(ax));	// 3113                  push    ax ;~ 01A2:14E5
cs=0x1a2;eip=0x0014e6; 	X(PUSH(ds));	// 3114                  push    ds ;~ 01A2:14E6
cs=0x1a2;eip=0x0014e7; 	X(PUSH(bx));	// 3115                  push    bx ;~ 01A2:14E7
cs=0x1a2;eip=0x0014e8; 	X(PUSH(cx));	// 3116                  push    cx ;~ 01A2:14E8
cs=0x1a2;eip=0x0014e9; 	X(PUSH(dx));	// 3117                  push    dx ;~ 01A2:14E9
cs=0x1a2;eip=0x0014ea; 	X(PUSH(di));	// 3118                  push    di ;~ 01A2:14EA
cs=0x1a2;eip=0x0014eb; 	X(PUSH(si));	// 3119                  push    si ;~ 01A2:14EB
cs=0x1a2;eip=0x0014ec; 	X(PUSH(es));	// 3120                  push    es ;~ 01A2:14EC
cs=0x1a2;eip=0x0014ed; 	X(PUSH(ds));	// 3121                  push    ds ;~ 01A2:14ED
cs=0x1a2;eip=0x0014ee; 	T(CMP(*(dw*)(((db*)&off_11490)+2), 0));	// 3122                  cmp     word ptr cs:off_11490+2, 0 ;~ 01A2:14EE
cs=0x1a2;eip=0x0014f4; 	J(JZ(loc_1150a));	// 3123                  jz      short loc_1150A ;~ 01A2:14F4
cs=0x1a2;eip=0x0014f6; 	X(PUSH(ax));	// 3124                  push    ax ;~ 01A2:14F6
cs=0x1a2;eip=0x0014f7; 	T(ax = seg_offset(seg002););	// 3125                  mov     ax, seg seg002 ;~ 01A2:14F7
cs=0x1a2;eip=0x0014fa; 	T(ds = ax;);	// 3126                  mov     ds, ax ;~ 01A2:14FA
cs=0x1a2;eip=0x0014fc; 	X(POP(ax));	// 3128                  pop     ax ;~ 01A2:14FC
cs=0x1a2;eip=0x0014fd; 	X(PUSH(word_1f180));	// 3129                  push    word_1F180 ;~ 01A2:14FD
cs=0x1a2;eip=0x001501; 	J(CALL(__dispatch_call,off_11490));	// 3130                  call    cs:off_11490 ;~ 01A2:1501
cs=0x1a2;eip=0x001506; 	X(POP(word_1f180));	// 3131                  pop     word_1F180 ;~ 01A2:1506
loc_1150a:
	// 4565 
cs=0x1a2;eip=0x00150a; 	X(INC(seg_1149a));	// 3134                  inc     cs:seg_1149A ;~ 01A2:150A
cs=0x1a2;eip=0x00150f; 	T(ax = seg_offset(seg002););	// 3135                  mov     ax, seg seg002 ;~ 01A2:150F
cs=0x1a2;eip=0x001512; 	T(ds = ax;);	// 3136                  mov     ds, ax ;~ 01A2:1512
cs=0x1a2;eip=0x001514; 	X(DEC(*(db*)(&seg_1f727)));	// 3137                  dec     byte ptr ds:seg_1F727 ;~ 01A2:1514
cs=0x1a2;eip=0x001518; 	J(JNZ(loc_1154d));	// 3138                  jnz     short loc_1154D ;~ 01A2:1518
cs=0x1a2;eip=0x00151a; 	T(al = *(db*)(((db*)&seg_1f727)+1););	// 3139                  mov     al, byte ptr ds:seg_1F727+1 ;~ 01A2:151A
cs=0x1a2;eip=0x00151d; 	X(*(db*)(&seg_1f727) = al;);	// 3140                  mov     byte ptr ds:seg_1F727, al ;~ 01A2:151D
cs=0x1a2;eip=0x001520; 	X(INC(byte_1f725));	// 3141                  inc     ds:byte_1F725 ;~ 01A2:1520
cs=0x1a2;eip=0x001524; 	T(CMP(byte_1f725, 0x3C));	// 3142                  cmp     ds:byte_1F725, 3Ch ; '<' ;~ 01A2:1524
cs=0x1a2;eip=0x001529; 	J(JNZ(loc_1154d));	// 3143                  jnz     short loc_1154D ;~ 01A2:1529
cs=0x1a2;eip=0x00152b; 	X(byte_1f725 = 0;);	// 3144                  mov     ds:byte_1F725, 0 ;~ 01A2:152B
cs=0x1a2;eip=0x001530; 	X(INC(byte_1f724));	// 3145                  inc     ds:byte_1F724 ;~ 01A2:1530
cs=0x1a2;eip=0x001534; 	T(CMP(byte_1f724, 0x1E));	// 3146                  cmp     ds:byte_1F724, 1Eh ;~ 01A2:1534
cs=0x1a2;eip=0x001539; 	J(JNZ(loc_1154d));	// 3147                  jnz     short loc_1154D ;~ 01A2:1539
cs=0x1a2;eip=0x00153b; 	X(byte_1f726 = 1;);	// 3148                  mov     ds:byte_1F726, 1 ;~ 01A2:153B
cs=0x1a2;eip=0x001540; 	X(INC(byte_1f722));	// 3149                  inc     ds:byte_1F722 ;~ 01A2:1540
cs=0x1a2;eip=0x001544; 	X(byte_1f724 = 0;);	// 3150                  mov     ds:byte_1F724, 0 ;~ 01A2:1544
cs=0x1a2;eip=0x001549; 	X(INC(byte_1f723));	// 3151                  inc     ds:byte_1F723 ;~ 01A2:1549
loc_1154d:
	// 4566 
cs=0x1a2;eip=0x00154d; 	X(POP(ds));	// 3155                  pop     ds ;~ 01A2:154D
cs=0x1a2;eip=0x00154e; 	X(POP(es));	// 3157                  pop     es ;~ 01A2:154E
cs=0x1a2;eip=0x00154f; 	X(POP(si));	// 3159                  pop     si ;~ 01A2:154F
cs=0x1a2;eip=0x001550; 	X(POP(di));	// 3160                  pop     di ;~ 01A2:1550
cs=0x1a2;eip=0x001551; 	X(POP(dx));	// 3161                  pop     dx ;~ 01A2:1551
cs=0x1a2;eip=0x001552; 	X(POP(cx));	// 3162                  pop     cx ;~ 01A2:1552
cs=0x1a2;eip=0x001553; 	X(POP(bx));	// 3163                  pop     bx ;~ 01A2:1553
cs=0x1a2;eip=0x001554; 	X(ADD(seg_11498, 0x5CEC));	// 3164                  add     cs:seg_11498, 5CECh ;~ 01A2:1554
cs=0x1a2;eip=0x00155b; 	J(JC(loc_11564));	// 3165                  jb      short loc_11564 ;~ 01A2:155B
cs=0x1a2;eip=0x00155d; 	X(POP(ds));	// 3166                  pop     ds ;~ 01A2:155D
cs=0x1a2;eip=0x00155e; 	T(al = 0x20;);	// 3167                  mov     al, 20h ; ' ' ;~ 01A2:155E
cs=0x1a2;eip=0x001560; 	S(OUT(0x20, al));	// 3168                  out     20h, al         ; Interrupt controller, 8259A. ;~ 01A2:1560
cs=0x1a2;eip=0x001562; 	X(POP(ax));	// 3169                  pop     ax ;~ 01A2:1562
cs=0x1a2;eip=0x001563; 	J(IRET);	// 3170                  iret ;~ 01A2:1563
loc_11564:
	// 4567 
cs=0x1a2;eip=0x001564; 	X(POP(ds));	// 3174                  pop     ds ;~ 01A2:1564
cs=0x1a2;eip=0x001565; 	X(POP(ax));	// 3175                  pop     ax ;~ 01A2:1565
cs=0x1a2;eip=0x001566; 	T(STI);	// 3176                  sti ;~ 01A2:1566
cs=0x1a2;eip=0x001567; __disp=dword_1148c;
	J(return __dispatch_call(__disp, _state););	// 3177                  jmp     cs:dword_1148C ;~ 01A2:1567

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1150a: 	goto loc_1150a;
        case m2c::kloc_1154d: 	goto loc_1154d;
        case m2c::kloc_11564: 	goto loc_11564;
        case m2c::kseg000_14e5_proc: 	goto seg000_14e5_proc;
        case m2c::ksub_1149c: 	goto sub_1149c;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_114c8(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_114c8:
    _begin:
cs=0x1a2;eip=0x0014c8; 	T(CLI);	// 3088                  cli ;~ 01A2:14C8
cs=0x1a2;eip=0x0014c9; 	X(PUSH(ds));	// 3089                  push    ds ;~ 01A2:14C9
cs=0x1a2;eip=0x0014ca; 	T(LDS(dx, dword_1148c));	// 3090                  lds     dx, cs:dword_1148C ;~ 01A2:14CA
cs=0x1a2;eip=0x0014cf; 	T(OR(dx, dx));	// 3092                  or      dx, dx ;~ 01A2:14CF
cs=0x1a2;eip=0x0014d1; 	J(JZ(loc_114e2));	// 3093                  jz      short loc_114E2 ;~ 01A2:14D1
cs=0x1a2;eip=0x0014d3; 	T(ax = 0x2508;);	// 3094                  mov     ax, 2508h ;~ 01A2:14D3
cs=0x1a2;eip=0x0014d6; 	S(_INT(0x21));	// 3095                  int     21h             ; DOS - SET INTERRUPT VECTOR ;~ 01A2:14D6
cs=0x1a2;eip=0x0014d8; 	T(al = 0x36;);	// 3098                  mov     al, 36h ; '6' ;~ 01A2:14D8
cs=0x1a2;eip=0x0014da; 	S(OUT(0x43, al));	// 3099                  out     43h, al         ; Timer 8253-5 (AT: 8254.2). ;~ 01A2:14DA
cs=0x1a2;eip=0x0014dc; 	T(XOR(al, al));	// 3100                  xor     al, al ;~ 01A2:14DC
cs=0x1a2;eip=0x0014de; 	S(OUT(0x40, al));	// 3101                  out     40h, al         ; Timer 8253-5 (AT: 8254.2). ;~ 01A2:14DE
cs=0x1a2;eip=0x0014e0; 	S(OUT(0x40, al));	// 3102                  out     40h, al         ; Timer 8253-5 (AT: 8254.2). ;~ 01A2:14E0
loc_114e2:
	// 4563 
cs=0x1a2;eip=0x0014e2; 	X(POP(ds));	// 3105                  pop     ds ;~ 01A2:14E2
cs=0x1a2;eip=0x0014e3; 	T(STI);	// 3106                  sti ;~ 01A2:14E3
cs=0x1a2;eip=0x0014e4; 	J(RETN(0));	// 3107                  retn ;~ 01A2:14E4

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_114e2: 	goto loc_114e2;
        case m2c::ksub_114c8: 	goto sub_114c8;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1156c(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1156c:
    _begin:
cs=0x1a2;eip=0x00156c; 	T(CMP(*(dw*)(((db*)&off_11490)+2), 0));	// 3185                  cmp     word ptr cs:off_11490+2, 0 ;~ 01A2:156C
cs=0x1a2;eip=0x001572; 	J(JZ(locret_115ea));	// 3186                  jz      short locret_115EA ;~ 01A2:1572
cs=0x1a2;eip=0x001574; 	X(PUSH(bx));	// 3187                  push    bx ;~ 01A2:1574
cs=0x1a2;eip=0x001575; 	X(PUSH(ax));	// 3188                  push    ax ;~ 01A2:1575
cs=0x1a2;eip=0x001576; 	T(al = byte_70cb0;);	// 3189                  mov     al, ss:byte_70CB0 ;~ 01A2:1576
cs=0x1a2;eip=0x00157a; 	T(bx = 0x4064;);	// 3190                  mov     bx, 4064h ;~ 01A2:157A
cs=0x1a2;eip=0x00157d; 	T(CMP(al, 0x54));	// 3191                  cmp     al, 54h ; 'T' ;~ 01A2:157D
cs=0x1a2;eip=0x00157f; 	J(JZ(loc_11585));	// 3192                  jz      short loc_11585 ;~ 01A2:157F
cs=0x1a2;eip=0x001581; 	T(CMP(al, 0x42));	// 3193                  cmp     al, 42h ; 'B' ;~ 01A2:1581
cs=0x1a2;eip=0x001583; 	J(JNZ(loc_115c5));	// 3194                  jnz     short loc_115C5 ;~ 01A2:1583
loc_11585:
	// 4568 
cs=0x1a2;eip=0x001585; 	X(POP(ax));	// 3197                  pop     ax ;~ 01A2:1585
cs=0x1a2;eip=0x001586; 	X(PUSH(es));	// 3198                  push    es ;~ 01A2:1586
cs=0x1a2;eip=0x001587; 	X(PUSH(ds));	// 3199                  push    ds ;~ 01A2:1587
cs=0x1a2;eip=0x001588; 	X(PUSH(ax));	// 3200                  push    ax ;~ 01A2:1588
cs=0x1a2;eip=0x001589; 	T(ax = seg_offset(seg008););	// 3201                  mov     ax, seg seg008 ;~ 01A2:1589
cs=0x1a2;eip=0x00158c; 	T(es = ax;);	// 3202                  mov     es, ax ;~ 01A2:158C
cs=0x1a2;eip=0x00158e; 	T(ax = ss;);	// 3204                  mov     ax, ss ;~ 01A2:158E
cs=0x1a2;eip=0x001590; 	T(ds = ax;);	// 3205                  mov     ds, ax ;~ 01A2:1590
cs=0x1a2;eip=0x001592; 	X(POP(ax));	// 3207                  pop     ax ;~ 01A2:1592
cs=0x1a2;eip=0x001593; 	T(XLAT);	// 3208                  xlat ;~ 01A2:1593
cs=0x1a2;eip=0x001594; 	T(OR(al, al));	// 3209                  or      al, al ;~ 01A2:1594
cs=0x1a2;eip=0x001596; 	J(JS(loc_115b1));	// 3210                  js      short loc_115B1 ;~ 01A2:1596
cs=0x1a2;eip=0x001598; 	T(bx = word_2f16a;);	// 3211                  mov     bx, es:word_2F16A ;~ 01A2:1598
cs=0x1a2;eip=0x00159d; 	T(CMP(*(db*)(&word_2f16a), 0));	// 3212                  cmp     byte ptr es:word_2F16A, 0 ;~ 01A2:159D
cs=0x1a2;eip=0x0015a3; 	J(JNZ(loc_115e7));	// 3213                  jnz     short loc_115E7 ;~ 01A2:15A3
cs=0x1a2;eip=0x0015a5; 	T(CMP(*(db*)(((db*)&word_2f16a)+1), 0));	// 3214                  cmp     byte ptr es:word_2F16A+1, 0 ;~ 01A2:15A5
cs=0x1a2;eip=0x0015ab; 	J(JNZ(loc_115e7));	// 3215                  jnz     short loc_115E7 ;~ 01A2:15AB
cs=0x1a2;eip=0x0015ad; 	T(OR(al, al));	// 3216                  or      al, al ;~ 01A2:15AD
cs=0x1a2;eip=0x0015af; 	J(JNS(loc_115be));	// 3217                  jns     short loc_115BE ;~ 01A2:15AF
loc_115b1:
	// 4569 
cs=0x1a2;eip=0x0015b1; 	T(AND(al, 0x7F));	// 3220                  and     al, 7Fh ;~ 01A2:15B1
cs=0x1a2;eip=0x0015b3; 	T(bx = 0x40F0;);	// 3221                  mov     bx, 40F0h ;~ 01A2:15B3
cs=0x1a2;eip=0x0015b6; 	T(XOR(ah, ah));	// 3222                  xor     ah, ah ;~ 01A2:15B6
cs=0x1a2;eip=0x0015b8; 	T(ADD(bx, ax));	// 3223                  add     bx, ax ;~ 01A2:15B8
cs=0x1a2;eip=0x0015ba; 	X(MOV(*(raddr(ds,bx)), al));	// 3224                  mov     [bx], al ;~ 01A2:15BA
cs=0x1a2;eip=0x0015bc; 	J(JMP(loc_115bf));	// 3225                  jmp     short loc_115BF ;~ 01A2:15BC
loc_115be:
	// 4570 
cs=0x1a2;eip=0x0015be; 	T(NOP);	// 3229                  nop ;~ 01A2:15BE
loc_115bf:
	// 4571 
cs=0x1a2;eip=0x0015bf; 	X(*(db*)(&word_2f16a) = al;);	// 3232                  mov     byte ptr es:word_2F16A, al ;~ 01A2:15BF
cs=0x1a2;eip=0x0015c3; 	J(JMP(loc_115e7));	// 3233                  jmp     short loc_115E7 ;~ 01A2:15C3
loc_115c5:
	// 4572 
cs=0x1a2;eip=0x0015c5; 	X(POP(ax));	// 3238                  pop     ax ;~ 01A2:15C5
cs=0x1a2;eip=0x0015c6; 	X(PUSH(es));	// 3239                  push    es ;~ 01A2:15C6
cs=0x1a2;eip=0x0015c7; 	X(PUSH(ds));	// 3240                  push    ds ;~ 01A2:15C7
cs=0x1a2;eip=0x0015c8; 	X(PUSH(ax));	// 3241                  push    ax ;~ 01A2:15C8
cs=0x1a2;eip=0x0015c9; 	T(ax = seg_offset(seg008););	// 3242                  mov     ax, seg seg008 ;~ 01A2:15C9
cs=0x1a2;eip=0x0015cc; 	T(es = ax;);	// 3243                  mov     es, ax ;~ 01A2:15CC
cs=0x1a2;eip=0x0015ce; 	T(ax = ss;);	// 3244                  mov     ax, ss ;~ 01A2:15CE
cs=0x1a2;eip=0x0015d0; 	T(ds = ax;);	// 3245                  mov     ds, ax ;~ 01A2:15D0
cs=0x1a2;eip=0x0015d2; 	X(POP(ax));	// 3247                  pop     ax ;~ 01A2:15D2
cs=0x1a2;eip=0x0015d3; 	T(XLAT);	// 3248                  xlat ;~ 01A2:15D3
cs=0x1a2;eip=0x0015d4; 	T(OR(al, al));	// 3249                  or      al, al ;~ 01A2:15D4
cs=0x1a2;eip=0x0015d6; 	J(JNS(loc_115e3));	// 3250                  jns     short loc_115E3 ;~ 01A2:15D6
cs=0x1a2;eip=0x0015d8; 	T(AND(al, 0x7F));	// 3251                  and     al, 7Fh ;~ 01A2:15D8
cs=0x1a2;eip=0x0015da; 	T(bx = 0x40F0;);	// 3252                  mov     bx, 40F0h ;~ 01A2:15DA
cs=0x1a2;eip=0x0015dd; 	T(XOR(ah, ah));	// 3253                  xor     ah, ah ;~ 01A2:15DD
cs=0x1a2;eip=0x0015df; 	T(ADD(bx, ax));	// 3254                  add     bx, ax ;~ 01A2:15DF
cs=0x1a2;eip=0x0015e1; 	X(MOV(*(raddr(ds,bx)), al));	// 3255                  mov     [bx], al ;~ 01A2:15E1
loc_115e3:
	// 4573 
cs=0x1a2;eip=0x0015e3; 	X(*(db*)(&word_2f16a) = al;);	// 3258                  mov     byte ptr es:word_2F16A, al ;~ 01A2:15E3
loc_115e7:
	// 4574 
cs=0x1a2;eip=0x0015e7; 	X(POP(ds));	// 3262                  pop     ds ;~ 01A2:15E7
cs=0x1a2;eip=0x0015e8; 	X(POP(es));	// 3264                  pop     es ;~ 01A2:15E8
cs=0x1a2;eip=0x0015e9; 	X(POP(bx));	// 3266                  pop     bx ;~ 01A2:15E9
locret_115ea:
	// 4575 
cs=0x1a2;eip=0x0015ea; 	J(RETN(0));	// 3269                  retn ;~ 01A2:15EA

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_11585: 	goto loc_11585;
        case m2c::kloc_115b1: 	goto loc_115b1;
        case m2c::kloc_115be: 	goto loc_115be;
        case m2c::kloc_115bf: 	goto loc_115bf;
        case m2c::kloc_115c5: 	goto loc_115c5;
        case m2c::kloc_115e3: 	goto loc_115e3;
        case m2c::kloc_115e7: 	goto loc_115e7;
        case m2c::klocret_115ea: 	goto locret_115ea;
        case m2c::ksub_1156c: 	goto sub_1156c;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_115eb(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_115eb:
    _begin:
cs=0x1a2;eip=0x0015eb; 	T(CMP(*(dw*)(((db*)&off_11490)+2), 0));	// 3278                  cmp     word ptr cs:off_11490+2, 0 ;~ 01A2:15EB
cs=0x1a2;eip=0x0015f1; 	J(JZ(locret_11612));	// 3279                  jz      short locret_11612 ;~ 01A2:15F1
cs=0x1a2;eip=0x0015f3; 	X(PUSH(es));	// 3280                  push    es ;~ 01A2:15F3
cs=0x1a2;eip=0x0015f4; 	X(PUSH(ds));	// 3281                  push    ds ;~ 01A2:15F4
cs=0x1a2;eip=0x0015f5; 	X(PUSH(ax));	// 3282                  push    ax ;~ 01A2:15F5
cs=0x1a2;eip=0x0015f6; 	T(ax = seg_offset(seg008););	// 3283                  mov     ax, seg seg008 ;~ 01A2:15F6
cs=0x1a2;eip=0x0015f9; 	T(es = ax;);	// 3284                  mov     es, ax ;~ 01A2:15F9
cs=0x1a2;eip=0x0015fb; 	X(*(db*)(&word_2f168) = 0x0FF;);	// 3286                  mov     byte ptr es:word_2F168, 0FFh ;~ 01A2:15FB
cs=0x1a2;eip=0x001601; 	X(*(db*)(((db*)&word_2f168)+1) = 0;);	// 3287                  mov     byte ptr es:word_2F168+1, 0 ;~ 01A2:1601
loc_11607:
	// 4576 
cs=0x1a2;eip=0x001607; 	T(CMP(*(db*)(&word_2f168), 0x0FF));	// 3290                  cmp     byte ptr es:word_2F168, 0FFh ;~ 01A2:1607
cs=0x1a2;eip=0x00160d; 	J(JZ(loc_11607));	// 3291                  jz      short loc_11607 ;~ 01A2:160D
cs=0x1a2;eip=0x00160f; 	X(POP(ax));	// 3292                  pop     ax ;~ 01A2:160F
cs=0x1a2;eip=0x001610; 	X(POP(ds));	// 3293                  pop     ds ;~ 01A2:1610
cs=0x1a2;eip=0x001611; 	X(POP(es));	// 3294                  pop     es ;~ 01A2:1611
locret_11612:
	// 4577 
cs=0x1a2;eip=0x001612; 	J(RETN(0));	// 3298                  retn ;~ 01A2:1612

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_11607: 	goto loc_11607;
        case m2c::klocret_11612: 	goto locret_11612;
        case m2c::ksub_115eb: 	goto sub_115eb;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_11613(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_11613:
    _begin:
cs=0x1a2;eip=0x001613; 	T(CMP(*(dw*)(((db*)&off_11490)+2), 0));	// 3307                  cmp     word ptr cs:off_11490+2, 0 ;~ 01A2:1613
cs=0x1a2;eip=0x001619; 	J(JZ(locret_1164d));	// 3308                  jz      short locret_1164D ;~ 01A2:1619
cs=0x1a2;eip=0x00161b; 	X(PUSH(bx));	// 3309                  push    bx ;~ 01A2:161B
cs=0x1a2;eip=0x00161c; 	X(PUSH(es));	// 3310                  push    es ;~ 01A2:161C
cs=0x1a2;eip=0x00161d; 	X(PUSH(ds));	// 3311                  push    ds ;~ 01A2:161D
cs=0x1a2;eip=0x00161e; 	X(PUSH(ax));	// 3312                  push    ax ;~ 01A2:161E
cs=0x1a2;eip=0x00161f; 	T(ax = seg_offset(seg008););	// 3313                  mov     ax, seg seg008 ;~ 01A2:161F
cs=0x1a2;eip=0x001622; 	T(es = ax;);	// 3314                  mov     es, ax ;~ 01A2:1622
cs=0x1a2;eip=0x001624; 	T(ax = ss;);	// 3316                  mov     ax, ss ;~ 01A2:1624
cs=0x1a2;eip=0x001626; 	T(ds = ax;);	// 3317                  mov     ds, ax ;~ 01A2:1626
cs=0x1a2;eip=0x001628; 	X(POP(ax));	// 3319                  pop     ax ;~ 01A2:1628
cs=0x1a2;eip=0x001629; 	T(bx = 0x40F0;);	// 3320                  mov     bx, 40F0h ;~ 01A2:1629
cs=0x1a2;eip=0x00162c; 	T(INC(al));	// 3321                  inc     al ;~ 01A2:162C
cs=0x1a2;eip=0x00162e; 	T(XOR(ah, ah));	// 3322                  xor     ah, ah ;~ 01A2:162E
cs=0x1a2;eip=0x001630; 	T(ADD(bx, ax));	// 3323                  add     bx, ax ;~ 01A2:1630
cs=0x1a2;eip=0x001632; 	X(MOV(*(raddr(ds,bx)), 0));	// 3324                  mov     byte ptr [bx], 0 ;~ 01A2:1632
cs=0x1a2;eip=0x001635; 	X(byte_2f16c = al;);	// 3325                  mov     es:byte_2F16C, al ;~ 01A2:1635
cs=0x1a2;eip=0x001639; 	X(POP(ds));	// 3326                  pop     ds ;~ 01A2:1639
cs=0x1a2;eip=0x00163a; 	X(POP(es));	// 3328                  pop     es ;~ 01A2:163A
cs=0x1a2;eip=0x00163b; 	X(POP(bx));	// 3330                  pop     bx ;~ 01A2:163B
cs=0x1a2;eip=0x00163c; 	X(PUSH(ax));	// 3331                  push    ax ;~ 01A2:163C
cs=0x1a2;eip=0x00163d; 	T(al = byte_70cb0;);	// 3332                  mov     al, ss:byte_70CB0 ;~ 01A2:163D
cs=0x1a2;eip=0x001641; 	T(CMP(al, 0x42));	// 3333                  cmp     al, 42h ; 'B' ;~ 01A2:1641
cs=0x1a2;eip=0x001643; 	J(JZ(loc_11649));	// 3334                  jz      short loc_11649 ;~ 01A2:1643
cs=0x1a2;eip=0x001645; 	T(CMP(al, 0x54));	// 3335                  cmp     al, 54h ; 'T' ;~ 01A2:1645
cs=0x1a2;eip=0x001647; 	J(JNZ(loc_1164c));	// 3336                  jnz     short loc_1164C ;~ 01A2:1647
loc_11649:
	// 4578 
cs=0x1a2;eip=0x001649; 	J(CALL(sub_11685,0));	// 3339                  call    sub_11685 ;~ 01A2:1649
loc_1164c:
	// 4579 
cs=0x1a2;eip=0x00164c; 	X(POP(ax));	// 3342                  pop     ax ;~ 01A2:164C
locret_1164d:
	// 4580 
cs=0x1a2;eip=0x00164d; 	J(RETN(0));	// 3345                  retn ;~ 01A2:164D

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_11649: 	goto loc_11649;
        case m2c::kloc_1164c: 	goto loc_1164c;
        case m2c::klocret_1164d: 	goto locret_1164d;
        case m2c::ksub_11613: 	goto sub_11613;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1164e(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1164e:
    _begin:
cs=0x1a2;eip=0x00164e; 	X(PUSH(ax));	// 3354                  push    ax ;~ 01A2:164E
cs=0x1a2;eip=0x00164f; 	X(PUSH(bx));	// 3355                  push    bx ;~ 01A2:164F
cs=0x1a2;eip=0x001650; 	X(PUSH(cx));	// 3356                  push    cx ;~ 01A2:1650
cs=0x1a2;eip=0x001651; 	X(PUSH(dx));	// 3357                  push    dx ;~ 01A2:1651
cs=0x1a2;eip=0x001652; 	X(PUSH(bp));	// 3358                  push    bp ;~ 01A2:1652
cs=0x1a2;eip=0x001653; 	X(PUSH(si));	// 3359                  push    si ;~ 01A2:1653
cs=0x1a2;eip=0x001654; 	X(PUSH(di));	// 3360                  push    di ;~ 01A2:1654
cs=0x1a2;eip=0x001655; 	X(PUSH(es));	// 3361                  push    es ;~ 01A2:1655
cs=0x1a2;eip=0x001656; 	X(PUSH(ds));	// 3362                  push    ds ;~ 01A2:1656
cs=0x1a2;eip=0x001657; 	J(CALL(sub_1156c,0));	// 3363                  call    sub_1156C ;~ 01A2:1657
cs=0x1a2;eip=0x00165a; 	X(POP(ds));	// 3364                  pop     ds ;~ 01A2:165A
cs=0x1a2;eip=0x00165b; 	X(POP(es));	// 3365                  pop     es ;~ 01A2:165B
cs=0x1a2;eip=0x00165c; 	X(POP(di));	// 3366                  pop     di ;~ 01A2:165C
cs=0x1a2;eip=0x00165d; 	X(POP(si));	// 3367                  pop     si ;~ 01A2:165D
cs=0x1a2;eip=0x00165e; 	X(POP(bp));	// 3368                  pop     bp ;~ 01A2:165E
cs=0x1a2;eip=0x00165f; 	X(POP(dx));	// 3369                  pop     dx ;~ 01A2:165F
cs=0x1a2;eip=0x001660; 	X(POP(cx));	// 3370                  pop     cx ;~ 01A2:1660
cs=0x1a2;eip=0x001661; 	X(POP(bx));	// 3371                  pop     bx ;~ 01A2:1661
cs=0x1a2;eip=0x001662; 	X(POP(ax));	// 3372                  pop     ax ;~ 01A2:1662
cs=0x1a2;eip=0x001663; 	J(RETN(0));	// 3373                  retn ;~ 01A2:1663

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1164e: 	goto sub_1164e;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_11664(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_11664:
    _begin:
cs=0x1a2;eip=0x001664; 	X(PUSH(ax));	// 3381                  push    ax ;~ 01A2:1664
cs=0x1a2;eip=0x001665; 	X(PUSH(bx));	// 3382                  push    bx ;~ 01A2:1665
cs=0x1a2;eip=0x001666; 	X(PUSH(cx));	// 3383                  push    cx ;~ 01A2:1666
cs=0x1a2;eip=0x001667; 	X(PUSH(dx));	// 3384                  push    dx ;~ 01A2:1667
cs=0x1a2;eip=0x001668; 	X(PUSH(bp));	// 3385                  push    bp ;~ 01A2:1668
cs=0x1a2;eip=0x001669; 	X(PUSH(si));	// 3386                  push    si ;~ 01A2:1669
cs=0x1a2;eip=0x00166a; 	X(PUSH(di));	// 3387                  push    di ;~ 01A2:166A
cs=0x1a2;eip=0x00166b; 	X(PUSH(es));	// 3388                  push    es ;~ 01A2:166B
cs=0x1a2;eip=0x00166c; 	X(PUSH(ds));	// 3389                  push    ds ;~ 01A2:166C
cs=0x1a2;eip=0x00166d; 	T(ax = ss;);	// 3390                  mov     ax, ss ;~ 01A2:166D
cs=0x1a2;eip=0x00166f; 	T(es = ax;);	// 3391                  mov     es, ax ;~ 01A2:166F
cs=0x1a2;eip=0x001671; 	T(XOR(ax, ax));	// 3393                  xor     ax, ax ;~ 01A2:1671
cs=0x1a2;eip=0x001673; 	T(di = 0x40F0;);	// 3394                  mov     di, 40F0h ;~ 01A2:1673
cs=0x1a2;eip=0x001676; 	T(cx = 0x40;);	// 3395                  mov     cx, 40h ; '@' ;~ 01A2:1676
	// 3396                  rep stosw ;~ 01A2:1679
cs=0x1a2;eip=0x001679; 	X(	REP STOSW);	// 3396                  rep stosw ;~ 01A2:1679
cs=0x1a2;eip=0x00167b; 	X(POP(ds));	// 3397                  pop     ds ;~ 01A2:167B
cs=0x1a2;eip=0x00167c; 	X(POP(es));	// 3398                  pop     es ;~ 01A2:167C
cs=0x1a2;eip=0x00167d; 	X(POP(di));	// 3400                  pop     di ;~ 01A2:167D
cs=0x1a2;eip=0x00167e; 	X(POP(si));	// 3401                  pop     si ;~ 01A2:167E
cs=0x1a2;eip=0x00167f; 	X(POP(bp));	// 3402                  pop     bp ;~ 01A2:167F
cs=0x1a2;eip=0x001680; 	X(POP(dx));	// 3403                  pop     dx ;~ 01A2:1680
cs=0x1a2;eip=0x001681; 	X(POP(cx));	// 3404                  pop     cx ;~ 01A2:1681
cs=0x1a2;eip=0x001682; 	X(POP(bx));	// 3405                  pop     bx ;~ 01A2:1682
cs=0x1a2;eip=0x001683; 	X(POP(ax));	// 3406                  pop     ax ;~ 01A2:1683
cs=0x1a2;eip=0x001684; 	J(RETN(0));	// 3407                  retn ;~ 01A2:1684

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_11664: 	goto sub_11664;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_11685(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_11685:
    _begin:
cs=0x1a2;eip=0x001685; 	X(PUSH(cx));	// 3416                  push    cx ;~ 01A2:1685
cs=0x1a2;eip=0x001686; 	X(PUSH(si));	// 3417                  push    si ;~ 01A2:1686
cs=0x1a2;eip=0x001687; 	X(PUSH(ax));	// 3418                  push    ax ;~ 01A2:1687
cs=0x1a2;eip=0x001688; 	T(cx = 0x80;);	// 3419                  mov     cx, 80h ;~ 01A2:1688
cs=0x1a2;eip=0x00168b; 	T(si = 0x40F0;);	// 3420                  mov     si, 40F0h ;~ 01A2:168B
loc_1168e:
	// 4581 
cs=0x1a2;eip=0x00168e; 	T(MOV(al, *(raddr(ss,si))));	// 3423                  mov     al, ss:[si] ;~ 01A2:168E
cs=0x1a2;eip=0x001691; 	T(INC(si));	// 3424                  inc     si ;~ 01A2:1691
cs=0x1a2;eip=0x001692; 	T(OR(al, al));	// 3425                  or      al, al ;~ 01A2:1692
cs=0x1a2;eip=0x001694; 	J(JZ(loc_1169b));	// 3426                  jz      short loc_1169B ;~ 01A2:1694
cs=0x1a2;eip=0x001696; 	T(DEC(al));	// 3427                  dec     al ;~ 01A2:1696
cs=0x1a2;eip=0x001698; 	J(CALL(sub_1164e,0));	// 3428                  call    sub_1164E ;~ 01A2:1698
loc_1169b:
	// 4582 
cs=0x1a2;eip=0x00169b; 	J(LOOP(loc_1168e));	// 3431                  loop    loc_1168E ;~ 01A2:169B
cs=0x1a2;eip=0x00169d; 	X(POP(ax));	// 3432                  pop     ax ;~ 01A2:169D
cs=0x1a2;eip=0x00169e; 	X(POP(si));	// 3433                  pop     si ;~ 01A2:169E
cs=0x1a2;eip=0x00169f; 	X(POP(cx));	// 3434                  pop     cx ;~ 01A2:169F
cs=0x1a2;eip=0x0016a0; 	J(RETN(0));	// 3435                  retn ;~ 01A2:16A0

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1168e: 	goto loc_1168e;
        case m2c::kloc_1169b: 	goto loc_1169b;
        case m2c::ksub_11685: 	goto sub_11685;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_16a1_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_16a1_proc:
    _begin:
cs=0x1a2;eip=0x0016a1; 	X(PUSH(dx));	// 3439                  push    dx ;~ 01A2:16A1
cs=0x1a2;eip=0x0016a2; 	X(PUSH(cx));	// 3440                  push    cx ;~ 01A2:16A2
cs=0x1a2;eip=0x0016a3; 	X(PUSH(si));	// 3441                  push    si ;~ 01A2:16A3
cs=0x1a2;eip=0x0016a4; 	X(PUSH(di));	// 3442                  push    di ;~ 01A2:16A4
cs=0x1a2;eip=0x0016a5; 	T(dl = byte_1f38e;);	// 3443                  mov     dl, ds:byte_1F38E ;~ 01A2:16A5
cs=0x1a2;eip=0x0016a9; 	T(dh = byte_1f38f;);	// 3444                  mov     dh, ds:byte_1F38F ;~ 01A2:16A9
cs=0x1a2;eip=0x0016ad; 	T(ch = byte_1f749;);	// 3445                  mov     ch, ds:byte_1F749 ;~ 01A2:16AD
cs=0x1a2;eip=0x0016b1; 	T(es = *(dw*)(((db*)&off_1f194)+2););	// 3446                  mov     es, word ptr off_1F194+2 ;~ 01A2:16B1
cs=0x1a2;eip=0x0016b5; 	T(di = word_1f198;);	// 3447                  mov     di, word_1F198 ;~ 01A2:16B5
cs=0x1a2;eip=0x0016b9; 	T(si = 0x0FFFF;);	// 3448                  mov     si, 0FFFFh ;~ 01A2:16B9
cs=0x1a2;eip=0x0016bc; 	J(CALL(sub_116e0,0));	// 3449                  call    sub_116E0 ;~ 01A2:16BC
cs=0x1a2;eip=0x0016bf; 	T(si = word_1f1ac;);	// 3450                  mov     si, word_1F1AC ;~ 01A2:16BF
cs=0x1a2;eip=0x0016c3; 	T(CMP(*(raddr(ds,si)), 0));	// 3451                  cmp     byte ptr [si], 0 ;~ 01A2:16C3
cs=0x1a2;eip=0x0016c6; 	X(POP(di));	// 3452                  pop     di ;~ 01A2:16C6
cs=0x1a2;eip=0x0016c7; 	X(POP(si));	// 3453                  pop     si ;~ 01A2:16C7
cs=0x1a2;eip=0x0016c8; 	X(POP(cx));	// 3454                  pop     cx ;~ 01A2:16C8
cs=0x1a2;eip=0x0016c9; 	X(POP(dx));	// 3455                  pop     dx ;~ 01A2:16C9
cs=0x1a2;eip=0x0016ca; 	J(RETN(0));	// 3456                  retn ;~ 01A2:16CA

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kseg000_16a1_proc: 	goto seg000_16a1_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_116d3(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_116d3:
    _begin:
cs=0x1a2;eip=0x0016d3; 	X(PUSH(ax));	// 3471                  push    ax ;~ 01A2:16D3
cs=0x1a2;eip=0x0016d4; 	X(PUSH(bx));	// 3472                  push    bx ;~ 01A2:16D4
cs=0x1a2;eip=0x0016d5; 	X(PUSH(cx));	// 3473                  push    cx ;~ 01A2:16D5
cs=0x1a2;eip=0x0016d6; 	X(PUSH(dx));	// 3474                  push    dx ;~ 01A2:16D6
cs=0x1a2;eip=0x0016d7; 	X(PUSH(bp));	// 3475                  push    bp ;~ 01A2:16D7
cs=0x1a2;eip=0x0016d8; 	X(PUSH(si));	// 3476                  push    si ;~ 01A2:16D8
cs=0x1a2;eip=0x0016d9; 	X(PUSH(di));	// 3477                  push    di ;~ 01A2:16D9
cs=0x1a2;eip=0x0016da; 	X(PUSH(es));	// 3478                  push    es ;~ 01A2:16DA
cs=0x1a2;eip=0x0016db; 	X(PUSH(ds));	// 3479                  push    ds ;~ 01A2:16DB
cs=0x1a2;eip=0x0016dc; 	T(al = 0;);	// 3480                  mov     al, 0 ;~ 01A2:16DC
cs=0x1a2;eip=0x0016de; 	J(return sub_116e0(m2c::kloc_116eb, _state););	// 3481                  jmp     short loc_116EB ;~ 01A2:16DE

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_116d3: 	goto sub_116d3;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_116e0(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_116e0:
    _begin:
cs=0x1a2;eip=0x0016e0; 	X(PUSH(ax));	// 3491                  push    ax ;~ 01A2:16E0
cs=0x1a2;eip=0x0016e1; 	X(PUSH(bx));	// 3492                  push    bx ;~ 01A2:16E1
cs=0x1a2;eip=0x0016e2; 	X(PUSH(cx));	// 3493                  push    cx ;~ 01A2:16E2
cs=0x1a2;eip=0x0016e3; 	X(PUSH(dx));	// 3494                  push    dx ;~ 01A2:16E3
cs=0x1a2;eip=0x0016e4; 	X(PUSH(bp));	// 3495                  push    bp ;~ 01A2:16E4
cs=0x1a2;eip=0x0016e5; 	X(PUSH(si));	// 3496                  push    si ;~ 01A2:16E5
cs=0x1a2;eip=0x0016e6; 	X(PUSH(di));	// 3497                  push    di ;~ 01A2:16E6
cs=0x1a2;eip=0x0016e7; 	X(PUSH(es));	// 3498                  push    es ;~ 01A2:16E7
cs=0x1a2;eip=0x0016e8; 	X(PUSH(ds));	// 3499                  push    ds ;~ 01A2:16E8
cs=0x1a2;eip=0x0016e9; 	T(al = 1;);	// 3500                  mov     al, 1 ;~ 01A2:16E9
loc_116eb:
	// 4583 
cs=0x1a2;eip=0x0016eb; 	X(byte_1f85b = al;);	// 3503                  mov     ds:byte_1F85B, al ;~ 01A2:16EB
cs=0x1a2;eip=0x0016ee; 	T(cl = dl;);	// 3504                  mov     cl, dl ;~ 01A2:16EE
cs=0x1a2;eip=0x0016f0; 	T(MOV(ax, *(dw*)(raddr(es,di+0x10))));	// 3505                  mov     ax, es:[di+10h] ;~ 01A2:16F0
cs=0x1a2;eip=0x0016f4; 	T(SUB(cl, al));	// 3506                  sub     cl, al ;~ 01A2:16F4
cs=0x1a2;eip=0x0016f6; 	T(INC(cl));	// 3507                  inc     cl ;~ 01A2:16F6
cs=0x1a2;eip=0x0016f8; 	T(bl = dh;);	// 3508                  mov     bl, dh ;~ 01A2:16F8
cs=0x1a2;eip=0x0016fa; 	T(MOV(ax, *(dw*)(raddr(es,di+0x12))));	// 3509                  mov     ax, es:[di+12h] ;~ 01A2:16FA
cs=0x1a2;eip=0x0016fe; 	T(SUB(bl, al));	// 3510                  sub     bl, al ;~ 01A2:16FE
cs=0x1a2;eip=0x001700; 	T(INC(bl));	// 3511                  inc     bl ;~ 01A2:1700
cs=0x1a2;eip=0x001702; 	T(bh = ch;);	// 3512                  mov     bh, ch ;~ 01A2:1702
cs=0x1a2;eip=0x001704; 	T(MOV(ax, *(dw*)(raddr(es,di+0x14))));	// 3513                  mov     ax, es:[di+14h] ;~ 01A2:1704
cs=0x1a2;eip=0x001708; 	T(ADD(bh, al));	// 3514                  add     bh, al ;~ 01A2:1708
cs=0x1a2;eip=0x00170a; 	T(SUB(bh, byte_1f85b));	// 3515                  sub     bh, ds:byte_1F85B ;~ 01A2:170A
cs=0x1a2;eip=0x00170e; 	T(di = word_1f19a;);	// 3516                  mov     di, word_1F19A ;~ 01A2:170E
cs=0x1a2;eip=0x001712; 	T(ax = word_1f394;);	// 3517                  mov     ax, ds:word_1F394 ;~ 01A2:1712
cs=0x1a2;eip=0x001715; 	X(byte_1f865 = al;);	// 3518                  mov     ds:byte_1F865, al ;~ 01A2:1715
cs=0x1a2;eip=0x001718; 	T(bp = word_1f1ac;);	// 3519                  mov     bp, word_1F1AC ;~ 01A2:1718
cs=0x1a2;eip=0x00171c; 	X(word_1f732 = bp;);	// 3520                  mov     ds:word_1F732, bp ;~ 01A2:171C
cs=0x1a2;eip=0x001720; 	X(MOV(*(dw*)(raddr(ds,bp+0)), 0));	// 3521                  mov     word ptr ds:[bp+0], 0 ;~ 01A2:1720
cs=0x1a2;eip=0x001726; 	T(ADD(bp, 2));	// 3522                  add     bp, 2 ;~ 01A2:1726
cs=0x1a2;eip=0x001729; 	T(OR(ch, ch));	// 3523                  or      ch, ch ;~ 01A2:1729
cs=0x1a2;eip=0x00172b; 	J(JS(loc_11756));	// 3524                  js      short loc_11756 ;~ 01A2:172B
cs=0x1a2;eip=0x00172d; 	T(CMP(bh, 0x0F0));	// 3525                  cmp     bh, 0F0h ;~ 01A2:172D
cs=0x1a2;eip=0x001730; 	J(JNC(loc_11756));	// 3526                  jnb     short loc_11756 ;~ 01A2:1730
cs=0x1a2;eip=0x001732; 	T(CMP(dl, byte_1f764));	// 3527                  cmp     dl, ds:byte_1F764 ;~ 01A2:1732
cs=0x1a2;eip=0x001736; 	J(JGE(loc_11756));	// 3528                  jge     short loc_11756 ;~ 01A2:1736
cs=0x1a2;eip=0x001738; 	T(CMP(dh, byte_1f765));	// 3529                  cmp     dh, ds:byte_1F765 ;~ 01A2:1738
cs=0x1a2;eip=0x00173c; 	J(JGE(loc_11756));	// 3530                  jge     short loc_11756 ;~ 01A2:173C
cs=0x1a2;eip=0x00173e; 	T(CMP(bl, byte_1f750));	// 3531                  cmp     bl, ds:byte_1F750 ;~ 01A2:173E
cs=0x1a2;eip=0x001742; 	J(JG(loc_1174a));	// 3532                  jg      short loc_1174A ;~ 01A2:1742
cs=0x1a2;eip=0x001744; 	T(CMP(cl, byte_1f74f));	// 3533                  cmp     cl, ds:byte_1F74F ;~ 01A2:1744
cs=0x1a2;eip=0x001748; 	J(JLE(loc_11756));	// 3534                  jle     short loc_11756 ;~ 01A2:1748
loc_1174a:
	// 4584 
cs=0x1a2;eip=0x00174a; 	T(CMP(cl, byte_1f742));	// 3537                  cmp     cl, ds:byte_1F742 ;~ 01A2:174A
cs=0x1a2;eip=0x00174e; 	J(JL(loc_11756));	// 3538                  jl      short loc_11756 ;~ 01A2:174E
cs=0x1a2;eip=0x001750; 	T(CMP(bl, byte_1f741));	// 3539                  cmp     bl, ds:byte_1F741 ;~ 01A2:1750
cs=0x1a2;eip=0x001754; 	J(JGE(loc_1176a));	// 3540                  jge     short loc_1176A ;~ 01A2:1754
loc_11756:
	// 4585 
cs=0x1a2;eip=0x001756; 	J(CALL(sub_11968,0));	// 3544                  call    sub_11968 ;~ 01A2:1756
cs=0x1a2;eip=0x001759; 	T(si = word_1f732;);	// 3545                  mov     si, ds:word_1F732 ;~ 01A2:1759
cs=0x1a2;eip=0x00175d; 	X(MOV(*(raddr(ds,si)), al));	// 3546                  mov     [si], al ;~ 01A2:175D
cs=0x1a2;eip=0x00175f; 	X(MOV(*(dw*)(raddr(ds,si+2)), di));	// 3547                  mov     [si+2], di ;~ 01A2:175F
cs=0x1a2;eip=0x001762; 	X(MOV(*(dw*)(raddr(ds,si+4)), 0));	// 3548                  mov     word ptr [si+4], 0 ;~ 01A2:1762
cs=0x1a2;eip=0x001767; 	J(JMP(loc_1194e));	// 3549                  jmp     loc_1194E ;~ 01A2:1767
loc_1176a:
	// 4586 
cs=0x1a2;eip=0x00176a; 	T(ax = word_1f1c4;);	// 3553                  mov     ax, word_1F1C4 ;~ 01A2:176A
cs=0x1a2;eip=0x00176d; 	T(OR(ax, ax));	// 3554                  or      ax, ax ;~ 01A2:176D
cs=0x1a2;eip=0x00176f; 	J(JNZ(loc_11774));	// 3555                  jnz     short loc_11774 ;~ 01A2:176F
cs=0x1a2;eip=0x001771; 	J(JMP(loc_1183b));	// 3556                  jmp     loc_1183B ;~ 01A2:1771
loc_11774:
	// 4587 
cs=0x1a2;eip=0x001774; 	T(CMP(cl, 8));	// 3560                  cmp     cl, 8 ;~ 01A2:1774
cs=0x1a2;eip=0x001777; 	J(JL(loc_11781));	// 3561                  jl      short loc_11781 ;~ 01A2:1777
cs=0x1a2;eip=0x001779; 	T(CMP(bl, 8));	// 3562                  cmp     bl, 8 ;~ 01A2:1779
cs=0x1a2;eip=0x00177c; 	J(JL(loc_11781));	// 3563                  jl      short loc_11781 ;~ 01A2:177C
cs=0x1a2;eip=0x00177e; 	J(JMP(loc_1183b));	// 3564                  jmp     loc_1183B ;~ 01A2:177E
loc_11781:
	// 4588 
cs=0x1a2;eip=0x001781; 	X(PUSH(ax));	// 3569                  push    ax ;~ 01A2:1781
cs=0x1a2;eip=0x001782; 	J(RETN(0));	// 3570                  retn ;~ 01A2:1782
ret_1a2_1783:
	// 4589 
cs=0x1a2;eip=0x001783; 	T(CMP(dl, byte_1f760));	// 3572                  cmp     dl, ds:byte_1F760 ;~ 01A2:1783
cs=0x1a2;eip=0x001787; 	J(JGE(loc_11791));	// 3573                  jge     short loc_11791 ;~ 01A2:1787
cs=0x1a2;eip=0x001789; 	T(CMP(dl, byte_1f762));	// 3574                  cmp     dl, ds:byte_1F762 ;~ 01A2:1789
cs=0x1a2;eip=0x00178d; 	J(JGE(loc_11797));	// 3575                  jge     short loc_11797 ;~ 01A2:178D
cs=0x1a2;eip=0x00178f; 	J(JMP(loc_117b1));	// 3576                  jmp     short loc_117B1 ;~ 01A2:178F
loc_11791:
	// 4590 
cs=0x1a2;eip=0x001791; 	T(CMP(cl, byte_1f760));	// 3580                  cmp     cl, ds:byte_1F760 ;~ 01A2:1791
cs=0x1a2;eip=0x001795; 	J(JG(loc_117b1));	// 3581                  jg      short loc_117B1 ;~ 01A2:1795
loc_11797:
	// 4591 
cs=0x1a2;eip=0x001797; 	T(CMP(dh, byte_1f761));	// 3584                  cmp     dh, ds:byte_1F761 ;~ 01A2:1797
cs=0x1a2;eip=0x00179b; 	J(JGE(loc_117a8));	// 3585                  jge     short loc_117A8 ;~ 01A2:179B
cs=0x1a2;eip=0x00179d; 	T(CMP(dh, byte_1f763));	// 3586                  cmp     dh, ds:byte_1F763 ;~ 01A2:179D
cs=0x1a2;eip=0x0017a1; 	J(JL(loc_117a6));	// 3587                  jl      short loc_117A6 ;~ 01A2:17A1
cs=0x1a2;eip=0x0017a3; 	J(JMP(loc_1195f));	// 3588                  jmp     loc_1195F ;~ 01A2:17A3
loc_117a6:
	// 4592 
cs=0x1a2;eip=0x0017a6; 	J(JMP(loc_117b1));	// 3592                  jmp     short loc_117B1 ;~ 01A2:17A6
loc_117a8:
	// 4593 
cs=0x1a2;eip=0x0017a8; 	T(CMP(bl, byte_1f761));	// 3596                  cmp     bl, ds:byte_1F761 ;~ 01A2:17A8
cs=0x1a2;eip=0x0017ac; 	J(JG(loc_117b1));	// 3597                  jg      short loc_117B1 ;~ 01A2:17AC
cs=0x1a2;eip=0x0017ae; 	J(JMP(loc_1195f));	// 3598                  jmp     loc_1195F ;~ 01A2:17AE
loc_117b1:
	// 4594 
cs=0x1a2;eip=0x0017b1; 	T(CMP(dl, byte_1f75c));	// 3603                  cmp     dl, ds:byte_1F75C ;~ 01A2:17B1
cs=0x1a2;eip=0x0017b5; 	J(JGE(loc_117bf));	// 3604                  jge     short loc_117BF ;~ 01A2:17B5
cs=0x1a2;eip=0x0017b7; 	T(CMP(dl, byte_1f75e));	// 3605                  cmp     dl, ds:byte_1F75E ;~ 01A2:17B7
cs=0x1a2;eip=0x0017bb; 	J(JGE(loc_117c5));	// 3606                  jge     short loc_117C5 ;~ 01A2:17BB
cs=0x1a2;eip=0x0017bd; 	J(JMP(loc_117df));	// 3607                  jmp     short loc_117DF ;~ 01A2:17BD
loc_117bf:
	// 4595 
cs=0x1a2;eip=0x0017bf; 	T(CMP(cl, byte_1f75c));	// 3611                  cmp     cl, ds:byte_1F75C ;~ 01A2:17BF
cs=0x1a2;eip=0x0017c3; 	J(JG(loc_117df));	// 3612                  jg      short loc_117DF ;~ 01A2:17C3
loc_117c5:
	// 4596 
cs=0x1a2;eip=0x0017c5; 	T(CMP(dh, byte_1f75d));	// 3615                  cmp     dh, ds:byte_1F75D ;~ 01A2:17C5
cs=0x1a2;eip=0x0017c9; 	J(JGE(loc_117d6));	// 3616                  jge     short loc_117D6 ;~ 01A2:17C9
cs=0x1a2;eip=0x0017cb; 	T(CMP(dh, byte_1f75f));	// 3617                  cmp     dh, ds:byte_1F75F ;~ 01A2:17CB
cs=0x1a2;eip=0x0017cf; 	J(JL(loc_117d4));	// 3618                  jl      short loc_117D4 ;~ 01A2:17CF
cs=0x1a2;eip=0x0017d1; 	J(JMP(loc_1195f));	// 3619                  jmp     loc_1195F ;~ 01A2:17D1
loc_117d4:
	// 4597 
cs=0x1a2;eip=0x0017d4; 	J(JMP(loc_117df));	// 3623                  jmp     short loc_117DF ;~ 01A2:17D4
loc_117d6:
	// 4598 
cs=0x1a2;eip=0x0017d6; 	T(CMP(bl, byte_1f75d));	// 3627                  cmp     bl, ds:byte_1F75D ;~ 01A2:17D6
cs=0x1a2;eip=0x0017da; 	J(JG(loc_117df));	// 3628                  jg      short loc_117DF ;~ 01A2:17DA
cs=0x1a2;eip=0x0017dc; 	J(JMP(loc_1195f));	// 3629                  jmp     loc_1195F ;~ 01A2:17DC
loc_117df:
	// 4599 
cs=0x1a2;eip=0x0017df; 	T(CMP(dl, byte_1f758));	// 3634                  cmp     dl, ds:byte_1F758 ;~ 01A2:17DF
cs=0x1a2;eip=0x0017e3; 	J(JGE(loc_117ed));	// 3635                  jge     short loc_117ED ;~ 01A2:17E3
cs=0x1a2;eip=0x0017e5; 	T(CMP(dl, byte_1f75a));	// 3636                  cmp     dl, ds:byte_1F75A ;~ 01A2:17E5
cs=0x1a2;eip=0x0017e9; 	J(JGE(loc_117f3));	// 3637                  jge     short loc_117F3 ;~ 01A2:17E9
cs=0x1a2;eip=0x0017eb; 	J(JMP(loc_1180d));	// 3638                  jmp     short loc_1180D ;~ 01A2:17EB
loc_117ed:
	// 4600 
cs=0x1a2;eip=0x0017ed; 	T(CMP(cl, byte_1f758));	// 3642                  cmp     cl, ds:byte_1F758 ;~ 01A2:17ED
cs=0x1a2;eip=0x0017f1; 	J(JG(loc_1180d));	// 3643                  jg      short loc_1180D ;~ 01A2:17F1
loc_117f3:
	// 4601 
cs=0x1a2;eip=0x0017f3; 	T(CMP(dh, byte_1f759));	// 3646                  cmp     dh, ds:byte_1F759 ;~ 01A2:17F3
cs=0x1a2;eip=0x0017f7; 	J(JGE(loc_11804));	// 3647                  jge     short loc_11804 ;~ 01A2:17F7
cs=0x1a2;eip=0x0017f9; 	T(CMP(dh, byte_1f75b));	// 3648                  cmp     dh, ds:byte_1F75B ;~ 01A2:17F9
cs=0x1a2;eip=0x0017fd; 	J(JL(loc_11802));	// 3649                  jl      short loc_11802 ;~ 01A2:17FD
cs=0x1a2;eip=0x0017ff; 	J(JMP(loc_1195f));	// 3650                  jmp     loc_1195F ;~ 01A2:17FF
loc_11802:
	// 4602 
cs=0x1a2;eip=0x001802; 	J(JMP(loc_1180d));	// 3654                  jmp     short loc_1180D ;~ 01A2:1802
loc_11804:
	// 4603 
cs=0x1a2;eip=0x001804; 	T(CMP(bl, byte_1f759));	// 3658                  cmp     bl, ds:byte_1F759 ;~ 01A2:1804
cs=0x1a2;eip=0x001808; 	J(JG(loc_1180d));	// 3659                  jg      short loc_1180D ;~ 01A2:1808
cs=0x1a2;eip=0x00180a; 	J(JMP(loc_1195f));	// 3660                  jmp     loc_1195F ;~ 01A2:180A
loc_1180d:
	// 4604 
cs=0x1a2;eip=0x00180d; 	T(CMP(dl, byte_1f754));	// 3665                  cmp     dl, ds:byte_1F754 ;~ 01A2:180D
cs=0x1a2;eip=0x001811; 	J(JGE(loc_1181b));	// 3666                  jge     short loc_1181B ;~ 01A2:1811
cs=0x1a2;eip=0x001813; 	T(CMP(dl, byte_1f756));	// 3667                  cmp     dl, ds:byte_1F756 ;~ 01A2:1813
cs=0x1a2;eip=0x001817; 	J(JGE(loc_11821));	// 3668                  jge     short loc_11821 ;~ 01A2:1817
cs=0x1a2;eip=0x001819; 	J(JMP(loc_1183b));	// 3669                  jmp     short loc_1183B ;~ 01A2:1819
loc_1181b:
	// 4605 
cs=0x1a2;eip=0x00181b; 	T(CMP(cl, byte_1f754));	// 3673                  cmp     cl, ds:byte_1F754 ;~ 01A2:181B
cs=0x1a2;eip=0x00181f; 	J(JG(loc_1183b));	// 3674                  jg      short loc_1183B ;~ 01A2:181F
loc_11821:
	// 4606 
cs=0x1a2;eip=0x001821; 	T(CMP(dh, byte_1f755));	// 3677                  cmp     dh, ds:byte_1F755 ;~ 01A2:1821
cs=0x1a2;eip=0x001825; 	J(JGE(loc_11832));	// 3678                  jge     short loc_11832 ;~ 01A2:1825
cs=0x1a2;eip=0x001827; 	T(CMP(dh, byte_1f757));	// 3679                  cmp     dh, ds:byte_1F757 ;~ 01A2:1827
cs=0x1a2;eip=0x00182b; 	J(JL(loc_11830));	// 3680                  jl      short loc_11830 ;~ 01A2:182B
cs=0x1a2;eip=0x00182d; 	J(JMP(loc_1195f));	// 3681                  jmp     loc_1195F ;~ 01A2:182D
loc_11830:
	// 4607 
cs=0x1a2;eip=0x001830; 	J(JMP(loc_1183b));	// 3685                  jmp     short loc_1183B ;~ 01A2:1830
loc_11832:
	// 4608 
cs=0x1a2;eip=0x001832; 	T(CMP(bl, byte_1f755));	// 3689                  cmp     bl, ds:byte_1F755 ;~ 01A2:1832
cs=0x1a2;eip=0x001836; 	J(JG(loc_1183b));	// 3690                  jg      short loc_1183B ;~ 01A2:1836
cs=0x1a2;eip=0x001838; 	J(JMP(loc_1195f));	// 3691                  jmp     loc_1195F ;~ 01A2:1838
loc_1183b:
	// 4609 
cs=0x1a2;eip=0x00183b; 	X(DEC(byte_1f865));	// 3696                  dec     ds:byte_1F865 ;~ 01A2:183B
cs=0x1a2;eip=0x00183f; 	J(JNS(loc_11844));	// 3697                  jns     short loc_11844 ;~ 01A2:183F
cs=0x1a2;eip=0x001841; 	J(JMP(loc_1194e));	// 3698                  jmp     loc_1194E ;~ 01A2:1841
loc_11844:
	// 4610 
cs=0x1a2;eip=0x001844; 	X(word_1f72c = si;);	// 3702                  mov     ds:word_1F72C, si ;~ 01A2:1844
loc_11848:
	// 4611 
cs=0x1a2;eip=0x001848; 	T(CMP(*(dw*)(raddr(ds,di)), 0));	// 3705                  cmp     word ptr [di], 0 ;~ 01A2:1848
cs=0x1a2;eip=0x00184b; 	J(JNS(loc_11850));	// 3706                  jns     short loc_11850 ;~ 01A2:184B
cs=0x1a2;eip=0x00184d; 	J(JMP(loc_11942));	// 3707                  jmp     loc_11942 ;~ 01A2:184D
loc_11850:
	// 4612 
cs=0x1a2;eip=0x001850; 	T(ax = word_1f72c;);	// 3711                  mov     ax, ds:word_1F72C ;~ 01A2:1850
cs=0x1a2;eip=0x001853; 	T(CMP(ax, *(dw*)(raddr(ds,di+0x0A))));	// 3712                  cmp     ax, [di+0Ah] ;~ 01A2:1853
cs=0x1a2;eip=0x001856; 	J(JNZ(loc_1185b));	// 3713                  jnz     short loc_1185B ;~ 01A2:1856
cs=0x1a2;eip=0x001858; 	J(JMP(loc_11942));	// 3714                  jmp     loc_11942 ;~ 01A2:1858
loc_1185b:
	// 4613 
cs=0x1a2;eip=0x00185b; 	T(CMP(dl, *(raddr(ds,di))));	// 3718                  cmp     dl, [di] ;~ 01A2:185B
cs=0x1a2;eip=0x00185d; 	J(JGE(loc_11867));	// 3719                  jge     short loc_11867 ;~ 01A2:185D
cs=0x1a2;eip=0x00185f; 	T(CMP(dl, *(raddr(ds,di+2))));	// 3720                  cmp     dl, [di+2] ;~ 01A2:185F
cs=0x1a2;eip=0x001862; 	J(JGE(loc_1186e));	// 3721                  jge     short loc_1186E ;~ 01A2:1862
cs=0x1a2;eip=0x001864; 	J(JMP(loc_11942));	// 3722                  jmp     loc_11942 ;~ 01A2:1864
loc_11867:
	// 4614 
cs=0x1a2;eip=0x001867; 	T(CMP(cl, *(raddr(ds,di))));	// 3726                  cmp     cl, [di] ;~ 01A2:1867
cs=0x1a2;eip=0x001869; 	J(JLE(loc_1186e));	// 3727                  jle     short loc_1186E ;~ 01A2:1869
cs=0x1a2;eip=0x00186b; 	J(JMP(loc_11942));	// 3728                  jmp     loc_11942 ;~ 01A2:186B
loc_1186e:
	// 4615 
cs=0x1a2;eip=0x00186e; 	T(CMP(dh, *(raddr(ds,di+1))));	// 3733                  cmp     dh, [di+1] ;~ 01A2:186E
cs=0x1a2;eip=0x001871; 	J(JGE(loc_1187b));	// 3734                  jge     short loc_1187B ;~ 01A2:1871
cs=0x1a2;eip=0x001873; 	T(CMP(dh, *(raddr(ds,di+3))));	// 3735                  cmp     dh, [di+3] ;~ 01A2:1873
cs=0x1a2;eip=0x001876; 	J(JGE(loc_11883));	// 3736                  jge     short loc_11883 ;~ 01A2:1876
cs=0x1a2;eip=0x001878; 	J(JMP(loc_11942));	// 3737                  jmp     loc_11942 ;~ 01A2:1878
loc_1187b:
	// 4616 
cs=0x1a2;eip=0x00187b; 	T(CMP(bl, *(raddr(ds,di+1))));	// 3741                  cmp     bl, [di+1] ;~ 01A2:187B
cs=0x1a2;eip=0x00187e; 	J(JLE(loc_11883));	// 3742                  jle     short loc_11883 ;~ 01A2:187E
cs=0x1a2;eip=0x001880; 	J(JMP(loc_11942));	// 3743                  jmp     loc_11942 ;~ 01A2:1880
loc_11883:
	// 4617 
cs=0x1a2;eip=0x001883; 	T(OR(ch, ch));	// 3748                  or      ch, ch ;~ 01A2:1883
cs=0x1a2;eip=0x001885; 	J(JZ(loc_118f6));	// 3749                  jz      short loc_118F6 ;~ 01A2:1885
cs=0x1a2;eip=0x001887; 	T(CMP(ch, *(raddr(ds,di+4))));	// 3750                  cmp     ch, [di+4] ;~ 01A2:1887
cs=0x1a2;eip=0x00188a; 	J(JNZ(loc_118f6));	// 3751                  jnz     short loc_118F6 ;~ 01A2:188A
cs=0x1a2;eip=0x00188c; 	X(PUSH(bx));	// 3752                  push    bx ;~ 01A2:188C
cs=0x1a2;eip=0x00188d; 	X(PUSH(si));	// 3753                  push    si ;~ 01A2:188D
cs=0x1a2;eip=0x00188e; 	T(MOV(bx, *(dw*)(raddr(ds,di+0x0A))));	// 3754                  mov     bx, [di+0Ah] ;~ 01A2:188E
cs=0x1a2;eip=0x001891; 	T(si = word_1f72c;);	// 3755                  mov     si, ds:word_1F72C ;~ 01A2:1891
cs=0x1a2;eip=0x001895; 	T(CMP(si, 0x0FFFF));	// 3756                  cmp     si, 0FFFFh ;~ 01A2:1895
cs=0x1a2;eip=0x001898; 	J(JZ(loc_118f4));	// 3757                  jz      short loc_118F4 ;~ 01A2:1898
cs=0x1a2;eip=0x00189a; 	X(PUSH(ax));	// 3758                  push    ax ;~ 01A2:189A
cs=0x1a2;eip=0x00189b; 	X(PUSH(dx));	// 3759                  push    dx ;~ 01A2:189B
cs=0x1a2;eip=0x00189c; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 3760                  mov     ax, [si+4] ;~ 01A2:189C
cs=0x1a2;eip=0x00189f; 	T(MOV(dx, *(dw*)(raddr(ds,bx+4))));	// 3761                  mov     dx, [bx+4] ;~ 01A2:189F
cs=0x1a2;eip=0x0018a2; 	J(CALL(sub_16441,0));	// 3762                  call    sub_16441 ;~ 01A2:18A2
cs=0x1a2;eip=0x0018a5; 	X(POP(dx));	// 3763                  pop     dx ;~ 01A2:18A5
cs=0x1a2;eip=0x0018a6; 	X(POP(ax));	// 3764                  pop     ax ;~ 01A2:18A6
cs=0x1a2;eip=0x0018a7; 	J(JZ(loc_118c7));	// 3765                  jz      short loc_118C7 ;~ 01A2:18A7
cs=0x1a2;eip=0x0018a9; 	X(PUSH(di));	// 3766                  push    di ;~ 01A2:18A9
cs=0x1a2;eip=0x0018aa; 	X(PUSH(ax));	// 3767                  push    ax ;~ 01A2:18AA
cs=0x1a2;eip=0x0018ab; 	T(di = word_1f1f4;);	// 3768                  mov     di, word_1F1F4 ;~ 01A2:18AB
cs=0x1a2;eip=0x0018af; 	X(MOV(*(dw*)(raddr(ds,di)), 9));	// 3769                  mov     word ptr [di], 9 ;~ 01A2:18AF
cs=0x1a2;eip=0x0018b3; 	X(MOV(*(dw*)(raddr(ds,di+2)), si));	// 3770                  mov     [di+2], si ;~ 01A2:18B3
cs=0x1a2;eip=0x0018b6; 	T(MOV(ax, *(dw*)(raddr(ds,bx+4))));	// 3771                  mov     ax, [bx+4] ;~ 01A2:18B6
cs=0x1a2;eip=0x0018b9; 	X(MOV(*(dw*)(raddr(ds,di+4)), ax));	// 3772                  mov     [di+4], ax ;~ 01A2:18B9
cs=0x1a2;eip=0x0018bc; 	X(ADD(word_1f1f4, 6));	// 3773                  add     word_1F1F4, 6 ;~ 01A2:18BC
cs=0x1a2;eip=0x0018c1; 	X(INC(word_1f396));	// 3774                  inc     ds:word_1F396 ;~ 01A2:18C1
cs=0x1a2;eip=0x0018c5; 	X(POP(ax));	// 3775                  pop     ax ;~ 01A2:18C5
cs=0x1a2;eip=0x0018c6; 	X(POP(di));	// 3776                  pop     di ;~ 01A2:18C6
loc_118c7:
	// 4618 
cs=0x1a2;eip=0x0018c7; 	X(PUSH(ax));	// 3779                  push    ax ;~ 01A2:18C7
cs=0x1a2;eip=0x0018c8; 	X(PUSH(dx));	// 3780                  push    dx ;~ 01A2:18C8
cs=0x1a2;eip=0x0018c9; 	T(MOV(ax, *(dw*)(raddr(ds,bx+4))));	// 3781                  mov     ax, [bx+4] ;~ 01A2:18C9
cs=0x1a2;eip=0x0018cc; 	T(MOV(dx, *(dw*)(raddr(ds,si+4))));	// 3782                  mov     dx, [si+4] ;~ 01A2:18CC
cs=0x1a2;eip=0x0018cf; 	J(CALL(sub_16441,0));	// 3783                  call    sub_16441 ;~ 01A2:18CF
cs=0x1a2;eip=0x0018d2; 	X(POP(dx));	// 3784                  pop     dx ;~ 01A2:18D2
cs=0x1a2;eip=0x0018d3; 	X(POP(ax));	// 3785                  pop     ax ;~ 01A2:18D3
cs=0x1a2;eip=0x0018d4; 	J(JZ(loc_118f4));	// 3786                  jz      short loc_118F4 ;~ 01A2:18D4
cs=0x1a2;eip=0x0018d6; 	X(PUSH(di));	// 3787                  push    di ;~ 01A2:18D6
cs=0x1a2;eip=0x0018d7; 	X(PUSH(ax));	// 3788                  push    ax ;~ 01A2:18D7
cs=0x1a2;eip=0x0018d8; 	T(di = word_1f1f4;);	// 3789                  mov     di, word_1F1F4 ;~ 01A2:18D8
cs=0x1a2;eip=0x0018dc; 	X(MOV(*(dw*)(raddr(ds,di)), 9));	// 3790                  mov     word ptr [di], 9 ;~ 01A2:18DC
cs=0x1a2;eip=0x0018e0; 	X(MOV(*(dw*)(raddr(ds,di+2)), bx));	// 3791                  mov     [di+2], bx ;~ 01A2:18E0
cs=0x1a2;eip=0x0018e3; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 3792                  mov     ax, [si+4] ;~ 01A2:18E3
cs=0x1a2;eip=0x0018e6; 	X(MOV(*(dw*)(raddr(ds,di+4)), ax));	// 3793                  mov     [di+4], ax ;~ 01A2:18E6
cs=0x1a2;eip=0x0018e9; 	X(ADD(word_1f1f4, 6));	// 3794                  add     word_1F1F4, 6 ;~ 01A2:18E9
cs=0x1a2;eip=0x0018ee; 	X(INC(word_1f396));	// 3795                  inc     ds:word_1F396 ;~ 01A2:18EE
cs=0x1a2;eip=0x0018f2; 	X(POP(ax));	// 3796                  pop     ax ;~ 01A2:18F2
cs=0x1a2;eip=0x0018f3; 	X(POP(di));	// 3797                  pop     di ;~ 01A2:18F3
loc_118f4:
	// 4619 
cs=0x1a2;eip=0x0018f4; 	X(POP(si));	// 3801                  pop     si ;~ 01A2:18F4
cs=0x1a2;eip=0x0018f5; 	X(POP(bx));	// 3802                  pop     bx ;~ 01A2:18F5
loc_118f6:
	// 4620 
cs=0x1a2;eip=0x0018f6; 	T(CMP(bh, *(raddr(ds,di+4))));	// 3806                  cmp     bh, [di+4] ;~ 01A2:18F6
cs=0x1a2;eip=0x0018f9; 	J(JGE(loc_11902));	// 3807                  jge     short loc_11902 ;~ 01A2:18F9
cs=0x1a2;eip=0x0018fb; 	T(CMP(bh, *(raddr(ds,di+5))));	// 3808                  cmp     bh, [di+5] ;~ 01A2:18FB
cs=0x1a2;eip=0x0018fe; 	J(JGE(loc_11907));	// 3809                  jge     short loc_11907 ;~ 01A2:18FE
cs=0x1a2;eip=0x001900; 	J(JMP(loc_11942));	// 3810                  jmp     short loc_11942 ;~ 01A2:1900
loc_11902:
	// 4621 
cs=0x1a2;eip=0x001902; 	T(CMP(ch, *(raddr(ds,di+4))));	// 3814                  cmp     ch, [di+4] ;~ 01A2:1902
cs=0x1a2;eip=0x001905; 	J(JG(loc_11942));	// 3815                  jg      short loc_11942 ;~ 01A2:1905
loc_11907:
	// 4622 
cs=0x1a2;eip=0x001907; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x0A))));	// 3818                  mov     ax, [di+0Ah] ;~ 01A2:1907
cs=0x1a2;eip=0x00190a; 	X(MOV(*(dw*)(raddr(ds,bp+0)), ax));	// 3819                  mov     ds:[bp+0], ax ;~ 01A2:190A
cs=0x1a2;eip=0x00190e; 	T(ADD(bp, 2));	// 3820                  add     bp, 2 ;~ 01A2:190E
cs=0x1a2;eip=0x001911; 	T(DEC(bh));	// 3821                  dec     bh ;~ 01A2:1911
cs=0x1a2;eip=0x001913; 	T(CMP(byte_1f85b, 0));	// 3822                  cmp     ds:byte_1F85B, 0 ;~ 01A2:1913
cs=0x1a2;eip=0x001918; 	J(JNZ(loc_11924));	// 3823                  jnz     short loc_11924 ;~ 01A2:1918
cs=0x1a2;eip=0x00191a; 	T(CMP(bh, *(raddr(ds,di+5))));	// 3824                  cmp     bh, [di+5] ;~ 01A2:191A
cs=0x1a2;eip=0x00191d; 	J(JGE(loc_11924));	// 3825                  jge     short loc_11924 ;~ 01A2:191D
cs=0x1a2;eip=0x00191f; 	X(OR(*(dw*)(raddr(ds,bp-2)), 1));	// 3826                  or      word ptr ds:[bp-2], 1 ;~ 01A2:191F
loc_11924:
	// 4623 
cs=0x1a2;eip=0x001924; 	T(INC(bh));	// 3830                  inc     bh ;~ 01A2:1924
cs=0x1a2;eip=0x001926; 	T(si = word_1f732;);	// 3831                  mov     si, ds:word_1F732 ;~ 01A2:1926
cs=0x1a2;eip=0x00192a; 	X(INC(*(raddr(ds,si))));	// 3832                  inc     byte ptr [si] ;~ 01A2:192A
cs=0x1a2;eip=0x00192c; 	T(CMP(*(raddr(ds,di+0x14)), 0));	// 3833                  cmp     byte ptr [di+14h], 0 ;~ 01A2:192C
cs=0x1a2;eip=0x001930; 	J(JS(loc_1193a));	// 3834                  js      short loc_1193A ;~ 01A2:1930
cs=0x1a2;eip=0x001932; 	T(si = ax;);	// 3835                  mov     si, ax ;~ 01A2:1932
cs=0x1a2;eip=0x001934; 	T(TEST(*(raddr(ds,si+0x0F)), 4));	// 3836                  test    byte ptr [si+0Fh], 4 ;~ 01A2:1934
cs=0x1a2;eip=0x001938; 	J(JZ(loc_11942));	// 3837                  jz      short loc_11942 ;~ 01A2:1938
loc_1193a:
	// 4624 
cs=0x1a2;eip=0x00193a; 	T(si = word_1f732;);	// 3840                  mov     si, ds:word_1F732 ;~ 01A2:193A
cs=0x1a2;eip=0x00193e; 	X(MOV(*(raddr(ds,si+1)), 0x0FD));	// 3841                  mov     byte ptr [si+1], 0FDh ;~ 01A2:193E
loc_11942:
	// 4625 
cs=0x1a2;eip=0x001942; 	T(ADD(di, 0x32));	// 3845                  add     di, 32h ; '2' ;~ 01A2:1942
cs=0x1a2;eip=0x001945; 	X(DEC(byte_1f865));	// 3846                  dec     ds:byte_1F865 ;~ 01A2:1945
cs=0x1a2;eip=0x001949; 	J(JS(loc_1194e));	// 3847                  js      short loc_1194E ;~ 01A2:1949
cs=0x1a2;eip=0x00194b; 	J(JMP(loc_11848));	// 3848                  jmp     loc_11848 ;~ 01A2:194B
loc_1194e:
	// 4626 
cs=0x1a2;eip=0x00194e; 	T(si = word_1f732;);	// 3853                  mov     si, ds:word_1F732 ;~ 01A2:194E
cs=0x1a2;eip=0x001952; 	T(CMP(*(raddr(ds,si)), 0));	// 3854                  cmp     byte ptr [si], 0 ;~ 01A2:1952
cs=0x1a2;eip=0x001955; 	X(POP(ds));	// 3855                  pop     ds ;~ 01A2:1955
cs=0x1a2;eip=0x001956; 	X(POP(es));	// 3856                  pop     es ;~ 01A2:1956
cs=0x1a2;eip=0x001957; 	X(POP(di));	// 3857                  pop     di ;~ 01A2:1957
cs=0x1a2;eip=0x001958; 	X(POP(si));	// 3858                  pop     si ;~ 01A2:1958
cs=0x1a2;eip=0x001959; 	X(POP(bp));	// 3859                  pop     bp ;~ 01A2:1959
cs=0x1a2;eip=0x00195a; 	X(POP(dx));	// 3860                  pop     dx ;~ 01A2:195A
cs=0x1a2;eip=0x00195b; 	X(POP(cx));	// 3861                  pop     cx ;~ 01A2:195B
cs=0x1a2;eip=0x00195c; 	X(POP(bx));	// 3862                  pop     bx ;~ 01A2:195C
cs=0x1a2;eip=0x00195d; 	X(POP(ax));	// 3863                  pop     ax ;~ 01A2:195D
cs=0x1a2;eip=0x00195e; 	J(RETN(0));	// 3864                  retn ;~ 01A2:195E
loc_1195f:
	// 4627 
cs=0x1a2;eip=0x00195f; 	T(si = word_1f732;);	// 3869                  mov     si, ds:word_1F732 ;~ 01A2:195F
cs=0x1a2;eip=0x001963; 	X(MOV(*(raddr(ds,si)), 0x0FF));	// 3870                  mov     byte ptr [si], 0FFh ;~ 01A2:1963
cs=0x1a2;eip=0x001966; 	J(JMP(loc_1194e));	// 3871                  jmp     short loc_1194E ;~ 01A2:1966

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_116eb: 	goto loc_116eb;
        case m2c::kloc_1174a: 	goto loc_1174a;
        case m2c::kloc_11756: 	goto loc_11756;
        case m2c::kloc_1176a: 	goto loc_1176a;
        case m2c::kloc_11774: 	goto loc_11774;
        case m2c::kloc_11781: 	goto loc_11781;
        case m2c::kloc_11791: 	goto loc_11791;
        case m2c::kloc_11797: 	goto loc_11797;
        case m2c::kloc_117a6: 	goto loc_117a6;
        case m2c::kloc_117a8: 	goto loc_117a8;
        case m2c::kloc_117b1: 	goto loc_117b1;
        case m2c::kloc_117bf: 	goto loc_117bf;
        case m2c::kloc_117c5: 	goto loc_117c5;
        case m2c::kloc_117d4: 	goto loc_117d4;
        case m2c::kloc_117d6: 	goto loc_117d6;
        case m2c::kloc_117df: 	goto loc_117df;
        case m2c::kloc_117ed: 	goto loc_117ed;
        case m2c::kloc_117f3: 	goto loc_117f3;
        case m2c::kloc_11802: 	goto loc_11802;
        case m2c::kloc_11804: 	goto loc_11804;
        case m2c::kloc_1180d: 	goto loc_1180d;
        case m2c::kloc_1181b: 	goto loc_1181b;
        case m2c::kloc_11821: 	goto loc_11821;
        case m2c::kloc_11830: 	goto loc_11830;
        case m2c::kloc_11832: 	goto loc_11832;
        case m2c::kloc_1183b: 	goto loc_1183b;
        case m2c::kloc_11844: 	goto loc_11844;
        case m2c::kloc_11848: 	goto loc_11848;
        case m2c::kloc_11850: 	goto loc_11850;
        case m2c::kloc_1185b: 	goto loc_1185b;
        case m2c::kloc_11867: 	goto loc_11867;
        case m2c::kloc_1186e: 	goto loc_1186e;
        case m2c::kloc_1187b: 	goto loc_1187b;
        case m2c::kloc_11883: 	goto loc_11883;
        case m2c::kloc_118c7: 	goto loc_118c7;
        case m2c::kloc_118f4: 	goto loc_118f4;
        case m2c::kloc_118f6: 	goto loc_118f6;
        case m2c::kloc_11902: 	goto loc_11902;
        case m2c::kloc_11907: 	goto loc_11907;
        case m2c::kloc_11924: 	goto loc_11924;
        case m2c::kloc_1193a: 	goto loc_1193a;
        case m2c::kloc_11942: 	goto loc_11942;
        case m2c::kloc_1194e: 	goto loc_1194e;
        case m2c::kloc_1195f: 	goto loc_1195f;
        case m2c::kret_1a2_1783: 	goto ret_1a2_1783;
        case m2c::ksub_116e0: 	goto sub_116e0;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_11968(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_11968:
    _begin:
cs=0x1a2;eip=0x001968; 	T(CMP(si, 0x0FFFF));	// 3879                  cmp     si, 0FFFFh ;~ 01A2:1968
cs=0x1a2;eip=0x00196b; 	J(JNZ(loc_11970));	// 3880                  jnz     short loc_11970 ;~ 01A2:196B
cs=0x1a2;eip=0x00196d; 	J(JMP(loc_11a23));	// 3881                  jmp     loc_11A23 ;~ 01A2:196D
loc_11970:
	// 4628 
cs=0x1a2;eip=0x001970; 	T(CMP(*(dw*)(raddr(ds,si+4)), 0));	// 3885                  cmp     word ptr [si+4], 0 ;~ 01A2:1970
cs=0x1a2;eip=0x001974; 	J(JZ(loc_11988));	// 3886                  jz      short loc_11988 ;~ 01A2:1974
cs=0x1a2;eip=0x001976; 	T(XOR(ah, ah));	// 3887                  xor     ah, ah ;~ 01A2:1976
cs=0x1a2;eip=0x001978; 	T(MOV(al, *(raddr(ds,si+0x0C))));	// 3888                  mov     al, [si+0Ch] ;~ 01A2:1978
cs=0x1a2;eip=0x00197b; 	X(PUSH(si));	// 3889                  push    si ;~ 01A2:197B
cs=0x1a2;eip=0x00197c; 	T(ADD(si, ax));	// 3890                  add     si, ax ;~ 01A2:197C
cs=0x1a2;eip=0x00197e; 	T(CMP(*(raddr(ds,si+5)), 7));	// 3891                  cmp     byte ptr [si+5], 7 ;~ 01A2:197E
cs=0x1a2;eip=0x001982; 	X(POP(si));	// 3892                  pop     si ;~ 01A2:1982
cs=0x1a2;eip=0x001983; 	J(JZ(loc_11988));	// 3893                  jz      short loc_11988 ;~ 01A2:1983
cs=0x1a2;eip=0x001985; 	J(JMP(loc_11a23));	// 3894                  jmp     loc_11A23 ;~ 01A2:1985
loc_11988:
	// 4629 
cs=0x1a2;eip=0x001988; 	T(bp = word_1f1aa;);	// 3899                  mov     bp, word_1F1AA ;~ 01A2:1988
cs=0x1a2;eip=0x00198c; 	T(ax = word_1f39e;);	// 3900                  mov     ax, ds:word_1F39E ;~ 01A2:198C
cs=0x1a2;eip=0x00198f; 	T(OR(ax, ax));	// 3901                  or      ax, ax ;~ 01A2:198F
cs=0x1a2;eip=0x001991; 	J(JNZ(loc_11996));	// 3902                  jnz     short loc_11996 ;~ 01A2:1991
cs=0x1a2;eip=0x001993; 	J(JMP(loc_11a23));	// 3903                  jmp     loc_11A23 ;~ 01A2:1993
loc_11996:
	// 4630 
cs=0x1a2;eip=0x001996; 	T(ah = al;);	// 3907                  mov     ah, al ;~ 01A2:1996
loc_11998:
	// 4631 
cs=0x1a2;eip=0x001998; 	T(CMP(*(dw*)(raddr(ss,bp+0)), 0x0FFFF));	// 3910                  cmp     word ptr [bp+0], 0FFFFh ;~ 01A2:1998
cs=0x1a2;eip=0x00199c; 	J(JZ(loc_11a19));	// 3911                  jz      short loc_11A19 ;~ 01A2:199C
cs=0x1a2;eip=0x00199e; 	T(CMP(dl, *(raddr(ss,bp+0))));	// 3912                  cmp     dl, [bp+0] ;~ 01A2:199E
cs=0x1a2;eip=0x0019a1; 	J(JGE(loc_119aa));	// 3913                  jge     short loc_119AA ;~ 01A2:19A1
cs=0x1a2;eip=0x0019a3; 	T(CMP(dl, *(raddr(ss,bp+2))));	// 3914                  cmp     dl, [bp+2] ;~ 01A2:19A3
cs=0x1a2;eip=0x0019a6; 	J(JGE(loc_119af));	// 3915                  jge     short loc_119AF ;~ 01A2:19A6
cs=0x1a2;eip=0x0019a8; 	J(JMP(loc_11a19));	// 3916                  jmp     short loc_11A19 ;~ 01A2:19A8
loc_119aa:
	// 4632 
cs=0x1a2;eip=0x0019aa; 	T(CMP(cl, *(raddr(ss,bp+0))));	// 3920                  cmp     cl, [bp+0] ;~ 01A2:19AA
cs=0x1a2;eip=0x0019ad; 	J(JG(loc_11a19));	// 3921                  jg      short loc_11A19 ;~ 01A2:19AD
loc_119af:
	// 4633 
cs=0x1a2;eip=0x0019af; 	T(CMP(dh, *(raddr(ss,bp+1))));	// 3924                  cmp     dh, [bp+1] ;~ 01A2:19AF
cs=0x1a2;eip=0x0019b2; 	J(JGE(loc_119bb));	// 3925                  jge     short loc_119BB ;~ 01A2:19B2
cs=0x1a2;eip=0x0019b4; 	T(CMP(dh, *(raddr(ss,bp+3))));	// 3926                  cmp     dh, [bp+3] ;~ 01A2:19B4
cs=0x1a2;eip=0x0019b7; 	J(JGE(loc_119c0));	// 3927                  jge     short loc_119C0 ;~ 01A2:19B7
cs=0x1a2;eip=0x0019b9; 	J(JMP(loc_11a19));	// 3928                  jmp     short loc_11A19 ;~ 01A2:19B9
loc_119bb:
	// 4634 
cs=0x1a2;eip=0x0019bb; 	T(CMP(bl, *(raddr(ss,bp+1))));	// 3932                  cmp     bl, [bp+1] ;~ 01A2:19BB
cs=0x1a2;eip=0x0019be; 	J(JG(loc_11a19));	// 3933                  jg      short loc_11A19 ;~ 01A2:19BE
loc_119c0:
	// 4635 
cs=0x1a2;eip=0x0019c0; 	T(CMP(bh, *(raddr(ss,bp+4))));	// 3936                  cmp     bh, [bp+4] ;~ 01A2:19C0
cs=0x1a2;eip=0x0019c3; 	J(JGE(loc_119cc));	// 3937                  jge     short loc_119CC ;~ 01A2:19C3
cs=0x1a2;eip=0x0019c5; 	T(CMP(bh, *(raddr(ss,bp+5))));	// 3938                  cmp     bh, [bp+5] ;~ 01A2:19C5
cs=0x1a2;eip=0x0019c8; 	J(JGE(loc_119d1));	// 3939                  jge     short loc_119D1 ;~ 01A2:19C8
cs=0x1a2;eip=0x0019ca; 	J(JMP(loc_11a19));	// 3940                  jmp     short loc_11A19 ;~ 01A2:19CA
loc_119cc:
	// 4636 
cs=0x1a2;eip=0x0019cc; 	T(CMP(ch, *(raddr(ss,bp+4))));	// 3944                  cmp     ch, [bp+4] ;~ 01A2:19CC
cs=0x1a2;eip=0x0019cf; 	J(JG(loc_11a19));	// 3945                  jg      short loc_11A19 ;~ 01A2:19CF
loc_119d1:
	// 4637 
cs=0x1a2;eip=0x0019d1; 	T(CMP(si, 0x0FFFF));	// 3948                  cmp     si, 0FFFFh ;~ 01A2:19D1
cs=0x1a2;eip=0x0019d4; 	J(JZ(loc_11a0c));	// 3949                  jz      short loc_11A0C ;~ 01A2:19D4
cs=0x1a2;eip=0x0019d6; 	T(CMP(*(dw*)(raddr(ds,si+4)), 0));	// 3950                  cmp     word ptr [si+4], 0 ;~ 01A2:19D6
cs=0x1a2;eip=0x0019da; 	J(JNZ(loc_11a0c));	// 3951                  jnz     short loc_11A0C ;~ 01A2:19DA
cs=0x1a2;eip=0x0019dc; 	T(TEST(byte_1f769, 2));	// 3952                  test    ds:byte_1F769, 2 ;~ 01A2:19DC
cs=0x1a2;eip=0x0019e1; 	J(JNZ(loc_11a00));	// 3953                  jnz     short loc_11A00 ;~ 01A2:19E1
cs=0x1a2;eip=0x0019e3; 	T(TEST(byte_1f769, 1));	// 3954                  test    ds:byte_1F769, 1 ;~ 01A2:19E3
cs=0x1a2;eip=0x0019e8; 	J(JNZ(loc_11a00));	// 3955                  jnz     short loc_11A00 ;~ 01A2:19E8
cs=0x1a2;eip=0x0019ea; 	T(CMP(bl, *(raddr(ss,bp+3))));	// 3956                  cmp     bl, [bp+3] ;~ 01A2:19EA
cs=0x1a2;eip=0x0019ed; 	J(JC(loc_11a0a));	// 3957                  jb      short loc_11A0A ;~ 01A2:19ED
cs=0x1a2;eip=0x0019ef; 	T(CMP(dh, *(raddr(ss,bp+1))));	// 3958                  cmp     dh, [bp+1] ;~ 01A2:19EF
cs=0x1a2;eip=0x0019f2; 	J(JNC(loc_11a0a));	// 3959                  jnb     short loc_11A0A ;~ 01A2:19F2
loc_119f4:
	// 4638 
cs=0x1a2;eip=0x0019f4; 	T(CMP(ch, *(raddr(ss,bp+5))));	// 3962                  cmp     ch, [bp+5] ;~ 01A2:19F4
cs=0x1a2;eip=0x0019f7; 	J(JL(loc_11a0a));	// 3963                  jl      short loc_11A0A ;~ 01A2:19F7
cs=0x1a2;eip=0x0019f9; 	T(CMP(bh, *(raddr(ss,bp+4))));	// 3964                  cmp     bh, [bp+4] ;~ 01A2:19F9
cs=0x1a2;eip=0x0019fc; 	J(JG(loc_11a0a));	// 3965                  jg      short loc_11A0A ;~ 01A2:19FC
cs=0x1a2;eip=0x0019fe; 	J(JMP(loc_11a0c));	// 3966                  jmp     short loc_11A0C ;~ 01A2:19FE
loc_11a00:
	// 4639 
cs=0x1a2;eip=0x001a00; 	T(CMP(cl, *(raddr(ss,bp+2))));	// 3971                  cmp     cl, [bp+2] ;~ 01A2:1A00
cs=0x1a2;eip=0x001a03; 	J(JC(loc_11a0a));	// 3972                  jb      short loc_11A0A ;~ 01A2:1A03
cs=0x1a2;eip=0x001a05; 	T(CMP(dl, *(raddr(ss,bp+0))));	// 3973                  cmp     dl, [bp+0] ;~ 01A2:1A05
cs=0x1a2;eip=0x001a08; 	J(JC(loc_119f4));	// 3974                  jb      short loc_119F4 ;~ 01A2:1A08
loc_11a0a:
	// 4640 
cs=0x1a2;eip=0x001a0a; 	J(JMP(loc_11a19));	// 3978                  jmp     short loc_11A19 ;~ 01A2:1A0A
loc_11a0c:
	// 4641 
cs=0x1a2;eip=0x001a0c; 	T(MOV(ax, *(dw*)(raddr(ss,bp+0x16))));	// 3983                  mov     ax, [bp+16h] ;~ 01A2:1A0C
cs=0x1a2;eip=0x001a0f; 	X(word_1f3b4 = ax;);	// 3984                  mov     ds:word_1F3B4, ax ;~ 01A2:1A0F
cs=0x1a2;eip=0x001a12; 	T(MOV(di, *(dw*)(raddr(ss,bp+0x0A))));	// 3985                  mov     di, [bp+0Ah] ;~ 01A2:1A12
cs=0x1a2;eip=0x001a15; 	T(al = 0x0FE;);	// 3986                  mov     al, 0FEh ;~ 01A2:1A15
cs=0x1a2;eip=0x001a17; 	J(JMP(locret_11a28));	// 3987                  jmp     short locret_11A28 ;~ 01A2:1A17
loc_11a19:
	// 4642 
cs=0x1a2;eip=0x001a19; 	T(ADD(bp, 0x32));	// 3992                  add     bp, 32h ; '2' ;~ 01A2:1A19
cs=0x1a2;eip=0x001a1c; 	T(DEC(ah));	// 3993                  dec     ah ;~ 01A2:1A1C
cs=0x1a2;eip=0x001a1e; 	J(JS(loc_11a23));	// 3994                  js      short loc_11A23 ;~ 01A2:1A1E
cs=0x1a2;eip=0x001a20; 	J(JMP(loc_11998));	// 3995                  jmp     loc_11998 ;~ 01A2:1A20
loc_11a23:
	// 4643 
cs=0x1a2;eip=0x001a23; 	T(al = 0x0FF;);	// 4000                  mov     al, 0FFh ;~ 01A2:1A23
cs=0x1a2;eip=0x001a25; 	T(di = 0;);	// 4001                  mov     di, 0 ;~ 01A2:1A25
locret_11a28:
	// 4644 
cs=0x1a2;eip=0x001a28; 	J(RETN(0));	// 4004                  retn ;~ 01A2:1A28

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_11970: 	goto loc_11970;
        case m2c::kloc_11988: 	goto loc_11988;
        case m2c::kloc_11996: 	goto loc_11996;
        case m2c::kloc_11998: 	goto loc_11998;
        case m2c::kloc_119aa: 	goto loc_119aa;
        case m2c::kloc_119af: 	goto loc_119af;
        case m2c::kloc_119bb: 	goto loc_119bb;
        case m2c::kloc_119c0: 	goto loc_119c0;
        case m2c::kloc_119cc: 	goto loc_119cc;
        case m2c::kloc_119d1: 	goto loc_119d1;
        case m2c::kloc_119f4: 	goto loc_119f4;
        case m2c::kloc_11a00: 	goto loc_11a00;
        case m2c::kloc_11a0a: 	goto loc_11a0a;
        case m2c::kloc_11a0c: 	goto loc_11a0c;
        case m2c::kloc_11a19: 	goto loc_11a19;
        case m2c::kloc_11a23: 	goto loc_11a23;
        case m2c::klocret_11a28: 	goto locret_11a28;
        case m2c::ksub_11968: 	goto sub_11968;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_11a29(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_11a29:
    _begin:
cs=0x1a2;eip=0x001a29; 	T(si = word_1f1ce;);	// 4012                  mov     si, word_1F1CE ;~ 01A2:1A29
cs=0x1a2;eip=0x001a2d; 	T(MOV(al, *(raddr(ds,si+4))));	// 4013                  mov     al, [si+4] ;~ 01A2:1A2D
cs=0x1a2;eip=0x001a30; 	T(SHL(al, 1));	// 4014                  shl     al, 1 ;~ 01A2:1A30
cs=0x1a2;eip=0x001a32; 	T(SHL(al, 1));	// 4015                  shl     al, 1 ;~ 01A2:1A32
cs=0x1a2;eip=0x001a34; 	T(SHL(al, 1));	// 4016                  shl     al, 1 ;~ 01A2:1A34
cs=0x1a2;eip=0x001a36; 	X(byte_1f764 = al;);	// 4017                  mov     ds:byte_1F764, al ;~ 01A2:1A36
cs=0x1a2;eip=0x001a39; 	T(MOV(al, *(raddr(ds,si+5))));	// 4018                  mov     al, [si+5] ;~ 01A2:1A39
cs=0x1a2;eip=0x001a3c; 	T(SHL(al, 1));	// 4019                  shl     al, 1 ;~ 01A2:1A3C
cs=0x1a2;eip=0x001a3e; 	T(SHL(al, 1));	// 4020                  shl     al, 1 ;~ 01A2:1A3E
cs=0x1a2;eip=0x001a40; 	T(SHL(al, 1));	// 4021                  shl     al, 1 ;~ 01A2:1A40
cs=0x1a2;eip=0x001a42; 	X(byte_1f765 = al;);	// 4022                  mov     ds:byte_1F765, al ;~ 01A2:1A42
cs=0x1a2;eip=0x001a45; 	J(CALL(sub_11a49,0));	// 4023                  call    sub_11A49 ;~ 01A2:1A45
cs=0x1a2;eip=0x001a48; 	J(RETN(0));	// 4024                  retn ;~ 01A2:1A48

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_11a29: 	goto sub_11a29;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_11a49(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_11a49:
    _begin:
cs=0x1a2;eip=0x001a49; 	X(PUSH(es));	// 4033                  push    es ;~ 01A2:1A49
cs=0x1a2;eip=0x001a4a; 	X(PUSH(ax));	// 4034                  push    ax ;~ 01A2:1A4A
cs=0x1a2;eip=0x001a4b; 	X(PUSH(di));	// 4035                  push    di ;~ 01A2:1A4B
cs=0x1a2;eip=0x001a4c; 	X(PUSH(si));	// 4036                  push    si ;~ 01A2:1A4C
cs=0x1a2;eip=0x001a4d; 	T(ax = ds;);	// 4037                  mov     ax, ds ;~ 01A2:1A4D
cs=0x1a2;eip=0x001a4f; 	T(es = ax;);	// 4038                  mov     es, ax ;~ 01A2:1A4F
cs=0x1a2;eip=0x001a51; 	T(ax = 0x0BA0;);	// 4040                  mov     ax, 0BA0h ;~ 01A2:1A51
cs=0x1a2;eip=0x001a54; 	X(word_1f1be = ax;);	// 4041                  mov     word_1F1BE, ax ;~ 01A2:1A54
cs=0x1a2;eip=0x001a57; 	T(di = word_1f25e;);	// 4042                  mov     di, word_1F25E ;~ 01A2:1A57
cs=0x1a2;eip=0x001a5b; 	T(cx = 0x60;);	// 4043                  mov     cx, 60h ; '`' ;~ 01A2:1A5B
cs=0x1a2;eip=0x001a5e; 	T(XOR(ax, ax));	// 4044                  xor     ax, ax ;~ 01A2:1A5E
	// 4045                  rep stosw ;~ 01A2:1A60
cs=0x1a2;eip=0x001a60; 	X(	REP STOSW);	// 4045                  rep stosw ;~ 01A2:1A60
cs=0x1a2;eip=0x001a62; 	X(POP(si));	// 4046                  pop     si ;~ 01A2:1A62
cs=0x1a2;eip=0x001a63; 	X(POP(di));	// 4047                  pop     di ;~ 01A2:1A63
cs=0x1a2;eip=0x001a64; 	X(POP(ax));	// 4048                  pop     ax ;~ 01A2:1A64
cs=0x1a2;eip=0x001a65; 	X(POP(es));	// 4049                  pop     es ;~ 01A2:1A65
cs=0x1a2;eip=0x001a66; 	J(RETN(0));	// 4051                  retn ;~ 01A2:1A66

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_11a49: 	goto sub_11a49;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_11a6f(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_11a6f:
    _begin:
cs=0x1a2;eip=0x001a6f; 	X(PUSH(ax));	// 4068                  push    ax ;~ 01A2:1A6F
cs=0x1a2;eip=0x001a70; 	X(PUSH(bx));	// 4069                  push    bx ;~ 01A2:1A70
cs=0x1a2;eip=0x001a71; 	X(PUSH(dx));	// 4070                  push    dx ;~ 01A2:1A71
cs=0x1a2;eip=0x001a72; 	X(PUSH(cx));	// 4071                  push    cx ;~ 01A2:1A72
cs=0x1a2;eip=0x001a73; 	X(PUSH(bp));	// 4072                  push    bp ;~ 01A2:1A73
cs=0x1a2;eip=0x001a74; 	X(PUSH(es));	// 4073                  push    es ;~ 01A2:1A74
cs=0x1a2;eip=0x001a75; 	X(PUSH(si));	// 4074                  push    si ;~ 01A2:1A75
cs=0x1a2;eip=0x001a76; 	T(MOV(bx, *(dw*)(raddr(ds,si+8))));	// 4075                  mov     bx, [si+8] ;~ 01A2:1A76
cs=0x1a2;eip=0x001a79; 	T(XOR(ah, ah));	// 4076                  xor     ah, ah ;~ 01A2:1A79
cs=0x1a2;eip=0x001a7b; 	T(MOV(al, *(raddr(ds,bx+0x14))));	// 4077                  mov     al, [bx+14h] ;~ 01A2:1A7B
cs=0x1a2;eip=0x001a7e; 	T(SHL(ax, 1));	// 4078                  shl     ax, 1 ;~ 01A2:1A7E
cs=0x1a2;eip=0x001a80; 	T(bp = word_1f25e;);	// 4079                  mov     bp, word_1F25E ;~ 01A2:1A80
cs=0x1a2;eip=0x001a84; 	T(ADD(bp, ax));	// 4080                  add     bp, ax ;~ 01A2:1A84
cs=0x1a2;eip=0x001a86; 	T(MOV(ax, *(dw*)(raddr(ds,bp+0))));	// 4081                  mov     ax, ds:[bp+0] ;~ 01A2:1A86
cs=0x1a2;eip=0x001a8a; 	T(OR(ax, ax));	// 4082                  or      ax, ax ;~ 01A2:1A8A
cs=0x1a2;eip=0x001a8c; 	J(JNS(loc_11a91));	// 4083                  jns     short loc_11A91 ;~ 01A2:1A8C
cs=0x1a2;eip=0x001a8e; 	J(JMP(loc_11c68));	// 4085                  jmp     loc_11C68 ;~ 01A2:1A8E
loc_11a91:
	// 4645 
cs=0x1a2;eip=0x001a91; 	J(JZ(loc_11a99));	// 4089                  jz      short loc_11A99 ;~ 01A2:1A91
cs=0x1a2;eip=0x001a93; 	X(word_1f732 = ax;);	// 4090                  mov     ds:word_1F732, ax ;~ 01A2:1A93
cs=0x1a2;eip=0x001a96; 	J(JMP(loc_11c5a));	// 4091                  jmp     loc_11C5A ;~ 01A2:1A96
loc_11a99:
	// 4646 
cs=0x1a2;eip=0x001a99; 	T(ax = word_1f1be;);	// 4095                  mov     ax, word_1F1BE ;~ 01A2:1A99
cs=0x1a2;eip=0x001a9c; 	X(MOV(*(dw*)(raddr(ds,bp+0)), ax));	// 4096                  mov     ds:[bp+0], ax ;~ 01A2:1A9C
cs=0x1a2;eip=0x001aa0; 	T(bp = ax;);	// 4097                  mov     bp, ax ;~ 01A2:1AA0
cs=0x1a2;eip=0x001aa2; 	X(MOV(*(dw*)(raddr(ds,bp+0)), 0x100));	// 4098                  mov     word ptr ds:[bp+0], 100h ;~ 01A2:1AA2
cs=0x1a2;eip=0x001aa8; 	T(cl = dl;);	// 4099                  mov     cl, dl ;~ 01A2:1AA8
cs=0x1a2;eip=0x001aaa; 	T(MOV(ax, *(dw*)(raddr(es,di+0x10))));	// 4100                  mov     ax, es:[di+10h] ;~ 01A2:1AAA
cs=0x1a2;eip=0x001aae; 	T(SUB(cl, al));	// 4101                  sub     cl, al ;~ 01A2:1AAE
cs=0x1a2;eip=0x001ab0; 	T(INC(cl));	// 4102                  inc     cl ;~ 01A2:1AB0
cs=0x1a2;eip=0x001ab2; 	T(bl = dh;);	// 4103                  mov     bl, dh ;~ 01A2:1AB2
cs=0x1a2;eip=0x001ab4; 	T(MOV(ax, *(dw*)(raddr(es,di+0x12))));	// 4104                  mov     ax, es:[di+12h] ;~ 01A2:1AB4
cs=0x1a2;eip=0x001ab8; 	T(SUB(bl, al));	// 4105                  sub     bl, al ;~ 01A2:1AB8
cs=0x1a2;eip=0x001aba; 	T(INC(bl));	// 4106                  inc     bl ;~ 01A2:1ABA
cs=0x1a2;eip=0x001abc; 	T(bh = ch;);	// 4107                  mov     bh, ch ;~ 01A2:1ABC
cs=0x1a2;eip=0x001abe; 	T(MOV(ax, *(dw*)(raddr(es,di+0x14))));	// 4108                  mov     ax, es:[di+14h] ;~ 01A2:1ABE
cs=0x1a2;eip=0x001ac2; 	T(ADD(bh, al));	// 4109                  add     bh, al ;~ 01A2:1AC2
cs=0x1a2;eip=0x001ac4; 	T(di = word_1f19a;);	// 4110                  mov     di, word_1F19A ;~ 01A2:1AC4
cs=0x1a2;eip=0x001ac8; 	T(ax = word_1f394;);	// 4111                  mov     ax, ds:word_1F394 ;~ 01A2:1AC8
cs=0x1a2;eip=0x001acb; 	X(byte_1f865 = al;);	// 4112                  mov     ds:byte_1F865, al ;~ 01A2:1ACB
cs=0x1a2;eip=0x001ace; 	X(word_1f732 = bp;);	// 4113                  mov     ds:word_1F732, bp ;~ 01A2:1ACE
cs=0x1a2;eip=0x001ad2; 	T(ADD(bp, 2));	// 4114                  add     bp, 2 ;~ 01A2:1AD2
cs=0x1a2;eip=0x001ad5; 	T(CMP(bh, 0x0F0));	// 4115                  cmp     bh, 0F0h ;~ 01A2:1AD5
cs=0x1a2;eip=0x001ad8; 	J(JNC(loc_11afe));	// 4116                  jnb     short loc_11AFE ;~ 01A2:1AD8
cs=0x1a2;eip=0x001ada; 	T(CMP(dl, byte_1f764));	// 4117                  cmp     dl, ds:byte_1F764 ;~ 01A2:1ADA
cs=0x1a2;eip=0x001ade; 	J(JGE(loc_11afe));	// 4118                  jge     short loc_11AFE ;~ 01A2:1ADE
cs=0x1a2;eip=0x001ae0; 	T(CMP(dh, byte_1f765));	// 4119                  cmp     dh, ds:byte_1F765 ;~ 01A2:1AE0
cs=0x1a2;eip=0x001ae4; 	J(JGE(loc_11afe));	// 4120                  jge     short loc_11AFE ;~ 01A2:1AE4
cs=0x1a2;eip=0x001ae6; 	T(CMP(bl, byte_1f750));	// 4121                  cmp     bl, ds:byte_1F750 ;~ 01A2:1AE6
cs=0x1a2;eip=0x001aea; 	J(JG(loc_11af2));	// 4122                  jg      short loc_11AF2 ;~ 01A2:1AEA
cs=0x1a2;eip=0x001aec; 	T(CMP(cl, byte_1f74f));	// 4123                  cmp     cl, ds:byte_1F74F ;~ 01A2:1AEC
cs=0x1a2;eip=0x001af0; 	J(JLE(loc_11afe));	// 4124                  jle     short loc_11AFE ;~ 01A2:1AF0
loc_11af2:
	// 4647 
cs=0x1a2;eip=0x001af2; 	T(CMP(cl, byte_1f742));	// 4127                  cmp     cl, ds:byte_1F742 ;~ 01A2:1AF2
cs=0x1a2;eip=0x001af6; 	J(JL(loc_11afe));	// 4128                  jl      short loc_11AFE ;~ 01A2:1AF6
cs=0x1a2;eip=0x001af8; 	T(CMP(bl, byte_1f741));	// 4129                  cmp     bl, ds:byte_1F741 ;~ 01A2:1AF8
cs=0x1a2;eip=0x001afc; 	J(JGE(loc_11b08));	// 4130                  jge     short loc_11B08 ;~ 01A2:1AFC
loc_11afe:
	// 4648 
cs=0x1a2;eip=0x001afe; 	T(di = word_1f732;);	// 4134                  mov     di, ds:word_1F732 ;~ 01A2:1AFE
cs=0x1a2;eip=0x001b02; 	X(MOV(*(raddr(ds,di)), 0x0FF));	// 4135                  mov     byte ptr [di], 0FFh ;~ 01A2:1B02
cs=0x1a2;eip=0x001b05; 	J(JMP(loc_11c56));	// 4136                  jmp     loc_11C56 ;~ 01A2:1B05
loc_11b08:
	// 4649 
cs=0x1a2;eip=0x001b08; 	T(ax = word_1f1c6;);	// 4140                  mov     ax, word_1F1C6 ;~ 01A2:1B08
cs=0x1a2;eip=0x001b0b; 	T(OR(ax, ax));	// 4141                  or      ax, ax ;~ 01A2:1B0B
cs=0x1a2;eip=0x001b0d; 	J(JNZ(loc_11b12));	// 4142                  jnz     short loc_11B12 ;~ 01A2:1B0D
cs=0x1a2;eip=0x001b0f; 	J(JMP(loc_11bcd));	// 4143                  jmp     loc_11BCD ;~ 01A2:1B0F
loc_11b12:
	// 4650 
cs=0x1a2;eip=0x001b12; 	T(CMP(cl, 8));	// 4147                  cmp     cl, 8 ;~ 01A2:1B12
cs=0x1a2;eip=0x001b15; 	J(JL(loc_11b1f));	// 4148                  jl      short loc_11B1F ;~ 01A2:1B15
cs=0x1a2;eip=0x001b17; 	T(CMP(bl, 8));	// 4149                  cmp     bl, 8 ;~ 01A2:1B17
cs=0x1a2;eip=0x001b1a; 	J(JL(loc_11b1f));	// 4150                  jl      short loc_11B1F ;~ 01A2:1B1A
cs=0x1a2;eip=0x001b1c; 	J(JMP(loc_11bcd));	// 4151                  jmp     loc_11BCD ;~ 01A2:1B1C
loc_11b1f:
	// 4651 
cs=0x1a2;eip=0x001b1f; __disp=ax;
	J(return __dispatch_call(__disp, _state););	// 4156                  jmp     ax ;~ 01A2:1B1F
ret_1a2_1b21:
	// 4652 
cs=0x1a2;eip=0x001b21; 	T(CMP(dl, byte_1f760));	// 4158                  cmp     dl, ds:byte_1F760 ;~ 01A2:1B21
cs=0x1a2;eip=0x001b25; 	J(JGE(loc_11b2f));	// 4159                  jge     short loc_11B2F ;~ 01A2:1B25
cs=0x1a2;eip=0x001b27; 	T(CMP(dl, byte_1f762));	// 4160                  cmp     dl, ds:byte_1F762 ;~ 01A2:1B27
cs=0x1a2;eip=0x001b2b; 	J(JGE(loc_11b35));	// 4161                  jge     short loc_11B35 ;~ 01A2:1B2B
cs=0x1a2;eip=0x001b2d; 	J(JMP(loc_11b49));	// 4162                  jmp     short loc_11B49 ;~ 01A2:1B2D
loc_11b2f:
	// 4653 
cs=0x1a2;eip=0x001b2f; 	T(CMP(cl, byte_1f760));	// 4166                  cmp     cl, ds:byte_1F760 ;~ 01A2:1B2F
cs=0x1a2;eip=0x001b33; 	J(JG(loc_11b49));	// 4167                  jg      short loc_11B49 ;~ 01A2:1B33
loc_11b35:
	// 4654 
cs=0x1a2;eip=0x001b35; 	T(CMP(dh, byte_1f761));	// 4170                  cmp     dh, ds:byte_1F761 ;~ 01A2:1B35
cs=0x1a2;eip=0x001b39; 	J(JGE(loc_11b43));	// 4171                  jge     short loc_11B43 ;~ 01A2:1B39
cs=0x1a2;eip=0x001b3b; 	T(CMP(dh, byte_1f763));	// 4172                  cmp     dh, ds:byte_1F763 ;~ 01A2:1B3B
cs=0x1a2;eip=0x001b3f; 	J(JGE(loc_11afe));	// 4173                  jge     short loc_11AFE ;~ 01A2:1B3F
cs=0x1a2;eip=0x001b41; 	J(JMP(loc_11b49));	// 4174                  jmp     short loc_11B49 ;~ 01A2:1B41
loc_11b43:
	// 4655 
cs=0x1a2;eip=0x001b43; 	T(CMP(bl, byte_1f761));	// 4178                  cmp     bl, ds:byte_1F761 ;~ 01A2:1B43
cs=0x1a2;eip=0x001b47; 	J(JLE(loc_11afe));	// 4179                  jle     short loc_11AFE ;~ 01A2:1B47
loc_11b49:
	// 4656 
cs=0x1a2;eip=0x001b49; 	T(CMP(dl, byte_1f75c));	// 4183                  cmp     dl, ds:byte_1F75C ;~ 01A2:1B49
cs=0x1a2;eip=0x001b4d; 	J(JGE(loc_11b57));	// 4184                  jge     short loc_11B57 ;~ 01A2:1B4D
cs=0x1a2;eip=0x001b4f; 	T(CMP(dl, byte_1f75e));	// 4185                  cmp     dl, ds:byte_1F75E ;~ 01A2:1B4F
cs=0x1a2;eip=0x001b53; 	J(JGE(loc_11b5d));	// 4186                  jge     short loc_11B5D ;~ 01A2:1B53
cs=0x1a2;eip=0x001b55; 	J(JMP(loc_11b71));	// 4187                  jmp     short loc_11B71 ;~ 01A2:1B55
loc_11b57:
	// 4657 
cs=0x1a2;eip=0x001b57; 	T(CMP(cl, byte_1f75c));	// 4191                  cmp     cl, ds:byte_1F75C ;~ 01A2:1B57
cs=0x1a2;eip=0x001b5b; 	J(JG(loc_11b71));	// 4192                  jg      short loc_11B71 ;~ 01A2:1B5B
loc_11b5d:
	// 4658 
cs=0x1a2;eip=0x001b5d; 	T(CMP(dh, byte_1f75d));	// 4195                  cmp     dh, ds:byte_1F75D ;~ 01A2:1B5D
cs=0x1a2;eip=0x001b61; 	J(JGE(loc_11b6b));	// 4196                  jge     short loc_11B6B ;~ 01A2:1B61
cs=0x1a2;eip=0x001b63; 	T(CMP(dh, byte_1f75f));	// 4197                  cmp     dh, ds:byte_1F75F ;~ 01A2:1B63
cs=0x1a2;eip=0x001b67; 	J(JGE(loc_11afe));	// 4198                  jge     short loc_11AFE ;~ 01A2:1B67
cs=0x1a2;eip=0x001b69; 	J(JMP(loc_11b71));	// 4199                  jmp     short loc_11B71 ;~ 01A2:1B69
loc_11b6b:
	// 4659 
cs=0x1a2;eip=0x001b6b; 	T(CMP(bl, byte_1f75d));	// 4203                  cmp     bl, ds:byte_1F75D ;~ 01A2:1B6B
cs=0x1a2;eip=0x001b6f; 	J(JLE(loc_11afe));	// 4204                  jle     short loc_11AFE ;~ 01A2:1B6F
loc_11b71:
	// 4660 
cs=0x1a2;eip=0x001b71; 	T(CMP(dl, byte_1f758));	// 4208                  cmp     dl, ds:byte_1F758 ;~ 01A2:1B71
cs=0x1a2;eip=0x001b75; 	J(JGE(loc_11b7f));	// 4209                  jge     short loc_11B7F ;~ 01A2:1B75
cs=0x1a2;eip=0x001b77; 	T(CMP(dl, byte_1f75a));	// 4210                  cmp     dl, ds:byte_1F75A ;~ 01A2:1B77
cs=0x1a2;eip=0x001b7b; 	J(JGE(loc_11b85));	// 4211                  jge     short loc_11B85 ;~ 01A2:1B7B
cs=0x1a2;eip=0x001b7d; 	J(JMP(loc_11b9f));	// 4212                  jmp     short loc_11B9F ;~ 01A2:1B7D
loc_11b7f:
	// 4661 
cs=0x1a2;eip=0x001b7f; 	T(CMP(cl, byte_1f758));	// 4216                  cmp     cl, ds:byte_1F758 ;~ 01A2:1B7F
cs=0x1a2;eip=0x001b83; 	J(JG(loc_11b9f));	// 4217                  jg      short loc_11B9F ;~ 01A2:1B83
loc_11b85:
	// 4662 
cs=0x1a2;eip=0x001b85; 	T(CMP(dh, byte_1f759));	// 4220                  cmp     dh, ds:byte_1F759 ;~ 01A2:1B85
cs=0x1a2;eip=0x001b89; 	J(JGE(loc_11b96));	// 4221                  jge     short loc_11B96 ;~ 01A2:1B89
cs=0x1a2;eip=0x001b8b; 	T(CMP(dh, byte_1f75b));	// 4222                  cmp     dh, ds:byte_1F75B ;~ 01A2:1B8B
cs=0x1a2;eip=0x001b8f; 	J(JL(loc_11b94));	// 4223                  jl      short loc_11B94 ;~ 01A2:1B8F
cs=0x1a2;eip=0x001b91; 	J(JMP(loc_11afe));	// 4224                  jmp     loc_11AFE ;~ 01A2:1B91
loc_11b94:
	// 4663 
cs=0x1a2;eip=0x001b94; 	J(JMP(loc_11b9f));	// 4228                  jmp     short loc_11B9F ;~ 01A2:1B94
loc_11b96:
	// 4664 
cs=0x1a2;eip=0x001b96; 	T(CMP(bl, byte_1f759));	// 4232                  cmp     bl, ds:byte_1F759 ;~ 01A2:1B96
cs=0x1a2;eip=0x001b9a; 	J(JG(loc_11b9f));	// 4233                  jg      short loc_11B9F ;~ 01A2:1B9A
cs=0x1a2;eip=0x001b9c; 	J(JMP(loc_11afe));	// 4234                  jmp     loc_11AFE ;~ 01A2:1B9C
loc_11b9f:
	// 4665 
cs=0x1a2;eip=0x001b9f; 	T(CMP(dl, byte_1f754));	// 4239                  cmp     dl, ds:byte_1F754 ;~ 01A2:1B9F
cs=0x1a2;eip=0x001ba3; 	J(JGE(loc_11bad));	// 4240                  jge     short loc_11BAD ;~ 01A2:1BA3
cs=0x1a2;eip=0x001ba5; 	T(CMP(dl, byte_1f756));	// 4241                  cmp     dl, ds:byte_1F756 ;~ 01A2:1BA5
cs=0x1a2;eip=0x001ba9; 	J(JGE(loc_11bb3));	// 4242                  jge     short loc_11BB3 ;~ 01A2:1BA9
cs=0x1a2;eip=0x001bab; 	J(JMP(loc_11bcd));	// 4243                  jmp     short loc_11BCD ;~ 01A2:1BAB
loc_11bad:
	// 4666 
cs=0x1a2;eip=0x001bad; 	T(CMP(cl, byte_1f754));	// 4247                  cmp     cl, ds:byte_1F754 ;~ 01A2:1BAD
cs=0x1a2;eip=0x001bb1; 	J(JG(loc_11bcd));	// 4248                  jg      short loc_11BCD ;~ 01A2:1BB1
loc_11bb3:
	// 4667 
cs=0x1a2;eip=0x001bb3; 	T(CMP(dh, byte_1f755));	// 4251                  cmp     dh, ds:byte_1F755 ;~ 01A2:1BB3
cs=0x1a2;eip=0x001bb7; 	J(JGE(loc_11bc4));	// 4252                  jge     short loc_11BC4 ;~ 01A2:1BB7
cs=0x1a2;eip=0x001bb9; 	T(CMP(dh, byte_1f757));	// 4253                  cmp     dh, ds:byte_1F757 ;~ 01A2:1BB9
cs=0x1a2;eip=0x001bbd; 	J(JL(loc_11bc2));	// 4254                  jl      short loc_11BC2 ;~ 01A2:1BBD
cs=0x1a2;eip=0x001bbf; 	J(JMP(loc_11afe));	// 4255                  jmp     loc_11AFE ;~ 01A2:1BBF
loc_11bc2:
	// 4668 
cs=0x1a2;eip=0x001bc2; 	J(JMP(loc_11bcd));	// 4259                  jmp     short loc_11BCD ;~ 01A2:1BC2
loc_11bc4:
	// 4669 
cs=0x1a2;eip=0x001bc4; 	T(CMP(bl, byte_1f755));	// 4263                  cmp     bl, ds:byte_1F755 ;~ 01A2:1BC4
cs=0x1a2;eip=0x001bc8; 	J(JG(loc_11bcd));	// 4264                  jg      short loc_11BCD ;~ 01A2:1BC8
cs=0x1a2;eip=0x001bca; 	J(JMP(loc_11afe));	// 4265                  jmp     loc_11AFE ;~ 01A2:1BCA
loc_11bcd:
	// 4670 
cs=0x1a2;eip=0x001bcd; 	X(word_1f72c = si;);	// 4270                  mov     ds:word_1F72C, si ;~ 01A2:1BCD
loc_11bd1:
	// 4671 
cs=0x1a2;eip=0x001bd1; 	T(CMP(*(dw*)(raddr(ds,di)), 0));	// 4273                  cmp     word ptr [di], 0 ;~ 01A2:1BD1
cs=0x1a2;eip=0x001bd4; 	J(JS(loc_11c4a));	// 4274                  js      short loc_11C4A ;~ 01A2:1BD4
cs=0x1a2;eip=0x001bd6; 	T(ax = word_1f72c;);	// 4275                  mov     ax, ds:word_1F72C ;~ 01A2:1BD6
cs=0x1a2;eip=0x001bd9; 	T(CMP(ax, *(dw*)(raddr(ds,di+0x0A))));	// 4276                  cmp     ax, [di+0Ah] ;~ 01A2:1BD9
cs=0x1a2;eip=0x001bdc; 	J(JZ(loc_11c4a));	// 4277                  jz      short loc_11C4A ;~ 01A2:1BDC
cs=0x1a2;eip=0x001bde; 	T(CMP(dl, *(raddr(ds,di))));	// 4278                  cmp     dl, [di] ;~ 01A2:1BDE
cs=0x1a2;eip=0x001be0; 	J(JGE(loc_11be9));	// 4279                  jge     short loc_11BE9 ;~ 01A2:1BE0
cs=0x1a2;eip=0x001be2; 	T(CMP(dl, *(raddr(ds,di+2))));	// 4280                  cmp     dl, [di+2] ;~ 01A2:1BE2
cs=0x1a2;eip=0x001be5; 	J(JGE(loc_11bed));	// 4281                  jge     short loc_11BED ;~ 01A2:1BE5
cs=0x1a2;eip=0x001be7; 	J(JMP(loc_11c4a));	// 4282                  jmp     short loc_11C4A ;~ 01A2:1BE7
loc_11be9:
	// 4672 
cs=0x1a2;eip=0x001be9; 	T(CMP(cl, *(raddr(ds,di))));	// 4286                  cmp     cl, [di] ;~ 01A2:1BE9
cs=0x1a2;eip=0x001beb; 	J(JG(loc_11c4a));	// 4287                  jg      short loc_11C4A ;~ 01A2:1BEB
loc_11bed:
	// 4673 
cs=0x1a2;eip=0x001bed; 	T(CMP(dh, *(raddr(ds,di+1))));	// 4290                  cmp     dh, [di+1] ;~ 01A2:1BED
cs=0x1a2;eip=0x001bf0; 	J(JGE(loc_11bf9));	// 4291                  jge     short loc_11BF9 ;~ 01A2:1BF0
cs=0x1a2;eip=0x001bf2; 	T(CMP(dh, *(raddr(ds,di+3))));	// 4292                  cmp     dh, [di+3] ;~ 01A2:1BF2
cs=0x1a2;eip=0x001bf5; 	J(JGE(loc_11bfe));	// 4293                  jge     short loc_11BFE ;~ 01A2:1BF5
cs=0x1a2;eip=0x001bf7; 	J(JMP(loc_11c4a));	// 4294                  jmp     short loc_11C4A ;~ 01A2:1BF7
loc_11bf9:
	// 4674 
cs=0x1a2;eip=0x001bf9; 	T(CMP(bl, *(raddr(ds,di+1))));	// 4298                  cmp     bl, [di+1] ;~ 01A2:1BF9
cs=0x1a2;eip=0x001bfc; 	J(JG(loc_11c4a));	// 4299                  jg      short loc_11C4A ;~ 01A2:1BFC
loc_11bfe:
	// 4675 
cs=0x1a2;eip=0x001bfe; 	T(CMP(bh, *(raddr(ds,di+4))));	// 4302                  cmp     bh, [di+4] ;~ 01A2:1BFE
cs=0x1a2;eip=0x001c01; 	J(JGE(loc_11c0a));	// 4303                  jge     short loc_11C0A ;~ 01A2:1C01
cs=0x1a2;eip=0x001c03; 	T(CMP(bh, *(raddr(ds,di+5))));	// 4304                  cmp     bh, [di+5] ;~ 01A2:1C03
cs=0x1a2;eip=0x001c06; 	J(JGE(loc_11c0f));	// 4305                  jge     short loc_11C0F ;~ 01A2:1C06
cs=0x1a2;eip=0x001c08; 	J(JMP(loc_11c4a));	// 4306                  jmp     short loc_11C4A ;~ 01A2:1C08
loc_11c0a:
	// 4676 
cs=0x1a2;eip=0x001c0a; 	T(CMP(ch, *(raddr(ds,di+4))));	// 4310                  cmp     ch, [di+4] ;~ 01A2:1C0A
cs=0x1a2;eip=0x001c0d; 	J(JG(loc_11c4a));	// 4311                  jg      short loc_11C4A ;~ 01A2:1C0D
loc_11c0f:
	// 4677 
cs=0x1a2;eip=0x001c0f; 	T(CMP(*(raddr(ds,di+0x14)), 0));	// 4314                  cmp     byte ptr [di+14h], 0 ;~ 01A2:1C0F
cs=0x1a2;eip=0x001c13; 	J(JNS(loc_11c1e));	// 4315                  jns     short loc_11C1E ;~ 01A2:1C13
loc_11c15:
	// 4678 
cs=0x1a2;eip=0x001c15; 	T(di = word_1f732;);	// 4318                  mov     di, ds:word_1F732 ;~ 01A2:1C15
cs=0x1a2;eip=0x001c19; 	X(MOV(*(raddr(ds,di)), 0x0FD));	// 4319                  mov     byte ptr [di], 0FDh ;~ 01A2:1C19
cs=0x1a2;eip=0x001c1c; 	J(JMP(loc_11c56));	// 4320                  jmp     short loc_11C56 ;~ 01A2:1C1C
loc_11c1e:
	// 4679 
cs=0x1a2;eip=0x001c1e; 	T(MOV(si, *(dw*)(raddr(ds,di+0x0A))));	// 4324                  mov     si, [di+0Ah] ;~ 01A2:1C1E
cs=0x1a2;eip=0x001c21; 	T(TEST(*(raddr(ds,si+0x0F)), 4));	// 4325                  test    byte ptr [si+0Fh], 4 ;~ 01A2:1C21
cs=0x1a2;eip=0x001c25; 	J(JNZ(loc_11c15));	// 4326                  jnz     short loc_11C15 ;~ 01A2:1C25
cs=0x1a2;eip=0x001c27; 	T(DEC(bh));	// 4327                  dec     bh ;~ 01A2:1C27
cs=0x1a2;eip=0x001c29; 	X(MOV(*(dw*)(raddr(ds,bp+0)), si));	// 4328                  mov     ds:[bp+0], si ;~ 01A2:1C29
cs=0x1a2;eip=0x001c2d; 	T(ADD(bp, 2));	// 4329                  add     bp, 2 ;~ 01A2:1C2D
cs=0x1a2;eip=0x001c30; 	T(CMP(bp, 0x10B4));	// 4330                  cmp     bp, 10B4h ;~ 01A2:1C30
cs=0x1a2;eip=0x001c34; 	J(JNZ(loc_11c38));	// 4331                  jnz     short loc_11C38 ;~ 01A2:1C34
loc_11c36:
	// 4680 
cs=0x1a2;eip=0x001c36; 	J(JMP(loc_11c36));	// 4334                  jmp     short loc_11C36 ;~ 01A2:1C36
loc_11c38:
	// 4681 
cs=0x1a2;eip=0x001c38; 	T(CMP(bh, *(raddr(ds,di+5))));	// 4338                  cmp     bh, [di+5] ;~ 01A2:1C38
cs=0x1a2;eip=0x001c3b; 	J(JGE(loc_11c42));	// 4339                  jge     short loc_11C42 ;~ 01A2:1C3B
cs=0x1a2;eip=0x001c3d; 	X(OR(*(dw*)(raddr(ds,bp-2)), 1));	// 4340                  or      word ptr ds:[bp-2], 1 ;~ 01A2:1C3D
loc_11c42:
	// 4682 
cs=0x1a2;eip=0x001c42; 	T(si = word_1f732;);	// 4343                  mov     si, ds:word_1F732 ;~ 01A2:1C42
cs=0x1a2;eip=0x001c46; 	X(INC(*(raddr(ds,si))));	// 4344                  inc     byte ptr [si] ;~ 01A2:1C46
cs=0x1a2;eip=0x001c48; 	T(INC(bh));	// 4345                  inc     bh ;~ 01A2:1C48
loc_11c4a:
	// 4683 
cs=0x1a2;eip=0x001c4a; 	T(ADD(di, 0x32));	// 4349                  add     di, 32h ; '2' ;~ 01A2:1C4A
cs=0x1a2;eip=0x001c4d; 	X(DEC(byte_1f865));	// 4350                  dec     ds:byte_1F865 ;~ 01A2:1C4D
cs=0x1a2;eip=0x001c51; 	J(JZ(loc_11c56));	// 4351                  jz      short loc_11C56 ;~ 01A2:1C51
cs=0x1a2;eip=0x001c53; 	J(JMP(loc_11bd1));	// 4352                  jmp     loc_11BD1 ;~ 01A2:1C53
loc_11c56:
	// 4684 
cs=0x1a2;eip=0x001c56; 	X(word_1f1be = bp;);	// 4357                  mov     word_1F1BE, bp ;~ 01A2:1C56
loc_11c5a:
	// 4685 
cs=0x1a2;eip=0x001c5a; 	T(OR(al, 1));	// 4360                  or      al, 1 ;~ 01A2:1C5A
cs=0x1a2;eip=0x001c5c; 	X(POP(si));	// 4361                  pop     si ;~ 01A2:1C5C
cs=0x1a2;eip=0x001c5d; 	X(POP(es));	// 4362                  pop     es ;~ 01A2:1C5D
cs=0x1a2;eip=0x001c5e; 	X(POP(bp));	// 4364                  pop     bp ;~ 01A2:1C5E
cs=0x1a2;eip=0x001c5f; 	X(POP(cx));	// 4365                  pop     cx ;~ 01A2:1C5F
cs=0x1a2;eip=0x001c60; 	X(POP(dx));	// 4366                  pop     dx ;~ 01A2:1C60
cs=0x1a2;eip=0x001c61; 	X(POP(bx));	// 4367                  pop     bx ;~ 01A2:1C61
cs=0x1a2;eip=0x001c62; 	X(POP(ax));	// 4368                  pop     ax ;~ 01A2:1C62
cs=0x1a2;eip=0x001c63; 	T(di = word_1f732;);	// 4369                  mov     di, ds:word_1F732 ;~ 01A2:1C63
cs=0x1a2;eip=0x001c67; 	J(RETN(0));	// 4370                  retn ;~ 01A2:1C67
loc_11c68:
	// 4686 
cs=0x1a2;eip=0x001c68; 	T(XOR(ax, ax));	// 4375                  xor     ax, ax ;~ 01A2:1C68
cs=0x1a2;eip=0x001c6a; 	X(POP(si));	// 4376                  pop     si ;~ 01A2:1C6A
cs=0x1a2;eip=0x001c6b; 	X(POP(es));	// 4377                  pop     es ;~ 01A2:1C6B
cs=0x1a2;eip=0x001c6c; 	X(POP(bp));	// 4378                  pop     bp ;~ 01A2:1C6C
cs=0x1a2;eip=0x001c6d; 	X(POP(cx));	// 4379                  pop     cx ;~ 01A2:1C6D
cs=0x1a2;eip=0x001c6e; 	X(POP(dx));	// 4380                  pop     dx ;~ 01A2:1C6E
cs=0x1a2;eip=0x001c6f; 	X(POP(bx));	// 4381                  pop     bx ;~ 01A2:1C6F
cs=0x1a2;eip=0x001c70; 	X(POP(ax));	// 4382                  pop     ax ;~ 01A2:1C70
cs=0x1a2;eip=0x001c71; 	T(di = word_1f732;);	// 4383                  mov     di, ds:word_1F732 ;~ 01A2:1C71
cs=0x1a2;eip=0x001c75; 	J(RETN(0));	// 4384                  retn ;~ 01A2:1C75

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_11a91: 	goto loc_11a91;
        case m2c::kloc_11a99: 	goto loc_11a99;
        case m2c::kloc_11af2: 	goto loc_11af2;
        case m2c::kloc_11afe: 	goto loc_11afe;
        case m2c::kloc_11b08: 	goto loc_11b08;
        case m2c::kloc_11b12: 	goto loc_11b12;
        case m2c::kloc_11b1f: 	goto loc_11b1f;
        case m2c::kloc_11b2f: 	goto loc_11b2f;
        case m2c::kloc_11b35: 	goto loc_11b35;
        case m2c::kloc_11b43: 	goto loc_11b43;
        case m2c::kloc_11b49: 	goto loc_11b49;
        case m2c::kloc_11b57: 	goto loc_11b57;
        case m2c::kloc_11b5d: 	goto loc_11b5d;
        case m2c::kloc_11b6b: 	goto loc_11b6b;
        case m2c::kloc_11b71: 	goto loc_11b71;
        case m2c::kloc_11b7f: 	goto loc_11b7f;
        case m2c::kloc_11b85: 	goto loc_11b85;
        case m2c::kloc_11b94: 	goto loc_11b94;
        case m2c::kloc_11b96: 	goto loc_11b96;
        case m2c::kloc_11b9f: 	goto loc_11b9f;
        case m2c::kloc_11bad: 	goto loc_11bad;
        case m2c::kloc_11bb3: 	goto loc_11bb3;
        case m2c::kloc_11bc2: 	goto loc_11bc2;
        case m2c::kloc_11bc4: 	goto loc_11bc4;
        case m2c::kloc_11bcd: 	goto loc_11bcd;
        case m2c::kloc_11bd1: 	goto loc_11bd1;
        case m2c::kloc_11be9: 	goto loc_11be9;
        case m2c::kloc_11bed: 	goto loc_11bed;
        case m2c::kloc_11bf9: 	goto loc_11bf9;
        case m2c::kloc_11bfe: 	goto loc_11bfe;
        case m2c::kloc_11c0a: 	goto loc_11c0a;
        case m2c::kloc_11c0f: 	goto loc_11c0f;
        case m2c::kloc_11c15: 	goto loc_11c15;
        case m2c::kloc_11c1e: 	goto loc_11c1e;
        case m2c::kloc_11c36: 	goto loc_11c36;
        case m2c::kloc_11c38: 	goto loc_11c38;
        case m2c::kloc_11c42: 	goto loc_11c42;
        case m2c::kloc_11c4a: 	goto loc_11c4a;
        case m2c::kloc_11c56: 	goto loc_11c56;
        case m2c::kloc_11c5a: 	goto loc_11c5a;
        case m2c::kloc_11c68: 	goto loc_11c68;
        case m2c::kret_1a2_1b21: 	goto ret_1a2_1b21;
        case m2c::ksub_11a6f: 	goto sub_11a6f;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_11c76(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_11c76:
    _begin:
cs=0x1a2;eip=0x001c76; 	X(PUSH(ax));	// 4393                  push    ax ;~ 01A2:1C76
cs=0x1a2;eip=0x001c77; 	X(PUSH(di));	// 4394                  push    di ;~ 01A2:1C77
cs=0x1a2;eip=0x001c78; 	T(MOV(di, *(dw*)(raddr(ds,si+8))));	// 4395                  mov     di, [si+8] ;~ 01A2:1C78
cs=0x1a2;eip=0x001c7b; 	T(XOR(ah, ah));	// 4396                  xor     ah, ah ;~ 01A2:1C7B
cs=0x1a2;eip=0x001c7d; 	T(MOV(al, *(raddr(ds,di+0x14))));	// 4397                  mov     al, [di+14h] ;~ 01A2:1C7D
cs=0x1a2;eip=0x001c80; 	T(SHL(ax, 1));	// 4398                  shl     ax, 1 ;~ 01A2:1C80
cs=0x1a2;eip=0x001c82; 	T(di = word_1f25e;);	// 4399                  mov     di, word_1F25E ;~ 01A2:1C82
cs=0x1a2;eip=0x001c86; 	T(ADD(di, ax));	// 4400                  add     di, ax ;~ 01A2:1C86
cs=0x1a2;eip=0x001c88; 	X(MOV(*(dw*)(raddr(ds,di)), 0x0FFFF));	// 4401                  mov     word ptr [di], 0FFFFh ;~ 01A2:1C88
cs=0x1a2;eip=0x001c8c; 	X(POP(di));	// 4402                  pop     di ;~ 01A2:1C8C
cs=0x1a2;eip=0x001c8d; 	X(POP(ax));	// 4403                  pop     ax ;~ 01A2:1C8D
cs=0x1a2;eip=0x001c8e; 	J(RETN(0));	// 4404                  retn ;~ 01A2:1C8E

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_11c76: 	goto sub_11c76;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_11cc1(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_11cc1:
    _begin:
cs=0x1a2;eip=0x001cc1; 	X(*(dw*)(&off_1f736) = si;);	// 4464                  mov     word ptr ds:off_1F736, si ;~ 01A2:1CC1
cs=0x1a2;eip=0x001cc5; 	T(cl = dl;);	// 4465                  mov     cl, dl ;~ 01A2:1CC5
cs=0x1a2;eip=0x001cc7; 	T(MOV(ax, *(dw*)(raddr(es,di+0x10))));	// 4466                  mov     ax, es:[di+10h] ;~ 01A2:1CC7
cs=0x1a2;eip=0x001ccb; 	T(SUB(cl, al));	// 4467                  sub     cl, al ;~ 01A2:1CCB
cs=0x1a2;eip=0x001ccd; 	T(INC(cl));	// 4468                  inc     cl ;~ 01A2:1CCD
cs=0x1a2;eip=0x001ccf; 	T(bl = dh;);	// 4469                  mov     bl, dh ;~ 01A2:1CCF
cs=0x1a2;eip=0x001cd1; 	T(MOV(ax, *(dw*)(raddr(es,di+0x12))));	// 4470                  mov     ax, es:[di+12h] ;~ 01A2:1CD1
cs=0x1a2;eip=0x001cd5; 	T(SUB(bl, al));	// 4471                  sub     bl, al ;~ 01A2:1CD5
cs=0x1a2;eip=0x001cd7; 	T(INC(bl));	// 4472                  inc     bl ;~ 01A2:1CD7
cs=0x1a2;eip=0x001cd9; 	T(bh = ch;);	// 4473                  mov     bh, ch ;~ 01A2:1CD9
cs=0x1a2;eip=0x001cdb; 	T(MOV(ax, *(dw*)(raddr(es,di+0x14))));	// 4474                  mov     ax, es:[di+14h] ;~ 01A2:1CDB
cs=0x1a2;eip=0x001cdf; 	T(ADD(bh, al));	// 4475                  add     bh, al ;~ 01A2:1CDF
cs=0x1a2;eip=0x001ce1; 	T(DEC(bh));	// 4476                  dec     bh ;~ 01A2:1CE1
cs=0x1a2;eip=0x001ce3; 	T(al = 4;);	// 4477                  mov     al, 4 ;~ 01A2:1CE3
cs=0x1a2;eip=0x001ce5; 	X(byte_1f85e = al;);	// 4478                  mov     ds:byte_1F85E, al ;~ 01A2:1CE5
cs=0x1a2;eip=0x001ce8; 	T(al = 4;);	// 4479                  mov     al, 4 ;~ 01A2:1CE8
cs=0x1a2;eip=0x001cea; 	X(byte_1f85f = al;);	// 4480                  mov     ds:byte_1F85F, al ;~ 01A2:1CEA
cs=0x1a2;eip=0x001ced; 	T(ax = bp;);	// 4481                  mov     ax, bp ;~ 01A2:1CED
cs=0x1a2;eip=0x001cef; 	X(byte_1f860 = al;);	// 4482                  mov     ds:byte_1F860, al ;~ 01A2:1CEF
cs=0x1a2;eip=0x001cf2; 	X(byte_1f861 = 0;);	// 4483                  mov     ds:byte_1F861, 0 ;~ 01A2:1CF2
cs=0x1a2;eip=0x001cf7; 	T(bp = offset(seg000,byte_11c8f););	// 4484                  mov     bp, offset byte_11C8F ;~ 01A2:1CF7
loc_11cfa:
	// 4687 
cs=0x1a2;eip=0x001cfa; 	T(al = byte_1f860;);	// 4488                  mov     al, ds:byte_1F860 ;~ 01A2:1CFA
cs=0x1a2;eip=0x001cfd; 	T(ah = byte_1f861;);	// 4489                  mov     ah, ds:byte_1F861 ;~ 01A2:1CFD
cs=0x1a2;eip=0x001d01; 	X(PUSH(ax));	// 4490                  push    ax ;~ 01A2:1D01
cs=0x1a2;eip=0x001d02; 	T(ADD(bp, 2));	// 4491                  add     bp, 2 ;~ 01A2:1D02
cs=0x1a2;eip=0x001d05; 	T(MOV(ax, *(dw*)(raddr(cs,bp-2))));	// 4492                  mov     ax, cs:[bp-2] ;~ 01A2:1D05
cs=0x1a2;eip=0x001d09; 	T(OR(ax, ax));	// 4493                  or      ax, ax ;~ 01A2:1D09
cs=0x1a2;eip=0x001d0b; 	J(JS(loc_11d41));	// 4494                  js      short loc_11D41 ;~ 01A2:1D0B
cs=0x1a2;eip=0x001d0d; 	T(MOV(di, *(dw*)(raddr(cs,bp+0))));	// 4495                  mov     di, cs:[bp+0] ;~ 01A2:1D0D
cs=0x1a2;eip=0x001d11; 	T(ADD(bp, 2));	// 4496                  add     bp, 2 ;~ 01A2:1D11
cs=0x1a2;eip=0x001d14; 	T(ah = byte_1f860;);	// 4497                  mov     ah, ds:byte_1F860 ;~ 01A2:1D14
cs=0x1a2;eip=0x001d18; 	T(AND(ah, al));	// 4498                  and     ah, al ;~ 01A2:1D18
cs=0x1a2;eip=0x001d1a; 	T(CMP(al, ah));	// 4499                  cmp     al, ah ;~ 01A2:1D1A
cs=0x1a2;eip=0x001d1c; 	J(JNZ(loc_11d4e));	// 4500                  jnz     short loc_11D4E ;~ 01A2:1D1C
cs=0x1a2;eip=0x001d1e; 	X(POP(ax));	// 4501                  pop     ax ;~ 01A2:1D1E
cs=0x1a2;eip=0x001d1f; 	X(byte_1f860 = al;);	// 4502                  mov     ds:byte_1F860, al ;~ 01A2:1D1F
cs=0x1a2;eip=0x001d22; 	X(byte_1f861 = ah;);	// 4503                  mov     ds:byte_1F861, ah ;~ 01A2:1D22
cs=0x1a2;eip=0x001d26; 	X(PUSH(dx));	// 4504                  push    dx ;~ 01A2:1D26
cs=0x1a2;eip=0x001d27; 	X(PUSH(bx));	// 4505                  push    bx ;~ 01A2:1D27
cs=0x1a2;eip=0x001d28; 	X(PUSH(cx));	// 4506                  push    cx ;~ 01A2:1D28
cs=0x1a2;eip=0x001d29; 	J(CALL(__dispatch_call,di));	// 4507                  call    di ;~ 01A2:1D29
cs=0x1a2;eip=0x001d2b; 	J(JS(loc_11d58));	// 4508                  js      short loc_11D58 ;~ 01A2:1D2B
cs=0x1a2;eip=0x001d2d; 	T(al = ch;);	// 4509                  mov     al, ch ;~ 01A2:1D2D
cs=0x1a2;eip=0x001d2f; 	T(ah = bh;);	// 4510                  mov     ah, bh ;~ 01A2:1D2F
cs=0x1a2;eip=0x001d31; 	X(POP(cx));	// 4511                  pop     cx ;~ 01A2:1D31
cs=0x1a2;eip=0x001d32; 	X(POP(bx));	// 4512                  pop     bx ;~ 01A2:1D32
cs=0x1a2;eip=0x001d33; 	X(POP(dx));	// 4513                  pop     dx ;~ 01A2:1D33
cs=0x1a2;eip=0x001d34; 	T(ch = al;);	// 4514                  mov     ch, al ;~ 01A2:1D34
cs=0x1a2;eip=0x001d36; 	T(bh = ah;);	// 4515                  mov     bh, ah ;~ 01A2:1D36
cs=0x1a2;eip=0x001d38; 	T(CMP(byte_1f860, 0));	// 4516                  cmp     ds:byte_1F860, 0 ;~ 01A2:1D38
cs=0x1a2;eip=0x001d3d; 	J(JZ(loc_11d5b));	// 4517                  jz      short loc_11D5B ;~ 01A2:1D3D
cs=0x1a2;eip=0x001d3f; 	J(JMP(loc_11cfa));	// 4518                  jmp     short loc_11CFA ;~ 01A2:1D3F
loc_11d41:
	// 4688 
cs=0x1a2;eip=0x001d41; 	X(ADD(byte_1f85e, 4));	// 4522                  add     ds:byte_1F85E, 4 ;~ 01A2:1D41
cs=0x1a2;eip=0x001d46; 	X(ADD(byte_1f85f, 4));	// 4523                  add     ds:byte_1F85F, 4 ;~ 01A2:1D46
cs=0x1a2;eip=0x001d4b; 	T(bp = offset(seg000,byte_11c97););	// 4524                  mov     bp, offset byte_11C97 ;~ 01A2:1D4B
loc_11d4e:
	// 4689 
cs=0x1a2;eip=0x001d4e; 	X(POP(ax));	// 4527                  pop     ax ;~ 01A2:1D4E
cs=0x1a2;eip=0x001d4f; 	X(byte_1f860 = al;);	// 4528                  mov     ds:byte_1F860, al ;~ 01A2:1D4F
cs=0x1a2;eip=0x001d52; 	X(byte_1f861 = ah;);	// 4529                  mov     ds:byte_1F861, ah ;~ 01A2:1D52
cs=0x1a2;eip=0x001d56; 	J(JMP(loc_11cfa));	// 4530                  jmp     short loc_11CFA ;~ 01A2:1D56
loc_11d58:
	// 4690 
cs=0x1a2;eip=0x001d58; 	T(ADD(sp, 6));	// 4534                  add     sp, 6 ;~ 01A2:1D58
loc_11d5b:
	// 4691 
cs=0x1a2;eip=0x001d5b; 	T(CMP(byte_1f860, 0));	// 4537                  cmp     ds:byte_1F860, 0 ;~ 01A2:1D5B
cs=0x1a2;eip=0x001d60; 	J(RETN(0));	// 4538                  retn ;~ 01A2:1D60

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_11cfa: 	goto loc_11cfa;
        case m2c::kloc_11d41: 	goto loc_11d41;
        case m2c::kloc_11d4e: 	goto loc_11d4e;
        case m2c::kloc_11d58: 	goto loc_11d58;
        case m2c::kloc_11d5b: 	goto loc_11d5b;
        case m2c::ksub_11cc1: 	goto sub_11cc1;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_1d61_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_1d61_proc:
    _begin:
cs=0x1a2;eip=0x001d61; 	T(ADD(sp, 8));	// 4542                  add     sp, 8 ;~ 01A2:1D61
cs=0x1a2;eip=0x001d64; 	T(XOR(ax, ax));	// 4543                  xor     ax, ax ;~ 01A2:1D64
cs=0x1a2;eip=0x001d66; 	J(RETN(0));	// 4544                  retn ;~ 01A2:1D66

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kseg000_1d61_proc: 	goto seg000_1d61_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group4(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group4:
    _begin:
sub_11d67:
	// 4549 
cs=0x1a2;eip=0x001d67; 	T(ADD(dl, byte_1f85e));	// 4550                  add     dl, ds:byte_1F85E ;~ 01A2:1D67
cs=0x1a2;eip=0x001d6b; 	T(ADD(cl, byte_1f85e));	// 4551                  add     cl, ds:byte_1F85E ;~ 01A2:1D6B
sub_11d6f:
	// 4558 
cs=0x1a2;eip=0x001d6f; 	T(ADD(dh, byte_1f85f));	// 4559                  add     dh, ds:byte_1F85F ;~ 01A2:1D6F
cs=0x1a2;eip=0x001d73; 	T(ADD(bl, byte_1f85f));	// 4560                  add     bl, ds:byte_1F85F ;~ 01A2:1D73
cs=0x1a2;eip=0x001d77; 	J(return sub_11dc4(m2c::kloc_11dcd, _state););	// 4561                  jmp     short loc_11DCD ;~ 01A2:1D77

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_11d67: 	goto sub_11d67;
        case m2c::ksub_11d6f: 	goto sub_11d6f;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_11d79(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_11d79:
    _begin:
cs=0x1a2;eip=0x001d79; 	T(ADD(dl, byte_1f85e));	// 4569                  add     dl, ds:byte_1F85E ;~ 01A2:1D79
cs=0x1a2;eip=0x001d7d; 	T(ADD(cl, byte_1f85e));	// 4570                  add     cl, ds:byte_1F85E ;~ 01A2:1D7D
cs=0x1a2;eip=0x001d81; 	J(return sub_11dc4(m2c::kloc_11dcd, _state););	// 4571                  jmp     short loc_11DCD ;~ 01A2:1D81

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_11d79: 	goto sub_11d79;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group5(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group5:
    _begin:
sub_11d83:
	// 4578 
cs=0x1a2;eip=0x001d83; 	T(ADD(dl, byte_1f85e));	// 4579                  add     dl, ds:byte_1F85E ;~ 01A2:1D83
cs=0x1a2;eip=0x001d87; 	T(ADD(cl, byte_1f85e));	// 4580                  add     cl, ds:byte_1F85E ;~ 01A2:1D87
sub_11d8b:
	// 4587 
cs=0x1a2;eip=0x001d8b; 	T(SUB(dh, byte_1f85f));	// 4588                  sub     dh, ds:byte_1F85F ;~ 01A2:1D8B
cs=0x1a2;eip=0x001d8f; 	T(SUB(bl, byte_1f85f));	// 4589                  sub     bl, ds:byte_1F85F ;~ 01A2:1D8F
sub_11d93:
	// 4596 
cs=0x1a2;eip=0x001d93; 	J(return sub_11dc4(m2c::kloc_11dcd, _state););	// 4597                  jmp     short loc_11DCD ;~ 01A2:1D93

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_11d83: 	goto sub_11d83;
        case m2c::ksub_11d8b: 	goto sub_11d8b;
        case m2c::ksub_11d93: 	goto sub_11d93;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group6(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group6:
    _begin:
sub_11d95:
	// 4604 
cs=0x1a2;eip=0x001d95; 	T(ADD(dh, byte_1f85f));	// 4605                  add     dh, ds:byte_1F85F ;~ 01A2:1D95
cs=0x1a2;eip=0x001d99; 	T(ADD(bl, byte_1f85f));	// 4606                  add     bl, ds:byte_1F85F ;~ 01A2:1D99
sub_11d9d:
	// 4613 
cs=0x1a2;eip=0x001d9d; 	T(SUB(dl, byte_1f85e));	// 4614                  sub     dl, ds:byte_1F85E ;~ 01A2:1D9D
cs=0x1a2;eip=0x001da1; 	T(SUB(cl, byte_1f85e));	// 4615                  sub     cl, ds:byte_1F85E ;~ 01A2:1DA1
cs=0x1a2;eip=0x001da5; 	J(return sub_11dc4(m2c::kloc_11dcd, _state););	// 4616                  jmp     short loc_11DCD ;~ 01A2:1DA5

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_11d95: 	goto sub_11d95;
        case m2c::ksub_11d9d: 	goto sub_11d9d;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_11da7(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_11da7:
    _begin:
cs=0x1a2;eip=0x001da7; 	T(SUB(dl, byte_1f85e));	// 4624                  sub     dl, ds:byte_1F85E ;~ 01A2:1DA7
cs=0x1a2;eip=0x001dab; 	T(SUB(cl, byte_1f85e));	// 4625                  sub     cl, ds:byte_1F85E ;~ 01A2:1DAB
cs=0x1a2;eip=0x001daf; 	T(SUB(dh, byte_1f85f));	// 4626                  sub     dh, ds:byte_1F85F ;~ 01A2:1DAF
cs=0x1a2;eip=0x001db3; 	T(SUB(bl, byte_1f85f));	// 4627                  sub     bl, ds:byte_1F85F ;~ 01A2:1DB3
cs=0x1a2;eip=0x001db7; 	J(return sub_11dc4(m2c::kloc_11dcd, _state););	// 4628                  jmp     short loc_11DCD ;~ 01A2:1DB7

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_11da7: 	goto sub_11da7;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_11db9(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_11db9:
    _begin:
cs=0x1a2;eip=0x001db9; 	X(OR(byte_1f861, 0x80));	// 4636                  or      ds:byte_1F861, 80h ;~ 01A2:1DB9
cs=0x1a2;eip=0x001dbe; 	T(INC(ch));	// 4637                  inc     ch ;~ 01A2:1DBE
cs=0x1a2;eip=0x001dc0; 	T(INC(bh));	// 4638                  inc     bh ;~ 01A2:1DC0
cs=0x1a2;eip=0x001dc2; 	J(return sub_11dc4(m2c::kloc_11dcd, _state););	// 4639                  jmp     short loc_11DCD ;~ 01A2:1DC2

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_11db9: 	goto sub_11db9;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_11dc4(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_11dc4:
    _begin:
cs=0x1a2;eip=0x001dc4; 	X(OR(byte_1f861, 0x80));	// 4647                  or      ds:byte_1F861, 80h ;~ 01A2:1DC4
cs=0x1a2;eip=0x001dc9; 	T(DEC(ch));	// 4648                  dec     ch ;~ 01A2:1DC9
cs=0x1a2;eip=0x001dcb; 	T(DEC(bh));	// 4649                  dec     bh ;~ 01A2:1DCB
loc_11dcd:
	// 4692 
cs=0x1a2;eip=0x001dcd; 	X(AND(byte_1f861, 0x0BF));	// 4653                  and     ds:byte_1F861, 0BFh ;~ 01A2:1DCD
cs=0x1a2;eip=0x001dd2; 	T(si = word_1f19a;);	// 4654                  mov     si, word_1F19A ;~ 01A2:1DD2
cs=0x1a2;eip=0x001dd6; 	T(ax = word_1f394;);	// 4655                  mov     ax, ds:word_1F394 ;~ 01A2:1DD6
cs=0x1a2;eip=0x001dd9; 	T(DEC(al));	// 4656                  dec     al ;~ 01A2:1DD9
cs=0x1a2;eip=0x001ddb; 	X(byte_1f865 = al;);	// 4657                  mov     ds:byte_1F865, al ;~ 01A2:1DDB
cs=0x1a2;eip=0x001dde; 	T(OR(ch, ch));	// 4658                  or      ch, ch ;~ 01A2:1DDE
cs=0x1a2;eip=0x001de0; 	J(JNS(loc_11de5));	// 4659                  jns     short loc_11DE5 ;~ 01A2:1DE0
cs=0x1a2;eip=0x001de2; 	J(CALL(sub_11e83,0));	// 4660                  call    sub_11E83 ;~ 01A2:1DE2
loc_11de5:
	// 4693 
cs=0x1a2;eip=0x001de5; 	T(CMP(bh, 0x0F0));	// 4663                  cmp     bh, 0F0h ;~ 01A2:1DE5
cs=0x1a2;eip=0x001de8; 	J(JC(loc_11ded));	// 4664                  jb      short loc_11DED ;~ 01A2:1DE8
cs=0x1a2;eip=0x001dea; 	J(CALL(sub_11e95,0));	// 4665                  call    sub_11E95 ;~ 01A2:1DEA
loc_11ded:
	// 4694 
cs=0x1a2;eip=0x001ded; 	T(CMP(dl, byte_1f764));	// 4668                  cmp     dl, ds:byte_1F764 ;~ 01A2:1DED
cs=0x1a2;eip=0x001df1; 	J(JL(loc_11df6));	// 4669                  jl      short loc_11DF6 ;~ 01A2:1DF1
cs=0x1a2;eip=0x001df3; 	J(CALL(sub_11e75,0));	// 4671                  call    sub_11E75 ;~ 01A2:1DF3
loc_11df6:
	// 4695 
cs=0x1a2;eip=0x001df6; 	T(CMP(dh, byte_1f765));	// 4674                  cmp     dh, ds:byte_1F765 ;~ 01A2:1DF6
cs=0x1a2;eip=0x001dfa; 	J(JL(loc_11dff));	// 4675                  jl      short loc_11DFF ;~ 01A2:1DFA
cs=0x1a2;eip=0x001dfc; 	J(CALL(sub_11e6e,0));	// 4677                  call    sub_11E6E ;~ 01A2:1DFC
loc_11dff:
	// 4696 
cs=0x1a2;eip=0x001dff; 	T(CMP(cl, byte_1f742));	// 4680                  cmp     cl, ds:byte_1F742 ;~ 01A2:1DFF
cs=0x1a2;eip=0x001e03; 	J(JGE(loc_11e08));	// 4681                  jge     short loc_11E08 ;~ 01A2:1E03
cs=0x1a2;eip=0x001e05; 	J(CALL(sub_11e7c,0));	// 4682                  call    sub_11E7C ;~ 01A2:1E05
loc_11e08:
	// 4697 
cs=0x1a2;eip=0x001e08; 	T(CMP(bl, byte_1f741));	// 4685                  cmp     bl, ds:byte_1F741 ;~ 01A2:1E08
cs=0x1a2;eip=0x001e0c; 	J(JGE(loc_11e11));	// 4686                  jge     short loc_11E11 ;~ 01A2:1E0C
cs=0x1a2;eip=0x001e0e; 	J(CALL(sub_11e67,0));	// 4687                  call    sub_11E67 ;~ 01A2:1E0E
loc_11e11:
	// 4698 
cs=0x1a2;eip=0x001e11; 	T(TEST(byte_1f861, 0x40));	// 4690                  test    ds:byte_1F861, 40h ;~ 01A2:1E11
cs=0x1a2;eip=0x001e16; 	J(JNZ(loc_11e61));	// 4691                  jnz     short loc_11E61 ;~ 01A2:1E16
loc_11e18:
	// 4699 
cs=0x1a2;eip=0x001e18; 	T(CMP(*(dw*)(raddr(ds,si)), 0));	// 4694                  cmp     word ptr [si], 0 ;~ 01A2:1E18
cs=0x1a2;eip=0x001e1b; 	J(JS(loc_11e58));	// 4695                  js      short loc_11E58 ;~ 01A2:1E1B
cs=0x1a2;eip=0x001e1d; 	T(ax = *(dw*)(&off_1f736););	// 4696                  mov     ax, word ptr ds:off_1F736 ;~ 01A2:1E1D
cs=0x1a2;eip=0x001e20; 	T(CMP(ax, *(dw*)(raddr(ds,si+0x0A))));	// 4697                  cmp     ax, [si+0Ah] ;~ 01A2:1E20
cs=0x1a2;eip=0x001e23; 	J(JZ(loc_11e58));	// 4698                  jz      short loc_11E58 ;~ 01A2:1E23
cs=0x1a2;eip=0x001e25; 	T(CMP(dl, *(raddr(ds,si))));	// 4699                  cmp     dl, [si] ;~ 01A2:1E25
cs=0x1a2;eip=0x001e27; 	J(JGE(loc_11e30));	// 4700                  jge     short loc_11E30 ;~ 01A2:1E27
cs=0x1a2;eip=0x001e29; 	T(CMP(dl, *(raddr(ds,si+2))));	// 4701                  cmp     dl, [si+2] ;~ 01A2:1E29
cs=0x1a2;eip=0x001e2c; 	J(JGE(loc_11e34));	// 4702                  jge     short loc_11E34 ;~ 01A2:1E2C
cs=0x1a2;eip=0x001e2e; 	J(JMP(loc_11e58));	// 4703                  jmp     short loc_11E58 ;~ 01A2:1E2E
loc_11e30:
	// 4700 
cs=0x1a2;eip=0x001e30; 	T(CMP(cl, *(raddr(ds,si))));	// 4707                  cmp     cl, [si] ;~ 01A2:1E30
cs=0x1a2;eip=0x001e32; 	J(JG(loc_11e58));	// 4708                  jg      short loc_11E58 ;~ 01A2:1E32
loc_11e34:
	// 4701 
cs=0x1a2;eip=0x001e34; 	T(CMP(dh, *(raddr(ds,si+1))));	// 4711                  cmp     dh, [si+1] ;~ 01A2:1E34
cs=0x1a2;eip=0x001e37; 	J(JGE(loc_11e40));	// 4712                  jge     short loc_11E40 ;~ 01A2:1E37
cs=0x1a2;eip=0x001e39; 	T(CMP(dh, *(raddr(ds,si+3))));	// 4713                  cmp     dh, [si+3] ;~ 01A2:1E39
cs=0x1a2;eip=0x001e3c; 	J(JGE(loc_11e45));	// 4714                  jge     short loc_11E45 ;~ 01A2:1E3C
cs=0x1a2;eip=0x001e3e; 	J(JMP(loc_11e58));	// 4715                  jmp     short loc_11E58 ;~ 01A2:1E3E
loc_11e40:
	// 4702 
cs=0x1a2;eip=0x001e40; 	T(CMP(bl, *(raddr(ds,si+1))));	// 4719                  cmp     bl, [si+1] ;~ 01A2:1E40
cs=0x1a2;eip=0x001e43; 	J(JG(loc_11e58));	// 4720                  jg      short loc_11E58 ;~ 01A2:1E43
loc_11e45:
	// 4703 
cs=0x1a2;eip=0x001e45; 	T(CMP(bh, *(raddr(ds,si+4))));	// 4723                  cmp     bh, [si+4] ;~ 01A2:1E45
cs=0x1a2;eip=0x001e48; 	J(JGE(loc_11e51));	// 4724                  jge     short loc_11E51 ;~ 01A2:1E48
cs=0x1a2;eip=0x001e4a; 	T(CMP(bh, *(raddr(ds,si+5))));	// 4725                  cmp     bh, [si+5] ;~ 01A2:1E4A
cs=0x1a2;eip=0x001e4d; 	J(JGE(loc_11e61));	// 4726                  jge     short loc_11E61 ;~ 01A2:1E4D
cs=0x1a2;eip=0x001e4f; 	J(JMP(loc_11e58));	// 4727                  jmp     short loc_11E58 ;~ 01A2:1E4F
loc_11e51:
	// 4704 
cs=0x1a2;eip=0x001e51; 	T(CMP(ch, *(raddr(ds,si+4))));	// 4731                  cmp     ch, [si+4] ;~ 01A2:1E51
cs=0x1a2;eip=0x001e54; 	J(JG(loc_11e58));	// 4732                  jg      short loc_11E58 ;~ 01A2:1E54
cs=0x1a2;eip=0x001e56; 	J(JMP(loc_11e61));	// 4733                  jmp     short loc_11E61 ;~ 01A2:1E56
loc_11e58:
	// 4705 
cs=0x1a2;eip=0x001e58; 	T(ADD(si, 0x32));	// 4738                  add     si, 32h ; '2' ;~ 01A2:1E58
cs=0x1a2;eip=0x001e5b; 	X(DEC(byte_1f865));	// 4739                  dec     ds:byte_1F865 ;~ 01A2:1E5B
cs=0x1a2;eip=0x001e5f; 	J(JNS(loc_11e18));	// 4740                  jns     short loc_11E18 ;~ 01A2:1E5F
loc_11e61:
	// 4706 
cs=0x1a2;eip=0x001e61; 	T(CMP(byte_1f865, 0));	// 4744                  cmp     ds:byte_1F865, 0 ;~ 01A2:1E61
cs=0x1a2;eip=0x001e66; 	J(RETN(0));	// 4745                  retn ;~ 01A2:1E66

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_11dcd: 	goto loc_11dcd;
        case m2c::kloc_11de5: 	goto loc_11de5;
        case m2c::kloc_11ded: 	goto loc_11ded;
        case m2c::kloc_11df6: 	goto loc_11df6;
        case m2c::kloc_11dff: 	goto loc_11dff;
        case m2c::kloc_11e08: 	goto loc_11e08;
        case m2c::kloc_11e11: 	goto loc_11e11;
        case m2c::kloc_11e18: 	goto loc_11e18;
        case m2c::kloc_11e30: 	goto loc_11e30;
        case m2c::kloc_11e34: 	goto loc_11e34;
        case m2c::kloc_11e40: 	goto loc_11e40;
        case m2c::kloc_11e45: 	goto loc_11e45;
        case m2c::kloc_11e51: 	goto loc_11e51;
        case m2c::kloc_11e58: 	goto loc_11e58;
        case m2c::kloc_11e61: 	goto loc_11e61;
        case m2c::ksub_11dc4: 	goto sub_11dc4;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_11e67(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_11e67:
    _begin:
cs=0x1a2;eip=0x001e67; 	X(AND(byte_1f860, 0x0FE));	// 4753                  and     ds:byte_1F860, 0FEh ;~ 01A2:1E67
cs=0x1a2;eip=0x001e6c; 	J(return sub_11e95(m2c::kloc_11ea5, _state););	// 4754                  jmp     short loc_11EA5 ;~ 01A2:1E6C

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_11e67: 	goto sub_11e67;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_11e6e(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_11e6e:
    _begin:
cs=0x1a2;eip=0x001e6e; 	X(AND(byte_1f860, 0x0FD));	// 4762                  and     ds:byte_1F860, 0FDh ;~ 01A2:1E6E
cs=0x1a2;eip=0x001e73; 	J(return sub_11e95(m2c::kloc_11ea5, _state););	// 4763                  jmp     short loc_11EA5 ;~ 01A2:1E73

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_11e6e: 	goto sub_11e6e;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_11e75(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_11e75:
    _begin:
cs=0x1a2;eip=0x001e75; 	X(AND(byte_1f860, 0x0F7));	// 4772                  and     ds:byte_1F860, 0F7h ;~ 01A2:1E75
cs=0x1a2;eip=0x001e7a; 	J(return sub_11e95(m2c::kloc_11ea5, _state););	// 4773                  jmp     short loc_11EA5 ;~ 01A2:1E7A

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_11e75: 	goto sub_11e75;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_11e7c(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_11e7c:
    _begin:
cs=0x1a2;eip=0x001e7c; 	X(AND(byte_1f860, 0x0FB));	// 4781                  and     ds:byte_1F860, 0FBh ;~ 01A2:1E7C
cs=0x1a2;eip=0x001e81; 	J(return sub_11e95(m2c::kloc_11ea5, _state););	// 4782                  jmp     short loc_11EA5 ;~ 01A2:1E81

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_11e7c: 	goto sub_11e7c;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_11e83(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_11e83:
    _begin:
cs=0x1a2;eip=0x001e83; 	X(AND(byte_1f861, 0x7F));	// 4790                  and     ds:byte_1F861, 7Fh ;~ 01A2:1E83
cs=0x1a2;eip=0x001e88; 	J(JZ(loc_11e8e));	// 4791                  jz      short loc_11E8E ;~ 01A2:1E88
cs=0x1a2;eip=0x001e8a; 	T(INC(ch));	// 4792                  inc     ch ;~ 01A2:1E8A
cs=0x1a2;eip=0x001e8c; 	T(INC(bh));	// 4793                  inc     bh ;~ 01A2:1E8C
loc_11e8e:
	// 4707 
cs=0x1a2;eip=0x001e8e; 	X(AND(byte_1f860, 0x0DF));	// 4796                  and     ds:byte_1F860, 0DFh ;~ 01A2:1E8E
cs=0x1a2;eip=0x001e93; 	J(return sub_11e95(m2c::kloc_11ea5, _state););	// 4797                  jmp     short loc_11EA5 ;~ 01A2:1E93

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_11e8e: 	goto loc_11e8e;
        case m2c::ksub_11e83: 	goto sub_11e83;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_11e95(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_11e95:
    _begin:
cs=0x1a2;eip=0x001e95; 	X(AND(byte_1f861, 0x7F));	// 4805                  and     ds:byte_1F861, 7Fh ;~ 01A2:1E95
cs=0x1a2;eip=0x001e9a; 	J(JZ(loc_11ea0));	// 4806                  jz      short loc_11EA0 ;~ 01A2:1E9A
cs=0x1a2;eip=0x001e9c; 	T(DEC(ch));	// 4807                  dec     ch ;~ 01A2:1E9C
cs=0x1a2;eip=0x001e9e; 	T(DEC(bh));	// 4808                  dec     bh ;~ 01A2:1E9E
loc_11ea0:
	// 4708 
cs=0x1a2;eip=0x001ea0; 	X(AND(byte_1f860, 0x0EF));	// 4811                  and     ds:byte_1F860, 0EFh ;~ 01A2:1EA0
loc_11ea5:
	// 4709 
cs=0x1a2;eip=0x001ea5; 	X(OR(byte_1f861, 0x40));	// 4815                  or      ds:byte_1F861, 40h ;~ 01A2:1EA5
cs=0x1a2;eip=0x001eaa; 	J(RETN(0));	// 4816                  retn ;~ 01A2:1EAA

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_11ea0: 	goto loc_11ea0;
        case m2c::kloc_11ea5: 	goto loc_11ea5;
        case m2c::ksub_11e95: 	goto sub_11e95;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_11eb5(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_11eb5:
    _begin:
cs=0x1a2;eip=0x001eb5; 	X(DEC(*(db*)(((db*)&off_1f831)+2)));	// 4830                  dec     byte ptr ds:off_1F831+2 ;~ 01A2:1EB5
cs=0x1a2;eip=0x001eb9; 	J(JZ(loc_11ebe));	// 4831                  jz      short loc_11EBE ;~ 01A2:1EB9
cs=0x1a2;eip=0x001ebb; 	J(JMP(loc_11fa8));	// 4832                  jmp     loc_11FA8 ;~ 01A2:1EBB
loc_11ebe:
	// 4710 
cs=0x1a2;eip=0x001ebe; 	T(CMP(byte_1f726, 0));	// 4836                  cmp     ds:byte_1F726, 0 ;~ 01A2:1EBE
cs=0x1a2;eip=0x001ec3; 	J(JZ(loc_11ed5));	// 4837                  jz      short loc_11ED5 ;~ 01A2:1EC3
cs=0x1a2;eip=0x001ec5; 	J(JS(loc_11ed5));	// 4838                  js      short loc_11ED5 ;~ 01A2:1EC5
cs=0x1a2;eip=0x001ec7; 	X(word_1f70a = 0x1C;);	// 4839                  mov     ds:word_1F70A, 1Ch ;~ 01A2:1EC7
cs=0x1a2;eip=0x001ecd; 	J(CALL(sub_15c9c,0));	// 4840                  call    sub_15C9C ;~ 01A2:1ECD
cs=0x1a2;eip=0x001ed0; 	X(byte_1f726 = 0x0FF;);	// 4841                  mov     ds:byte_1F726, 0FFh ;~ 01A2:1ED0
loc_11ed5:
	// 4711 
cs=0x1a2;eip=0x001ed5; 	T(cl = byte_1f79a;);	// 4845                  mov     cl, ds:byte_1F79A ;~ 01A2:1ED5
cs=0x1a2;eip=0x001ed9; 	T(OR(cl, cl));	// 4846                  or      cl, cl ;~ 01A2:1ED9
cs=0x1a2;eip=0x001edb; 	J(JZ(loc_11f3b));	// 4847                  jz      short loc_11F3B ;~ 01A2:1EDB
cs=0x1a2;eip=0x001edd; 	T(XOR(ch, ch));	// 4848                  xor     ch, ch ;~ 01A2:1EDD
cs=0x1a2;eip=0x001edf; 	T(si = 0x693;);	// 4849                  mov     si, 693h ;~ 01A2:1EDF
cs=0x1a2;eip=0x001ee2; 	T(di = 0x62B;);	// 4850                  mov     di, 62Bh ;~ 01A2:1EE2
loc_11ee5:
	// 4712 
cs=0x1a2;eip=0x001ee5; 	T(XOR(ah, ah));	// 4854                  xor     ah, ah ;~ 01A2:1EE5
cs=0x1a2;eip=0x001ee7; 	T(LODSB);	// 4855                  lodsb ;~ 01A2:1EE7
cs=0x1a2;eip=0x001ee8; 	T(OR(al, al));	// 4856                  or      al, al ;~ 01A2:1EE8
cs=0x1a2;eip=0x001eea; 	J(JS(loc_11ee5));	// 4857                  js      short loc_11EE5 ;~ 01A2:1EEA
cs=0x1a2;eip=0x001eec; 	X(PUSH(di));	// 4858                  push    di ;~ 01A2:1EEC
cs=0x1a2;eip=0x001eed; 	T(ADD(di, ax));	// 4859                  add     di, ax ;~ 01A2:1EED
cs=0x1a2;eip=0x001eef; 	X(DEC(*(raddr(ds,di))));	// 4860                  dec     byte ptr [di] ;~ 01A2:1EEF
cs=0x1a2;eip=0x001ef1; 	X(POP(di));	// 4861                  pop     di ;~ 01A2:1EF1
cs=0x1a2;eip=0x001ef2; 	J(JZ(loc_11ef8));	// 4862                  jz      short loc_11EF8 ;~ 01A2:1EF2
cs=0x1a2;eip=0x001ef4; 	J(LOOP(loc_11ee5));	// 4863                  loop    loc_11EE5 ;~ 01A2:1EF4
cs=0x1a2;eip=0x001ef6; 	J(JMP(loc_11f3b));	// 4864                  jmp     short loc_11F3B ;~ 01A2:1EF6
loc_11ef8:
	// 4713 
cs=0x1a2;eip=0x001ef8; 	X(PUSH(si));	// 4868                  push    si ;~ 01A2:1EF8
cs=0x1a2;eip=0x001ef9; 	X(PUSH(di));	// 4869                  push    di ;~ 01A2:1EF9
cs=0x1a2;eip=0x001efa; 	X(PUSH(ax));	// 4870                  push    ax ;~ 01A2:1EFA
cs=0x1a2;eip=0x001efb; 	X(PUSH(cx));	// 4871                  push    cx ;~ 01A2:1EFB
cs=0x1a2;eip=0x001efc; 	X(PUSH(es));	// 4872                  push    es ;~ 01A2:1EFC
cs=0x1a2;eip=0x001efd; 	T(bx = *(dw*)(&off_1f88a););	// 4873                  mov     bx, word ptr ds:off_1F88A ;~ 01A2:1EFD
cs=0x1a2;eip=0x001f01; 	T(es = *(dw*)(((db*)&off_1f88a)+2););	// 4874                  mov     es, word ptr ds:off_1F88A+2 ;~ 01A2:1F01
cs=0x1a2;eip=0x001f05; 	T(MOV(bx, *(dw*)(raddr(es,bx+6))));	// 4876                  mov     bx, es:[bx+6] ;~ 01A2:1F05
cs=0x1a2;eip=0x001f09; 	T(SHL(ax, 1));	// 4877                  shl     ax, 1 ;~ 01A2:1F09
cs=0x1a2;eip=0x001f0b; 	T(ADD(bx, ax));	// 4878                  add     bx, ax ;~ 01A2:1F0B
cs=0x1a2;eip=0x001f0d; 	T(MOV(dx, *(dw*)(raddr(es,bx))));	// 4879                  mov     dx, es:[bx] ;~ 01A2:1F0D
cs=0x1a2;eip=0x001f10; 	X(word_1f8fc = dx;);	// 4880                  mov     ds:word_1F8FC, dx ;~ 01A2:1F10
cs=0x1a2;eip=0x001f14; 	J(CALL(__dispatch_call,off_1f8f8));	// 4881                  call    ds:off_1F8F8 ;~ 01A2:1F14
cs=0x1a2;eip=0x001f18; 	X(POP(es));	// 4882                  pop     es ;~ 01A2:1F18
cs=0x1a2;eip=0x001f19; 	X(POP(cx));	// 4883                  pop     cx ;~ 01A2:1F19
cs=0x1a2;eip=0x001f1a; 	X(POP(ax));	// 4884                  pop     ax ;~ 01A2:1F1A
cs=0x1a2;eip=0x001f1b; 	X(POP(di));	// 4885                  pop     di ;~ 01A2:1F1B
cs=0x1a2;eip=0x001f1c; 	X(POP(si));	// 4886                  pop     si ;~ 01A2:1F1C
cs=0x1a2;eip=0x001f1d; 	X(PUSH(di));	// 4887                  push    di ;~ 01A2:1F1D
cs=0x1a2;eip=0x001f1e; 	T(ADD(di, ax));	// 4888                  add     di, ax ;~ 01A2:1F1E
cs=0x1a2;eip=0x001f20; 	T(CMP(*(raddr(ds,di)), 0));	// 4889                  cmp     byte ptr [di], 0 ;~ 01A2:1F20
cs=0x1a2;eip=0x001f23; 	X(POP(di));	// 4890                  pop     di ;~ 01A2:1F23
cs=0x1a2;eip=0x001f24; 	J(JZ(loc_11f31));	// 4891                  jz      short loc_11F31 ;~ 01A2:1F24
cs=0x1a2;eip=0x001f26; 	X(PUSH(di));	// 4892                  push    di ;~ 01A2:1F26
cs=0x1a2;eip=0x001f27; 	T(ADD(di, ax));	// 4893                  add     di, ax ;~ 01A2:1F27
cs=0x1a2;eip=0x001f29; 	T(MOV(al, *(raddr(ds,di+0x34))));	// 4894                  mov     al, [di+34h] ;~ 01A2:1F29
cs=0x1a2;eip=0x001f2c; 	X(MOV(*(raddr(ds,di)), al));	// 4895                  mov     [di], al ;~ 01A2:1F2C
cs=0x1a2;eip=0x001f2e; 	X(POP(di));	// 4896                  pop     di ;~ 01A2:1F2E
cs=0x1a2;eip=0x001f2f; 	J(JMP(loc_11f39));	// 4897                  jmp     short loc_11F39 ;~ 01A2:1F2F
loc_11f31:
	// 4714 
cs=0x1a2;eip=0x001f31; 	X(DEC(byte_1f79a));	// 4901                  dec     ds:byte_1F79A ;~ 01A2:1F31
cs=0x1a2;eip=0x001f35; 	X(MOV(*(raddr(ds,si-1)), 0x0FF));	// 4902                  mov     byte ptr [si-1], 0FFh ;~ 01A2:1F35
loc_11f39:
	// 4715 
cs=0x1a2;eip=0x001f39; 	J(LOOP(loc_11ee5));	// 4905                  loop    loc_11EE5 ;~ 01A2:1F39
loc_11f3b:
	// 4716 
cs=0x1a2;eip=0x001f3b; 	T(si = word_1f1ce;);	// 4909                  mov     si, word_1F1CE ;~ 01A2:1F3B
cs=0x1a2;eip=0x001f3f; 	X(*(db*)(((db*)&off_1f831)+2) = 0x11;);	// 4910                  mov     byte ptr ds:off_1F831+2, 11h ;~ 01A2:1F3F
cs=0x1a2;eip=0x001f44; 	T(al = *(db*)(&off_1f831););	// 4911                  mov     al, byte ptr ds:off_1F831 ;~ 01A2:1F44
cs=0x1a2;eip=0x001f47; 	T(OR(al, al));	// 4912                  or      al, al ;~ 01A2:1F47
cs=0x1a2;eip=0x001f49; 	J(JZ(loc_11f73));	// 4913                  jz      short loc_11F73 ;~ 01A2:1F49
cs=0x1a2;eip=0x001f4b; 	X(DEC(*(db*)(((db*)&off_1f831)+1)));	// 4914                  dec     byte ptr ds:off_1F831+1 ;~ 01A2:1F4B
cs=0x1a2;eip=0x001f4f; 	J(JNZ(loc_11f73));	// 4915                  jnz     short loc_11F73 ;~ 01A2:1F4F
cs=0x1a2;eip=0x001f51; 	X(*(db*)(((db*)&off_1f831)+1) = al;);	// 4917                  mov     byte ptr ds:off_1F831+1, al ;~ 01A2:1F51
cs=0x1a2;eip=0x001f54; 	X(PUSH(si));	// 4918                  push    si ;~ 01A2:1F54
cs=0x1a2;eip=0x001f55; 	T(si = word_1f1f4;);	// 4919                  mov     si, word_1F1F4 ;~ 01A2:1F55
cs=0x1a2;eip=0x001f59; 	X(MOV(*(dw*)(raddr(ds,si)), 0x400E));	// 4920                  mov     word ptr [si], 400Eh ;~ 01A2:1F59
cs=0x1a2;eip=0x001f5d; 	T(ADD(si, 2));	// 4921                  add     si, 2 ;~ 01A2:1F5D
cs=0x1a2;eip=0x001f60; 	X(POP(*(dw*)(raddr(ds,si))));	// 4922                  pop     word ptr [si] ;~ 01A2:1F60
cs=0x1a2;eip=0x001f62; 	X(PUSH(*(dw*)(raddr(ds,si))));	// 4923                  push    word ptr [si] ;~ 01A2:1F62
cs=0x1a2;eip=0x001f64; 	T(ADD(si, 2));	// 4924                  add     si, 2 ;~ 01A2:1F64
cs=0x1a2;eip=0x001f67; 	T(ADD(si, 2));	// 4925                  add     si, 2 ;~ 01A2:1F67
cs=0x1a2;eip=0x001f6a; 	X(word_1f1f4 = si;);	// 4926                  mov     word_1F1F4, si ;~ 01A2:1F6A
cs=0x1a2;eip=0x001f6e; 	X(INC(word_1f396));	// 4927                  inc     ds:word_1F396 ;~ 01A2:1F6E
cs=0x1a2;eip=0x001f72; 	X(POP(si));	// 4928                  pop     si ;~ 01A2:1F72
loc_11f73:
	// 4717 
cs=0x1a2;eip=0x001f73; 	T(al = byte_1f835;);	// 4932                  mov     al, ds:byte_1F835 ;~ 01A2:1F73
cs=0x1a2;eip=0x001f76; 	T(OR(al, al));	// 4933                  or      al, al ;~ 01A2:1F76
cs=0x1a2;eip=0x001f78; 	J(JS(loc_11fa8));	// 4934                  js      short loc_11FA8 ;~ 01A2:1F78
cs=0x1a2;eip=0x001f7a; 	X(DEC(*(db*)(((db*)&off_1f831)+3)));	// 4935                  dec     byte ptr ds:off_1F831+3 ;~ 01A2:1F7A
cs=0x1a2;eip=0x001f7e; 	J(JNZ(loc_11fa8));	// 4936                  jnz     short loc_11FA8 ;~ 01A2:1F7E
cs=0x1a2;eip=0x001f80; 	X(byte_1f835 = 0x0FF;);	// 4937                  mov     ds:byte_1F835, 0FFh ;~ 01A2:1F80
cs=0x1a2;eip=0x001f85; 	T(XOR(ah, ah));	// 4938                  xor     ah, ah ;~ 01A2:1F85
cs=0x1a2;eip=0x001f87; 	X(PUSH(si));	// 4939                  push    si ;~ 01A2:1F87
cs=0x1a2;eip=0x001f88; 	T(si = word_1f1f4;);	// 4940                  mov     si, word_1F1F4 ;~ 01A2:1F88
cs=0x1a2;eip=0x001f8c; 	X(MOV(*(dw*)(raddr(ds,si)), 0x4014));	// 4941                  mov     word ptr [si], 4014h ;~ 01A2:1F8C
cs=0x1a2;eip=0x001f90; 	T(ADD(si, 2));	// 4942                  add     si, 2 ;~ 01A2:1F90
cs=0x1a2;eip=0x001f93; 	X(POP(*(dw*)(raddr(ds,si))));	// 4943                  pop     word ptr [si] ;~ 01A2:1F93
cs=0x1a2;eip=0x001f95; 	X(PUSH(*(dw*)(raddr(ds,si))));	// 4944                  push    word ptr [si] ;~ 01A2:1F95
cs=0x1a2;eip=0x001f97; 	T(ADD(si, 2));	// 4945                  add     si, 2 ;~ 01A2:1F97
cs=0x1a2;eip=0x001f9a; 	X(MOV(*(dw*)(raddr(ds,si)), ax));	// 4946                  mov     [si], ax ;~ 01A2:1F9A
cs=0x1a2;eip=0x001f9c; 	T(ADD(si, 2));	// 4947                  add     si, 2 ;~ 01A2:1F9C
cs=0x1a2;eip=0x001f9f; 	X(word_1f1f4 = si;);	// 4948                  mov     word_1F1F4, si ;~ 01A2:1F9F
cs=0x1a2;eip=0x001fa3; 	X(INC(word_1f396));	// 4949                  inc     ds:word_1F396 ;~ 01A2:1FA3
cs=0x1a2;eip=0x001fa7; 	X(POP(si));	// 4950                  pop     si ;~ 01A2:1FA7
loc_11fa8:
	// 4718 
cs=0x1a2;eip=0x001fa8; 	X(byte_1f850 = 0;);	// 4954                  mov     ds:byte_1F850, 0 ;~ 01A2:1FA8
cs=0x1a2;eip=0x001fad; 	T(si = word_1f1ce;);	// 4955                  mov     si, word_1F1CE ;~ 01A2:1FAD
cs=0x1a2;eip=0x001fb1; 	T(TEST(*(raddr(ds,si+0x17)), 2));	// 4956                  test    byte ptr [si+17h], 2 ;~ 01A2:1FB1
cs=0x1a2;eip=0x001fb5; 	J(JZ(locret_12021));	// 4957                  jz      short locret_12021 ;~ 01A2:1FB5
cs=0x1a2;eip=0x001fb7; 	T(ax = word_1f394;);	// 4958                  mov     ax, ds:word_1F394 ;~ 01A2:1FB7
cs=0x1a2;eip=0x001fba; 	X(byte_1f865 = al;);	// 4959                  mov     ds:byte_1F865, al ;~ 01A2:1FBA
cs=0x1a2;eip=0x001fbd; 	T(XOR(ah, ah));	// 4960                  xor     ah, ah ;~ 01A2:1FBD
cs=0x1a2;eip=0x001fbf; 	T(MOV(al, *(raddr(ds,si))));	// 4961                  mov     al, [si] ;~ 01A2:1FBF
cs=0x1a2;eip=0x001fc1; 	T(bp = si;);	// 4962                  mov     bp, si ;~ 01A2:1FC1
cs=0x1a2;eip=0x001fc3; 	T(ADD(si, ax));	// 4963                  add     si, ax ;~ 01A2:1FC3
cs=0x1a2;eip=0x001fc5; 	T(MOV(al, *(raddr(ds,si))));	// 4964                  mov     al, [si] ;~ 01A2:1FC5
cs=0x1a2;eip=0x001fc7; 	T(ADD(si, 2));	// 4965                  add     si, 2 ;~ 01A2:1FC7
cs=0x1a2;eip=0x001fca; 	T(SHL(ax, 1));	// 4966                  shl     ax, 1 ;~ 01A2:1FCA
cs=0x1a2;eip=0x001fcc; 	T(di = offset(seg000,word_11eab););	// 4967                  mov     di, offset word_11EAB ;~ 01A2:1FCC
cs=0x1a2;eip=0x001fcf; 	T(ADD(di, ax));	// 4968                  add     di, ax ;~ 01A2:1FCF
cs=0x1a2;eip=0x001fd1; 	T(MOV(ax, *(dw*)(raddr(cs,di))));	// 4969                  mov     ax, cs:[di] ;~ 01A2:1FD1
cs=0x1a2;eip=0x001fd4; 	X(*(dw*)(&off_1f736) = ax;);	// 4970                  mov     word ptr ds:off_1F736, ax ;~ 01A2:1FD4
cs=0x1a2;eip=0x001fd7; 	T(di = word_1f19a;);	// 4971                  mov     di, word_1F19A ;~ 01A2:1FD7
cs=0x1a2;eip=0x001fdb; 	X(word_1f72e = di;);	// 4972                  mov     ds:word_1F72E, di ;~ 01A2:1FDB
loc_11fdf:
	// 4719 
cs=0x1a2;eip=0x001fdf; 	T(di = word_1f72e;);	// 4975                  mov     di, ds:word_1F72E ;~ 01A2:1FDF
cs=0x1a2;eip=0x001fe3; 	T(MOV(dl, *(raddr(ds,di))));	// 4976                  mov     dl, [di] ;~ 01A2:1FE3
cs=0x1a2;eip=0x001fe5; 	T(INC(di));	// 4977                  inc     di ;~ 01A2:1FE5
cs=0x1a2;eip=0x001fe6; 	T(OR(dl, dl));	// 4978                  or      dl, dl ;~ 01A2:1FE6
cs=0x1a2;eip=0x001fe8; 	J(JS(loc_12016));	// 4979                  js      short loc_12016 ;~ 01A2:1FE8
cs=0x1a2;eip=0x001fea; 	T(TEST(*(raddr(ds,di+0x26)), 1));	// 4980                  test    byte ptr [di+26h], 1 ;~ 01A2:1FEA
cs=0x1a2;eip=0x001fee; 	J(JZ(loc_12016));	// 4981                  jz      short loc_12016 ;~ 01A2:1FEE
cs=0x1a2;eip=0x001ff0; 	T(TEST(*(raddr(ds,bp+0x17)), 0x10));	// 4982                  test    byte ptr ds:[bp+17h], 10h ;~ 01A2:1FF0
cs=0x1a2;eip=0x001ff5; 	J(JNZ(loc_11ffd));	// 4983                  jnz     short loc_11FFD ;~ 01A2:1FF5
cs=0x1a2;eip=0x001ff7; 	T(TEST(*(raddr(ds,di+0x26)), 4));	// 4984                  test    byte ptr [di+26h], 4 ;~ 01A2:1FF7
cs=0x1a2;eip=0x001ffb; 	J(JZ(loc_12016));	// 4985                  jz      short loc_12016 ;~ 01A2:1FFB
loc_11ffd:
	// 4720 
cs=0x1a2;eip=0x001ffd; 	T(MOV(ax, *(dw*)(raddr(ds,di+9))));	// 4988                  mov     ax, [di+9] ;~ 01A2:1FFD
cs=0x1a2;eip=0x002000; 	X(word_1f72c = ax;);	// 4989                  mov     ds:word_1F72C, ax ;~ 01A2:2000
cs=0x1a2;eip=0x002003; 	T(MOV(dh, *(raddr(ds,di))));	// 4990                  mov     dh, [di] ;~ 01A2:2003
cs=0x1a2;eip=0x002005; 	T(INC(di));	// 4991                  inc     di ;~ 01A2:2005
cs=0x1a2;eip=0x002006; 	T(MOV(cl, *(raddr(ds,di))));	// 4992                  mov     cl, [di] ;~ 01A2:2006
cs=0x1a2;eip=0x002008; 	T(INC(di));	// 4993                  inc     di ;~ 01A2:2008
cs=0x1a2;eip=0x002009; 	T(MOV(bl, *(raddr(ds,di))));	// 4994                  mov     bl, [di] ;~ 01A2:2009
cs=0x1a2;eip=0x00200b; 	T(INC(di));	// 4995                  inc     di ;~ 01A2:200B
cs=0x1a2;eip=0x00200c; 	T(MOV(bh, *(raddr(ds,di))));	// 4996                  mov     bh, [di] ;~ 01A2:200C
cs=0x1a2;eip=0x00200e; 	T(INC(di));	// 4997                  inc     di ;~ 01A2:200E
cs=0x1a2;eip=0x00200f; 	T(MOV(ch, *(raddr(ds,di))));	// 4998                  mov     ch, [di] ;~ 01A2:200F
cs=0x1a2;eip=0x002011; 	T(ax = *(dw*)(&off_1f736););	// 4999                  mov     ax, word ptr ds:off_1F736 ;~ 01A2:2011
cs=0x1a2;eip=0x002014; 	J(CALL(__dispatch_call,ax));	// 5000                  call    ax ; off_1F736 ;~ 01A2:2014
loc_12016:
	// 4721 
cs=0x1a2;eip=0x002016; 	X(ADD(word_1f72e, 0x32));	// 5004                  add     ds:word_1F72E, 32h ; '2' ;~ 01A2:2016
cs=0x1a2;eip=0x00201b; 	X(DEC(byte_1f865));	// 5005                  dec     ds:byte_1F865 ;~ 01A2:201B
cs=0x1a2;eip=0x00201f; 	J(JNZ(loc_11fdf));	// 5006                  jnz     short loc_11FDF ;~ 01A2:201F
locret_12021:
	// 4722 
cs=0x1a2;eip=0x002021; 	J(RETN(0));	// 5009                  retn ;~ 01A2:2021

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_11ebe: 	goto loc_11ebe;
        case m2c::kloc_11ed5: 	goto loc_11ed5;
        case m2c::kloc_11ee5: 	goto loc_11ee5;
        case m2c::kloc_11ef8: 	goto loc_11ef8;
        case m2c::kloc_11f31: 	goto loc_11f31;
        case m2c::kloc_11f39: 	goto loc_11f39;
        case m2c::kloc_11f3b: 	goto loc_11f3b;
        case m2c::kloc_11f73: 	goto loc_11f73;
        case m2c::kloc_11fa8: 	goto loc_11fa8;
        case m2c::kloc_11fdf: 	goto loc_11fdf;
        case m2c::kloc_11ffd: 	goto loc_11ffd;
        case m2c::kloc_12016: 	goto loc_12016;
        case m2c::klocret_12021: 	goto locret_12021;
        case m2c::ksub_11eb5: 	goto sub_11eb5;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group7(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group7:
    _begin:
seg000_2022_proc:
	// 5014 
loc_12022:
	// 4723 
cs=0x1a2;eip=0x002022; 	T(ax = 4;);	// 5015                  mov     ax, 4 ;~ 01A2:2022
cs=0x1a2;eip=0x002025; 	T(CMP(dl, *(raddr(ds,si+0x14))));	// 5016                  cmp     dl, [si+14h] ;~ 01A2:2025
cs=0x1a2;eip=0x002028; 	J(JGE(loc_12031));	// 5017                  jge     short loc_12031 ;~ 01A2:2028
cs=0x1a2;eip=0x00202a; 	T(CMP(dl, *(raddr(ds,si+0x12))));	// 5018                  cmp     dl, [si+12h] ;~ 01A2:202A
cs=0x1a2;eip=0x00202d; 	J(JGE(loc_12036));	// 5019                  jge     short loc_12036 ;~ 01A2:202D
cs=0x1a2;eip=0x00202f; 	J(JMP(sub_1205b));	// 5020                  jmp     short sub_1205B ;~ 01A2:202F
loc_12031:
	// 4724 
cs=0x1a2;eip=0x002031; 	T(CMP(cl, *(raddr(ds,si+0x14))));	// 5024                  cmp     cl, [si+14h] ;~ 01A2:2031
cs=0x1a2;eip=0x002034; 	J(JG(sub_1205b));	// 5025                  jg      short sub_1205B ;~ 01A2:2034
loc_12036:
	// 4725 
cs=0x1a2;eip=0x002036; 	T(CMP(dh, *(raddr(ds,si+0x15))));	// 5028                  cmp     dh, [si+15h] ;~ 01A2:2036
cs=0x1a2;eip=0x002039; 	J(JGE(loc_12042));	// 5029                  jge     short loc_12042 ;~ 01A2:2039
cs=0x1a2;eip=0x00203b; 	T(CMP(dh, *(raddr(ds,si+0x13))));	// 5030                  cmp     dh, [si+13h] ;~ 01A2:203B
cs=0x1a2;eip=0x00203e; 	J(JGE(loc_12047));	// 5031                  jge     short loc_12047 ;~ 01A2:203E
cs=0x1a2;eip=0x002040; 	J(JMP(sub_1205b));	// 5032                  jmp     short sub_1205B ;~ 01A2:2040
loc_12042:
	// 4726 
cs=0x1a2;eip=0x002042; 	T(CMP(bl, *(raddr(ds,si+0x15))));	// 5036                  cmp     bl, [si+15h] ;~ 01A2:2042
cs=0x1a2;eip=0x002045; 	J(JG(sub_1205b));	// 5037                  jg      short sub_1205B ;~ 01A2:2045
loc_12047:
	// 4727 
cs=0x1a2;eip=0x002047; 	T(CMP(bh, *(raddr(ds,si+0x17))));	// 5040                  cmp     bh, [si+17h] ;~ 01A2:2047
cs=0x1a2;eip=0x00204a; 	J(JGE(loc_12053));	// 5041                  jge     short loc_12053 ;~ 01A2:204A
cs=0x1a2;eip=0x00204c; 	T(CMP(bh, *(raddr(ds,si+0x16))));	// 5042                  cmp     bh, [si+16h] ;~ 01A2:204C
cs=0x1a2;eip=0x00204f; 	J(JGE(loc_12058));	// 5043                  jge     short loc_12058 ;~ 01A2:204F
cs=0x1a2;eip=0x002051; 	J(JMP(sub_1205b));	// 5044                  jmp     short sub_1205B ;~ 01A2:2051
loc_12053:
	// 4728 
cs=0x1a2;eip=0x002053; 	T(CMP(ch, *(raddr(ds,si+0x17))));	// 5048                  cmp     ch, [si+17h] ;~ 01A2:2053
cs=0x1a2;eip=0x002056; 	J(JG(sub_1205b));	// 5049                  jg      short sub_1205B ;~ 01A2:2056
loc_12058:
	// 4729 
cs=0x1a2;eip=0x002058; 	J(CALL(sub_12108,0));	// 5052                  call    sub_12108 ;~ 01A2:2058
sub_1205b:
	// 5057 
cs=0x1a2;eip=0x00205b; 	T(ax = 3;);	// 5059                  mov     ax, 3 ;~ 01A2:205B
cs=0x1a2;eip=0x00205e; 	T(CMP(dl, *(raddr(ds,si+0x0E))));	// 5060                  cmp     dl, [si+0Eh] ;~ 01A2:205E
cs=0x1a2;eip=0x002061; 	J(JGE(loc_1206a));	// 5061                  jge     short loc_1206A ;~ 01A2:2061
cs=0x1a2;eip=0x002063; 	T(CMP(dl, *(raddr(ds,si+0x0C))));	// 5062                  cmp     dl, [si+0Ch] ;~ 01A2:2063
cs=0x1a2;eip=0x002066; 	J(JGE(loc_1206f));	// 5063                  jge     short loc_1206F ;~ 01A2:2066
cs=0x1a2;eip=0x002068; 	J(JMP(loc_12094));	// 5064                  jmp     short loc_12094 ;~ 01A2:2068
loc_1206a:
	// 4730 
cs=0x1a2;eip=0x00206a; 	T(CMP(cl, *(raddr(ds,si+0x0E))));	// 5068                  cmp     cl, [si+0Eh] ;~ 01A2:206A
cs=0x1a2;eip=0x00206d; 	J(JG(loc_12094));	// 5069                  jg      short loc_12094 ;~ 01A2:206D
loc_1206f:
	// 4731 
cs=0x1a2;eip=0x00206f; 	T(CMP(dh, *(raddr(ds,si+0x0F))));	// 5072                  cmp     dh, [si+0Fh] ;~ 01A2:206F
cs=0x1a2;eip=0x002072; 	J(JGE(loc_1207b));	// 5073                  jge     short loc_1207B ;~ 01A2:2072
cs=0x1a2;eip=0x002074; 	T(CMP(dh, *(raddr(ds,si+0x0D))));	// 5074                  cmp     dh, [si+0Dh] ;~ 01A2:2074
cs=0x1a2;eip=0x002077; 	J(JGE(loc_12080));	// 5075                  jge     short loc_12080 ;~ 01A2:2077
cs=0x1a2;eip=0x002079; 	J(JMP(loc_12094));	// 5076                  jmp     short loc_12094 ;~ 01A2:2079
loc_1207b:
	// 4732 
cs=0x1a2;eip=0x00207b; 	T(CMP(bl, *(raddr(ds,si+0x0F))));	// 5080                  cmp     bl, [si+0Fh] ;~ 01A2:207B
cs=0x1a2;eip=0x00207e; 	J(JG(loc_12094));	// 5081                  jg      short loc_12094 ;~ 01A2:207E
loc_12080:
	// 4733 
cs=0x1a2;eip=0x002080; 	T(CMP(bh, *(raddr(ds,si+0x11))));	// 5084                  cmp     bh, [si+11h] ;~ 01A2:2080
cs=0x1a2;eip=0x002083; 	J(JGE(loc_1208c));	// 5085                  jge     short loc_1208C ;~ 01A2:2083
cs=0x1a2;eip=0x002085; 	T(CMP(bh, *(raddr(ds,si+0x10))));	// 5086                  cmp     bh, [si+10h] ;~ 01A2:2085
cs=0x1a2;eip=0x002088; 	J(JGE(loc_12091));	// 5087                  jge     short loc_12091 ;~ 01A2:2088
cs=0x1a2;eip=0x00208a; 	J(JMP(loc_12094));	// 5088                  jmp     short loc_12094 ;~ 01A2:208A
loc_1208c:
	// 4734 
cs=0x1a2;eip=0x00208c; 	T(CMP(ch, *(raddr(ds,si+0x11))));	// 5092                  cmp     ch, [si+11h] ;~ 01A2:208C
cs=0x1a2;eip=0x00208f; 	J(JG(loc_12094));	// 5093                  jg      short loc_12094 ;~ 01A2:208F
loc_12091:
	// 4735 
cs=0x1a2;eip=0x002091; 	J(CALL(sub_12108,0));	// 5096                  call    sub_12108 ;~ 01A2:2091
loc_12094:
	// 4736 
cs=0x1a2;eip=0x002094; 	T(ax = 2;);	// 5100                  mov     ax, 2 ;~ 01A2:2094
cs=0x1a2;eip=0x002097; 	T(CMP(dl, *(raddr(ds,si+8))));	// 5101                  cmp     dl, [si+8] ;~ 01A2:2097
cs=0x1a2;eip=0x00209a; 	J(JGE(loc_120a3));	// 5102                  jge     short loc_120A3 ;~ 01A2:209A
cs=0x1a2;eip=0x00209c; 	T(CMP(dl, *(raddr(ds,si+6))));	// 5103                  cmp     dl, [si+6] ;~ 01A2:209C
cs=0x1a2;eip=0x00209f; 	J(JGE(loc_120a8));	// 5104                  jge     short loc_120A8 ;~ 01A2:209F
cs=0x1a2;eip=0x0020a1; 	J(JMP(sub_120cd));	// 5105                  jmp     short sub_120CD ;~ 01A2:20A1
loc_120a3:
	// 4737 
cs=0x1a2;eip=0x0020a3; 	T(CMP(cl, *(raddr(ds,si+8))));	// 5109                  cmp     cl, [si+8] ;~ 01A2:20A3
cs=0x1a2;eip=0x0020a6; 	J(JG(sub_120cd));	// 5110                  jg      short sub_120CD ;~ 01A2:20A6
loc_120a8:
	// 4738 
cs=0x1a2;eip=0x0020a8; 	T(CMP(dh, *(raddr(ds,si+9))));	// 5113                  cmp     dh, [si+9] ;~ 01A2:20A8
cs=0x1a2;eip=0x0020ab; 	J(JGE(loc_120b4));	// 5114                  jge     short loc_120B4 ;~ 01A2:20AB
cs=0x1a2;eip=0x0020ad; 	T(CMP(dh, *(raddr(ds,si+7))));	// 5115                  cmp     dh, [si+7] ;~ 01A2:20AD
cs=0x1a2;eip=0x0020b0; 	J(JGE(loc_120b9));	// 5116                  jge     short loc_120B9 ;~ 01A2:20B0
cs=0x1a2;eip=0x0020b2; 	J(JMP(sub_120cd));	// 5117                  jmp     short sub_120CD ;~ 01A2:20B2
loc_120b4:
	// 4739 
cs=0x1a2;eip=0x0020b4; 	T(CMP(bl, *(raddr(ds,si+9))));	// 5121                  cmp     bl, [si+9] ;~ 01A2:20B4
cs=0x1a2;eip=0x0020b7; 	J(JG(sub_120cd));	// 5122                  jg      short sub_120CD ;~ 01A2:20B7
loc_120b9:
	// 4740 
cs=0x1a2;eip=0x0020b9; 	T(CMP(bh, *(raddr(ds,si+0x0B))));	// 5125                  cmp     bh, [si+0Bh] ;~ 01A2:20B9
cs=0x1a2;eip=0x0020bc; 	J(JGE(loc_120c5));	// 5126                  jge     short loc_120C5 ;~ 01A2:20BC
cs=0x1a2;eip=0x0020be; 	T(CMP(bh, *(raddr(ds,si+0x0A))));	// 5127                  cmp     bh, [si+0Ah] ;~ 01A2:20BE
cs=0x1a2;eip=0x0020c1; 	J(JGE(loc_120ca));	// 5128                  jge     short loc_120CA ;~ 01A2:20C1
cs=0x1a2;eip=0x0020c3; 	J(JMP(sub_120cd));	// 5129                  jmp     short sub_120CD ;~ 01A2:20C3
loc_120c5:
	// 4741 
cs=0x1a2;eip=0x0020c5; 	T(CMP(ch, *(raddr(ds,si+0x0B))));	// 5133                  cmp     ch, [si+0Bh] ;~ 01A2:20C5
cs=0x1a2;eip=0x0020c8; 	J(JG(sub_120cd));	// 5134                  jg      short sub_120CD ;~ 01A2:20C8
loc_120ca:
	// 4742 
cs=0x1a2;eip=0x0020ca; 	J(CALL(sub_12108,0));	// 5137                  call    sub_12108 ;~ 01A2:20CA
sub_120cd:
	// 5144 
cs=0x1a2;eip=0x0020cd; 	T(ax = 1;);	// 5146                  mov     ax, 1 ;~ 01A2:20CD
cs=0x1a2;eip=0x0020d0; 	T(CMP(dl, *(raddr(ds,si+2))));	// 5147                  cmp     dl, [si+2] ;~ 01A2:20D0
cs=0x1a2;eip=0x0020d3; 	J(JGE(loc_120da));	// 5148                  jge     short loc_120DA ;~ 01A2:20D3
cs=0x1a2;eip=0x0020d5; 	T(CMP(dl, *(raddr(ds,si))));	// 5149                  cmp     dl, [si] ;~ 01A2:20D5
cs=0x1a2;eip=0x0020d7; 	J(JGE(loc_120e2));	// 5150                  jge     short loc_120E2 ;~ 01A2:20D7
cs=0x1a2;eip=0x0020d9; 	J(RETN(0));	// 5151                  retn ;~ 01A2:20D9
loc_120da:
	// 4743 
cs=0x1a2;eip=0x0020da; 	T(CMP(cl, *(raddr(ds,si+2))));	// 5155                  cmp     cl, [si+2] ;~ 01A2:20DA
cs=0x1a2;eip=0x0020dd; 	J(JLE(loc_120e2));	// 5156                  jle     short loc_120E2 ;~ 01A2:20DD
cs=0x1a2;eip=0x0020df; 	J(JMP(locret_12187));	// 5157                  jmp     locret_12187 ;~ 01A2:20DF
loc_120e2:
	// 4744 
cs=0x1a2;eip=0x0020e2; 	T(CMP(dh, *(raddr(ds,si+3))));	// 5162                  cmp     dh, [si+3] ;~ 01A2:20E2
cs=0x1a2;eip=0x0020e5; 	J(JGE(loc_120ed));	// 5163                  jge     short loc_120ED ;~ 01A2:20E5
cs=0x1a2;eip=0x0020e7; 	T(CMP(dh, *(raddr(ds,si+1))));	// 5164                  cmp     dh, [si+1] ;~ 01A2:20E7
cs=0x1a2;eip=0x0020ea; 	J(JGE(loc_120f5));	// 5165                  jge     short loc_120F5 ;~ 01A2:20EA
cs=0x1a2;eip=0x0020ec; 	J(RETN(0));	// 5166                  retn ;~ 01A2:20EC
loc_120ed:
	// 4745 
cs=0x1a2;eip=0x0020ed; 	T(CMP(bl, *(raddr(ds,si+3))));	// 5170                  cmp     bl, [si+3] ;~ 01A2:20ED
cs=0x1a2;eip=0x0020f0; 	J(JLE(loc_120f5));	// 5171                  jle     short loc_120F5 ;~ 01A2:20F0
cs=0x1a2;eip=0x0020f2; 	J(JMP(locret_12187));	// 5172                  jmp     locret_12187 ;~ 01A2:20F2
loc_120f5:
	// 4746 
cs=0x1a2;eip=0x0020f5; 	T(CMP(bh, *(raddr(ds,si+5))));	// 5177                  cmp     bh, [si+5] ;~ 01A2:20F5
cs=0x1a2;eip=0x0020f8; 	J(JGE(loc_12100));	// 5178                  jge     short loc_12100 ;~ 01A2:20F8
cs=0x1a2;eip=0x0020fa; 	T(CMP(bh, *(raddr(ds,si+4))));	// 5179                  cmp     bh, [si+4] ;~ 01A2:20FA
cs=0x1a2;eip=0x0020fd; 	J(JGE(sub_12108));	// 5180                  jge     short sub_12108 ;~ 01A2:20FD
cs=0x1a2;eip=0x0020ff; 	J(RETN(0));	// 5181                  retn ;~ 01A2:20FF
loc_12100:
	// 4747 
cs=0x1a2;eip=0x002100; 	T(CMP(ch, *(raddr(ds,si+5))));	// 5185                  cmp     ch, [si+5] ;~ 01A2:2100
cs=0x1a2;eip=0x002103; 	J(JLE(sub_12108));	// 5186                  jle     short sub_12108 ;~ 01A2:2103
cs=0x1a2;eip=0x002105; 	J(JMP(locret_12187));	// 5187                  jmp     locret_12187 ;~ 01A2:2105
sub_12108:
	// 5194 
cs=0x1a2;eip=0x002108; 	X(PUSH(bx));	// 5196                  push    bx ;~ 01A2:2108
cs=0x1a2;eip=0x002109; 	T(bx = word_1f72c;);	// 5197                  mov     bx, ds:word_1F72C ;~ 01A2:2109
cs=0x1a2;eip=0x00210d; 	X(PUSH(si));	// 5198                  push    si ;~ 01A2:210D
cs=0x1a2;eip=0x00210e; 	T(si = word_1f1f4;);	// 5199                  mov     si, word_1F1F4 ;~ 01A2:210E
cs=0x1a2;eip=0x002112; 	X(MOV(*(dw*)(raddr(ds,si)), 0x0A));	// 5200                  mov     word ptr [si], 0Ah ;~ 01A2:2112
cs=0x1a2;eip=0x002116; 	T(ADD(si, 2));	// 5201                  add     si, 2 ;~ 01A2:2116
cs=0x1a2;eip=0x002119; 	X(MOV(*(dw*)(raddr(ds,si)), bx));	// 5202                  mov     [si], bx ;~ 01A2:2119
cs=0x1a2;eip=0x00211b; 	T(ADD(si, 2));	// 5203                  add     si, 2 ;~ 01A2:211B
cs=0x1a2;eip=0x00211e; 	X(MOV(*(dw*)(raddr(ds,si)), ax));	// 5204                  mov     [si], ax ;~ 01A2:211E
cs=0x1a2;eip=0x002120; 	T(ADD(si, 2));	// 5205                  add     si, 2 ;~ 01A2:2120
cs=0x1a2;eip=0x002123; 	X(word_1f1f4 = si;);	// 5206                  mov     word_1F1F4, si ;~ 01A2:2123
cs=0x1a2;eip=0x002127; 	X(INC(word_1f396));	// 5207                  inc     ds:word_1F396 ;~ 01A2:2127
cs=0x1a2;eip=0x00212b; 	X(POP(si));	// 5208                  pop     si ;~ 01A2:212B
cs=0x1a2;eip=0x00212c; 	T(TEST(*(raddr(ds,bp+0x17)), 0x10));	// 5209                  test    byte ptr ds:[bp+17h], 10h ;~ 01A2:212C
cs=0x1a2;eip=0x002131; 	J(JZ(loc_12186));	// 5210                  jz      short loc_12186 ;~ 01A2:2131
cs=0x1a2;eip=0x002133; 	T(CMP(*(dw*)(raddr(ds,bx+4)), 0));	// 5211                  cmp     word ptr [bx+4], 0 ;~ 01A2:2133
cs=0x1a2;eip=0x002137; 	J(JNZ(loc_12162));	// 5212                  jnz     short loc_12162 ;~ 01A2:2137
cs=0x1a2;eip=0x002139; 	X(PUSH(si));	// 5213                  push    si ;~ 01A2:2139
cs=0x1a2;eip=0x00213a; 	T(si = word_1f1f4;);	// 5214                  mov     si, word_1F1F4 ;~ 01A2:213A
cs=0x1a2;eip=0x00213e; 	X(MOV(*(dw*)(raddr(ds,si)), 0x0C00F));	// 5215                  mov     word ptr [si], 0C00Fh ;~ 01A2:213E
cs=0x1a2;eip=0x002142; 	T(ADD(si, 2));	// 5216                  add     si, 2 ;~ 01A2:2142
cs=0x1a2;eip=0x002145; 	X(MOV(*(dw*)(raddr(ds,si)), bp));	// 5217                  mov     [si], bp ;~ 01A2:2145
cs=0x1a2;eip=0x002147; 	T(ADD(si, 2));	// 5218                  add     si, 2 ;~ 01A2:2147
cs=0x1a2;eip=0x00214a; 	X(MOV(*(dw*)(raddr(ds,si)), ax));	// 5219                  mov     [si], ax ;~ 01A2:214A
cs=0x1a2;eip=0x00214c; 	T(ADD(si, 2));	// 5220                  add     si, 2 ;~ 01A2:214C
cs=0x1a2;eip=0x00214f; 	X(MOV(*(dw*)(raddr(ds,si)), bx));	// 5221                  mov     [si], bx ;~ 01A2:214F
cs=0x1a2;eip=0x002151; 	T(ADD(si, 2));	// 5222                  add     si, 2 ;~ 01A2:2151
cs=0x1a2;eip=0x002154; 	X(word_1f1f4 = si;);	// 5223                  mov     word_1F1F4, si ;~ 01A2:2154
cs=0x1a2;eip=0x002158; 	X(INC(word_1f396));	// 5224                  inc     ds:word_1F396 ;~ 01A2:2158
cs=0x1a2;eip=0x00215c; 	X(POP(si));	// 5225                  pop     si ;~ 01A2:215C
cs=0x1a2;eip=0x00215d; 	X(POP(bx));	// 5226                  pop     bx ;~ 01A2:215D
cs=0x1a2;eip=0x00215e; 	X(byte_1f850 = al;);	// 5227                  mov     ds:byte_1F850, al ;~ 01A2:215E
cs=0x1a2;eip=0x002161; 	J(RETN(0));	// 5228                  retn ;~ 01A2:2161
loc_12162:
	// 4748 
cs=0x1a2;eip=0x002162; 	X(PUSH(si));	// 5232                  push    si ;~ 01A2:2162
cs=0x1a2;eip=0x002163; 	T(si = word_1f1f4;);	// 5233                  mov     si, word_1F1F4 ;~ 01A2:2163
cs=0x1a2;eip=0x002167; 	X(MOV(*(dw*)(raddr(ds,si)), 0x0C011));	// 5234                  mov     word ptr [si], 0C011h ;~ 01A2:2167
cs=0x1a2;eip=0x00216b; 	T(ADD(si, 2));	// 5235                  add     si, 2 ;~ 01A2:216B
cs=0x1a2;eip=0x00216e; 	X(MOV(*(dw*)(raddr(ds,si)), bp));	// 5236                  mov     [si], bp ;~ 01A2:216E
cs=0x1a2;eip=0x002170; 	T(ADD(si, 2));	// 5237                  add     si, 2 ;~ 01A2:2170
cs=0x1a2;eip=0x002173; 	X(MOV(*(dw*)(raddr(ds,si)), ax));	// 5238                  mov     [si], ax ;~ 01A2:2173
cs=0x1a2;eip=0x002175; 	T(ADD(si, 2));	// 5239                  add     si, 2 ;~ 01A2:2175
cs=0x1a2;eip=0x002178; 	X(MOV(*(dw*)(raddr(ds,si)), bx));	// 5240                  mov     [si], bx ;~ 01A2:2178
cs=0x1a2;eip=0x00217a; 	T(ADD(si, 2));	// 5241                  add     si, 2 ;~ 01A2:217A
cs=0x1a2;eip=0x00217d; 	X(word_1f1f4 = si;);	// 5242                  mov     word_1F1F4, si ;~ 01A2:217D
cs=0x1a2;eip=0x002181; 	X(INC(word_1f396));	// 5243                  inc     ds:word_1F396 ;~ 01A2:2181
cs=0x1a2;eip=0x002185; 	X(POP(si));	// 5244                  pop     si ;~ 01A2:2185
loc_12186:
	// 4749 
cs=0x1a2;eip=0x002186; 	X(POP(bx));	// 5247                  pop     bx ;~ 01A2:2186
locret_12187:
	// 4750 
cs=0x1a2;eip=0x002187; 	J(RETN(0));	// 5251                  retn ;~ 01A2:2187

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_12022: 	goto loc_12022;
        case m2c::kloc_12031: 	goto loc_12031;
        case m2c::kloc_12036: 	goto loc_12036;
        case m2c::kloc_12042: 	goto loc_12042;
        case m2c::kloc_12047: 	goto loc_12047;
        case m2c::kloc_12053: 	goto loc_12053;
        case m2c::kloc_12058: 	goto loc_12058;
        case m2c::kloc_1206a: 	goto loc_1206a;
        case m2c::kloc_1206f: 	goto loc_1206f;
        case m2c::kloc_1207b: 	goto loc_1207b;
        case m2c::kloc_12080: 	goto loc_12080;
        case m2c::kloc_1208c: 	goto loc_1208c;
        case m2c::kloc_12091: 	goto loc_12091;
        case m2c::kloc_12094: 	goto loc_12094;
        case m2c::kloc_120a3: 	goto loc_120a3;
        case m2c::kloc_120a8: 	goto loc_120a8;
        case m2c::kloc_120b4: 	goto loc_120b4;
        case m2c::kloc_120b9: 	goto loc_120b9;
        case m2c::kloc_120c5: 	goto loc_120c5;
        case m2c::kloc_120ca: 	goto loc_120ca;
        case m2c::kloc_120da: 	goto loc_120da;
        case m2c::kloc_120e2: 	goto loc_120e2;
        case m2c::kloc_120ed: 	goto loc_120ed;
        case m2c::kloc_120f5: 	goto loc_120f5;
        case m2c::kloc_12100: 	goto loc_12100;
        case m2c::kloc_12162: 	goto loc_12162;
        case m2c::kloc_12186: 	goto loc_12186;
        case m2c::klocret_12187: 	goto locret_12187;
        case m2c::ksub_1205b: 	goto sub_1205b;
        case m2c::ksub_120cd: 	goto sub_120cd;
        case m2c::ksub_12108: 	goto sub_12108;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_12188(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_12188:
    _begin:
cs=0x1a2;eip=0x002188; 	X(PUSH(ax));	// 5260                  push    ax ;~ 01A2:2188
cs=0x1a2;eip=0x002189; 	X(PUSH(dx));	// 5261                  push    dx ;~ 01A2:2189
cs=0x1a2;eip=0x00218a; 	X(PUSH(di));	// 5262                  push    di ;~ 01A2:218A
cs=0x1a2;eip=0x00218b; 	X(PUSH(es));	// 5263                  push    es ;~ 01A2:218B
cs=0x1a2;eip=0x00218c; 	X(word_1f386 = ax;);	// 5264                  mov     ds:word_1F386, ax ;~ 01A2:218C
cs=0x1a2;eip=0x00218f; 	T(dx = ax;);	// 5265                  mov     dx, ax ;~ 01A2:218F
cs=0x1a2;eip=0x002191; 	T(ax = 2;);	// 5266                  mov     ax, 2 ;~ 01A2:2191
cs=0x1a2;eip=0x002194; 	J(CALL(sub_1410e,0));	// 5267                  call    sub_1410E ;~ 01A2:2194
cs=0x1a2;eip=0x002197; 	X(*(dw*)(((db*)&off_1f194)+2) = es;);	// 5268                  mov     word ptr off_1F194+2, es ;~ 01A2:2197
cs=0x1a2;eip=0x00219b; 	X(word_1f198 = di;);	// 5269                  mov     word_1F198, di ;~ 01A2:219B
cs=0x1a2;eip=0x00219f; 	T(MOV(al, *(raddr(ds,di+0x0C))));	// 5270                  mov     al, [di+0Ch] ;~ 01A2:219F
cs=0x1a2;eip=0x0021a2; 	X(byte_1f747 = al;);	// 5271                  mov     ds:byte_1F747, al ;~ 01A2:21A2
cs=0x1a2;eip=0x0021a5; 	X(POP(es));	// 5272                  pop     es ;~ 01A2:21A5
cs=0x1a2;eip=0x0021a6; 	X(POP(di));	// 5274                  pop     di ;~ 01A2:21A6
cs=0x1a2;eip=0x0021a7; 	X(POP(dx));	// 5275                  pop     dx ;~ 01A2:21A7
cs=0x1a2;eip=0x0021a8; 	X(POP(ax));	// 5276                  pop     ax ;~ 01A2:21A8
cs=0x1a2;eip=0x0021a9; 	J(RETN(0));	// 5277                  retn ;~ 01A2:21A9

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_12188: 	goto sub_12188;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_121aa(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_121aa:
    _begin:
cs=0x1a2;eip=0x0021aa; 	T(bx = 0x0FFFF;);	// 5285                  mov     bx, 0FFFFh ;~ 01A2:21AA
cs=0x1a2;eip=0x0021ad; 	T(OR(bx, bx));	// 5286                  or      bx, bx ;~ 01A2:21AD
cs=0x1a2;eip=0x0021af; 	J(RETN(0));	// 5287                  retn ;~ 01A2:21AF

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_121aa: 	goto sub_121aa;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_121b0(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_121b0:
    _begin:
cs=0x1a2;eip=0x0021b0; 	T(al = byte_1f852;);	// 5296                  mov     al, ds:byte_1F852 ;~ 01A2:21B0
cs=0x1a2;eip=0x0021b3; 	T(OR(al, al));	// 5297                  or      al, al ;~ 01A2:21B3
cs=0x1a2;eip=0x0021b5; 	J(JZ(loc_121bf));	// 5298                  jz      short loc_121BF ;~ 01A2:21B5
cs=0x1a2;eip=0x0021b7; 	J(CALL(sub_11613,0));	// 5299                  call    sub_11613 ;~ 01A2:21B7
cs=0x1a2;eip=0x0021ba; 	X(byte_1f852 = 0;);	// 5300                  mov     ds:byte_1F852, 0 ;~ 01A2:21BA
loc_121bf:
	// 4751 
cs=0x1a2;eip=0x0021bf; 	X(AND(byte_1f857, 0x0FE));	// 5303                  and     ds:byte_1F857, 0FEh ;~ 01A2:21BF
cs=0x1a2;eip=0x0021c4; 	T(MOV(al, *(raddr(ds,si+1))));	// 5304                  mov     al, [si+1] ;~ 01A2:21C4
cs=0x1a2;eip=0x0021c7; 	T(CMP(al, 0x0FD));	// 5305                  cmp     al, 0FDh ;~ 01A2:21C7
cs=0x1a2;eip=0x0021c9; 	J(JNZ(loc_12220));	// 5306                  jnz     short loc_12220 ;~ 01A2:21C9
loc_121cb:
	// 4752 
cs=0x1a2;eip=0x0021cb; 	T(al = byte_1f856;);	// 5309                  mov     al, ds:byte_1F856 ;~ 01A2:21CB
cs=0x1a2;eip=0x0021ce; 	T(OR(al, al));	// 5310                  or      al, al ;~ 01A2:21CE
cs=0x1a2;eip=0x0021d0; 	J(JZ(loc_121da));	// 5311                  jz      short loc_121DA ;~ 01A2:21D0
cs=0x1a2;eip=0x0021d2; 	J(CALL(sub_11613,0));	// 5312                  call    sub_11613 ;~ 01A2:21D2
cs=0x1a2;eip=0x0021d5; 	X(byte_1f856 = 0;);	// 5313                  mov     ds:byte_1F856, 0 ;~ 01A2:21D5
loc_121da:
	// 4753 
cs=0x1a2;eip=0x0021da; 	X(AND(byte_1f857, 0x0FE));	// 5316                  and     ds:byte_1F857, 0FEh ;~ 01A2:21DA
cs=0x1a2;eip=0x0021df; 	X(OR(byte_1f779, 0x80));	// 5317                  or      ds:byte_1F779, 80h ;~ 01A2:21DF
cs=0x1a2;eip=0x0021e4; 	T(MOV(bx, *(dw*)(raddr(ds,si+2))));	// 5318                  mov     bx, [si+2] ;~ 01A2:21E4
cs=0x1a2;eip=0x0021e7; 	T(TEST(*(raddr(ds,bx+3)), 0x40));	// 5319                  test    byte ptr [bx+3], 40h ;~ 01A2:21E7
cs=0x1a2;eip=0x0021eb; 	J(JNZ(loc_121f0));	// 5320                  jnz     short loc_121F0 ;~ 01A2:21EB
cs=0x1a2;eip=0x0021ed; 	J(return sub_122c4(0, _state););	// 5321                  jmp     sub_122C4 ;~ 01A2:21ED
loc_121f0:
	// 4754 
cs=0x1a2;eip=0x0021f0; 	X(PUSH(ax));	// 5325                  push    ax ;~ 01A2:21F0
cs=0x1a2;eip=0x0021f1; 	X(PUSH(dx));	// 5326                  push    dx ;~ 01A2:21F1
cs=0x1a2;eip=0x0021f2; 	T(MOV(ax, *(dw*)(raddr(ds,bx+4))));	// 5327                  mov     ax, [bx+4] ;~ 01A2:21F2
cs=0x1a2;eip=0x0021f5; 	T(dx = 0;);	// 5328                  mov     dx, 0 ;~ 01A2:21F5
cs=0x1a2;eip=0x0021f8; 	J(CALL(sub_16441,0));	// 5329                  call    sub_16441 ;~ 01A2:21F8
cs=0x1a2;eip=0x0021fb; 	X(POP(dx));	// 5330                  pop     dx ;~ 01A2:21FB
cs=0x1a2;eip=0x0021fc; 	X(POP(ax));	// 5331                  pop     ax ;~ 01A2:21FC
cs=0x1a2;eip=0x0021fd; 	J(JZ(loc_1221d));	// 5332                  jz      short loc_1221D ;~ 01A2:21FD
cs=0x1a2;eip=0x0021ff; 	X(PUSH(di));	// 5333                  push    di ;~ 01A2:21FF
cs=0x1a2;eip=0x002200; 	X(PUSH(ax));	// 5334                  push    ax ;~ 01A2:2200
cs=0x1a2;eip=0x002201; 	T(di = word_1f1f4;);	// 5335                  mov     di, word_1F1F4 ;~ 01A2:2201
cs=0x1a2;eip=0x002205; 	X(MOV(*(dw*)(raddr(ds,di)), 9));	// 5336                  mov     word ptr [di], 9 ;~ 01A2:2205
cs=0x1a2;eip=0x002209; 	X(MOV(*(dw*)(raddr(ds,di+2)), bx));	// 5337                  mov     [di+2], bx ;~ 01A2:2209
cs=0x1a2;eip=0x00220c; 	T(ax = 0;);	// 5338                  mov     ax, 0 ;~ 01A2:220C
cs=0x1a2;eip=0x00220f; 	X(MOV(*(dw*)(raddr(ds,di+4)), ax));	// 5339                  mov     [di+4], ax ;~ 01A2:220F
cs=0x1a2;eip=0x002212; 	X(ADD(word_1f1f4, 6));	// 5340                  add     word_1F1F4, 6 ;~ 01A2:2212
cs=0x1a2;eip=0x002217; 	X(INC(word_1f396));	// 5341                  inc     ds:word_1F396 ;~ 01A2:2217
cs=0x1a2;eip=0x00221b; 	X(POP(ax));	// 5342                  pop     ax ;~ 01A2:221B
cs=0x1a2;eip=0x00221c; 	X(POP(di));	// 5343                  pop     di ;~ 01A2:221C
loc_1221d:
	// 4755 
cs=0x1a2;eip=0x00221d; 	J(return sub_122c4(0, _state););	// 5346                  jmp     sub_122C4 ;~ 01A2:221D
loc_12220:
	// 4756 
cs=0x1a2;eip=0x002220; 	X(PUSH(si));	// 5350                  push    si ;~ 01A2:2220
cs=0x1a2;eip=0x002221; 	T(XCHG(di, si));	// 5351                  xchg    di, si ;~ 01A2:2221
cs=0x1a2;eip=0x002223; 	J(CALL(sub_11a49,0));	// 5352                  call    sub_11A49 ;~ 01A2:2223
cs=0x1a2;eip=0x002226; 	J(CALL(sub_11c76,0));	// 5353                  call    sub_11C76 ;~ 01A2:2226
cs=0x1a2;eip=0x002229; 	T(XCHG(di, si));	// 5354                  xchg    di, si ;~ 01A2:2229
cs=0x1a2;eip=0x00222b; 	X(byte_1f772 = 0;);	// 5355                  mov     ds:byte_1F772, 0 ;~ 01A2:222B
cs=0x1a2;eip=0x002230; 	T(ax = word_1f1f0;);	// 5356                  mov     ax, word_1F1F0 ;~ 01A2:2230
cs=0x1a2;eip=0x002233; 	X(word_1f1f2 = ax;);	// 5357                  mov     word_1F1F2, ax ;~ 01A2:2233
cs=0x1a2;eip=0x002236; 	T(ax = word_1f70c;);	// 5358                  mov     ax, ds:word_1F70C ;~ 01A2:2236
cs=0x1a2;eip=0x002239; 	X(word_1f3ce = ax;);	// 5359                  mov     ds:word_1F3CE, ax ;~ 01A2:2239
cs=0x1a2;eip=0x00223c; 	X(PUSH(ax));	// 5360                  push    ax ;~ 01A2:223C
cs=0x1a2;eip=0x00223d; 	T(ax = word_1f1f4;);	// 5361                  mov     ax, word_1F1F4 ;~ 01A2:223D
cs=0x1a2;eip=0x002240; 	X(word_1f206 = ax;);	// 5362                  mov     word_1F206, ax ;~ 01A2:2240
cs=0x1a2;eip=0x002243; 	T(ax = word_1f396;);	// 5363                  mov     ax, ds:word_1F396 ;~ 01A2:2243
cs=0x1a2;eip=0x002246; 	X(word_1f708 = ax;);	// 5364                  mov     ds:word_1F708, ax ;~ 01A2:2246
cs=0x1a2;eip=0x002249; 	X(POP(ax));	// 5365                  pop     ax ;~ 01A2:2249
cs=0x1a2;eip=0x00224a; 	T(XOR(ch, ch));	// 5366                  xor     ch, ch ;~ 01A2:224A
cs=0x1a2;eip=0x00224c; 	J(CALL(sub_165a1,0));	// 5367                  call    sub_165A1 ;~ 01A2:224C
cs=0x1a2;eip=0x00224f; 	X(POP(si));	// 5368                  pop     si ;~ 01A2:224F
cs=0x1a2;eip=0x002250; 	J(JNZ(loc_122b0));	// 5369                  jnz     short loc_122B0 ;~ 01A2:2250
cs=0x1a2;eip=0x002252; 	X(OR(byte_1f857, 1));	// 5370                  or      ds:byte_1F857, 1 ;~ 01A2:2252
cs=0x1a2;eip=0x002257; 	T(bx = word_1f1f0;);	// 5371                  mov     bx, word_1F1F0 ;~ 01A2:2257
cs=0x1a2;eip=0x00225b; 	T(MOV(bx, *(dw*)(raddr(ds,bx))));	// 5372                  mov     bx, [bx] ;~ 01A2:225B
cs=0x1a2;eip=0x00225d; 	T(MOV(bp, *(dw*)(raddr(ds,bx+8))));	// 5373                  mov     bp, [bx+8] ;~ 01A2:225D
cs=0x1a2;eip=0x002260; 	T(MOV(es, *(dw*)(raddr(ds,bp+6))));	// 5374                  mov     es, word ptr ds:[bp+6] ;~ 01A2:2260
cs=0x1a2;eip=0x002264; 	T(MOV(bp, *(dw*)(raddr(ds,bp+8))));	// 5376                  mov     bp, ds:[bp+8] ;~ 01A2:2264
cs=0x1a2;eip=0x002268; 	T(XOR(ah, ah));	// 5377                  xor     ah, ah ;~ 01A2:2268
cs=0x1a2;eip=0x00226a; 	T(bx = 0x0FED9;);	// 5378                  mov     bx, 0FED9h ;~ 01A2:226A
cs=0x1a2;eip=0x00226d; 	T(MOV(al, *(raddr(es,bp+0x1D))));	// 5379                  mov     al, es:[bp+1Dh] ;~ 01A2:226D
cs=0x1a2;eip=0x002271; 	T(ADD(bx, ax));	// 5380                  add     bx, ax ;~ 01A2:2271
cs=0x1a2;eip=0x002273; 	T(MOV(al, *(raddr(ds,bx))));	// 5381                  mov     al, [bx] ;~ 01A2:2273
cs=0x1a2;eip=0x002275; 	T(CMP(byte_1f856, 0));	// 5382                  cmp     ds:byte_1F856, 0 ;~ 01A2:2275
cs=0x1a2;eip=0x00227a; 	J(JZ(loc_1228e));	// 5383                  jz      short loc_1228E ;~ 01A2:227A
cs=0x1a2;eip=0x00227c; 	T(CMP(al, byte_1f856));	// 5384                  cmp     al, ds:byte_1F856 ;~ 01A2:227C
cs=0x1a2;eip=0x002280; 	J(JZ(loc_12294));	// 5385                  jz      short loc_12294 ;~ 01A2:2280
cs=0x1a2;eip=0x002282; 	X(PUSH(ax));	// 5386                  push    ax ;~ 01A2:2282
cs=0x1a2;eip=0x002283; 	T(al = byte_1f856;);	// 5387                  mov     al, ds:byte_1F856 ;~ 01A2:2283
cs=0x1a2;eip=0x002286; 	T(OR(al, al));	// 5388                  or      al, al ;~ 01A2:2286
cs=0x1a2;eip=0x002288; 	J(JZ(loc_1228d));	// 5389                  jz      short loc_1228D ;~ 01A2:2288
cs=0x1a2;eip=0x00228a; 	J(CALL(sub_11613,0));	// 5390                  call    sub_11613 ;~ 01A2:228A
loc_1228d:
	// 4757 
cs=0x1a2;eip=0x00228d; 	X(POP(ax));	// 5393                  pop     ax ;~ 01A2:228D
loc_1228e:
	// 4758 
cs=0x1a2;eip=0x00228e; 	X(byte_1f856 = al;);	// 5396                  mov     ds:byte_1F856, al ;~ 01A2:228E
cs=0x1a2;eip=0x002291; 	J(CALL(sub_1164e,0));	// 5397                  call    sub_1164E ;~ 01A2:2291
loc_12294:
	// 4759 
cs=0x1a2;eip=0x002294; 	T(bx = word_1f1f2;);	// 5400                  mov     bx, word_1F1F2 ;~ 01A2:2294
cs=0x1a2;eip=0x002298; 	X(MOV(*(dw*)(raddr(ds,bx)), di));	// 5401                  mov     [bx], di ;~ 01A2:2298
cs=0x1a2;eip=0x00229a; 	X(INC(byte_1f772));	// 5402                  inc     ds:byte_1F772 ;~ 01A2:229A
cs=0x1a2;eip=0x00229e; 	X(ADD(word_1f1f2, 2));	// 5403                  add     word_1F1F2, 2 ;~ 01A2:229E
cs=0x1a2;eip=0x0022a3; 	X(word_1f71c = 0;);	// 5404                  mov     ds:word_1F71C, 0 ;~ 01A2:22A3
cs=0x1a2;eip=0x0022a9; 	X(PUSH(si));	// 5405                  push    si ;~ 01A2:22A9
cs=0x1a2;eip=0x0022aa; 	J(CALL(sub_167df,0));	// 5406                  call    sub_167DF ;~ 01A2:22AA
cs=0x1a2;eip=0x0022ad; 	X(POP(si));	// 5407                  pop     si ;~ 01A2:22AD
cs=0x1a2;eip=0x0022ae; 	J(return sub_122c4(0, _state););	// 5408                  jmp     short sub_122C4 ;~ 01A2:22AE
loc_122b0:
	// 4760 
cs=0x1a2;eip=0x0022b0; 	X(PUSH(ax));	// 5413                  push    ax ;~ 01A2:22B0
cs=0x1a2;eip=0x0022b1; 	T(ax = word_1f206;);	// 5414                  mov     ax, word_1F206 ;~ 01A2:22B1
cs=0x1a2;eip=0x0022b4; 	X(word_1f1f4 = ax;);	// 5415                  mov     word_1F1F4, ax ;~ 01A2:22B4
cs=0x1a2;eip=0x0022b7; 	T(ax = word_1f708;);	// 5416                  mov     ax, ds:word_1F708 ;~ 01A2:22B7
cs=0x1a2;eip=0x0022ba; 	X(word_1f396 = ax;);	// 5417                  mov     ds:word_1F396, ax ;~ 01A2:22BA
cs=0x1a2;eip=0x0022bd; 	X(POP(ax));	// 5418                  pop     ax ;~ 01A2:22BD
cs=0x1a2;eip=0x0022be; 	T(MOV(bx, *(dw*)(raddr(ds,si+2))));	// 5419                  mov     bx, [si+2] ;~ 01A2:22BE
cs=0x1a2;eip=0x0022c1; 	J(JMP(loc_121cb));	// 5420                  jmp     loc_121CB ;~ 01A2:22C1

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_121bf: 	goto loc_121bf;
        case m2c::kloc_121cb: 	goto loc_121cb;
        case m2c::kloc_121da: 	goto loc_121da;
        case m2c::kloc_121f0: 	goto loc_121f0;
        case m2c::kloc_1221d: 	goto loc_1221d;
        case m2c::kloc_12220: 	goto loc_12220;
        case m2c::kloc_1228d: 	goto loc_1228d;
        case m2c::kloc_1228e: 	goto loc_1228e;
        case m2c::kloc_12294: 	goto loc_12294;
        case m2c::kloc_122b0: 	goto loc_122b0;
        case m2c::ksub_121b0: 	goto sub_121b0;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_122c4(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_122c4:
    _begin:
cs=0x1a2;eip=0x0022c4; 	X(word_1f18e = sp;);	// 5429                  mov     word_1F18E, sp ;~ 01A2:22C4
cs=0x1a2;eip=0x0022c8; 	T(MOV(al, *(raddr(ds,si))));	// 5430                  mov     al, [si] ;~ 01A2:22C8
cs=0x1a2;eip=0x0022ca; 	T(ADD(si, 2));	// 5431                  add     si, 2 ;~ 01A2:22CA
cs=0x1a2;eip=0x0022cd; 	X(byte_1f865 = al;);	// 5432                  mov     ds:byte_1F865, al ;~ 01A2:22CD
loc_122d0:
	// 4761 
cs=0x1a2;eip=0x0022d0; 	T(MOV(bp, *(dw*)(raddr(ds,si))));	// 5435                  mov     bp, [si] ;~ 01A2:22D0
cs=0x1a2;eip=0x0022d2; 	T(ADD(si, 2));	// 5436                  add     si, 2 ;~ 01A2:22D2
cs=0x1a2;eip=0x0022d5; 	T(MOV(bx, *(dw*)(raddr(ds,bp+8))));	// 5437                  mov     bx, ds:[bp+8] ;~ 01A2:22D5
cs=0x1a2;eip=0x0022d9; 	T(MOV(es, *(dw*)(raddr(ds,bx+6))));	// 5438                  mov     es, word ptr [bx+6] ;~ 01A2:22D9
cs=0x1a2;eip=0x0022dc; 	T(MOV(bx, *(dw*)(raddr(ds,bx+8))));	// 5440                  mov     bx, [bx+8] ;~ 01A2:22DC
cs=0x1a2;eip=0x0022df; 	T(TEST(*(raddr(es,bx+0x0C)), 0x40));	// 5441                  test    byte ptr es:[bx+0Ch], 40h ;~ 01A2:22DF
cs=0x1a2;eip=0x0022e4; 	J(JZ(loc_122ef));	// 5442                  jz      short loc_122EF ;~ 01A2:22E4
cs=0x1a2;eip=0x0022e6; 	X(DEC(byte_1f865));	// 5443                  dec     ds:byte_1F865 ;~ 01A2:22E6
cs=0x1a2;eip=0x0022ea; 	J(JNZ(loc_122d0));	// 5444                  jnz     short loc_122D0 ;~ 01A2:22EA
cs=0x1a2;eip=0x0022ec; 	J(JMP(loc_123fd));	// 5445                  jmp     loc_123FD ;~ 01A2:22EC
loc_122ef:
	// 4762 
cs=0x1a2;eip=0x0022ef; 	T(ax = 0x0FDC2;);	// 5449                  mov     ax, 0FDC2h ;~ 01A2:22EF
cs=0x1a2;eip=0x0022f2; 	X(word_1f246 = ax;);	// 5450                  mov     word_1F246, ax ;~ 01A2:22F2
cs=0x1a2;eip=0x0022f5; 	J(CALL(sub_12a04,0));	// 5451                  call    sub_12A04 ;~ 01A2:22F5
cs=0x1a2;eip=0x0022f8; 	T(MOV(dx, *(dw*)(raddr(es,bx+0x0A))));	// 5452                  mov     dx, es:[bx+0Ah] ;~ 01A2:22F8
cs=0x1a2;eip=0x0022fc; 	T(CMP(dx, word_1f3c2));	// 5453                  cmp     dx, ds:word_1F3C2 ;~ 01A2:22FC
cs=0x1a2;eip=0x002300; 	J(JZ(loc_1233a));	// 5454                  jz      short loc_1233A ;~ 01A2:2300
cs=0x1a2;eip=0x002302; 	T(OR(dx, dx));	// 5455                  or      dx, dx ;~ 01A2:2302
cs=0x1a2;eip=0x002304; 	J(JS(loc_1232c));	// 5456                  js      short loc_1232C ;~ 01A2:2304
cs=0x1a2;eip=0x002306; 	X(PUSH(di));	// 5457                  push    di ;~ 01A2:2306
cs=0x1a2;eip=0x002307; 	X(word_1f3c2 = dx;);	// 5458                  mov     ds:word_1F3C2, dx ;~ 01A2:2307
cs=0x1a2;eip=0x00230b; 	X(PUSH(dx));	// 5459                  push    dx ;~ 01A2:230B
cs=0x1a2;eip=0x00230c; 	J(CALL(sub_12495,0));	// 5460                  call    sub_12495 ;~ 01A2:230C
cs=0x1a2;eip=0x00230f; 	X(POP(dx));	// 5461                  pop     dx ;~ 01A2:230F
cs=0x1a2;eip=0x002310; 	X(PUSH(bp));	// 5462                  push    bp ;~ 01A2:2310
cs=0x1a2;eip=0x002311; 	J(CALL(sub_175af,0));	// 5463                  call    sub_175AF ;~ 01A2:2311
cs=0x1a2;eip=0x002314; 	X(POP(bp));	// 5464                  pop     bp ;~ 01A2:2314
cs=0x1a2;eip=0x002315; 	X(MOV(*(raddr(ds,di+0x0C)), 0));	// 5465                  mov     byte ptr [di+0Ch], 0 ;~ 01A2:2315
cs=0x1a2;eip=0x002319; 	X(PUSH(ax));	// 5466                  push    ax ;~ 01A2:2319
cs=0x1a2;eip=0x00231a; 	X(PUSH(cx));	// 5467                  push    cx ;~ 01A2:231A
cs=0x1a2;eip=0x00231b; 	X(PUSH(dx));	// 5468                  push    dx ;~ 01A2:231B
cs=0x1a2;eip=0x00231c; 	T(ax = 0x0E5;);	// 5469                  mov     ax, 0E5h ;~ 01A2:231C
cs=0x1a2;eip=0x00231f; 	T(dh = 0x0AC;);	// 5470                  mov     dh, 0ACh ;~ 01A2:231F
cs=0x1a2;eip=0x002321; 	T(ch = 0x54;);	// 5471                  mov     ch, 54h ; 'T' ;~ 01A2:2321
cs=0x1a2;eip=0x002323; 	J(CALL(sub_18738,0));	// 5472                  call    sub_18738 ;~ 01A2:2323
cs=0x1a2;eip=0x002326; 	X(POP(dx));	// 5473                  pop     dx ;~ 01A2:2326
cs=0x1a2;eip=0x002327; 	X(POP(cx));	// 5474                  pop     cx ;~ 01A2:2327
cs=0x1a2;eip=0x002328; 	X(POP(ax));	// 5475                  pop     ax ;~ 01A2:2328
cs=0x1a2;eip=0x002329; 	X(POP(di));	// 5476                  pop     di ;~ 01A2:2329
cs=0x1a2;eip=0x00232a; 	J(JMP(loc_1233a));	// 5477                  jmp     short loc_1233A ;~ 01A2:232A
loc_1232c:
	// 4763 
cs=0x1a2;eip=0x00232c; 	J(CALL(sub_12495,0));	// 5481                  call    sub_12495 ;~ 01A2:232C
cs=0x1a2;eip=0x00232f; 	X(word_1f3c2 = 0;);	// 5482                  mov     ds:word_1F3C2, 0 ;~ 01A2:232F
cs=0x1a2;eip=0x002335; 	X(OR(byte_1f740, 0x80));	// 5483                  or      ds:byte_1F740, 80h ;~ 01A2:2335
loc_1233a:
	// 4764 
cs=0x1a2;eip=0x00233a; 	T(XOR(ah, ah));	// 5487                  xor     ah, ah ;~ 01A2:233A
cs=0x1a2;eip=0x00233c; 	T(TEST(*(raddr(es,bx+0x0C)), 2));	// 5488                  test    byte ptr es:[bx+0Ch], 2 ;~ 01A2:233C
cs=0x1a2;eip=0x002341; 	J(JZ(loc_12350));	// 5489                  jz      short loc_12350 ;~ 01A2:2341
cs=0x1a2;eip=0x002343; 	T(TEST(*(raddr(ds,bp+0x0F)), 4));	// 5490                  test    byte ptr ds:[bp+0Fh], 4 ;~ 01A2:2343
cs=0x1a2;eip=0x002348; 	J(JNZ(loc_12350));	// 5491                  jnz     short loc_12350 ;~ 01A2:2348
cs=0x1a2;eip=0x00234a; 	X(MOV(*(raddr(ds,di)), 2));	// 5492                  mov     byte ptr [di], 2 ;~ 01A2:234A
cs=0x1a2;eip=0x00234d; 	T(INC(di));	// 5493                  inc     di ;~ 01A2:234D
cs=0x1a2;eip=0x00234e; 	T(INC(ah));	// 5494                  inc     ah ;~ 01A2:234E
loc_12350:
	// 4765 
cs=0x1a2;eip=0x002350; 	T(XOR(dh, dh));	// 5498                  xor     dh, dh ;~ 01A2:2350
cs=0x1a2;eip=0x002352; 	T(MOV(dl, *(raddr(es,bx+0x17))));	// 5499                  mov     dl, es:[bx+17h] ;~ 01A2:2352
cs=0x1a2;eip=0x002356; 	T(OR(dl, dl));	// 5500                  or      dl, dl ;~ 01A2:2356
cs=0x1a2;eip=0x002358; 	J(JZ(loc_12373));	// 5501                  jz      short loc_12373 ;~ 01A2:2358
cs=0x1a2;eip=0x00235a; 	T(TEST(*(raddr(ds,bp+0x0F)), 0x40));	// 5503                  test    byte ptr ds:[bp+0Fh], 40h ;~ 01A2:235A
cs=0x1a2;eip=0x00235f; 	J(JNZ(loc_12373));	// 5504                  jnz     short loc_12373 ;~ 01A2:235F
cs=0x1a2;eip=0x002361; 	X(PUSH(si));	// 5505                  push    si ;~ 01A2:2361
cs=0x1a2;eip=0x002362; 	T(si = 0x0FA36;);	// 5506                  mov     si, 0FA36h ;~ 01A2:2362
cs=0x1a2;eip=0x002365; 	T(ADD(si, dx));	// 5507                  add     si, dx ;~ 01A2:2365
cs=0x1a2;eip=0x002367; 	T(MOV(al, *(raddr(ds,si))));	// 5508                  mov     al, [si] ;~ 01A2:2367
cs=0x1a2;eip=0x002369; 	X(POP(si));	// 5509                  pop     si ;~ 01A2:2369
cs=0x1a2;eip=0x00236a; 	T(OR(al, al));	// 5510                  or      al, al ;~ 01A2:236A
cs=0x1a2;eip=0x00236c; 	J(JS(loc_12373));	// 5511                  js      short loc_12373 ;~ 01A2:236C
cs=0x1a2;eip=0x00236e; 	X(MOV(*(raddr(ds,di)), al));	// 5512                  mov     [di], al ;~ 01A2:236E
cs=0x1a2;eip=0x002370; 	T(INC(di));	// 5513                  inc     di ;~ 01A2:2370
cs=0x1a2;eip=0x002371; 	T(INC(ah));	// 5514                  inc     ah ;~ 01A2:2371
loc_12373:
	// 4766 
cs=0x1a2;eip=0x002373; 	T(CMP(*(raddr(es,bx+0x1D)), 0x12));	// 5518                  cmp     byte ptr es:[bx+1Dh], 12h ;~ 01A2:2373
cs=0x1a2;eip=0x002378; 	J(JNZ(loc_12380));	// 5519                  jnz     short loc_12380 ;~ 01A2:2378
cs=0x1a2;eip=0x00237a; 	X(MOV(*(raddr(ds,di)), 0x0E));	// 5520                  mov     byte ptr [di], 0Eh ;~ 01A2:237A
cs=0x1a2;eip=0x00237d; 	T(INC(di));	// 5521                  inc     di ;~ 01A2:237D
cs=0x1a2;eip=0x00237e; 	T(INC(ah));	// 5522                  inc     ah ;~ 01A2:237E
loc_12380:
	// 4767 
cs=0x1a2;eip=0x002380; 	T(TEST(*(raddr(es,bx+0x0C)), 1));	// 5525                  test    byte ptr es:[bx+0Ch], 1 ;~ 01A2:2380
cs=0x1a2;eip=0x002385; 	J(JZ(loc_1239b));	// 5526                  jz      short loc_1239B ;~ 01A2:2385
cs=0x1a2;eip=0x002387; 	T(TEST(*(raddr(ds,bp+0x0F)), 4));	// 5527                  test    byte ptr ds:[bp+0Fh], 4 ;~ 01A2:2387
cs=0x1a2;eip=0x00238c; 	J(JNZ(loc_1239b));	// 5528                  jnz     short loc_1239B ;~ 01A2:238C
cs=0x1a2;eip=0x00238e; 	T(TEST(byte_1f873, 0x20));	// 5529                  test    ds:byte_1F873, 20h ;~ 01A2:238E
cs=0x1a2;eip=0x002393; 	J(JNZ(loc_1239b));	// 5530                  jnz     short loc_1239B ;~ 01A2:2393
cs=0x1a2;eip=0x002395; 	X(MOV(*(raddr(ds,di)), 0x0A));	// 5531                  mov     byte ptr [di], 0Ah ;~ 01A2:2395
cs=0x1a2;eip=0x002398; 	T(INC(di));	// 5532                  inc     di ;~ 01A2:2398
cs=0x1a2;eip=0x002399; 	T(INC(ah));	// 5533                  inc     ah ;~ 01A2:2399
loc_1239b:
	// 4768 
cs=0x1a2;eip=0x00239b; 	T(CMP(*(raddr(es,bx+0x17)), 6));	// 5537                  cmp     byte ptr es:[bx+17h], 6 ;~ 01A2:239B
cs=0x1a2;eip=0x0023a0; 	J(JZ(loc_123af));	// 5538                  jz      short loc_123AF ;~ 01A2:23A0
cs=0x1a2;eip=0x0023a2; 	T(TEST(*(raddr(es,bx+0x16)), 0x80));	// 5539                  test    byte ptr es:[bx+16h], 80h ;~ 01A2:23A2
cs=0x1a2;eip=0x0023a7; 	J(JNZ(loc_123af));	// 5540                  jnz     short loc_123AF ;~ 01A2:23A7
cs=0x1a2;eip=0x0023a9; 	X(MOV(*(raddr(ds,di)), 0x0B));	// 5541                  mov     byte ptr [di], 0Bh ;~ 01A2:23A9
cs=0x1a2;eip=0x0023ac; 	T(INC(di));	// 5542                  inc     di ;~ 01A2:23AC
cs=0x1a2;eip=0x0023ad; 	T(INC(ah));	// 5543                  inc     ah ;~ 01A2:23AD
loc_123af:
	// 4769 
cs=0x1a2;eip=0x0023af; 	X(MOV(*(raddr(ds,di)), 6));	// 5547                  mov     byte ptr [di], 6 ;~ 01A2:23AF
cs=0x1a2;eip=0x0023b2; 	T(INC(ah));	// 5548                  inc     ah ;~ 01A2:23B2
cs=0x1a2;eip=0x0023b4; 	X(byte_1f796 = ah;);	// 5549                  mov     ds:byte_1F796, ah ;~ 01A2:23B4
cs=0x1a2;eip=0x0023b8; 	T(TEST(byte_1f85a, 1));	// 5550                  test    ds:byte_1F85A, 1 ;~ 01A2:23B8
cs=0x1a2;eip=0x0023bd; 	J(JNZ(loc_123cb));	// 5551                  jnz     short loc_123CB ;~ 01A2:23BD
cs=0x1a2;eip=0x0023bf; 	T(TEST(byte_1f769, 0x80));	// 5552                  test    ds:byte_1F769, 80h ;~ 01A2:23BF
cs=0x1a2;eip=0x0023c4; 	J(JZ(loc_123c9));	// 5553                  jz      short loc_123C9 ;~ 01A2:23C4
cs=0x1a2;eip=0x0023c6; 	J(JMP(loc_1244c));	// 5554                  jmp     loc_1244C ;~ 01A2:23C6
loc_123c9:
	// 4770 
cs=0x1a2;eip=0x0023c9; 	J(JMP(loc_123f3));	// 5558                  jmp     short loc_123F3 ;~ 01A2:23C9
loc_123cb:
	// 4771 
cs=0x1a2;eip=0x0023cb; 	X(PUSH(ax));	// 5562                  push    ax ;~ 01A2:23CB
cs=0x1a2;eip=0x0023cc; 	X(PUSH(bx));	// 5563                  push    bx ;~ 01A2:23CC
cs=0x1a2;eip=0x0023cd; 	X(PUSH(cx));	// 5564                  push    cx ;~ 01A2:23CD
cs=0x1a2;eip=0x0023ce; 	X(PUSH(dx));	// 5565                  push    dx ;~ 01A2:23CE
cs=0x1a2;eip=0x0023cf; 	X(PUSH(bp));	// 5566                  push    bp ;~ 01A2:23CF
cs=0x1a2;eip=0x0023d0; 	X(PUSH(si));	// 5567                  push    si ;~ 01A2:23D0
cs=0x1a2;eip=0x0023d1; 	X(PUSH(di));	// 5568                  push    di ;~ 01A2:23D1
cs=0x1a2;eip=0x0023d2; 	X(PUSH(es));	// 5569                  push    es ;~ 01A2:23D2
cs=0x1a2;eip=0x0023d3; 	X(PUSH(ds));	// 5570                  push    ds ;~ 01A2:23D3
cs=0x1a2;eip=0x0023d4; 	J(CALL(sub_1c566,0));	// 5571                  call    sub_1C566 ;~ 01A2:23D4
cs=0x1a2;eip=0x0023d7; 	J(JNZ(loc_123df));	// 5572                  jnz     short loc_123DF ;~ 01A2:23D7
cs=0x1a2;eip=0x0023d9; 	J(CALL(sub_1c5dd,0));	// 5573                  call    sub_1C5DD ;~ 01A2:23D9
cs=0x1a2;eip=0x0023dc; 	X(byte_1f886 = al;);	// 5574                  mov     ds:byte_1F886, al ;~ 01A2:23DC
loc_123df:
	// 4772 
cs=0x1a2;eip=0x0023df; 	X(POP(ds));	// 5577                  pop     ds ;~ 01A2:23DF
cs=0x1a2;eip=0x0023e0; 	X(POP(es));	// 5579                  pop     es ;~ 01A2:23E0
cs=0x1a2;eip=0x0023e1; 	X(POP(di));	// 5581                  pop     di ;~ 01A2:23E1
cs=0x1a2;eip=0x0023e2; 	X(POP(si));	// 5582                  pop     si ;~ 01A2:23E2
cs=0x1a2;eip=0x0023e3; 	X(POP(bp));	// 5583                  pop     bp ;~ 01A2:23E3
cs=0x1a2;eip=0x0023e4; 	X(POP(dx));	// 5584                  pop     dx ;~ 01A2:23E4
cs=0x1a2;eip=0x0023e5; 	X(POP(cx));	// 5585                  pop     cx ;~ 01A2:23E5
cs=0x1a2;eip=0x0023e6; 	X(POP(bx));	// 5586                  pop     bx ;~ 01A2:23E6
cs=0x1a2;eip=0x0023e7; 	X(POP(ax));	// 5587                  pop     ax ;~ 01A2:23E7
cs=0x1a2;eip=0x0023e8; 	T(MOV(dl, *(raddr(ds,0x716))));	// 5588                  mov     dl, ds:716h ;~ 01A2:23E8
cs=0x1a2;eip=0x0023ec; 	T(OR(dl, dl));	// 5589                  or      dl, dl ;~ 01A2:23EC
cs=0x1a2;eip=0x0023ee; 	T(CMP(dl, 0x43));	// 5590                  cmp     dl, 43h ; 'C' ;~ 01A2:23EE
cs=0x1a2;eip=0x0023f1; 	J(JZ(loc_1244c));	// 5591                  jz      short loc_1244C ;~ 01A2:23F1
loc_123f3:
	// 4773 
cs=0x1a2;eip=0x0023f3; 	T(TEST(byte_1f85a, 2));	// 5595                  test    ds:byte_1F85A, 2 ;~ 01A2:23F3
cs=0x1a2;eip=0x0023f8; 	J(JNZ(loc_123fd));	// 5596                  jnz     short loc_123FD ;~ 01A2:23F8
cs=0x1a2;eip=0x0023fa; 	J(CALL(sub_1899e,0));	// 5597                  call    sub_1899E ;~ 01A2:23FA
loc_123fd:
	// 4774 
cs=0x1a2;eip=0x0023fd; 	X(PUSH(ax));	// 5601                  push    ax ;~ 01A2:23FD
cs=0x1a2;eip=0x0023fe; 	X(PUSH(dx));	// 5602                  push    dx ;~ 01A2:23FE
cs=0x1a2;eip=0x0023ff; 	T(MOV(ax, *(dw*)(raddr(ds,bp+4))));	// 5603                  mov     ax, ds:[bp+4] ;~ 01A2:23FF
cs=0x1a2;eip=0x002403; 	T(dx = 0;);	// 5604                  mov     dx, 0 ;~ 01A2:2403
cs=0x1a2;eip=0x002406; 	J(CALL(sub_16441,0));	// 5605                  call    sub_16441 ;~ 01A2:2406
cs=0x1a2;eip=0x002409; 	X(POP(dx));	// 5606                  pop     dx ;~ 01A2:2409
cs=0x1a2;eip=0x00240a; 	X(POP(ax));	// 5607                  pop     ax ;~ 01A2:240A
cs=0x1a2;eip=0x00240b; 	J(JZ(loc_1242b));	// 5608                  jz      short loc_1242B ;~ 01A2:240B
cs=0x1a2;eip=0x00240d; 	X(PUSH(di));	// 5609                  push    di ;~ 01A2:240D
cs=0x1a2;eip=0x00240e; 	X(PUSH(ax));	// 5610                  push    ax ;~ 01A2:240E
cs=0x1a2;eip=0x00240f; 	T(di = word_1f1f4;);	// 5611                  mov     di, word_1F1F4 ;~ 01A2:240F
cs=0x1a2;eip=0x002413; 	X(MOV(*(dw*)(raddr(ds,di)), 9));	// 5612                  mov     word ptr [di], 9 ;~ 01A2:2413
cs=0x1a2;eip=0x002417; 	X(MOV(*(dw*)(raddr(ds,di+2)), bp));	// 5613                  mov     [di+2], bp ;~ 01A2:2417
cs=0x1a2;eip=0x00241a; 	T(ax = 0;);	// 5614                  mov     ax, 0 ;~ 01A2:241A
cs=0x1a2;eip=0x00241d; 	X(MOV(*(dw*)(raddr(ds,di+4)), ax));	// 5615                  mov     [di+4], ax ;~ 01A2:241D
cs=0x1a2;eip=0x002420; 	X(ADD(word_1f1f4, 6));	// 5616                  add     word_1F1F4, 6 ;~ 01A2:2420
cs=0x1a2;eip=0x002425; 	X(INC(word_1f396));	// 5617                  inc     ds:word_1F396 ;~ 01A2:2425
cs=0x1a2;eip=0x002429; 	X(POP(ax));	// 5618                  pop     ax ;~ 01A2:2429
cs=0x1a2;eip=0x00242a; 	X(POP(di));	// 5619                  pop     di ;~ 01A2:242A
loc_1242b:
	// 4775 
cs=0x1a2;eip=0x00242b; 	X(PUSH(si));	// 5622                  push    si ;~ 01A2:242B
cs=0x1a2;eip=0x00242c; 	T(si = word_1f1f4;);	// 5623                  mov     si, word_1F1F4 ;~ 01A2:242C
cs=0x1a2;eip=0x002430; 	X(MOV(*(dw*)(raddr(ds,si)), 7));	// 5624                  mov     word ptr [si], 7 ;~ 01A2:2430
cs=0x1a2;eip=0x002434; 	T(ADD(si, 2));	// 5625                  add     si, 2 ;~ 01A2:2434
cs=0x1a2;eip=0x002437; 	X(MOV(*(dw*)(raddr(ds,si)), bp));	// 5626                  mov     [si], bp ;~ 01A2:2437
cs=0x1a2;eip=0x002439; 	T(ADD(si, 2));	// 5627                  add     si, 2 ;~ 01A2:2439
cs=0x1a2;eip=0x00243c; 	T(ADD(si, 2));	// 5628                  add     si, 2 ;~ 01A2:243C
cs=0x1a2;eip=0x00243f; 	X(word_1f1f4 = si;);	// 5629                  mov     word_1F1F4, si ;~ 01A2:243F
cs=0x1a2;eip=0x002443; 	X(INC(word_1f396));	// 5630                  inc     ds:word_1F396 ;~ 01A2:2443
cs=0x1a2;eip=0x002447; 	X(POP(si));	// 5631                  pop     si ;~ 01A2:2447
cs=0x1a2;eip=0x002448; 	T(al = 1;);	// 5632                  mov     al, 1 ;~ 01A2:2448
cs=0x1a2;eip=0x00244a; 	J(JMP(locret_12494));	// 5633                  jmp     short locret_12494 ;~ 01A2:244A
loc_1244c:
	// 4776 
cs=0x1a2;eip=0x00244c; 	J(CALL(sub_1d445,0));	// 5638                  call    sub_1D445 ;~ 01A2:244C
cs=0x1a2;eip=0x00244f; 	J(CALL(sub_1899e,0));	// 5639                  call    sub_1899E ;~ 01A2:244F
cs=0x1a2;eip=0x002452; 	J(CALL(sub_1d445,0));	// 5640                  call    sub_1D445 ;~ 01A2:2452
cs=0x1a2;eip=0x002455; 	T(OR(ah, ah));	// 5641                  or      ah, ah ;~ 01A2:2455
cs=0x1a2;eip=0x002457; 	J(JZ(locret_12494));	// 5642                  jz      short locret_12494 ;~ 01A2:2457
cs=0x1a2;eip=0x002459; 	J(CALL(sub_115eb,0));	// 5643                  call    sub_115EB ;~ 01A2:2459
cs=0x1a2;eip=0x00245c; 	J(CALL(sub_1d445,0));	// 5644                  call    sub_1D445 ;~ 01A2:245C
cs=0x1a2;eip=0x00245f; 	X(byte_1f795 = 0;);	// 5645                  mov     ds:byte_1F795, 0 ;~ 01A2:245F
cs=0x1a2;eip=0x002464; 	T(TEST(byte_1f873, 2));	// 5646                  test    ds:byte_1F873, 2 ;~ 01A2:2464
cs=0x1a2;eip=0x002469; 	X(PUSHF);	// 5647                  pushf ;~ 01A2:2469
cs=0x1a2;eip=0x00246a; 	X(AND(byte_1f873, 0x0FD));	// 5648                  and     ds:byte_1F873, 0FDh ;~ 01A2:246A
cs=0x1a2;eip=0x00246f; 	X(POPF);	// 5649                  popf ;~ 01A2:246F
cs=0x1a2;eip=0x002470; 	X(PUSH(bx));	// 5650                  push    bx ;~ 01A2:2470
cs=0x1a2;eip=0x002471; 	X(PUSH(bp));	// 5651                  push    bp ;~ 01A2:2471
cs=0x1a2;eip=0x002472; 	J(CALL(sub_12a33,0));	// 5652                  call    sub_12A33 ;~ 01A2:2472
cs=0x1a2;eip=0x002475; 	X(POP(si));	// 5653                  pop     si ;~ 01A2:2475
cs=0x1a2;eip=0x002476; 	X(POP(di));	// 5654                  pop     di ;~ 01A2:2476
cs=0x1a2;eip=0x002477; 	J(CALL(sub_12e2d,0));	// 5655                  call    sub_12E2D ;~ 01A2:2477
cs=0x1a2;eip=0x00247a; 	X(byte_1f76e = 2;);	// 5656                  mov     ds:byte_1F76E, 2 ;~ 01A2:247A
cs=0x1a2;eip=0x00247f; 	X(byte_1f76b = 0x0FF;);	// 5657                  mov     ds:byte_1F76B, 0FFh ;~ 01A2:247F
cs=0x1a2;eip=0x002484; 	J(CALL(sub_11685,0));	// 5658                  call    sub_11685 ;~ 01A2:2484
cs=0x1a2;eip=0x002487; 	J(CALL(sub_1d445,0));	// 5659                  call    sub_1D445 ;~ 01A2:2487
cs=0x1a2;eip=0x00248a; 	T(XOR(al, al));	// 5660                  xor     al, al ;~ 01A2:248A
cs=0x1a2;eip=0x00248c; 	J(CALL(sub_1dec8,0));	// 5661                  call    sub_1DEC8 ;~ 01A2:248C
cs=0x1a2;eip=0x00248f; 	X(byte_1f886 = 0;);	// 5662                  mov     ds:byte_1F886, 0 ;~ 01A2:248F
locret_12494:
	// 4777 
cs=0x1a2;eip=0x002494; 	J(RETN(0));	// 5666                  retn ;~ 01A2:2494

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_122d0: 	goto loc_122d0;
        case m2c::kloc_122ef: 	goto loc_122ef;
        case m2c::kloc_1232c: 	goto loc_1232c;
        case m2c::kloc_1233a: 	goto loc_1233a;
        case m2c::kloc_12350: 	goto loc_12350;
        case m2c::kloc_12373: 	goto loc_12373;
        case m2c::kloc_12380: 	goto loc_12380;
        case m2c::kloc_1239b: 	goto loc_1239b;
        case m2c::kloc_123af: 	goto loc_123af;
        case m2c::kloc_123c9: 	goto loc_123c9;
        case m2c::kloc_123cb: 	goto loc_123cb;
        case m2c::kloc_123df: 	goto loc_123df;
        case m2c::kloc_123f3: 	goto loc_123f3;
        case m2c::kloc_123fd: 	goto loc_123fd;
        case m2c::kloc_1242b: 	goto loc_1242b;
        case m2c::kloc_1244c: 	goto loc_1244c;
        case m2c::klocret_12494: 	goto locret_12494;
        case m2c::ksub_122c4: 	goto sub_122c4;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_12495(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_12495:
    _begin:
cs=0x1a2;eip=0x002495; 	X(OR(byte_1f740, 0x80));	// 5675                  or      ds:byte_1F740, 80h ;~ 01A2:2495
cs=0x1a2;eip=0x00249a; 	T(ax = 0x0E5;);	// 5676                  mov     ax, 0E5h ;~ 01A2:249A
cs=0x1a2;eip=0x00249d; 	T(dl = 0x0AC;);	// 5677                  mov     dl, 0ACh ;~ 01A2:249D
cs=0x1a2;eip=0x00249f; 	T(cx = 0x54;);	// 5678                  mov     cx, 54h ; 'T' ;~ 01A2:249F
cs=0x1a2;eip=0x0024a2; 	T(dh = 7;);	// 5679                  mov     dh, 7 ;~ 01A2:24A2
cs=0x1a2;eip=0x0024a4; 	T(bh = 0;);	// 5680                  mov     bh, 0 ;~ 01A2:24A4
cs=0x1a2;eip=0x0024a6; 	J(CALL(sub_15d80,0));	// 5681                  call    sub_15D80 ;~ 01A2:24A6
cs=0x1a2;eip=0x0024a9; 	J(RETN(0));	// 5682                  retn ;~ 01A2:24A9

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_12495: 	goto sub_12495;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group8(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group8:
    _begin:
sub_124aa:
	// 5689 
cs=0x1a2;eip=0x0024aa; 	J(CALL(seg000_d9f0_proc,m2c::kloc_1d9f0));	// 5691                  call    loc_1D9F0 ;~ 01A2:24AA
cs=0x1a2;eip=0x0024ad; 	T(dx = word_1f3ea;);	// 5692                  mov     dx, ds:word_1F3EA ;~ 01A2:24AD
cs=0x1a2;eip=0x0024b1; 	T(ax = 6;);	// 5693                  mov     ax, 6 ;~ 01A2:24B1
cs=0x1a2;eip=0x0024b4; 	J(CALL(sub_1410e,0));	// 5694                  call    sub_1410E ;~ 01A2:24B4
cs=0x1a2;eip=0x0024b7; 	T(si = di;);	// 5695                  mov     si, di ;~ 01A2:24B7
cs=0x1a2;eip=0x0024b9; 	T(MOV(dx, *(dw*)(raddr(ds,si+6))));	// 5696                  mov     dx, [si+6] ;~ 01A2:24B9
cs=0x1a2;eip=0x0024bc; 	T(ax = 2;);	// 5697                  mov     ax, 2 ;~ 01A2:24BC
cs=0x1a2;eip=0x0024bf; 	J(CALL(sub_1410e,0));	// 5698                  call    sub_1410E ;~ 01A2:24BF
cs=0x1a2;eip=0x0024c2; 	T(bx = 0x0FE3E;);	// 5699                  mov     bx, 0FE3Eh ;~ 01A2:24C2
cs=0x1a2;eip=0x0024c5; 	J(CALL(sub_12d81,0));	// 5700                  call    sub_12D81 ;~ 01A2:24C5
locret_124c8:
	// 4778 
cs=0x1a2;eip=0x0024c8; 	J(RETN(0));	// 5703                  retn ;~ 01A2:24C8
sub_124c9:
	// 5710 
cs=0x1a2;eip=0x0024c9; 	T(CMP(byte_1f81d, 0));	// 5711                  cmp     ds:byte_1F81D, 0 ;~ 01A2:24C9
cs=0x1a2;eip=0x0024ce; 	J(JZ(locret_124c8));	// 5712                  jz      short locret_124C8 ;~ 01A2:24CE
cs=0x1a2;eip=0x0024d0; 	X(word_1f6fc = 0;);	// 5713                  mov     ds:word_1F6FC, 0 ;~ 01A2:24D0
cs=0x1a2;eip=0x0024d6; 	T(es = *(dw*)(((db*)&off_1f194)+2););	// 5714                  mov     es, word ptr off_1F194+2 ;~ 01A2:24D6
cs=0x1a2;eip=0x0024da; 	T(di = word_1f198;);	// 5716                  mov     di, word_1F198 ;~ 01A2:24DA
cs=0x1a2;eip=0x0024de; 	T(si = word_1f1cc;);	// 5717                  mov     si, word_1F1CC ;~ 01A2:24DE
cs=0x1a2;eip=0x0024e2; 	T(MOV(dl, *(raddr(ds,si))));	// 5718                  mov     dl, [si] ;~ 01A2:24E2
cs=0x1a2;eip=0x0024e4; 	T(MOV(dh, *(raddr(ds,si+1))));	// 5719                  mov     dh, [si+1] ;~ 01A2:24E4
cs=0x1a2;eip=0x0024e7; 	T(MOV(ch, *(raddr(ds,si+2))));	// 5720                  mov     ch, [si+2] ;~ 01A2:24E7
cs=0x1a2;eip=0x0024ea; 	T(XOR(ah, ah));	// 5721                  xor     ah, ah ;~ 01A2:24EA
cs=0x1a2;eip=0x0024ec; 	T(al = byte_1f778;);	// 5722                  mov     al, ds:byte_1F778 ;~ 01A2:24EC
cs=0x1a2;eip=0x0024ef; 	T(AND(al, 0x0F));	// 5723                  and     al, 0Fh ;~ 01A2:24EF
cs=0x1a2;eip=0x0024f1; 	T(SHL(al, 1));	// 5724                  shl     al, 1 ;~ 01A2:24F1
cs=0x1a2;eip=0x0024f3; 	T(bx = 0x0FA04;);	// 5725                  mov     bx, 0FA04h ;~ 01A2:24F3
cs=0x1a2;eip=0x0024f6; 	T(ADD(bx, ax));	// 5726                  add     bx, ax ;~ 01A2:24F6
cs=0x1a2;eip=0x0024f8; 	T(MOV(al, *(raddr(ds,bx))));	// 5727                  mov     al, [bx] ;~ 01A2:24F8
cs=0x1a2;eip=0x0024fa; 	T(MOV(ah, *(raddr(ds,bx+1))));	// 5728                  mov     ah, [bx+1] ;~ 01A2:24FA
cs=0x1a2;eip=0x0024fd; 	T(ADD(dl, al));	// 5729                  add     dl, al ;~ 01A2:24FD
cs=0x1a2;eip=0x0024ff; 	T(ADD(dh, ah));	// 5730                  add     dh, ah ;~ 01A2:24FF
cs=0x1a2;eip=0x002501; 	J(CALL(sub_116e0,0));	// 5731                  call    sub_116E0 ;~ 01A2:2501
cs=0x1a2;eip=0x002504; 	J(JS(loc_1252f));	// 5732                  js      short loc_1252F ;~ 01A2:2504
cs=0x1a2;eip=0x002506; 	J(JZ(loc_1252f));	// 5733                  jz      short loc_1252F ;~ 01A2:2506
cs=0x1a2;eip=0x002508; 	T(di = word_1f1ac;);	// 5734                  mov     di, word_1F1AC ;~ 01A2:2508
cs=0x1a2;eip=0x00250c; 	T(MOV(bx, *(dw*)(raddr(ds,di+2))));	// 5735                  mov     bx, [di+2] ;~ 01A2:250C
cs=0x1a2;eip=0x00250f; 	T(MOV(ax, *(dw*)(raddr(ds,bx+4))));	// 5736                  mov     ax, [bx+4] ;~ 01A2:250F
cs=0x1a2;eip=0x002512; 	X(word_1f6fc = ax;);	// 5737                  mov     ds:word_1F6FC, ax ;~ 01A2:2512
cs=0x1a2;eip=0x002515; 	T(MOV(bp, *(dw*)(raddr(ds,bx+8))));	// 5738                  mov     bp, [bx+8] ;~ 01A2:2515
cs=0x1a2;eip=0x002518; 	T(MOV(es, *(dw*)(raddr(ds,bp+6))));	// 5739                  mov     es, word ptr ds:[bp+6] ;~ 01A2:2518
cs=0x1a2;eip=0x00251c; 	T(MOV(bp, *(dw*)(raddr(ds,bp+8))));	// 5741                  mov     bp, ds:[bp+8] ;~ 01A2:251C
cs=0x1a2;eip=0x002520; 	T(MOV(al, *(raddr(es,bp+0x16))));	// 5742                  mov     al, es:[bp+16h] ;~ 01A2:2520
cs=0x1a2;eip=0x002524; 	X(byte_1f843 = al;);	// 5743                  mov     ds:byte_1F843, al ;~ 01A2:2524
cs=0x1a2;eip=0x002527; 	X(*(dw*)(&unk_1f262) = es;);	// 5744                  mov     word ptr unk_1F262, es ;~ 01A2:2527
cs=0x1a2;eip=0x00252b; 	X(*(dw*)(&unk_1f264) = bp;);	// 5745                  mov     word ptr unk_1F264, bp ;~ 01A2:252B
loc_1252f:
	// 4779 
cs=0x1a2;eip=0x00252f; 	J(CALL(sub_1d448,0));	// 5750                  call    sub_1D448 ;~ 01A2:252F
cs=0x1a2;eip=0x002532; 	X(word_1f18e = sp;);	// 5751                  mov     word_1F18E, sp ;~ 01A2:2532
cs=0x1a2;eip=0x002536; 	J(CALL(sub_1d445,0));	// 5752                  call    sub_1D445 ;~ 01A2:2536
cs=0x1a2;eip=0x002539; 	J(CALL(sub_188c9,0));	// 5753                  call    sub_188C9 ;~ 01A2:2539
cs=0x1a2;eip=0x00253c; 	X(byte_1f740 = 0;);	// 5754                  mov     ds:byte_1F740, 0 ;~ 01A2:253C
cs=0x1a2;eip=0x002541; 	X(byte_1f770 = 0;);	// 5755                  mov     ds:byte_1F770, 0 ;~ 01A2:2541
cs=0x1a2;eip=0x002546; 	J(CALL(sub_1d445,0));	// 5756                  call    sub_1D445 ;~ 01A2:2546
loc_12549:
	// 4780 
cs=0x1a2;eip=0x002549; 	X(byte_1f795 = 1;);	// 5759                  mov     ds:byte_1F795, 1 ;~ 01A2:2549
cs=0x1a2;eip=0x00254e; 	T(dx = word_1f6f6;);	// 5760                  mov     dx, ds:word_1F6F6 ;~ 01A2:254E
cs=0x1a2;eip=0x002552; 	T(al = 8;);	// 5761                  mov     al, 8 ;~ 01A2:2552
loc_12554:
	// 4781 
cs=0x1a2;eip=0x002554; 	J(CALL(sub_1415c,0));	// 5764                  call    sub_1415C ;~ 01A2:2554
cs=0x1a2;eip=0x002557; 	J(JNS(loc_1255d));	// 5765                  jns     short loc_1255D ;~ 01A2:2557
cs=0x1a2;eip=0x002559; 	T(XOR(dx, dx));	// 5766                  xor     dx, dx ;~ 01A2:2559
cs=0x1a2;eip=0x00255b; 	J(JMP(loc_12554));	// 5767                  jmp     short loc_12554 ;~ 01A2:255B
loc_1255d:
	// 4782 
cs=0x1a2;eip=0x00255d; 	X(word_1f3d2 = dx;);	// 5771                  mov     ds:word_1F3D2, dx ;~ 01A2:255D
cs=0x1a2;eip=0x002561; 	T(MOV(ax, *(dw*)(raddr(ds,di))));	// 5772                  mov     ax, [di] ;~ 01A2:2561
cs=0x1a2;eip=0x002563; 	X(word_1f3d0 = ax;);	// 5773                  mov     ds:word_1F3D0, ax ;~ 01A2:2563
cs=0x1a2;eip=0x002566; 	J(CALL(sub_12c67,0));	// 5774                  call    sub_12C67 ;~ 01A2:2566
cs=0x1a2;eip=0x002569; 	J(CALL(sub_12a33,0));	// 5775                  call    sub_12A33 ;~ 01A2:2569
cs=0x1a2;eip=0x00256c; 	J(JZ(loc_1257c));	// 5776                  jz      short loc_1257C ;~ 01A2:256C
cs=0x1a2;eip=0x00256e; 	T(TEST(byte_1f873, 2));	// 5778                  test    ds:byte_1F873, 2 ;~ 01A2:256E
cs=0x1a2;eip=0x002573; 	X(PUSHF);	// 5779                  pushf ;~ 01A2:2573
cs=0x1a2;eip=0x002574; 	X(AND(byte_1f873, 0x0FD));	// 5780                  and     ds:byte_1F873, 0FDh ;~ 01A2:2574
cs=0x1a2;eip=0x002579; 	X(POPF);	// 5781                  popf ;~ 01A2:2579
cs=0x1a2;eip=0x00257a; 	J(JMP(loc_12549));	// 5782                  jmp     short loc_12549 ;~ 01A2:257A
loc_1257c:
	// 4783 
cs=0x1a2;eip=0x00257c; 	T(TEST(byte_1f873, 2));	// 5786                  test    ds:byte_1F873, 2 ;~ 01A2:257C
cs=0x1a2;eip=0x002581; 	X(PUSHF);	// 5787                  pushf ;~ 01A2:2581
cs=0x1a2;eip=0x002582; 	X(AND(byte_1f873, 0x0FD));	// 5788                  and     ds:byte_1F873, 0FDh ;~ 01A2:2582
cs=0x1a2;eip=0x002587; 	X(POPF);	// 5789                  popf ;~ 01A2:2587
cs=0x1a2;eip=0x002588; 	T(ax = word_1f3d2;);	// 5790                  mov     ax, ds:word_1F3D2 ;~ 01A2:2588
cs=0x1a2;eip=0x00258b; 	X(word_1f6f6 = ax;);	// 5791                  mov     ds:word_1F6F6, ax ;~ 01A2:258B
cs=0x1a2;eip=0x00258e; 	T(CMP(ch, 6));	// 5792                  cmp     ch, 6 ;~ 01A2:258E
cs=0x1a2;eip=0x002591; 	J(JZ(loc_125bc));	// 5793                  jz      short loc_125BC ;~ 01A2:2591
cs=0x1a2;eip=0x002593; 	T(si = word_1f1fc;);	// 5794                  mov     si, word_1F1FC ;~ 01A2:2593
cs=0x1a2;eip=0x002597; 	T(es = word_1f1fe;);	// 5795                  mov     es, word_1F1FE ;~ 01A2:2597
cs=0x1a2;eip=0x00259b; 	T(di = word_1f200;);	// 5797                  mov     di, word_1F200 ;~ 01A2:259B
cs=0x1a2;eip=0x00259f; 	J(CALL(sub_12e2d,0));	// 5798                  call    sub_12E2D ;~ 01A2:259F
cs=0x1a2;eip=0x0025a2; 	X(byte_1f76e = 2;);	// 5799                  mov     ds:byte_1F76E, 2 ;~ 01A2:25A2
cs=0x1a2;eip=0x0025a7; 	T(TEST(byte_1f85a, 2));	// 5800                  test    ds:byte_1F85A, 2 ;~ 01A2:25A7
cs=0x1a2;eip=0x0025ac; 	J(JZ(loc_125bc));	// 5801                  jz      short loc_125BC ;~ 01A2:25AC
cs=0x1a2;eip=0x0025ae; 	X(byte_1f76b = 1;);	// 5802                  mov     ds:byte_1F76B, 1 ;~ 01A2:25AE
cs=0x1a2;eip=0x0025b3; 	J(CALL(sub_1d445,0));	// 5803                  call    sub_1D445 ;~ 01A2:25B3
cs=0x1a2;eip=0x0025b6; 	J(CALL(sub_129cf,0));	// 5804                  call    sub_129CF ;~ 01A2:25B6
cs=0x1a2;eip=0x0025b9; 	J(CALL(sub_1d445,0));	// 5805                  call    sub_1D445 ;~ 01A2:25B9
loc_125bc:
	// 4784 
cs=0x1a2;eip=0x0025bc; 	X(byte_1f76b = 1;);	// 5809                  mov     ds:byte_1F76B, 1 ;~ 01A2:25BC
cs=0x1a2;eip=0x0025c1; 	J(CALL(sub_1d445,0));	// 5810                  call    sub_1D445 ;~ 01A2:25C1
cs=0x1a2;eip=0x0025c4; 	T(sp = word_1f18e;);	// 5811                  mov     sp, word_1F18E ;~ 01A2:25C4
cs=0x1a2;eip=0x0025c8; 	J(CALL(sub_19d33,0));	// 5812                  call    sub_19D33 ;~ 01A2:25C8
cs=0x1a2;eip=0x0025cb; 	J(CALL(sub_19d8e,0));	// 5813                  call    sub_19D8E ;~ 01A2:25CB
cs=0x1a2;eip=0x0025ce; 	J(RETN(0));	// 5814                  retn ;~ 01A2:25CE

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1252f: 	goto loc_1252f;
        case m2c::kloc_12549: 	goto loc_12549;
        case m2c::kloc_12554: 	goto loc_12554;
        case m2c::kloc_1255d: 	goto loc_1255d;
        case m2c::kloc_1257c: 	goto loc_1257c;
        case m2c::kloc_125bc: 	goto loc_125bc;
        case m2c::klocret_124c8: 	goto locret_124c8;
        case m2c::ksub_124aa: 	goto sub_124aa;
        case m2c::ksub_124c9: 	goto sub_124c9;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_125cf(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_125cf:
    _begin:
cs=0x1a2;eip=0x0025cf; 	J(CALL(sub_19d33,0));	// 5822                  call    sub_19D33 ;~ 01A2:25CF
cs=0x1a2;eip=0x0025d2; 	J(CALL(sub_19d8e,0));	// 5823                  call    sub_19D8E ;~ 01A2:25D2
cs=0x1a2;eip=0x0025d5; 	X(byte_1f81f = 0;);	// 5824                  mov     ds:byte_1F81F, 0 ;~ 01A2:25D5
cs=0x1a2;eip=0x0025da; 	X(byte_1f820 = 0;);	// 5825                  mov     ds:byte_1F820, 0 ;~ 01A2:25DA
cs=0x1a2;eip=0x0025df; 	X(byte_1f821 = 0;);	// 5826                  mov     ds:byte_1F821, 0 ;~ 01A2:25DF
cs=0x1a2;eip=0x0025e4; 	X(byte_1f822 = 0;);	// 5827                  mov     ds:byte_1F822, 0 ;~ 01A2:25E4
cs=0x1a2;eip=0x0025e9; 	X(byte_1f826 = 0;);	// 5828                  mov     ds:byte_1F826, 0 ;~ 01A2:25E9
cs=0x1a2;eip=0x0025ee; 	T(al = byte_1f81d;);	// 5829                  mov     al, ds:byte_1F81D ;~ 01A2:25EE
loc_125f1:
	// 4785 
cs=0x1a2;eip=0x0025f1; 	T(SUB(al, 4));	// 5832                  sub     al, 4 ;~ 01A2:25F1
cs=0x1a2;eip=0x0025f3; 	J(JG(loc_125f1));	// 5833                  jg      short loc_125F1 ;~ 01A2:25F3
cs=0x1a2;eip=0x0025f5; 	T(ADD(al, 4));	// 5834                  add     al, 4 ;~ 01A2:25F5
cs=0x1a2;eip=0x0025f7; 	T(DEC(al));	// 5835                  dec     al ;~ 01A2:25F7
cs=0x1a2;eip=0x0025f9; 	X(byte_1f825 = al;);	// 5836                  mov     ds:byte_1F825, al ;~ 01A2:25F9
cs=0x1a2;eip=0x0025fc; 	T(al = byte_1f81d;);	// 5837                  mov     al, ds:byte_1F81D ;~ 01A2:25FC
cs=0x1a2;eip=0x0025ff; 	T(DEC(al));	// 5838                  dec     al ;~ 01A2:25FF
cs=0x1a2;eip=0x002601; 	J(JNZ(loc_12605));	// 5839                  jnz     short loc_12605 ;~ 01A2:2601
cs=0x1a2;eip=0x002603; 	T(al = 1;);	// 5841                  mov     al, 1 ;~ 01A2:2603
loc_12605:
	// 4786 
cs=0x1a2;eip=0x002605; 	X(PUSH(dx));	// 5844                  push    dx ;~ 01A2:2605
cs=0x1a2;eip=0x002606; 	T(XOR(ah, ah));	// 5845                  xor     ah, ah ;~ 01A2:2606
cs=0x1a2;eip=0x002608; 	T(dl = 4;);	// 5846                  mov     dl, 4 ;~ 01A2:2608
cs=0x1a2;eip=0x00260a; 	T(DIV1(dl));	// 5847                  div     dl ;~ 01A2:260A
cs=0x1a2;eip=0x00260c; 	X(byte_1f824 = al;);	// 5848                  mov     ds:byte_1F824, al ;~ 01A2:260C
cs=0x1a2;eip=0x00260f; 	X(POP(dx));	// 5849                  pop     dx ;~ 01A2:260F
loc_12610:
	// 4787 
cs=0x1a2;eip=0x002610; 	J(CALL(sub_1366b,0));	// 5852                  call    sub_1366B ;~ 01A2:2610
cs=0x1a2;eip=0x002613; 	T(cx = 0x14;);	// 5853                  mov     cx, 14h ;~ 01A2:2613
cs=0x1a2;eip=0x002616; 	T(al = byte_1f81d;);	// 5854                  mov     al, ds:byte_1F81D ;~ 01A2:2616
cs=0x1a2;eip=0x002619; 	T(CMP(al, 4));	// 5855                  cmp     al, 4 ;~ 01A2:2619
cs=0x1a2;eip=0x00261b; 	J(JGE(loc_12627));	// 5856                  jge     short loc_12627 ;~ 01A2:261B
cs=0x1a2;eip=0x00261d; 	T(cl = al;);	// 5857                  mov     cl, al ;~ 01A2:261D
cs=0x1a2;eip=0x00261f; 	T(SHL(cl, 1));	// 5858                  shl     cl, 1 ;~ 01A2:261F
cs=0x1a2;eip=0x002621; 	T(SHL(cl, 1));	// 5859                  shl     cl, 1 ;~ 01A2:2621
cs=0x1a2;eip=0x002623; 	T(ADD(cl, al));	// 5860                  add     cl, al ;~ 01A2:2623
cs=0x1a2;eip=0x002625; 	T(XOR(ch, ch));	// 5861                  xor     ch, ch ;~ 01A2:2625
loc_12627:
	// 4788 
cs=0x1a2;eip=0x002627; 	T(dh = 0x13;);	// 5864                  mov     dh, 13h ;~ 01A2:2627
cs=0x1a2;eip=0x002629; 	T(al = byte_1f824;);	// 5865                  mov     al, ds:byte_1F824 ;~ 01A2:2629
cs=0x1a2;eip=0x00262c; 	T(CMP(al, 4));	// 5866                  cmp     al, 4 ;~ 01A2:262C
cs=0x1a2;eip=0x00262e; 	J(JGE(loc_1263c));	// 5867                  jge     short loc_1263C ;~ 01A2:262E
cs=0x1a2;eip=0x002630; 	T(INC(al));	// 5868                  inc     al ;~ 01A2:2630
cs=0x1a2;eip=0x002632; 	T(dh = al;);	// 5869                  mov     dh, al ;~ 01A2:2632
cs=0x1a2;eip=0x002634; 	T(SHL(dh, 1));	// 5870                  shl     dh, 1 ;~ 01A2:2634
cs=0x1a2;eip=0x002636; 	T(SHL(dh, 1));	// 5871                  shl     dh, 1 ;~ 01A2:2636
cs=0x1a2;eip=0x002638; 	T(ADD(dh, al));	// 5872                  add     dh, al ;~ 01A2:2638
cs=0x1a2;eip=0x00263a; 	T(DEC(dh));	// 5873                  dec     dh ;~ 01A2:263A
loc_1263c:
	// 4789 
cs=0x1a2;eip=0x00263c; 	T(ax = 0x10;);	// 5876                  mov     ax, 10h ;~ 01A2:263C
cs=0x1a2;eip=0x00263f; 	T(dl = 0x0A;);	// 5877                  mov     dl, 0Ah ;~ 01A2:263F
cs=0x1a2;eip=0x002641; 	X(*(dw*)(&off_1f736) = ax;);	// 5878                  mov     word ptr ds:off_1F736, ax ;~ 01A2:2641
cs=0x1a2;eip=0x002644; 	X(byte_1f865 = dl;);	// 5879                  mov     ds:byte_1F865, dl ;~ 01A2:2644
cs=0x1a2;eip=0x002648; 	X(ADD(*(dw*)(&off_1f736), 8));	// 5880                  add     word ptr ds:off_1F736, 8 ;~ 01A2:2648
cs=0x1a2;eip=0x00264d; 	X(ADD(byte_1f865, 0x10));	// 5881                  add     ds:byte_1F865, 10h ;~ 01A2:264D
cs=0x1a2;eip=0x002652; 	J(CALL(sub_18a87,0));	// 5882                  call    sub_18A87 ;~ 01A2:2652
cs=0x1a2;eip=0x002655; 	T(cl = byte_1f824;);	// 5883                  mov     cl, ds:byte_1F824 ;~ 01A2:2655
cs=0x1a2;eip=0x002659; 	T(CMP(cl, 3));	// 5884                  cmp     cl, 3 ;~ 01A2:2659
cs=0x1a2;eip=0x00265c; 	J(JLE(loc_12660));	// 5885                  jle     short loc_12660 ;~ 01A2:265C
cs=0x1a2;eip=0x00265e; 	T(cl = 3;);	// 5886                  mov     cl, 3 ;~ 01A2:265E
loc_12660:
	// 4790 
cs=0x1a2;eip=0x002660; 	T(al = byte_1f826;);	// 5889                  mov     al, ds:byte_1F826 ;~ 01A2:2660
cs=0x1a2;eip=0x002663; 	T(ah = 4;);	// 5890                  mov     ah, 4 ;~ 01A2:2663
cs=0x1a2;eip=0x002665; 	T(MUL1_1(ah));	// 5891                  mul     ah ;~ 01A2:2665
cs=0x1a2;eip=0x002667; 	T(bl = al;);	// 5892                  mov     bl, al ;~ 01A2:2667
cs=0x1a2;eip=0x002669; 	J(CALL(sub_129b8,0));	// 5893                  call    sub_129B8 ;~ 01A2:2669
loc_1266c:
	// 4791 
cs=0x1a2;eip=0x00266c; 	T(XOR(bl, bl));	// 5896                  xor     bl, bl ;~ 01A2:266C
loc_1266e:
	// 4792 
cs=0x1a2;eip=0x00266e; 	T(al = 8;);	// 5900                  mov     al, 8 ;~ 01A2:266E
cs=0x1a2;eip=0x002670; 	J(CALL(sub_1415c,0));	// 5901                  call    sub_1415C ;~ 01A2:2670
cs=0x1a2;eip=0x002673; 	T(OR(dx, dx));	// 5902                  or      dx, dx ;~ 01A2:2673
cs=0x1a2;eip=0x002675; 	J(JNS(loc_1267f));	// 5903                  jns     short loc_1267F ;~ 01A2:2675
cs=0x1a2;eip=0x002677; 	T(XOR(dx, dx));	// 5904                  xor     dx, dx ;~ 01A2:2677
cs=0x1a2;eip=0x002679; 	T(OR(bl, bl));	// 5905                  or      bl, bl ;~ 01A2:2679
cs=0x1a2;eip=0x00267b; 	J(JZ(loc_1266e));	// 5906                  jz      short loc_1266E ;~ 01A2:267B
cs=0x1a2;eip=0x00267d; 	J(JMP(loc_126d3));	// 5907                  jmp     short loc_126D3 ;~ 01A2:267D
loc_1267f:
	// 4793 
cs=0x1a2;eip=0x00267f; 	X(PUSH(ax));	// 5911                  push    ax ;~ 01A2:267F
cs=0x1a2;eip=0x002680; 	X(PUSH(bx));	// 5912                  push    bx ;~ 01A2:2680
cs=0x1a2;eip=0x002681; 	X(PUSH(cx));	// 5913                  push    cx ;~ 01A2:2681
cs=0x1a2;eip=0x002682; 	X(PUSH(dx));	// 5914                  push    dx ;~ 01A2:2682
cs=0x1a2;eip=0x002683; 	X(PUSH(bp));	// 5915                  push    bp ;~ 01A2:2683
cs=0x1a2;eip=0x002684; 	X(PUSH(si));	// 5916                  push    si ;~ 01A2:2684
cs=0x1a2;eip=0x002685; 	X(PUSH(di));	// 5917                  push    di ;~ 01A2:2685
cs=0x1a2;eip=0x002686; 	X(PUSH(es));	// 5918                  push    es ;~ 01A2:2686
cs=0x1a2;eip=0x002687; 	X(PUSH(ds));	// 5919                  push    ds ;~ 01A2:2687
cs=0x1a2;eip=0x002688; 	T(MOV(dx, *(dw*)(raddr(ds,di))));	// 5920                  mov     dx, [di] ;~ 01A2:2688
cs=0x1a2;eip=0x00268a; 	T(ax = 6;);	// 5921                  mov     ax, 6 ;~ 01A2:268A
cs=0x1a2;eip=0x00268d; 	J(CALL(sub_1410e,0));	// 5922                  call    sub_1410E ;~ 01A2:268D
cs=0x1a2;eip=0x002690; 	T(si = di;);	// 5923                  mov     si, di ;~ 01A2:2690
cs=0x1a2;eip=0x002692; 	T(MOV(dx, *(dw*)(raddr(ds,si+6))));	// 5924                  mov     dx, [si+6] ;~ 01A2:2692
cs=0x1a2;eip=0x002695; 	T(ax = 2;);	// 5925                  mov     ax, 2 ;~ 01A2:2695
cs=0x1a2;eip=0x002698; 	J(CALL(sub_1410e,0));	// 5926                  call    sub_1410E ;~ 01A2:2698
cs=0x1a2;eip=0x00269b; 	T(ax = *(dw*)(&off_1f736););	// 5927                  mov     ax, word ptr ds:off_1F736 ;~ 01A2:269B
cs=0x1a2;eip=0x00269e; 	T(dl = byte_1f865;);	// 5928                  mov     dl, ds:byte_1F865 ;~ 01A2:269E
cs=0x1a2;eip=0x0026a2; 	T(bh = 0x0E;);	// 5929                  mov     bh, 0Eh ;~ 01A2:26A2
cs=0x1a2;eip=0x0026a4; 	T(cx = 0x20;);	// 5930                  mov     cx, 20h ; ' ' ;~ 01A2:26A4
cs=0x1a2;eip=0x0026a7; 	T(dh = 0x20;);	// 5931                  mov     dh, 20h ; ' ' ;~ 01A2:26A7
cs=0x1a2;eip=0x0026a9; 	J(CALL(sub_15d80,0));	// 5932                  call    sub_15D80 ;~ 01A2:26A9
cs=0x1a2;eip=0x0026ac; 	J(CALL(seg000_ddff_proc,m2c::kloc_1ddff));	// 5933                  call    loc_1DDFF ;~ 01A2:26AC
cs=0x1a2;eip=0x0026af; 	T(ax = *(dw*)(&off_1f736););	// 5934                  mov     ax, word ptr ds:off_1F736 ;~ 01A2:26AF
cs=0x1a2;eip=0x0026b2; 	T(dl = byte_1f865;);	// 5935                  mov     dl, ds:byte_1F865 ;~ 01A2:26B2
cs=0x1a2;eip=0x0026b6; 	T(bl = 4;);	// 5936                  mov     bl, 4 ;~ 01A2:26B6
cs=0x1a2;eip=0x0026b8; 	T(bh = 5;);	// 5937                  mov     bh, 5 ;~ 01A2:26B8
cs=0x1a2;eip=0x0026ba; 	J(CALL(sub_128a0,0));	// 5938                  call    sub_128A0 ;~ 01A2:26BA
cs=0x1a2;eip=0x0026bd; 	X(POP(ds));	// 5939                  pop     ds ;~ 01A2:26BD
cs=0x1a2;eip=0x0026be; 	X(POP(es));	// 5940                  pop     es ;~ 01A2:26BE
cs=0x1a2;eip=0x0026bf; 	X(POP(di));	// 5942                  pop     di ;~ 01A2:26BF
cs=0x1a2;eip=0x0026c0; 	X(POP(si));	// 5943                  pop     si ;~ 01A2:26C0
cs=0x1a2;eip=0x0026c1; 	X(POP(bp));	// 5944                  pop     bp ;~ 01A2:26C1
cs=0x1a2;eip=0x0026c2; 	X(POP(dx));	// 5945                  pop     dx ;~ 01A2:26C2
cs=0x1a2;eip=0x0026c3; 	X(POP(cx));	// 5946                  pop     cx ;~ 01A2:26C3
cs=0x1a2;eip=0x0026c4; 	X(POP(bx));	// 5947                  pop     bx ;~ 01A2:26C4
cs=0x1a2;eip=0x0026c5; 	X(POP(ax));	// 5948                  pop     ax ;~ 01A2:26C5
cs=0x1a2;eip=0x0026c6; 	X(ADD(*(dw*)(&off_1f736), 0x28));	// 5949                  add     word ptr ds:off_1F736, 28h ; '(' ;~ 01A2:26C6
cs=0x1a2;eip=0x0026cb; 	T(INC(dx));	// 5950                  inc     dx ;~ 01A2:26CB
cs=0x1a2;eip=0x0026cc; 	T(INC(bl));	// 5951                  inc     bl ;~ 01A2:26CC
cs=0x1a2;eip=0x0026ce; 	T(CMP(bl, 4));	// 5952                  cmp     bl, 4 ;~ 01A2:26CE
cs=0x1a2;eip=0x0026d1; 	J(JNZ(loc_1266e));	// 5953                  jnz     short loc_1266E ;~ 01A2:26D1
loc_126d3:
	// 4794 
cs=0x1a2;eip=0x0026d3; 	X(*(dw*)(&off_1f736) = 0x18;);	// 5956                  mov     word ptr ds:off_1F736, 18h ;~ 01A2:26D3
cs=0x1a2;eip=0x0026d9; 	X(ADD(byte_1f865, 0x28));	// 5957                  add     ds:byte_1F865, 28h ; '(' ;~ 01A2:26D9
cs=0x1a2;eip=0x0026de; 	T(DEC(cl));	// 5958                  dec     cl ;~ 01A2:26DE
cs=0x1a2;eip=0x0026e0; 	J(JNS(loc_1266c));	// 5959                  jns     short loc_1266C ;~ 01A2:26E0
cs=0x1a2;eip=0x0026e2; 	T(bl = 1;);	// 5960                  mov     bl, 1 ;~ 01A2:26E2
cs=0x1a2;eip=0x0026e4; 	T(bh = 3;);	// 5961                  mov     bh, 3 ;~ 01A2:26E4
cs=0x1a2;eip=0x0026e6; 	T(dl = byte_1f81f;);	// 5962                  mov     dl, ds:byte_1F81F ;~ 01A2:26E6
cs=0x1a2;eip=0x0026ea; 	T(dh = byte_1f821;);	// 5963                  mov     dh, ds:byte_1F821 ;~ 01A2:26EA
cs=0x1a2;eip=0x0026ee; 	J(CALL(sub_1288a,0));	// 5964                  call    sub_1288A ;~ 01A2:26EE
cs=0x1a2;eip=0x0026f1; 	J(CALL(sub_128b9,0));	// 5965                  call    sub_128B9 ;~ 01A2:26F1
cs=0x1a2;eip=0x0026f4; 	J(CALL(sub_1d448,0));	// 5967                  call    sub_1D448 ;~ 01A2:26F4
loc_126f7:
	// 4795 
cs=0x1a2;eip=0x0026f7; 	X(PUSH(ax));	// 5971                  push    ax ;~ 01A2:26F7
cs=0x1a2;eip=0x0026f8; 	X(PUSH(bx));	// 5972                  push    bx ;~ 01A2:26F8
cs=0x1a2;eip=0x0026f9; 	X(PUSH(cx));	// 5973                  push    cx ;~ 01A2:26F9
cs=0x1a2;eip=0x0026fa; 	X(PUSH(dx));	// 5974                  push    dx ;~ 01A2:26FA
cs=0x1a2;eip=0x0026fb; 	X(PUSH(bp));	// 5975                  push    bp ;~ 01A2:26FB
cs=0x1a2;eip=0x0026fc; 	X(PUSH(si));	// 5976                  push    si ;~ 01A2:26FC
cs=0x1a2;eip=0x0026fd; 	X(PUSH(di));	// 5977                  push    di ;~ 01A2:26FD
cs=0x1a2;eip=0x0026fe; 	X(PUSH(es));	// 5978                  push    es ;~ 01A2:26FE
cs=0x1a2;eip=0x0026ff; 	X(PUSH(ds));	// 5979                  push    ds ;~ 01A2:26FF
cs=0x1a2;eip=0x002700; 	J(CALL(sub_1c566,0));	// 5980                  call    sub_1C566 ;~ 01A2:2700
cs=0x1a2;eip=0x002703; 	J(JNZ(loc_1270b));	// 5981                  jnz     short loc_1270B ;~ 01A2:2703
cs=0x1a2;eip=0x002705; 	J(CALL(sub_1c5dd,0));	// 5982                  call    sub_1C5DD ;~ 01A2:2705
cs=0x1a2;eip=0x002708; 	X(byte_1f886 = al;);	// 5983                  mov     ds:byte_1F886, al ;~ 01A2:2708
loc_1270b:
	// 4796 
cs=0x1a2;eip=0x00270b; 	X(POP(ds));	// 5986                  pop     ds ;~ 01A2:270B
cs=0x1a2;eip=0x00270c; 	X(POP(es));	// 5987                  pop     es ;~ 01A2:270C
cs=0x1a2;eip=0x00270d; 	X(POP(di));	// 5989                  pop     di ;~ 01A2:270D
cs=0x1a2;eip=0x00270e; 	X(POP(si));	// 5990                  pop     si ;~ 01A2:270E
cs=0x1a2;eip=0x00270f; 	X(POP(bp));	// 5991                  pop     bp ;~ 01A2:270F
cs=0x1a2;eip=0x002710; 	X(POP(dx));	// 5992                  pop     dx ;~ 01A2:2710
cs=0x1a2;eip=0x002711; 	X(POP(cx));	// 5993                  pop     cx ;~ 01A2:2711
cs=0x1a2;eip=0x002712; 	X(POP(bx));	// 5994                  pop     bx ;~ 01A2:2712
cs=0x1a2;eip=0x002713; 	X(POP(ax));	// 5995                  pop     ax ;~ 01A2:2713
cs=0x1a2;eip=0x002714; 	T(al = byte_1f886;);	// 5996                  mov     al, ds:byte_1F886 ;~ 01A2:2714
cs=0x1a2;eip=0x002717; 	T(OR(al, al));	// 5997                  or      al, al ;~ 01A2:2717
cs=0x1a2;eip=0x002719; 	J(JZ(loc_12728));	// 5998                  jz      short loc_12728 ;~ 01A2:2719
cs=0x1a2;eip=0x00271b; 	T(CMP(al, 0x1C));	// 5999                  cmp     al, 1Ch ;~ 01A2:271B
cs=0x1a2;eip=0x00271d; 	J(JZ(loc_12765));	// 6000                  jz      short loc_12765 ;~ 01A2:271D
cs=0x1a2;eip=0x00271f; 	T(bl = al;);	// 6001                  mov     bl, al ;~ 01A2:271F
cs=0x1a2;eip=0x002721; 	T(al = 6;);	// 6002                  mov     al, 6 ;~ 01A2:2721
cs=0x1a2;eip=0x002723; 	T(CMP(bl, 0x39));	// 6003                  cmp     bl, 39h ; '9' ;~ 01A2:2723
cs=0x1a2;eip=0x002726; 	J(JZ(loc_12769));	// 6004                  jz      short loc_12769 ;~ 01A2:2726
loc_12728:
	// 4797 
cs=0x1a2;eip=0x002728; 	J(CALL(sub_11043,0));	// 6007                  call    sub_11043 ;~ 01A2:2728
cs=0x1a2;eip=0x00272b; 	T(bl = byte_1f885;);	// 6008                  mov     bl, ds:byte_1F885 ;~ 01A2:272B
cs=0x1a2;eip=0x00272f; 	T(OR(bl, bl));	// 6009                  or      bl, bl ;~ 01A2:272F
cs=0x1a2;eip=0x002731; 	J(JZ(loc_126f7));	// 6010                  jz      short loc_126F7 ;~ 01A2:2731
cs=0x1a2;eip=0x002733; 	J(CALL(sub_19d8e,0));	// 6011                  call    sub_19D8E ;~ 01A2:2733
cs=0x1a2;eip=0x002736; 	T(dl = byte_1f81f;);	// 6012                  mov     dl, ds:byte_1F81F ;~ 01A2:2736
cs=0x1a2;eip=0x00273a; 	T(dh = byte_1f820;);	// 6013                  mov     dh, ds:byte_1F820 ;~ 01A2:273A
cs=0x1a2;eip=0x00273e; 	T(cl = byte_1f821;);	// 6014                  mov     cl, ds:byte_1F821 ;~ 01A2:273E
cs=0x1a2;eip=0x002742; 	T(bh = byte_1f826;);	// 6015                  mov     bh, ds:byte_1F826 ;~ 01A2:2742
cs=0x1a2;eip=0x002746; 	T(TEST(bl, 1));	// 6016                  test    bl, 1 ;~ 01A2:2746
cs=0x1a2;eip=0x002749; 	J(JNZ(loc_12790));	// 6017                  jnz     short loc_12790 ;~ 01A2:2749
cs=0x1a2;eip=0x00274b; 	T(TEST(bl, 2));	// 6018                  test    bl, 2 ;~ 01A2:274B
cs=0x1a2;eip=0x00274e; 	J(JNZ(loc_127b7));	// 6019                  jnz     short loc_127B7 ;~ 01A2:274E
cs=0x1a2;eip=0x002750; 	T(TEST(bl, 4));	// 6020                  test    bl, 4 ;~ 01A2:2750
cs=0x1a2;eip=0x002753; 	J(JZ(loc_12758));	// 6021                  jz      short loc_12758 ;~ 01A2:2753
cs=0x1a2;eip=0x002755; 	J(JMP(loc_127f8));	// 6022                  jmp     loc_127F8 ;~ 01A2:2755
loc_12758:
	// 4798 
cs=0x1a2;eip=0x002758; 	T(TEST(bl, 8));	// 6026                  test    bl, 8 ;~ 01A2:2758
cs=0x1a2;eip=0x00275b; 	J(JZ(loc_12760));	// 6027                  jz      short loc_12760 ;~ 01A2:275B
cs=0x1a2;eip=0x00275d; 	J(JMP(loc_1280c));	// 6028                  jmp     loc_1280C ;~ 01A2:275D
loc_12760:
	// 4799 
cs=0x1a2;eip=0x002760; 	T(TEST(bl, 0x80));	// 6032                  test    bl, 80h ;~ 01A2:2760
cs=0x1a2;eip=0x002763; 	J(JZ(loc_126f7));	// 6033                  jz      short loc_126F7 ;~ 01A2:2763
loc_12765:
	// 4800 
cs=0x1a2;eip=0x002765; 	T(al = 0x0FF;);	// 6036                  mov     al, 0FFh ;~ 01A2:2765
cs=0x1a2;eip=0x002767; 	T(OR(al, al));	// 6037                  or      al, al ;~ 01A2:2767
loc_12769:
	// 4801 
cs=0x1a2;eip=0x002769; 	X(PUSHF);	// 6040                  pushf ;~ 01A2:2769
cs=0x1a2;eip=0x00276a; 	X(PUSH(ax));	// 6041                  push    ax ;~ 01A2:276A
cs=0x1a2;eip=0x00276b; 	J(CALL(sub_19d33,0));	// 6042                  call    sub_19D33 ;~ 01A2:276B
cs=0x1a2;eip=0x00276e; 	J(CALL(sub_1366b,0));	// 6043                  call    sub_1366B ;~ 01A2:276E
cs=0x1a2;eip=0x002771; 	J(CALL(sub_1d448,0));	// 6044                  call    sub_1D448 ;~ 01A2:2771
cs=0x1a2;eip=0x002774; 	J(CALL(sub_1d445,0));	// 6045                  call    sub_1D445 ;~ 01A2:2774
cs=0x1a2;eip=0x002777; 	J(CALL(sub_188c9,0));	// 6046                  call    sub_188C9 ;~ 01A2:2777
cs=0x1a2;eip=0x00277a; 	X(byte_1f740 = 0;);	// 6047                  mov     ds:byte_1F740, 0 ;~ 01A2:277A
cs=0x1a2;eip=0x00277f; 	X(byte_1f770 = 0;);	// 6048                  mov     ds:byte_1F770, 0 ;~ 01A2:277F
cs=0x1a2;eip=0x002784; 	J(CALL(sub_1d445,0));	// 6049                  call    sub_1D445 ;~ 01A2:2784
cs=0x1a2;eip=0x002787; 	J(CALL(sub_12c67,0));	// 6050                  call    sub_12C67 ;~ 01A2:2787
cs=0x1a2;eip=0x00278a; 	J(CALL(sub_13514,0));	// 6051                  call    sub_13514 ;~ 01A2:278A
cs=0x1a2;eip=0x00278d; 	X(POP(ax));	// 6053                  pop     ax ;~ 01A2:278D
cs=0x1a2;eip=0x00278e; 	X(POPF);	// 6054                  popf ;~ 01A2:278E
cs=0x1a2;eip=0x00278f; 	J(RETN(0));	// 6055                  retn ;~ 01A2:278F
loc_12790:
	// 4802 
cs=0x1a2;eip=0x002790; 	T(DEC(cl));	// 6059                  dec     cl ;~ 01A2:2790
cs=0x1a2;eip=0x002792; 	J(JNS(loc_127ad));	// 6060                  jns     short loc_127AD ;~ 01A2:2792
cs=0x1a2;eip=0x002794; 	T(al = byte_1f824;);	// 6061                  mov     al, ds:byte_1F824 ;~ 01A2:2794
cs=0x1a2;eip=0x002797; 	T(CMP(al, 3));	// 6062                  cmp     al, 3 ;~ 01A2:2797
cs=0x1a2;eip=0x002799; 	J(JG(loc_127a1));	// 6063                  jg      short loc_127A1 ;~ 01A2:2799
cs=0x1a2;eip=0x00279b; 	T(cl = al;);	// 6064                  mov     cl, al ;~ 01A2:279B
cs=0x1a2;eip=0x00279d; 	T(dh = al;);	// 6065                  mov     dh, al ;~ 01A2:279D
cs=0x1a2;eip=0x00279f; 	J(JMP(loc_127de));	// 6066                  jmp     short loc_127DE ;~ 01A2:279F
loc_127a1:
	// 4803 
cs=0x1a2;eip=0x0027a1; 	T(XOR(cl, cl));	// 6070                  xor     cl, cl ;~ 01A2:27A1
cs=0x1a2;eip=0x0027a3; 	T(ch = 1;);	// 6071                  mov     ch, 1 ;~ 01A2:27A3
cs=0x1a2;eip=0x0027a5; 	T(DEC(bh));	// 6072                  dec     bh ;~ 01A2:27A5
cs=0x1a2;eip=0x0027a7; 	J(JNS(loc_127ad));	// 6073                  jns     short loc_127AD ;~ 01A2:27A7
cs=0x1a2;eip=0x0027a9; 	T(bh = byte_1f824;);	// 6074                  mov     bh, ds:byte_1F824 ;~ 01A2:27A9
loc_127ad:
	// 4804 
cs=0x1a2;eip=0x0027ad; 	T(DEC(dh));	// 6078                  dec     dh ;~ 01A2:27AD
cs=0x1a2;eip=0x0027af; 	J(JNS(loc_12825));	// 6079                  jns     short loc_12825 ;~ 01A2:27AF
cs=0x1a2;eip=0x0027b1; 	T(dh = byte_1f824;);	// 6080                  mov     dh, ds:byte_1F824 ;~ 01A2:27B1
cs=0x1a2;eip=0x0027b5; 	J(JMP(loc_127de));	// 6081                  jmp     short loc_127DE ;~ 01A2:27B5
loc_127b7:
	// 4805 
cs=0x1a2;eip=0x0027b7; 	T(INC(cl));	// 6086                  inc     cl ;~ 01A2:27B7
cs=0x1a2;eip=0x0027b9; 	T(CMP(cl, 4));	// 6087                  cmp     cl, 4 ;~ 01A2:27B9
cs=0x1a2;eip=0x0027bc; 	J(JNZ(loc_127d3));	// 6088                  jnz     short loc_127D3 ;~ 01A2:27BC
cs=0x1a2;eip=0x0027be; 	T(CMP(byte_1f824, 3));	// 6089                  cmp     ds:byte_1F824, 3 ;~ 01A2:27BE
cs=0x1a2;eip=0x0027c3; 	J(JZ(loc_127da));	// 6090                  jz      short loc_127DA ;~ 01A2:27C3
cs=0x1a2;eip=0x0027c5; 	T(cl = 3;);	// 6091                  mov     cl, 3 ;~ 01A2:27C5
cs=0x1a2;eip=0x0027c7; 	T(ch = 1;);	// 6092                  mov     ch, 1 ;~ 01A2:27C7
cs=0x1a2;eip=0x0027c9; 	T(INC(bh));	// 6093                  inc     bh ;~ 01A2:27C9
cs=0x1a2;eip=0x0027cb; 	T(CMP(bh, byte_1f824));	// 6094                  cmp     bh, ds:byte_1F824 ;~ 01A2:27CB
cs=0x1a2;eip=0x0027cf; 	J(JLE(loc_127d3));	// 6095                  jle     short loc_127D3 ;~ 01A2:27CF
cs=0x1a2;eip=0x0027d1; 	T(XOR(bh, bh));	// 6096                  xor     bh, bh ;~ 01A2:27D1
loc_127d3:
	// 4806 
cs=0x1a2;eip=0x0027d3; 	T(al = byte_1f824;);	// 6100                  mov     al, ds:byte_1F824 ;~ 01A2:27D3
cs=0x1a2;eip=0x0027d6; 	T(CMP(al, cl));	// 6101                  cmp     al, cl ;~ 01A2:27D6
cs=0x1a2;eip=0x0027d8; 	J(JGE(loc_127ea));	// 6102                  jge     short loc_127EA ;~ 01A2:27D8
loc_127da:
	// 4807 
cs=0x1a2;eip=0x0027da; 	T(XOR(dh, dh));	// 6105                  xor     dh, dh ;~ 01A2:27DA
cs=0x1a2;eip=0x0027dc; 	T(XOR(cl, cl));	// 6106                  xor     cl, cl ;~ 01A2:27DC
loc_127de:
	// 4808 
cs=0x1a2;eip=0x0027de; 	T(CMP(dl, byte_1f825));	// 6110                  cmp     dl, ds:byte_1F825 ;~ 01A2:27DE
cs=0x1a2;eip=0x0027e2; 	J(JL(loc_12825));	// 6111                  jl      short loc_12825 ;~ 01A2:27E2
cs=0x1a2;eip=0x0027e4; 	T(dl = byte_1f825;);	// 6112                  mov     dl, ds:byte_1F825 ;~ 01A2:27E4
cs=0x1a2;eip=0x0027e8; 	J(JMP(loc_12825));	// 6113                  jmp     short loc_12825 ;~ 01A2:27E8
loc_127ea:
	// 4809 
cs=0x1a2;eip=0x0027ea; 	T(INC(dh));	// 6117                  inc     dh ;~ 01A2:27EA
cs=0x1a2;eip=0x0027ec; 	T(CMP(dh, byte_1f824));	// 6118                  cmp     dh, ds:byte_1F824 ;~ 01A2:27EC
cs=0x1a2;eip=0x0027f0; 	J(JZ(loc_127de));	// 6119                  jz      short loc_127DE ;~ 01A2:27F0
cs=0x1a2;eip=0x0027f2; 	J(JL(loc_12825));	// 6120                  jl      short loc_12825 ;~ 01A2:27F2
cs=0x1a2;eip=0x0027f4; 	T(XOR(dh, dh));	// 6121                  xor     dh, dh ;~ 01A2:27F4
cs=0x1a2;eip=0x0027f6; 	J(JMP(loc_12825));	// 6122                  jmp     short loc_12825 ;~ 01A2:27F6
loc_127f8:
	// 4810 
cs=0x1a2;eip=0x0027f8; 	T(DEC(dl));	// 6126                  dec     dl ;~ 01A2:27F8
cs=0x1a2;eip=0x0027fa; 	J(JNS(loc_12825));	// 6127                  jns     short loc_12825 ;~ 01A2:27FA
cs=0x1a2;eip=0x0027fc; 	T(CMP(dh, byte_1f824));	// 6128                  cmp     dh, ds:byte_1F824 ;~ 01A2:27FC
cs=0x1a2;eip=0x002800; 	J(JNZ(loc_12808));	// 6129                  jnz     short loc_12808 ;~ 01A2:2800
cs=0x1a2;eip=0x002802; 	T(dl = byte_1f825;);	// 6130                  mov     dl, ds:byte_1F825 ;~ 01A2:2802
cs=0x1a2;eip=0x002806; 	J(JMP(loc_12825));	// 6131                  jmp     short loc_12825 ;~ 01A2:2806
loc_12808:
	// 4811 
cs=0x1a2;eip=0x002808; 	T(dl = 3;);	// 6135                  mov     dl, 3 ;~ 01A2:2808
cs=0x1a2;eip=0x00280a; 	J(JMP(loc_12825));	// 6136                  jmp     short loc_12825 ;~ 01A2:280A
loc_1280c:
	// 4812 
cs=0x1a2;eip=0x00280c; 	T(INC(dl));	// 6140                  inc     dl ;~ 01A2:280C
cs=0x1a2;eip=0x00280e; 	T(CMP(dh, byte_1f824));	// 6141                  cmp     dh, ds:byte_1F824 ;~ 01A2:280E
cs=0x1a2;eip=0x002812; 	J(JZ(loc_1281d));	// 6142                  jz      short loc_1281D ;~ 01A2:2812
cs=0x1a2;eip=0x002814; 	T(CMP(dl, 4));	// 6143                  cmp     dl, 4 ;~ 01A2:2814
cs=0x1a2;eip=0x002817; 	J(JL(loc_12825));	// 6144                  jl      short loc_12825 ;~ 01A2:2817
cs=0x1a2;eip=0x002819; 	T(XOR(dl, dl));	// 6145                  xor     dl, dl ;~ 01A2:2819
cs=0x1a2;eip=0x00281b; 	J(JMP(loc_12825));	// 6146                  jmp     short loc_12825 ;~ 01A2:281B
loc_1281d:
	// 4813 
cs=0x1a2;eip=0x00281d; 	T(CMP(dl, byte_1f825));	// 6150                  cmp     dl, ds:byte_1F825 ;~ 01A2:281D
cs=0x1a2;eip=0x002821; 	J(JLE(loc_12825));	// 6151                  jle     short loc_12825 ;~ 01A2:2821
cs=0x1a2;eip=0x002823; 	T(XOR(dl, dl));	// 6152                  xor     dl, dl ;~ 01A2:2823
loc_12825:
	// 4814 
cs=0x1a2;eip=0x002825; 	T(OR(ch, ch));	// 6156                  or      ch, ch ;~ 01A2:2825
cs=0x1a2;eip=0x002827; 	J(JZ(loc_1283c));	// 6157                  jz      short loc_1283C ;~ 01A2:2827
cs=0x1a2;eip=0x002829; 	X(byte_1f81f = dl;);	// 6158                  mov     ds:byte_1F81F, dl ;~ 01A2:2829
cs=0x1a2;eip=0x00282d; 	X(byte_1f820 = dh;);	// 6159                  mov     ds:byte_1F820, dh ;~ 01A2:282D
cs=0x1a2;eip=0x002831; 	X(byte_1f821 = cl;);	// 6160                  mov     ds:byte_1F821, cl ;~ 01A2:2831
cs=0x1a2;eip=0x002835; 	X(byte_1f826 = bh;);	// 6161                  mov     ds:byte_1F826, bh ;~ 01A2:2835
cs=0x1a2;eip=0x002839; 	J(JMP(loc_12610));	// 6162                  jmp     loc_12610 ;~ 01A2:2839
loc_1283c:
	// 4815 
cs=0x1a2;eip=0x00283c; 	X(byte_1f820 = dh;);	// 6166                  mov     ds:byte_1F820, dh ;~ 01A2:283C
cs=0x1a2;eip=0x002840; 	T(al = dl;);	// 6167                  mov     al, dl ;~ 01A2:2840
cs=0x1a2;eip=0x002842; 	T(ah = cl;);	// 6168                  mov     ah, cl ;~ 01A2:2842
cs=0x1a2;eip=0x002844; 	X(PUSH(ax));	// 6169                  push    ax ;~ 01A2:2844
cs=0x1a2;eip=0x002845; 	J(CALL(sub_1366b,0));	// 6170                  call    sub_1366B ;~ 01A2:2845
cs=0x1a2;eip=0x002848; 	J(CALL(seg000_d468_proc,m2c::kloc_1d468));	// 6171                  call    loc_1D468 ;~ 01A2:2848
cs=0x1a2;eip=0x00284b; 	T(bl = 4;);	// 6172                  mov     bl, 4 ;~ 01A2:284B
cs=0x1a2;eip=0x00284d; 	T(bh = 5;);	// 6173                  mov     bh, 5 ;~ 01A2:284D
cs=0x1a2;eip=0x00284f; 	T(dl = byte_1f81f;);	// 6174                  mov     dl, ds:byte_1F81F ;~ 01A2:284F
cs=0x1a2;eip=0x002853; 	T(dh = byte_1f821;);	// 6175                  mov     dh, ds:byte_1F821 ;~ 01A2:2853
cs=0x1a2;eip=0x002857; 	J(CALL(sub_1288a,0));	// 6176                  call    sub_1288A ;~ 01A2:2857
cs=0x1a2;eip=0x00285a; 	X(POP(ax));	// 6177                  pop     ax ;~ 01A2:285A
cs=0x1a2;eip=0x00285b; 	T(dl = al;);	// 6178                  mov     dl, al ;~ 01A2:285B
cs=0x1a2;eip=0x00285d; 	T(cl = ah;);	// 6179                  mov     cl, ah ;~ 01A2:285D
cs=0x1a2;eip=0x00285f; 	X(byte_1f81f = dl;);	// 6180                  mov     ds:byte_1F81F, dl ;~ 01A2:285F
cs=0x1a2;eip=0x002863; 	X(byte_1f821 = cl;);	// 6181                  mov     ds:byte_1F821, cl ;~ 01A2:2863
cs=0x1a2;eip=0x002867; 	T(dh = cl;);	// 6182                  mov     dh, cl ;~ 01A2:2867
cs=0x1a2;eip=0x002869; 	T(bl = 1;);	// 6183                  mov     bl, 1 ;~ 01A2:2869
cs=0x1a2;eip=0x00286b; 	T(bh = 3;);	// 6184                  mov     bh, 3 ;~ 01A2:286B
cs=0x1a2;eip=0x00286d; 	J(CALL(sub_1288a,0));	// 6185                  call    sub_1288A ;~ 01A2:286D
cs=0x1a2;eip=0x002870; 	T(al = byte_1f820;);	// 6186                  mov     al, ds:byte_1F820 ;~ 01A2:2870
cs=0x1a2;eip=0x002873; 	T(ah = 4;);	// 6187                  mov     ah, 4 ;~ 01A2:2873
cs=0x1a2;eip=0x002875; 	T(MUL1_1(ah));	// 6188                  mul     ah ;~ 01A2:2875
cs=0x1a2;eip=0x002877; 	T(bl = al;);	// 6189                  mov     bl, al ;~ 01A2:2877
cs=0x1a2;eip=0x002879; 	T(ADD(bl, byte_1f81f));	// 6190                  add     bl, ds:byte_1F81F ;~ 01A2:2879
cs=0x1a2;eip=0x00287d; 	X(byte_1f81e = bl;);	// 6191                  mov     ds:byte_1F81E, bl ;~ 01A2:287D
cs=0x1a2;eip=0x002881; 	J(CALL(sub_128b9,0));	// 6192                  call    sub_128B9 ;~ 01A2:2881
cs=0x1a2;eip=0x002884; 	J(CALL(sub_1d448,0));	// 6193                  call    sub_1D448 ;~ 01A2:2884
cs=0x1a2;eip=0x002887; 	J(JMP(loc_126f7));	// 6194                  jmp     loc_126F7 ;~ 01A2:2887

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_125f1: 	goto loc_125f1;
        case m2c::kloc_12605: 	goto loc_12605;
        case m2c::kloc_12610: 	goto loc_12610;
        case m2c::kloc_12627: 	goto loc_12627;
        case m2c::kloc_1263c: 	goto loc_1263c;
        case m2c::kloc_12660: 	goto loc_12660;
        case m2c::kloc_1266c: 	goto loc_1266c;
        case m2c::kloc_1266e: 	goto loc_1266e;
        case m2c::kloc_1267f: 	goto loc_1267f;
        case m2c::kloc_126d3: 	goto loc_126d3;
        case m2c::kloc_126f7: 	goto loc_126f7;
        case m2c::kloc_1270b: 	goto loc_1270b;
        case m2c::kloc_12728: 	goto loc_12728;
        case m2c::kloc_12758: 	goto loc_12758;
        case m2c::kloc_12760: 	goto loc_12760;
        case m2c::kloc_12765: 	goto loc_12765;
        case m2c::kloc_12769: 	goto loc_12769;
        case m2c::kloc_12790: 	goto loc_12790;
        case m2c::kloc_127a1: 	goto loc_127a1;
        case m2c::kloc_127ad: 	goto loc_127ad;
        case m2c::kloc_127b7: 	goto loc_127b7;
        case m2c::kloc_127d3: 	goto loc_127d3;
        case m2c::kloc_127da: 	goto loc_127da;
        case m2c::kloc_127de: 	goto loc_127de;
        case m2c::kloc_127ea: 	goto loc_127ea;
        case m2c::kloc_127f8: 	goto loc_127f8;
        case m2c::kloc_12808: 	goto loc_12808;
        case m2c::kloc_1280c: 	goto loc_1280c;
        case m2c::kloc_1281d: 	goto loc_1281d;
        case m2c::kloc_12825: 	goto loc_12825;
        case m2c::kloc_1283c: 	goto loc_1283c;
        case m2c::ksub_125cf: 	goto sub_125cf;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group9(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group9:
    _begin:
sub_1288a:
	// 6201 
cs=0x1a2;eip=0x00288a; 	T(al = dl;);	// 6203                  mov     al, dl ;~ 01A2:288A
cs=0x1a2;eip=0x00288c; 	T(ah = 0x28;);	// 6204                  mov     ah, 28h ; '(' ;~ 01A2:288C
cs=0x1a2;eip=0x00288e; 	T(MUL1_1(ah));	// 6205                  mul     ah ;~ 01A2:288E
cs=0x1a2;eip=0x002890; 	T(ADD(ax, 0x18));	// 6206                  add     ax, 18h ;~ 01A2:2890
cs=0x1a2;eip=0x002893; 	X(PUSH(ax));	// 6207                  push    ax ;~ 01A2:2893
cs=0x1a2;eip=0x002894; 	T(al = dh;);	// 6208                  mov     al, dh ;~ 01A2:2894
cs=0x1a2;eip=0x002896; 	T(ah = 0x28;);	// 6209                  mov     ah, 28h ; '(' ;~ 01A2:2896
cs=0x1a2;eip=0x002898; 	T(MUL1_1(ah));	// 6210                  mul     ah ;~ 01A2:2898
cs=0x1a2;eip=0x00289a; 	T(ADD(ax, 0x1A));	// 6211                  add     ax, 1Ah ;~ 01A2:289A
cs=0x1a2;eip=0x00289d; 	T(dl = al;);	// 6212                  mov     dl, al ;~ 01A2:289D
cs=0x1a2;eip=0x00289f; 	X(POP(ax));	// 6213                  pop     ax ;~ 01A2:289F
sub_128a0:
	// 6220 
cs=0x1a2;eip=0x0028a0; 	T(DEC(ax));	// 6221                  dec     ax ;~ 01A2:28A0
cs=0x1a2;eip=0x0028a1; 	T(DEC(dl));	// 6222                  dec     dl ;~ 01A2:28A1
cs=0x1a2;eip=0x0028a3; 	T(cx = 0x22;);	// 6223                  mov     cx, 22h ; '"' ;~ 01A2:28A3
cs=0x1a2;eip=0x0028a6; 	T(dh = 0x22;);	// 6224                  mov     dh, 22h ; '"' ;~ 01A2:28A6
cs=0x1a2;eip=0x0028a8; 	J(CALL(sub_1647e,0));	// 6225                  call    sub_1647E ;~ 01A2:28A8
cs=0x1a2;eip=0x0028ab; 	T(INC(ax));	// 6226                  inc     ax ;~ 01A2:28AB
cs=0x1a2;eip=0x0028ac; 	T(INC(dl));	// 6227                  inc     dl ;~ 01A2:28AC
cs=0x1a2;eip=0x0028ae; 	T(cx = 0x20;);	// 6228                  mov     cx, 20h ; ' ' ;~ 01A2:28AE
cs=0x1a2;eip=0x0028b1; 	T(dh = 0x20;);	// 6229                  mov     dh, 20h ; ' ' ;~ 01A2:28B1
cs=0x1a2;eip=0x0028b3; 	T(bl = bh;);	// 6230                  mov     bl, bh ;~ 01A2:28B3
cs=0x1a2;eip=0x0028b5; 	J(CALL(sub_1647e,0));	// 6231                  call    sub_1647E ;~ 01A2:28B5
cs=0x1a2;eip=0x0028b8; 	J(RETN(0));	// 6232                  retn ;~ 01A2:28B8

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1288a: 	goto sub_1288a;
        case m2c::ksub_128a0: 	goto sub_128a0;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group10(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group10:
    _begin:
sub_128b9:
	// 6239 
cs=0x1a2;eip=0x0028b9; 	T(al = byte_1f820;);	// 6244                  mov     al, ds:byte_1F820 ;~ 01A2:28B9
cs=0x1a2;eip=0x0028bc; 	T(ah = 4;);	// 6245                  mov     ah, 4 ;~ 01A2:28BC
cs=0x1a2;eip=0x0028be; 	T(MUL1_1(ah));	// 6246                  mul     ah ;~ 01A2:28BE
cs=0x1a2;eip=0x0028c0; 	T(ADD(al, byte_1f81f));	// 6247                  add     al, ds:byte_1F81F ;~ 01A2:28C0
cs=0x1a2;eip=0x0028c4; 	T(bl = al;);	// 6248                  mov     bl, al ;~ 01A2:28C4
cs=0x1a2;eip=0x0028c6; 	J(CALL(sub_129b8,0));	// 6249                  call    sub_129B8 ;~ 01A2:28C6
cs=0x1a2;eip=0x0028c9; 	X(word_1f6f6 = dx;);	// 6250                  mov     ds:word_1F6F6, dx ;~ 01A2:28C9
cs=0x1a2;eip=0x0028cd; 	T(MOV(dx, *(dw*)(raddr(ds,di))));	// 6251                  mov     dx, [di] ;~ 01A2:28CD
cs=0x1a2;eip=0x0028cf; 	T(ax = 6;);	// 6252                  mov     ax, 6 ;~ 01A2:28CF
cs=0x1a2;eip=0x0028d2; 	J(CALL(sub_1410e,0));	// 6253                  call    sub_1410E ;~ 01A2:28D2
cs=0x1a2;eip=0x0028d5; 	T(si = di;);	// 6254                  mov     si, di ;~ 01A2:28D5
cs=0x1a2;eip=0x0028d7; 	T(MOV(dx, *(dw*)(raddr(ds,di+6))));	// 6255                  mov     dx, [di+6] ;~ 01A2:28D7
cs=0x1a2;eip=0x0028da; 	T(ax = 2;);	// 6256                  mov     ax, 2 ;~ 01A2:28DA
cs=0x1a2;eip=0x0028dd; 	J(CALL(sub_1410e,0));	// 6257                  call    sub_1410E ;~ 01A2:28DD
cs=0x1a2;eip=0x0028e0; 	T(bp = di;);	// 6258                  mov     bp, di ;~ 01A2:28E0
cs=0x1a2;eip=0x0028e2; 	T(XOR(ah, ah));	// 6259                  xor     ah, ah ;~ 01A2:28E2
cs=0x1a2;eip=0x0028e4; 	T(MOV(al, *(raddr(ds,si+0x0C))));	// 6260                  mov     al, [si+0Ch] ;~ 01A2:28E4
cs=0x1a2;eip=0x0028e7; 	T(ADD(ax, si));	// 6261                  add     ax, si ;~ 01A2:28E7
cs=0x1a2;eip=0x0028e9; 	X(*(dw*)(&off_1f736) = ax;);	// 6262                  mov     word ptr ds:off_1F736, ax ;~ 01A2:28E9
cs=0x1a2;eip=0x0028ec; 	X(word_1f72c = 0x7C4;);	// 6263                  mov     ds:word_1F72C, 7C4h ;~ 01A2:28EC
cs=0x1a2;eip=0x0028f2; 	T(XOR(dh, dh));	// 6264                  xor     dh, dh ;~ 01A2:28F2
cs=0x1a2;eip=0x0028f4; 	T(MOV(dl, *(raddr(ds,si+0x0B))));	// 6265                  mov     dl, [si+0Bh] ;~ 01A2:28F4
cs=0x1a2;eip=0x0028f7; 	T(OR(dl, dl));	// 6266                  or      dl, dl ;~ 01A2:28F7
cs=0x1a2;eip=0x0028f9; 	J(JZ(loc_1293a));	// 6267                  jz      short loc_1293A ;~ 01A2:28F9
cs=0x1a2;eip=0x0028fb; 	T(DEC(dl));	// 6268                  dec     dl ;~ 01A2:28FB
cs=0x1a2;eip=0x0028fd; 	T(ADD(si, 0x10));	// 6269                  add     si, 10h ;~ 01A2:28FD
loc_12900:
	// 4816 
cs=0x1a2;eip=0x002900; 	T(MOV(al, *(raddr(ds,si+1))));	// 6272                  mov     al, [si+1] ;~ 01A2:2900
cs=0x1a2;eip=0x002903; 	T(CMP(al, 0x90));	// 6273                  cmp     al, 90h ;~ 01A2:2903
cs=0x1a2;eip=0x002905; 	J(JZ(loc_12927));	// 6274                  jz      short loc_12927 ;~ 01A2:2905
cs=0x1a2;eip=0x002907; 	T(CMP(al, 0x85));	// 6275                  cmp     al, 85h ;~ 01A2:2907
cs=0x1a2;eip=0x002909; 	J(JNZ(loc_12912));	// 6276                  jnz     short loc_12912 ;~ 01A2:2909
cs=0x1a2;eip=0x00290b; 	T(CMP(*(raddr(es,bp+0x17)), 6));	// 6277                  cmp     byte ptr es:[bp+17h], 6 ;~ 01A2:290B
cs=0x1a2;eip=0x002910; 	J(JZ(loc_1291e));	// 6278                  jz      short loc_1291E ;~ 01A2:2910
loc_12912:
	// 4817 
cs=0x1a2;eip=0x002912; 	T(XOR(ah, ah));	// 6281                  xor     ah, ah ;~ 01A2:2912
cs=0x1a2;eip=0x002914; 	T(MOV(al, *(raddr(ds,si))));	// 6282                  mov     al, [si] ;~ 01A2:2914
cs=0x1a2;eip=0x002916; 	T(ADD(si, ax));	// 6283                  add     si, ax ;~ 01A2:2916
cs=0x1a2;eip=0x002918; 	T(DEC(dl));	// 6284                  dec     dl ;~ 01A2:2918
cs=0x1a2;eip=0x00291a; 	J(JNS(loc_12900));	// 6285                  jns     short loc_12900 ;~ 01A2:291A
cs=0x1a2;eip=0x00291c; 	J(JMP(loc_1293a));	// 6286                  jmp     short loc_1293A ;~ 01A2:291C
loc_1291e:
	// 4818 
cs=0x1a2;eip=0x00291e; 	T(ch = 0x1C;);	// 6290                  mov     ch, 1Ch ;~ 01A2:291E
cs=0x1a2;eip=0x002920; 	J(CALL(sub_12967,0));	// 6291                  call    sub_12967 ;~ 01A2:2920
cs=0x1a2;eip=0x002923; 	J(JNZ(loc_1299d));	// 6292                  jnz     short loc_1299D ;~ 01A2:2923
cs=0x1a2;eip=0x002925; 	J(JMP(loc_1294b));	// 6293                  jmp     short loc_1294B ;~ 01A2:2925
loc_12927:
	// 4819 
cs=0x1a2;eip=0x002927; 	T(ch = 0x48;);	// 6297                  mov     ch, 48h ; 'H' ;~ 01A2:2927
cs=0x1a2;eip=0x002929; 	J(CALL(sub_12967,0));	// 6298                  call    sub_12967 ;~ 01A2:2929
cs=0x1a2;eip=0x00292c; 	J(JNZ(loc_1293a));	// 6299                  jnz     short loc_1293A ;~ 01A2:292C
cs=0x1a2;eip=0x00292e; 	T(di = word_1f72c;);	// 6300                  mov     di, ds:word_1F72C ;~ 01A2:292E
cs=0x1a2;eip=0x002932; 	X(MOV(*(raddr(ds,di)), 0x20));	// 6301                  mov     byte ptr [di], 20h ; ' ' ;~ 01A2:2932
cs=0x1a2;eip=0x002935; 	T(INC(di));	// 6302                  inc     di ;~ 01A2:2935
cs=0x1a2;eip=0x002936; 	X(word_1f72c = di;);	// 6303                  mov     ds:word_1F72C, di ;~ 01A2:2936
loc_1293a:
	// 4820 
cs=0x1a2;eip=0x00293a; 	T(di = *(dw*)(&off_1f736););	// 6307                  mov     di, word ptr ds:off_1F736 ;~ 01A2:293A
cs=0x1a2;eip=0x00293e; 	T(si = word_1f72c;);	// 6308                  mov     si, ds:word_1F72C ;~ 01A2:293E
cs=0x1a2;eip=0x002942; 	J(CALL(sub_184d9,0));	// 6309                  call    sub_184D9 ;~ 01A2:2942
cs=0x1a2;eip=0x002945; 	J(JNZ(loc_1294b));	// 6310                  jnz     short loc_1294B ;~ 01A2:2945
cs=0x1a2;eip=0x002947; 	X(MOV(*(raddr(ds,si-1)), 0));	// 6311                  mov     byte ptr [si-1], 0 ;~ 01A2:2947
loc_1294b:
	// 4821 
cs=0x1a2;eip=0x00294b; 	X(byte_1f827 = 1;);	// 6315                  mov     ds:byte_1F827, 1 ;~ 01A2:294B
cs=0x1a2;eip=0x002950; 	X(MOV(*(raddr(ds,si)), 0));	// 6316                  mov     byte ptr [si], 0 ;~ 01A2:2950
cs=0x1a2;eip=0x002953; 	T(ax = 0x7C4;);	// 6317                  mov     ax, 7C4h ;~ 01A2:2953
cs=0x1a2;eip=0x002956; 	T(CMP(ax, si));	// 6318                  cmp     ax, si ;~ 01A2:2956
cs=0x1a2;eip=0x002958; 	J(JZ(loc_1299d));	// 6319                  jz      short loc_1299D ;~ 01A2:2958
cs=0x1a2;eip=0x00295a; 	T(di = ax;);	// 6320                  mov     di, ax ;~ 01A2:295A
cs=0x1a2;eip=0x00295c; 	T(al = 0x0E;);	// 6321                  mov     al, 0Eh ;~ 01A2:295C
cs=0x1a2;eip=0x00295e; 	J(CALL(sub_15dcb,0));	// 6322                  call    sub_15DCB ;~ 01A2:295E
cs=0x1a2;eip=0x002961; 	X(byte_1f827 = 0;);	// 6323                  mov     ds:byte_1F827, 0 ;~ 01A2:2961
cs=0x1a2;eip=0x002966; 	J(RETN(0));	// 6324                  retn ;~ 01A2:2966
seg000_299d_proc:
	// 6377 
loc_1299d:
	// 4827 
cs=0x1a2;eip=0x00299d; 	T(MOV(ax, *(dw*)(raddr(es,bp+0x0A))));	// 6379                  mov     ax, es:[bp+0Ah] ;~ 01A2:299D
cs=0x1a2;eip=0x0029a1; 	T(OR(ax, ax));	// 6380                  or      ax, ax ;~ 01A2:29A1
cs=0x1a2;eip=0x0029a3; 	J(JZ(loc_129b2));	// 6381                  jz      short loc_129B2 ;~ 01A2:29A3
cs=0x1a2;eip=0x0029a5; 	X(PUSH(ax));	// 6382                  push    ax ;~ 01A2:29A5
cs=0x1a2;eip=0x0029a6; 	T(ax = 5;);	// 6383                  mov     ax, 5 ;~ 01A2:29A6
cs=0x1a2;eip=0x0029a9; 	J(CALL(sub_19cbc,0));	// 6384                  call    sub_19CBC ;~ 01A2:29A9
cs=0x1a2;eip=0x0029ac; 	X(POP(ax));	// 6385                  pop     ax ;~ 01A2:29AC
cs=0x1a2;eip=0x0029ad; 	J(CALL(sub_19cbc,0));	// 6386                  call    sub_19CBC ;~ 01A2:29AD
cs=0x1a2;eip=0x0029b0; 	J(JMP(loc_1294b));	// 6387                  jmp     short loc_1294B ;~ 01A2:29B0
loc_129b2:
	// 4828 
cs=0x1a2;eip=0x0029b2; 	X(byte_1f827 = 0;);	// 6391                  mov     ds:byte_1F827, 0 ;~ 01A2:29B2
cs=0x1a2;eip=0x0029b7; 	J(RETN(0));	// 6392                  retn ;~ 01A2:29B7

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_12900: 	goto loc_12900;
        case m2c::kloc_12912: 	goto loc_12912;
        case m2c::kloc_1291e: 	goto loc_1291e;
        case m2c::kloc_12927: 	goto loc_12927;
        case m2c::kloc_1293a: 	goto loc_1293a;
        case m2c::kloc_1294b: 	goto loc_1294b;
        case m2c::kloc_129b2: 	goto loc_129b2;
        case m2c::kseg000_299d_proc: 	goto seg000_299d_proc;
        case m2c::ksub_128b9: 	goto sub_128b9;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_12967(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_12967:
    _begin:
cs=0x1a2;eip=0x002967; 	T(MOV(dl, *(raddr(ds,si))));	// 6333                  mov     dl, [si] ;~ 01A2:2967
cs=0x1a2;eip=0x002969; 	T(ADD(si, 2));	// 6334                  add     si, 2 ;~ 01A2:2969
cs=0x1a2;eip=0x00296c; 	T(DEC(dl));	// 6335                  dec     dl ;~ 01A2:296C
loc_1296e:
	// 4822 
cs=0x1a2;eip=0x00296e; 	T(LODSB);	// 6338                  lodsb ;~ 01A2:296E
cs=0x1a2;eip=0x00296f; 	T(CMP(al, ch));	// 6339                  cmp     al, ch ;~ 01A2:296F
cs=0x1a2;eip=0x002971; 	J(JZ(loc_12979));	// 6340                  jz      short loc_12979 ;~ 01A2:2971
loc_12973:
	// 4823 
cs=0x1a2;eip=0x002973; 	T(DEC(dl));	// 6343                  dec     dl ;~ 01A2:2973
cs=0x1a2;eip=0x002975; 	J(JNS(loc_1296e));	// 6344                  jns     short loc_1296E ;~ 01A2:2975
cs=0x1a2;eip=0x002977; 	J(JMP(loc_12998));	// 6345                  jmp     short loc_12998 ;~ 01A2:2977
loc_12979:
	// 4824 
cs=0x1a2;eip=0x002979; 	T(LODSB);	// 6349                  lodsb ;~ 01A2:2979
cs=0x1a2;eip=0x00297a; 	T(ah = al;);	// 6350                  mov     ah, al ;~ 01A2:297A
cs=0x1a2;eip=0x00297c; 	T(MOV(al, *(raddr(ds,si))));	// 6351                  mov     al, [si] ;~ 01A2:297C
cs=0x1a2;eip=0x00297e; 	T(CMP(ax, 0x3E8));	// 6352                  cmp     ax, 3E8h ;~ 01A2:297E
cs=0x1a2;eip=0x002981; 	J(JL(loc_12986));	// 6353                  jl      short loc_12986 ;~ 01A2:2981
cs=0x1a2;eip=0x002983; 	T(DEC(si));	// 6354                  dec     si ;~ 01A2:2983
cs=0x1a2;eip=0x002984; 	J(JMP(loc_12973));	// 6355                  jmp     short loc_12973 ;~ 01A2:2984
loc_12986:
	// 4825 
cs=0x1a2;eip=0x002986; 	T(si = word_1f72c;);	// 6359                  mov     si, ds:word_1F72C ;~ 01A2:2986
cs=0x1a2;eip=0x00298a; 	J(CALL(sub_19cbc,0));	// 6360                  call    sub_19CBC ;~ 01A2:298A
cs=0x1a2;eip=0x00298d; 	X(MOV(*(raddr(ds,si)), 0x2E));	// 6361                  mov     byte ptr [si], 2Eh ; '.' ;~ 01A2:298D
cs=0x1a2;eip=0x002990; 	T(INC(si));	// 6362                  inc     si ;~ 01A2:2990
cs=0x1a2;eip=0x002991; 	X(word_1f72c = si;);	// 6363                  mov     ds:word_1F72C, si ;~ 01A2:2991
cs=0x1a2;eip=0x002995; 	T(XOR(ch, ch));	// 6364                  xor     ch, ch ;~ 01A2:2995
cs=0x1a2;eip=0x002997; 	J(RETN(0));	// 6365                  retn ;~ 01A2:2997
loc_12998:
	// 4826 
cs=0x1a2;eip=0x002998; 	T(ch = 1;);	// 6369                  mov     ch, 1 ;~ 01A2:2998
cs=0x1a2;eip=0x00299a; 	T(OR(ch, ch));	// 6370                  or      ch, ch ;~ 01A2:299A
cs=0x1a2;eip=0x00299c; 	J(RETN(0));	// 6371                  retn ;~ 01A2:299C

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1296e: 	goto loc_1296e;
        case m2c::kloc_12973: 	goto loc_12973;
        case m2c::kloc_12979: 	goto loc_12979;
        case m2c::kloc_12986: 	goto loc_12986;
        case m2c::kloc_12998: 	goto loc_12998;
        case m2c::ksub_12967: 	goto sub_12967;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_129b8(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_129b8:
    _begin:
cs=0x1a2;eip=0x0029b8; 	T(XOR(dx, dx));	// 6400                  xor     dx, dx ;~ 01A2:29B8
loc_129ba:
	// 4829 
cs=0x1a2;eip=0x0029ba; 	T(al = 8;);	// 6404                  mov     al, 8 ;~ 01A2:29BA
cs=0x1a2;eip=0x0029bc; 	J(CALL(sub_1415c,0));	// 6405                  call    sub_1415C ;~ 01A2:29BC
cs=0x1a2;eip=0x0029bf; 	T(OR(dx, dx));	// 6406                  or      dx, dx ;~ 01A2:29BF
cs=0x1a2;eip=0x0029c1; 	J(JNS(loc_129c7));	// 6407                  jns     short loc_129C7 ;~ 01A2:29C1
cs=0x1a2;eip=0x0029c3; 	T(XOR(dx, dx));	// 6408                  xor     dx, dx ;~ 01A2:29C3
cs=0x1a2;eip=0x0029c5; 	J(JMP(loc_129ba));	// 6409                  jmp     short loc_129BA ;~ 01A2:29C5
loc_129c7:
	// 4830 
cs=0x1a2;eip=0x0029c7; 	T(DEC(bl));	// 6413                  dec     bl ;~ 01A2:29C7
cs=0x1a2;eip=0x0029c9; 	J(JS(locret_129ce));	// 6414                  js      short locret_129CE ;~ 01A2:29C9
cs=0x1a2;eip=0x0029cb; 	T(INC(dx));	// 6415                  inc     dx ;~ 01A2:29CB
cs=0x1a2;eip=0x0029cc; 	J(JMP(loc_129ba));	// 6416                  jmp     short loc_129BA ;~ 01A2:29CC
locret_129ce:
	// 4831 
cs=0x1a2;eip=0x0029ce; 	J(RETN(0));	// 6420                  retn ;~ 01A2:29CE

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_129ba: 	goto loc_129ba;
        case m2c::kloc_129c7: 	goto loc_129c7;
        case m2c::klocret_129ce: 	goto locret_129ce;
        case m2c::ksub_129b8: 	goto sub_129b8;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_129cf(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_129cf:
    _begin:
cs=0x1a2;eip=0x0029cf; 	X(byte_1f73f = 0;);	// 6430                  mov     ds:byte_1F73F, 0 ;~ 01A2:29CF
cs=0x1a2;eip=0x0029d4; 	X(byte_1f796 = 0;);	// 6431                  mov     ds:byte_1F796, 0 ;~ 01A2:29D4
cs=0x1a2;eip=0x0029d9; 	J(CALL(sub_12a09,0));	// 6432                  call    sub_12A09 ;~ 01A2:29D9
cs=0x1a2;eip=0x0029dc; 	T(CMP(word_1f3c2, 0));	// 6433                  cmp     ds:word_1F3C2, 0 ;~ 01A2:29DC
cs=0x1a2;eip=0x0029e1; 	J(JS(loc_129ec));	// 6434                  js      short loc_129EC ;~ 01A2:29E1
cs=0x1a2;eip=0x0029e3; 	J(CALL(sub_12495,0));	// 6435                  call    sub_12495 ;~ 01A2:29E3
cs=0x1a2;eip=0x0029e6; 	X(word_1f3c2 = 0x0FFFF;);	// 6436                  mov     ds:word_1F3C2, 0FFFFh ;~ 01A2:29E6
loc_129ec:
	// 4832 
cs=0x1a2;eip=0x0029ec; 	T(CMP(word_1f3ea, 0));	// 6439                  cmp     ds:word_1F3EA, 0 ;~ 01A2:29EC
cs=0x1a2;eip=0x0029f1; 	J(JZ(loc_129fb));	// 6440                  jz      short loc_129FB ;~ 01A2:29F1
cs=0x1a2;eip=0x0029f3; 	J(CALL(seg000_8991_proc,m2c::kloc_18991));	// 6441                  call    loc_18991 ;~ 01A2:29F3
cs=0x1a2;eip=0x0029f6; 	J(CALL(sub_124aa,0));	// 6442                  call    sub_124AA ;~ 01A2:29F6
cs=0x1a2;eip=0x0029f9; 	J(JMP(loc_129fe));	// 6443                  jmp     short loc_129FE ;~ 01A2:29F9
loc_129fb:
	// 4833 
cs=0x1a2;eip=0x0029fb; 	J(CALL(sub_1899e,0));	// 6447                  call    sub_1899E ;~ 01A2:29FB
loc_129fe:
	// 4834 
cs=0x1a2;eip=0x0029fe; 	X(OR(byte_1f740, 0x80));	// 6450                  or      ds:byte_1F740, 80h ;~ 01A2:29FE
cs=0x1a2;eip=0x002a03; 	J(RETN(0));	// 6451                  retn ;~ 01A2:2A03

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_129ec: 	goto loc_129ec;
        case m2c::kloc_129fb: 	goto loc_129fb;
        case m2c::kloc_129fe: 	goto loc_129fe;
        case m2c::ksub_129cf: 	goto sub_129cf;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group11(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group11:
    _begin:
sub_12a04:
	// 6458 
cs=0x1a2;eip=0x002a04; 	X(byte_1f73f = 1;);	// 6460                  mov     ds:byte_1F73F, 1 ;~ 01A2:2A04
sub_12a09:
	// 6467 
cs=0x1a2;eip=0x002a09; 	X(PUSH(si));	// 6468                  push    si ;~ 01A2:2A09
cs=0x1a2;eip=0x002a0a; 	X(PUSH(es));	// 6469                  push    es ;~ 01A2:2A0A
cs=0x1a2;eip=0x002a0b; 	X(PUSH(cx));	// 6470                  push    cx ;~ 01A2:2A0B
cs=0x1a2;eip=0x002a0c; 	T(di = 0x0FDC2;);	// 6471                  mov     di, 0FDC2h ;~ 01A2:2A0C
cs=0x1a2;eip=0x002a0f; 	T(si = di;);	// 6472                  mov     si, di ;~ 01A2:2A0F
cs=0x1a2;eip=0x002a11; 	T(cx = 9;);	// 6473                  mov     cx, 9 ;~ 01A2:2A11
cs=0x1a2;eip=0x002a14; 	T(ax = ds;);	// 6474                  mov     ax, ds ;~ 01A2:2A14
cs=0x1a2;eip=0x002a16; 	T(es = ax;);	// 6475                  mov     es, ax ;~ 01A2:2A16
cs=0x1a2;eip=0x002a18; 	T(al = 0x0FF;);	// 6477                  mov     al, 0FFh ;~ 01A2:2A18
	// 6478                  rep stosb ;~ 01A2:2A1A
cs=0x1a2;eip=0x002a1a; 	X(	REP STOSB);	// 6478                  rep stosb ;~ 01A2:2A1A
cs=0x1a2;eip=0x002a1c; 	T(di = 0x0FDC2;);	// 6479                  mov     di, 0FDC2h ;~ 01A2:2A1C
cs=0x1a2;eip=0x002a1f; 	X(POP(cx));	// 6480                  pop     cx ;~ 01A2:2A1F
cs=0x1a2;eip=0x002a20; 	X(POP(es));	// 6481                  pop     es ;~ 01A2:2A20
cs=0x1a2;eip=0x002a21; 	X(POP(si));	// 6483                  pop     si ;~ 01A2:2A21
cs=0x1a2;eip=0x002a22; 	J(RETN(0));	// 6484                  retn ;~ 01A2:2A22

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_12a04: 	goto sub_12a04;
        case m2c::ksub_12a09: 	goto sub_12a09;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_12a23(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_12a23:
    _begin:
cs=0x1a2;eip=0x002a23; 	T(ax = 0x0CA;);	// 6492                  mov     ax, 0CAh ;~ 01A2:2A23
cs=0x1a2;eip=0x002a26; 	T(dl = 0x0BA;);	// 6493                  mov     dl, 0BAh ;~ 01A2:2A26
cs=0x1a2;eip=0x002a28; 	T(cx = 0x6C;);	// 6494                  mov     cx, 6Ch ; 'l' ;~ 01A2:2A28
cs=0x1a2;eip=0x002a2b; 	T(dh = 7;);	// 6495                  mov     dh, 7 ;~ 01A2:2A2B
cs=0x1a2;eip=0x002a2d; 	T(bh = 0;);	// 6496                  mov     bh, 0 ;~ 01A2:2A2D
cs=0x1a2;eip=0x002a2f; 	J(CALL(sub_15d80,0));	// 6497                  call    sub_15D80 ;~ 01A2:2A2F
cs=0x1a2;eip=0x002a32; 	J(RETN(0));	// 6498                  retn ;~ 01A2:2A32

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_12a23: 	goto sub_12a23;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_12a33(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_12a33:
    _begin:
cs=0x1a2;eip=0x002a33; 	X(byte_1f845 = 0;);	// 6507                  mov     ds:byte_1F845, 0 ;~ 01A2:2A33
cs=0x1a2;eip=0x002a38; 	X(*(db*)(((db*)&off_1f83c)+3) = 0;);	// 6508                  mov     byte ptr ds:off_1F83C+3, 0 ;~ 01A2:2A38
cs=0x1a2;eip=0x002a3d; 	X(byte_1f840 = 0;);	// 6509                  mov     ds:byte_1F840, 0 ;~ 01A2:2A3D
cs=0x1a2;eip=0x002a42; 	X(byte_1f745 = 0;);	// 6510                  mov     ds:byte_1F745, 0 ;~ 01A2:2A42
cs=0x1a2;eip=0x002a47; 	J(CALL(sub_19d8e,0));	// 6511                  call    sub_19D8E ;~ 01A2:2A47
cs=0x1a2;eip=0x002a4a; 	T(TEST(byte_1f873, 2));	// 6512                  test    ds:byte_1F873, 2 ;~ 01A2:2A4A
cs=0x1a2;eip=0x002a4f; 	J(JNZ(loc_12ac8));	// 6513                  jnz     short loc_12AC8 ;~ 01A2:2A4F
loc_12a51:
	// 4835 
cs=0x1a2;eip=0x002a51; 	T(si = 0x0FE4E;);	// 6517                  mov     si, 0FE4Eh ;~ 01A2:2A51
cs=0x1a2;eip=0x002a54; 	T(XOR(dh, dh));	// 6518                  xor     dh, dh ;~ 01A2:2A54
cs=0x1a2;eip=0x002a56; 	T(al = byte_1f845;);	// 6519                  mov     al, ds:byte_1F845 ;~ 01A2:2A56
cs=0x1a2;eip=0x002a59; 	T(ah = 0x40;);	// 6520                  mov     ah, 40h ; '@' ;~ 01A2:2A59
cs=0x1a2;eip=0x002a5b; 	T(MUL1_1(ah));	// 6521                  mul     ah ;~ 01A2:2A5B
cs=0x1a2;eip=0x002a5d; 	T(dl = byte_1f796;);	// 6522                  mov     dl, ds:byte_1F796 ;~ 01A2:2A5D
cs=0x1a2;eip=0x002a61; 	T(SHL(dl, 1));	// 6523                  shl     dl, 1 ;~ 01A2:2A61
cs=0x1a2;eip=0x002a63; 	T(SHL(dl, 1));	// 6524                  shl     dl, 1 ;~ 01A2:2A63
cs=0x1a2;eip=0x002a65; 	T(SHL(dl, 1));	// 6525                  shl     dl, 1 ;~ 01A2:2A65
cs=0x1a2;eip=0x002a67; 	T(ADD(si, ax));	// 6526                  add     si, ax ;~ 01A2:2A67
cs=0x1a2;eip=0x002a69; 	T(ADD(si, dx));	// 6527                  add     si, dx ;~ 01A2:2A69
cs=0x1a2;eip=0x002a6b; 	X(word_1f1d6 = si;);	// 6528                  mov     word_1F1D6, si ;~ 01A2:2A6B
cs=0x1a2;eip=0x002a6f; 	T(XOR(ah, ah));	// 6529                  xor     ah, ah ;~ 01A2:2A6F
cs=0x1a2;eip=0x002a71; 	T(al = *(db*)(((db*)&off_1f83c)+3););	// 6530                  mov     al, byte ptr ds:off_1F83C+3 ;~ 01A2:2A71
cs=0x1a2;eip=0x002a74; 	T(ADD(si, ax));	// 6531                  add     si, ax ;~ 01A2:2A74
cs=0x1a2;eip=0x002a76; 	T(MOV(al, *(raddr(ds,si))));	// 6532                  mov     al, [si] ;~ 01A2:2A76
cs=0x1a2;eip=0x002a78; 	X(PUSH(ax));	// 6533                  push    ax ;~ 01A2:2A78
cs=0x1a2;eip=0x002a79; 	J(CALL(sub_12c36,0));	// 6534                  call    sub_12C36 ;~ 01A2:2A79
cs=0x1a2;eip=0x002a7c; 	X(POP(ax));	// 6535                  pop     ax ;~ 01A2:2A7C
cs=0x1a2;eip=0x002a7d; 	T(CMP(al, 6));	// 6536                  cmp     al, 6 ;~ 01A2:2A7D
cs=0x1a2;eip=0x002a7f; 	J(JNZ(loc_12a8b));	// 6537                  jnz     short loc_12A8B ;~ 01A2:2A7F
cs=0x1a2;eip=0x002a81; 	J(CALL(sub_19d8e,0));	// 6539                  call    sub_19D8E ;~ 01A2:2A81
cs=0x1a2;eip=0x002a84; 	J(CALL(sub_1393c,0));	// 6540                  call    sub_1393C ;~ 01A2:2A84
cs=0x1a2;eip=0x002a87; 	J(JNZ(sub_12a33));	// 6541                  jnz     short sub_12A33 ;~ 01A2:2A87
cs=0x1a2;eip=0x002a89; 	J(JMP(loc_12aea));	// 6542                  jmp     short loc_12AEA ;~ 01A2:2A89
loc_12a8b:
	// 4836 
cs=0x1a2;eip=0x002a8b; 	X(PUSH(ax));	// 6546                  push    ax ;~ 01A2:2A8B
cs=0x1a2;eip=0x002a8c; 	X(PUSH(bx));	// 6547                  push    bx ;~ 01A2:2A8C
cs=0x1a2;eip=0x002a8d; 	X(PUSH(cx));	// 6548                  push    cx ;~ 01A2:2A8D
cs=0x1a2;eip=0x002a8e; 	X(PUSH(dx));	// 6549                  push    dx ;~ 01A2:2A8E
cs=0x1a2;eip=0x002a8f; 	X(PUSH(bp));	// 6550                  push    bp ;~ 01A2:2A8F
cs=0x1a2;eip=0x002a90; 	X(PUSH(si));	// 6551                  push    si ;~ 01A2:2A90
cs=0x1a2;eip=0x002a91; 	X(PUSH(di));	// 6552                  push    di ;~ 01A2:2A91
cs=0x1a2;eip=0x002a92; 	X(PUSH(es));	// 6553                  push    es ;~ 01A2:2A92
cs=0x1a2;eip=0x002a93; 	X(PUSH(ds));	// 6554                  push    ds ;~ 01A2:2A93
cs=0x1a2;eip=0x002a94; 	J(CALL(sub_1897f,0));	// 6555                  call    sub_1897F ;~ 01A2:2A94
cs=0x1a2;eip=0x002a97; 	X(POP(ds));	// 6556                  pop     ds ;~ 01A2:2A97
cs=0x1a2;eip=0x002a98; 	X(POP(es));	// 6557                  pop     es ;~ 01A2:2A98
cs=0x1a2;eip=0x002a99; 	X(POP(di));	// 6559                  pop     di ;~ 01A2:2A99
cs=0x1a2;eip=0x002a9a; 	X(POP(si));	// 6560                  pop     si ;~ 01A2:2A9A
cs=0x1a2;eip=0x002a9b; 	X(POP(bp));	// 6561                  pop     bp ;~ 01A2:2A9B
cs=0x1a2;eip=0x002a9c; 	X(POP(dx));	// 6562                  pop     dx ;~ 01A2:2A9C
cs=0x1a2;eip=0x002a9d; 	X(POP(cx));	// 6563                  pop     cx ;~ 01A2:2A9D
cs=0x1a2;eip=0x002a9e; 	X(POP(bx));	// 6564                  pop     bx ;~ 01A2:2A9E
cs=0x1a2;eip=0x002a9f; 	X(POP(ax));	// 6565                  pop     ax ;~ 01A2:2A9F
cs=0x1a2;eip=0x002aa0; 	X(PUSH(ax));	// 6566                  push    ax ;~ 01A2:2AA0
cs=0x1a2;eip=0x002aa1; 	X(PUSH(bx));	// 6567                  push    bx ;~ 01A2:2AA1
cs=0x1a2;eip=0x002aa2; 	X(PUSH(cx));	// 6568                  push    cx ;~ 01A2:2AA2
cs=0x1a2;eip=0x002aa3; 	X(PUSH(dx));	// 6569                  push    dx ;~ 01A2:2AA3
cs=0x1a2;eip=0x002aa4; 	X(PUSH(bp));	// 6570                  push    bp ;~ 01A2:2AA4
cs=0x1a2;eip=0x002aa5; 	X(PUSH(si));	// 6571                  push    si ;~ 01A2:2AA5
cs=0x1a2;eip=0x002aa6; 	X(PUSH(di));	// 6572                  push    di ;~ 01A2:2AA6
cs=0x1a2;eip=0x002aa7; 	X(PUSH(es));	// 6573                  push    es ;~ 01A2:2AA7
cs=0x1a2;eip=0x002aa8; 	X(PUSH(ds));	// 6574                  push    ds ;~ 01A2:2AA8
cs=0x1a2;eip=0x002aa9; 	J(CALL(sub_1c566,0));	// 6575                  call    sub_1C566 ;~ 01A2:2AA9
cs=0x1a2;eip=0x002aac; 	J(JNZ(loc_12ab4));	// 6576                  jnz     short loc_12AB4 ;~ 01A2:2AAC
cs=0x1a2;eip=0x002aae; 	J(CALL(sub_1c5dd,0));	// 6577                  call    sub_1C5DD ;~ 01A2:2AAE
cs=0x1a2;eip=0x002ab1; 	X(byte_1f886 = al;);	// 6578                  mov     ds:byte_1F886, al ;~ 01A2:2AB1
loc_12ab4:
	// 4837 
cs=0x1a2;eip=0x002ab4; 	X(POP(ds));	// 6581                  pop     ds ;~ 01A2:2AB4
cs=0x1a2;eip=0x002ab5; 	X(POP(es));	// 6582                  pop     es ;~ 01A2:2AB5
cs=0x1a2;eip=0x002ab6; 	X(POP(di));	// 6583                  pop     di ;~ 01A2:2AB6
cs=0x1a2;eip=0x002ab7; 	X(POP(si));	// 6584                  pop     si ;~ 01A2:2AB7
cs=0x1a2;eip=0x002ab8; 	X(POP(bp));	// 6585                  pop     bp ;~ 01A2:2AB8
cs=0x1a2;eip=0x002ab9; 	X(POP(dx));	// 6586                  pop     dx ;~ 01A2:2AB9
cs=0x1a2;eip=0x002aba; 	X(POP(cx));	// 6587                  pop     cx ;~ 01A2:2ABA
cs=0x1a2;eip=0x002abb; 	X(POP(bx));	// 6588                  pop     bx ;~ 01A2:2ABB
cs=0x1a2;eip=0x002abc; 	X(POP(ax));	// 6589                  pop     ax ;~ 01A2:2ABC
cs=0x1a2;eip=0x002abd; 	T(al = byte_1f886;);	// 6590                  mov     al, ds:byte_1F886 ;~ 01A2:2ABD
cs=0x1a2;eip=0x002ac0; 	T(OR(al, al));	// 6591                  or      al, al ;~ 01A2:2AC0
cs=0x1a2;eip=0x002ac2; 	J(JZ(loc_12ae2));	// 6592                  jz      short loc_12AE2 ;~ 01A2:2AC2
cs=0x1a2;eip=0x002ac4; 	T(CMP(al, 0x1C));	// 6593                  cmp     al, 1Ch ;~ 01A2:2AC4
cs=0x1a2;eip=0x002ac6; 	J(JNZ(loc_12ade));	// 6594                  jnz     short loc_12ADE ;~ 01A2:2AC6
loc_12ac8:
	// 4838 
cs=0x1a2;eip=0x002ac8; 	T(CMP(byte_1f795, 0));	// 6597                  cmp     ds:byte_1F795, 0 ;~ 01A2:2AC8
cs=0x1a2;eip=0x002acd; 	J(JZ(loc_12ae2));	// 6598                  jz      short loc_12AE2 ;~ 01A2:2ACD
cs=0x1a2;eip=0x002acf; 	J(CALL(sub_125cf,0));	// 6599                  call    sub_125CF ;~ 01A2:2ACF
cs=0x1a2;eip=0x002ad2; 	J(RETN(0));	// 6601                  retn ;~ 01A2:2AD2
loc_12ad3:
	// 4839 
cs=0x1a2;eip=0x002ad3; 	J(CALL(sub_19d33,0));	// 6605                  call    sub_19D33 ;~ 01A2:2AD3
cs=0x1a2;eip=0x002ad6; 	J(CALL(sub_19d8e,0));	// 6606                  call    sub_19D8E ;~ 01A2:2AD6
cs=0x1a2;eip=0x002ad9; 	T(ch = 6;);	// 6607                  mov     ch, 6 ;~ 01A2:2AD9
cs=0x1a2;eip=0x002adb; 	J(JMP(loc_12be6));	// 6608                  jmp     loc_12BE6 ;~ 01A2:2ADB
loc_12ade:
	// 4840 
cs=0x1a2;eip=0x002ade; 	T(CMP(al, 0x39));	// 6612                  cmp     al, 39h ; '9' ;~ 01A2:2ADE
cs=0x1a2;eip=0x002ae0; 	J(JZ(loc_12ad3));	// 6613                  jz      short loc_12AD3 ;~ 01A2:2AE0
loc_12ae2:
	// 4841 
cs=0x1a2;eip=0x002ae2; 	J(CALL(sub_11043,0));	// 6617                  call    sub_11043 ;~ 01A2:2AE2
cs=0x1a2;eip=0x002ae5; 	T(al = byte_1f885;);	// 6618                  mov     al, ds:byte_1F885 ;~ 01A2:2AE5
cs=0x1a2;eip=0x002ae8; 	T(OR(al, al));	// 6619                  or      al, al ;~ 01A2:2AE8
loc_12aea:
	// 4842 
cs=0x1a2;eip=0x002aea; 	T(AND(al, 0x8F));	// 6622                  and     al, 8Fh ;~ 01A2:2AEA
cs=0x1a2;eip=0x002aec; 	J(JNZ(loc_12af1));	// 6623                  jnz     short loc_12AF1 ;~ 01A2:2AEC
cs=0x1a2;eip=0x002aee; 	J(JMP(loc_12bc3));	// 6624                  jmp     loc_12BC3 ;~ 01A2:2AEE
loc_12af1:
	// 4843 
cs=0x1a2;eip=0x002af1; 	T(TEST(al, 0x80));	// 6628                  test    al, 80h ;~ 01A2:2AF1
cs=0x1a2;eip=0x002af3; 	J(JZ(loc_12af8));	// 6629                  jz      short loc_12AF8 ;~ 01A2:2AF3
cs=0x1a2;eip=0x002af5; 	J(JMP(loc_12bcb));	// 6630                  jmp     loc_12BCB ;~ 01A2:2AF5
loc_12af8:
	// 4844 
cs=0x1a2;eip=0x002af8; 	T(CMP(byte_1f746, 0));	// 6634                  cmp     ds:byte_1F746, 0 ;~ 01A2:2AF8
cs=0x1a2;eip=0x002afd; 	J(JZ(loc_12b06));	// 6635                  jz      short loc_12B06 ;~ 01A2:2AFD
cs=0x1a2;eip=0x002aff; 	X(DEC(byte_1f746));	// 6636                  dec     ds:byte_1F746 ;~ 01A2:2AFF
cs=0x1a2;eip=0x002b03; 	J(JMP(loc_12bc8));	// 6637                  jmp     loc_12BC8 ;~ 01A2:2B03
loc_12b06:
	// 4845 
cs=0x1a2;eip=0x002b06; 	X(byte_1f746 = 0x0D;);	// 6641                  mov     ds:byte_1F746, 0Dh ;~ 01A2:2B06
cs=0x1a2;eip=0x002b0b; 	T(si = word_1f1d6;);	// 6642                  mov     si, word_1F1D6 ;~ 01A2:2B0B
cs=0x1a2;eip=0x002b0f; 	T(bl = *(db*)(((db*)&off_1f83c)+3););	// 6643                  mov     bl, byte ptr ds:off_1F83C+3 ;~ 01A2:2B0F
cs=0x1a2;eip=0x002b13; 	T(XOR(bh, bh));	// 6644                  xor     bh, bh ;~ 01A2:2B13
cs=0x1a2;eip=0x002b15; 	T(TEST(al, 8));	// 6645                  test    al, 8 ;~ 01A2:2B15
cs=0x1a2;eip=0x002b17; 	J(JZ(loc_12b31));	// 6646                  jz      short loc_12B31 ;~ 01A2:2B17
cs=0x1a2;eip=0x002b19; 	T(INC(bl));	// 6647                  inc     bl ;~ 01A2:2B19
cs=0x1a2;eip=0x002b1b; 	T(CMP(byte_1f795, 0));	// 6648                  cmp     ds:byte_1F795, 0 ;~ 01A2:2B1B
cs=0x1a2;eip=0x002b20; 	J(JNZ(loc_12b28));	// 6649                  jnz     short loc_12B28 ;~ 01A2:2B20
cs=0x1a2;eip=0x002b22; 	T(CMP(*(raddr(ds,bx+si+1)), 0));	// 6650                  cmp     byte ptr [bx+si+1], 0 ;~ 01A2:2B22
cs=0x1a2;eip=0x002b26; 	J(JS(loc_12b2d));	// 6651                  js      short loc_12B2D ;~ 01A2:2B26
loc_12b28:
	// 4846 
cs=0x1a2;eip=0x002b28; 	T(CMP(*(raddr(ds,bx+si)), 0));	// 6654                  cmp     byte ptr [bx+si], 0 ;~ 01A2:2B28
cs=0x1a2;eip=0x002b2b; 	J(JNS(loc_12b4b));	// 6655                  jns     short loc_12B4B ;~ 01A2:2B2B
loc_12b2d:
	// 4847 
cs=0x1a2;eip=0x002b2d; 	T(XOR(bl, bl));	// 6659                  xor     bl, bl ;~ 01A2:2B2D
cs=0x1a2;eip=0x002b2f; 	J(JMP(loc_12b4b));	// 6660                  jmp     short loc_12B4B ;~ 01A2:2B2F
loc_12b31:
	// 4848 
cs=0x1a2;eip=0x002b31; 	T(TEST(al, 4));	// 6664                  test    al, 4 ;~ 01A2:2B31
cs=0x1a2;eip=0x002b33; 	J(JZ(loc_12b83));	// 6665                  jz      short loc_12B83 ;~ 01A2:2B33
cs=0x1a2;eip=0x002b35; 	T(DEC(bl));	// 6666                  dec     bl ;~ 01A2:2B35
cs=0x1a2;eip=0x002b37; 	J(JNS(loc_12b4b));	// 6667                  jns     short loc_12B4B ;~ 01A2:2B37
cs=0x1a2;eip=0x002b39; 	T(MOV(bl, *(raddr(ds,si+7))));	// 6668                  mov     bl, [si+7] ;~ 01A2:2B39
cs=0x1a2;eip=0x002b3c; 	T(CMP(byte_1f795, 0));	// 6669                  cmp     ds:byte_1F795, 0 ;~ 01A2:2B3C
cs=0x1a2;eip=0x002b41; 	J(JNZ(loc_12b4b));	// 6670                  jnz     short loc_12B4B ;~ 01A2:2B41
cs=0x1a2;eip=0x002b43; 	T(CMP(*(raddr(ds,bx+si+1)), 0));	// 6671                  cmp     byte ptr [bx+si+1], 0 ;~ 01A2:2B43
cs=0x1a2;eip=0x002b47; 	J(JNS(loc_12b4b));	// 6672                  jns     short loc_12B4B ;~ 01A2:2B47
cs=0x1a2;eip=0x002b49; 	T(DEC(bl));	// 6673                  dec     bl ;~ 01A2:2B49
loc_12b4b:
	// 4849 
cs=0x1a2;eip=0x002b4b; 	J(CALL(sub_19d8e,0));	// 6677                  call    sub_19D8E ;~ 01A2:2B4B
cs=0x1a2;eip=0x002b4e; 	T(al = *(db*)(((db*)&off_1f83c)+3););	// 6678                  mov     al, byte ptr ds:off_1F83C+3 ;~ 01A2:2B4E
cs=0x1a2;eip=0x002b51; 	X(byte_1f840 = al;);	// 6679                  mov     ds:byte_1F840, al ;~ 01A2:2B51
cs=0x1a2;eip=0x002b54; 	T(CMP(bl, al));	// 6680                  cmp     bl, al ;~ 01A2:2B54
cs=0x1a2;eip=0x002b56; 	J(JZ(loc_12b67));	// 6681                  jz      short loc_12B67 ;~ 01A2:2B56
loc_12b58:
	// 4850 
cs=0x1a2;eip=0x002b58; 	X(PUSH(ax));	// 6684                  push    ax ;~ 01A2:2B58
cs=0x1a2;eip=0x002b59; 	X(PUSH(ax));	// 6685                  push    ax ;~ 01A2:2B59
cs=0x1a2;eip=0x002b5a; 	T(ax = 2;);	// 6686                  mov     ax, 2 ;~ 01A2:2B5A
cs=0x1a2;eip=0x002b5d; 	J(CALL(sub_1156c,0));	// 6687                  call    sub_1156C ;~ 01A2:2B5D
cs=0x1a2;eip=0x002b60; 	X(POP(ax));	// 6688                  pop     ax ;~ 01A2:2B60
cs=0x1a2;eip=0x002b61; 	X(POP(ax));	// 6689                  pop     ax ;~ 01A2:2B61
cs=0x1a2;eip=0x002b62; 	X(PUSH(bx));	// 6690                  push    bx ;~ 01A2:2B62
cs=0x1a2;eip=0x002b63; 	J(CALL(sub_12be9,0));	// 6691                  call    sub_12BE9 ;~ 01A2:2B63
cs=0x1a2;eip=0x002b66; 	X(POP(bx));	// 6692                  pop     bx ;~ 01A2:2B66
loc_12b67:
	// 4851 
cs=0x1a2;eip=0x002b67; 	X(*(db*)(((db*)&off_1f83c)+3) = bl;);	// 6695                  mov     byte ptr ds:off_1F83C+3, bl ;~ 01A2:2B67
cs=0x1a2;eip=0x002b6b; 	T(si = word_1f1d6;);	// 6696                  mov     si, word_1F1D6 ;~ 01A2:2B6B
cs=0x1a2;eip=0x002b6f; 	T(XOR(bh, bh));	// 6697                  xor     bh, bh ;~ 01A2:2B6F
cs=0x1a2;eip=0x002b71; 	T(MOV(bl, *(raddr(ds,bx+si))));	// 6698                  mov     bl, [bx+si] ;~ 01A2:2B71
cs=0x1a2;eip=0x002b73; 	T(si = 0x0FDC2;);	// 6699                  mov     si, 0FDC2h ;~ 01A2:2B73
cs=0x1a2;eip=0x002b76; 	X(PUSH(ax));	// 6700                  push    ax ;~ 01A2:2B76
cs=0x1a2;eip=0x002b77; 	T(MOV(al, *(raddr(ds,bx+si))));	// 6701                  mov     al, [bx+si] ;~ 01A2:2B77
cs=0x1a2;eip=0x002b79; 	X(byte_1f745 = al;);	// 6702                  mov     ds:byte_1F745, al ;~ 01A2:2B79
cs=0x1a2;eip=0x002b7c; 	X(POP(ax));	// 6703                  pop     ax ;~ 01A2:2B7C
cs=0x1a2;eip=0x002b7d; 	J(CALL(sub_1899e,0));	// 6704                  call    sub_1899E ;~ 01A2:2B7D
cs=0x1a2;eip=0x002b80; 	J(JMP(loc_12a51));	// 6705                  jmp     loc_12A51 ;~ 01A2:2B80
loc_12b83:
	// 4852 
cs=0x1a2;eip=0x002b83; 	T(TEST(al, 1));	// 6709                  test    al, 1 ;~ 01A2:2B83
cs=0x1a2;eip=0x002b85; 	J(JNZ(loc_12b8b));	// 6710                  jnz     short loc_12B8B ;~ 01A2:2B85
cs=0x1a2;eip=0x002b87; 	T(TEST(al, 2));	// 6711                  test    al, 2 ;~ 01A2:2B87
cs=0x1a2;eip=0x002b89; 	J(JZ(loc_12bc3));	// 6712                  jz      short loc_12BC3 ;~ 01A2:2B89
loc_12b8b:
	// 4853 
cs=0x1a2;eip=0x002b8b; 	T(TEST(byte_1f845, 1));	// 6715                  test    ds:byte_1F845, 1 ;~ 01A2:2B8B
cs=0x1a2;eip=0x002b90; 	X(PUSHF);	// 6716                  pushf ;~ 01A2:2B90
cs=0x1a2;eip=0x002b91; 	X(XOR(byte_1f845, 1));	// 6717                  xor     ds:byte_1F845, 1 ;~ 01A2:2B91
cs=0x1a2;eip=0x002b96; 	X(POPF);	// 6718                  popf ;~ 01A2:2B96
cs=0x1a2;eip=0x002b97; 	J(JZ(loc_12ba7));	// 6719                  jz      short loc_12BA7 ;~ 01A2:2B97
cs=0x1a2;eip=0x002b99; 	T(CMP(*(raddr(ds,bx+si-0x40)), 0));	// 6721                  cmp     byte ptr [bx+si-40h], 0 ;~ 01A2:2B99
cs=0x1a2;eip=0x002b9d; 	J(JS(loc_12bbe));	// 6722                  js      short loc_12BBE ;~ 01A2:2B9D
cs=0x1a2;eip=0x002b9f; 	T(CMP(*(raddr(ds,bx+si-0x3F)), 0));	// 6723                  cmp     byte ptr [bx+si-3Fh], 0 ;~ 01A2:2B9F
cs=0x1a2;eip=0x002ba3; 	J(JS(loc_12bbe));	// 6724                  js      short loc_12BBE ;~ 01A2:2BA3
cs=0x1a2;eip=0x002ba5; 	J(JMP(loc_12bb3));	// 6725                  jmp     short loc_12BB3 ;~ 01A2:2BA5
loc_12ba7:
	// 4854 
cs=0x1a2;eip=0x002ba7; 	T(CMP(*(raddr(ds,bx+si+0x40)), 0));	// 6729                  cmp     byte ptr [bx+si+40h], 0 ;~ 01A2:2BA7
cs=0x1a2;eip=0x002bab; 	J(JS(loc_12bbe));	// 6730                  js      short loc_12BBE ;~ 01A2:2BAB
cs=0x1a2;eip=0x002bad; 	T(CMP(*(raddr(ds,bx+si+0x41)), 0));	// 6731                  cmp     byte ptr [bx+si+41h], 0 ;~ 01A2:2BAD
cs=0x1a2;eip=0x002bb1; 	J(JS(loc_12bbe));	// 6732                  js      short loc_12BBE ;~ 01A2:2BB1
loc_12bb3:
	// 4855 
cs=0x1a2;eip=0x002bb3; 	J(CALL(sub_19d8e,0));	// 6735                  call    sub_19D8E ;~ 01A2:2BB3
cs=0x1a2;eip=0x002bb6; 	T(al = *(db*)(((db*)&off_1f83c)+3););	// 6736                  mov     al, byte ptr ds:off_1F83C+3 ;~ 01A2:2BB6
cs=0x1a2;eip=0x002bb9; 	X(byte_1f840 = al;);	// 6737                  mov     ds:byte_1F840, al ;~ 01A2:2BB9
cs=0x1a2;eip=0x002bbc; 	J(JMP(loc_12b58));	// 6738                  jmp     short loc_12B58 ;~ 01A2:2BBC
loc_12bbe:
	// 4856 
cs=0x1a2;eip=0x002bbe; 	X(XOR(byte_1f845, 1));	// 6743                  xor     ds:byte_1F845, 1 ;~ 01A2:2BBE
loc_12bc3:
	// 4857 
cs=0x1a2;eip=0x002bc3; 	X(byte_1f746 = 0;);	// 6747                  mov     ds:byte_1F746, 0 ;~ 01A2:2BC3
loc_12bc8:
	// 4858 
cs=0x1a2;eip=0x002bc8; 	J(JMP(loc_12a51));	// 6750                  jmp     loc_12A51 ;~ 01A2:2BC8
loc_12bcb:
	// 4859 
cs=0x1a2;eip=0x002bcb; 	X(PUSH(ax));	// 6754                  push    ax ;~ 01A2:2BCB
cs=0x1a2;eip=0x002bcc; 	X(PUSH(ax));	// 6755                  push    ax ;~ 01A2:2BCC
cs=0x1a2;eip=0x002bcd; 	T(ax = 0x37;);	// 6756                  mov     ax, 37h ; '7' ;~ 01A2:2BCD
cs=0x1a2;eip=0x002bd0; 	J(CALL(sub_1156c,0));	// 6757                  call    sub_1156C ;~ 01A2:2BD0
cs=0x1a2;eip=0x002bd3; 	X(POP(ax));	// 6758                  pop     ax ;~ 01A2:2BD3
cs=0x1a2;eip=0x002bd4; 	X(POP(ax));	// 6759                  pop     ax ;~ 01A2:2BD4
cs=0x1a2;eip=0x002bd5; 	T(XOR(bh, bh));	// 6760                  xor     bh, bh ;~ 01A2:2BD5
cs=0x1a2;eip=0x002bd7; 	T(bl = *(db*)(((db*)&off_1f83c)+3););	// 6761                  mov     bl, byte ptr ds:off_1F83C+3 ;~ 01A2:2BD7
cs=0x1a2;eip=0x002bdb; 	T(si = word_1f1d6;);	// 6762                  mov     si, word_1F1D6 ;~ 01A2:2BDB
cs=0x1a2;eip=0x002bdf; 	T(MOV(bl, *(raddr(ds,bx+si))));	// 6763                  mov     bl, [bx+si] ;~ 01A2:2BDF
cs=0x1a2;eip=0x002be1; 	T(si = 0x0FDC2;);	// 6764                  mov     si, 0FDC2h ;~ 01A2:2BE1
cs=0x1a2;eip=0x002be4; 	T(MOV(ch, *(raddr(ds,bx+si))));	// 6765                  mov     ch, [bx+si] ;~ 01A2:2BE4
loc_12be6:
	// 4860 
cs=0x1a2;eip=0x002be6; 	T(XOR(bl, bl));	// 6768                  xor     bl, bl ;~ 01A2:2BE6
cs=0x1a2;eip=0x002be8; 	J(RETN(0));	// 6769                  retn ;~ 01A2:2BE8

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_12a51: 	goto loc_12a51;
        case m2c::kloc_12a8b: 	goto loc_12a8b;
        case m2c::kloc_12ab4: 	goto loc_12ab4;
        case m2c::kloc_12ac8: 	goto loc_12ac8;
        case m2c::kloc_12ad3: 	goto loc_12ad3;
        case m2c::kloc_12ade: 	goto loc_12ade;
        case m2c::kloc_12ae2: 	goto loc_12ae2;
        case m2c::kloc_12aea: 	goto loc_12aea;
        case m2c::kloc_12af1: 	goto loc_12af1;
        case m2c::kloc_12af8: 	goto loc_12af8;
        case m2c::kloc_12b06: 	goto loc_12b06;
        case m2c::kloc_12b28: 	goto loc_12b28;
        case m2c::kloc_12b2d: 	goto loc_12b2d;
        case m2c::kloc_12b31: 	goto loc_12b31;
        case m2c::kloc_12b4b: 	goto loc_12b4b;
        case m2c::kloc_12b58: 	goto loc_12b58;
        case m2c::kloc_12b67: 	goto loc_12b67;
        case m2c::kloc_12b83: 	goto loc_12b83;
        case m2c::kloc_12b8b: 	goto loc_12b8b;
        case m2c::kloc_12ba7: 	goto loc_12ba7;
        case m2c::kloc_12bb3: 	goto loc_12bb3;
        case m2c::kloc_12bbe: 	goto loc_12bbe;
        case m2c::kloc_12bc3: 	goto loc_12bc3;
        case m2c::kloc_12bc8: 	goto loc_12bc8;
        case m2c::kloc_12bcb: 	goto loc_12bcb;
        case m2c::kloc_12be6: 	goto loc_12be6;
        case m2c::ksub_12a33: 	goto sub_12a33;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_12be9(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_12be9:
    _begin:
cs=0x1a2;eip=0x002be9; 	T(si = word_1f1d6;);	// 6778                  mov     si, word_1F1D6 ;~ 01A2:2BE9
cs=0x1a2;eip=0x002bed; 	T(XOR(ah, ah));	// 6779                  xor     ah, ah ;~ 01A2:2BED
cs=0x1a2;eip=0x002bef; 	T(XCHG(ax, bx));	// 6780                  xchg    ax, bx ;~ 01A2:2BEF
cs=0x1a2;eip=0x002bf0; 	T(MOV(bl, *(raddr(ds,bx+si))));	// 6781                  mov     bl, [bx+si] ;~ 01A2:2BF0
cs=0x1a2;eip=0x002bf2; 	T(si = 0x0FDCC;);	// 6782                  mov     si, 0FDCCh ;~ 01A2:2BF2
cs=0x1a2;eip=0x002bf5; 	X(MOV(*(raddr(ds,bx+si)), 0x28));	// 6783                  mov     byte ptr [bx+si], 28h ; '(' ;~ 01A2:2BF5
cs=0x1a2;eip=0x002bf8; 	T(si = 0x0FD8A;);	// 6784                  mov     si, 0FD8Ah ;~ 01A2:2BF8
cs=0x1a2;eip=0x002bfb; 	T(SHL(bx, 1));	// 6785                  shl     bx, 1 ;~ 01A2:2BFB
cs=0x1a2;eip=0x002bfd; 	T(SHL(bx, 1));	// 6786                  shl     bx, 1 ;~ 01A2:2BFD
cs=0x1a2;eip=0x002bff; 	T(SHL(bx, 1));	// 6787                  shl     bx, 1 ;~ 01A2:2BFF
cs=0x1a2;eip=0x002c01; 	T(ADD(si, bx));	// 6788                  add     si, bx ;~ 01A2:2C01
cs=0x1a2;eip=0x002c03; 	T(LODSW);	// 6789                  lodsw ;~ 01A2:2C03
cs=0x1a2;eip=0x002c04; 	T(DEC(ax));	// 6790                  dec     ax ;~ 01A2:2C04
cs=0x1a2;eip=0x002c05; 	T(bx = ax;);	// 6791                  mov     bx, ax ;~ 01A2:2C05
cs=0x1a2;eip=0x002c07; 	T(LODSW);	// 6792                  lodsw ;~ 01A2:2C07
cs=0x1a2;eip=0x002c08; 	T(DEC(ax));	// 6793                  dec     ax ;~ 01A2:2C08
cs=0x1a2;eip=0x002c09; 	T(dl = al;);	// 6794                  mov     dl, al ;~ 01A2:2C09
cs=0x1a2;eip=0x002c0b; 	T(LODSW);	// 6795                  lodsw ;~ 01A2:2C0B
cs=0x1a2;eip=0x002c0c; 	T(cx = ax;);	// 6796                  mov     cx, ax ;~ 01A2:2C0C
cs=0x1a2;eip=0x002c0e; 	T(LODSW);	// 6797                  lodsw ;~ 01A2:2C0E
cs=0x1a2;eip=0x002c0f; 	T(dh = al;);	// 6798                  mov     dh, al ;~ 01A2:2C0F
cs=0x1a2;eip=0x002c11; 	T(ax = bx;);	// 6799                  mov     ax, bx ;~ 01A2:2C11
cs=0x1a2;eip=0x002c13; 	T(XOR(bl, bl));	// 6800                  xor     bl, bl ;~ 01A2:2C13
cs=0x1a2;eip=0x002c15; 	J(CALL(sub_1647e,0));	// 6801                  call    sub_1647E ;~ 01A2:2C15
cs=0x1a2;eip=0x002c18; 	T(ADD(ax, cx));	// 6802                  add     ax, cx ;~ 01A2:2C18
cs=0x1a2;eip=0x002c1a; 	T(DEC(ax));	// 6803                  dec     ax ;~ 01A2:2C1A
cs=0x1a2;eip=0x002c1b; 	T(INC(dl));	// 6804                  inc     dl ;~ 01A2:2C1B
cs=0x1a2;eip=0x002c1d; 	T(bl = dl;);	// 6805                  mov     bl, dl ;~ 01A2:2C1D
cs=0x1a2;eip=0x002c1f; 	T(ADD(bl, dh));	// 6806                  add     bl, dh ;~ 01A2:2C1F
cs=0x1a2;eip=0x002c21; 	T(SUB(bl, 2));	// 6807                  sub     bl, 2 ;~ 01A2:2C21
cs=0x1a2;eip=0x002c24; 	T(XOR(bh, bh));	// 6808                  xor     bh, bh ;~ 01A2:2C24
cs=0x1a2;eip=0x002c26; 	T(XOR(dh, dh));	// 6809                  xor     dh, dh ;~ 01A2:2C26
cs=0x1a2;eip=0x002c28; 	T(XOR(cx, cx));	// 6810                  xor     cx, cx ;~ 01A2:2C28
cs=0x1a2;eip=0x002c2a; 	X(PUSH(cx));	// 6811                  push    cx ;~ 01A2:2C2A
cs=0x1a2;eip=0x002c2b; 	X(PUSH(bx));	// 6812                  push    bx ;~ 01A2:2C2B
cs=0x1a2;eip=0x002c2c; 	X(PUSH(ax));	// 6813                  push    ax ;~ 01A2:2C2C
cs=0x1a2;eip=0x002c2d; 	X(PUSH(dx));	// 6814                  push    dx ;~ 01A2:2C2D
cs=0x1a2;eip=0x002c2e; 	X(PUSH(ax));	// 6815                  push    ax ;~ 01A2:2C2E
cs=0x1a2;eip=0x002c2f; 	J(CALL(sub_199b0,0));	// 6816                  call    sub_199B0 ;~ 01A2:2C2F
cs=0x1a2;eip=0x002c32; 	T(ADD(sp, 0x0A));	// 6817                  add     sp, 0Ah ;~ 01A2:2C32
cs=0x1a2;eip=0x002c35; 	J(RETN(0));	// 6818                  retn ;~ 01A2:2C35

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_12be9: 	goto sub_12be9;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_12c36(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_12c36:
    _begin:
cs=0x1a2;eip=0x002c36; 	T(si = 0x0FD8A;);	// 6826                  mov     si, 0FD8Ah ;~ 01A2:2C36
cs=0x1a2;eip=0x002c39; 	T(XOR(ah, ah));	// 6827                  xor     ah, ah ;~ 01A2:2C39
cs=0x1a2;eip=0x002c3b; 	T(SHL(ax, 1));	// 6828                  shl     ax, 1 ;~ 01A2:2C3B
cs=0x1a2;eip=0x002c3d; 	T(SHL(ax, 1));	// 6829                  shl     ax, 1 ;~ 01A2:2C3D
cs=0x1a2;eip=0x002c3f; 	T(SHL(ax, 1));	// 6830                  shl     ax, 1 ;~ 01A2:2C3F
cs=0x1a2;eip=0x002c41; 	T(ADD(si, ax));	// 6831                  add     si, ax ;~ 01A2:2C41
cs=0x1a2;eip=0x002c43; 	T(LODSW);	// 6832                  lodsw ;~ 01A2:2C43
cs=0x1a2;eip=0x002c44; 	T(DEC(ax));	// 6833                  dec     ax ;~ 01A2:2C44
cs=0x1a2;eip=0x002c45; 	T(bx = ax;);	// 6834                  mov     bx, ax ;~ 01A2:2C45
cs=0x1a2;eip=0x002c47; 	T(LODSW);	// 6835                  lodsw ;~ 01A2:2C47
cs=0x1a2;eip=0x002c48; 	T(DEC(ax));	// 6836                  dec     ax ;~ 01A2:2C48
cs=0x1a2;eip=0x002c49; 	T(dl = al;);	// 6837                  mov     dl, al ;~ 01A2:2C49
cs=0x1a2;eip=0x002c4b; 	T(LODSW);	// 6838                  lodsw ;~ 01A2:2C4B
cs=0x1a2;eip=0x002c4c; 	T(cx = ax;);	// 6839                  mov     cx, ax ;~ 01A2:2C4C
cs=0x1a2;eip=0x002c4e; 	T(LODSW);	// 6840                  lodsw ;~ 01A2:2C4E
cs=0x1a2;eip=0x002c4f; 	T(dh = al;);	// 6841                  mov     dh, al ;~ 01A2:2C4F
cs=0x1a2;eip=0x002c51; 	T(ax = bx;);	// 6842                  mov     ax, bx ;~ 01A2:2C51
cs=0x1a2;eip=0x002c53; 	T(bl = 0x0A;);	// 6843                  mov     bl, 0Ah ;~ 01A2:2C53
cs=0x1a2;eip=0x002c55; 	J(CALL(sub_1647e,0));	// 6844                  call    sub_1647E ;~ 01A2:2C55
cs=0x1a2;eip=0x002c58; 	T(INC(ax));	// 6845                  inc     ax ;~ 01A2:2C58
cs=0x1a2;eip=0x002c59; 	T(INC(dl));	// 6846                  inc     dl ;~ 01A2:2C59
cs=0x1a2;eip=0x002c5b; 	T(SUB(cx, 2));	// 6847                  sub     cx, 2 ;~ 01A2:2C5B
cs=0x1a2;eip=0x002c5e; 	T(SUB(dh, 2));	// 6848                  sub     dh, 2 ;~ 01A2:2C5E
cs=0x1a2;eip=0x002c61; 	T(bl = 0x0E;);	// 6849                  mov     bl, 0Eh ;~ 01A2:2C61
cs=0x1a2;eip=0x002c63; 	J(CALL(sub_1647e,0));	// 6850                  call    sub_1647E ;~ 01A2:2C63
cs=0x1a2;eip=0x002c66; 	J(RETN(0));	// 6851                  retn ;~ 01A2:2C66

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_12c36: 	goto sub_12c36;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group12(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group12:
    _begin:
sub_12c67:
	// 6858 
cs=0x1a2;eip=0x002c67; 	J(CALL(seg000_d900_proc,m2c::kloc_1d969));	// 6860                  call    loc_1D969 ;~ 01A2:2C67
cs=0x1a2;eip=0x002c6a; 	X(byte_1f796 = 0;);	// 6861                  mov     ds:byte_1F796, 0 ;~ 01A2:2C6A
cs=0x1a2;eip=0x002c6f; 	J(CALL(seg000_8991_proc,m2c::kloc_18991));	// 6862                  call    loc_18991 ;~ 01A2:2C6F
sub_12c72:
	// 6869 
cs=0x1a2;eip=0x002c72; 	J(CALL(sub_12a04,0));	// 6870                  call    sub_12A04 ;~ 01A2:2C72
cs=0x1a2;eip=0x002c75; 	J(CALL(sub_12a23,0));	// 6871                  call    sub_12A23 ;~ 01A2:2C75
cs=0x1a2;eip=0x002c78; 	T(dx = word_1f3d0;);	// 6872                  mov     dx, ds:word_1F3D0 ;~ 01A2:2C78
cs=0x1a2;eip=0x002c7c; 	T(ax = 6;);	// 6873                  mov     ax, 6 ;~ 01A2:2C7C
cs=0x1a2;eip=0x002c7f; 	J(CALL(sub_1410e,0));	// 6874                  call    sub_1410E ;~ 01A2:2C7F
cs=0x1a2;eip=0x002c82; 	X(word_1f1fc = di;);	// 6875                  mov     word_1F1FC, di ;~ 01A2:2C82
cs=0x1a2;eip=0x002c86; 	T(si = di;);	// 6876                  mov     si, di ;~ 01A2:2C86
cs=0x1a2;eip=0x002c88; 	T(MOV(dx, *(dw*)(raddr(ds,si+6))));	// 6877                  mov     dx, [si+6] ;~ 01A2:2C88
cs=0x1a2;eip=0x002c8b; 	T(ax = 2;);	// 6878                  mov     ax, 2 ;~ 01A2:2C8B
cs=0x1a2;eip=0x002c8e; 	J(CALL(sub_1410e,0));	// 6879                  call    sub_1410E ;~ 01A2:2C8E
cs=0x1a2;eip=0x002c91; 	X(word_1f1fe = es;);	// 6880                  mov     word_1F1FE, es ;~ 01A2:2C91
cs=0x1a2;eip=0x002c95; 	X(word_1f200 = di;);	// 6881                  mov     word_1F200, di ;~ 01A2:2C95
cs=0x1a2;eip=0x002c99; 	T(bx = 0x0FE36;);	// 6882                  mov     bx, 0FE36h ;~ 01A2:2C99
cs=0x1a2;eip=0x002c9c; 	X(PUSH(si));	// 6883                  push    si ;~ 01A2:2C9C
cs=0x1a2;eip=0x002c9d; 	X(PUSH(di));	// 6884                  push    di ;~ 01A2:2C9D
cs=0x1a2;eip=0x002c9e; 	J(CALL(sub_12d81,0));	// 6885                  call    sub_12D81 ;~ 01A2:2C9E
cs=0x1a2;eip=0x002ca1; 	X(POP(di));	// 6886                  pop     di ;~ 01A2:2CA1
cs=0x1a2;eip=0x002ca2; 	X(POP(si));	// 6887                  pop     si ;~ 01A2:2CA2
cs=0x1a2;eip=0x002ca3; 	T(bx = 0x0FDC2;);	// 6888                  mov     bx, 0FDC2h ;~ 01A2:2CA3
cs=0x1a2;eip=0x002ca6; 	T(XOR(cl, cl));	// 6889                  xor     cl, cl ;~ 01A2:2CA6
cs=0x1a2;eip=0x002ca8; 	T(CMP(word_1f6fc, 0));	// 6890                  cmp     ds:word_1F6FC, 0 ;~ 01A2:2CA8
cs=0x1a2;eip=0x002cad; 	J(JZ(loc_12d14));	// 6891                  jz      short loc_12D14 ;~ 01A2:2CAD
cs=0x1a2;eip=0x002caf; 	T(CMP(*(raddr(es,di+0x16)), 1));	// 6892                  cmp     byte ptr es:[di+16h], 1 ;~ 01A2:2CAF
cs=0x1a2;eip=0x002cb4; 	J(JNZ(loc_12cc9));	// 6893                  jnz     short loc_12CC9 ;~ 01A2:2CB4
cs=0x1a2;eip=0x002cb6; 	X(PUSH(bx));	// 6894                  push    bx ;~ 01A2:2CB6
cs=0x1a2;eip=0x002cb7; 	T(XOR(bh, bh));	// 6895                  xor     bh, bh ;~ 01A2:2CB7
cs=0x1a2;eip=0x002cb9; 	T(MOV(bl, *(raddr(ds,si+0x0C))));	// 6896                  mov     bl, [si+0Ch] ;~ 01A2:2CB9
cs=0x1a2;eip=0x002cbc; 	T(CMP(*(raddr(ds,bx+si+7)), 2));	// 6897                  cmp     byte ptr [bx+si+7], 2 ;~ 01A2:2CBC
cs=0x1a2;eip=0x002cc0; 	X(POP(bx));	// 6898                  pop     bx ;~ 01A2:2CC0
cs=0x1a2;eip=0x002cc1; 	J(JNZ(loc_12cc9));	// 6899                  jnz     short loc_12CC9 ;~ 01A2:2CC1
cs=0x1a2;eip=0x002cc3; 	X(MOV(*(raddr(ds,bx)), 0x10));	// 6900                  mov     byte ptr [bx], 10h ;~ 01A2:2CC3
cs=0x1a2;eip=0x002cc6; 	T(INC(bx));	// 6901                  inc     bx ;~ 01A2:2CC6
cs=0x1a2;eip=0x002cc7; 	T(INC(cl));	// 6902                  inc     cl ;~ 01A2:2CC7
loc_12cc9:
	// 4861 
cs=0x1a2;eip=0x002cc9; 	T(dx = word_1f6fc;);	// 6906                  mov     dx, ds:word_1F6FC ;~ 01A2:2CC9
cs=0x1a2;eip=0x002ccd; 	X(PUSH(cx));	// 6907                  push    cx ;~ 01A2:2CCD
cs=0x1a2;eip=0x002cce; 	X(PUSH(di));	// 6908                  push    di ;~ 01A2:2CCE
cs=0x1a2;eip=0x002ccf; 	T(ax = 6;);	// 6909                  mov     ax, 6 ;~ 01A2:2CCF
cs=0x1a2;eip=0x002cd2; 	J(CALL(sub_1410e,0));	// 6910                  call    sub_1410E ;~ 01A2:2CD2
cs=0x1a2;eip=0x002cd5; 	T(bp = di;);	// 6911                  mov     bp, di ;~ 01A2:2CD5
cs=0x1a2;eip=0x002cd7; 	X(POP(di));	// 6912                  pop     di ;~ 01A2:2CD7
cs=0x1a2;eip=0x002cd8; 	X(POP(cx));	// 6913                  pop     cx ;~ 01A2:2CD8
cs=0x1a2;eip=0x002cd9; 	T(CMP(byte_1f843, 8));	// 6914                  cmp     ds:byte_1F843, 8 ;~ 01A2:2CD9
cs=0x1a2;eip=0x002cde; 	J(JNZ(loc_12cf8));	// 6915                  jnz     short loc_12CF8 ;~ 01A2:2CDE
cs=0x1a2;eip=0x002ce0; 	T(XOR(dh, dh));	// 6916                  xor     dh, dh ;~ 01A2:2CE0
cs=0x1a2;eip=0x002ce2; 	T(MOV(dl, *(raddr(ds,bp+0x0C))));	// 6917                  mov     dl, ds:[bp+0Ch] ;~ 01A2:2CE2
cs=0x1a2;eip=0x002ce6; 	T(ADD(bp, dx));	// 6918                  add     bp, dx ;~ 01A2:2CE6
cs=0x1a2;eip=0x002ce8; 	T(TEST(*(raddr(ds,bp+4)), 0x10));	// 6919                  test    byte ptr ds:[bp+4], 10h ;~ 01A2:2CE8
cs=0x1a2;eip=0x002ced; 	J(JZ(loc_12d14));	// 6920                  jz      short loc_12D14 ;~ 01A2:2CED
cs=0x1a2;eip=0x002cef; 	T(TEST(*(raddr(ds,bp+4)), 1));	// 6921                  test    byte ptr ds:[bp+4], 1 ;~ 01A2:2CEF
cs=0x1a2;eip=0x002cf4; 	J(JZ(loc_12d14));	// 6922                  jz      short loc_12D14 ;~ 01A2:2CF4
cs=0x1a2;eip=0x002cf6; 	J(JMP(loc_12cff));	// 6923                  jmp     short loc_12CFF ;~ 01A2:2CF6
loc_12cf8:
	// 4862 
cs=0x1a2;eip=0x002cf8; 	T(CMP(byte_1f843, 0x0B));	// 6927                  cmp     ds:byte_1F843, 0Bh ;~ 01A2:2CF8
cs=0x1a2;eip=0x002cfd; 	J(JNZ(loc_12d07));	// 6928                  jnz     short loc_12D07 ;~ 01A2:2CFD
loc_12cff:
	// 4863 
cs=0x1a2;eip=0x002cff; 	X(MOV(*(raddr(ds,bx)), 0x0C));	// 6931                  mov     byte ptr [bx], 0Ch ;~ 01A2:2CFF
cs=0x1a2;eip=0x002d02; 	T(INC(bx));	// 6932                  inc     bx ;~ 01A2:2D02
cs=0x1a2;eip=0x002d03; 	T(INC(cl));	// 6933                  inc     cl ;~ 01A2:2D03
cs=0x1a2;eip=0x002d05; 	J(JMP(loc_12d14));	// 6934                  jmp     short loc_12D14 ;~ 01A2:2D05
loc_12d07:
	// 4864 
cs=0x1a2;eip=0x002d07; 	T(CMP(byte_1f843, 0x0C));	// 6938                  cmp     ds:byte_1F843, 0Ch ;~ 01A2:2D07
cs=0x1a2;eip=0x002d0c; 	J(JNZ(loc_12d14));	// 6939                  jnz     short loc_12D14 ;~ 01A2:2D0C
cs=0x1a2;eip=0x002d0e; 	X(MOV(*(raddr(ds,bx)), 0x0F));	// 6940                  mov     byte ptr [bx], 0Fh ;~ 01A2:2D0E
cs=0x1a2;eip=0x002d11; 	T(INC(bx));	// 6941                  inc     bx ;~ 01A2:2D11
cs=0x1a2;eip=0x002d12; 	T(INC(cl));	// 6942                  inc     cl ;~ 01A2:2D12
loc_12d14:
	// 4865 
cs=0x1a2;eip=0x002d14; 	T(XOR(ah, ah));	// 6946                  xor     ah, ah ;~ 01A2:2D14
cs=0x1a2;eip=0x002d16; 	T(MOV(al, *(raddr(es,di+0x17))));	// 6947                  mov     al, es:[di+17h] ;~ 01A2:2D16
cs=0x1a2;eip=0x002d1a; 	T(OR(al, al));	// 6948                  or      al, al ;~ 01A2:2D1A
cs=0x1a2;eip=0x002d1c; 	J(JZ(loc_12d44));	// 6949                  jz      short loc_12D44 ;~ 01A2:2D1C
cs=0x1a2;eip=0x002d1e; 	T(TEST(*(raddr(ds,si+0x0F)), 0x40));	// 6951                  test    byte ptr [si+0Fh], 40h ;~ 01A2:2D1E
cs=0x1a2;eip=0x002d22; 	J(JNZ(loc_12d44));	// 6952                  jnz     short loc_12D44 ;~ 01A2:2D22
cs=0x1a2;eip=0x002d24; 	X(PUSH(si));	// 6953                  push    si ;~ 01A2:2D24
cs=0x1a2;eip=0x002d25; 	T(si = 0x0FA36;);	// 6954                  mov     si, 0FA36h ;~ 01A2:2D25
cs=0x1a2;eip=0x002d28; 	T(ADD(si, ax));	// 6955                  add     si, ax ;~ 01A2:2D28
cs=0x1a2;eip=0x002d2a; 	T(MOV(dl, *(raddr(ds,si))));	// 6956                  mov     dl, [si] ;~ 01A2:2D2A
cs=0x1a2;eip=0x002d2c; 	X(POP(si));	// 6957                  pop     si ;~ 01A2:2D2C
cs=0x1a2;eip=0x002d2d; 	T(CMP(dl, 0x0FF));	// 6958                  cmp     dl, 0FFh ;~ 01A2:2D2D
cs=0x1a2;eip=0x002d30; 	J(JZ(loc_12d44));	// 6959                  jz      short loc_12D44 ;~ 01A2:2D30
cs=0x1a2;eip=0x002d32; 	T(TEST(dl, 0x80));	// 6960                  test    dl, 80h ;~ 01A2:2D32
cs=0x1a2;eip=0x002d35; 	X(PUSHF);	// 6961                  pushf ;~ 01A2:2D35
cs=0x1a2;eip=0x002d36; 	T(AND(dl, 0x7F));	// 6962                  and     dl, 7Fh ;~ 01A2:2D36
cs=0x1a2;eip=0x002d39; 	X(POPF);	// 6963                  popf ;~ 01A2:2D39
cs=0x1a2;eip=0x002d3a; 	T(CMP(dl, 3));	// 6964                  cmp     dl, 3 ;~ 01A2:2D3A
cs=0x1a2;eip=0x002d3d; 	J(JZ(loc_12d44));	// 6965                  jz      short loc_12D44 ;~ 01A2:2D3D
cs=0x1a2;eip=0x002d3f; 	X(MOV(*(raddr(ds,bx)), dl));	// 6966                  mov     [bx], dl ;~ 01A2:2D3F
cs=0x1a2;eip=0x002d41; 	T(INC(bx));	// 6967                  inc     bx ;~ 01A2:2D41
cs=0x1a2;eip=0x002d42; 	T(INC(cl));	// 6968                  inc     cl ;~ 01A2:2D42
loc_12d44:
	// 4866 
cs=0x1a2;eip=0x002d44; 	T(CMP(*(raddr(es,di+0x17)), 6));	// 6972                  cmp     byte ptr es:[di+17h], 6 ;~ 01A2:2D44
cs=0x1a2;eip=0x002d49; 	J(JZ(loc_12d58));	// 6973                  jz      short loc_12D58 ;~ 01A2:2D49
cs=0x1a2;eip=0x002d4b; 	T(TEST(*(raddr(es,di+0x16)), 0x80));	// 6974                  test    byte ptr es:[di+16h], 80h ;~ 01A2:2D4B
cs=0x1a2;eip=0x002d50; 	J(JNZ(loc_12d58));	// 6975                  jnz     short loc_12D58 ;~ 01A2:2D50
cs=0x1a2;eip=0x002d52; 	X(MOV(*(raddr(ds,bx)), 0x0B));	// 6976                  mov     byte ptr [bx], 0Bh ;~ 01A2:2D52
cs=0x1a2;eip=0x002d55; 	T(INC(bx));	// 6977                  inc     bx ;~ 01A2:2D55
cs=0x1a2;eip=0x002d56; 	T(INC(cl));	// 6978                  inc     cl ;~ 01A2:2D56
loc_12d58:
	// 4867 
cs=0x1a2;eip=0x002d58; 	X(MOV(*(raddr(ds,bx)), 0x0D));	// 6982                  mov     byte ptr [bx], 0Dh ;~ 01A2:2D58
cs=0x1a2;eip=0x002d5b; 	T(INC(bx));	// 6983                  inc     bx ;~ 01A2:2D5B
cs=0x1a2;eip=0x002d5c; 	X(MOV(*(raddr(ds,bx)), 1));	// 6984                  mov     byte ptr [bx], 1 ;~ 01A2:2D5C
cs=0x1a2;eip=0x002d5f; 	T(INC(bx));	// 6985                  inc     bx ;~ 01A2:2D5F
cs=0x1a2;eip=0x002d60; 	T(ADD(cl, 2));	// 6986                  add     cl, 2 ;~ 01A2:2D60
cs=0x1a2;eip=0x002d63; 	T(CMP(*(raddr(es,di+0x1D)), 0x12));	// 6987                  cmp     byte ptr es:[di+1Dh], 12h ;~ 01A2:2D63
cs=0x1a2;eip=0x002d68; 	J(JNZ(loc_12d70));	// 6988                  jnz     short loc_12D70 ;~ 01A2:2D68
cs=0x1a2;eip=0x002d6a; 	X(MOV(*(raddr(ds,bx)), 0x0E));	// 6989                  mov     byte ptr [bx], 0Eh ;~ 01A2:2D6A
cs=0x1a2;eip=0x002d6d; 	T(INC(bx));	// 6990                  inc     bx ;~ 01A2:2D6D
cs=0x1a2;eip=0x002d6e; 	T(INC(cl));	// 6991                  inc     cl ;~ 01A2:2D6E
loc_12d70:
	// 4868 
cs=0x1a2;eip=0x002d70; 	X(MOV(*(raddr(ds,bx)), 6));	// 6994                  mov     byte ptr [bx], 6 ;~ 01A2:2D70
cs=0x1a2;eip=0x002d73; 	T(INC(bx));	// 6995                  inc     bx ;~ 01A2:2D73
cs=0x1a2;eip=0x002d74; 	T(INC(cl));	// 6996                  inc     cl ;~ 01A2:2D74
cs=0x1a2;eip=0x002d76; 	X(byte_1f796 = cl;);	// 6997                  mov     ds:byte_1F796, cl ;~ 01A2:2D76
cs=0x1a2;eip=0x002d7a; 	X(MOV(*(raddr(ds,bx)), 0x0FF));	// 6998                  mov     byte ptr [bx], 0FFh ;~ 01A2:2D7A
cs=0x1a2;eip=0x002d7d; 	J(CALL(sub_1899e,0));	// 6999                  call    sub_1899E ;~ 01A2:2D7D
cs=0x1a2;eip=0x002d80; 	J(RETN(0));	// 7000                  retn ;~ 01A2:2D80

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_12cc9: 	goto loc_12cc9;
        case m2c::kloc_12cf8: 	goto loc_12cf8;
        case m2c::kloc_12cff: 	goto loc_12cff;
        case m2c::kloc_12d07: 	goto loc_12d07;
        case m2c::kloc_12d14: 	goto loc_12d14;
        case m2c::kloc_12d44: 	goto loc_12d44;
        case m2c::kloc_12d58: 	goto loc_12d58;
        case m2c::kloc_12d70: 	goto loc_12d70;
        case m2c::ksub_12c67: 	goto sub_12c67;
        case m2c::ksub_12c72: 	goto sub_12c72;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_12d81(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_12d81:
    _begin:
cs=0x1a2;eip=0x002d81; 	T(MOV(ax, *(dw*)(raddr(ds,bx))));	// 7009                  mov     ax, [bx] ;~ 01A2:2D81
cs=0x1a2;eip=0x002d83; 	T(MOV(dx, *(dw*)(raddr(ds,bx+2))));	// 7010                  mov     dx, [bx+2] ;~ 01A2:2D83
cs=0x1a2;eip=0x002d86; 	T(ADD(bx, 4));	// 7011                  add     bx, 4 ;~ 01A2:2D86
cs=0x1a2;eip=0x002d89; 	X(PUSH(bx));	// 7012                  push    bx ;~ 01A2:2D89
cs=0x1a2;eip=0x002d8a; 	T(cx = 0x20;);	// 7013                  mov     cx, 20h ; ' ' ;~ 01A2:2D8A
cs=0x1a2;eip=0x002d8d; 	T(dh = 0x20;);	// 7014                  mov     dh, 20h ; ' ' ;~ 01A2:2D8D
cs=0x1a2;eip=0x002d8f; 	T(bh = 0x0E;);	// 7015                  mov     bh, 0Eh ;~ 01A2:2D8F
cs=0x1a2;eip=0x002d91; 	J(CALL(sub_15d80,0));	// 7016                  call    sub_15D80 ;~ 01A2:2D91
cs=0x1a2;eip=0x002d94; 	X(PUSH(di));	// 7017                  push    di ;~ 01A2:2D94
cs=0x1a2;eip=0x002d95; 	X(PUSH(es));	// 7018                  push    es ;~ 01A2:2D95
cs=0x1a2;eip=0x002d96; 	X(PUSH(si));	// 7019                  push    si ;~ 01A2:2D96
cs=0x1a2;eip=0x002d97; 	J(CALL(seg000_ddff_proc,m2c::kloc_1ddff));	// 7020                  call    loc_1DDFF ;~ 01A2:2D97
cs=0x1a2;eip=0x002d9a; 	X(POP(si));	// 7021                  pop     si ;~ 01A2:2D9A
cs=0x1a2;eip=0x002d9b; 	X(POP(es));	// 7022                  pop     es ;~ 01A2:2D9B
cs=0x1a2;eip=0x002d9c; 	X(POP(di));	// 7024                  pop     di ;~ 01A2:2D9C
cs=0x1a2;eip=0x002d9d; 	X(POP(bx));	// 7025                  pop     bx ;~ 01A2:2D9D
cs=0x1a2;eip=0x002d9e; 	X(PUSH(di));	// 7026                  push    di ;~ 01A2:2D9E
cs=0x1a2;eip=0x002d9f; 	X(PUSH(bx));	// 7027                  push    bx ;~ 01A2:2D9F
cs=0x1a2;eip=0x002da0; 	T(CMP(*(raddr(es,di+0x16)), 2));	// 7028                  cmp     byte ptr es:[di+16h], 2 ;~ 01A2:2DA0
cs=0x1a2;eip=0x002da5; 	J(JZ(loc_12db7));	// 7029                  jz      short loc_12DB7 ;~ 01A2:2DA5
cs=0x1a2;eip=0x002da7; 	T(CMP(*(raddr(es,di+0x16)), 1));	// 7030                  cmp     byte ptr es:[di+16h], 1 ;~ 01A2:2DA7
cs=0x1a2;eip=0x002dac; 	J(JNZ(loc_12dc0));	// 7031                  jnz     short loc_12DC0 ;~ 01A2:2DAC
cs=0x1a2;eip=0x002dae; 	T(XCHG(bx, si));	// 7032                  xchg    bx, si ;~ 01A2:2DAE
cs=0x1a2;eip=0x002db0; 	J(CALL(_group23,m2c::kloc_1865e));	// 7033                  call    loc_1865E ;~ 01A2:2DB0
cs=0x1a2;eip=0x002db3; 	T(XCHG(bx, si));	// 7034                  xchg    bx, si ;~ 01A2:2DB3
cs=0x1a2;eip=0x002db5; 	J(JMP(loc_12dcb));	// 7035                  jmp     short loc_12DCB ;~ 01A2:2DB5
loc_12db7:
	// 4869 
cs=0x1a2;eip=0x002db7; 	T(XCHG(bx, si));	// 7039                  xchg    bx, si ;~ 01A2:2DB7
cs=0x1a2;eip=0x002db9; 	J(CALL(seg000_868b_proc,m2c::kloc_1868b));	// 7040                  call    loc_1868B ;~ 01A2:2DB9
cs=0x1a2;eip=0x002dbc; 	T(XCHG(bx, si));	// 7041                  xchg    bx, si ;~ 01A2:2DBC
cs=0x1a2;eip=0x002dbe; 	J(JMP(loc_12dcb));	// 7042                  jmp     short loc_12DCB ;~ 01A2:2DBE
loc_12dc0:
	// 4870 
cs=0x1a2;eip=0x002dc0; 	T(MOV(dx, *(dw*)(raddr(es,di+0x0A))));	// 7046                  mov     dx, es:[di+0Ah] ;~ 01A2:2DC0
cs=0x1a2;eip=0x002dc4; 	T(OR(dx, dx));	// 7047                  or      dx, dx ;~ 01A2:2DC4
cs=0x1a2;eip=0x002dc6; 	J(JS(loc_12ddd));	// 7048                  js      short loc_12DDD ;~ 01A2:2DC6
cs=0x1a2;eip=0x002dc8; 	J(CALL(sub_175af,0));	// 7049                  call    sub_175AF ;~ 01A2:2DC8
loc_12dcb:
	// 4871 
cs=0x1a2;eip=0x002dcb; 	X(POP(bx));	// 7053                  pop     bx ;~ 01A2:2DCB
cs=0x1a2;eip=0x002dcc; 	X(PUSH(bx));	// 7054                  push    bx ;~ 01A2:2DCC
cs=0x1a2;eip=0x002dcd; 	T(MOV(ax, *(dw*)(raddr(ds,bx))));	// 7055                  mov     ax, [bx] ;~ 01A2:2DCD
cs=0x1a2;eip=0x002dcf; 	T(MOV(dx, *(dw*)(raddr(ds,bx+2))));	// 7056                  mov     dx, [bx+2] ;~ 01A2:2DCF
cs=0x1a2;eip=0x002dd2; 	T(dh = dl;);	// 7057                  mov     dh, dl ;~ 01A2:2DD2
cs=0x1a2;eip=0x002dd4; 	X(MOV(*(raddr(ds,di+0x0F)), 0));	// 7058                  mov     byte ptr [di+0Fh], 0 ;~ 01A2:2DD4
cs=0x1a2;eip=0x002dd8; 	T(ch = 0x6C;);	// 7059                  mov     ch, 6Ch ; 'l' ;~ 01A2:2DD8
cs=0x1a2;eip=0x002dda; 	J(CALL(sub_18738,0));	// 7060                  call    sub_18738 ;~ 01A2:2DDA
loc_12ddd:
	// 4872 
cs=0x1a2;eip=0x002ddd; 	T(ADD(sp, 2));	// 7063                  add     sp, 2 ;~ 01A2:2DDD
cs=0x1a2;eip=0x002de0; 	X(POP(di));	// 7064                  pop     di ;~ 01A2:2DE0
cs=0x1a2;eip=0x002de1; 	J(RETN(0));	// 7065                  retn ;~ 01A2:2DE1

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_12db7: 	goto loc_12db7;
        case m2c::kloc_12dc0: 	goto loc_12dc0;
        case m2c::kloc_12dcb: 	goto loc_12dcb;
        case m2c::kloc_12ddd: 	goto loc_12ddd;
        case m2c::ksub_12d81: 	goto sub_12d81;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_12de2(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_12de2:
    _begin:
cs=0x1a2;eip=0x002de2; 	T(dx = word_1f3ea;);	// 7077                  mov     dx, ds:word_1F3EA ;~ 01A2:2DE2
cs=0x1a2;eip=0x002de6; 	T(OR(dx, dx));	// 7078                  or      dx, dx ;~ 01A2:2DE6
cs=0x1a2;eip=0x002de8; 	J(JZ(loc_12e08));	// 7079                  jz      short loc_12E08 ;~ 01A2:2DE8
cs=0x1a2;eip=0x002dea; 	X(PUSH(ax));	// 7080                  push    ax ;~ 01A2:2DEA
cs=0x1a2;eip=0x002deb; 	T(ax = 0x0E;);	// 7081                  mov     ax, 0Eh ;~ 01A2:2DEB
cs=0x1a2;eip=0x002dee; 	J(CALL(sub_1156c,0));	// 7082                  call    sub_1156C ;~ 01A2:2DEE
cs=0x1a2;eip=0x002df1; 	X(POP(ax));	// 7083                  pop     ax ;~ 01A2:2DF1
cs=0x1a2;eip=0x002df2; 	T(ax = 6;);	// 7084                  mov     ax, 6 ;~ 01A2:2DF2
cs=0x1a2;eip=0x002df5; 	J(CALL(sub_1410e,0));	// 7085                  call    sub_1410E ;~ 01A2:2DF5
cs=0x1a2;eip=0x002df8; 	T(si = di;);	// 7086                  mov     si, di ;~ 01A2:2DF8
cs=0x1a2;eip=0x002dfa; 	T(MOV(dx, *(dw*)(raddr(ds,si+6))));	// 7087                  mov     dx, [si+6] ;~ 01A2:2DFA
cs=0x1a2;eip=0x002dfd; 	T(ax = 2;);	// 7088                  mov     ax, 2 ;~ 01A2:2DFD
cs=0x1a2;eip=0x002e00; 	J(CALL(sub_1410e,0));	// 7089                  call    sub_1410E ;~ 01A2:2E00
cs=0x1a2;eip=0x002e03; 	T(cl = 0x0E2;);	// 7090                  mov     cl, 0E2h ;~ 01A2:2E03
cs=0x1a2;eip=0x002e05; 	J(return seg000_2ef2_proc(m2c::kloc_12f1c, _state););	// 7091                  jmp     loc_12F1C ;~ 01A2:2E05
loc_12e08:
	// 4873 
cs=0x1a2;eip=0x002e08; 	T(cl = 0x0FF;);	// 7095                  mov     cl, 0FFh ;~ 01A2:2E08
cs=0x1a2;eip=0x002e0a; 	J(RETN(0));	// 7096                  retn ;~ 01A2:2E0A

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_12e08: 	goto loc_12e08;
        case m2c::ksub_12de2: 	goto sub_12de2;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_12e2d(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_12e2d:
    _begin:
cs=0x1a2;eip=0x002e2d; 	T(bx = si;);	// 7140                  mov     bx, si ;~ 01A2:2E2D
cs=0x1a2;eip=0x002e2f; 	T(XOR(ah, ah));	// 7141                  xor     ah, ah ;~ 01A2:2E2F
cs=0x1a2;eip=0x002e31; 	T(MOV(al, *(raddr(ds,si+0x0C))));	// 7142                  mov     al, [si+0Ch] ;~ 01A2:2E31
cs=0x1a2;eip=0x002e34; 	T(ADD(bx, ax));	// 7143                  add     bx, ax ;~ 01A2:2E34
cs=0x1a2;eip=0x002e36; 	T(bp = 0x2E0B;);	// 7144                  mov     bp, 2E0Bh ;~ 01A2:2E36
cs=0x1a2;eip=0x002e39; 	J(CALL(seg000_9c4f_proc,m2c::kloc_19c4f));	// 7145                  call    loc_19C4F ;~ 01A2:2E39
cs=0x1a2;eip=0x002e3c; 	J(CALL(sub_19d8e,0));	// 7146                  call    sub_19D8E ;~ 01A2:2E3C
cs=0x1a2;eip=0x002e3f; 	J(RETN(0));	// 7147                  retn ;~ 01A2:2E3F

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_12e2d: 	goto sub_12e2d;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_2e40_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_2e40_proc:
    _begin:
cs=0x1a2;eip=0x002e40; 	X(PUSH(si));	// 7151                  push    si ;~ 01A2:2E40
cs=0x1a2;eip=0x002e41; 	X(PUSH(di));	// 7152                  push    di ;~ 01A2:2E41
cs=0x1a2;eip=0x002e42; 	X(PUSH(es));	// 7153                  push    es ;~ 01A2:2E42
cs=0x1a2;eip=0x002e43; 	T(dx = word_1f6fc;);	// 7154                  mov     dx, ds:word_1F6FC ;~ 01A2:2E43
cs=0x1a2;eip=0x002e47; 	T(ax = 6;);	// 7155                  mov     ax, 6 ;~ 01A2:2E47
cs=0x1a2;eip=0x002e4a; 	J(CALL(sub_1410e,0));	// 7156                  call    sub_1410E ;~ 01A2:2E4A
cs=0x1a2;eip=0x002e4d; 	X(*(dw*)(&unk_1f24a) = di;);	// 7157                  mov     word ptr unk_1F24A, di ;~ 01A2:2E4D
cs=0x1a2;eip=0x002e51; 	T(XOR(ah, ah));	// 7158                  xor     ah, ah ;~ 01A2:2E51
cs=0x1a2;eip=0x002e53; 	T(MOV(al, *(raddr(ds,di+0x0C))));	// 7159                  mov     al, [di+0Ch] ;~ 01A2:2E53
cs=0x1a2;eip=0x002e56; 	T(si = di;);	// 7160                  mov     si, di ;~ 01A2:2E56
cs=0x1a2;eip=0x002e58; 	T(ADD(di, ax));	// 7161                  add     di, ax ;~ 01A2:2E58
cs=0x1a2;eip=0x002e5a; 	X(*(dw*)(&unk_1f250) = di;);	// 7162                  mov     word ptr unk_1F250, di ;~ 01A2:2E5A
cs=0x1a2;eip=0x002e5e; 	T(MOV(dx, *(dw*)(raddr(ds,si+6))));	// 7163                  mov     dx, [si+6] ;~ 01A2:2E5E
cs=0x1a2;eip=0x002e61; 	T(ax = 2;);	// 7164                  mov     ax, 2 ;~ 01A2:2E61
cs=0x1a2;eip=0x002e64; 	J(CALL(sub_1410e,0));	// 7165                  call    sub_1410E ;~ 01A2:2E64
cs=0x1a2;eip=0x002e67; 	X(*(dw*)(&unk_1f24c) = es;);	// 7166                  mov     word ptr unk_1F24C, es ;~ 01A2:2E67
cs=0x1a2;eip=0x002e6b; 	X(*(dw*)(&unk_1f24e) = di;);	// 7167                  mov     word ptr unk_1F24E, di ;~ 01A2:2E6B
cs=0x1a2;eip=0x002e6f; 	X(POP(es));	// 7168                  pop     es ;~ 01A2:2E6F
cs=0x1a2;eip=0x002e70; 	X(POP(di));	// 7170                  pop     di ;~ 01A2:2E70
cs=0x1a2;eip=0x002e71; 	X(POP(si));	// 7171                  pop     si ;~ 01A2:2E71
cs=0x1a2;eip=0x002e72; 	T(bx = *(dw*)(&unk_1f24a););	// 7172                  mov     bx, word ptr unk_1F24A ;~ 01A2:2E72
cs=0x1a2;eip=0x002e76; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 7173                  mov     ax, [si+4] ;~ 01A2:2E76
cs=0x1a2;eip=0x002e79; 	X(PUSH(si));	// 7174                  push    si ;~ 01A2:2E79
cs=0x1a2;eip=0x002e7a; 	T(si = word_1f1f4;);	// 7175                  mov     si, word_1F1F4 ;~ 01A2:2E7A
cs=0x1a2;eip=0x002e7e; 	X(MOV(*(dw*)(raddr(ds,si)), 1));	// 7176                  mov     word ptr [si], 1 ;~ 01A2:2E7E
cs=0x1a2;eip=0x002e82; 	T(ADD(si, 2));	// 7177                  add     si, 2 ;~ 01A2:2E82
cs=0x1a2;eip=0x002e85; 	X(MOV(*(dw*)(raddr(ds,si)), bx));	// 7178                  mov     [si], bx ;~ 01A2:2E85
cs=0x1a2;eip=0x002e87; 	T(ADD(si, 2));	// 7179                  add     si, 2 ;~ 01A2:2E87
cs=0x1a2;eip=0x002e8a; 	X(MOV(*(dw*)(raddr(ds,si)), ax));	// 7180                  mov     [si], ax ;~ 01A2:2E8A
cs=0x1a2;eip=0x002e8c; 	T(ADD(si, 2));	// 7181                  add     si, 2 ;~ 01A2:2E8C
cs=0x1a2;eip=0x002e8f; 	X(word_1f1f4 = si;);	// 7182                  mov     word_1F1F4, si ;~ 01A2:2E8F
cs=0x1a2;eip=0x002e93; 	X(INC(word_1f396));	// 7183                  inc     ds:word_1F396 ;~ 01A2:2E93
cs=0x1a2;eip=0x002e97; 	X(POP(si));	// 7184                  pop     si ;~ 01A2:2E97
cs=0x1a2;eip=0x002e98; 	X(byte_1f818 = 1;);	// 7185                  mov     ds:byte_1F818, 1 ;~ 01A2:2E98
cs=0x1a2;eip=0x002e9d; 	T(MOV(dx, *(dw*)(raddr(ds,si+4))));	// 7186                  mov     dx, [si+4] ;~ 01A2:2E9D
cs=0x1a2;eip=0x002ea0; 	J(CALL(sub_16896,m2c::kloc_1689c));	// 7187                  call    loc_1689C ;~ 01A2:2EA0
cs=0x1a2;eip=0x002ea3; 	X(byte_1f818 = 0;);	// 7188                  mov     ds:byte_1F818, 0 ;~ 01A2:2EA3
cs=0x1a2;eip=0x002ea8; 	J(RETN(0));	// 7189                  retn ;~ 01A2:2EA8

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kseg000_2e40_proc: 	goto seg000_2e40_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_12ea9(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_12ea9:
    _begin:
cs=0x1a2;eip=0x002ea9; 	T(MOV(dx, *(dw*)(raddr(ds,si+4))));	// 7195                  mov     dx, [si+4] ;~ 01A2:2EA9
cs=0x1a2;eip=0x002eac; 	T(XOR(ah, ah));	// 7196                  xor     ah, ah ;~ 01A2:2EAC
cs=0x1a2;eip=0x002eae; 	T(al = byte_1f81d;);	// 7197                  mov     al, ds:byte_1F81D ;~ 01A2:2EAE
cs=0x1a2;eip=0x002eb1; 	T(CMP(ax, word_1f710));	// 7198                  cmp     ax, ds:word_1F710 ;~ 01A2:2EB1
cs=0x1a2;eip=0x002eb5; 	J(JZ(loc_12ee8));	// 7199                  jz      short loc_12EE8 ;~ 01A2:2EB5
cs=0x1a2;eip=0x002eb7; 	J(CALL(sub_13e6d,0));	// 7200                  call    sub_13E6D ;~ 01A2:2EB7
cs=0x1a2;eip=0x002eba; 	T(di = si;);	// 7201                  mov     di, si ;~ 01A2:2EBA
cs=0x1a2;eip=0x002ebc; 	J(CALL(sub_13f35,0));	// 7202                  call    sub_13F35 ;~ 01A2:2EBC
cs=0x1a2;eip=0x002ebf; 	J(CALL(sub_1d445,0));	// 7203                  call    sub_1D445 ;~ 01A2:2EBF
cs=0x1a2;eip=0x002ec2; 	J(CALL(sub_15114,0));	// 7204                  call    sub_15114 ;~ 01A2:2EC2
cs=0x1a2;eip=0x002ec5; 	J(CALL(sub_1d445,0));	// 7205                  call    sub_1D445 ;~ 01A2:2EC5
cs=0x1a2;eip=0x002ec8; 	X(PUSH(si));	// 7206                  push    si ;~ 01A2:2EC8
cs=0x1a2;eip=0x002ec9; 	T(si = word_1f1f4;);	// 7207                  mov     si, word_1F1F4 ;~ 01A2:2EC9
cs=0x1a2;eip=0x002ecd; 	X(MOV(*(dw*)(raddr(ds,si)), 0));	// 7208                  mov     word ptr [si], 0 ;~ 01A2:2ECD
cs=0x1a2;eip=0x002ed1; 	T(ADD(si, 2));	// 7209                  add     si, 2 ;~ 01A2:2ED1
cs=0x1a2;eip=0x002ed4; 	X(POP(*(dw*)(raddr(ds,si))));	// 7210                  pop     word ptr [si] ;~ 01A2:2ED4
cs=0x1a2;eip=0x002ed6; 	X(PUSH(*(dw*)(raddr(ds,si))));	// 7211                  push    word ptr [si] ;~ 01A2:2ED6
cs=0x1a2;eip=0x002ed8; 	T(ADD(si, 2));	// 7212                  add     si, 2 ;~ 01A2:2ED8
cs=0x1a2;eip=0x002edb; 	T(ADD(si, 2));	// 7213                  add     si, 2 ;~ 01A2:2EDB
cs=0x1a2;eip=0x002ede; 	X(word_1f1f4 = si;);	// 7214                  mov     word_1F1F4, si ;~ 01A2:2EDE
cs=0x1a2;eip=0x002ee2; 	X(INC(word_1f396));	// 7215                  inc     ds:word_1F396 ;~ 01A2:2EE2
cs=0x1a2;eip=0x002ee6; 	X(POP(si));	// 7216                  pop     si ;~ 01A2:2EE6
cs=0x1a2;eip=0x002ee7; 	J(RETN(0));	// 7217                  retn ;~ 01A2:2EE7
loc_12ee8:
	// 4874 
cs=0x1a2;eip=0x002ee8; 	X(word_1f70a = 0x35;);	// 7221                  mov     ds:word_1F70A, 35h ; '5' ;~ 01A2:2EE8
cs=0x1a2;eip=0x002eee; 	J(CALL(sub_15c9c,0));	// 7222                  call    sub_15C9C ;~ 01A2:2EEE
cs=0x1a2;eip=0x002ef1; 	J(RETN(0));	// 7223                  retn ;~ 01A2:2EF1

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_12ee8: 	goto loc_12ee8;
        case m2c::ksub_12ea9: 	goto sub_12ea9;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_2ef2_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_2ef2_proc:
    _begin:
cs=0x1a2;eip=0x002ef2; 	X(PUSH(ax));	// 7227                  push    ax ;~ 01A2:2EF2
cs=0x1a2;eip=0x002ef3; 	T(ax = 0x0E;);	// 7228                  mov     ax, 0Eh ;~ 01A2:2EF3
cs=0x1a2;eip=0x002ef6; 	J(CALL(sub_1156c,0));	// 7229                  call    sub_1156C ;~ 01A2:2EF6
cs=0x1a2;eip=0x002ef9; 	X(POP(ax));	// 7230                  pop     ax ;~ 01A2:2EF9
cs=0x1a2;eip=0x002efa; 	T(cl = 0x0E2;);	// 7231                  mov     cl, 0E2h ;~ 01A2:2EFA
cs=0x1a2;eip=0x002efc; 	T(es = word_1f1fe;);	// 7232                  mov     es, word_1F1FE ;~ 01A2:2EFC
cs=0x1a2;eip=0x002f00; 	T(di = word_1f200;);	// 7233                  mov     di, word_1F200 ;~ 01A2:2F00
cs=0x1a2;eip=0x002f04; 	T(si = word_1f1fc;);	// 7234                  mov     si, word_1F1FC ;~ 01A2:2F04
cs=0x1a2;eip=0x002f08; 	T(dx = word_1f3d0;);	// 7235                  mov     dx, ds:word_1F3D0 ;~ 01A2:2F08
cs=0x1a2;eip=0x002f0c; 	J(JMP(loc_12f1c));	// 7236                  jmp     short loc_12F1C ;~ 01A2:2F0C
ret_1a2_2f0e:
	// 4875 
cs=0x1a2;eip=0x002f0e; 	T(XOR(cl, cl));	// 7238                  xor     cl, cl ;~ 01A2:2F0E
cs=0x1a2;eip=0x002f10; 	T(es = word_1f1fe;);	// 7239                  mov     es, word_1F1FE ;~ 01A2:2F10
cs=0x1a2;eip=0x002f14; 	T(di = word_1f200;);	// 7240                  mov     di, word_1F200 ;~ 01A2:2F14
cs=0x1a2;eip=0x002f18; 	T(si = word_1f1fc;);	// 7241                  mov     si, word_1F1FC ;~ 01A2:2F18
loc_12f1c:
	// 4876 
cs=0x1a2;eip=0x002f1c; 	X(PUSH(si));	// 7246                  push    si ;~ 01A2:2F1C
cs=0x1a2;eip=0x002f1d; 	X(PUSH(si));	// 7247                  push    si ;~ 01A2:2F1D
cs=0x1a2;eip=0x002f1e; 	T(si = word_1f1f4;);	// 7248                  mov     si, word_1F1F4 ;~ 01A2:2F1E
cs=0x1a2;eip=0x002f22; 	X(MOV(*(dw*)(raddr(ds,si)), 0x15));	// 7249                  mov     word ptr [si], 15h ;~ 01A2:2F22
cs=0x1a2;eip=0x002f26; 	T(ADD(si, 2));	// 7250                  add     si, 2 ;~ 01A2:2F26
cs=0x1a2;eip=0x002f29; 	X(POP(*(dw*)(raddr(ds,si))));	// 7251                  pop     word ptr [si] ;~ 01A2:2F29
cs=0x1a2;eip=0x002f2b; 	X(PUSH(*(dw*)(raddr(ds,si))));	// 7252                  push    word ptr [si] ;~ 01A2:2F2B
cs=0x1a2;eip=0x002f2d; 	T(ADD(si, 2));	// 7253                  add     si, 2 ;~ 01A2:2F2D
cs=0x1a2;eip=0x002f30; 	T(ADD(si, 2));	// 7254                  add     si, 2 ;~ 01A2:2F30
cs=0x1a2;eip=0x002f33; 	X(word_1f1f4 = si;);	// 7255                  mov     word_1F1F4, si ;~ 01A2:2F33
cs=0x1a2;eip=0x002f37; 	X(INC(word_1f396));	// 7256                  inc     ds:word_1F396 ;~ 01A2:2F37
cs=0x1a2;eip=0x002f3b; 	X(POP(si));	// 7257                  pop     si ;~ 01A2:2F3B
cs=0x1a2;eip=0x002f3c; 	X(POP(si));	// 7258                  pop     si ;~ 01A2:2F3C
cs=0x1a2;eip=0x002f3d; 	T(bp = word_1f1c2;);	// 7259                  mov     bp, word_1F1C2 ;~ 01A2:2F3D
cs=0x1a2;eip=0x002f41; 	T(ah = byte_1f778;);	// 7260                  mov     ah, ds:byte_1F778 ;~ 01A2:2F41
cs=0x1a2;eip=0x002f45; 	X(PUSH(cx));	// 7261                  push    cx ;~ 01A2:2F45
cs=0x1a2;eip=0x002f46; 	J(CALL(sub_16c72,0));	// 7262                  call    sub_16C72 ;~ 01A2:2F46
cs=0x1a2;eip=0x002f49; 	J(JZ(loc_12f4e));	// 7263                  jz      short loc_12F4E ;~ 01A2:2F49
cs=0x1a2;eip=0x002f4b; 	J(JMP(loc_12fcf));	// 7264                  jmp     loc_12FCF ;~ 01A2:2F4B
loc_12f4e:
	// 4877 
cs=0x1a2;eip=0x002f4e; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 7268                  mov     ax, [si+4] ;~ 01A2:2F4E
cs=0x1a2;eip=0x002f51; 	X(PUSH(ax));	// 7269                  push    ax ;~ 01A2:2F51
cs=0x1a2;eip=0x002f52; 	X(PUSH(bx));	// 7270                  push    bx ;~ 01A2:2F52
cs=0x1a2;eip=0x002f53; 	X(PUSH(cx));	// 7271                  push    cx ;~ 01A2:2F53
cs=0x1a2;eip=0x002f54; 	X(PUSH(dx));	// 7272                  push    dx ;~ 01A2:2F54
cs=0x1a2;eip=0x002f55; 	X(PUSH(bp));	// 7273                  push    bp ;~ 01A2:2F55
cs=0x1a2;eip=0x002f56; 	X(PUSH(si));	// 7274                  push    si ;~ 01A2:2F56
cs=0x1a2;eip=0x002f57; 	X(PUSH(di));	// 7275                  push    di ;~ 01A2:2F57
cs=0x1a2;eip=0x002f58; 	X(PUSH(es));	// 7276                  push    es ;~ 01A2:2F58
cs=0x1a2;eip=0x002f59; 	X(PUSH(ds));	// 7277                  push    ds ;~ 01A2:2F59
cs=0x1a2;eip=0x002f5a; 	J(CALL(sub_13dfc,0));	// 7278                  call    sub_13DFC ;~ 01A2:2F5A
cs=0x1a2;eip=0x002f5d; 	X(POP(ds));	// 7279                  pop     ds ;~ 01A2:2F5D
cs=0x1a2;eip=0x002f5e; 	X(POP(es));	// 7280                  pop     es ;~ 01A2:2F5E
cs=0x1a2;eip=0x002f5f; 	X(POP(di));	// 7281                  pop     di ;~ 01A2:2F5F
cs=0x1a2;eip=0x002f60; 	X(POP(si));	// 7282                  pop     si ;~ 01A2:2F60
cs=0x1a2;eip=0x002f61; 	X(POP(bp));	// 7283                  pop     bp ;~ 01A2:2F61
cs=0x1a2;eip=0x002f62; 	X(POP(dx));	// 7284                  pop     dx ;~ 01A2:2F62
cs=0x1a2;eip=0x002f63; 	X(POP(cx));	// 7285                  pop     cx ;~ 01A2:2F63
cs=0x1a2;eip=0x002f64; 	X(POP(bx));	// 7286                  pop     bx ;~ 01A2:2F64
cs=0x1a2;eip=0x002f65; 	X(POP(ax));	// 7287                  pop     ax ;~ 01A2:2F65
cs=0x1a2;eip=0x002f66; 	J(JS(loc_12fcf));	// 7288                  js      short loc_12FCF ;~ 01A2:2F66
cs=0x1a2;eip=0x002f68; 	T(MOV(dx, *(dw*)(raddr(ds,si+4))));	// 7289                  mov     dx, [si+4] ;~ 01A2:2F68
cs=0x1a2;eip=0x002f6b; 	X(PUSH(ax));	// 7290                  push    ax ;~ 01A2:2F6B
cs=0x1a2;eip=0x002f6c; 	X(PUSH(bx));	// 7291                  push    bx ;~ 01A2:2F6C
cs=0x1a2;eip=0x002f6d; 	X(PUSH(cx));	// 7292                  push    cx ;~ 01A2:2F6D
cs=0x1a2;eip=0x002f6e; 	X(PUSH(dx));	// 7293                  push    dx ;~ 01A2:2F6E
cs=0x1a2;eip=0x002f6f; 	X(PUSH(bp));	// 7294                  push    bp ;~ 01A2:2F6F
cs=0x1a2;eip=0x002f70; 	X(PUSH(si));	// 7295                  push    si ;~ 01A2:2F70
cs=0x1a2;eip=0x002f71; 	X(PUSH(di));	// 7296                  push    di ;~ 01A2:2F71
cs=0x1a2;eip=0x002f72; 	X(PUSH(es));	// 7297                  push    es ;~ 01A2:2F72
cs=0x1a2;eip=0x002f73; 	X(PUSH(ds));	// 7298                  push    ds ;~ 01A2:2F73
cs=0x1a2;eip=0x002f74; 	J(CALL(sub_1d445,0));	// 7299                  call    sub_1D445 ;~ 01A2:2F74
cs=0x1a2;eip=0x002f77; 	J(CALL(sub_13efd,0));	// 7300                  call    sub_13EFD ;~ 01A2:2F77
cs=0x1a2;eip=0x002f7a; 	J(CALL(sub_1d445,0));	// 7301                  call    sub_1D445 ;~ 01A2:2F7A
cs=0x1a2;eip=0x002f7d; 	X(POP(ds));	// 7302                  pop     ds ;~ 01A2:2F7D
cs=0x1a2;eip=0x002f7e; 	X(POP(es));	// 7303                  pop     es ;~ 01A2:2F7E
cs=0x1a2;eip=0x002f7f; 	X(POP(di));	// 7304                  pop     di ;~ 01A2:2F7F
cs=0x1a2;eip=0x002f80; 	X(POP(si));	// 7305                  pop     si ;~ 01A2:2F80
cs=0x1a2;eip=0x002f81; 	X(POP(bp));	// 7306                  pop     bp ;~ 01A2:2F81
cs=0x1a2;eip=0x002f82; 	X(POP(dx));	// 7307                  pop     dx ;~ 01A2:2F82
cs=0x1a2;eip=0x002f83; 	X(POP(cx));	// 7308                  pop     cx ;~ 01A2:2F83
cs=0x1a2;eip=0x002f84; 	X(POP(bx));	// 7309                  pop     bx ;~ 01A2:2F84
cs=0x1a2;eip=0x002f85; 	X(POP(ax));	// 7310                  pop     ax ;~ 01A2:2F85
cs=0x1a2;eip=0x002f86; 	J(CALL(sub_1d445,0));	// 7311                  call    sub_1D445 ;~ 01A2:2F86
cs=0x1a2;eip=0x002f89; 	X(PUSH(si));	// 7312                  push    si ;~ 01A2:2F89
cs=0x1a2;eip=0x002f8a; 	J(CALL(sub_151e2,0));	// 7313                  call    sub_151E2 ;~ 01A2:2F8A
cs=0x1a2;eip=0x002f8d; 	X(POP(si));	// 7314                  pop     si ;~ 01A2:2F8D
cs=0x1a2;eip=0x002f8e; 	J(CALL(sub_1d445,0));	// 7315                  call    sub_1D445 ;~ 01A2:2F8E
cs=0x1a2;eip=0x002f91; 	T(MOV(si, *(dw*)(raddr(ds,si+8))));	// 7316                  mov     si, [si+8] ;~ 01A2:2F91
cs=0x1a2;eip=0x002f94; 	J(CALL(sub_16bfc,0));	// 7317                  call    sub_16BFC ;~ 01A2:2F94
cs=0x1a2;eip=0x002f97; 	X(POP(cx));	// 7318                  pop     cx ;~ 01A2:2F97
cs=0x1a2;eip=0x002f98; 	T(OR(cl, cl));	// 7319                  or      cl, cl ;~ 01A2:2F98
cs=0x1a2;eip=0x002f9a; 	J(JZ(loc_12fcc));	// 7320                  jz      short loc_12FCC ;~ 01A2:2F9A
cs=0x1a2;eip=0x002f9c; 	X(byte_1f771 = 4;);	// 7321                  mov     ds:byte_1F771, 4 ;~ 01A2:2F9C
cs=0x1a2;eip=0x002fa1; 	T(XOR(ah, ah));	// 7322                  xor     ah, ah ;~ 01A2:2FA1
cs=0x1a2;eip=0x002fa3; 	T(al = byte_1f778;);	// 7323                  mov     al, ds:byte_1F778 ;~ 01A2:2FA3
cs=0x1a2;eip=0x002fa6; 	T(di = 0x0FBDE;);	// 7324                  mov     di, 0FBDEh ;~ 01A2:2FA6
cs=0x1a2;eip=0x002fa9; 	T(SHL(ax, 1));	// 7325                  shl     ax, 1 ;~ 01A2:2FA9
cs=0x1a2;eip=0x002fab; 	T(ADD(di, ax));	// 7326                  add     di, ax ;~ 01A2:2FAB
cs=0x1a2;eip=0x002fad; 	T(MOV(ax, *(dw*)(raddr(ds,di))));	// 7327                  mov     ax, [di] ;~ 01A2:2FAD
cs=0x1a2;eip=0x002faf; 	X(MOV(*(dw*)(raddr(ds,si+0x1A)), ax));	// 7328                  mov     [si+1Ah], ax ;~ 01A2:2FAF
cs=0x1a2;eip=0x002fb2; 	T(ax = 0x0FBA5;);	// 7329                  mov     ax, 0FBA5h ;~ 01A2:2FB2
cs=0x1a2;eip=0x002fb5; 	X(MOV(*(dw*)(raddr(ds,si+0x18)), ax));	// 7330                  mov     [si+18h], ax ;~ 01A2:2FB5
cs=0x1a2;eip=0x002fb8; 	T(es = word_1f1fe;);	// 7331                  mov     es, word_1F1FE ;~ 01A2:2FB8
cs=0x1a2;eip=0x002fbc; 	T(di = word_1f200;);	// 7332                  mov     di, word_1F200 ;~ 01A2:2FBC
cs=0x1a2;eip=0x002fc0; 	T(CMP(*(raddr(es,di+0x0D)), 0));	// 7333                  cmp     byte ptr es:[di+0Dh], 0 ;~ 01A2:2FC0
cs=0x1a2;eip=0x002fc5; 	J(JNZ(loc_12fcc));	// 7334                  jnz     short loc_12FCC ;~ 01A2:2FC5
cs=0x1a2;eip=0x002fc7; 	X(MOV(*(dw*)(raddr(ds,si+0x18)), 0x0FBA3));	// 7335                  mov     word ptr [si+18h], 0FBA3h ;~ 01A2:2FC7
loc_12fcc:
	// 4878 
cs=0x1a2;eip=0x002fcc; 	T(XOR(cl, cl));	// 7339                  xor     cl, cl ;~ 01A2:2FCC
cs=0x1a2;eip=0x002fce; 	J(RETN(0));	// 7340                  retn ;~ 01A2:2FCE
loc_12fcf:
	// 4879 
cs=0x1a2;eip=0x002fcf; 	X(POP(cx));	// 7345                  pop     cx ;~ 01A2:2FCF
cs=0x1a2;eip=0x002fd0; 	T(OR(cl, 1));	// 7346                  or      cl, 1 ;~ 01A2:2FD0
cs=0x1a2;eip=0x002fd3; 	J(RETN(0));	// 7347                  retn ;~ 01A2:2FD3

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_12f1c: 	goto loc_12f1c;
        case m2c::kloc_12f4e: 	goto loc_12f4e;
        case m2c::kloc_12fcc: 	goto loc_12fcc;
        case m2c::kloc_12fcf: 	goto loc_12fcf;
        case m2c::kret_1a2_2f0e: 	goto ret_1a2_2f0e;
        case m2c::kseg000_2ef2_proc: 	goto seg000_2ef2_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_12fd4(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_12fd4:
    _begin:
cs=0x1a2;eip=0x002fd4; 	T(CMP(*(raddr(es,di+0x16)), 7));	// 7354                  cmp     byte ptr es:[di+16h], 7 ;~ 01A2:2FD4
cs=0x1a2;eip=0x002fd9; 	J(JZ(loc_12fde));	// 7355                  jz      short loc_12FDE ;~ 01A2:2FD9
cs=0x1a2;eip=0x002fdb; 	J(return sub_13163(m2c::kloc_13183, _state););	// 7356                  jmp     loc_13183 ;~ 01A2:2FDB
loc_12fde:
	// 4880 
cs=0x1a2;eip=0x002fde; 	T(ax = 0x44;);	// 7361                  mov     ax, 44h ; 'D' ;~ 01A2:2FDE
cs=0x1a2;eip=0x002fe1; 	T(dl = 0x0A;);	// 7362                  mov     dl, 0Ah ;~ 01A2:2FE1
cs=0x1a2;eip=0x002fe3; 	X(PUSH(ax));	// 7363                  push    ax ;~ 01A2:2FE3
cs=0x1a2;eip=0x002fe4; 	T(cx = 0x10;);	// 7364                  mov     cx, 10h ;~ 01A2:2FE4
cs=0x1a2;eip=0x002fe7; 	T(CMP(byte_1f87b, 0));	// 7365                  cmp     ds:byte_1F87B, 0 ;~ 01A2:2FE7
cs=0x1a2;eip=0x002fec; 	J(JZ(loc_12ff1));	// 7366                  jz      short loc_12FF1 ;~ 01A2:2FEC
cs=0x1a2;eip=0x002fee; 	T(cx = 0x16;);	// 7367                  mov     cx, 16h ;~ 01A2:2FEE
loc_12ff1:
	// 4881 
cs=0x1a2;eip=0x002ff1; 	X(PUSH(ax));	// 7370                  push    ax ;~ 01A2:2FF1
cs=0x1a2;eip=0x002ff2; 	X(PUSH(dx));	// 7371                  push    dx ;~ 01A2:2FF2
cs=0x1a2;eip=0x002ff3; 	T(dh = 4;);	// 7372                  mov     dh, 4 ;~ 01A2:2FF3
cs=0x1a2;eip=0x002ff5; 	J(CALL(sub_18a87,0));	// 7373                  call    sub_18A87 ;~ 01A2:2FF5
cs=0x1a2;eip=0x002ff8; 	T(dx = 0x0D;);	// 7374                  mov     dx, 0Dh ;~ 01A2:2FF8
cs=0x1a2;eip=0x002ffb; 	J(CALL(sub_175af,0));	// 7375                  call    sub_175AF ;~ 01A2:2FFB
cs=0x1a2;eip=0x002ffe; 	X(POP(dx));	// 7376                  pop     dx ;~ 01A2:2FFE
cs=0x1a2;eip=0x002fff; 	X(POP(ax));	// 7377                  pop     ax ;~ 01A2:2FFF
cs=0x1a2;eip=0x003000; 	T(dh = dl;);	// 7378                  mov     dh, dl ;~ 01A2:3000
cs=0x1a2;eip=0x003002; 	T(ADD(ax, 0x0A));	// 7379                  add     ax, 0Ah ;~ 01A2:3002
cs=0x1a2;eip=0x003005; 	T(ADD(dh, 0x0D));	// 7380                  add     dh, 0Dh ;~ 01A2:3005
cs=0x1a2;eip=0x003008; 	X(PUSH(dx));	// 7381                  push    dx ;~ 01A2:3008
cs=0x1a2;eip=0x003009; 	J(CALL(sub_18738,m2c::kloc_18776));	// 7382                  call    loc_18776 ;~ 01A2:3009
cs=0x1a2;eip=0x00300c; 	T(si = 0x7C4;);	// 7383                  mov     si, 7C4h ;~ 01A2:300C
cs=0x1a2;eip=0x00300f; 	T(dx = word_1f3aa;);	// 7384                  mov     dx, ds:word_1F3AA ;~ 01A2:300F
cs=0x1a2;eip=0x003013; 	T(cl = 0x0FF;);	// 7385                  mov     cl, 0FFh ;~ 01A2:3013
cs=0x1a2;eip=0x003015; 	J(CALL(sub_19ba0,0));	// 7386                  call    sub_19BA0 ;~ 01A2:3015
cs=0x1a2;eip=0x003018; 	X(MOV(*(raddr(ds,si)), 0x2F));	// 7388                  mov     byte ptr [si], 2Fh ; '/' ;~ 01A2:3018
cs=0x1a2;eip=0x00301b; 	T(INC(si));	// 7389                  inc     si ;~ 01A2:301B
cs=0x1a2;eip=0x00301c; 	T(dx = word_1f870;);	// 7390                  mov     dx, ds:word_1F870 ;~ 01A2:301C
cs=0x1a2;eip=0x003020; 	J(CALL(sub_19ba0,m2c::kloc_19bb7));	// 7391                  call    loc_19BB7 ;~ 01A2:3020
cs=0x1a2;eip=0x003023; 	X(POP(dx));	// 7392                  pop     dx ;~ 01A2:3023
cs=0x1a2;eip=0x003024; 	X(POP(ax));	// 7393                  pop     ax ;~ 01A2:3024
cs=0x1a2;eip=0x003025; 	T(ADD(ax, 0x42));	// 7394                  add     ax, 42h ; 'B' ;~ 01A2:3025
cs=0x1a2;eip=0x003028; 	T(CMP(byte_1f87b, 2));	// 7395                  cmp     ds:byte_1F87B, 2 ;~ 01A2:3028
cs=0x1a2;eip=0x00302d; 	J(JNZ(loc_13032));	// 7396                  jnz     short loc_13032 ;~ 01A2:302D
cs=0x1a2;eip=0x00302f; 	T(ADD(ax, 0x1E));	// 7397                  add     ax, 1Eh ;~ 01A2:302F
loc_13032:
	// 4882 
cs=0x1a2;eip=0x003032; 	X(word_1f72a = ax;);	// 7400                  mov     ds:word_1F72A, ax ;~ 01A2:3032
cs=0x1a2;eip=0x003035; 	X(byte_1f85e = dh;);	// 7401                  mov     ds:byte_1F85E, dh ;~ 01A2:3035
cs=0x1a2;eip=0x003039; 	T(di = 0x7C4;);	// 7402                  mov     di, 7C4h ;~ 01A2:3039
cs=0x1a2;eip=0x00303c; 	J(CALL(sub_18738,m2c::kloc_18776));	// 7403                  call    loc_18776 ;~ 01A2:303C
cs=0x1a2;eip=0x00303f; 	T(si = di;);	// 7404                  mov     si, di ;~ 01A2:303F
cs=0x1a2;eip=0x003041; 	T(ax = word_1f3b8;);	// 7405                  mov     ax, ds:word_1F3B8 ;~ 01A2:3041
cs=0x1a2;eip=0x003044; 	T(dx = word_1f3ba;);	// 7406                  mov     dx, ds:word_1F3BA ;~ 01A2:3044
cs=0x1a2;eip=0x003048; 	J(CALL(sub_130e9,0));	// 7407                  call    sub_130E9 ;~ 01A2:3048
cs=0x1a2;eip=0x00304b; 	T(ax = word_1f3bc;);	// 7408                  mov     ax, ds:word_1F3BC ;~ 01A2:304B
cs=0x1a2;eip=0x00304e; 	T(dx = word_1f3be;);	// 7409                  mov     dx, ds:word_1F3BE ;~ 01A2:304E
cs=0x1a2;eip=0x003052; 	J(CALL(sub_130e9,0));	// 7410                  call    sub_130E9 ;~ 01A2:3052
cs=0x1a2;eip=0x003055; 	T(XOR(ax, ax));	// 7411                  xor     ax, ax ;~ 01A2:3055
cs=0x1a2;eip=0x003057; 	T(XOR(dx, dx));	// 7412                  xor     dx, dx ;~ 01A2:3057
cs=0x1a2;eip=0x003059; 	T(al = byte_1f878;);	// 7413                  mov     al, ds:byte_1F878 ;~ 01A2:3059
cs=0x1a2;eip=0x00305c; 	T(INC(al));	// 7414                  inc     al ;~ 01A2:305C
cs=0x1a2;eip=0x00305e; 	J(CALL(sub_130e9,0));	// 7415                  call    sub_130E9 ;~ 01A2:305E
cs=0x1a2;eip=0x003061; 	T(ax = word_1f86a;);	// 7416                  mov     ax, ds:word_1F86A ;~ 01A2:3061
cs=0x1a2;eip=0x003064; 	T(di = *(dw*)(&off_1f88a););	// 7417                  mov     di, word ptr ds:off_1F88A ;~ 01A2:3064
cs=0x1a2;eip=0x003068; 	X(PUSH(es));	// 7418                  push    es ;~ 01A2:3068
cs=0x1a2;eip=0x003069; 	T(es = *(dw*)(((db*)&off_1f88a)+2););	// 7419                  mov     es, word ptr ds:off_1F88A+2 ;~ 01A2:3069
cs=0x1a2;eip=0x00306d; 	T(SUB(ax, *(dw*)(raddr(es,di+0x0A))));	// 7421                  sub     ax, es:[di+0Ah] ;~ 01A2:306D
cs=0x1a2;eip=0x003071; 	X(POP(es));	// 7422                  pop     es ;~ 01A2:3071
cs=0x1a2;eip=0x003072; 	X(PUSH(cx));	// 7424                  push    cx ;~ 01A2:3072
cs=0x1a2;eip=0x003073; 	T(XOR(dx, dx));	// 7425                  xor     dx, dx ;~ 01A2:3073
cs=0x1a2;eip=0x003075; 	T(cx = 0x6400;);	// 7426                  mov     cx, 6400h ;~ 01A2:3075
cs=0x1a2;eip=0x003078; 	T(XCHG(ax, cx));	// 7427                  xchg    ax, cx ;~ 01A2:3078
cs=0x1a2;eip=0x003079; 	T(DIV2(cx));	// 7428                  div     cx ;~ 01A2:3079
cs=0x1a2;eip=0x00307b; 	X(POP(cx));	// 7429                  pop     cx ;~ 01A2:307B
cs=0x1a2;eip=0x00307c; 	T(dx = word_1f6f2;);	// 7430                  mov     dx, ds:word_1F6F2 ;~ 01A2:307C
cs=0x1a2;eip=0x003080; 	T(MUL1_2(dx));	// 7431                  mul     dx ;~ 01A2:3080
cs=0x1a2;eip=0x003082; 	T(cl = 8;);	// 7432                  mov     cl, 8 ;~ 01A2:3082
cs=0x1a2;eip=0x003084; 	T(SHR(ax, cl));	// 7433                  shr     ax, cl ;~ 01A2:3084
cs=0x1a2;eip=0x003086; 	T(dx = ax;);	// 7434                  mov     dx, ax ;~ 01A2:3086
cs=0x1a2;eip=0x003088; 	T(cl = 0x0FF;);	// 7435                  mov     cl, 0FFh ;~ 01A2:3088
cs=0x1a2;eip=0x00308a; 	J(CALL(sub_19ba0,0));	// 7436                  call    sub_19BA0 ;~ 01A2:308A
cs=0x1a2;eip=0x00308d; 	X(MOV(*(raddr(ds,si)), 0x25));	// 7437                  mov     byte ptr [si], 25h ; '%' ;~ 01A2:308D
cs=0x1a2;eip=0x003090; 	X(MOV(*(raddr(ds,si+1)), 0));	// 7438                  mov     byte ptr [si+1], 0 ;~ 01A2:3090
cs=0x1a2;eip=0x003094; 	T(di = 0x7C4;);	// 7439                  mov     di, 7C4h ;~ 01A2:3094
cs=0x1a2;eip=0x003097; 	T(ax = word_1f72a;);	// 7440                  mov     ax, ds:word_1F72A ;~ 01A2:3097
cs=0x1a2;eip=0x00309a; 	T(dh = byte_1f85e;);	// 7441                  mov     dh, ds:byte_1F85E ;~ 01A2:309A
cs=0x1a2;eip=0x00309e; 	T(ADD(dh, 6));	// 7442                  add     dh, 6 ;~ 01A2:309E
cs=0x1a2;eip=0x0030a1; 	X(byte_1f85e = dh;);	// 7443                  mov     ds:byte_1F85E, dh ;~ 01A2:30A1
cs=0x1a2;eip=0x0030a5; 	J(CALL(sub_18738,m2c::kloc_18776));	// 7444                  call    loc_18776 ;~ 01A2:30A5
cs=0x1a2;eip=0x0030a8; 	T(dx = word_1f3bc;);	// 7445                  mov     dx, ds:word_1F3BC ;~ 01A2:30A8
cs=0x1a2;eip=0x0030ac; 	T(ax = word_1f3be;);	// 7446                  mov     ax, ds:word_1F3BE ;~ 01A2:30AC
cs=0x1a2;eip=0x0030af; 	T(si = word_1f1d4;);	// 7447                  mov     si, word_1F1D4 ;~ 01A2:30AF
loc_130b3:
	// 4883 
cs=0x1a2;eip=0x0030b3; 	T(CMP(ax, *(dw*)(raddr(ds,si+2))));	// 7450                  cmp     ax, [si+2] ;~ 01A2:30B3
cs=0x1a2;eip=0x0030b6; 	J(JA(loc_130bd));	// 7451                  ja      short loc_130BD ;~ 01A2:30B6
cs=0x1a2;eip=0x0030b8; 	T(CMP(dx, *(dw*)(raddr(ds,si+4))));	// 7452                  cmp     dx, [si+4] ;~ 01A2:30B8
cs=0x1a2;eip=0x0030bb; 	J(JBE(loc_130c2));	// 7453                  jbe     short loc_130C2 ;~ 01A2:30BB
loc_130bd:
	// 4884 
cs=0x1a2;eip=0x0030bd; 	T(ADD(si, 6));	// 7456                  add     si, 6 ;~ 01A2:30BD
cs=0x1a2;eip=0x0030c0; 	J(JMP(loc_130b3));	// 7457                  jmp     short loc_130B3 ;~ 01A2:30C0
loc_130c2:
	// 4885 
cs=0x1a2;eip=0x0030c2; 	T(MOV(dx, *(dw*)(raddr(ds,si))));	// 7461                  mov     dx, [si] ;~ 01A2:30C2
cs=0x1a2;eip=0x0030c4; 	J(CALL(sub_175af,0));	// 7462                  call    sub_175AF ;~ 01A2:30C4
cs=0x1a2;eip=0x0030c7; 	T(ax = word_1f72a;);	// 7463                  mov     ax, ds:word_1F72A ;~ 01A2:30C7
cs=0x1a2;eip=0x0030ca; 	T(dh = byte_1f85e;);	// 7464                  mov     dh, ds:byte_1F85E ;~ 01A2:30CA
cs=0x1a2;eip=0x0030ce; 	T(ADD(dh, 6));	// 7465                  add     dh, 6 ;~ 01A2:30CE
cs=0x1a2;eip=0x0030d1; 	X(byte_1f85e = dh;);	// 7466                  mov     ds:byte_1F85E, dh ;~ 01A2:30D1
cs=0x1a2;eip=0x0030d5; 	J(CALL(sub_18738,m2c::kloc_18776));	// 7467                  call    loc_18776 ;~ 01A2:30D5
cs=0x1a2;eip=0x0030d8; 	J(CALL(sub_19d8e,0));	// 7468                  call    sub_19D8E ;~ 01A2:30D8
loc_130db:
	// 4886 
cs=0x1a2;eip=0x0030db; 	J(CALL(sub_11043,0));	// 7471                  call    sub_11043 ;~ 01A2:30DB
cs=0x1a2;eip=0x0030de; 	T(CMP(byte_1f885, 0));	// 7472                  cmp     ds:byte_1F885, 0 ;~ 01A2:30DE
cs=0x1a2;eip=0x0030e3; 	J(JZ(loc_130db));	// 7473                  jz      short loc_130DB ;~ 01A2:30E3
cs=0x1a2;eip=0x0030e5; 	J(CALL(sub_13514,0));	// 7474                  call    sub_13514 ;~ 01A2:30E5
cs=0x1a2;eip=0x0030e8; 	J(RETN(0));	// 7475                  retn ;~ 01A2:30E8

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_12fde: 	goto loc_12fde;
        case m2c::kloc_12ff1: 	goto loc_12ff1;
        case m2c::kloc_13032: 	goto loc_13032;
        case m2c::kloc_130b3: 	goto loc_130b3;
        case m2c::kloc_130bd: 	goto loc_130bd;
        case m2c::kloc_130c2: 	goto loc_130c2;
        case m2c::kloc_130db: 	goto loc_130db;
        case m2c::ksub_12fd4: 	goto sub_12fd4;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_130e9(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_130e9:
    _begin:
cs=0x1a2;eip=0x0030e9; 	J(CALL(seg000_9c1e_proc,m2c::kloc_19c1e));	// 7484                  call    loc_19C1E ;~ 01A2:30E9
cs=0x1a2;eip=0x0030ec; 	T(ax = word_1f72a;);	// 7485                  mov     ax, ds:word_1F72A ;~ 01A2:30EC
cs=0x1a2;eip=0x0030ef; 	T(dh = byte_1f85e;);	// 7486                  mov     dh, ds:byte_1F85E ;~ 01A2:30EF
cs=0x1a2;eip=0x0030f3; 	T(ADD(dh, 6));	// 7487                  add     dh, 6 ;~ 01A2:30F3
cs=0x1a2;eip=0x0030f6; 	X(byte_1f85e = dh;);	// 7488                  mov     ds:byte_1F85E, dh ;~ 01A2:30F6
cs=0x1a2;eip=0x0030fa; 	J(CALL(sub_18738,m2c::kloc_18776));	// 7489                  call    loc_18776 ;~ 01A2:30FA
cs=0x1a2;eip=0x0030fd; 	J(RETN(0));	// 7490                  retn ;~ 01A2:30FD

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_130e9: 	goto sub_130e9;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_130fe(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_130fe:
    _begin:
cs=0x1a2;eip=0x0030fe; 	T(TEST(*(raddr(ds,si+3)), 0x20));	// 7498                  test    byte ptr [si+3], 20h ;~ 01A2:30FE
cs=0x1a2;eip=0x003102; 	J(JNZ(loc_13126));	// 7499                  jnz     short loc_13126 ;~ 01A2:3102
cs=0x1a2;eip=0x003104; 	T(MOV(al, *(raddr(es,di+0x16))));	// 7501                  mov     al, es:[di+16h] ;~ 01A2:3104
cs=0x1a2;eip=0x003108; 	T(CMP(al, 2));	// 7502                  cmp     al, 2 ;~ 01A2:3108
cs=0x1a2;eip=0x00310a; 	J(JZ(loc_13146));	// 7503                  jz      short loc_13146 ;~ 01A2:310A
cs=0x1a2;eip=0x00310c; 	T(CMP(al, 1));	// 7504                  cmp     al, 1 ;~ 01A2:310C
cs=0x1a2;eip=0x00310e; 	J(JZ(loc_13146));	// 7505                  jz      short loc_13146 ;~ 01A2:310E
cs=0x1a2;eip=0x003110; 	T(CMP(al, 0x80));	// 7506                  cmp     al, 80h ;~ 01A2:3110
cs=0x1a2;eip=0x003112; 	J(JZ(loc_13146));	// 7507                  jz      short loc_13146 ;~ 01A2:3112
cs=0x1a2;eip=0x003114; 	T(CMP(al, 4));	// 7508                  cmp     al, 4 ;~ 01A2:3114
cs=0x1a2;eip=0x003116; 	J(JZ(loc_13146));	// 7509                  jz      short loc_13146 ;~ 01A2:3116
cs=0x1a2;eip=0x003118; 	T(CMP(al, 8));	// 7510                  cmp     al, 8 ;~ 01A2:3118
cs=0x1a2;eip=0x00311a; 	J(JZ(loc_13146));	// 7511                  jz      short loc_13146 ;~ 01A2:311A
cs=0x1a2;eip=0x00311c; 	X(word_1f70a = 3;);	// 7512                  mov     ds:word_1F70A, 3 ;~ 01A2:311C
cs=0x1a2;eip=0x003122; 	J(CALL(sub_15c9c,0));	// 7513                  call    sub_15C9C ;~ 01A2:3122
cs=0x1a2;eip=0x003125; 	J(RETN(0));	// 7514                  retn ;~ 01A2:3125
loc_13126:
	// 4887 
cs=0x1a2;eip=0x003126; 	X(PUSH(si));	// 7519                  push    si ;~ 01A2:3126
cs=0x1a2;eip=0x003127; 	T(si = word_1f1f4;);	// 7520                  mov     si, word_1F1F4 ;~ 01A2:3127
cs=0x1a2;eip=0x00312b; 	X(MOV(*(dw*)(raddr(ds,si)), 0x10));	// 7521                  mov     word ptr [si], 10h ;~ 01A2:312B
cs=0x1a2;eip=0x00312f; 	T(ADD(si, 2));	// 7522                  add     si, 2 ;~ 01A2:312F
cs=0x1a2;eip=0x003132; 	X(POP(*(dw*)(raddr(ds,si))));	// 7523                  pop     word ptr [si] ;~ 01A2:3132
cs=0x1a2;eip=0x003134; 	X(PUSH(*(dw*)(raddr(ds,si))));	// 7524                  push    word ptr [si] ;~ 01A2:3134
cs=0x1a2;eip=0x003136; 	T(ADD(si, 2));	// 7525                  add     si, 2 ;~ 01A2:3136
cs=0x1a2;eip=0x003139; 	T(ADD(si, 2));	// 7526                  add     si, 2 ;~ 01A2:3139
cs=0x1a2;eip=0x00313c; 	X(word_1f1f4 = si;);	// 7527                  mov     word_1F1F4, si ;~ 01A2:313C
cs=0x1a2;eip=0x003140; 	X(INC(word_1f396));	// 7528                  inc     ds:word_1F396 ;~ 01A2:3140
cs=0x1a2;eip=0x003144; 	X(POP(si));	// 7529                  pop     si ;~ 01A2:3144
cs=0x1a2;eip=0x003145; 	J(RETN(0));	// 7530                  retn ;~ 01A2:3145
loc_13146:
	// 4888 
cs=0x1a2;eip=0x003146; 	T(bp = di;);	// 7536                  mov     bp, di ;~ 01A2:3146
cs=0x1a2;eip=0x003148; 	T(di = bx;);	// 7537                  mov     di, bx ;~ 01A2:3148
cs=0x1a2;eip=0x00314a; 	T(si = 0x7C4;);	// 7538                  mov     si, 7C4h ;~ 01A2:314A
cs=0x1a2;eip=0x00314d; 	J(CALL(sub_184d9,0));	// 7539                  call    sub_184D9 ;~ 01A2:314D
cs=0x1a2;eip=0x003150; 	T(si = 0x7C4;);	// 7540                  mov     si, 7C4h ;~ 01A2:3150
cs=0x1a2;eip=0x003153; 	T(cl = 0x0C;);	// 7541                  mov     cl, 0Ch ;~ 01A2:3153
cs=0x1a2;eip=0x003155; 	J(CALL(sub_13555,0));	// 7542                  call    sub_13555 ;~ 01A2:3155
cs=0x1a2;eip=0x003158; 	J(RETN(0));	// 7543                  retn ;~ 01A2:3158

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_13126: 	goto loc_13126;
        case m2c::kloc_13146: 	goto loc_13146;
        case m2c::ksub_130fe: 	goto sub_130fe;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13159(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13159:
    _begin:
cs=0x1a2;eip=0x003159; 	X(PUSH(ax));	// 7552                  push    ax ;~ 01A2:3159
cs=0x1a2;eip=0x00315a; 	T(ax = 0x30;);	// 7553                  mov     ax, 30h ; '0' ;~ 01A2:315A
cs=0x1a2;eip=0x00315d; 	J(CALL(sub_1156c,0));	// 7554                  call    sub_1156C ;~ 01A2:315D
cs=0x1a2;eip=0x003160; 	X(POP(ax));	// 7555                  pop     ax ;~ 01A2:3160
cs=0x1a2;eip=0x003161; 	J(return sub_13163(m2c::kloc_1316b, _state););	// 7556                  jmp     short loc_1316B ;~ 01A2:3161

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_13159: 	goto sub_13159;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13163(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13163:
    _begin:
cs=0x1a2;eip=0x003163; 	X(PUSH(ax));	// 7565                  push    ax ;~ 01A2:3163
cs=0x1a2;eip=0x003164; 	T(ax = 0x3D;);	// 7566                  mov     ax, 3Dh ; '=' ;~ 01A2:3164
cs=0x1a2;eip=0x003167; 	J(CALL(sub_1156c,0));	// 7567                  call    sub_1156C ;~ 01A2:3167
cs=0x1a2;eip=0x00316a; 	X(POP(ax));	// 7568                  pop     ax ;~ 01A2:316A
loc_1316b:
	// 4889 
cs=0x1a2;eip=0x00316b; 	T(TEST(*(raddr(es,di+0x0C)), 4));	// 7571                  test    byte ptr es:[di+0Ch], 4 ;~ 01A2:316B
cs=0x1a2;eip=0x003170; 	J(JZ(loc_13183));	// 7572                  jz      short loc_13183 ;~ 01A2:3170
cs=0x1a2;eip=0x003172; 	X(PUSH(si));	// 7573                  push    si ;~ 01A2:3172
cs=0x1a2;eip=0x003173; 	X(PUSH(di));	// 7574                  push    di ;~ 01A2:3173
cs=0x1a2;eip=0x003174; 	X(PUSH(es));	// 7575                  push    es ;~ 01A2:3174
cs=0x1a2;eip=0x003175; 	J(CALL(sub_1d445,0));	// 7576                  call    sub_1D445 ;~ 01A2:3175
cs=0x1a2;eip=0x003178; 	T(di = si;);	// 7577                  mov     di, si ;~ 01A2:3178
cs=0x1a2;eip=0x00317a; 	J(CALL(seg000_78d5_proc,m2c::kloc_179c2));	// 7578                  call    loc_179C2 ;~ 01A2:317A
cs=0x1a2;eip=0x00317d; 	J(CALL(sub_1d445,0));	// 7579                  call    sub_1D445 ;~ 01A2:317D
cs=0x1a2;eip=0x003180; 	X(POP(es));	// 7580                  pop     es ;~ 01A2:3180
cs=0x1a2;eip=0x003181; 	X(POP(di));	// 7582                  pop     di ;~ 01A2:3181
cs=0x1a2;eip=0x003182; 	X(POP(si));	// 7583                  pop     si ;~ 01A2:3182
loc_13183:
	// 4890 
cs=0x1a2;eip=0x003183; 	T(ax = si;);	// 7587                  mov     ax, si ;~ 01A2:3183
cs=0x1a2;eip=0x003185; 	X(PUSH(si));	// 7588                  push    si ;~ 01A2:3185
cs=0x1a2;eip=0x003186; 	T(si = word_1f1f4;);	// 7589                  mov     si, word_1F1F4 ;~ 01A2:3186
cs=0x1a2;eip=0x00318a; 	X(MOV(*(dw*)(raddr(ds,si)), 5));	// 7590                  mov     word ptr [si], 5 ;~ 01A2:318A
cs=0x1a2;eip=0x00318e; 	T(ADD(si, 2));	// 7591                  add     si, 2 ;~ 01A2:318E
cs=0x1a2;eip=0x003191; 	X(MOV(*(dw*)(raddr(ds,si)), ax));	// 7592                  mov     [si], ax ;~ 01A2:3191
cs=0x1a2;eip=0x003193; 	T(ADD(si, 2));	// 7593                  add     si, 2 ;~ 01A2:3193
cs=0x1a2;eip=0x003196; 	T(ADD(si, 2));	// 7594                  add     si, 2 ;~ 01A2:3196
cs=0x1a2;eip=0x003199; 	X(word_1f1f4 = si;);	// 7595                  mov     word_1F1F4, si ;~ 01A2:3199
cs=0x1a2;eip=0x00319d; 	X(INC(word_1f396));	// 7596                  inc     ds:word_1F396 ;~ 01A2:319D
cs=0x1a2;eip=0x0031a1; 	X(POP(si));	// 7597                  pop     si ;~ 01A2:31A1
cs=0x1a2;eip=0x0031a2; 	J(RETN(0));	// 7598                  retn ;~ 01A2:31A2

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1316b: 	goto loc_1316b;
        case m2c::kloc_13183: 	goto loc_13183;
        case m2c::ksub_13163: 	goto sub_13163;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_131a3(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_131a3:
    _begin:
cs=0x1a2;eip=0x0031a3; 	T(CMP(*(raddr(es,di+0x16)), 8));	// 7607                  cmp     byte ptr es:[di+16h], 8 ;~ 01A2:31A3
cs=0x1a2;eip=0x0031a8; 	J(JZ(loc_131ad));	// 7608                  jz      short loc_131AD ;~ 01A2:31A8
cs=0x1a2;eip=0x0031aa; 	J(JMP(loc_1327d));	// 7609                  jmp     loc_1327D ;~ 01A2:31AA
loc_131ad:
	// 4891 
cs=0x1a2;eip=0x0031ad; 	T(TEST(*(raddr(ds,bx+4)), 1));	// 7613                  test    byte ptr [bx+4], 1 ;~ 01A2:31AD
cs=0x1a2;eip=0x0031b1; 	J(JZ(loc_131b6));	// 7614                  jz      short loc_131B6 ;~ 01A2:31B1
cs=0x1a2;eip=0x0031b3; 	J(JMP(loc_132a5));	// 7615                  jmp     loc_132A5 ;~ 01A2:31B3
loc_131b6:
	// 4892 
cs=0x1a2;eip=0x0031b6; 	T(XOR(ah, ah));	// 7619                  xor     ah, ah ;~ 01A2:31B6
cs=0x1a2;eip=0x0031b8; 	T(MOV(al, *(raddr(ds,bx+5))));	// 7620                  mov     al, [bx+5] ;~ 01A2:31B8
cs=0x1a2;eip=0x0031bb; 	T(OR(al, al));	// 7621                  or      al, al ;~ 01A2:31BB
cs=0x1a2;eip=0x0031bd; 	J(JZ(loc_131d0));	// 7622                  jz      short loc_131D0 ;~ 01A2:31BD
cs=0x1a2;eip=0x0031bf; 	T(NEG(ax));	// 7623                  neg     ax ;~ 01A2:31BF
cs=0x1a2;eip=0x0031c1; 	J(CALL(sub_181c8,0));	// 7624                  call    sub_181C8 ;~ 01A2:31C1
cs=0x1a2;eip=0x0031c4; 	X(word_1f70a = 0x32;);	// 7625                  mov     ds:word_1F70A, 32h ; '2' ;~ 01A2:31C4
cs=0x1a2;eip=0x0031ca; 	J(CALL(sub_15c9c,0));	// 7626                  call    sub_15C9C ;~ 01A2:31CA
cs=0x1a2;eip=0x0031cd; 	J(JMP(locret_132a4));	// 7627                  jmp     locret_132A4 ;~ 01A2:31CD
loc_131d0:
	// 4893 
cs=0x1a2;eip=0x0031d0; 	T(MOV(ax, *(dw*)(raddr(ds,bx+2))));	// 7631                  mov     ax, [bx+2] ;~ 01A2:31D0
cs=0x1a2;eip=0x0031d3; 	T(XCHG(al, ah));	// 7632                  xchg    al, ah ;~ 01A2:31D3
cs=0x1a2;eip=0x0031d5; 	T(OR(ax, ax));	// 7633                  or      ax, ax ;~ 01A2:31D5
cs=0x1a2;eip=0x0031d7; 	J(JZ(loc_131f9));	// 7634                  jz      short loc_131F9 ;~ 01A2:31D7
cs=0x1a2;eip=0x0031d9; 	T(cx = ax;);	// 7635                  mov     cx, ax ;~ 01A2:31D9
cs=0x1a2;eip=0x0031db; 	X(PUSH(ax));	// 7636                  push    ax ;~ 01A2:31DB
cs=0x1a2;eip=0x0031dc; 	J(CALL(sub_186d1,0));	// 7637                  call    sub_186D1 ;~ 01A2:31DC
cs=0x1a2;eip=0x0031df; 	X(POP(dx));	// 7638                  pop     dx ;~ 01A2:31DF
cs=0x1a2;eip=0x0031e0; 	J(JNZ(loc_131e5));	// 7639                  jnz     short loc_131E5 ;~ 01A2:31E0
cs=0x1a2;eip=0x0031e2; 	J(JMP(loc_132ac));	// 7640                  jmp     loc_132AC ;~ 01A2:31E2
loc_131e5:
	// 4894 
cs=0x1a2;eip=0x0031e5; 	X(MOV(*(dw*)(raddr(ds,bx+2)), 0));	// 7644                  mov     word ptr [bx+2], 0 ;~ 01A2:31E5
cs=0x1a2;eip=0x0031ea; 	T(TEST(*(raddr(ds,bx+4)), 2));	// 7645                  test    byte ptr [bx+4], 2 ;~ 01A2:31EA
cs=0x1a2;eip=0x0031ee; 	J(JZ(loc_131f9));	// 7646                  jz      short loc_131F9 ;~ 01A2:31EE
cs=0x1a2;eip=0x0031f0; 	J(CALL(sub_1d445,0));	// 7647                  call    sub_1D445 ;~ 01A2:31F0
cs=0x1a2;eip=0x0031f3; 	J(CALL(seg000_78d5_proc,m2c::kloc_178de));	// 7648                  call    loc_178DE ;~ 01A2:31F3
cs=0x1a2;eip=0x0031f6; 	J(CALL(sub_1d445,0));	// 7649                  call    sub_1D445 ;~ 01A2:31F6
loc_131f9:
	// 4895 
cs=0x1a2;eip=0x0031f9; 	T(TEST(*(raddr(ds,bx+4)), 4));	// 7653                  test    byte ptr [bx+4], 4 ;~ 01A2:31F9
cs=0x1a2;eip=0x0031fd; 	J(JZ(loc_1320b));	// 7654                  jz      short loc_1320B ;~ 01A2:31FD
cs=0x1a2;eip=0x0031ff; 	T(MOV(dx, *(dw*)(raddr(ds,si+4))));	// 7655                  mov     dx, [si+4] ;~ 01A2:31FF
cs=0x1a2;eip=0x003202; 	J(CALL(sub_1d445,0));	// 7656                  call    sub_1D445 ;~ 01A2:3202
cs=0x1a2;eip=0x003205; 	J(CALL(seg000_78d5_proc,m2c::kloc_178de));	// 7657                  call    loc_178DE ;~ 01A2:3205
cs=0x1a2;eip=0x003208; 	J(CALL(sub_1d445,0));	// 7658                  call    sub_1D445 ;~ 01A2:3208
loc_1320b:
	// 4896 
cs=0x1a2;eip=0x00320b; 	T(MOV(dx, *(dw*)(raddr(ds,bx))));	// 7661                  mov     dx, [bx] ;~ 01A2:320B
cs=0x1a2;eip=0x00320d; 	T(XCHG(dl, dh));	// 7662                  xchg    dl, dh ;~ 01A2:320D
cs=0x1a2;eip=0x00320f; 	T(OR(dx, dx));	// 7663                  or      dx, dx ;~ 01A2:320F
cs=0x1a2;eip=0x003211; 	J(JZ(loc_1325c));	// 7664                  jz      short loc_1325C ;~ 01A2:3211
cs=0x1a2;eip=0x003213; 	X(PUSH(ax));	// 7665                  push    ax ;~ 01A2:3213
cs=0x1a2;eip=0x003214; 	X(PUSH(bx));	// 7666                  push    bx ;~ 01A2:3214
cs=0x1a2;eip=0x003215; 	X(PUSH(cx));	// 7667                  push    cx ;~ 01A2:3215
cs=0x1a2;eip=0x003216; 	X(PUSH(dx));	// 7668                  push    dx ;~ 01A2:3216
cs=0x1a2;eip=0x003217; 	X(PUSH(bp));	// 7669                  push    bp ;~ 01A2:3217
cs=0x1a2;eip=0x003218; 	X(PUSH(si));	// 7670                  push    si ;~ 01A2:3218
cs=0x1a2;eip=0x003219; 	X(PUSH(di));	// 7671                  push    di ;~ 01A2:3219
cs=0x1a2;eip=0x00321a; 	X(PUSH(es));	// 7672                  push    es ;~ 01A2:321A
cs=0x1a2;eip=0x00321b; 	X(PUSH(ds));	// 7673                  push    ds ;~ 01A2:321B
cs=0x1a2;eip=0x00321c; 	T(MOV(al, *(raddr(ds,si+0x0A))));	// 7674                  mov     al, [si+0Ah] ;~ 01A2:321C
cs=0x1a2;eip=0x00321f; 	T(CMP(al, 0x0FE));	// 7675                  cmp     al, 0FEh ;~ 01A2:321F
cs=0x1a2;eip=0x003221; 	J(JZ(loc_13227));	// 7676                  jz      short loc_13227 ;~ 01A2:3221
cs=0x1a2;eip=0x003223; 	T(CMP(al, 0x0FF));	// 7677                  cmp     al, 0FFh ;~ 01A2:3223
cs=0x1a2;eip=0x003225; 	J(JNZ(loc_1322b));	// 7678                  jnz     short loc_1322B ;~ 01A2:3225
loc_13227:
	// 4897 
cs=0x1a2;eip=0x003227; 	T(si = word_1f1cc;);	// 7681                  mov     si, word_1F1CC ;~ 01A2:3227
loc_1322b:
	// 4898 
cs=0x1a2;eip=0x00322b; 	T(di = 0x0FEEE;);	// 7684                  mov     di, 0FEEEh ;~ 01A2:322B
cs=0x1a2;eip=0x00322e; 	T(XCHG(dl, dh));	// 7685                  xchg    dl, dh ;~ 01A2:322E
cs=0x1a2;eip=0x003230; 	X(MOV(*(dw*)(raddr(ds,di)), dx));	// 7686                  mov     [di], dx ;~ 01A2:3230
cs=0x1a2;eip=0x003232; 	T(cl = *(db*)(&word_1f3a2););	// 7687                  mov     cl, byte ptr ds:word_1F3A2 ;~ 01A2:3232
cs=0x1a2;eip=0x003236; 	X(MOV(*(raddr(ds,di+2)), cl));	// 7688                  mov     [di+2], cl ;~ 01A2:3236
cs=0x1a2;eip=0x003239; 	T(MOV(cl, *(raddr(ds,si))));	// 7689                  mov     cl, [si] ;~ 01A2:3239
cs=0x1a2;eip=0x00323b; 	X(MOV(*(raddr(ds,di+3)), cl));	// 7690                  mov     [di+3], cl ;~ 01A2:323B
cs=0x1a2;eip=0x00323e; 	T(MOV(cl, *(raddr(ds,si+1))));	// 7691                  mov     cl, [si+1] ;~ 01A2:323E
cs=0x1a2;eip=0x003241; 	X(MOV(*(raddr(ds,di+4)), cl));	// 7692                  mov     [di+4], cl ;~ 01A2:3241
cs=0x1a2;eip=0x003244; 	T(MOV(cl, *(raddr(ds,si+2))));	// 7693                  mov     cl, [si+2] ;~ 01A2:3244
cs=0x1a2;eip=0x003247; 	X(MOV(*(raddr(ds,di+5)), cl));	// 7694                  mov     [di+5], cl ;~ 01A2:3247
cs=0x1a2;eip=0x00324a; 	T(si = di;);	// 7695                  mov     si, di ;~ 01A2:324A
cs=0x1a2;eip=0x00324c; 	J(CALL(seg000_7f3c_proc,m2c::kloc_18024));	// 7696                  call    loc_18024 ;~ 01A2:324C
cs=0x1a2;eip=0x00324f; 	X(POP(ds));	// 7698                  pop     ds ;~ 01A2:324F
cs=0x1a2;eip=0x003250; 	X(POP(es));	// 7699                  pop     es ;~ 01A2:3250
cs=0x1a2;eip=0x003251; 	X(POP(di));	// 7701                  pop     di ;~ 01A2:3251
cs=0x1a2;eip=0x003252; 	X(POP(si));	// 7702                  pop     si ;~ 01A2:3252
cs=0x1a2;eip=0x003253; 	X(POP(bp));	// 7703                  pop     bp ;~ 01A2:3253
cs=0x1a2;eip=0x003254; 	X(POP(dx));	// 7704                  pop     dx ;~ 01A2:3254
cs=0x1a2;eip=0x003255; 	X(POP(cx));	// 7705                  pop     cx ;~ 01A2:3255
cs=0x1a2;eip=0x003256; 	X(POP(bx));	// 7706                  pop     bx ;~ 01A2:3256
cs=0x1a2;eip=0x003257; 	X(POP(ax));	// 7707                  pop     ax ;~ 01A2:3257
cs=0x1a2;eip=0x003258; 	X(MOV(*(dw*)(raddr(ds,bx)), 0));	// 7708                  mov     word ptr [bx], 0 ;~ 01A2:3258
loc_1325c:
	// 4899 
cs=0x1a2;eip=0x00325c; 	T(TEST(*(raddr(ds,bx+4)), 1));	// 7712                  test    byte ptr [bx+4], 1 ;~ 01A2:325C
cs=0x1a2;eip=0x003260; 	X(PUSHF);	// 7713                  pushf ;~ 01A2:3260
cs=0x1a2;eip=0x003261; 	X(XOR(*(raddr(ds,bx+4)), 1));	// 7714                  xor     byte ptr [bx+4], 1 ;~ 01A2:3261
cs=0x1a2;eip=0x003265; 	X(POPF);	// 7715                  popf ;~ 01A2:3265
cs=0x1a2;eip=0x003266; 	T(TEST(*(raddr(ds,bx+4)), 8));	// 7716                  test    byte ptr [bx+4], 8 ;~ 01A2:3266
cs=0x1a2;eip=0x00326a; 	J(JZ(loc_1327d));	// 7717                  jz      short loc_1327D ;~ 01A2:326A
cs=0x1a2;eip=0x00326c; 	X(PUSH(es));	// 7718                  push    es ;~ 01A2:326C
cs=0x1a2;eip=0x00326d; 	X(PUSH(di));	// 7719                  push    di ;~ 01A2:326D
cs=0x1a2;eip=0x00326e; 	X(PUSH(si));	// 7720                  push    si ;~ 01A2:326E
cs=0x1a2;eip=0x00326f; 	J(CALL(sub_1d445,0));	// 7721                  call    sub_1D445 ;~ 01A2:326F
cs=0x1a2;eip=0x003272; 	T(di = si;);	// 7722                  mov     di, si ;~ 01A2:3272
cs=0x1a2;eip=0x003274; 	J(CALL(seg000_78d5_proc,m2c::kloc_179c2));	// 7723                  call    loc_179C2 ;~ 01A2:3274
cs=0x1a2;eip=0x003277; 	J(CALL(sub_1d445,0));	// 7724                  call    sub_1D445 ;~ 01A2:3277
cs=0x1a2;eip=0x00327a; 	X(POP(si));	// 7725                  pop     si ;~ 01A2:327A
cs=0x1a2;eip=0x00327b; 	X(POP(di));	// 7726                  pop     di ;~ 01A2:327B
cs=0x1a2;eip=0x00327c; 	X(POP(es));	// 7727                  pop     es ;~ 01A2:327C
loc_1327d:
	// 4900 
cs=0x1a2;eip=0x00327d; 	X(PUSH(ax));	// 7731                  push    ax ;~ 01A2:327D
cs=0x1a2;eip=0x00327e; 	T(ax = 0x38;);	// 7732                  mov     ax, 38h ; '8' ;~ 01A2:327E
cs=0x1a2;eip=0x003281; 	J(CALL(sub_1156c,0));	// 7733                  call    sub_1156C ;~ 01A2:3281
cs=0x1a2;eip=0x003284; 	X(POP(ax));	// 7734                  pop     ax ;~ 01A2:3284
cs=0x1a2;eip=0x003285; 	X(PUSH(si));	// 7735                  push    si ;~ 01A2:3285
cs=0x1a2;eip=0x003286; 	T(si = word_1f1f4;);	// 7736                  mov     si, word_1F1F4 ;~ 01A2:3286
cs=0x1a2;eip=0x00328a; 	X(MOV(*(dw*)(raddr(ds,si)), 5));	// 7737                  mov     word ptr [si], 5 ;~ 01A2:328A
cs=0x1a2;eip=0x00328e; 	T(ADD(si, 2));	// 7738                  add     si, 2 ;~ 01A2:328E
cs=0x1a2;eip=0x003291; 	X(POP(*(dw*)(raddr(ds,si))));	// 7739                  pop     word ptr [si] ;~ 01A2:3291
cs=0x1a2;eip=0x003293; 	X(PUSH(*(dw*)(raddr(ds,si))));	// 7740                  push    word ptr [si] ;~ 01A2:3293
cs=0x1a2;eip=0x003295; 	T(ADD(si, 2));	// 7741                  add     si, 2 ;~ 01A2:3295
cs=0x1a2;eip=0x003298; 	T(ADD(si, 2));	// 7742                  add     si, 2 ;~ 01A2:3298
cs=0x1a2;eip=0x00329b; 	X(word_1f1f4 = si;);	// 7743                  mov     word_1F1F4, si ;~ 01A2:329B
cs=0x1a2;eip=0x00329f; 	X(INC(word_1f396));	// 7744                  inc     ds:word_1F396 ;~ 01A2:329F
cs=0x1a2;eip=0x0032a3; 	X(POP(si));	// 7745                  pop     si ;~ 01A2:32A3
locret_132a4:
	// 4901 
cs=0x1a2;eip=0x0032a4; 	J(RETN(0));	// 7748                  retn ;~ 01A2:32A4
loc_132a5:
	// 4902 
cs=0x1a2;eip=0x0032a5; 	T(TEST(*(raddr(ds,bx+4)), 0x20));	// 7752                  test    byte ptr [bx+4], 20h ;~ 01A2:32A5
cs=0x1a2;eip=0x0032a9; 	J(JNZ(loc_1325c));	// 7753                  jnz     short loc_1325C ;~ 01A2:32A9
cs=0x1a2;eip=0x0032ab; 	J(RETN(0));	// 7754                  retn ;~ 01A2:32AB
loc_132ac:
	// 4903 
cs=0x1a2;eip=0x0032ac; 	X(PUSH(ax));	// 7758                  push    ax ;~ 01A2:32AC
cs=0x1a2;eip=0x0032ad; 	T(ax = 0x3B;);	// 7759                  mov     ax, 3Bh ; ';' ;~ 01A2:32AD
cs=0x1a2;eip=0x0032b0; 	J(CALL(sub_1156c,0));	// 7760                  call    sub_1156C ;~ 01A2:32B0
cs=0x1a2;eip=0x0032b3; 	X(POP(ax));	// 7761                  pop     ax ;~ 01A2:32B3
cs=0x1a2;eip=0x0032b4; 	J(RETN(0));	// 7762                  retn ;~ 01A2:32B4

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_131ad: 	goto loc_131ad;
        case m2c::kloc_131b6: 	goto loc_131b6;
        case m2c::kloc_131d0: 	goto loc_131d0;
        case m2c::kloc_131e5: 	goto loc_131e5;
        case m2c::kloc_131f9: 	goto loc_131f9;
        case m2c::kloc_1320b: 	goto loc_1320b;
        case m2c::kloc_13227: 	goto loc_13227;
        case m2c::kloc_1322b: 	goto loc_1322b;
        case m2c::kloc_1325c: 	goto loc_1325c;
        case m2c::kloc_1327d: 	goto loc_1327d;
        case m2c::kloc_132a5: 	goto loc_132a5;
        case m2c::kloc_132ac: 	goto loc_132ac;
        case m2c::klocret_132a4: 	goto locret_132a4;
        case m2c::ksub_131a3: 	goto sub_131a3;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_132b5(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_132b5:
    _begin:
cs=0x1a2;eip=0x0032b5; 	X(PUSH(si));	// 7771                  push    si ;~ 01A2:32B5
cs=0x1a2;eip=0x0032b6; 	T(si = word_1f1f4;);	// 7772                  mov     si, word_1F1F4 ;~ 01A2:32B6
cs=0x1a2;eip=0x0032ba; 	X(MOV(*(dw*)(raddr(ds,si)), 5));	// 7773                  mov     word ptr [si], 5 ;~ 01A2:32BA
cs=0x1a2;eip=0x0032be; 	T(ADD(si, 2));	// 7774                  add     si, 2 ;~ 01A2:32BE
cs=0x1a2;eip=0x0032c1; 	X(POP(*(dw*)(raddr(ds,si))));	// 7775                  pop     word ptr [si] ;~ 01A2:32C1
cs=0x1a2;eip=0x0032c3; 	X(PUSH(*(dw*)(raddr(ds,si))));	// 7776                  push    word ptr [si] ;~ 01A2:32C3
cs=0x1a2;eip=0x0032c5; 	T(ADD(si, 2));	// 7777                  add     si, 2 ;~ 01A2:32C5
cs=0x1a2;eip=0x0032c8; 	T(ADD(si, 2));	// 7778                  add     si, 2 ;~ 01A2:32C8
cs=0x1a2;eip=0x0032cb; 	X(word_1f1f4 = si;);	// 7779                  mov     word_1F1F4, si ;~ 01A2:32CB
cs=0x1a2;eip=0x0032cf; 	X(INC(word_1f396));	// 7780                  inc     ds:word_1F396 ;~ 01A2:32CF
cs=0x1a2;eip=0x0032d3; 	X(POP(si));	// 7781                  pop     si ;~ 01A2:32D3
cs=0x1a2;eip=0x0032d4; 	T(CMP(*(raddr(es,di+0x16)), 2));	// 7782                  cmp     byte ptr es:[di+16h], 2 ;~ 01A2:32D4
cs=0x1a2;eip=0x0032d9; 	J(JZ(loc_132de));	// 7783                  jz      short loc_132DE ;~ 01A2:32D9
cs=0x1a2;eip=0x0032db; 	J(JMP(loc_13366));	// 7784                  jmp     loc_13366 ;~ 01A2:32DB
loc_132de:
	// 4904 
cs=0x1a2;eip=0x0032de; 	X(PUSH(ax));	// 7788                  push    ax ;~ 01A2:32DE
cs=0x1a2;eip=0x0032df; 	T(ax = 0x0A;);	// 7789                  mov     ax, 0Ah ;~ 01A2:32DF
cs=0x1a2;eip=0x0032e2; 	J(CALL(sub_1156c,0));	// 7790                  call    sub_1156C ;~ 01A2:32E2
cs=0x1a2;eip=0x0032e5; 	X(POP(ax));	// 7791                  pop     ax ;~ 01A2:32E5
cs=0x1a2;eip=0x0032e6; 	T(MOV(dx, *(dw*)(raddr(ds,si+4))));	// 7792                  mov     dx, [si+4] ;~ 01A2:32E6
cs=0x1a2;eip=0x0032e9; 	T(TEST(*(raddr(ds,bx+3)), 2));	// 7793                  test    byte ptr [bx+3], 2 ;~ 01A2:32E9
cs=0x1a2;eip=0x0032ed; 	J(JNZ(loc_132f9));	// 7794                  jnz     short loc_132F9 ;~ 01A2:32ED
cs=0x1a2;eip=0x0032ef; 	T(TEST(*(raddr(ds,bx+3)), 1));	// 7795                  test    byte ptr [bx+3], 1 ;~ 01A2:32EF
cs=0x1a2;eip=0x0032f3; 	X(PUSHF);	// 7796                  pushf ;~ 01A2:32F3
cs=0x1a2;eip=0x0032f4; 	X(AND(*(raddr(ds,bx+3)), 0x0FE));	// 7797                  and     byte ptr [bx+3], 0FEh ;~ 01A2:32F4
cs=0x1a2;eip=0x0032f8; 	X(POPF);	// 7798                  popf ;~ 01A2:32F8
loc_132f9:
	// 4905 
cs=0x1a2;eip=0x0032f9; 	X(SUB(*(raddr(ds,bx+2)), 1));	// 7801                  sub     byte ptr [bx+2], 1 ;~ 01A2:32F9
cs=0x1a2;eip=0x0032fd; 	J(JG(loc_13320));	// 7802                  jg      short loc_13320 ;~ 01A2:32FD
cs=0x1a2;eip=0x0032ff; 	T(CMP(dx, word_1f3ea));	// 7803                  cmp     dx, ds:word_1F3EA ;~ 01A2:32FF
cs=0x1a2;eip=0x003303; 	J(JNZ(loc_1330e));	// 7804                  jnz     short loc_1330E ;~ 01A2:3303
cs=0x1a2;eip=0x003305; 	J(CALL(sub_1d445,0));	// 7805                  call    sub_1D445 ;~ 01A2:3305
cs=0x1a2;eip=0x003308; 	J(CALL(sub_134bf,0));	// 7806                  call    sub_134BF ;~ 01A2:3308
cs=0x1a2;eip=0x00330b; 	J(CALL(sub_1d445,0));	// 7807                  call    sub_1D445 ;~ 01A2:330B
loc_1330e:
	// 4906 
cs=0x1a2;eip=0x00330e; 	X(PUSH(di));	// 7810                  push    di ;~ 01A2:330E
cs=0x1a2;eip=0x00330f; 	J(CALL(sub_1d445,0));	// 7811                  call    sub_1D445 ;~ 01A2:330F
cs=0x1a2;eip=0x003312; 	X(PUSH(dx));	// 7812                  push    dx ;~ 01A2:3312
cs=0x1a2;eip=0x003313; 	T(di = si;);	// 7813                  mov     di, si ;~ 01A2:3313
cs=0x1a2;eip=0x003315; 	J(CALL(sub_13f25,0));	// 7814                  call    sub_13F25 ;~ 01A2:3315
cs=0x1a2;eip=0x003318; 	X(POP(dx));	// 7815                  pop     dx ;~ 01A2:3318
cs=0x1a2;eip=0x003319; 	J(CALL(sub_162a9,0));	// 7816                  call    sub_162A9 ;~ 01A2:3319
cs=0x1a2;eip=0x00331c; 	J(CALL(sub_1d445,0));	// 7817                  call    sub_1D445 ;~ 01A2:331C
cs=0x1a2;eip=0x00331f; 	X(POP(di));	// 7818                  pop     di ;~ 01A2:331F
loc_13320:
	// 4907 
cs=0x1a2;eip=0x003320; 	T(TEST(*(raddr(ds,bx+3)), 4));	// 7821                  test    byte ptr [bx+3], 4 ;~ 01A2:3320
cs=0x1a2;eip=0x003324; 	J(JNZ(loc_13352));	// 7822                  jnz     short loc_13352 ;~ 01A2:3324
cs=0x1a2;eip=0x003326; 	T(si = *(dw*)(&off_1f88a););	// 7823                  mov     si, word ptr ds:off_1F88A ;~ 01A2:3326
cs=0x1a2;eip=0x00332a; 	T(OR(si, si));	// 7824                  or      si, si ;~ 01A2:332A
cs=0x1a2;eip=0x00332c; 	J(JNZ(loc_1332f));	// 7825                  jnz     short loc_1332F ;~ 01A2:332C
cs=0x1a2;eip=0x00332e; 	J(RETN(0));	// 7826                  retn ;~ 01A2:332E
loc_1332f:
	// 4908 
cs=0x1a2;eip=0x00332f; 	X(PUSH(es));	// 7830                  push    es ;~ 01A2:332F
cs=0x1a2;eip=0x003330; 	T(es = *(dw*)(((db*)&off_1f88a)+2););	// 7831                  mov     es, word ptr ds:off_1F88A+2 ;~ 01A2:3330
cs=0x1a2;eip=0x003334; 	T(MOV(si, *(dw*)(raddr(es,si+2))));	// 7833                  mov     si, es:[si+2] ;~ 01A2:3334
cs=0x1a2;eip=0x003338; 	T(XOR(ah, ah));	// 7834                  xor     ah, ah ;~ 01A2:3338
cs=0x1a2;eip=0x00333a; 	T(MOV(al, *(raddr(ds,bx))));	// 7835                  mov     al, [bx] ;~ 01A2:333A
cs=0x1a2;eip=0x00333c; 	T(dx = 2;);	// 7836                  mov     dx, 2 ;~ 01A2:333C
cs=0x1a2;eip=0x00333f; 	T(MUL1_2(dx));	// 7837                  mul     dx ;~ 01A2:333F
cs=0x1a2;eip=0x003341; 	X(PUSH(bx));	// 7838                  push    bx ;~ 01A2:3341
cs=0x1a2;eip=0x003342; 	T(bx = ax;);	// 7839                  mov     bx, ax ;~ 01A2:3342
cs=0x1a2;eip=0x003344; 	T(MOV(si, *(dw*)(raddr(es,bx+si))));	// 7840                  mov     si, es:[bx+si] ;~ 01A2:3344
cs=0x1a2;eip=0x003347; 	X(POP(bx));	// 7841                  pop     bx ;~ 01A2:3347
cs=0x1a2;eip=0x003348; 	X(POP(es));	// 7842                  pop     es ;~ 01A2:3348
cs=0x1a2;eip=0x003349; 	X(word_1f8fc = si;);	// 7844                  mov     ds:word_1F8FC, si ;~ 01A2:3349
cs=0x1a2;eip=0x00334d; 	J(CALL(__dispatch_call,off_1f8f8));	// 7845                  call    ds:off_1F8F8 ;~ 01A2:334D
cs=0x1a2;eip=0x003351; 	J(RETN(0));	// 7846                  retn ;~ 01A2:3351
loc_13352:
	// 4909 
cs=0x1a2;eip=0x003352; 	T(XOR(dh, dh));	// 7850                  xor     dh, dh ;~ 01A2:3352
cs=0x1a2;eip=0x003354; 	T(MOV(dl, *(raddr(ds,bx+1))));	// 7851                  mov     dl, [bx+1] ;~ 01A2:3354
cs=0x1a2;eip=0x003357; 	T(NEG(dx));	// 7852                  neg     dx ;~ 01A2:3357
cs=0x1a2;eip=0x003359; 	J(CALL(sub_181c8,0));	// 7853                  call    sub_181C8 ;~ 01A2:3359
cs=0x1a2;eip=0x00335c; 	X(word_1f70a = 0x22;);	// 7854                  mov     ds:word_1F70A, 22h ; '"' ;~ 01A2:335C
cs=0x1a2;eip=0x003362; 	J(CALL(sub_15c9c,0));	// 7855                  call    sub_15C9C ;~ 01A2:3362
cs=0x1a2;eip=0x003365; 	J(RETN(0));	// 7856                  retn ;~ 01A2:3365
loc_13366:
	// 4910 
cs=0x1a2;eip=0x003366; 	J(CALL(sub_175af,0));	// 7860                  call    sub_175AF ;~ 01A2:3366
cs=0x1a2;eip=0x003369; 	J(RETN(0));	// 7861                  retn ;~ 01A2:3369

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_132de: 	goto loc_132de;
        case m2c::kloc_132f9: 	goto loc_132f9;
        case m2c::kloc_1330e: 	goto loc_1330e;
        case m2c::kloc_13320: 	goto loc_13320;
        case m2c::kloc_1332f: 	goto loc_1332f;
        case m2c::kloc_13352: 	goto loc_13352;
        case m2c::kloc_13366: 	goto loc_13366;
        case m2c::ksub_132b5: 	goto sub_132b5;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1336a(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1336a:
    _begin:
cs=0x1a2;eip=0x00336a; 	X(word_1f1e4 = si;);	// 7869                  mov     word_1F1E4, si ;~ 01A2:336A
cs=0x1a2;eip=0x00336e; 	X(PUSH(si));	// 7870                  push    si ;~ 01A2:336E
cs=0x1a2;eip=0x00336f; 	X(PUSH(bx));	// 7871                  push    bx ;~ 01A2:336F
cs=0x1a2;eip=0x003370; 	T(si = 0x0FED9;);	// 7872                  mov     si, 0FED9h ;~ 01A2:3370
cs=0x1a2;eip=0x003373; 	T(MOV(bl, *(raddr(es,di+0x1D))));	// 7873                  mov     bl, es:[di+1Dh] ;~ 01A2:3373
cs=0x1a2;eip=0x003377; 	T(XOR(bh, bh));	// 7874                  xor     bh, bh ;~ 01A2:3377
cs=0x1a2;eip=0x003379; 	T(MOV(al, *(raddr(ds,bx+si))));	// 7875                  mov     al, [bx+si] ;~ 01A2:3379
cs=0x1a2;eip=0x00337b; 	X(byte_1f852 = al;);	// 7876                  mov     ds:byte_1F852, al ;~ 01A2:337B
cs=0x1a2;eip=0x00337e; 	X(POP(bx));	// 7877                  pop     bx ;~ 01A2:337E
cs=0x1a2;eip=0x00337f; 	X(POP(si));	// 7878                  pop     si ;~ 01A2:337F
cs=0x1a2;eip=0x003380; 	J(RETN(0));	// 7879                  retn ;~ 01A2:3380

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1336a: 	goto sub_1336a;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_3381_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_3381_proc:
    _begin:
cs=0x1a2;eip=0x003381; 	T(dx = word_1f6fc;);	// 7883                  mov     dx, ds:word_1F6FC ;~ 01A2:3381
cs=0x1a2;eip=0x003385; 	X(PUSH(di));	// 7884                  push    di ;~ 01A2:3385
cs=0x1a2;eip=0x003386; 	T(ax = 6;);	// 7885                  mov     ax, 6 ;~ 01A2:3386
cs=0x1a2;eip=0x003389; 	J(CALL(sub_1410e,0));	// 7886                  call    sub_1410E ;~ 01A2:3389
cs=0x1a2;eip=0x00338c; 	T(bx = di;);	// 7887                  mov     bx, di ;~ 01A2:338C
cs=0x1a2;eip=0x00338e; 	X(POP(di));	// 7888                  pop     di ;~ 01A2:338E
cs=0x1a2;eip=0x00338f; 	X(*(dw*)(&off_1f736) = bx;);	// 7889                  mov     word ptr ds:off_1F736, bx ;~ 01A2:338F
cs=0x1a2;eip=0x003393; 	T(CMP(byte_1f843, 8));	// 7890                  cmp     ds:byte_1F843, 8 ;~ 01A2:3393
cs=0x1a2;eip=0x003398; 	J(JNZ(loc_133d5));	// 7891                  jnz     short loc_133D5 ;~ 01A2:3398
cs=0x1a2;eip=0x00339a; 	T(XOR(dh, dh));	// 7892                  xor     dh, dh ;~ 01A2:339A
cs=0x1a2;eip=0x00339c; 	T(MOV(dl, *(raddr(ds,bx+0x0C))));	// 7893                  mov     dl, [bx+0Ch] ;~ 01A2:339C
cs=0x1a2;eip=0x00339f; 	T(ADD(bx, dx));	// 7894                  add     bx, dx ;~ 01A2:339F
cs=0x1a2;eip=0x0033a1; 	T(CMP(*(dw*)(raddr(ds,bx)), 0));	// 7895                  cmp     word ptr [bx], 0 ;~ 01A2:33A1
cs=0x1a2;eip=0x0033a4; 	J(JNZ(loc_13403));	// 7896                  jnz     short loc_13403 ;~ 01A2:33A4
cs=0x1a2;eip=0x0033a6; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 7897                  mov     ax, [si+4] ;~ 01A2:33A6
cs=0x1a2;eip=0x0033a9; 	T(XCHG(al, ah));	// 7898                  xchg    al, ah ;~ 01A2:33A9
cs=0x1a2;eip=0x0033ab; 	X(MOV(*(dw*)(raddr(ds,bx)), ax));	// 7899                  mov     [bx], ax ;~ 01A2:33AB
cs=0x1a2;eip=0x0033ad; 	J(CALL(sub_1d445,0));	// 7900                  call    sub_1D445 ;~ 01A2:33AD
cs=0x1a2;eip=0x0033b0; 	J(CALL(sub_13509,0));	// 7901                  call    sub_13509 ;~ 01A2:33B0
cs=0x1a2;eip=0x0033b3; 	J(CALL(sub_1d445,0));	// 7902                  call    sub_1D445 ;~ 01A2:33B3
cs=0x1a2;eip=0x0033b6; 	T(TEST(*(raddr(ds,bx+4)), 1));	// 7903                  test    byte ptr [bx+4], 1 ;~ 01A2:33B6
cs=0x1a2;eip=0x0033ba; 	X(PUSHF);	// 7904                  pushf ;~ 01A2:33BA
cs=0x1a2;eip=0x0033bb; 	X(AND(*(raddr(ds,bx+4)), 0x0FE));	// 7905                  and     byte ptr [bx+4], 0FEh ;~ 01A2:33BB
cs=0x1a2;eip=0x0033bf; 	X(POPF);	// 7906                  popf ;~ 01A2:33BF
cs=0x1a2;eip=0x0033c0; 	T(TEST(*(raddr(ds,bx+4)), 8));	// 7907                  test    byte ptr [bx+4], 8 ;~ 01A2:33C0
cs=0x1a2;eip=0x0033c4; 	J(JZ(loc_133d5));	// 7908                  jz      short loc_133D5 ;~ 01A2:33C4
cs=0x1a2;eip=0x0033c6; 	X(PUSH(si));	// 7909                  push    si ;~ 01A2:33C6
cs=0x1a2;eip=0x0033c7; 	J(CALL(sub_1d445,0));	// 7910                  call    sub_1D445 ;~ 01A2:33C7
cs=0x1a2;eip=0x0033ca; 	T(di = *(dw*)(&off_1f736););	// 7911                  mov     di, word ptr ds:off_1F736 ;~ 01A2:33CA
cs=0x1a2;eip=0x0033ce; 	J(CALL(seg000_78d5_proc,m2c::kloc_179c2));	// 7912                  call    loc_179C2 ;~ 01A2:33CE
cs=0x1a2;eip=0x0033d1; 	J(CALL(sub_1d445,0));	// 7913                  call    sub_1D445 ;~ 01A2:33D1
cs=0x1a2;eip=0x0033d4; 	X(POP(si));	// 7914                  pop     si ;~ 01A2:33D4
loc_133d5:
	// 4911 
cs=0x1a2;eip=0x0033d5; 	X(PUSH(ax));	// 7918                  push    ax ;~ 01A2:33D5
cs=0x1a2;eip=0x0033d6; 	T(ax = 0x1E;);	// 7919                  mov     ax, 1Eh ;~ 01A2:33D6
cs=0x1a2;eip=0x0033d9; 	J(CALL(sub_1156c,0));	// 7920                  call    sub_1156C ;~ 01A2:33D9
cs=0x1a2;eip=0x0033dc; 	X(POP(ax));	// 7921                  pop     ax ;~ 01A2:33DC
cs=0x1a2;eip=0x0033dd; 	T(ax = *(dw*)(&off_1f736););	// 7922                  mov     ax, word ptr ds:off_1F736 ;~ 01A2:33DD
cs=0x1a2;eip=0x0033e0; 	T(MOV(bx, *(dw*)(raddr(ds,si+4))));	// 7923                  mov     bx, [si+4] ;~ 01A2:33E0
cs=0x1a2;eip=0x0033e3; 	X(PUSH(si));	// 7924                  push    si ;~ 01A2:33E3
cs=0x1a2;eip=0x0033e4; 	T(si = word_1f1f4;);	// 7925                  mov     si, word_1F1F4 ;~ 01A2:33E4
cs=0x1a2;eip=0x0033e8; 	X(MOV(*(dw*)(raddr(ds,si)), 0x12));	// 7926                  mov     word ptr [si], 12h ;~ 01A2:33E8
cs=0x1a2;eip=0x0033ec; 	T(ADD(si, 2));	// 7927                  add     si, 2 ;~ 01A2:33EC
cs=0x1a2;eip=0x0033ef; 	X(MOV(*(dw*)(raddr(ds,si)), ax));	// 7928                  mov     [si], ax ;~ 01A2:33EF
cs=0x1a2;eip=0x0033f1; 	T(ADD(si, 2));	// 7929                  add     si, 2 ;~ 01A2:33F1
cs=0x1a2;eip=0x0033f4; 	X(MOV(*(dw*)(raddr(ds,si)), bx));	// 7930                  mov     [si], bx ;~ 01A2:33F4
cs=0x1a2;eip=0x0033f6; 	T(ADD(si, 2));	// 7931                  add     si, 2 ;~ 01A2:33F6
cs=0x1a2;eip=0x0033f9; 	X(word_1f1f4 = si;);	// 7932                  mov     word_1F1F4, si ;~ 01A2:33F9
cs=0x1a2;eip=0x0033fd; 	X(INC(word_1f396));	// 7933                  inc     ds:word_1F396 ;~ 01A2:33FD
cs=0x1a2;eip=0x003401; 	X(POP(si));	// 7934                  pop     si ;~ 01A2:3401
cs=0x1a2;eip=0x003402; 	J(RETN(0));	// 7935                  retn ;~ 01A2:3402
loc_13403:
	// 4912 
cs=0x1a2;eip=0x003403; 	X(word_1f70a = 0x1B;);	// 7939                  mov     ds:word_1F70A, 1Bh ;~ 01A2:3403
cs=0x1a2;eip=0x003409; 	J(CALL(sub_15c9c,0));	// 7940                  call    sub_15C9C ;~ 01A2:3409
cs=0x1a2;eip=0x00340c; 	J(RETN(0));	// 7941                  retn ;~ 01A2:340C

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_133d5: 	goto loc_133d5;
        case m2c::kloc_13403: 	goto loc_13403;
        case m2c::kseg000_3381_proc: 	goto seg000_3381_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1340d(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1340d:
    _begin:
cs=0x1a2;eip=0x00340d; 	T(MOV(dx, *(dw*)(raddr(ds,si+4))));	// 7947                  mov     dx, [si+4] ;~ 01A2:340D
cs=0x1a2;eip=0x003410; 	T(CMP(dx, word_1f3ea));	// 7948                  cmp     dx, ds:word_1F3EA ;~ 01A2:3410
cs=0x1a2;eip=0x003414; 	J(JNZ(loc_13420));	// 7949                  jnz     short loc_13420 ;~ 01A2:3414
cs=0x1a2;eip=0x003416; 	J(CALL(sub_1d445,0));	// 7951                  call    sub_1D445 ;~ 01A2:3416
cs=0x1a2;eip=0x003419; 	J(CALL(sub_134bf,0));	// 7952                  call    sub_134BF ;~ 01A2:3419
cs=0x1a2;eip=0x00341c; 	J(CALL(sub_1d445,0));	// 7953                  call    sub_1D445 ;~ 01A2:341C
cs=0x1a2;eip=0x00341f; 	J(RETN(0));	// 7954                  retn ;~ 01A2:341F
loc_13420:
	// 4913 
cs=0x1a2;eip=0x003420; 	X(PUSH(si));	// 7958                  push    si ;~ 01A2:3420
cs=0x1a2;eip=0x003421; 	T(si = word_1f1f4;);	// 7959                  mov     si, word_1F1F4 ;~ 01A2:3421
cs=0x1a2;eip=0x003425; 	X(MOV(*(dw*)(raddr(ds,si)), 0x1B));	// 7960                  mov     word ptr [si], 1Bh ;~ 01A2:3425
cs=0x1a2;eip=0x003429; 	T(ADD(si, 2));	// 7961                  add     si, 2 ;~ 01A2:3429
cs=0x1a2;eip=0x00342c; 	X(POP(*(dw*)(raddr(ds,si))));	// 7962                  pop     word ptr [si] ;~ 01A2:342C
cs=0x1a2;eip=0x00342e; 	X(PUSH(*(dw*)(raddr(ds,si))));	// 7963                  push    word ptr [si] ;~ 01A2:342E
cs=0x1a2;eip=0x003430; 	T(ADD(si, 2));	// 7964                  add     si, 2 ;~ 01A2:3430
cs=0x1a2;eip=0x003433; 	T(ADD(si, 2));	// 7965                  add     si, 2 ;~ 01A2:3433
cs=0x1a2;eip=0x003436; 	X(word_1f1f4 = si;);	// 7966                  mov     word_1F1F4, si ;~ 01A2:3436
cs=0x1a2;eip=0x00343a; 	X(INC(word_1f396));	// 7967                  inc     ds:word_1F396 ;~ 01A2:343A
cs=0x1a2;eip=0x00343e; 	X(POP(si));	// 7968                  pop     si ;~ 01A2:343E
cs=0x1a2;eip=0x00343f; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 7969                  mov     ax, [si+4] ;~ 01A2:343F
cs=0x1a2;eip=0x003442; 	X(word_1f3ea = ax;);	// 7970                  mov     ds:word_1F3EA, ax ;~ 01A2:3442
cs=0x1a2;eip=0x003445; 	T(MOV(al, *(raddr(es,di+0x16))));	// 7971                  mov     al, es:[di+16h] ;~ 01A2:3445
cs=0x1a2;eip=0x003449; 	X(byte_1f836 = al;);	// 7972                  mov     ds:byte_1F836, al ;~ 01A2:3449
cs=0x1a2;eip=0x00344c; 	J(RETN(0));	// 7973                  retn ;~ 01A2:344C

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_13420: 	goto loc_13420;
        case m2c::ksub_1340d: 	goto sub_1340d;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_344d_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_344d_proc:
    _begin:
cs=0x1a2;eip=0x00344d; 	T(dx = word_1f6fc;);	// 7977                  mov     dx, ds:word_1F6FC ;~ 01A2:344D
cs=0x1a2;eip=0x003451; 	T(ax = 6;);	// 7978                  mov     ax, 6 ;~ 01A2:3451
cs=0x1a2;eip=0x003454; 	J(CALL(sub_1410e,0));	// 7979                  call    sub_1410E ;~ 01A2:3454
cs=0x1a2;eip=0x003457; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 7980                  mov     ax, [si+4] ;~ 01A2:3457
cs=0x1a2;eip=0x00345a; 	X(PUSH(si));	// 7981                  push    si ;~ 01A2:345A
cs=0x1a2;eip=0x00345b; 	T(si = word_1f1f4;);	// 7982                  mov     si, word_1F1F4 ;~ 01A2:345B
cs=0x1a2;eip=0x00345f; 	X(MOV(*(dw*)(raddr(ds,si)), 0x1A));	// 7983                  mov     word ptr [si], 1Ah ;~ 01A2:345F
cs=0x1a2;eip=0x003463; 	T(ADD(si, 2));	// 7984                  add     si, 2 ;~ 01A2:3463
cs=0x1a2;eip=0x003466; 	X(MOV(*(dw*)(raddr(ds,si)), di));	// 7985                  mov     [si], di ;~ 01A2:3466
cs=0x1a2;eip=0x003468; 	T(ADD(si, 2));	// 7986                  add     si, 2 ;~ 01A2:3468
cs=0x1a2;eip=0x00346b; 	X(MOV(*(dw*)(raddr(ds,si)), ax));	// 7987                  mov     [si], ax ;~ 01A2:346B
cs=0x1a2;eip=0x00346d; 	T(ADD(si, 2));	// 7988                  add     si, 2 ;~ 01A2:346D
cs=0x1a2;eip=0x003470; 	X(word_1f1f4 = si;);	// 7989                  mov     word_1F1F4, si ;~ 01A2:3470
cs=0x1a2;eip=0x003474; 	X(INC(word_1f396));	// 7990                  inc     ds:word_1F396 ;~ 01A2:3474
cs=0x1a2;eip=0x003478; 	X(POP(si));	// 7991                  pop     si ;~ 01A2:3478
cs=0x1a2;eip=0x003479; 	J(CALL(sub_1d445,0));	// 7992                  call    sub_1D445 ;~ 01A2:3479
cs=0x1a2;eip=0x00347c; 	J(CALL(sub_13509,0));	// 7993                  call    sub_13509 ;~ 01A2:347C
cs=0x1a2;eip=0x00347f; 	J(CALL(sub_1d445,0));	// 7994                  call    sub_1D445 ;~ 01A2:347F
cs=0x1a2;eip=0x003482; 	J(RETN(0));	// 7995                  retn ;~ 01A2:3482
ret_1a2_3483:
	// 4914 
cs=0x1a2;eip=0x003483; 	T(CMP(*(raddr(es,di+0x17)), 7));	// 7997                  cmp     byte ptr es:[di+17h], 7 ;~ 01A2:3483
cs=0x1a2;eip=0x003488; 	J(JNZ(loc_134aa));	// 7998                  jnz     short loc_134AA ;~ 01A2:3488
cs=0x1a2;eip=0x00348a; 	X(PUSH(si));	// 7999                  push    si ;~ 01A2:348A
cs=0x1a2;eip=0x00348b; 	T(si = word_1f1f4;);	// 8000                  mov     si, word_1F1F4 ;~ 01A2:348B
cs=0x1a2;eip=0x00348f; 	X(MOV(*(dw*)(raddr(ds,si)), 5));	// 8001                  mov     word ptr [si], 5 ;~ 01A2:348F
cs=0x1a2;eip=0x003493; 	T(ADD(si, 2));	// 8002                  add     si, 2 ;~ 01A2:3493
cs=0x1a2;eip=0x003496; 	X(POP(*(dw*)(raddr(ds,si))));	// 8003                  pop     word ptr [si] ;~ 01A2:3496
cs=0x1a2;eip=0x003498; 	X(PUSH(*(dw*)(raddr(ds,si))));	// 8004                  push    word ptr [si] ;~ 01A2:3498
cs=0x1a2;eip=0x00349a; 	T(ADD(si, 2));	// 8005                  add     si, 2 ;~ 01A2:349A
cs=0x1a2;eip=0x00349d; 	T(ADD(si, 2));	// 8006                  add     si, 2 ;~ 01A2:349D
cs=0x1a2;eip=0x0034a0; 	X(word_1f1f4 = si;);	// 8007                  mov     word_1F1F4, si ;~ 01A2:34A0
cs=0x1a2;eip=0x0034a4; 	X(INC(word_1f396));	// 8008                  inc     ds:word_1F396 ;~ 01A2:34A4
cs=0x1a2;eip=0x0034a8; 	X(POP(si));	// 8009                  pop     si ;~ 01A2:34A8
cs=0x1a2;eip=0x0034a9; 	J(RETN(0));	// 8010                  retn ;~ 01A2:34A9
loc_134aa:
	// 4915 
cs=0x1a2;eip=0x0034aa; 	T(MOV(dx, *(dw*)(raddr(ds,si+4))));	// 8014                  mov     dx, [si+4] ;~ 01A2:34AA
cs=0x1a2;eip=0x0034ad; 	J(CALL(sub_1d445,0));	// 8015                  call    sub_1D445 ;~ 01A2:34AD
cs=0x1a2;eip=0x0034b0; 	J(CALL(seg000_78d5_proc,m2c::kloc_178de));	// 8016                  call    loc_178DE ;~ 01A2:34B0
cs=0x1a2;eip=0x0034b3; 	J(CALL(sub_1d445,0));	// 8017                  call    sub_1D445 ;~ 01A2:34B3
cs=0x1a2;eip=0x0034b6; 	X(PUSH(ax));	// 8018                  push    ax ;~ 01A2:34B6
cs=0x1a2;eip=0x0034b7; 	T(ax = 0x0A;);	// 8019                  mov     ax, 0Ah ;~ 01A2:34B7
cs=0x1a2;eip=0x0034ba; 	J(CALL(sub_1156c,0));	// 8020                  call    sub_1156C ;~ 01A2:34BA
cs=0x1a2;eip=0x0034bd; 	X(POP(ax));	// 8021                  pop     ax ;~ 01A2:34BD
cs=0x1a2;eip=0x0034be; 	J(RETN(0));	// 8022                  retn ;~ 01A2:34BE

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_134aa: 	goto loc_134aa;
        case m2c::kret_1a2_3483: 	goto ret_1a2_3483;
        case m2c::kseg000_344d_proc: 	goto seg000_344d_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group13(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group13:
    _begin:
sub_134bf:
	// 8027 
cs=0x1a2;eip=0x0034bf; 	X(PUSH(ax));	// 8029                  push    ax ;~ 01A2:34BF
cs=0x1a2;eip=0x0034c0; 	X(PUSH(bx));	// 8030                  push    bx ;~ 01A2:34C0
cs=0x1a2;eip=0x0034c1; 	X(PUSH(cx));	// 8031                  push    cx ;~ 01A2:34C1
cs=0x1a2;eip=0x0034c2; 	X(PUSH(dx));	// 8032                  push    dx ;~ 01A2:34C2
cs=0x1a2;eip=0x0034c3; 	X(PUSH(bp));	// 8033                  push    bp ;~ 01A2:34C3
cs=0x1a2;eip=0x0034c4; 	X(PUSH(si));	// 8034                  push    si ;~ 01A2:34C4
cs=0x1a2;eip=0x0034c5; 	X(PUSH(di));	// 8035                  push    di ;~ 01A2:34C5
cs=0x1a2;eip=0x0034c6; 	X(PUSH(es));	// 8036                  push    es ;~ 01A2:34C6
cs=0x1a2;eip=0x0034c7; 	X(PUSH(ds));	// 8037                  push    ds ;~ 01A2:34C7
cs=0x1a2;eip=0x0034c8; 	X(byte_1f73f = 1;);	// 8038                  mov     ds:byte_1F73F, 1 ;~ 01A2:34C8
cs=0x1a2;eip=0x0034cd; 	X(word_1f3ea = 0;);	// 8039                  mov     ds:word_1F3EA, 0 ;~ 01A2:34CD
cs=0x1a2;eip=0x0034d3; 	X(byte_1f836 = 0;);	// 8040                  mov     ds:byte_1F836, 0 ;~ 01A2:34D3
cs=0x1a2;eip=0x0034d8; 	T(ax = *(dw*)(((db*)&seg_1f171)+1););	// 8041                  mov     ax, seg_1F171+1 ;~ 01A2:34D8
cs=0x1a2;eip=0x0034db; 	T(CMP(ax, *(dw*)(&unk_1f170)));	// 8042                  cmp     ax, word ptr unk_1F170 ;~ 01A2:34DB
cs=0x1a2;eip=0x0034df; 	J(JNZ(sub_134f4));	// 8043                  jnz     short sub_134F4 ;~ 01A2:34DF
cs=0x1a2;eip=0x0034e1; 	J(CALL(sub_1d445,0));	// 8044                  call    sub_1D445 ;~ 01A2:34E1
cs=0x1a2;eip=0x0034e4; 	X(PUSH(ax));	// 8045                  push    ax ;~ 01A2:34E4
cs=0x1a2;eip=0x0034e5; 	X(PUSH(bx));	// 8046                  push    bx ;~ 01A2:34E5
cs=0x1a2;eip=0x0034e6; 	X(PUSH(cx));	// 8047                  push    cx ;~ 01A2:34E6
cs=0x1a2;eip=0x0034e7; 	X(PUSH(dx));	// 8048                  push    dx ;~ 01A2:34E7
cs=0x1a2;eip=0x0034e8; 	X(PUSH(bp));	// 8049                  push    bp ;~ 01A2:34E8
cs=0x1a2;eip=0x0034e9; 	X(PUSH(si));	// 8050                  push    si ;~ 01A2:34E9
cs=0x1a2;eip=0x0034ea; 	X(PUSH(di));	// 8051                  push    di ;~ 01A2:34EA
cs=0x1a2;eip=0x0034eb; 	X(PUSH(es));	// 8052                  push    es ;~ 01A2:34EB
cs=0x1a2;eip=0x0034ec; 	X(PUSH(ds));	// 8053                  push    ds ;~ 01A2:34EC
cs=0x1a2;eip=0x0034ed; 	J(CALL(sub_134f4,0));	// 8054                  call    sub_134F4 ;~ 01A2:34ED
cs=0x1a2;eip=0x0034f0; 	J(CALL(sub_1d445,0));	// 8055                  call    sub_1D445 ;~ 01A2:34F0
cs=0x1a2;eip=0x0034f3; 	J(RETN(0));	// 8056                  retn ;~ 01A2:34F3
sub_134f4:
	// 8063 
cs=0x1a2;eip=0x0034f4; 	X(byte_1f76b = 1;);	// 8065                  mov     ds:byte_1F76B, 1 ;~ 01A2:34F4
cs=0x1a2;eip=0x0034f9; 	J(CALL(sub_1d9c3,0));	// 8066                  call    sub_1D9C3 ;~ 01A2:34F9
cs=0x1a2;eip=0x0034fc; 	J(CALL(sub_129cf,0));	// 8067                  call    sub_129CF ;~ 01A2:34FC
cs=0x1a2;eip=0x0034ff; 	X(POP(ds));	// 8068                  pop     ds ;~ 01A2:34FF
cs=0x1a2;eip=0x003500; 	X(POP(es));	// 8069                  pop     es ;~ 01A2:3500
cs=0x1a2;eip=0x003501; 	X(POP(di));	// 8071                  pop     di ;~ 01A2:3501
cs=0x1a2;eip=0x003502; 	X(POP(si));	// 8072                  pop     si ;~ 01A2:3502
cs=0x1a2;eip=0x003503; 	X(POP(bp));	// 8073                  pop     bp ;~ 01A2:3503
cs=0x1a2;eip=0x003504; 	X(POP(dx));	// 8074                  pop     dx ;~ 01A2:3504
cs=0x1a2;eip=0x003505; 	X(POP(cx));	// 8075                  pop     cx ;~ 01A2:3505
cs=0x1a2;eip=0x003506; 	X(POP(bx));	// 8076                  pop     bx ;~ 01A2:3506
cs=0x1a2;eip=0x003507; 	X(POP(ax));	// 8077                  pop     ax ;~ 01A2:3507
cs=0x1a2;eip=0x003508; 	J(RETN(0));	// 8078                  retn ;~ 01A2:3508

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_134bf: 	goto sub_134bf;
        case m2c::ksub_134f4: 	goto sub_134f4;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13509(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13509:
    _begin:
cs=0x1a2;eip=0x003509; 	T(MOV(dx, *(dw*)(raddr(ds,si+4))));	// 8087                  mov     dx, [si+4] ;~ 01A2:3509
cs=0x1a2;eip=0x00350c; 	J(CALL(sub_13efd,0));	// 8088                  call    sub_13EFD ;~ 01A2:350C
cs=0x1a2;eip=0x00350f; 	X(MOV(*(raddr(ds,si+0x0A)), 0x0FE));	// 8089                  mov     byte ptr [si+0Ah], 0FEh ;~ 01A2:350F
cs=0x1a2;eip=0x003513; 	J(RETN(0));	// 8090                  retn ;~ 01A2:3513

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_13509: 	goto sub_13509;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13514(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13514:
    _begin:
cs=0x1a2;eip=0x003514; 	X(word_1f6e6 = 0;);	// 8099                  mov     ds:word_1F6E6, 0 ;~ 01A2:3514
cs=0x1a2;eip=0x00351a; 	X(byte_1f798 = 0;);	// 8100                  mov     ds:byte_1F798, 0 ;~ 01A2:351A
cs=0x1a2;eip=0x00351f; 	T(cx = 4;);	// 8101                  mov     cx, 4 ;~ 01A2:351F
cs=0x1a2;eip=0x003522; 	T(di = 0x0FDD6;);	// 8102                  mov     di, 0FDD6h ;~ 01A2:3522
cs=0x1a2;eip=0x003525; 	T(ax = ds;);	// 8103                  mov     ax, ds ;~ 01A2:3525
cs=0x1a2;eip=0x003527; 	T(es = ax;);	// 8104                  mov     es, ax ;~ 01A2:3527
cs=0x1a2;eip=0x003529; 	T(XOR(ax, ax));	// 8106                  xor     ax, ax ;~ 01A2:3529
loc_1352b:
	// 4916 
cs=0x1a2;eip=0x00352b; 	X(STOSW);	// 8109                  stosw ;~ 01A2:352B
cs=0x1a2;eip=0x00352c; 	X(STOSW);	// 8110                  stosw ;~ 01A2:352C
cs=0x1a2;eip=0x00352d; 	X(STOSW);	// 8111                  stosw ;~ 01A2:352D
cs=0x1a2;eip=0x00352e; 	X(STOSW);	// 8112                  stosw ;~ 01A2:352E
cs=0x1a2;eip=0x00352f; 	X(STOSW);	// 8113                  stosw ;~ 01A2:352F
cs=0x1a2;eip=0x003530; 	J(LOOP(loc_1352b));	// 8114                  loop    loc_1352B ;~ 01A2:3530
cs=0x1a2;eip=0x003532; 	J(RETN(0));	// 8115                  retn ;~ 01A2:3532

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1352b: 	goto loc_1352b;
        case m2c::ksub_13514: 	goto sub_13514;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13533(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13533:
    _begin:
cs=0x1a2;eip=0x003533; 	X(PUSH(ax));	// 8123                  push    ax ;~ 01A2:3533
cs=0x1a2;eip=0x003534; 	X(PUSH(bx));	// 8124                  push    bx ;~ 01A2:3534
cs=0x1a2;eip=0x003535; 	X(PUSH(cx));	// 8125                  push    cx ;~ 01A2:3535
cs=0x1a2;eip=0x003536; 	X(PUSH(dx));	// 8126                  push    dx ;~ 01A2:3536
cs=0x1a2;eip=0x003537; 	X(PUSH(bp));	// 8127                  push    bp ;~ 01A2:3537
cs=0x1a2;eip=0x003538; 	X(PUSH(si));	// 8128                  push    si ;~ 01A2:3538
cs=0x1a2;eip=0x003539; 	X(PUSH(di));	// 8129                  push    di ;~ 01A2:3539
cs=0x1a2;eip=0x00353a; 	X(PUSH(es));	// 8130                  push    es ;~ 01A2:353A
cs=0x1a2;eip=0x00353b; 	X(PUSH(ds));	// 8131                  push    ds ;~ 01A2:353B
cs=0x1a2;eip=0x00353c; 	J(CALL(sub_175af,0));	// 8132                  call    sub_175AF ;~ 01A2:353C
cs=0x1a2;eip=0x00353f; 	T(si = di;);	// 8133                  mov     si, di ;~ 01A2:353F
cs=0x1a2;eip=0x003541; 	J(return sub_13555(m2c::kloc_1355e, _state););	// 8134                  jmp     short loc_1355E ;~ 01A2:3541

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_13533: 	goto sub_13533;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13543(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13543:
    _begin:
cs=0x1a2;eip=0x003543; 	X(PUSH(ax));	// 8142                  push    ax ;~ 01A2:3543
cs=0x1a2;eip=0x003544; 	X(PUSH(bx));	// 8143                  push    bx ;~ 01A2:3544
cs=0x1a2;eip=0x003545; 	X(PUSH(cx));	// 8144                  push    cx ;~ 01A2:3545
cs=0x1a2;eip=0x003546; 	X(PUSH(dx));	// 8145                  push    dx ;~ 01A2:3546
cs=0x1a2;eip=0x003547; 	X(PUSH(bp));	// 8146                  push    bp ;~ 01A2:3547
cs=0x1a2;eip=0x003548; 	X(PUSH(si));	// 8147                  push    si ;~ 01A2:3548
cs=0x1a2;eip=0x003549; 	X(PUSH(di));	// 8148                  push    di ;~ 01A2:3549
cs=0x1a2;eip=0x00354a; 	X(PUSH(es));	// 8149                  push    es ;~ 01A2:354A
cs=0x1a2;eip=0x00354b; 	X(PUSH(ds));	// 8150                  push    ds ;~ 01A2:354B
cs=0x1a2;eip=0x00354c; 	T(dx = si;);	// 8151                  mov     dx, si ;~ 01A2:354C
cs=0x1a2;eip=0x00354e; 	J(CALL(sub_175af,0));	// 8152                  call    sub_175AF ;~ 01A2:354E
cs=0x1a2;eip=0x003551; 	T(si = di;);	// 8153                  mov     si, di ;~ 01A2:3551
cs=0x1a2;eip=0x003553; 	J(return sub_13555(m2c::kloc_1355e, _state););	// 8154                  jmp     short loc_1355E ;~ 01A2:3553

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_13543: 	goto sub_13543;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13555(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13555:
    _begin:
cs=0x1a2;eip=0x003555; 	X(PUSH(ax));	// 8163                  push    ax ;~ 01A2:3555
cs=0x1a2;eip=0x003556; 	X(PUSH(bx));	// 8164                  push    bx ;~ 01A2:3556
cs=0x1a2;eip=0x003557; 	X(PUSH(cx));	// 8165                  push    cx ;~ 01A2:3557
cs=0x1a2;eip=0x003558; 	X(PUSH(dx));	// 8166                  push    dx ;~ 01A2:3558
cs=0x1a2;eip=0x003559; 	X(PUSH(bp));	// 8167                  push    bp ;~ 01A2:3559
cs=0x1a2;eip=0x00355a; 	X(PUSH(si));	// 8168                  push    si ;~ 01A2:355A
cs=0x1a2;eip=0x00355b; 	X(PUSH(di));	// 8169                  push    di ;~ 01A2:355B
cs=0x1a2;eip=0x00355c; 	X(PUSH(es));	// 8170                  push    es ;~ 01A2:355C
cs=0x1a2;eip=0x00355d; 	X(PUSH(ds));	// 8171                  push    ds ;~ 01A2:355D
loc_1355e:
	// 4917 
cs=0x1a2;eip=0x00355e; 	X(PUSH(si));	// 8175                  push    si ;~ 01A2:355E
cs=0x1a2;eip=0x00355f; 	T(di = 0x0FDCC;);	// 8176                  mov     di, 0FDCCh ;~ 01A2:355F
cs=0x1a2;eip=0x003562; 	T(bx = di;);	// 8177                  mov     bx, di ;~ 01A2:3562
cs=0x1a2;eip=0x003564; 	X(byte_1f798 = 0;);	// 8178                  mov     ds:byte_1F798, 0 ;~ 01A2:3564
cs=0x1a2;eip=0x003569; 	T(ch = 3;);	// 8179                  mov     ch, 3 ;~ 01A2:3569
cs=0x1a2;eip=0x00356b; 	T(dx = word_1f3ac;);	// 8180                  mov     dx, ds:word_1F3AC ;~ 01A2:356B
cs=0x1a2;eip=0x00356f; 	X(byte_1f798 = 0x0FF;);	// 8181                  mov     ds:byte_1F798, 0FFh ;~ 01A2:356F
loc_13574:
	// 4918 
cs=0x1a2;eip=0x003574; 	X(INC(byte_1f798));	// 8184                  inc     ds:byte_1F798 ;~ 01A2:3574
cs=0x1a2;eip=0x003578; 	T(ADD(bx, 0x0A));	// 8185                  add     bx, 0Ah ;~ 01A2:3578
cs=0x1a2;eip=0x00357b; 	T(CMP(*(dw*)(raddr(ds,bx)), 0));	// 8186                  cmp     word ptr [bx], 0 ;~ 01A2:357B
cs=0x1a2;eip=0x00357e; 	J(JZ(loc_13588));	// 8187                  jz      short loc_13588 ;~ 01A2:357E
cs=0x1a2;eip=0x003580; 	T(CMP(dx, *(dw*)(raddr(ds,bx+8))));	// 8189                  cmp     dx, [bx+8] ;~ 01A2:3580
cs=0x1a2;eip=0x003583; 	J(JNZ(loc_13588));	// 8190                  jnz     short loc_13588 ;~ 01A2:3583
cs=0x1a2;eip=0x003585; 	J(JMP(loc_13608));	// 8191                  jmp     loc_13608 ;~ 01A2:3585
loc_13588:
	// 4919 
cs=0x1a2;eip=0x003588; 	T(DEC(ch));	// 8196                  dec     ch ;~ 01A2:3588
cs=0x1a2;eip=0x00358a; 	J(JNS(loc_13574));	// 8197                  jns     short loc_13574 ;~ 01A2:358A
cs=0x1a2;eip=0x00358c; 	T(ax = word_1f6e6;);	// 8198                  mov     ax, ds:word_1F6E6 ;~ 01A2:358C
cs=0x1a2;eip=0x00358f; 	T(CMP(ax, 4));	// 8199                  cmp     ax, 4 ;~ 01A2:358F
cs=0x1a2;eip=0x003592; 	J(JNZ(loc_135b6));	// 8200                  jnz     short loc_135B6 ;~ 01A2:3592
cs=0x1a2;eip=0x003594; 	T(ax = 0x7D00;);	// 8201                  mov     ax, 7D00h ;~ 01A2:3594
cs=0x1a2;eip=0x003597; 	T(XOR(dl, dl));	// 8202                  xor     dl, dl ;~ 01A2:3597
cs=0x1a2;eip=0x003599; 	T(ch = 3;);	// 8203                  mov     ch, 3 ;~ 01A2:3599
loc_1359b:
	// 4920 
cs=0x1a2;eip=0x00359b; 	T(ADD(di, 0x0A));	// 8206                  add     di, 0Ah ;~ 01A2:359B
cs=0x1a2;eip=0x00359e; 	T(CMP(ax, *(dw*)(raddr(ds,di))));	// 8207                  cmp     ax, [di] ;~ 01A2:359E
cs=0x1a2;eip=0x0035a0; 	J(JLE(loc_135a8));	// 8208                  jle     short loc_135A8 ;~ 01A2:35A0
cs=0x1a2;eip=0x0035a2; 	T(MOV(ax, *(dw*)(raddr(ds,di))));	// 8209                  mov     ax, [di] ;~ 01A2:35A2
cs=0x1a2;eip=0x0035a4; 	T(dh = dl;);	// 8210                  mov     dh, dl ;~ 01A2:35A4
cs=0x1a2;eip=0x0035a6; 	T(bx = di;);	// 8211                  mov     bx, di ;~ 01A2:35A6
loc_135a8:
	// 4921 
cs=0x1a2;eip=0x0035a8; 	T(INC(dl));	// 8214                  inc     dl ;~ 01A2:35A8
cs=0x1a2;eip=0x0035aa; 	T(DEC(ch));	// 8215                  dec     ch ;~ 01A2:35AA
cs=0x1a2;eip=0x0035ac; 	J(JNS(loc_1359b));	// 8216                  jns     short loc_1359B ;~ 01A2:35AC
cs=0x1a2;eip=0x0035ae; 	T(di = bx;);	// 8217                  mov     di, bx ;~ 01A2:35AE
cs=0x1a2;eip=0x0035b0; 	X(byte_1f798 = dh;);	// 8218                  mov     ds:byte_1F798, dh ;~ 01A2:35B0
cs=0x1a2;eip=0x0035b4; 	J(JMP(loc_135cb));	// 8219                  jmp     short loc_135CB ;~ 01A2:35B4
loc_135b6:
	// 4922 
cs=0x1a2;eip=0x0035b6; 	X(byte_1f798 = 0x0FF;);	// 8223                  mov     ds:byte_1F798, 0FFh ;~ 01A2:35B6
loc_135bb:
	// 4923 
cs=0x1a2;eip=0x0035bb; 	T(ADD(di, 0x0A));	// 8226                  add     di, 0Ah ;~ 01A2:35BB
cs=0x1a2;eip=0x0035be; 	X(INC(byte_1f798));	// 8227                  inc     ds:byte_1F798 ;~ 01A2:35BE
cs=0x1a2;eip=0x0035c2; 	T(CMP(*(dw*)(raddr(ds,di)), 0));	// 8228                  cmp     word ptr [di], 0 ;~ 01A2:35C2
cs=0x1a2;eip=0x0035c5; 	J(JNZ(loc_135bb));	// 8229                  jnz     short loc_135BB ;~ 01A2:35C5
cs=0x1a2;eip=0x0035c7; 	X(INC(word_1f6e6));	// 8230                  inc     ds:word_1F6E6 ;~ 01A2:35C7
loc_135cb:
	// 4924 
cs=0x1a2;eip=0x0035cb; 	X(byte_1f797 = 1;);	// 8233                  mov     ds:byte_1F797, 1 ;~ 01A2:35CB
cs=0x1a2;eip=0x0035d0; 	X(POP(ax));	// 8234                  pop     ax ;~ 01A2:35D0
cs=0x1a2;eip=0x0035d1; 	X(PUSH(di));	// 8235                  push    di ;~ 01A2:35D1
cs=0x1a2;eip=0x0035d2; 	T(di = ax;);	// 8236                  mov     di, ax ;~ 01A2:35D2
cs=0x1a2;eip=0x0035d4; 	J(CALL(sub_15dc1,0));	// 8237                  call    sub_15DC1 ;~ 01A2:35D4
cs=0x1a2;eip=0x0035d7; 	X(POP(di));	// 8238                  pop     di ;~ 01A2:35D7
cs=0x1a2;eip=0x0035d8; 	T(ax = ds;);	// 8239                  mov     ax, ds ;~ 01A2:35D8
cs=0x1a2;eip=0x0035da; 	T(es = ax;);	// 8240                  mov     es, ax ;~ 01A2:35DA
cs=0x1a2;eip=0x0035dc; 	T(ax = 0x4B;);	// 8242                  mov     ax, 4Bh ; 'K' ;~ 01A2:35DC
cs=0x1a2;eip=0x0035df; 	X(STOSW);	// 8243                  stosw ;~ 01A2:35DF
cs=0x1a2;eip=0x0035e0; 	T(ax = word_1f6e8;);	// 8244                  mov     ax, ds:word_1F6E8 ;~ 01A2:35E0
cs=0x1a2;eip=0x0035e3; 	X(STOSW);	// 8245                  stosw ;~ 01A2:35E3
cs=0x1a2;eip=0x0035e4; 	T(ax = word_1f6ea;);	// 8246                  mov     ax, ds:word_1F6EA ;~ 01A2:35E4
cs=0x1a2;eip=0x0035e7; 	T(ADD(ax, 2));	// 8247                  add     ax, 2 ;~ 01A2:35E7
cs=0x1a2;eip=0x0035ea; 	X(STOSW);	// 8248                  stosw ;~ 01A2:35EA
cs=0x1a2;eip=0x0035eb; 	T(ax = word_1f6ec;);	// 8249                  mov     ax, ds:word_1F6EC ;~ 01A2:35EB
cs=0x1a2;eip=0x0035ee; 	T(SHL(ax, 1));	// 8250                  shl     ax, 1 ;~ 01A2:35EE
cs=0x1a2;eip=0x0035f0; 	T(SHL(ax, 1));	// 8251                  shl     ax, 1 ;~ 01A2:35F0
cs=0x1a2;eip=0x0035f2; 	T(SHL(ax, 1));	// 8252                  shl     ax, 1 ;~ 01A2:35F2
cs=0x1a2;eip=0x0035f4; 	T(ADD(ax, 0x20));	// 8253                  add     ax, 20h ; ' ' ;~ 01A2:35F4
cs=0x1a2;eip=0x0035f7; 	T(DEC(ax));	// 8254                  dec     ax ;~ 01A2:35F7
cs=0x1a2;eip=0x0035f8; 	X(STOSB);	// 8255                  stosb ;~ 01A2:35F8
cs=0x1a2;eip=0x0035f9; 	T(INC(di));	// 8256                  inc     di ;~ 01A2:35F9
cs=0x1a2;eip=0x0035fa; 	T(ax = word_1f3ac;);	// 8257                  mov     ax, ds:word_1F3AC ;~ 01A2:35FA
cs=0x1a2;eip=0x0035fd; 	X(STOSW);	// 8258                  stosw ;~ 01A2:35FD
loc_135fe:
	// 4925 
cs=0x1a2;eip=0x0035fe; 	X(POP(ds));	// 8262                  pop     ds ;~ 01A2:35FE
cs=0x1a2;eip=0x0035ff; 	X(POP(es));	// 8263                  pop     es ;~ 01A2:35FF
cs=0x1a2;eip=0x003600; 	X(POP(di));	// 8265                  pop     di ;~ 01A2:3600
cs=0x1a2;eip=0x003601; 	X(POP(si));	// 8266                  pop     si ;~ 01A2:3601
cs=0x1a2;eip=0x003602; 	X(POP(bp));	// 8267                  pop     bp ;~ 01A2:3602
cs=0x1a2;eip=0x003603; 	X(POP(dx));	// 8268                  pop     dx ;~ 01A2:3603
cs=0x1a2;eip=0x003604; 	X(POP(cx));	// 8269                  pop     cx ;~ 01A2:3604
cs=0x1a2;eip=0x003605; 	X(POP(bx));	// 8270                  pop     bx ;~ 01A2:3605
cs=0x1a2;eip=0x003606; 	X(POP(ax));	// 8271                  pop     ax ;~ 01A2:3606
cs=0x1a2;eip=0x003607; 	J(RETN(0));	// 8272                  retn ;~ 01A2:3607
loc_13608:
	// 4926 
cs=0x1a2;eip=0x003608; 	X(POP(di));	// 8276                  pop     di ;~ 01A2:3608
cs=0x1a2;eip=0x003609; 	X(MOV(*(dw*)(raddr(ds,bx)), 0x4B));	// 8277                  mov     word ptr [bx], 4Bh ; 'K' ;~ 01A2:3609
cs=0x1a2;eip=0x00360d; 	T(CMP(dx, word_1f700));	// 8278                  cmp     dx, ds:word_1F700 ;~ 01A2:360D
cs=0x1a2;eip=0x003611; 	J(JZ(loc_135fe));	// 8279                  jz      short loc_135FE ;~ 01A2:3611
cs=0x1a2;eip=0x003613; 	J(CALL(sub_15dc1,0));	// 8280                  call    sub_15DC1 ;~ 01A2:3613
cs=0x1a2;eip=0x003616; 	J(JMP(loc_135fe));	// 8281                  jmp     short loc_135FE ;~ 01A2:3616

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1355e: 	goto loc_1355e;
        case m2c::kloc_13574: 	goto loc_13574;
        case m2c::kloc_13588: 	goto loc_13588;
        case m2c::kloc_1359b: 	goto loc_1359b;
        case m2c::kloc_135a8: 	goto loc_135a8;
        case m2c::kloc_135b6: 	goto loc_135b6;
        case m2c::kloc_135bb: 	goto loc_135bb;
        case m2c::kloc_135cb: 	goto loc_135cb;
        case m2c::kloc_135fe: 	goto loc_135fe;
        case m2c::kloc_13608: 	goto loc_13608;
        case m2c::ksub_13555: 	goto sub_13555;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13618(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13618:
    _begin:
cs=0x1a2;eip=0x003618; 	J(CALL(sub_1d7e7,0));	// 8290                  call    sub_1D7E7 ;~ 01A2:3618
cs=0x1a2;eip=0x00361b; 	T(si = 0x0FDD6;);	// 8291                  mov     si, 0FDD6h ;~ 01A2:361B
cs=0x1a2;eip=0x00361e; 	T(CMP(word_1f6e6, 0));	// 8292                  cmp     ds:word_1F6E6, 0 ;~ 01A2:361E
cs=0x1a2;eip=0x003623; 	J(JZ(locret_1366a));	// 8293                  jz      short locret_1366A ;~ 01A2:3623
cs=0x1a2;eip=0x003625; 	X(byte_1f865 = 4;);	// 8294                  mov     ds:byte_1F865, 4 ;~ 01A2:3625
loc_1362a:
	// 4927 
cs=0x1a2;eip=0x00362a; 	X(PUSH(si));	// 8297                  push    si ;~ 01A2:362A
cs=0x1a2;eip=0x00362b; 	T(CMP(*(dw*)(raddr(ds,si)), 0));	// 8298                  cmp     word ptr [si], 0 ;~ 01A2:362B
cs=0x1a2;eip=0x00362e; 	J(JZ(loc_13660));	// 8299                  jz      short loc_13660 ;~ 01A2:362E
cs=0x1a2;eip=0x003630; 	X(DEC(*(dw*)(raddr(ds,si))));	// 8300                  dec     word ptr [si] ;~ 01A2:3630
cs=0x1a2;eip=0x003632; 	J(JNZ(loc_1363a));	// 8301                  jnz     short loc_1363A ;~ 01A2:3632
cs=0x1a2;eip=0x003634; 	X(DEC(word_1f6e6));	// 8302                  dec     ds:word_1F6E6 ;~ 01A2:3634
cs=0x1a2;eip=0x003638; 	J(JMP(loc_13660));	// 8303                  jmp     short loc_13660 ;~ 01A2:3638
loc_1363a:
	// 4928 
cs=0x1a2;eip=0x00363a; 	T(MOV(bx, *(dw*)(raddr(ds,si+2))));	// 8307                  mov     bx, [si+2] ;~ 01A2:363A
cs=0x1a2;eip=0x00363d; 	T(MOV(cx, *(dw*)(raddr(ds,si+4))));	// 8308                  mov     cx, [si+4] ;~ 01A2:363D
cs=0x1a2;eip=0x003640; 	T(dx = cx;);	// 8309                  mov     dx, cx ;~ 01A2:3640
cs=0x1a2;eip=0x003642; 	T(MOV(ah, *(raddr(ds,si+6))));	// 8310                  mov     ah, [si+6] ;~ 01A2:3642
cs=0x1a2;eip=0x003645; 	X(PUSH(es));	// 8311                  push    es ;~ 01A2:3645
cs=0x1a2;eip=0x003646; 	X(PUSH(ds));	// 8312                  push    ds ;~ 01A2:3646
cs=0x1a2;eip=0x003647; 	T(es = *(dw*)(((db*)&seg_1f171)+1););	// 8313                  mov     es, seg_1F171+1 ;~ 01A2:3647
cs=0x1a2;eip=0x00364b; 	T(ds = *(dw*)(&unk_1f170););	// 8314                  mov     ds, word ptr unk_1F170 ;~ 01A2:364B
loc_1364f:
	// 4929 
cs=0x1a2;eip=0x00364f; 	T(si = bx;);	// 8318                  mov     si, bx ;~ 01A2:364F
cs=0x1a2;eip=0x003651; 	T(di = bx;);	// 8319                  mov     di, bx ;~ 01A2:3651
cs=0x1a2;eip=0x003653; 	T(cx = dx;);	// 8320                  mov     cx, dx ;~ 01A2:3653
	// 8321                  rep movsb ;~ 01A2:3655
cs=0x1a2;eip=0x003655; 	X(	REP MOVSB);	// 8321                  rep movsb ;~ 01A2:3655
cs=0x1a2;eip=0x003657; 	T(ADD(bx, 0x28));	// 8322                  add     bx, 28h ; '(' ;~ 01A2:3657
cs=0x1a2;eip=0x00365a; 	T(DEC(ah));	// 8323                  dec     ah ;~ 01A2:365A
cs=0x1a2;eip=0x00365c; 	J(JNS(loc_1364f));	// 8324                  jns     short loc_1364F ;~ 01A2:365C
cs=0x1a2;eip=0x00365e; 	X(POP(ds));	// 8325                  pop     ds ;~ 01A2:365E
cs=0x1a2;eip=0x00365f; 	X(POP(es));	// 8327                  pop     es ;~ 01A2:365F
loc_13660:
	// 4930 
cs=0x1a2;eip=0x003660; 	X(POP(si));	// 8331                  pop     si ;~ 01A2:3660
cs=0x1a2;eip=0x003661; 	T(ADD(si, 0x0A));	// 8332                  add     si, 0Ah ;~ 01A2:3661
cs=0x1a2;eip=0x003664; 	X(DEC(byte_1f865));	// 8333                  dec     ds:byte_1F865 ;~ 01A2:3664
cs=0x1a2;eip=0x003668; 	J(JNZ(loc_1362a));	// 8334                  jnz     short loc_1362A ;~ 01A2:3668
locret_1366a:
	// 4931 
cs=0x1a2;eip=0x00366a; 	J(RETN(0));	// 8337                  retn ;~ 01A2:366A

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1362a: 	goto loc_1362a;
        case m2c::kloc_1363a: 	goto loc_1363a;
        case m2c::kloc_1364f: 	goto loc_1364f;
        case m2c::kloc_13660: 	goto loc_13660;
        case m2c::klocret_1366a: 	goto locret_1366a;
        case m2c::ksub_13618: 	goto sub_13618;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1366b(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1366b:
    _begin:
cs=0x1a2;eip=0x00366b; 	X(PUSH(ax));	// 8346                  push    ax ;~ 01A2:366B
cs=0x1a2;eip=0x00366c; 	X(PUSH(bx));	// 8347                  push    bx ;~ 01A2:366C
cs=0x1a2;eip=0x00366d; 	X(PUSH(cx));	// 8348                  push    cx ;~ 01A2:366D
cs=0x1a2;eip=0x00366e; 	X(PUSH(dx));	// 8349                  push    dx ;~ 01A2:366E
cs=0x1a2;eip=0x00366f; 	X(PUSH(bp));	// 8350                  push    bp ;~ 01A2:366F
cs=0x1a2;eip=0x003670; 	X(PUSH(si));	// 8351                  push    si ;~ 01A2:3670
cs=0x1a2;eip=0x003671; 	X(PUSH(di));	// 8352                  push    di ;~ 01A2:3671
cs=0x1a2;eip=0x003672; 	X(PUSH(es));	// 8353                  push    es ;~ 01A2:3672
cs=0x1a2;eip=0x003673; 	X(PUSH(ds));	// 8354                  push    ds ;~ 01A2:3673
cs=0x1a2;eip=0x003674; 	J(CALL(sub_1d445,0));	// 8355                  call    sub_1D445 ;~ 01A2:3674
cs=0x1a2;eip=0x003677; 	J(CALL(sub_188c9,0));	// 8356                  call    sub_188C9 ;~ 01A2:3677
cs=0x1a2;eip=0x00367a; 	J(CALL(sub_1570b,0));	// 8357                  call    sub_1570B ;~ 01A2:367A
cs=0x1a2;eip=0x00367d; 	J(CALL(sub_1545e,0));	// 8358                  call    sub_1545E ;~ 01A2:367D
cs=0x1a2;eip=0x003680; 	T(CMP(byte_1f740, 0));	// 8359                  cmp     ds:byte_1F740, 0 ;~ 01A2:3680
cs=0x1a2;eip=0x003685; 	J(JZ(loc_13692));	// 8360                  jz      short loc_13692 ;~ 01A2:3685
cs=0x1a2;eip=0x003687; 	T(si = *(dw*)(((db*)&seg_1f171)+1););	// 8361                  mov     si, seg_1F171+1 ;~ 01A2:3687
cs=0x1a2;eip=0x00368b; 	T(di = word_1f190;);	// 8362                  mov     di, word_1F190 ;~ 01A2:368B
cs=0x1a2;eip=0x00368f; 	J(CALL(sub_188ac,0));	// 8363                  call    sub_188AC ;~ 01A2:368F
loc_13692:
	// 4932 
cs=0x1a2;eip=0x003692; 	J(CALL(sub_15465,0));	// 8367                  call    sub_15465 ;~ 01A2:3692
cs=0x1a2;eip=0x003695; 	X(POP(ds));	// 8368                  pop     ds ;~ 01A2:3695
cs=0x1a2;eip=0x003696; 	X(POP(es));	// 8369                  pop     es ;~ 01A2:3696
cs=0x1a2;eip=0x003697; 	X(POP(di));	// 8371                  pop     di ;~ 01A2:3697
cs=0x1a2;eip=0x003698; 	X(POP(si));	// 8372                  pop     si ;~ 01A2:3698
cs=0x1a2;eip=0x003699; 	X(POP(bp));	// 8373                  pop     bp ;~ 01A2:3699
cs=0x1a2;eip=0x00369a; 	X(POP(dx));	// 8374                  pop     dx ;~ 01A2:369A
cs=0x1a2;eip=0x00369b; 	X(POP(cx));	// 8375                  pop     cx ;~ 01A2:369B
cs=0x1a2;eip=0x00369c; 	X(POP(bx));	// 8376                  pop     bx ;~ 01A2:369C
cs=0x1a2;eip=0x00369d; 	X(POP(ax));	// 8377                  pop     ax ;~ 01A2:369D
cs=0x1a2;eip=0x00369e; 	J(RETN(0));	// 8378                  retn ;~ 01A2:369E

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_13692: 	goto loc_13692;
        case m2c::ksub_1366b: 	goto sub_1366b;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1369f(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1369f:
    _begin:
cs=0x1a2;eip=0x00369f; 	J(CALL(sub_115eb,0));	// 8388                  call    sub_115EB ;~ 01A2:369F
cs=0x1a2;eip=0x0036a2; 	J(CALL(sub_19d8e,0));	// 8389                  call    sub_19D8E ;~ 01A2:36A2
cs=0x1a2;eip=0x0036a5; 	T(ax = seg_offset(seg045););	// 8390                  mov     ax, seg seg045 ;~ 01A2:36A5
cs=0x1a2;eip=0x0036a8; 	T(es = ax;);	// 8391                  mov     es, ax ;~ 01A2:36A8
cs=0x1a2;eip=0x0036aa; 	T(ax = *(dw*)(((db*)&off_6b850)+2););	// 8393                  mov     ax, word ptr es:off_6B850+2 ;~ 01A2:36AA
cs=0x1a2;eip=0x0036ae; 	X(word_1f3c0 = ax;);	// 8394                  mov     ds:word_1F3C0, ax ;~ 01A2:36AE
cs=0x1a2;eip=0x0036b1; 	T(ax = word_6b854;);	// 8395                  mov     ax, es:word_6B854 ;~ 01A2:36B1
cs=0x1a2;eip=0x0036b5; 	T(ax = ax;);	// 8396                  mov     ax, ax ;~ 01A2:36B5
cs=0x1a2;eip=0x0036b7; 	X(word_1f382 = ax;);	// 8397                  mov     ds:word_1F382, ax ;~ 01A2:36B7
cs=0x1a2;eip=0x0036ba; 	J(CALL(sub_1d448,0));	// 8398                  call    sub_1D448 ;~ 01A2:36BA
cs=0x1a2;eip=0x0036bd; 	J(CALL(sub_1d7cc,0));	// 8399                  call    sub_1D7CC ;~ 01A2:36BD
loc_136c0:
	// 4933 
cs=0x1a2;eip=0x0036c0; 	T(dx = word_1f3a2;);	// 8403                  mov     dx, ds:word_1F3A2 ;~ 01A2:36C0
cs=0x1a2;eip=0x0036c4; 	T(ax = 3;);	// 8404                  mov     ax, 3 ;~ 01A2:36C4
cs=0x1a2;eip=0x0036c7; 	J(CALL(sub_1410e,0));	// 8405                  call    sub_1410E ;~ 01A2:36C7
cs=0x1a2;eip=0x0036ca; 	T(MOV(cl, *(raddr(ds,di+1))));	// 8406                  mov     cl, [di+1] ;~ 01A2:36CA
cs=0x1a2;eip=0x0036cd; 	T(dx = word_1f380;);	// 8407                  mov     dx, ds:word_1F380 ;~ 01A2:36CD
cs=0x1a2;eip=0x0036d1; 	T(ax = 0x35;);	// 8408                  mov     ax, 35h ; '5' ;~ 01A2:36D1
cs=0x1a2;eip=0x0036d4; 	T(DIV1(dl));	// 8409                  div     dl ;~ 01A2:36D4
cs=0x1a2;eip=0x0036d6; 	T(SUB(cl, al));	// 8410                  sub     cl, al ;~ 01A2:36D6
cs=0x1a2;eip=0x0036d8; 	T(MOV(al, *(raddr(ds,di+4))));	// 8411                  mov     al, [di+4] ;~ 01A2:36D8
cs=0x1a2;eip=0x0036db; 	T(SHR(al, 1));	// 8412                  shr     al, 1 ;~ 01A2:36DB
cs=0x1a2;eip=0x0036dd; 	T(ADD(cl, al));	// 8413                  add     cl, al ;~ 01A2:36DD
cs=0x1a2;eip=0x0036df; 	T(MOV(ch, *(raddr(ds,di+3))));	// 8414                  mov     ch, [di+3] ;~ 01A2:36DF
cs=0x1a2;eip=0x0036e2; 	T(dx = word_1f380;);	// 8415                  mov     dx, ds:word_1F380 ;~ 01A2:36E2
cs=0x1a2;eip=0x0036e6; 	T(ax = 0x25;);	// 8416                  mov     ax, 25h ; '%' ;~ 01A2:36E6
cs=0x1a2;eip=0x0036e9; 	T(DIV1(dl));	// 8417                  div     dl ;~ 01A2:36E9
cs=0x1a2;eip=0x0036eb; 	T(SUB(ch, al));	// 8418                  sub     ch, al ;~ 01A2:36EB
cs=0x1a2;eip=0x0036ed; 	T(MOV(al, *(raddr(ds,di+5))));	// 8419                  mov     al, [di+5] ;~ 01A2:36ED
cs=0x1a2;eip=0x0036f0; 	T(SHR(al, 1));	// 8420                  shr     al, 1 ;~ 01A2:36F0
cs=0x1a2;eip=0x0036f2; 	T(ADD(ch, al));	// 8421                  add     ch, al ;~ 01A2:36F2
loc_136f4:
	// 4934 
cs=0x1a2;eip=0x0036f4; 	T(XOR(ah, ah));	// 8425                  xor     ah, ah ;~ 01A2:36F4
cs=0x1a2;eip=0x0036f6; 	T(al = cl;);	// 8426                  mov     al, cl ;~ 01A2:36F6
cs=0x1a2;eip=0x0036f8; 	X(word_1f37c = ax;);	// 8427                  mov     ds:word_1F37C, ax ;~ 01A2:36F8
cs=0x1a2;eip=0x0036fb; 	T(al = ch;);	// 8428                  mov     al, ch ;~ 01A2:36FB
cs=0x1a2;eip=0x0036fd; 	X(word_1f37e = ax;);	// 8429                  mov     ds:word_1F37E, ax ;~ 01A2:36FD
loc_13700:
	// 4935 
cs=0x1a2;eip=0x003700; 	J(CALL(sub_1d445,0));	// 8432                  call    sub_1D445 ;~ 01A2:3700
cs=0x1a2;eip=0x003703; 	T(ax = seg_offset(seg045););	// 8433                  mov     ax, seg seg045 ;~ 01A2:3703
cs=0x1a2;eip=0x003706; 	T(es = ax;);	// 8434                  mov     es, ax ;~ 01A2:3706
cs=0x1a2;eip=0x003708; 	T(ax = word_1f382;);	// 8436                  mov     ax, ds:word_1F382 ;~ 01A2:3708
cs=0x1a2;eip=0x00370b; 	X(word_6b854 = ax;);	// 8437                  mov     es:word_6B854, ax ;~ 01A2:370B
cs=0x1a2;eip=0x00370f; 	T(ax = word_1f3c0;);	// 8438                  mov     ax, ds:word_1F3C0 ;~ 01A2:370F
cs=0x1a2;eip=0x003712; 	X(*(dw*)(((db*)&off_6b850)+2) = ax;);	// 8439                  mov     word ptr es:off_6B850+2, ax ;~ 01A2:3712
cs=0x1a2;eip=0x003716; 	J(CALL(sub_13806,0));	// 8440                  call    sub_13806 ;~ 01A2:3716
cs=0x1a2;eip=0x003719; 	J(CALL(sub_1d448,0));	// 8441                  call    sub_1D448 ;~ 01A2:3719
loc_1371c:
	// 4936 
cs=0x1a2;eip=0x00371c; 	J(CALL(sub_11043,0));	// 8445                  call    sub_11043 ;~ 01A2:371C
cs=0x1a2;eip=0x00371f; 	T(dl = byte_1f885;);	// 8446                  mov     dl, ds:byte_1F885 ;~ 01A2:371F
cs=0x1a2;eip=0x003723; 	T(OR(dl, dl));	// 8447                  or      dl, dl ;~ 01A2:3723
cs=0x1a2;eip=0x003725; 	J(JZ(loc_13765));	// 8448                  jz      short loc_13765 ;~ 01A2:3725
cs=0x1a2;eip=0x003727; 	T(TEST(dl, 0x80));	// 8449                  test    dl, 80h ;~ 01A2:3727
cs=0x1a2;eip=0x00372a; 	J(JZ(loc_1372f));	// 8450                  jz      short loc_1372F ;~ 01A2:372A
cs=0x1a2;eip=0x00372c; 	J(JMP(loc_137fc));	// 8451                  jmp     loc_137FC ;~ 01A2:372C
loc_1372f:
	// 4937 
cs=0x1a2;eip=0x00372f; 	T(ax = word_1f37c;);	// 8455                  mov     ax, ds:word_1F37C ;~ 01A2:372F
cs=0x1a2;eip=0x003732; 	T(cx = word_1f37e;);	// 8456                  mov     cx, ds:word_1F37E ;~ 01A2:3732
cs=0x1a2;eip=0x003736; 	T(XOR(dh, dh));	// 8457                  xor     dh, dh ;~ 01A2:3736
cs=0x1a2;eip=0x003738; 	T(TEST(dl, 4));	// 8458                  test    dl, 4 ;~ 01A2:3738
cs=0x1a2;eip=0x00373b; 	J(JZ(loc_13740));	// 8459                  jz      short loc_13740 ;~ 01A2:373B
cs=0x1a2;eip=0x00373d; 	T(dh = 1;);	// 8460                  mov     dh, 1 ;~ 01A2:373D
cs=0x1a2;eip=0x00373f; 	T(DEC(ax));	// 8461                  dec     ax ;~ 01A2:373F
loc_13740:
	// 4938 
cs=0x1a2;eip=0x003740; 	T(TEST(dl, 8));	// 8464                  test    dl, 8 ;~ 01A2:3740
cs=0x1a2;eip=0x003743; 	J(JZ(loc_13748));	// 8465                  jz      short loc_13748 ;~ 01A2:3743
cs=0x1a2;eip=0x003745; 	T(INC(ax));	// 8466                  inc     ax ;~ 01A2:3745
cs=0x1a2;eip=0x003746; 	T(dh = 1;);	// 8467                  mov     dh, 1 ;~ 01A2:3746
loc_13748:
	// 4939 
cs=0x1a2;eip=0x003748; 	T(TEST(dl, 1));	// 8470                  test    dl, 1 ;~ 01A2:3748
cs=0x1a2;eip=0x00374b; 	J(JZ(loc_13750));	// 8471                  jz      short loc_13750 ;~ 01A2:374B
cs=0x1a2;eip=0x00374d; 	T(DEC(cx));	// 8472                  dec     cx ;~ 01A2:374D
cs=0x1a2;eip=0x00374e; 	T(dh = 1;);	// 8473                  mov     dh, 1 ;~ 01A2:374E
loc_13750:
	// 4940 
cs=0x1a2;eip=0x003750; 	T(TEST(dl, 2));	// 8476                  test    dl, 2 ;~ 01A2:3750
cs=0x1a2;eip=0x003753; 	J(JZ(loc_13758));	// 8477                  jz      short loc_13758 ;~ 01A2:3753
cs=0x1a2;eip=0x003755; 	T(INC(cx));	// 8478                  inc     cx ;~ 01A2:3755
cs=0x1a2;eip=0x003756; 	T(dh = 1;);	// 8479                  mov     dh, 1 ;~ 01A2:3756
loc_13758:
	// 4941 
cs=0x1a2;eip=0x003758; 	T(OR(dh, dh));	// 8482                  or      dh, dh ;~ 01A2:3758
cs=0x1a2;eip=0x00375a; 	J(JZ(loc_13765));	// 8483                  jz      short loc_13765 ;~ 01A2:375A
cs=0x1a2;eip=0x00375c; 	X(word_1f37c = ax;);	// 8484                  mov     ds:word_1F37C, ax ;~ 01A2:375C
cs=0x1a2;eip=0x00375f; 	X(word_1f37e = cx;);	// 8485                  mov     ds:word_1F37E, cx ;~ 01A2:375F
cs=0x1a2;eip=0x003763; 	J(JMP(loc_13700));	// 8486                  jmp     short loc_13700 ;~ 01A2:3763
loc_13765:
	// 4942 
cs=0x1a2;eip=0x003765; 	X(PUSH(ax));	// 8491                  push    ax ;~ 01A2:3765
cs=0x1a2;eip=0x003766; 	X(PUSH(bx));	// 8492                  push    bx ;~ 01A2:3766
cs=0x1a2;eip=0x003767; 	X(PUSH(cx));	// 8493                  push    cx ;~ 01A2:3767
cs=0x1a2;eip=0x003768; 	X(PUSH(dx));	// 8494                  push    dx ;~ 01A2:3768
cs=0x1a2;eip=0x003769; 	X(PUSH(bp));	// 8495                  push    bp ;~ 01A2:3769
cs=0x1a2;eip=0x00376a; 	X(PUSH(si));	// 8496                  push    si ;~ 01A2:376A
cs=0x1a2;eip=0x00376b; 	X(PUSH(di));	// 8497                  push    di ;~ 01A2:376B
cs=0x1a2;eip=0x00376c; 	X(PUSH(es));	// 8498                  push    es ;~ 01A2:376C
cs=0x1a2;eip=0x00376d; 	X(PUSH(ds));	// 8499                  push    ds ;~ 01A2:376D
cs=0x1a2;eip=0x00376e; 	J(CALL(sub_1c566,0));	// 8500                  call    sub_1C566 ;~ 01A2:376E
cs=0x1a2;eip=0x003771; 	J(JNZ(loc_13779));	// 8501                  jnz     short loc_13779 ;~ 01A2:3771
cs=0x1a2;eip=0x003773; 	J(CALL(sub_1c5dd,0));	// 8502                  call    sub_1C5DD ;~ 01A2:3773
cs=0x1a2;eip=0x003776; 	X(byte_1f886 = al;);	// 8503                  mov     ds:byte_1F886, al ;~ 01A2:3776
loc_13779:
	// 4943 
cs=0x1a2;eip=0x003779; 	X(POP(ds));	// 8506                  pop     ds ;~ 01A2:3779
cs=0x1a2;eip=0x00377a; 	X(POP(es));	// 8507                  pop     es ;~ 01A2:377A
cs=0x1a2;eip=0x00377b; 	X(POP(di));	// 8508                  pop     di ;~ 01A2:377B
cs=0x1a2;eip=0x00377c; 	X(POP(si));	// 8509                  pop     si ;~ 01A2:377C
cs=0x1a2;eip=0x00377d; 	X(POP(bp));	// 8510                  pop     bp ;~ 01A2:377D
cs=0x1a2;eip=0x00377e; 	X(POP(dx));	// 8511                  pop     dx ;~ 01A2:377E
cs=0x1a2;eip=0x00377f; 	X(POP(cx));	// 8512                  pop     cx ;~ 01A2:377F
cs=0x1a2;eip=0x003780; 	X(POP(bx));	// 8513                  pop     bx ;~ 01A2:3780
cs=0x1a2;eip=0x003781; 	X(POP(ax));	// 8514                  pop     ax ;~ 01A2:3781
cs=0x1a2;eip=0x003782; 	T(dl = byte_1f886;);	// 8515                  mov     dl, ds:byte_1F886 ;~ 01A2:3782
cs=0x1a2;eip=0x003786; 	T(OR(dl, dl));	// 8516                  or      dl, dl ;~ 01A2:3786
cs=0x1a2;eip=0x003788; 	J(JZ(loc_1371c));	// 8517                  jz      short loc_1371C ;~ 01A2:3788
cs=0x1a2;eip=0x00378a; 	J(CALL(sub_19d33,0));	// 8518                  call    sub_19D33 ;~ 01A2:378A
cs=0x1a2;eip=0x00378d; 	T(ax = word_1f380;);	// 8519                  mov     ax, ds:word_1F380 ;~ 01A2:378D
cs=0x1a2;eip=0x003790; 	T(CMP(dl, 0x0D));	// 8520                  cmp     dl, 0Dh ;~ 01A2:3790
cs=0x1a2;eip=0x003793; 	J(JNZ(loc_137bf));	// 8521                  jnz     short loc_137BF ;~ 01A2:3793
cs=0x1a2;eip=0x003795; 	T(CMP(al, 0x0A));	// 8522                  cmp     al, 0Ah ;~ 01A2:3795
cs=0x1a2;eip=0x003797; 	J(JGE(loc_1371c));	// 8523                  jge     short loc_1371C ;~ 01A2:3797
cs=0x1a2;eip=0x003799; 	T(cx = word_1f37c;);	// 8524                  mov     cx, ds:word_1F37C ;~ 01A2:3799
cs=0x1a2;eip=0x00379d; 	T(dx = word_1f380;);	// 8525                  mov     dx, ds:word_1F380 ;~ 01A2:379D
cs=0x1a2;eip=0x0037a1; 	T(ax = 0x1A;);	// 8526                  mov     ax, 1Ah ;~ 01A2:37A1
cs=0x1a2;eip=0x0037a4; 	T(DIV1(dl));	// 8527                  div     dl ;~ 01A2:37A4
cs=0x1a2;eip=0x0037a6; 	T(ADD(cl, al));	// 8528                  add     cl, al ;~ 01A2:37A6
cs=0x1a2;eip=0x0037a8; 	T(ax = word_1f37e;);	// 8529                  mov     ax, ds:word_1F37E ;~ 01A2:37A8
cs=0x1a2;eip=0x0037ab; 	T(ch = al;);	// 8530                  mov     ch, al ;~ 01A2:37AB
cs=0x1a2;eip=0x0037ad; 	T(dx = word_1f380;);	// 8531                  mov     dx, ds:word_1F380 ;~ 01A2:37AD
cs=0x1a2;eip=0x0037b1; 	T(ax = 0x12;);	// 8532                  mov     ax, 12h ;~ 01A2:37B1
cs=0x1a2;eip=0x0037b4; 	T(DIV1(dl));	// 8533                  div     dl ;~ 01A2:37B4
cs=0x1a2;eip=0x0037b6; 	T(ADD(ch, al));	// 8534                  add     ch, al ;~ 01A2:37B6
cs=0x1a2;eip=0x0037b8; 	X(INC(word_1f380));	// 8535                  inc     ds:word_1F380 ;~ 01A2:37B8
cs=0x1a2;eip=0x0037bc; 	J(JMP(loc_136f4));	// 8536                  jmp     loc_136F4 ;~ 01A2:37BC
loc_137bf:
	// 4944 
cs=0x1a2;eip=0x0037bf; 	T(CMP(dl, 0x0C));	// 8540                  cmp     dl, 0Ch ;~ 01A2:37BF
cs=0x1a2;eip=0x0037c2; 	J(JNZ(loc_137f1));	// 8541                  jnz     short loc_137F1 ;~ 01A2:37C2
cs=0x1a2;eip=0x0037c4; 	T(CMP(al, 1));	// 8542                  cmp     al, 1 ;~ 01A2:37C4
cs=0x1a2;eip=0x0037c6; 	J(JNZ(loc_137cb));	// 8543                  jnz     short loc_137CB ;~ 01A2:37C6
cs=0x1a2;eip=0x0037c8; 	J(JMP(loc_1371c));	// 8544                  jmp     loc_1371C ;~ 01A2:37C8
loc_137cb:
	// 4945 
cs=0x1a2;eip=0x0037cb; 	X(DEC(word_1f380));	// 8548                  dec     ds:word_1F380 ;~ 01A2:37CB
cs=0x1a2;eip=0x0037cf; 	T(cx = word_1f37c;);	// 8549                  mov     cx, ds:word_1F37C ;~ 01A2:37CF
cs=0x1a2;eip=0x0037d3; 	T(dx = word_1f380;);	// 8550                  mov     dx, ds:word_1F380 ;~ 01A2:37D3
cs=0x1a2;eip=0x0037d7; 	T(ax = 0x1A;);	// 8551                  mov     ax, 1Ah ;~ 01A2:37D7
cs=0x1a2;eip=0x0037da; 	T(DIV1(dl));	// 8552                  div     dl ;~ 01A2:37DA
cs=0x1a2;eip=0x0037dc; 	T(SUB(cl, al));	// 8553                  sub     cl, al ;~ 01A2:37DC
cs=0x1a2;eip=0x0037de; 	T(ax = word_1f37e;);	// 8554                  mov     ax, ds:word_1F37E ;~ 01A2:37DE
cs=0x1a2;eip=0x0037e1; 	T(ch = al;);	// 8555                  mov     ch, al ;~ 01A2:37E1
cs=0x1a2;eip=0x0037e3; 	T(dx = word_1f380;);	// 8556                  mov     dx, ds:word_1F380 ;~ 01A2:37E3
cs=0x1a2;eip=0x0037e7; 	T(ax = 0x12;);	// 8557                  mov     ax, 12h ;~ 01A2:37E7
cs=0x1a2;eip=0x0037ea; 	T(DIV1(dl));	// 8558                  div     dl ;~ 01A2:37EA
cs=0x1a2;eip=0x0037ec; 	T(SUB(ch, al));	// 8559                  sub     ch, al ;~ 01A2:37EC
cs=0x1a2;eip=0x0037ee; 	J(JMP(loc_136f4));	// 8560                  jmp     loc_136F4 ;~ 01A2:37EE
loc_137f1:
	// 4946 
cs=0x1a2;eip=0x0037f1; 	T(CMP(dl, 0x3C));	// 8564                  cmp     dl, 3Ch ; '<' ;~ 01A2:37F1
cs=0x1a2;eip=0x0037f4; 	J(JNZ(loc_137f9));	// 8565                  jnz     short loc_137F9 ;~ 01A2:37F4
cs=0x1a2;eip=0x0037f6; 	J(JMP(loc_136c0));	// 8566                  jmp     loc_136C0 ;~ 01A2:37F6
loc_137f9:
	// 4947 
cs=0x1a2;eip=0x0037f9; 	J(JMP(loc_1371c));	// 8570                  jmp     loc_1371C ;~ 01A2:37F9
loc_137fc:
	// 4948 
cs=0x1a2;eip=0x0037fc; 	J(CALL(sub_19d8e,0));	// 8574                  call    sub_19D8E ;~ 01A2:37FC
cs=0x1a2;eip=0x0037ff; 	J(CALL(sub_13514,0));	// 8575                  call    sub_13514 ;~ 01A2:37FF
cs=0x1a2;eip=0x003802; 	J(CALL(sub_11685,0));	// 8577                  call    sub_11685 ;~ 01A2:3802
cs=0x1a2;eip=0x003805; 	J(RETN(0));	// 8578                  retn ;~ 01A2:3805

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_136c0: 	goto loc_136c0;
        case m2c::kloc_136f4: 	goto loc_136f4;
        case m2c::kloc_13700: 	goto loc_13700;
        case m2c::kloc_1371c: 	goto loc_1371c;
        case m2c::kloc_1372f: 	goto loc_1372f;
        case m2c::kloc_13740: 	goto loc_13740;
        case m2c::kloc_13748: 	goto loc_13748;
        case m2c::kloc_13750: 	goto loc_13750;
        case m2c::kloc_13758: 	goto loc_13758;
        case m2c::kloc_13765: 	goto loc_13765;
        case m2c::kloc_13779: 	goto loc_13779;
        case m2c::kloc_137bf: 	goto loc_137bf;
        case m2c::kloc_137cb: 	goto loc_137cb;
        case m2c::kloc_137f1: 	goto loc_137f1;
        case m2c::kloc_137f9: 	goto loc_137f9;
        case m2c::kloc_137fc: 	goto loc_137fc;
        case m2c::ksub_1369f: 	goto sub_1369f;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13806(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13806:
    _begin:
cs=0x1a2;eip=0x003806; 	X(byte_1f797 = 1;);	// 8587                  mov     ds:byte_1F797, 1 ;~ 01A2:3806
cs=0x1a2;eip=0x00380b; 	T(ax = 0x60;);	// 8588                  mov     ax, 60h ; '`' ;~ 01A2:380B
cs=0x1a2;eip=0x00380e; 	T(dl = 0x1E;);	// 8589                  mov     dl, 1Eh ;~ 01A2:380E
cs=0x1a2;eip=0x003810; 	T(cx = 0x0E;);	// 8590                  mov     cx, 0Eh ;~ 01A2:3810
cs=0x1a2;eip=0x003813; 	T(dh = 9;);	// 8591                  mov     dh, 9 ;~ 01A2:3813
cs=0x1a2;eip=0x003815; 	J(CALL(sub_18a87,0));	// 8592                  call    sub_18A87 ;~ 01A2:3815
cs=0x1a2;eip=0x003818; 	T(CMP(byte_1f87b, 0));	// 8593                  cmp     ds:byte_1F87B, 0 ;~ 01A2:3818
cs=0x1a2;eip=0x00381d; 	J(JNZ(loc_1383f));	// 8594                  jnz     short loc_1383F ;~ 01A2:381D
cs=0x1a2;eip=0x00381f; 	T(dx = 0x2A;);	// 8595                  mov     dx, 2Ah ; '*' ;~ 01A2:381F
cs=0x1a2;eip=0x003822; 	J(CALL(sub_175af,0));	// 8596                  call    sub_175AF ;~ 01A2:3822
cs=0x1a2;eip=0x003825; 	J(CALL(sub_19c41,0));	// 8597                  call    sub_19C41 ;~ 01A2:3825
cs=0x1a2;eip=0x003828; 	T(si = di;);	// 8598                  mov     si, di ;~ 01A2:3828
cs=0x1a2;eip=0x00382a; 	T(ADD(si, dx));	// 8599                  add     si, dx ;~ 01A2:382A
cs=0x1a2;eip=0x00382c; 	T(dx = word_1f6f2;);	// 8600                  mov     dx, ds:word_1F6F2 ;~ 01A2:382C
cs=0x1a2;eip=0x003830; 	T(cl = 0x0FF;);	// 8601                  mov     cl, 0FFh ;~ 01A2:3830
cs=0x1a2;eip=0x003832; 	J(CALL(sub_19ba0,m2c::kloc_19bb7));	// 8602                  call    loc_19BB7 ;~ 01A2:3832
cs=0x1a2;eip=0x003835; 	T(ax = 0x6B;);	// 8603                  mov     ax, 6Bh ; 'k' ;~ 01A2:3835
cs=0x1a2;eip=0x003838; 	T(dh = 0x74;);	// 8604                  mov     dh, 74h ; 't' ;~ 01A2:3838
cs=0x1a2;eip=0x00383a; 	T(si = di;);	// 8605                  mov     si, di ;~ 01A2:383A
cs=0x1a2;eip=0x00383c; 	J(CALL(sub_18738,m2c::kloc_18776));	// 8606                  call    loc_18776 ;~ 01A2:383C
loc_1383f:
	// 4949 
cs=0x1a2;eip=0x00383f; 	T(al = 3;);	// 8609                  mov     al, 3 ;~ 01A2:383F
cs=0x1a2;eip=0x003841; 	T(dx = 0x0FFFF;);	// 8610                  mov     dx, 0FFFFh ;~ 01A2:3841
cs=0x1a2;eip=0x003844; 	X(PUSH(dx));	// 8611                  push    dx ;~ 01A2:3844
loc_13845:
	// 4950 
cs=0x1a2;eip=0x003845; 	X(POP(dx));	// 8615                  pop     dx ;~ 01A2:3845
cs=0x1a2;eip=0x003846; 	T(INC(dx));	// 8616                  inc     dx ;~ 01A2:3846
cs=0x1a2;eip=0x003847; 	J(CALL(sub_1415c,0));	// 8617                  call    sub_1415C ;~ 01A2:3847
cs=0x1a2;eip=0x00384a; 	T(OR(dx, dx));	// 8618                  or      dx, dx ;~ 01A2:384A
cs=0x1a2;eip=0x00384c; 	J(JS(loc_13873));	// 8619                  js      short loc_13873 ;~ 01A2:384C
cs=0x1a2;eip=0x00384e; 	X(PUSH(dx));	// 8620                  push    dx ;~ 01A2:384E
cs=0x1a2;eip=0x00384f; 	T(CMP(byte_1f839, 0));	// 8621                  cmp     ds:byte_1F839, 0 ;~ 01A2:384F
cs=0x1a2;eip=0x003854; 	J(JNZ(loc_1385e));	// 8622                  jnz     short loc_1385E ;~ 01A2:3854
cs=0x1a2;eip=0x003856; 	T(TEST(*(raddr(ds,di+0x17)), 0x40));	// 8623                  test    byte ptr [di+17h], 40h ;~ 01A2:3856
cs=0x1a2;eip=0x00385a; 	J(JZ(loc_13845));	// 8624                  jz      short loc_13845 ;~ 01A2:385A
cs=0x1a2;eip=0x00385c; 	J(JMP(loc_13864));	// 8625                  jmp     short loc_13864 ;~ 01A2:385C
loc_1385e:
	// 4951 
cs=0x1a2;eip=0x00385e; 	T(TEST(*(raddr(ds,di+0x17)), 0x80));	// 8629                  test    byte ptr [di+17h], 80h ;~ 01A2:385E
cs=0x1a2;eip=0x003862; 	J(JNZ(loc_13845));	// 8630                  jnz     short loc_13845 ;~ 01A2:3862
loc_13864:
	// 4952 
cs=0x1a2;eip=0x003864; 	T(bl = 4;);	// 8633                  mov     bl, 4 ;~ 01A2:3864
cs=0x1a2;eip=0x003866; 	T(CMP(dx, word_1f3a2));	// 8634                  cmp     dx, ds:word_1F3A2 ;~ 01A2:3866
cs=0x1a2;eip=0x00386a; 	J(JNZ(loc_1386e));	// 8635                  jnz     short loc_1386E ;~ 01A2:386A
cs=0x1a2;eip=0x00386c; 	T(bl = 0x0A;);	// 8636                  mov     bl, 0Ah ;~ 01A2:386C
loc_1386e:
	// 4953 
cs=0x1a2;eip=0x00386e; 	J(CALL(sub_138c3,0));	// 8639                  call    sub_138C3 ;~ 01A2:386E
cs=0x1a2;eip=0x003871; 	J(JMP(loc_13845));	// 8640                  jmp     short loc_13845 ;~ 01A2:3871
loc_13873:
	// 4954 
cs=0x1a2;eip=0x003873; 	T(al = 4;);	// 8644                  mov     al, 4 ;~ 01A2:3873
cs=0x1a2;eip=0x003875; 	T(XOR(dx, dx));	// 8645                  xor     dx, dx ;~ 01A2:3875
cs=0x1a2;eip=0x003877; 	X(PUSH(dx));	// 8646                  push    dx ;~ 01A2:3877
loc_13878:
	// 4955 
cs=0x1a2;eip=0x003878; 	X(POP(dx));	// 8650                  pop     dx ;~ 01A2:3878
cs=0x1a2;eip=0x003879; 	J(CALL(sub_1415c,0));	// 8651                  call    sub_1415C ;~ 01A2:3879
cs=0x1a2;eip=0x00387c; 	T(OR(dx, dx));	// 8652                  or      dx, dx ;~ 01A2:387C
cs=0x1a2;eip=0x00387e; 	J(JS(locret_1389e));	// 8653                  js      short locret_1389E ;~ 01A2:387E
cs=0x1a2;eip=0x003880; 	T(INC(dx));	// 8654                  inc     dx ;~ 01A2:3880
cs=0x1a2;eip=0x003881; 	X(PUSH(dx));	// 8655                  push    dx ;~ 01A2:3881
cs=0x1a2;eip=0x003882; 	T(CMP(byte_1f839, 0));	// 8656                  cmp     ds:byte_1F839, 0 ;~ 01A2:3882
cs=0x1a2;eip=0x003887; 	J(JNZ(loc_13891));	// 8657                  jnz     short loc_13891 ;~ 01A2:3887
cs=0x1a2;eip=0x003889; 	T(TEST(*(raddr(ds,di+7)), 8));	// 8658                  test    byte ptr [di+7], 8 ;~ 01A2:3889
cs=0x1a2;eip=0x00388d; 	J(JZ(loc_13878));	// 8659                  jz      short loc_13878 ;~ 01A2:388D
cs=0x1a2;eip=0x00388f; 	J(JMP(loc_13897));	// 8660                  jmp     short loc_13897 ;~ 01A2:388F
loc_13891:
	// 4956 
cs=0x1a2;eip=0x003891; 	T(TEST(*(raddr(ds,di+7)), 0x10));	// 8664                  test    byte ptr [di+7], 10h ;~ 01A2:3891
cs=0x1a2;eip=0x003895; 	J(JNZ(loc_13878));	// 8665                  jnz     short loc_13878 ;~ 01A2:3895
loc_13897:
	// 4957 
cs=0x1a2;eip=0x003897; 	T(bl = 7;);	// 8668                  mov     bl, 7 ;~ 01A2:3897
cs=0x1a2;eip=0x003899; 	J(CALL(sub_1389f,0));	// 8669                  call    sub_1389F ;~ 01A2:3899
cs=0x1a2;eip=0x00389c; 	J(JMP(loc_13878));	// 8670                  jmp     short loc_13878 ;~ 01A2:389C
locret_1389e:
	// 4958 
cs=0x1a2;eip=0x00389e; 	J(RETN(0));	// 8674                  retn ;~ 01A2:389E

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1383f: 	goto loc_1383f;
        case m2c::kloc_13845: 	goto loc_13845;
        case m2c::kloc_1385e: 	goto loc_1385e;
        case m2c::kloc_13864: 	goto loc_13864;
        case m2c::kloc_1386e: 	goto loc_1386e;
        case m2c::kloc_13873: 	goto loc_13873;
        case m2c::kloc_13878: 	goto loc_13878;
        case m2c::kloc_13891: 	goto loc_13891;
        case m2c::kloc_13897: 	goto loc_13897;
        case m2c::klocret_1389e: 	goto locret_1389e;
        case m2c::ksub_13806: 	goto sub_13806;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1389f(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1389f:
    _begin:
cs=0x1a2;eip=0x00389f; 	X(PUSH(ax));	// 8682                  push    ax ;~ 01A2:389F
cs=0x1a2;eip=0x0038a0; 	X(PUSH(bx));	// 8683                  push    bx ;~ 01A2:38A0
cs=0x1a2;eip=0x0038a1; 	X(PUSH(cx));	// 8684                  push    cx ;~ 01A2:38A1
cs=0x1a2;eip=0x0038a2; 	X(PUSH(dx));	// 8685                  push    dx ;~ 01A2:38A2
cs=0x1a2;eip=0x0038a3; 	X(PUSH(bp));	// 8686                  push    bp ;~ 01A2:38A3
cs=0x1a2;eip=0x0038a4; 	X(PUSH(si));	// 8687                  push    si ;~ 01A2:38A4
cs=0x1a2;eip=0x0038a5; 	X(PUSH(di));	// 8688                  push    di ;~ 01A2:38A5
cs=0x1a2;eip=0x0038a6; 	X(PUSH(es));	// 8689                  push    es ;~ 01A2:38A6
cs=0x1a2;eip=0x0038a7; 	X(PUSH(ds));	// 8690                  push    ds ;~ 01A2:38A7
cs=0x1a2;eip=0x0038a8; 	T(XOR(ah, ah));	// 8691                  xor     ah, ah ;~ 01A2:38A8
cs=0x1a2;eip=0x0038aa; 	T(MOV(al, *(raddr(ds,di))));	// 8692                  mov     al, [di] ;~ 01A2:38AA
cs=0x1a2;eip=0x0038ac; 	T(MOV(dl, *(raddr(ds,di+1))));	// 8693                  mov     dl, [di+1] ;~ 01A2:38AC
cs=0x1a2;eip=0x0038af; 	T(cx = word_1f380;);	// 8694                  mov     cx, ds:word_1F380 ;~ 01A2:38AF
cs=0x1a2;eip=0x0038b3; 	T(dh = cl;);	// 8695                  mov     dh, cl ;~ 01A2:38B3
cs=0x1a2;eip=0x0038b5; 	T(CMP(*(raddr(ds,di+5)), 1));	// 8696                  cmp     byte ptr [di+5], 1 ;~ 01A2:38B5
cs=0x1a2;eip=0x0038b9; 	J(JZ(loc_138bf));	// 8697                  jz      short loc_138BF ;~ 01A2:38B9
cs=0x1a2;eip=0x0038bb; 	T(ADD(dh, dh));	// 8698                  add     dh, dh ;~ 01A2:38BB
cs=0x1a2;eip=0x0038bd; 	J(return sub_138c3(m2c::kloc_138e8, _state););	// 8699                  jmp     short loc_138E8 ;~ 01A2:38BD
loc_138bf:
	// 4959 
cs=0x1a2;eip=0x0038bf; 	T(ADD(cx, cx));	// 8703                  add     cx, cx ;~ 01A2:38BF
cs=0x1a2;eip=0x0038c1; 	J(return sub_138c3(m2c::kloc_138e8, _state););	// 8704                  jmp     short loc_138E8 ;~ 01A2:38C1

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_138bf: 	goto loc_138bf;
        case m2c::ksub_1389f: 	goto sub_1389f;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_138c3(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_138c3:
    _begin:
cs=0x1a2;eip=0x0038c3; 	X(PUSH(ax));	// 8712                  push    ax ;~ 01A2:38C3
cs=0x1a2;eip=0x0038c4; 	X(PUSH(bx));	// 8713                  push    bx ;~ 01A2:38C4
cs=0x1a2;eip=0x0038c5; 	X(PUSH(cx));	// 8714                  push    cx ;~ 01A2:38C5
cs=0x1a2;eip=0x0038c6; 	X(PUSH(dx));	// 8715                  push    dx ;~ 01A2:38C6
cs=0x1a2;eip=0x0038c7; 	X(PUSH(bp));	// 8716                  push    bp ;~ 01A2:38C7
cs=0x1a2;eip=0x0038c8; 	X(PUSH(si));	// 8717                  push    si ;~ 01A2:38C8
cs=0x1a2;eip=0x0038c9; 	X(PUSH(di));	// 8718                  push    di ;~ 01A2:38C9
cs=0x1a2;eip=0x0038ca; 	X(PUSH(es));	// 8719                  push    es ;~ 01A2:38CA
cs=0x1a2;eip=0x0038cb; 	X(PUSH(ds));	// 8720                  push    ds ;~ 01A2:38CB
cs=0x1a2;eip=0x0038cc; 	T(MOV(dl, *(raddr(ds,di+3))));	// 8721                  mov     dl, [di+3] ;~ 01A2:38CC
cs=0x1a2;eip=0x0038cf; 	T(MOV(cl, *(raddr(ds,di+4))));	// 8722                  mov     cl, [di+4] ;~ 01A2:38CF
cs=0x1a2;eip=0x0038d2; 	T(MOV(dh, *(raddr(ds,di+5))));	// 8723                  mov     dh, [di+5] ;~ 01A2:38D2
cs=0x1a2;eip=0x0038d5; 	T(ax = word_1f380;);	// 8724                  mov     ax, ds:word_1F380 ;~ 01A2:38D5
cs=0x1a2;eip=0x0038d8; 	T(MUL1_1(cl));	// 8725                  mul     cl ;~ 01A2:38D8
cs=0x1a2;eip=0x0038da; 	T(cx = ax;);	// 8726                  mov     cx, ax ;~ 01A2:38DA
cs=0x1a2;eip=0x0038dc; 	T(ax = word_1f380;);	// 8727                  mov     ax, ds:word_1F380 ;~ 01A2:38DC
cs=0x1a2;eip=0x0038df; 	T(MUL1_1(dh));	// 8728                  mul     dh ;~ 01A2:38DF
cs=0x1a2;eip=0x0038e1; 	T(dh = al;);	// 8729                  mov     dh, al ;~ 01A2:38E1
cs=0x1a2;eip=0x0038e3; 	T(MOV(al, *(raddr(ds,di+1))));	// 8730                  mov     al, [di+1] ;~ 01A2:38E3
cs=0x1a2;eip=0x0038e6; 	T(XOR(ah, ah));	// 8731                  xor     ah, ah ;~ 01A2:38E6
loc_138e8:
	// 4960 
cs=0x1a2;eip=0x0038e8; 	X(byte_1f85f = dh;);	// 8735                  mov     ds:byte_1F85F, dh ;~ 01A2:38E8
cs=0x1a2;eip=0x0038ec; 	T(SUB(ax, word_1f37c));	// 8736                  sub     ax, ds:word_1F37C ;~ 01A2:38EC
cs=0x1a2;eip=0x0038f0; 	T(XCHG(ax, dx));	// 8737                  xchg    ax, dx ;~ 01A2:38F0
cs=0x1a2;eip=0x0038f1; 	T(XOR(ah, ah));	// 8738                  xor     ah, ah ;~ 01A2:38F1
cs=0x1a2;eip=0x0038f3; 	T(SUB(ax, word_1f37e));	// 8739                  sub     ax, ds:word_1F37E ;~ 01A2:38F3
cs=0x1a2;eip=0x0038f7; 	X(PUSH(cx));	// 8740                  push    cx ;~ 01A2:38F7
cs=0x1a2;eip=0x0038f8; 	T(cx = word_1f380;);	// 8741                  mov     cx, ds:word_1F380 ;~ 01A2:38F8
cs=0x1a2;eip=0x0038fc; 	T(IMUL1_1(cl));	// 8742                  imul    cl ;~ 01A2:38FC
cs=0x1a2;eip=0x0038fe; 	T(XCHG(ax, dx));	// 8743                  xchg    ax, dx ;~ 01A2:38FE
cs=0x1a2;eip=0x0038ff; 	T(cx = word_1f380;);	// 8744                  mov     cx, ds:word_1F380 ;~ 01A2:38FF
cs=0x1a2;eip=0x003903; 	T(IMUL1_1(cl));	// 8745                  imul    cl ;~ 01A2:3903
cs=0x1a2;eip=0x003905; 	X(POP(cx));	// 8746                  pop     cx ;~ 01A2:3905
cs=0x1a2;eip=0x003906; 	T(ADD(ax, 0x6B));	// 8747                  add     ax, 6Bh ; 'k' ;~ 01A2:3906
cs=0x1a2;eip=0x003909; 	T(ADD(dx, 0x29));	// 8748                  add     dx, 29h ; ')' ;~ 01A2:3909
cs=0x1a2;eip=0x00390c; 	T(ADD(cx, ax));	// 8749                  add     cx, ax ;~ 01A2:390C
cs=0x1a2;eip=0x00390e; 	X(PUSH(ax));	// 8750                  push    ax ;~ 01A2:390E
cs=0x1a2;eip=0x00390f; 	T(CMP(dx, 0x73));	// 8751                  cmp     dx, 73h ; 's' ;~ 01A2:390F
cs=0x1a2;eip=0x003912; 	J(JA(loc_13931));	// 8752                  ja      short loc_13931 ;~ 01A2:3912
cs=0x1a2;eip=0x003914; 	T(al = byte_1f85f;);	// 8753                  mov     al, ds:byte_1F85F ;~ 01A2:3914
cs=0x1a2;eip=0x003917; 	T(XOR(ah, ah));	// 8754                  xor     ah, ah ;~ 01A2:3917
cs=0x1a2;eip=0x003919; 	T(ADD(ax, dx));	// 8755                  add     ax, dx ;~ 01A2:3919
cs=0x1a2;eip=0x00391b; 	T(CMP(ax, 0x29));	// 8756                  cmp     ax, 29h ; ')' ;~ 01A2:391B
cs=0x1a2;eip=0x00391e; 	J(JBE(loc_13931));	// 8757                  jbe     short loc_13931 ;~ 01A2:391E
cs=0x1a2;eip=0x003920; 	T(dh = al;);	// 8758                  mov     dh, al ;~ 01A2:3920
cs=0x1a2;eip=0x003922; 	X(POP(ax));	// 8759                  pop     ax ;~ 01A2:3922
cs=0x1a2;eip=0x003923; 	X(PUSH(ax));	// 8760                  push    ax ;~ 01A2:3923
cs=0x1a2;eip=0x003924; 	T(CMP(ax, 0x0D5));	// 8761                  cmp     ax, 0D5h ;~ 01A2:3924
cs=0x1a2;eip=0x003927; 	J(JA(loc_13931));	// 8762                  ja      short loc_13931 ;~ 01A2:3927
cs=0x1a2;eip=0x003929; 	T(CMP(cx, 0x6B));	// 8763                  cmp     cx, 6Bh ; 'k' ;~ 01A2:3929
cs=0x1a2;eip=0x00392c; 	J(JBE(loc_13931));	// 8764                  jbe     short loc_13931 ;~ 01A2:392C
cs=0x1a2;eip=0x00392e; 	J(CALL(sub_164c9,0));	// 8765                  call    sub_164C9 ;~ 01A2:392E
loc_13931:
	// 4961 
cs=0x1a2;eip=0x003931; 	X(POP(ax));	// 8769                  pop     ax ;~ 01A2:3931
cs=0x1a2;eip=0x003932; 	X(POP(ds));	// 8770                  pop     ds ;~ 01A2:3932
cs=0x1a2;eip=0x003933; 	X(POP(es));	// 8771                  pop     es ;~ 01A2:3933
cs=0x1a2;eip=0x003934; 	X(POP(di));	// 8772                  pop     di ;~ 01A2:3934
cs=0x1a2;eip=0x003935; 	X(POP(si));	// 8773                  pop     si ;~ 01A2:3935
cs=0x1a2;eip=0x003936; 	X(POP(bp));	// 8774                  pop     bp ;~ 01A2:3936
cs=0x1a2;eip=0x003937; 	X(POP(dx));	// 8775                  pop     dx ;~ 01A2:3937
cs=0x1a2;eip=0x003938; 	X(POP(cx));	// 8776                  pop     cx ;~ 01A2:3938
cs=0x1a2;eip=0x003939; 	X(POP(bx));	// 8777                  pop     bx ;~ 01A2:3939
cs=0x1a2;eip=0x00393a; 	X(POP(ax));	// 8778                  pop     ax ;~ 01A2:393A
cs=0x1a2;eip=0x00393b; 	J(RETN(0));	// 8779                  retn ;~ 01A2:393B

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_138e8: 	goto loc_138e8;
        case m2c::kloc_13931: 	goto loc_13931;
        case m2c::ksub_138c3: 	goto sub_138c3;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1393c(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1393c:
    _begin:
cs=0x1a2;eip=0x00393c; 	X(byte_1f853 = 0;);	// 8789                  mov     ds:byte_1F853, 0 ;~ 01A2:393C
loc_13941:
	// 4962 
cs=0x1a2;eip=0x003941; 	J(CALL(sub_1897f,0));	// 8793                  call    sub_1897F ;~ 01A2:3941
cs=0x1a2;eip=0x003944; 	J(CALL(sub_11043,0));	// 8794                  call    sub_11043 ;~ 01A2:3944
cs=0x1a2;eip=0x003947; 	T(al = byte_1f885;);	// 8795                  mov     al, ds:byte_1F885 ;~ 01A2:3947
cs=0x1a2;eip=0x00394a; 	T(OR(al, al));	// 8796                  or      al, al ;~ 01A2:394A
cs=0x1a2;eip=0x00394c; 	J(JZ(sub_1393c));	// 8797                  jz      short sub_1393C ;~ 01A2:394C
cs=0x1a2;eip=0x00394e; 	X(DEC(byte_1f853));	// 8798                  dec     ds:byte_1F853 ;~ 01A2:394E
cs=0x1a2;eip=0x003952; 	J(JNS(loc_13941));	// 8799                  jns     short loc_13941 ;~ 01A2:3952
cs=0x1a2;eip=0x003954; 	X(byte_1f853 = 0x0B;);	// 8800                  mov     ds:byte_1F853, 0Bh ;~ 01A2:3954
cs=0x1a2;eip=0x003959; 	T(TEST(al, 1));	// 8801                  test    al, 1 ;~ 01A2:3959
cs=0x1a2;eip=0x00395b; 	J(JZ(loc_13974));	// 8802                  jz      short loc_13974 ;~ 01A2:395B
cs=0x1a2;eip=0x00395d; 	T(dx = word_1f3d2;);	// 8803                  mov     dx, ds:word_1F3D2 ;~ 01A2:395D
cs=0x1a2;eip=0x003961; 	T(DEC(dx));	// 8804                  dec     dx ;~ 01A2:3961
cs=0x1a2;eip=0x003962; 	J(JGE(loc_13969));	// 8805                  jge     short loc_13969 ;~ 01A2:3962
loc_13964:
	// 4963 
cs=0x1a2;eip=0x003964; 	T(dx = word_1f710;);	// 8808                  mov     dx, ds:word_1F710 ;~ 01A2:3964
cs=0x1a2;eip=0x003968; 	T(DEC(dx));	// 8809                  dec     dx ;~ 01A2:3968
loc_13969:
	// 4964 
cs=0x1a2;eip=0x003969; 	T(al = 8;);	// 8812                  mov     al, 8 ;~ 01A2:3969
cs=0x1a2;eip=0x00396b; 	J(CALL(sub_141ef,0));	// 8813                  call    sub_141EF ;~ 01A2:396B
cs=0x1a2;eip=0x00396e; 	T(OR(dx, dx));	// 8814                  or      dx, dx ;~ 01A2:396E
cs=0x1a2;eip=0x003970; 	J(JNS(loc_13993));	// 8815                  jns     short loc_13993 ;~ 01A2:3970
cs=0x1a2;eip=0x003972; 	J(JMP(loc_13964));	// 8816                  jmp     short loc_13964 ;~ 01A2:3972
loc_13974:
	// 4965 
cs=0x1a2;eip=0x003974; 	T(TEST(al, 2));	// 8820                  test    al, 2 ;~ 01A2:3974
cs=0x1a2;eip=0x003976; 	J(JZ(loc_139b0));	// 8821                  jz      short loc_139B0 ;~ 01A2:3976
cs=0x1a2;eip=0x003978; 	T(dx = word_1f3d2;);	// 8822                  mov     dx, ds:word_1F3D2 ;~ 01A2:3978
cs=0x1a2;eip=0x00397c; 	T(INC(dx));	// 8823                  inc     dx ;~ 01A2:397C
cs=0x1a2;eip=0x00397d; 	T(CMP(dx, word_1f710));	// 8824                  cmp     dx, ds:word_1F710 ;~ 01A2:397D
cs=0x1a2;eip=0x003981; 	J(JZ(loc_1398c));	// 8825                  jz      short loc_1398C ;~ 01A2:3981
cs=0x1a2;eip=0x003983; 	T(al = 8;);	// 8826                  mov     al, 8 ;~ 01A2:3983
cs=0x1a2;eip=0x003985; 	J(CALL(sub_1415c,0));	// 8827                  call    sub_1415C ;~ 01A2:3985
cs=0x1a2;eip=0x003988; 	T(OR(dx, dx));	// 8828                  or      dx, dx ;~ 01A2:3988
cs=0x1a2;eip=0x00398a; 	J(JNS(loc_13993));	// 8829                  jns     short loc_13993 ;~ 01A2:398A
loc_1398c:
	// 4966 
cs=0x1a2;eip=0x00398c; 	T(XOR(dx, dx));	// 8832                  xor     dx, dx ;~ 01A2:398C
cs=0x1a2;eip=0x00398e; 	T(al = 8;);	// 8833                  mov     al, 8 ;~ 01A2:398E
cs=0x1a2;eip=0x003990; 	J(CALL(sub_1415c,0));	// 8834                  call    sub_1415C ;~ 01A2:3990
loc_13993:
	// 4967 
cs=0x1a2;eip=0x003993; 	X(word_1f3d2 = dx;);	// 8838                  mov     ds:word_1F3D2, dx ;~ 01A2:3993
cs=0x1a2;eip=0x003997; 	T(MOV(bx, *(dw*)(raddr(ds,di))));	// 8839                  mov     bx, [di] ;~ 01A2:3997
cs=0x1a2;eip=0x003999; 	T(CMP(bx, word_1f3d0));	// 8840                  cmp     bx, ds:word_1F3D0 ;~ 01A2:3999
cs=0x1a2;eip=0x00399d; 	J(JZ(loc_139a7));	// 8841                  jz      short loc_139A7 ;~ 01A2:399D
cs=0x1a2;eip=0x00399f; 	X(PUSH(ax));	// 8842                  push    ax ;~ 01A2:399F
cs=0x1a2;eip=0x0039a0; 	T(ax = 2;);	// 8843                  mov     ax, 2 ;~ 01A2:39A0
cs=0x1a2;eip=0x0039a3; 	J(CALL(sub_1156c,0));	// 8844                  call    sub_1156C ;~ 01A2:39A3
cs=0x1a2;eip=0x0039a6; 	X(POP(ax));	// 8845                  pop     ax ;~ 01A2:39A6
loc_139a7:
	// 4968 
cs=0x1a2;eip=0x0039a7; 	X(word_1f3d0 = bx;);	// 8848                  mov     ds:word_1F3D0, bx ;~ 01A2:39A7
cs=0x1a2;eip=0x0039ab; 	J(CALL(sub_12c72,0));	// 8849                  call    sub_12C72 ;~ 01A2:39AB
cs=0x1a2;eip=0x0039ae; 	J(JMP(loc_13941));	// 8850                  jmp     short loc_13941 ;~ 01A2:39AE
loc_139b0:
	// 4969 
cs=0x1a2;eip=0x0039b0; 	T(TEST(al, 4));	// 8854                  test    al, 4 ;~ 01A2:39B0
cs=0x1a2;eip=0x0039b2; 	J(JNZ(loc_139be));	// 8855                  jnz     short loc_139BE ;~ 01A2:39B2
cs=0x1a2;eip=0x0039b4; 	T(TEST(al, 8));	// 8856                  test    al, 8 ;~ 01A2:39B4
cs=0x1a2;eip=0x0039b6; 	J(JNZ(loc_139be));	// 8857                  jnz     short loc_139BE ;~ 01A2:39B6
cs=0x1a2;eip=0x0039b8; 	T(TEST(al, 0x80));	// 8858                  test    al, 80h ;~ 01A2:39B8
cs=0x1a2;eip=0x0039ba; 	J(JNZ(loc_139be));	// 8859                  jnz     short loc_139BE ;~ 01A2:39BA
cs=0x1a2;eip=0x0039bc; 	J(JMP(loc_13941));	// 8860                  jmp     short loc_13941 ;~ 01A2:39BC
loc_139be:
	// 4970 
cs=0x1a2;eip=0x0039be; 	X(byte_1f746 = 0;);	// 8865                  mov     ds:byte_1F746, 0 ;~ 01A2:39BE
cs=0x1a2;eip=0x0039c3; 	J(CALL(sub_19d8e,0));	// 8866                  call    sub_19D8E ;~ 01A2:39C3
cs=0x1a2;eip=0x0039c6; 	T(TEST(al, 0x80));	// 8867                  test    al, 80h ;~ 01A2:39C6
cs=0x1a2;eip=0x0039c8; 	J(JZ(locret_139da));	// 8868                  jz      short locret_139DA ;~ 01A2:39C8
cs=0x1a2;eip=0x0039ca; 	X(PUSH(ax));	// 8869                  push    ax ;~ 01A2:39CA
cs=0x1a2;eip=0x0039cb; 	T(ax = 0x37;);	// 8870                  mov     ax, 37h ; '7' ;~ 01A2:39CB
cs=0x1a2;eip=0x0039ce; 	J(CALL(sub_1156c,0));	// 8871                  call    sub_1156C ;~ 01A2:39CE
cs=0x1a2;eip=0x0039d1; 	X(POP(ax));	// 8872                  pop     ax ;~ 01A2:39D1
cs=0x1a2;eip=0x0039d2; 	T(al = *(db*)(((db*)&off_1f83c)+3););	// 8873                  mov     al, byte ptr ds:off_1F83C+3 ;~ 01A2:39D2
cs=0x1a2;eip=0x0039d5; 	J(CALL(sub_12be9,0));	// 8874                  call    sub_12BE9 ;~ 01A2:39D5
cs=0x1a2;eip=0x0039d8; 	T(al = 0x0FF;);	// 8875                  mov     al, 0FFh ;~ 01A2:39D8
locret_139da:
	// 4971 
cs=0x1a2;eip=0x0039da; 	J(RETN(0));	// 8878                  retn ;~ 01A2:39DA

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_13941: 	goto loc_13941;
        case m2c::kloc_13964: 	goto loc_13964;
        case m2c::kloc_13969: 	goto loc_13969;
        case m2c::kloc_13974: 	goto loc_13974;
        case m2c::kloc_1398c: 	goto loc_1398c;
        case m2c::kloc_13993: 	goto loc_13993;
        case m2c::kloc_139a7: 	goto loc_139a7;
        case m2c::kloc_139b0: 	goto loc_139b0;
        case m2c::kloc_139be: 	goto loc_139be;
        case m2c::klocret_139da: 	goto locret_139da;
        case m2c::ksub_1393c: 	goto sub_1393c;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_139db(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_139db:
    _begin:
cs=0x1a2;eip=0x0039db; 	X(PUSH(ax));	// 8886                  push    ax ;~ 01A2:39DB
cs=0x1a2;eip=0x0039dc; 	X(PUSH(dx));	// 8887                  push    dx ;~ 01A2:39DC
cs=0x1a2;eip=0x0039dd; 	T(dx = word_1f3a2;);	// 8888                  mov     dx, ds:word_1F3A2 ;~ 01A2:39DD
cs=0x1a2;eip=0x0039e1; 	T(ax = 1;);	// 8889                  mov     ax, 1 ;~ 01A2:39E1
cs=0x1a2;eip=0x0039e4; 	J(CALL(sub_1410e,0));	// 8890                  call    sub_1410E ;~ 01A2:39E4
cs=0x1a2;eip=0x0039e7; 	X(POP(dx));	// 8891                  pop     dx ;~ 01A2:39E7
cs=0x1a2;eip=0x0039e8; 	X(POP(ax));	// 8892                  pop     ax ;~ 01A2:39E8
cs=0x1a2;eip=0x0039e9; 	J(RETN(0));	// 8893                  retn ;~ 01A2:39E9

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_139db: 	goto sub_139db;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_139ea(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_139ea:
    _begin:
cs=0x1a2;eip=0x0039ea; 	X(PUSH(ax));	// 8902                  push    ax ;~ 01A2:39EA
cs=0x1a2;eip=0x0039eb; 	X(PUSH(dx));	// 8903                  push    dx ;~ 01A2:39EB
cs=0x1a2;eip=0x0039ec; 	T(dx = word_1f3a2;);	// 8904                  mov     dx, ds:word_1F3A2 ;~ 01A2:39EC
cs=0x1a2;eip=0x0039f0; 	T(ax = 0;);	// 8905                  mov     ax, 0 ;~ 01A2:39F0
cs=0x1a2;eip=0x0039f3; 	J(CALL(sub_1410e,0));	// 8906                  call    sub_1410E ;~ 01A2:39F3
cs=0x1a2;eip=0x0039f6; 	X(POP(dx));	// 8907                  pop     dx ;~ 01A2:39F6
cs=0x1a2;eip=0x0039f7; 	X(POP(ax));	// 8908                  pop     ax ;~ 01A2:39F7
cs=0x1a2;eip=0x0039f8; 	J(RETN(0));	// 8909                  retn ;~ 01A2:39F8

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_139ea: 	goto sub_139ea;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_139f9(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_139f9:
    _begin:
cs=0x1a2;eip=0x0039f9; 	X(PUSH(ax));	// 8917                  push    ax ;~ 01A2:39F9
cs=0x1a2;eip=0x0039fa; 	X(PUSH(dx));	// 8918                  push    dx ;~ 01A2:39FA
cs=0x1a2;eip=0x0039fb; 	X(PUSH(cx));	// 8919                  push    cx ;~ 01A2:39FB
cs=0x1a2;eip=0x0039fc; 	X(PUSH(bx));	// 8920                  push    bx ;~ 01A2:39FC
cs=0x1a2;eip=0x0039fd; 	X(PUSH(si));	// 8921                  push    si ;~ 01A2:39FD
cs=0x1a2;eip=0x0039fe; 	X(PUSH(bp));	// 8922                  push    bp ;~ 01A2:39FE
cs=0x1a2;eip=0x0039ff; 	X(PUSH(es));	// 8923                  push    es ;~ 01A2:39FF
cs=0x1a2;eip=0x003a00; 	T(ax = 3;);	// 8924                  mov     ax, 3 ;~ 01A2:3A00
cs=0x1a2;eip=0x003a03; 	J(CALL(sub_1410e,0));	// 8925                  call    sub_1410E ;~ 01A2:3A03
cs=0x1a2;eip=0x003a06; 	T(al = 0x0FF;);	// 8926                  mov     al, 0FFh ;~ 01A2:3A06
cs=0x1a2;eip=0x003a08; 	T(TEST(*(raddr(ds,di+0x17)), 0x20));	// 8927                  test    byte ptr [di+17h], 20h ;~ 01A2:3A08
cs=0x1a2;eip=0x003a0c; 	J(JZ(loc_13a83));	// 8928                  jz      short loc_13A83 ;~ 01A2:3A0C
cs=0x1a2;eip=0x003a0e; 	T(bp = di;);	// 8929                  mov     bp, di ;~ 01A2:3A0E
cs=0x1a2;eip=0x003a10; 	T(ax = 1;);	// 8930                  mov     ax, 1 ;~ 01A2:3A10
cs=0x1a2;eip=0x003a13; 	J(CALL(sub_1410e,0));	// 8931                  call    sub_1410E ;~ 01A2:3A13
cs=0x1a2;eip=0x003a16; 	T(si = di;);	// 8932                  mov     si, di ;~ 01A2:3A16
cs=0x1a2;eip=0x003a18; 	T(di = 0x9C2;);	// 8933                  mov     di, 9C2h ;~ 01A2:3A18
cs=0x1a2;eip=0x003a1b; 	T(cx = 0x0A0;);	// 8934                  mov     cx, 0A0h ;~ 01A2:3A1B
cs=0x1a2;eip=0x003a1e; 	T(XOR(ax, ax));	// 8935                  xor     ax, ax ;~ 01A2:3A1E
cs=0x1a2;eip=0x003a20; 	T(es = seg_1f8f4;);	// 8936                  mov     es, ds:seg_1F8F4 ;~ 01A2:3A20
	// 8937                  rep stosw ;~ 01A2:3A24
cs=0x1a2;eip=0x003a24; 	X(	REP STOSW);	// 8937                  rep stosw ;~ 01A2:3A24
cs=0x1a2;eip=0x003a26; 	T(di = 0x9C2;);	// 8938                  mov     di, 9C2h ;~ 01A2:3A26
cs=0x1a2;eip=0x003a29; 	T(XOR(ch, ch));	// 8939                  xor     ch, ch ;~ 01A2:3A29
cs=0x1a2;eip=0x003a2b; 	T(MOV(al, *(raddr(ss,si))));	// 8940                  mov     al, ss:[si] ;~ 01A2:3A2B
cs=0x1a2;eip=0x003a2e; 	T(INC(si));	// 8941                  inc     si ;~ 01A2:3A2E
cs=0x1a2;eip=0x003a2f; 	T(cl = al;);	// 8942                  mov     cl, al ;~ 01A2:3A2F
cs=0x1a2;eip=0x003a31; 	T(OR(cl, cl));	// 8943                  or      cl, cl ;~ 01A2:3A31
cs=0x1a2;eip=0x003a33; 	J(JZ(loc_13a7e));	// 8944                  jz      short loc_13A7E ;~ 01A2:3A33
cs=0x1a2;eip=0x003a35; 	J(CALL(sub_13a8d,0));	// 8945                  call    sub_13A8D ;~ 01A2:3A35
cs=0x1a2;eip=0x003a38; 	T(DEC(cl));	// 8946                  dec     cl ;~ 01A2:3A38
cs=0x1a2;eip=0x003a3a; 	T(MOV(ch, *(raddr(ds,bp+4))));	// 8947                  mov     ch, ds:[bp+4] ;~ 01A2:3A3A
cs=0x1a2;eip=0x003a3e; 	T(DEC(ch));	// 8948                  dec     ch ;~ 01A2:3A3E
cs=0x1a2;eip=0x003a40; 	X(PUSH(di));	// 8949                  push    di ;~ 01A2:3A40
loc_13a41:
	// 4972 
cs=0x1a2;eip=0x003a41; 	T(dl = cl;);	// 8952                  mov     dl, cl ;~ 01A2:3A41
cs=0x1a2;eip=0x003a43; 	T(XOR(bx, bx));	// 8953                  xor     bx, bx ;~ 01A2:3A43
loc_13a45:
	// 4973 
cs=0x1a2;eip=0x003a45; 	T(MOV(al, *(raddr(ss,si))));	// 8956                  mov     al, ss:[si] ;~ 01A2:3A45
cs=0x1a2;eip=0x003a48; 	T(INC(si));	// 8957                  inc     si ;~ 01A2:3A48
cs=0x1a2;eip=0x003a49; 	X(MOV(*(raddr(ds,bx+di+1)), al));	// 8958                  mov     [bx+di+1], al ;~ 01A2:3A49
cs=0x1a2;eip=0x003a4c; 	T(ADD(bx, 2));	// 8959                  add     bx, 2 ;~ 01A2:3A4C
cs=0x1a2;eip=0x003a4f; 	T(DEC(dl));	// 8960                  dec     dl ;~ 01A2:3A4F
cs=0x1a2;eip=0x003a51; 	J(JNS(loc_13a45));	// 8961                  jns     short loc_13A45 ;~ 01A2:3A51
cs=0x1a2;eip=0x003a53; 	T(ADD(di, 0x10));	// 8962                  add     di, 10h ;~ 01A2:3A53
cs=0x1a2;eip=0x003a56; 	T(DEC(ch));	// 8963                  dec     ch ;~ 01A2:3A56
cs=0x1a2;eip=0x003a58; 	J(JNS(loc_13a41));	// 8964                  jns     short loc_13A41 ;~ 01A2:3A58
cs=0x1a2;eip=0x003a5a; 	X(POP(di));	// 8965                  pop     di ;~ 01A2:3A5A
cs=0x1a2;eip=0x003a5b; 	T(ADD(di, 0x0A0));	// 8966                  add     di, 0A0h ;~ 01A2:3A5B
cs=0x1a2;eip=0x003a5f; 	T(MOV(ch, *(raddr(ds,bp+5))));	// 8967                  mov     ch, ds:[bp+5] ;~ 01A2:3A5F
cs=0x1a2;eip=0x003a63; 	T(DEC(ch));	// 8968                  dec     ch ;~ 01A2:3A63
loc_13a65:
	// 4974 
cs=0x1a2;eip=0x003a65; 	T(dl = cl;);	// 8971                  mov     dl, cl ;~ 01A2:3A65
cs=0x1a2;eip=0x003a67; 	T(XOR(bx, bx));	// 8972                  xor     bx, bx ;~ 01A2:3A67
loc_13a69:
	// 4975 
cs=0x1a2;eip=0x003a69; 	T(MOV(al, *(raddr(ss,si))));	// 8975                  mov     al, ss:[si] ;~ 01A2:3A69
cs=0x1a2;eip=0x003a6c; 	T(INC(si));	// 8976                  inc     si ;~ 01A2:3A6C
cs=0x1a2;eip=0x003a6d; 	X(MOV(*(raddr(ds,bx+di+1)), al));	// 8977                  mov     [bx+di+1], al ;~ 01A2:3A6D
cs=0x1a2;eip=0x003a70; 	T(ADD(bx, 2));	// 8978                  add     bx, 2 ;~ 01A2:3A70
cs=0x1a2;eip=0x003a73; 	T(DEC(dl));	// 8979                  dec     dl ;~ 01A2:3A73
cs=0x1a2;eip=0x003a75; 	J(JNS(loc_13a69));	// 8980                  jns     short loc_13A69 ;~ 01A2:3A75
cs=0x1a2;eip=0x003a77; 	T(ADD(di, 0x10));	// 8981                  add     di, 10h ;~ 01A2:3A77
cs=0x1a2;eip=0x003a7a; 	T(DEC(ch));	// 8982                  dec     ch ;~ 01A2:3A7A
cs=0x1a2;eip=0x003a7c; 	J(JNS(loc_13a65));	// 8983                  jns     short loc_13A65 ;~ 01A2:3A7C
loc_13a7e:
	// 4976 
cs=0x1a2;eip=0x003a7e; 	T(di = 0x9C2;);	// 8986                  mov     di, 9C2h ;~ 01A2:3A7E
cs=0x1a2;eip=0x003a81; 	T(XOR(al, al));	// 8987                  xor     al, al ;~ 01A2:3A81
loc_13a83:
	// 4977 
cs=0x1a2;eip=0x003a83; 	T(OR(al, al));	// 8990                  or      al, al ;~ 01A2:3A83
cs=0x1a2;eip=0x003a85; 	X(POP(es));	// 8991                  pop     es ;~ 01A2:3A85
cs=0x1a2;eip=0x003a86; 	X(POP(bp));	// 8992                  pop     bp ;~ 01A2:3A86
cs=0x1a2;eip=0x003a87; 	X(POP(si));	// 8993                  pop     si ;~ 01A2:3A87
cs=0x1a2;eip=0x003a88; 	X(POP(bx));	// 8994                  pop     bx ;~ 01A2:3A88
cs=0x1a2;eip=0x003a89; 	X(POP(cx));	// 8995                  pop     cx ;~ 01A2:3A89
cs=0x1a2;eip=0x003a8a; 	X(POP(dx));	// 8996                  pop     dx ;~ 01A2:3A8A
cs=0x1a2;eip=0x003a8b; 	X(POP(ax));	// 8997                  pop     ax ;~ 01A2:3A8B
cs=0x1a2;eip=0x003a8c; 	J(RETN(0));	// 8998                  retn ;~ 01A2:3A8C

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_13a41: 	goto loc_13a41;
        case m2c::kloc_13a45: 	goto loc_13a45;
        case m2c::kloc_13a65: 	goto loc_13a65;
        case m2c::kloc_13a69: 	goto loc_13a69;
        case m2c::kloc_13a7e: 	goto loc_13a7e;
        case m2c::kloc_13a83: 	goto loc_13a83;
        case m2c::ksub_139f9: 	goto sub_139f9;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13a8d(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13a8d:
    _begin:
cs=0x1a2;eip=0x003a8d; 	X(PUSH(di));	// 9006                  push    di ;~ 01A2:3A8D
cs=0x1a2;eip=0x003a8e; 	X(PUSH(ax));	// 9007                  push    ax ;~ 01A2:3A8E
cs=0x1a2;eip=0x003a8f; 	X(PUSH(cx));	// 9008                  push    cx ;~ 01A2:3A8F
cs=0x1a2;eip=0x003a90; 	T(MOV(al, *(raddr(ss,si))));	// 9009                  mov     al, ss:[si] ;~ 01A2:3A90
cs=0x1a2;eip=0x003a93; 	T(INC(si));	// 9010                  inc     si ;~ 01A2:3A93
cs=0x1a2;eip=0x003a94; 	T(OR(al, al));	// 9011                  or      al, al ;~ 01A2:3A94
cs=0x1a2;eip=0x003a96; 	J(JZ(loc_13aaa));	// 9012                  jz      short loc_13AAA ;~ 01A2:3A96
cs=0x1a2;eip=0x003a98; 	X(PUSH(ax));	// 9013                  push    ax ;~ 01A2:3A98
cs=0x1a2;eip=0x003a99; 	J(CALL(sub_13aae,0));	// 9014                  call    sub_13AAE ;~ 01A2:3A99
cs=0x1a2;eip=0x003a9c; 	T(ADD(di, 0x0A0));	// 9015                  add     di, 0A0h ;~ 01A2:3A9C
cs=0x1a2;eip=0x003aa0; 	X(POP(ax));	// 9016                  pop     ax ;~ 01A2:3AA0
cs=0x1a2;eip=0x003aa1; 	T(cl = 4;);	// 9017                  mov     cl, 4 ;~ 01A2:3AA1
cs=0x1a2;eip=0x003aa3; 	T(SHR(al, cl));	// 9018                  shr     al, cl ;~ 01A2:3AA3
cs=0x1a2;eip=0x003aa5; 	T(INC(si));	// 9019                  inc     si ;~ 01A2:3AA5
cs=0x1a2;eip=0x003aa6; 	J(CALL(sub_13aae,0));	// 9020                  call    sub_13AAE ;~ 01A2:3AA6
cs=0x1a2;eip=0x003aa9; 	T(INC(si));	// 9021                  inc     si ;~ 01A2:3AA9
loc_13aaa:
	// 4978 
cs=0x1a2;eip=0x003aaa; 	X(POP(cx));	// 9024                  pop     cx ;~ 01A2:3AAA
cs=0x1a2;eip=0x003aab; 	X(POP(ax));	// 9025                  pop     ax ;~ 01A2:3AAB
cs=0x1a2;eip=0x003aac; 	X(POP(di));	// 9026                  pop     di ;~ 01A2:3AAC
cs=0x1a2;eip=0x003aad; 	J(RETN(0));	// 9027                  retn ;~ 01A2:3AAD

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_13aaa: 	goto loc_13aaa;
        case m2c::ksub_13a8d: 	goto sub_13a8d;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13aae(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13aae:
    _begin:
cs=0x1a2;eip=0x003aae; 	T(AND(al, 0x0F));	// 9036                  and     al, 0Fh ;~ 01A2:3AAE
cs=0x1a2;eip=0x003ab0; 	J(JZ(locret_13ac2));	// 9037                  jz      short locret_13AC2 ;~ 01A2:3AB0
cs=0x1a2;eip=0x003ab2; 	T(MOV(ah, *(raddr(ss,si))));	// 9038                  mov     ah, ss:[si] ;~ 01A2:3AB2
cs=0x1a2;eip=0x003ab5; 	T(DEC(ah));	// 9039                  dec     ah ;~ 01A2:3AB5
cs=0x1a2;eip=0x003ab7; 	X(PUSH(di));	// 9040                  push    di ;~ 01A2:3AB7
loc_13ab8:
	// 4979 
cs=0x1a2;eip=0x003ab8; 	X(MOV(*(raddr(ds,di)), al));	// 9043                  mov     [di], al ;~ 01A2:3AB8
cs=0x1a2;eip=0x003aba; 	T(ADD(di, 2));	// 9044                  add     di, 2 ;~ 01A2:3ABA
cs=0x1a2;eip=0x003abd; 	T(DEC(ah));	// 9045                  dec     ah ;~ 01A2:3ABD
cs=0x1a2;eip=0x003abf; 	J(JNS(loc_13ab8));	// 9046                  jns     short loc_13AB8 ;~ 01A2:3ABF
cs=0x1a2;eip=0x003ac1; 	X(POP(di));	// 9047                  pop     di ;~ 01A2:3AC1
locret_13ac2:
	// 4980 
cs=0x1a2;eip=0x003ac2; 	J(RETN(0));	// 9050                  retn ;~ 01A2:3AC2

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_13ab8: 	goto loc_13ab8;
        case m2c::klocret_13ac2: 	goto locret_13ac2;
        case m2c::ksub_13aae: 	goto sub_13aae;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13ac3(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13ac3:
    _begin:
cs=0x1a2;eip=0x003ac3; 	X(PUSH(ax));	// 9059                  push    ax ;~ 01A2:3AC3
cs=0x1a2;eip=0x003ac4; 	X(PUSH(bx));	// 9060                  push    bx ;~ 01A2:3AC4
cs=0x1a2;eip=0x003ac5; 	X(PUSH(cx));	// 9061                  push    cx ;~ 01A2:3AC5
cs=0x1a2;eip=0x003ac6; 	X(PUSH(dx));	// 9062                  push    dx ;~ 01A2:3AC6
cs=0x1a2;eip=0x003ac7; 	X(PUSH(bp));	// 9063                  push    bp ;~ 01A2:3AC7
cs=0x1a2;eip=0x003ac8; 	X(PUSH(si));	// 9064                  push    si ;~ 01A2:3AC8
cs=0x1a2;eip=0x003ac9; 	X(PUSH(di));	// 9065                  push    di ;~ 01A2:3AC9
cs=0x1a2;eip=0x003aca; 	X(PUSH(es));	// 9066                  push    es ;~ 01A2:3ACA
cs=0x1a2;eip=0x003acb; 	X(PUSH(ds));	// 9067                  push    ds ;~ 01A2:3ACB
cs=0x1a2;eip=0x003acc; 	T(MOV(es, *(dw*)(raddr(ds,si+6))));	// 9068                  mov     es, word ptr [si+6] ;~ 01A2:3ACC
cs=0x1a2;eip=0x003acf; 	T(MOV(di, *(dw*)(raddr(ds,si+8))));	// 9070                  mov     di, [si+8] ;~ 01A2:3ACF
cs=0x1a2;eip=0x003ad2; 	T(MOV(bx, *(dw*)(raddr(ds,si+0x0A))));	// 9071                  mov     bx, [si+0Ah] ;~ 01A2:3AD2
cs=0x1a2;eip=0x003ad5; 	T(XOR(ah, ah));	// 9072                  xor     ah, ah ;~ 01A2:3AD5
cs=0x1a2;eip=0x003ad7; 	T(MOV(al, *(raddr(ds,bx+0x0E))));	// 9073                  mov     al, [bx+0Eh] ;~ 01A2:3AD7
cs=0x1a2;eip=0x003ada; 	T(ADD(bx, ax));	// 9074                  add     bx, ax ;~ 01A2:3ADA
cs=0x1a2;eip=0x003adc; 	T(MOV(al, *(raddr(ds,bx+1))));	// 9075                  mov     al, [bx+1] ;~ 01A2:3ADC
cs=0x1a2;eip=0x003adf; 	T(ADD(di, *(dw*)(raddr(es,di+0x22))));	// 9076                  add     di, es:[di+22h] ;~ 01A2:3ADF
cs=0x1a2;eip=0x003ae3; 	T(ADD(di, 0x28));	// 9077                  add     di, 28h ; '(' ;~ 01A2:3AE3
cs=0x1a2;eip=0x003ae6; 	T(XOR(ah, ah));	// 9078                  xor     ah, ah ;~ 01A2:3AE6
cs=0x1a2;eip=0x003ae8; 	T(dx = 8;);	// 9079                  mov     dx, 8 ;~ 01A2:3AE8
cs=0x1a2;eip=0x003aeb; 	T(MUL1_2(dx));	// 9080                  mul     dx ;~ 01A2:3AEB
cs=0x1a2;eip=0x003aed; 	T(ADD(di, ax));	// 9081                  add     di, ax ;~ 01A2:3AED
cs=0x1a2;eip=0x003aef; 	T(MOV(ax, *(dw*)(raddr(es,di+2))));	// 9082                  mov     ax, es:[di+2] ;~ 01A2:3AEF
cs=0x1a2;eip=0x003af3; 	X(MOV(*(dw*)(raddr(ds,bx+4)), ax));	// 9083                  mov     [bx+4], ax ;~ 01A2:3AF3
cs=0x1a2;eip=0x003af6; 	T(MOV(ax, *(dw*)(raddr(es,di+4))));	// 9084                  mov     ax, es:[di+4] ;~ 01A2:3AF6
cs=0x1a2;eip=0x003afa; 	X(MOV(*(dw*)(raddr(ds,bx+6)), ax));	// 9085                  mov     [bx+6], ax ;~ 01A2:3AFA
cs=0x1a2;eip=0x003afd; 	T(ADD(di, *(dw*)(raddr(es,di))));	// 9086                  add     di, es:[di] ;~ 01A2:3AFD
cs=0x1a2;eip=0x003b00; 	X(MOV(*(dw*)(raddr(ds,si+0x2A)), es));	// 9087                  mov     word ptr [si+2Ah], es ;~ 01A2:3B00
cs=0x1a2;eip=0x003b03; 	X(MOV(*(dw*)(raddr(ds,si+0x1E)), di));	// 9088                  mov     [si+1Eh], di ;~ 01A2:3B03
cs=0x1a2;eip=0x003b06; 	X(POP(ds));	// 9089                  pop     ds ;~ 01A2:3B06
cs=0x1a2;eip=0x003b07; 	X(POP(es));	// 9090                  pop     es ;~ 01A2:3B07
cs=0x1a2;eip=0x003b08; 	X(POP(di));	// 9091                  pop     di ;~ 01A2:3B08
cs=0x1a2;eip=0x003b09; 	X(POP(si));	// 9092                  pop     si ;~ 01A2:3B09
cs=0x1a2;eip=0x003b0a; 	X(POP(bp));	// 9093                  pop     bp ;~ 01A2:3B0A
cs=0x1a2;eip=0x003b0b; 	X(POP(dx));	// 9094                  pop     dx ;~ 01A2:3B0B
cs=0x1a2;eip=0x003b0c; 	X(POP(cx));	// 9095                  pop     cx ;~ 01A2:3B0C
cs=0x1a2;eip=0x003b0d; 	X(POP(bx));	// 9096                  pop     bx ;~ 01A2:3B0D
cs=0x1a2;eip=0x003b0e; 	X(POP(ax));	// 9097                  pop     ax ;~ 01A2:3B0E
cs=0x1a2;eip=0x003b0f; 	J(RETN(0));	// 9098                  retn ;~ 01A2:3B0F

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_13ac3: 	goto sub_13ac3;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13b10(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13b10:
    _begin:
cs=0x1a2;eip=0x003b10; 	X(PUSH(ax));	// 9106                  push    ax ;~ 01A2:3B10
cs=0x1a2;eip=0x003b11; 	X(PUSH(dx));	// 9107                  push    dx ;~ 01A2:3B11
cs=0x1a2;eip=0x003b12; 	X(PUSH(si));	// 9108                  push    si ;~ 01A2:3B12
cs=0x1a2;eip=0x003b13; 	T(XOR(ah, ah));	// 9109                  xor     ah, ah ;~ 01A2:3B13
cs=0x1a2;eip=0x003b15; 	T(MOV(al, *(raddr(ds,si+0x0E))));	// 9110                  mov     al, [si+0Eh] ;~ 01A2:3B15
cs=0x1a2;eip=0x003b18; 	T(ADD(si, ax));	// 9111                  add     si, ax ;~ 01A2:3B18
cs=0x1a2;eip=0x003b1a; 	T(MOV(al, *(raddr(ds,si+1))));	// 9112                  mov     al, [si+1] ;~ 01A2:3B1A
cs=0x1a2;eip=0x003b1d; 	T(MOV(dx, *(dw*)(raddr(es,di+0x22))));	// 9113                  mov     dx, es:[di+22h] ;~ 01A2:3B1D
cs=0x1a2;eip=0x003b21; 	T(ADD(di, dx));	// 9114                  add     di, dx ;~ 01A2:3B21
cs=0x1a2;eip=0x003b23; 	T(ADD(di, 0x28));	// 9115                  add     di, 28h ; '(' ;~ 01A2:3B23
cs=0x1a2;eip=0x003b26; 	T(SHL(ax, 1));	// 9116                  shl     ax, 1 ;~ 01A2:3B26
cs=0x1a2;eip=0x003b28; 	T(SHL(ax, 1));	// 9117                  shl     ax, 1 ;~ 01A2:3B28
cs=0x1a2;eip=0x003b2a; 	T(SHL(ax, 1));	// 9118                  shl     ax, 1 ;~ 01A2:3B2A
cs=0x1a2;eip=0x003b2c; 	T(ADD(di, ax));	// 9119                  add     di, ax ;~ 01A2:3B2C
cs=0x1a2;eip=0x003b2e; 	T(ADD(di, *(dw*)(raddr(es,di))));	// 9120                  add     di, es:[di] ;~ 01A2:3B2E
cs=0x1a2;eip=0x003b31; 	X(POP(si));	// 9121                  pop     si ;~ 01A2:3B31
cs=0x1a2;eip=0x003b32; 	X(POP(dx));	// 9122                  pop     dx ;~ 01A2:3B32
cs=0x1a2;eip=0x003b33; 	X(POP(ax));	// 9123                  pop     ax ;~ 01A2:3B33
cs=0x1a2;eip=0x003b34; 	J(RETN(0));	// 9124                  retn ;~ 01A2:3B34

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_13b10: 	goto sub_13b10;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13b35(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13b35:
    _begin:
cs=0x1a2;eip=0x003b35; 	T(si = word_1f19a;);	// 9132                  mov     si, word_1F19A ;~ 01A2:3B35
cs=0x1a2;eip=0x003b39; 	T(cx = word_1f394;);	// 9133                  mov     cx, ds:word_1F394 ;~ 01A2:3B39
loc_13b3d:
	// 4981 
cs=0x1a2;eip=0x003b3d; 	T(CMP(*(dw*)(raddr(ds,si)), 0));	// 9136                  cmp     word ptr [si], 0 ;~ 01A2:3B3D
cs=0x1a2;eip=0x003b40; 	J(JS(loc_13bba));	// 9137                  js      short loc_13BBA ;~ 01A2:3B40
cs=0x1a2;eip=0x003b42; 	T(MOV(es, *(dw*)(raddr(ds,si+6))));	// 9138                  mov     es, word ptr [si+6] ;~ 01A2:3B42
cs=0x1a2;eip=0x003b45; 	T(MOV(di, *(dw*)(raddr(ds,si+8))));	// 9139                  mov     di, [si+8] ;~ 01A2:3B45
cs=0x1a2;eip=0x003b48; 	T(TEST(*(raddr(es,di+0x0C)), 4));	// 9140                  test    byte ptr es:[di+0Ch], 4 ;~ 01A2:3B48
cs=0x1a2;eip=0x003b4d; 	J(JZ(loc_13bba));	// 9141                  jz      short loc_13BBA ;~ 01A2:3B4D
cs=0x1a2;eip=0x003b4f; 	T(MOV(bx, *(dw*)(raddr(ds,si+0x0A))));	// 9142                  mov     bx, [si+0Ah] ;~ 01A2:3B4F
cs=0x1a2;eip=0x003b52; 	T(TEST(*(raddr(ds,bx+3)), 0x80));	// 9143                  test    byte ptr [bx+3], 80h ;~ 01A2:3B52
cs=0x1a2;eip=0x003b56; 	J(JNZ(loc_13bba));	// 9144                  jnz     short loc_13BBA ;~ 01A2:3B56
cs=0x1a2;eip=0x003b58; 	T(TEST(*(raddr(ds,bx+0x0F)), 1));	// 9145                  test    byte ptr [bx+0Fh], 1 ;~ 01A2:3B58
cs=0x1a2;eip=0x003b5c; 	J(JNZ(loc_13bba));	// 9146                  jnz     short loc_13BBA ;~ 01A2:3B5C
cs=0x1a2;eip=0x003b5e; 	X(word_1f244 = si;);	// 9147                  mov     word_1F244, si ;~ 01A2:3B5E
cs=0x1a2;eip=0x003b62; 	T(TEST(*(raddr(es,di+0x0C)), 0x20));	// 9148                  test    byte ptr es:[di+0Ch], 20h ;~ 01A2:3B62
cs=0x1a2;eip=0x003b67; 	J(JZ(loc_13b87));	// 9149                  jz      short loc_13B87 ;~ 01A2:3B67
cs=0x1a2;eip=0x003b69; 	X(PUSH(si));	// 9151                  push    si ;~ 01A2:3B69
cs=0x1a2;eip=0x003b6a; 	T(si = di;);	// 9152                  mov     si, di ;~ 01A2:3B6A
cs=0x1a2;eip=0x003b6c; 	T(ADD(si, 0x22));	// 9153                  add     si, 22h ; '"' ;~ 01A2:3B6C
cs=0x1a2;eip=0x003b6f; 	T(CMP(*(raddr(es,di+0x16)), 6));	// 9154                  cmp     byte ptr es:[di+16h], 6 ;~ 01A2:3B6F
cs=0x1a2;eip=0x003b74; 	J(JNZ(loc_13b87));	// 9155                  jnz     short loc_13B87 ;~ 01A2:3B74
cs=0x1a2;eip=0x003b76; 	T(XOR(dh, dh));	// 9156                  xor     dh, dh ;~ 01A2:3B76
cs=0x1a2;eip=0x003b78; 	T(dl = byte_1f82e;);	// 9157                  mov     dl, ds:byte_1F82E ;~ 01A2:3B78
cs=0x1a2;eip=0x003b7c; 	T(SUB(si, 2));	// 9158                  sub     si, 2 ;~ 01A2:3B7C
cs=0x1a2;eip=0x003b7f; 	J(CALL(sub_18d86,0));	// 9159                  call    sub_18D86 ;~ 01A2:3B7F
cs=0x1a2;eip=0x003b82; 	T(di = si;);	// 9160                  mov     di, si ;~ 01A2:3B82
cs=0x1a2;eip=0x003b84; 	X(POP(si));	// 9161                  pop     si ;~ 01A2:3B84
cs=0x1a2;eip=0x003b85; 	J(JMP(loc_13b9e));	// 9162                  jmp     short loc_13B9E ;~ 01A2:3B85
loc_13b87:
	// 4982 
cs=0x1a2;eip=0x003b87; 	T(CMP(*(raddr(es,di+0x16)), 3));	// 9167                  cmp     byte ptr es:[di+16h], 3 ;~ 01A2:3B87
cs=0x1a2;eip=0x003b8c; 	J(JNZ(loc_13b95));	// 9168                  jnz     short loc_13B95 ;~ 01A2:3B8C
cs=0x1a2;eip=0x003b8e; 	T(CMP(byte_1f7bd, 0));	// 9169                  cmp     ds:byte_1F7BD, 0 ;~ 01A2:3B8E
cs=0x1a2;eip=0x003b93; 	J(JNZ(loc_13bba));	// 9170                  jnz     short loc_13BBA ;~ 01A2:3B93
loc_13b95:
	// 4983 
cs=0x1a2;eip=0x003b95; 	X(PUSH(cx));	// 9173                  push    cx ;~ 01A2:3B95
cs=0x1a2;eip=0x003b96; 	X(PUSH(si));	// 9174                  push    si ;~ 01A2:3B96
cs=0x1a2;eip=0x003b97; 	J(CALL(sub_13bc5,0));	// 9175                  call    sub_13BC5 ;~ 01A2:3B97
cs=0x1a2;eip=0x003b9a; 	X(POP(si));	// 9176                  pop     si ;~ 01A2:3B9A
cs=0x1a2;eip=0x003b9b; 	X(POP(cx));	// 9177                  pop     cx ;~ 01A2:3B9B
cs=0x1a2;eip=0x003b9c; 	T(ADD(di, dx));	// 9178                  add     di, dx ;~ 01A2:3B9C
loc_13b9e:
	// 4984 
cs=0x1a2;eip=0x003b9e; 	T(ax = es;);	// 9181                  mov     ax, es ;~ 01A2:3B9E
cs=0x1a2;eip=0x003ba0; 	T(CMP(ax, *(dw*)(raddr(ds,si+0x1E))));	// 9182                  cmp     ax, [si+1Eh] ;~ 01A2:3BA0
cs=0x1a2;eip=0x003ba3; 	J(JZ(loc_13baf));	// 9183                  jz      short loc_13BAF ;~ 01A2:3BA3
cs=0x1a2;eip=0x003ba5; 	T(TEST(*(raddr(ds,si+0x12)), 4));	// 9184                  test    byte ptr [si+12h], 4 ;~ 01A2:3BA5
cs=0x1a2;eip=0x003ba9; 	X(PUSHF);	// 9185                  pushf ;~ 01A2:3BA9
cs=0x1a2;eip=0x003baa; 	X(OR(*(raddr(ds,si+0x12)), 4));	// 9186                  or      byte ptr [si+12h], 4 ;~ 01A2:3BAA
cs=0x1a2;eip=0x003bae; 	X(POPF);	// 9187                  popf ;~ 01A2:3BAE
loc_13baf:
	// 4985 
cs=0x1a2;eip=0x003baf; 	X(MOV(*(dw*)(raddr(ds,si+0x2A)), es));	// 9190                  mov     word ptr [si+2Ah], es ;~ 01A2:3BAF
cs=0x1a2;eip=0x003bb2; 	X(MOV(*(dw*)(raddr(ds,si+0x1E)), di));	// 9191                  mov     [si+1Eh], di ;~ 01A2:3BB2
cs=0x1a2;eip=0x003bb5; 	X(MOV(*(dw*)(raddr(ds,si+0x0C)), 0));	// 9192                  mov     word ptr [si+0Ch], 0 ;~ 01A2:3BB5
loc_13bba:
	// 4986 
cs=0x1a2;eip=0x003bba; 	T(ADD(si, 0x32));	// 9196                  add     si, 32h ; '2' ;~ 01A2:3BBA
cs=0x1a2;eip=0x003bbd; 	J(LOOP(loc_13bc1));	// 9197                  loop    loc_13BC1 ;~ 01A2:3BBD
cs=0x1a2;eip=0x003bbf; 	J(JMP(locret_13bc4));	// 9198                  jmp     short locret_13BC4 ;~ 01A2:3BBF
loc_13bc1:
	// 4987 
cs=0x1a2;eip=0x003bc1; 	J(JMP(loc_13b3d));	// 9202                  jmp     loc_13B3D ;~ 01A2:3BC1
locret_13bc4:
	// 4988 
cs=0x1a2;eip=0x003bc4; 	J(RETN(0));	// 9206                  retn ;~ 01A2:3BC4

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_13b3d: 	goto loc_13b3d;
        case m2c::kloc_13b87: 	goto loc_13b87;
        case m2c::kloc_13b95: 	goto loc_13b95;
        case m2c::kloc_13b9e: 	goto loc_13b9e;
        case m2c::kloc_13baf: 	goto loc_13baf;
        case m2c::kloc_13bba: 	goto loc_13bba;
        case m2c::kloc_13bc1: 	goto loc_13bc1;
        case m2c::klocret_13bc4: 	goto locret_13bc4;
        case m2c::ksub_13b35: 	goto sub_13b35;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13bc5(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13bc5:
    _begin:
cs=0x1a2;eip=0x003bc5; 	T(XOR(dh, dh));	// 9214                  xor     dh, dh ;~ 01A2:3BC5
cs=0x1a2;eip=0x003bc7; 	X(word_1f220 = bx;);	// 9215                  mov     word_1F220, bx ;~ 01A2:3BC7
cs=0x1a2;eip=0x003bcb; 	T(MOV(dl, *(raddr(ds,bx+0x0E))));	// 9216                  mov     dl, [bx+0Eh] ;~ 01A2:3BCB
cs=0x1a2;eip=0x003bce; 	T(ADD(bx, dx));	// 9217                  add     bx, dx ;~ 01A2:3BCE
cs=0x1a2;eip=0x003bd0; 	T(MOV(dl, *(raddr(ds,bx+3))));	// 9218                  mov     dl, [bx+3] ;~ 01A2:3BD0
cs=0x1a2;eip=0x003bd3; 	X(*(dw*)(((db*)&off_1f736)+2) = dx;);	// 9219                  mov     word ptr ds:off_1F736+2, dx ;~ 01A2:3BD3
loc_13bd7:
	// 4989 
cs=0x1a2;eip=0x003bd7; 	T(ax = dx;);	// 9222                  mov     ax, dx ;~ 01A2:3BD7
cs=0x1a2;eip=0x003bd9; 	T(CMP(*(raddr(ds,bx)), 0));	// 9223                  cmp     byte ptr [bx], 0 ;~ 01A2:3BD9
cs=0x1a2;eip=0x003bdc; 	J(JNZ(loc_13c10));	// 9224                  jnz     short loc_13C10 ;~ 01A2:3BDC
cs=0x1a2;eip=0x003bde; 	T(SHL(ax, 1));	// 9225                  shl     ax, 1 ;~ 01A2:3BDE
cs=0x1a2;eip=0x003be0; 	T(bp = di;);	// 9226                  mov     bp, di ;~ 01A2:3BE0
cs=0x1a2;eip=0x003be2; 	T(ADD(bp, 0x28));	// 9227                  add     bp, 28h ; '(' ;~ 01A2:3BE2
cs=0x1a2;eip=0x003be5; 	T(ADD(bp, ax));	// 9228                  add     bp, ax ;~ 01A2:3BE5
cs=0x1a2;eip=0x003be7; 	T(XOR(ah, ah));	// 9229                  xor     ah, ah ;~ 01A2:3BE7
cs=0x1a2;eip=0x003be9; 	T(MOV(al, *(raddr(es,bp+0))));	// 9230                  mov     al, es:[bp+0] ;~ 01A2:3BE9
cs=0x1a2;eip=0x003bed; 	T(OR(al, al));	// 9231                  or      al, al ;~ 01A2:3BED
cs=0x1a2;eip=0x003bef; 	J(JZ(loc_13c10));	// 9232                  jz      short loc_13C10 ;~ 01A2:3BEF
cs=0x1a2;eip=0x003bf1; 	T(ah = 0x0FF;);	// 9233                  mov     ah, 0FFh ;~ 01A2:3BF1
cs=0x1a2;eip=0x003bf3; 	X(*(dw*)(((db*)&off_1f736)+2) = dx;);	// 9234                  mov     word ptr ds:off_1F736+2, dx ;~ 01A2:3BF3
cs=0x1a2;eip=0x003bf7; 	T(SUB(ah, al));	// 9235                  sub     ah, al ;~ 01A2:3BF7
cs=0x1a2;eip=0x003bf9; 	T(dl = ah;);	// 9236                  mov     dl, ah ;~ 01A2:3BF9
cs=0x1a2;eip=0x003bfb; 	T(XOR(dh, dh));	// 9237                  xor     dh, dh ;~ 01A2:3BFB
cs=0x1a2;eip=0x003bfd; 	T(ax = offset(seg000,off_13c77););	// 9238                  mov     ax, offset off_13C77 ;~ 01A2:3BFD
cs=0x1a2;eip=0x003c00; 	J(CALL(sub_19c64,0));	// 9239                  call    sub_19C64 ;~ 01A2:3C00
cs=0x1a2;eip=0x003c03; 	T(dx = *(dw*)(((db*)&off_1f736)+2););	// 9240                  mov     dx, word ptr ds:off_1F736+2 ;~ 01A2:3C03
cs=0x1a2;eip=0x003c07; 	X(MOV(*(raddr(ds,bx+3)), dl));	// 9241                  mov     [bx+3], dl ;~ 01A2:3C07
cs=0x1a2;eip=0x003c0a; 	T(XOR(ah, ah));	// 9242                  xor     ah, ah ;~ 01A2:3C0A
cs=0x1a2;eip=0x003c0c; 	T(OR(al, al));	// 9243                  or      al, al ;~ 01A2:3C0C
cs=0x1a2;eip=0x003c0e; 	J(JZ(loc_13bd7));	// 9244                  jz      short loc_13BD7 ;~ 01A2:3C0E
loc_13c10:
	// 4990 
cs=0x1a2;eip=0x003c10; 	T(XOR(ah, ah));	// 9248                  xor     ah, ah ;~ 01A2:3C10
cs=0x1a2;eip=0x003c12; 	T(MOV(dh, *(raddr(ds,bx+1))));	// 9249                  mov     dh, [bx+1] ;~ 01A2:3C12
cs=0x1a2;eip=0x003c15; 	T(CMP(*(raddr(ds,bx)), 0));	// 9250                  cmp     byte ptr [bx], 0 ;~ 01A2:3C15
cs=0x1a2;eip=0x003c18; 	J(JZ(loc_13c22));	// 9251                  jz      short loc_13C22 ;~ 01A2:3C18
cs=0x1a2;eip=0x003c1a; 	J(JS(loc_13c4f));	// 9253                  js      short loc_13C4F ;~ 01A2:3C1A
cs=0x1a2;eip=0x003c1c; 	X(DEC(*(raddr(ds,bx))));	// 9254                  dec     byte ptr [bx] ;~ 01A2:3C1C
cs=0x1a2;eip=0x003c1e; 	J(JNZ(loc_13c4f));	// 9255                  jnz     short loc_13C4F ;~ 01A2:3C1E
cs=0x1a2;eip=0x003c20; 	J(JMP(loc_13c2b));	// 9256                  jmp     short loc_13C2B ;~ 01A2:3C20
loc_13c22:
	// 4991 
cs=0x1a2;eip=0x003c22; 	T(MOV(al, *(raddr(es,bp+1))));	// 9260                  mov     al, es:[bp+1] ;~ 01A2:3C22
cs=0x1a2;eip=0x003c26; 	X(MOV(*(raddr(ds,bx+1)), al));	// 9261                  mov     [bx+1], al ;~ 01A2:3C26
cs=0x1a2;eip=0x003c29; 	T(dh = al;);	// 9262                  mov     dh, al ;~ 01A2:3C29
loc_13c2b:
	// 4992 
cs=0x1a2;eip=0x003c2b; 	T(CMP(*(raddr(ds,bx+2)), 0));	// 9265                  cmp     byte ptr [bx+2], 0 ;~ 01A2:3C2B
cs=0x1a2;eip=0x003c2f; 	J(JZ(loc_13c3b));	// 9266                  jz      short loc_13C3B ;~ 01A2:3C2F
cs=0x1a2;eip=0x003c31; 	T(DEC(dl));	// 9268                  dec     dl ;~ 01A2:3C31
cs=0x1a2;eip=0x003c33; 	J(JNZ(loc_13c3d));	// 9269                  jnz     short loc_13C3D ;~ 01A2:3C33
cs=0x1a2;eip=0x003c35; 	X(MOV(*(raddr(ds,bx+2)), 0));	// 9270                  mov     byte ptr [bx+2], 0 ;~ 01A2:3C35
cs=0x1a2;eip=0x003c39; 	J(JMP(loc_13c3d));	// 9271                  jmp     short loc_13C3D ;~ 01A2:3C39
loc_13c3b:
	// 4993 
cs=0x1a2;eip=0x003c3b; 	T(INC(dl));	// 9275                  inc     dl ;~ 01A2:3C3B
loc_13c3d:
	// 4994 
cs=0x1a2;eip=0x003c3d; 	T(MOV(al, *(raddr(ds,bx+9))));	// 9279                  mov     al, [bx+9] ;~ 01A2:3C3D
cs=0x1a2;eip=0x003c40; 	T(OR(al, al));	// 9280                  or      al, al ;~ 01A2:3C40
cs=0x1a2;eip=0x003c42; 	J(JZ(loc_13c4c));	// 9281                  jz      short loc_13C4C ;~ 01A2:3C42
cs=0x1a2;eip=0x003c44; 	X(DEC(*(raddr(ds,bx+8))));	// 9283                  dec     byte ptr [bx+8] ;~ 01A2:3C44
cs=0x1a2;eip=0x003c47; 	J(JNS(loc_13c4f));	// 9284                  jns     short loc_13C4F ;~ 01A2:3C47
cs=0x1a2;eip=0x003c49; 	X(MOV(*(raddr(ds,bx+8)), al));	// 9285                  mov     [bx+8], al ;~ 01A2:3C49
loc_13c4c:
	// 4995 
cs=0x1a2;eip=0x003c4c; 	X(MOV(*(raddr(ds,bx+3)), dl));	// 9288                  mov     [bx+3], dl ;~ 01A2:3C4C
loc_13c4f:
	// 4996 
cs=0x1a2;eip=0x003c4f; 	T(MOV(ax, *(dw*)(raddr(es,di+0x22))));	// 9292                  mov     ax, es:[di+22h] ;~ 01A2:3C4F
cs=0x1a2;eip=0x003c53; 	T(ADD(di, ax));	// 9293                  add     di, ax ;~ 01A2:3C53
cs=0x1a2;eip=0x003c55; 	T(ADD(di, 0x28));	// 9294                  add     di, 28h ; '(' ;~ 01A2:3C55
cs=0x1a2;eip=0x003c58; 	T(al = dh;);	// 9295                  mov     al, dh ;~ 01A2:3C58
cs=0x1a2;eip=0x003c5a; 	T(XOR(ah, ah));	// 9296                  xor     ah, ah ;~ 01A2:3C5A
cs=0x1a2;eip=0x003c5c; 	T(dx = 8;);	// 9297                  mov     dx, 8 ;~ 01A2:3C5C
cs=0x1a2;eip=0x003c5f; 	T(MUL1_2(dx));	// 9298                  mul     dx ;~ 01A2:3C5F
cs=0x1a2;eip=0x003c61; 	T(dx = ax;);	// 9299                  mov     dx, ax ;~ 01A2:3C61
cs=0x1a2;eip=0x003c63; 	T(ADD(di, ax));	// 9300                  add     di, ax ;~ 01A2:3C63
cs=0x1a2;eip=0x003c65; 	T(MOV(dx, *(dw*)(raddr(es,di))));	// 9301                  mov     dx, es:[di] ;~ 01A2:3C65
cs=0x1a2;eip=0x003c68; 	T(MOV(ax, *(dw*)(raddr(es,di+2))));	// 9302                  mov     ax, es:[di+2] ;~ 01A2:3C68
cs=0x1a2;eip=0x003c6c; 	X(MOV(*(dw*)(raddr(ds,bx+4)), ax));	// 9303                  mov     [bx+4], ax ;~ 01A2:3C6C
cs=0x1a2;eip=0x003c6f; 	T(MOV(ax, *(dw*)(raddr(es,di+4))));	// 9304                  mov     ax, es:[di+4] ;~ 01A2:3C6F
cs=0x1a2;eip=0x003c73; 	X(MOV(*(dw*)(raddr(ds,bx+6)), ax));	// 9305                  mov     [bx+6], ax ;~ 01A2:3C73
cs=0x1a2;eip=0x003c76; 	J(RETN(0));	// 9306                  retn ;~ 01A2:3C76

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_13bd7: 	goto loc_13bd7;
        case m2c::kloc_13c10: 	goto loc_13c10;
        case m2c::kloc_13c22: 	goto loc_13c22;
        case m2c::kloc_13c2b: 	goto loc_13c2b;
        case m2c::kloc_13c3b: 	goto loc_13c3b;
        case m2c::kloc_13c3d: 	goto loc_13c3d;
        case m2c::kloc_13c4c: 	goto loc_13c4c;
        case m2c::kloc_13c4f: 	goto loc_13c4f;
        case m2c::ksub_13bc5: 	goto sub_13bc5;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_3c91_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_3c91_proc:
    _begin:
loc_13c91:
	// 4997 
cs=0x1a2;eip=0x003c91; 	X(MOV(*(raddr(ds,bx)), 0x0FF));	// 9326                  mov     byte ptr [bx], 0FFh ;~ 01A2:3C91
cs=0x1a2;eip=0x003c94; 	T(al = 1;);	// 9327                  mov     al, 1 ;~ 01A2:3C94
cs=0x1a2;eip=0x003c96; 	J(CALL(sub_13d8e,0));	// 9328                  call    sub_13D8E ;~ 01A2:3C96
cs=0x1a2;eip=0x003c99; 	X(byte_1f74e = dl;);	// 9329                  mov     ds:byte_1F74E, dl ;~ 01A2:3C99
cs=0x1a2;eip=0x003c9d; 	J(RETN(0));	// 9330                  retn ;~ 01A2:3C9D

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kseg000_3c91_proc: 	goto seg000_3c91_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13c9e(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13c9e:
    _begin:
cs=0x1a2;eip=0x003c9e; 	T(MOV(al, *(raddr(es,bp+1))));	// 9336                  mov     al, es:[bp+1] ;~ 01A2:3C9E
cs=0x1a2;eip=0x003ca2; 	X(MOV(*(raddr(ds,bx)), al));	// 9337                  mov     [bx], al ;~ 01A2:3CA2
cs=0x1a2;eip=0x003ca4; 	T(al = 1;);	// 9338                  mov     al, 1 ;~ 01A2:3CA4
cs=0x1a2;eip=0x003ca6; 	J(RETN(0));	// 9339                  retn ;~ 01A2:3CA6

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_13c9e: 	goto sub_13c9e;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13ca7(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13ca7:
    _begin:
cs=0x1a2;eip=0x003ca7; 	X(*(dw*)(((db*)&off_1f736)+2) = 0;);	// 9347                  mov     word ptr ds:off_1F736+2, 0 ;~ 01A2:3CA7
cs=0x1a2;eip=0x003cad; 	T(XOR(al, al));	// 9348                  xor     al, al ;~ 01A2:3CAD
cs=0x1a2;eip=0x003caf; 	J(RETN(0));	// 9349                  retn ;~ 01A2:3CAF

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_13ca7: 	goto sub_13ca7;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13cb0(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13cb0:
    _begin:
cs=0x1a2;eip=0x003cb0; 	T(MOV(al, *(raddr(es,bp+1))));	// 9357                  mov     al, es:[bp+1] ;~ 01A2:3CB0
cs=0x1a2;eip=0x003cb4; 	T(XOR(ah, ah));	// 9358                  xor     ah, ah ;~ 01A2:3CB4
cs=0x1a2;eip=0x003cb6; 	X(*(dw*)(((db*)&off_1f736)+2) = ax;);	// 9359                  mov     word ptr ds:off_1F736+2, ax ;~ 01A2:3CB6
cs=0x1a2;eip=0x003cb9; 	T(XOR(al, al));	// 9360                  xor     al, al ;~ 01A2:3CB9
cs=0x1a2;eip=0x003cbb; 	J(RETN(0));	// 9361                  retn ;~ 01A2:3CBB

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_13cb0: 	goto sub_13cb0;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13cbc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13cbc:
    _begin:
cs=0x1a2;eip=0x003cbc; 	X(MOV(*(raddr(ds,bx+2)), 1));	// 9370                  mov     byte ptr [bx+2], 1 ;~ 01A2:3CBC
cs=0x1a2;eip=0x003cc0; 	X(SUB(*(dw*)(((db*)&off_1f736)+2), 2));	// 9371                  sub     word ptr ds:off_1F736+2, 2 ;~ 01A2:3CC0
cs=0x1a2;eip=0x003cc5; 	T(XOR(al, al));	// 9372                  xor     al, al ;~ 01A2:3CC5
cs=0x1a2;eip=0x003cc7; 	J(RETN(0));	// 9373                  retn ;~ 01A2:3CC7

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_13cbc: 	goto sub_13cbc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_3cc8_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_3cc8_proc:
    _begin:
loc_13cc8:
	// 4998 
cs=0x1a2;eip=0x003cc8; 	T(CMP(*(raddr(ds,bx+2)), 0));	// 9379                  cmp     byte ptr [bx+2], 0 ;~ 01A2:3CC8
cs=0x1a2;eip=0x003ccc; 	J(JZ(loc_13cd2));	// 9380                  jz      short loc_13CD2 ;~ 01A2:3CCC
cs=0x1a2;eip=0x003cce; 	X(INC(*(dw*)(((db*)&off_1f736)+2)));	// 9381                  inc     word ptr ds:off_1F736+2 ;~ 01A2:3CCE
loc_13cd2:
	// 4999 
cs=0x1a2;eip=0x003cd2; 	X(INC(*(dw*)(((db*)&off_1f736)+2)));	// 9384                  inc     word ptr ds:off_1F736+2 ;~ 01A2:3CD2
cs=0x1a2;eip=0x003cd6; 	T(XOR(al, al));	// 9385                  xor     al, al ;~ 01A2:3CD6
cs=0x1a2;eip=0x003cd8; 	X(MOV(*(raddr(ds,bx+2)), 0));	// 9386                  mov     byte ptr [bx+2], 0 ;~ 01A2:3CD8
cs=0x1a2;eip=0x003cdc; 	J(RETN(0));	// 9387                  retn ;~ 01A2:3CDC

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_13cc8: 	goto loc_13cc8;
        case m2c::kloc_13cd2: 	goto loc_13cd2;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13cdd(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13cdd:
    _begin:
cs=0x1a2;eip=0x003cdd; 	T(al = 0x0FE;);	// 9394                  mov     al, 0FEh ;~ 01A2:3CDD
cs=0x1a2;eip=0x003cdf; 	X(MOV(*(raddr(ds,bx)), al));	// 9395                  mov     [bx], al ;~ 01A2:3CDF
cs=0x1a2;eip=0x003ce1; 	J(CALL(sub_13d8e,0));	// 9396                  call    sub_13D8E ;~ 01A2:3CE1
cs=0x1a2;eip=0x003ce4; 	T(al = 1;);	// 9397                  mov     al, 1 ;~ 01A2:3CE4
cs=0x1a2;eip=0x003ce6; 	J(RETN(0));	// 9398                  retn ;~ 01A2:3CE6

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_13cdd: 	goto sub_13cdd;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13ce7(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13ce7:
    _begin:
cs=0x1a2;eip=0x003ce7; 	T(XOR(ah, ah));	// 9406                  xor     ah, ah ;~ 01A2:3CE7
cs=0x1a2;eip=0x003ce9; 	T(MOV(al, *(raddr(es,bp+1))));	// 9407                  mov     al, es:[bp+1] ;~ 01A2:3CE9
cs=0x1a2;eip=0x003ced; 	T(dx = word_1f220;);	// 9408                  mov     dx, word_1F220 ;~ 01A2:3CED
cs=0x1a2;eip=0x003cf1; 	X(PUSH(si));	// 9409                  push    si ;~ 01A2:3CF1
cs=0x1a2;eip=0x003cf2; 	T(si = word_1f1f4;);	// 9410                  mov     si, word_1F1F4 ;~ 01A2:3CF2
cs=0x1a2;eip=0x003cf6; 	X(MOV(*(dw*)(raddr(ds,si)), 0x0D));	// 9411                  mov     word ptr [si], 0Dh ;~ 01A2:3CF6
cs=0x1a2;eip=0x003cfa; 	T(ADD(si, 2));	// 9412                  add     si, 2 ;~ 01A2:3CFA
cs=0x1a2;eip=0x003cfd; 	X(MOV(*(dw*)(raddr(ds,si)), dx));	// 9413                  mov     [si], dx ;~ 01A2:3CFD
cs=0x1a2;eip=0x003cff; 	T(ADD(si, 2));	// 9414                  add     si, 2 ;~ 01A2:3CFF
cs=0x1a2;eip=0x003d02; 	X(MOV(*(dw*)(raddr(ds,si)), ax));	// 9415                  mov     [si], ax ;~ 01A2:3D02
cs=0x1a2;eip=0x003d04; 	T(ADD(si, 2));	// 9416                  add     si, 2 ;~ 01A2:3D04
cs=0x1a2;eip=0x003d07; 	X(word_1f1f4 = si;);	// 9417                  mov     word_1F1F4, si ;~ 01A2:3D07
cs=0x1a2;eip=0x003d0b; 	X(INC(word_1f396));	// 9418                  inc     ds:word_1F396 ;~ 01A2:3D0B
cs=0x1a2;eip=0x003d0f; 	X(POP(si));	// 9419                  pop     si ;~ 01A2:3D0F
loc_13d10:
	// 5000 
cs=0x1a2;eip=0x003d10; 	X(INC(*(dw*)(((db*)&off_1f736)+2)));	// 9423                  inc     word ptr ds:off_1F736+2 ;~ 01A2:3D10
cs=0x1a2;eip=0x003d14; 	T(XOR(al, al));	// 9424                  xor     al, al ;~ 01A2:3D14
cs=0x1a2;eip=0x003d16; 	J(RETN(0));	// 9425                  retn ;~ 01A2:3D16

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_13d10: 	goto loc_13d10;
        case m2c::ksub_13ce7: 	goto sub_13ce7;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13d17(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13d17:
    _begin:
cs=0x1a2;eip=0x003d17; 	X(PUSH(si));	// 9434                  push    si ;~ 01A2:3D17
cs=0x1a2;eip=0x003d18; 	X(PUSH(bx));	// 9435                  push    bx ;~ 01A2:3D18
cs=0x1a2;eip=0x003d19; 	X(PUSH(cx));	// 9436                  push    cx ;~ 01A2:3D19
cs=0x1a2;eip=0x003d1a; 	T(si = word_1f220;);	// 9437                  mov     si, word_1F220 ;~ 01A2:3D1A
cs=0x1a2;eip=0x003d1e; 	T(XOR(bh, bh));	// 9438                  xor     bh, bh ;~ 01A2:3D1E
cs=0x1a2;eip=0x003d20; 	T(MOV(bl, *(raddr(ds,si+0x0C))));	// 9439                  mov     bl, [si+0Ch] ;~ 01A2:3D20
cs=0x1a2;eip=0x003d23; 	T(MOV(bl, *(raddr(ds,bx+si+1))));	// 9440                  mov     bl, [bx+si+1] ;~ 01A2:3D23
cs=0x1a2;eip=0x003d26; 	T(XOR(dh, dh));	// 9441                  xor     dh, dh ;~ 01A2:3D26
cs=0x1a2;eip=0x003d28; 	T(MOV(dl, *(raddr(es,bp+1))));	// 9442                  mov     dl, es:[bp+1] ;~ 01A2:3D28
cs=0x1a2;eip=0x003d2c; 	T(MOV(cx, *(dw*)(raddr(ds,si+4))));	// 9443                  mov     cx, [si+4] ;~ 01A2:3D2C
cs=0x1a2;eip=0x003d2f; 	T(si = word_1f1f6;);	// 9444                  mov     si, word_1F1F6 ;~ 01A2:3D2F
cs=0x1a2;eip=0x003d33; 	X(MOV(*(raddr(ds,si)), bl));	// 9445                  mov     [si], bl ;~ 01A2:3D33
cs=0x1a2;eip=0x003d35; 	T(INC(si));	// 9446                  inc     si ;~ 01A2:3D35
cs=0x1a2;eip=0x003d36; 	X(MOV(*(raddr(ds,si)), dl));	// 9447                  mov     [si], dl ;~ 01A2:3D36
cs=0x1a2;eip=0x003d38; 	T(INC(si));	// 9448                  inc     si ;~ 01A2:3D38
cs=0x1a2;eip=0x003d39; 	X(MOV(*(dw*)(raddr(ds,si)), cx));	// 9449                  mov     [si], cx ;~ 01A2:3D39
cs=0x1a2;eip=0x003d3b; 	T(ADD(si, 2));	// 9450                  add     si, 2 ;~ 01A2:3D3B
cs=0x1a2;eip=0x003d3e; 	X(word_1f1f6 = si;);	// 9451                  mov     word_1F1F6, si ;~ 01A2:3D3E
cs=0x1a2;eip=0x003d42; 	X(INC(word_1f3ec));	// 9452                  inc     ds:word_1F3EC ;~ 01A2:3D42
cs=0x1a2;eip=0x003d46; 	X(POP(cx));	// 9453                  pop     cx ;~ 01A2:3D46
cs=0x1a2;eip=0x003d47; 	X(POP(bx));	// 9454                  pop     bx ;~ 01A2:3D47
cs=0x1a2;eip=0x003d48; 	X(POP(si));	// 9455                  pop     si ;~ 01A2:3D48
cs=0x1a2;eip=0x003d49; 	J(return sub_13ce7(m2c::kloc_13d10, _state););	// 9456                  jmp     short loc_13D10 ;~ 01A2:3D49

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_13d17: 	goto sub_13d17;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_3d4b_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_3d4b_proc:
    _begin:
loc_13d4b:
	// 5001 
cs=0x1a2;eip=0x003d4b; 	X(PUSH(si));	// 9462                  push    si ;~ 01A2:3D4B
cs=0x1a2;eip=0x003d4c; 	X(PUSH(bx));	// 9463                  push    bx ;~ 01A2:3D4C
cs=0x1a2;eip=0x003d4d; 	T(si = word_1f220;);	// 9464                  mov     si, word_1F220 ;~ 01A2:3D4D
cs=0x1a2;eip=0x003d51; 	T(XOR(bh, bh));	// 9465                  xor     bh, bh ;~ 01A2:3D51
cs=0x1a2;eip=0x003d53; 	T(MOV(bl, *(raddr(ds,si+0x0C))));	// 9466                  mov     bl, [si+0Ch] ;~ 01A2:3D53
cs=0x1a2;eip=0x003d56; 	T(ADD(bl, *(raddr(es,bp+1))));	// 9467                  add     bl, es:[bp+1] ;~ 01A2:3D56
cs=0x1a2;eip=0x003d5a; 	X(INC(*(raddr(ds,bx+si+8))));	// 9468                  inc     byte ptr [bx+si+8] ;~ 01A2:3D5A
cs=0x1a2;eip=0x003d5d; 	X(POP(bx));	// 9469                  pop     bx ;~ 01A2:3D5D
cs=0x1a2;eip=0x003d5e; 	X(POP(si));	// 9470                  pop     si ;~ 01A2:3D5E
cs=0x1a2;eip=0x003d5f; 	J(return sub_13ce7(m2c::kloc_13d10, _state););	// 9471                  jmp     short loc_13D10 ;~ 01A2:3D5F

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_13d4b: 	goto loc_13d4b;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13d61(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13d61:
    _begin:
cs=0x1a2;eip=0x003d61; 	X(PUSH(si));	// 9478                  push    si ;~ 01A2:3D61
cs=0x1a2;eip=0x003d62; 	X(PUSH(bx));	// 9479                  push    bx ;~ 01A2:3D62
cs=0x1a2;eip=0x003d63; 	T(si = word_1f220;);	// 9480                  mov     si, word_1F220 ;~ 01A2:3D63
cs=0x1a2;eip=0x003d67; 	T(XOR(bh, bh));	// 9481                  xor     bh, bh ;~ 01A2:3D67
cs=0x1a2;eip=0x003d69; 	T(MOV(bl, *(raddr(ds,si+0x0C))));	// 9482                  mov     bl, [si+0Ch] ;~ 01A2:3D69
cs=0x1a2;eip=0x003d6c; 	T(ADD(bl, *(raddr(es,bp+1))));	// 9483                  add     bl, es:[bp+1] ;~ 01A2:3D6C
cs=0x1a2;eip=0x003d70; 	X(DEC(*(raddr(ds,bx+si+8))));	// 9484                  dec     byte ptr [bx+si+8] ;~ 01A2:3D70
cs=0x1a2;eip=0x003d73; 	X(POP(bx));	// 9485                  pop     bx ;~ 01A2:3D73
cs=0x1a2;eip=0x003d74; 	X(POP(si));	// 9486                  pop     si ;~ 01A2:3D74
cs=0x1a2;eip=0x003d75; 	J(return sub_13ce7(m2c::kloc_13d10, _state););	// 9487                  jmp     short loc_13D10 ;~ 01A2:3D75

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_13d61: 	goto sub_13d61;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_3d77_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_3d77_proc:
    _begin:
loc_13d77:
	// 5002 
cs=0x1a2;eip=0x003d77; 	T(al = 1;);	// 9493                  mov     al, 1 ;~ 01A2:3D77
cs=0x1a2;eip=0x003d79; 	J(JMP(loc_13d7d));	// 9494                  jmp     short loc_13D7D ;~ 01A2:3D79
loc_13d7b:
	// 5003 
cs=0x1a2;eip=0x003d7b; 	T(al = 3;);	// 9498                  mov     al, 3 ;~ 01A2:3D7B
loc_13d7d:
	// 5004 
cs=0x1a2;eip=0x003d7d; 	X(PUSH(si));	// 9501                  push    si ;~ 01A2:3D7D
cs=0x1a2;eip=0x003d7e; 	X(PUSH(bx));	// 9502                  push    bx ;~ 01A2:3D7E
cs=0x1a2;eip=0x003d7f; 	T(si = word_1f220;);	// 9503                  mov     si, word_1F220 ;~ 01A2:3D7F
cs=0x1a2;eip=0x003d83; 	T(XOR(bh, bh));	// 9504                  xor     bh, bh ;~ 01A2:3D83
cs=0x1a2;eip=0x003d85; 	T(MOV(bl, *(raddr(ds,si+0x0D))));	// 9505                  mov     bl, [si+0Dh] ;~ 01A2:3D85
cs=0x1a2;eip=0x003d88; 	X(MOV(*(raddr(ds,bx+si)), al));	// 9506                  mov     [bx+si], al ;~ 01A2:3D88
cs=0x1a2;eip=0x003d8a; 	X(POP(bx));	// 9507                  pop     bx ;~ 01A2:3D8A
cs=0x1a2;eip=0x003d8b; 	X(POP(si));	// 9508                  pop     si ;~ 01A2:3D8B
cs=0x1a2;eip=0x003d8c; 	J(return sub_13ce7(m2c::kloc_13d10, _state););	// 9509                  jmp     short loc_13D10 ;~ 01A2:3D8C

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_13d7b: 	goto loc_13d7b;
        case m2c::kloc_13d7d: 	goto loc_13d7d;
        case m2c::kseg000_3d77_proc: 	goto seg000_3d77_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13d8e(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13d8e:
    _begin:
cs=0x1a2;eip=0x003d8e; 	X(PUSH(ax));	// 9517                  push    ax ;~ 01A2:3D8E
cs=0x1a2;eip=0x003d8f; 	X(PUSH(bx));	// 9518                  push    bx ;~ 01A2:3D8F
cs=0x1a2;eip=0x003d90; 	X(PUSH(cx));	// 9519                  push    cx ;~ 01A2:3D90
cs=0x1a2;eip=0x003d91; 	X(PUSH(dx));	// 9520                  push    dx ;~ 01A2:3D91
cs=0x1a2;eip=0x003d92; 	X(PUSH(bp));	// 9521                  push    bp ;~ 01A2:3D92
cs=0x1a2;eip=0x003d93; 	X(PUSH(si));	// 9522                  push    si ;~ 01A2:3D93
cs=0x1a2;eip=0x003d94; 	X(PUSH(di));	// 9523                  push    di ;~ 01A2:3D94
cs=0x1a2;eip=0x003d95; 	X(PUSH(es));	// 9524                  push    es ;~ 01A2:3D95
cs=0x1a2;eip=0x003d96; 	X(PUSH(ds));	// 9525                  push    ds ;~ 01A2:3D96
cs=0x1a2;eip=0x003d97; 	T(si = word_1f220;);	// 9526                  mov     si, word_1F220 ;~ 01A2:3D97
cs=0x1a2;eip=0x003d9b; 	T(TEST(*(raddr(ds,si+0x0F)), 1));	// 9527                  test    byte ptr [si+0Fh], 1 ;~ 01A2:3D9B
cs=0x1a2;eip=0x003d9f; 	X(PUSHF);	// 9528                  pushf ;~ 01A2:3D9F
cs=0x1a2;eip=0x003da0; 	X(OR(*(raddr(ds,si+0x0F)), 1));	// 9529                  or      byte ptr [si+0Fh], 1 ;~ 01A2:3DA0
cs=0x1a2;eip=0x003da4; 	X(POPF);	// 9530                  popf ;~ 01A2:3DA4
cs=0x1a2;eip=0x003da5; 	J(JNZ(loc_13dae));	// 9531                  jnz     short loc_13DAE ;~ 01A2:3DA5
cs=0x1a2;eip=0x003da7; 	T(si = word_1f244;);	// 9532                  mov     si, word_1F244 ;~ 01A2:3DA7
cs=0x1a2;eip=0x003dab; 	J(CALL(sub_1577a,0));	// 9533                  call    sub_1577A ;~ 01A2:3DAB
loc_13dae:
	// 5005 
cs=0x1a2;eip=0x003dae; 	X(POP(ds));	// 9537                  pop     ds ;~ 01A2:3DAE
cs=0x1a2;eip=0x003daf; 	X(POP(es));	// 9538                  pop     es ;~ 01A2:3DAF
cs=0x1a2;eip=0x003db0; 	X(POP(di));	// 9540                  pop     di ;~ 01A2:3DB0
cs=0x1a2;eip=0x003db1; 	X(POP(si));	// 9541                  pop     si ;~ 01A2:3DB1
cs=0x1a2;eip=0x003db2; 	X(POP(bp));	// 9542                  pop     bp ;~ 01A2:3DB2
cs=0x1a2;eip=0x003db3; 	X(POP(dx));	// 9543                  pop     dx ;~ 01A2:3DB3
cs=0x1a2;eip=0x003db4; 	X(POP(cx));	// 9544                  pop     cx ;~ 01A2:3DB4
cs=0x1a2;eip=0x003db5; 	X(POP(bx));	// 9545                  pop     bx ;~ 01A2:3DB5
cs=0x1a2;eip=0x003db6; 	X(POP(ax));	// 9546                  pop     ax ;~ 01A2:3DB6
cs=0x1a2;eip=0x003db7; 	J(RETN(0));	// 9547                  retn ;~ 01A2:3DB7

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_13dae: 	goto loc_13dae;
        case m2c::ksub_13d8e: 	goto sub_13d8e;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13db8(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13db8:
    _begin:
cs=0x1a2;eip=0x003db8; 	X(PUSH(ax));	// 9555                  push    ax ;~ 01A2:3DB8
cs=0x1a2;eip=0x003db9; 	X(PUSH(bx));	// 9556                  push    bx ;~ 01A2:3DB9
cs=0x1a2;eip=0x003dba; 	X(PUSH(cx));	// 9557                  push    cx ;~ 01A2:3DBA
cs=0x1a2;eip=0x003dbb; 	X(PUSH(dx));	// 9558                  push    dx ;~ 01A2:3DBB
cs=0x1a2;eip=0x003dbc; 	X(PUSH(bp));	// 9559                  push    bp ;~ 01A2:3DBC
cs=0x1a2;eip=0x003dbd; 	X(PUSH(si));	// 9560                  push    si ;~ 01A2:3DBD
cs=0x1a2;eip=0x003dbe; 	X(PUSH(di));	// 9561                  push    di ;~ 01A2:3DBE
cs=0x1a2;eip=0x003dbf; 	X(PUSH(es));	// 9562                  push    es ;~ 01A2:3DBF
cs=0x1a2;eip=0x003dc0; 	X(PUSH(ds));	// 9563                  push    ds ;~ 01A2:3DC0
cs=0x1a2;eip=0x003dc1; 	T(si = word_1f220;);	// 9564                  mov     si, word_1F220 ;~ 01A2:3DC1
cs=0x1a2;eip=0x003dc5; 	T(TEST(*(raddr(ds,si+0x0F)), 1));	// 9565                  test    byte ptr [si+0Fh], 1 ;~ 01A2:3DC5
cs=0x1a2;eip=0x003dc9; 	X(PUSHF);	// 9566                  pushf ;~ 01A2:3DC9
cs=0x1a2;eip=0x003dca; 	X(AND(*(raddr(ds,si+0x0F)), 0x0FE));	// 9567                  and     byte ptr [si+0Fh], 0FEh ;~ 01A2:3DCA
cs=0x1a2;eip=0x003dce; 	X(POPF);	// 9568                  popf ;~ 01A2:3DCE
cs=0x1a2;eip=0x003dcf; 	J(JZ(loc_13dd8));	// 9569                  jz      short loc_13DD8 ;~ 01A2:3DCF
cs=0x1a2;eip=0x003dd1; 	T(si = word_1f244;);	// 9570                  mov     si, word_1F244 ;~ 01A2:3DD1
cs=0x1a2;eip=0x003dd5; 	J(CALL(sub_1577a,0));	// 9571                  call    sub_1577A ;~ 01A2:3DD5
loc_13dd8:
	// 5006 
cs=0x1a2;eip=0x003dd8; 	X(POP(ds));	// 9574                  pop     ds ;~ 01A2:3DD8
cs=0x1a2;eip=0x003dd9; 	X(POP(es));	// 9575                  pop     es ;~ 01A2:3DD9
cs=0x1a2;eip=0x003dda; 	X(POP(di));	// 9577                  pop     di ;~ 01A2:3DDA
cs=0x1a2;eip=0x003ddb; 	X(POP(si));	// 9578                  pop     si ;~ 01A2:3DDB
cs=0x1a2;eip=0x003ddc; 	X(POP(bp));	// 9579                  pop     bp ;~ 01A2:3DDC
cs=0x1a2;eip=0x003ddd; 	X(POP(dx));	// 9580                  pop     dx ;~ 01A2:3DDD
cs=0x1a2;eip=0x003dde; 	X(POP(cx));	// 9581                  pop     cx ;~ 01A2:3DDE
cs=0x1a2;eip=0x003ddf; 	X(POP(bx));	// 9582                  pop     bx ;~ 01A2:3DDF
cs=0x1a2;eip=0x003de0; 	X(POP(ax));	// 9583                  pop     ax ;~ 01A2:3DE0
cs=0x1a2;eip=0x003de1; 	J(RETN(0));	// 9584                  retn ;~ 01A2:3DE1

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_13dd8: 	goto loc_13dd8;
        case m2c::ksub_13db8: 	goto sub_13db8;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13de2(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13de2:
    _begin:
cs=0x1a2;eip=0x003de2; 	T(XOR(bh, bh));	// 9593                  xor     bh, bh ;~ 01A2:3DE2
cs=0x1a2;eip=0x003de4; 	T(bl = cl;);	// 9594                  mov     bl, cl ;~ 01A2:3DE4
cs=0x1a2;eip=0x003de6; 	X(word_1f3e8 = bx;);	// 9595                  mov     ds:word_1F3E8, bx ;~ 01A2:3DE6
cs=0x1a2;eip=0x003dea; 	X(PUSH(dx));	// 9596                  push    dx ;~ 01A2:3DEA
cs=0x1a2;eip=0x003deb; 	X(PUSH(ax));	// 9597                  push    ax ;~ 01A2:3DEB
cs=0x1a2;eip=0x003dec; 	T(dx = bx;);	// 9598                  mov     dx, bx ;~ 01A2:3DEC
cs=0x1a2;eip=0x003dee; 	T(ax = 3;);	// 9599                  mov     ax, 3 ;~ 01A2:3DEE
cs=0x1a2;eip=0x003df1; 	J(CALL(sub_1410e,0));	// 9600                  call    sub_1410E ;~ 01A2:3DF1
cs=0x1a2;eip=0x003df4; 	X(word_1f224 = di;);	// 9601                  mov     word_1F224, di ;~ 01A2:3DF4
cs=0x1a2;eip=0x003df8; 	X(POP(ax));	// 9602                  pop     ax ;~ 01A2:3DF8
cs=0x1a2;eip=0x003df9; 	X(POP(dx));	// 9603                  pop     dx ;~ 01A2:3DF9
cs=0x1a2;eip=0x003dfa; 	J(return sub_13dfc(m2c::kloc_13e0a, _state););	// 9604                  jmp     short loc_13E0A ;~ 01A2:3DFA

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_13de2: 	goto sub_13de2;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13dfc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13dfc:
    _begin:
cs=0x1a2;eip=0x003dfc; 	X(PUSH(ax));	// 9612                  push    ax ;~ 01A2:3DFC
cs=0x1a2;eip=0x003dfd; 	T(ax = word_1f1ce;);	// 9613                  mov     ax, word_1F1CE ;~ 01A2:3DFD
cs=0x1a2;eip=0x003e00; 	X(word_1f224 = ax;);	// 9614                  mov     word_1F224, ax ;~ 01A2:3E00
cs=0x1a2;eip=0x003e03; 	T(ax = word_1f3a2;);	// 9615                  mov     ax, ds:word_1F3A2 ;~ 01A2:3E03
cs=0x1a2;eip=0x003e06; 	X(word_1f3e8 = ax;);	// 9616                  mov     ds:word_1F3E8, ax ;~ 01A2:3E06
cs=0x1a2;eip=0x003e09; 	X(POP(ax));	// 9617                  pop     ax ;~ 01A2:3E09
loc_13e0a:
	// 5007 
cs=0x1a2;eip=0x003e0a; 	X(PUSH(ax));	// 9620                  push    ax ;~ 01A2:3E0A
cs=0x1a2;eip=0x003e0b; 	X(PUSH(dx));	// 9621                  push    dx ;~ 01A2:3E0B
cs=0x1a2;eip=0x003e0c; 	T(dx = ax;);	// 9622                  mov     dx, ax ;~ 01A2:3E0C
cs=0x1a2;eip=0x003e0e; 	T(ax = 6;);	// 9623                  mov     ax, 6 ;~ 01A2:3E0E
cs=0x1a2;eip=0x003e11; 	J(CALL(sub_1410e,0));	// 9624                  call    sub_1410E ;~ 01A2:3E11
cs=0x1a2;eip=0x003e14; 	T(si = di;);	// 9625                  mov     si, di ;~ 01A2:3E14
cs=0x1a2;eip=0x003e16; 	X(POP(dx));	// 9626                  pop     dx ;~ 01A2:3E16
cs=0x1a2;eip=0x003e17; 	X(MOV(*(raddr(ds,si)), dl));	// 9627                  mov     [si], dl ;~ 01A2:3E17
cs=0x1a2;eip=0x003e19; 	X(MOV(*(raddr(ds,si+1)), dh));	// 9628                  mov     [si+1], dh ;~ 01A2:3E19
cs=0x1a2;eip=0x003e1c; 	X(MOV(*(raddr(ds,si+2)), ch));	// 9629                  mov     [si+2], ch ;~ 01A2:3E1C
cs=0x1a2;eip=0x003e1f; 	T(MOV(dx, *(dw*)(raddr(ds,si+6))));	// 9630                  mov     dx, [si+6] ;~ 01A2:3E1F
cs=0x1a2;eip=0x003e22; 	T(ax = 2;);	// 9631                  mov     ax, 2 ;~ 01A2:3E22
cs=0x1a2;eip=0x003e25; 	J(CALL(sub_1410e,0));	// 9632                  call    sub_1410E ;~ 01A2:3E25
cs=0x1a2;eip=0x003e28; 	T(bx = word_1f224;);	// 9633                  mov     bx, word_1F224 ;~ 01A2:3E28
cs=0x1a2;eip=0x003e2c; 	T(TEST(*(raddr(es,di+0x0C)), 1));	// 9634                  test    byte ptr es:[di+0Ch], 1 ;~ 01A2:3E2C
cs=0x1a2;eip=0x003e31; 	J(JZ(loc_13e3e));	// 9635                  jz      short loc_13E3E ;~ 01A2:3E31
cs=0x1a2;eip=0x003e33; 	T(CMP(*(raddr(ds,bx+0x1B)), 0x20));	// 9636                  cmp     byte ptr [bx+1Bh], 20h ; ' ' ;~ 01A2:3E33
cs=0x1a2;eip=0x003e37; 	J(JZ(loc_13e68));	// 9637                  jz      short loc_13E68 ;~ 01A2:3E37
cs=0x1a2;eip=0x003e39; 	X(INC(*(raddr(ds,bx+0x1B))));	// 9638                  inc     byte ptr [bx+1Bh] ;~ 01A2:3E39
cs=0x1a2;eip=0x003e3c; 	J(JMP(loc_13e47));	// 9639                  jmp     short loc_13E47 ;~ 01A2:3E3C
loc_13e3e:
	// 5008 
cs=0x1a2;eip=0x003e3e; 	T(CMP(*(raddr(ds,bx+0x1C)), 0x40));	// 9643                  cmp     byte ptr [bx+1Ch], 40h ; '@' ;~ 01A2:3E3E
cs=0x1a2;eip=0x003e42; 	J(JZ(loc_13e68));	// 9644                  jz      short loc_13E68 ;~ 01A2:3E42
cs=0x1a2;eip=0x003e44; 	X(INC(*(raddr(ds,bx+0x1C))));	// 9645                  inc     byte ptr [bx+1Ch] ;~ 01A2:3E44
loc_13e47:
	// 5009 
cs=0x1a2;eip=0x003e47; 	T(dx = word_1f3e8;);	// 9648                  mov     dx, ds:word_1F3E8 ;~ 01A2:3E47
cs=0x1a2;eip=0x003e4b; 	X(MOV(*(raddr(ds,si+0x0A)), dl));	// 9649                  mov     [si+0Ah], dl ;~ 01A2:3E4B
cs=0x1a2;eip=0x003e4e; 	X(INC(*(raddr(ds,bx+0x1D))));	// 9650                  inc     byte ptr [bx+1Dh] ;~ 01A2:3E4E
cs=0x1a2;eip=0x003e51; 	T(al = 5;);	// 9651                  mov     al, 5 ;~ 01A2:3E51
cs=0x1a2;eip=0x003e53; 	T(cx = 2;);	// 9652                  mov     cx, 2 ;~ 01A2:3E53
cs=0x1a2;eip=0x003e56; 	T(bp = 0x0FFFF;);	// 9653                  mov     bp, 0FFFFh ;~ 01A2:3E56
cs=0x1a2;eip=0x003e59; 	T(XOR(si, si));	// 9654                  xor     si, si ;~ 01A2:3E59
cs=0x1a2;eip=0x003e5b; 	J(CALL(sub_1440a,0));	// 9655                  call    sub_1440A ;~ 01A2:3E5B
cs=0x1a2;eip=0x003e5e; 	T(si = *(dw*)(&off_1f194););	// 9656                  mov     si, word ptr off_1F194 ;~ 01A2:3E5E
cs=0x1a2;eip=0x003e62; 	X(POP(ax));	// 9657                  pop     ax ;~ 01A2:3E62
cs=0x1a2;eip=0x003e63; 	X(MOV(*(dw*)(raddr(ds,si)), ax));	// 9658                  mov     [si], ax ;~ 01A2:3E63
cs=0x1a2;eip=0x003e65; 	T(XOR(dl, dl));	// 9659                  xor     dl, dl ;~ 01A2:3E65
cs=0x1a2;eip=0x003e67; 	J(RETN(0));	// 9660                  retn ;~ 01A2:3E67
loc_13e68:
	// 5010 
cs=0x1a2;eip=0x003e68; 	X(POP(ax));	// 9665                  pop     ax ;~ 01A2:3E68
cs=0x1a2;eip=0x003e69; 	T(OR(dl, 0x0FF));	// 9666                  or      dl, 0FFh ;~ 01A2:3E69
cs=0x1a2;eip=0x003e6c; 	J(RETN(0));	// 9667                  retn ;~ 01A2:3E6C

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_13e0a: 	goto loc_13e0a;
        case m2c::kloc_13e3e: 	goto loc_13e3e;
        case m2c::kloc_13e47: 	goto loc_13e47;
        case m2c::kloc_13e68: 	goto loc_13e68;
        case m2c::ksub_13dfc: 	goto sub_13dfc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13e6d(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13e6d:
    _begin:
cs=0x1a2;eip=0x003e6d; 	X(PUSH(ax));	// 9676                  push    ax ;~ 01A2:3E6D
cs=0x1a2;eip=0x003e6e; 	X(PUSH(bx));	// 9677                  push    bx ;~ 01A2:3E6E
cs=0x1a2;eip=0x003e6f; 	X(PUSH(cx));	// 9678                  push    cx ;~ 01A2:3E6F
cs=0x1a2;eip=0x003e70; 	X(PUSH(dx));	// 9679                  push    dx ;~ 01A2:3E70
cs=0x1a2;eip=0x003e71; 	X(PUSH(bp));	// 9680                  push    bp ;~ 01A2:3E71
cs=0x1a2;eip=0x003e72; 	X(PUSH(si));	// 9681                  push    si ;~ 01A2:3E72
cs=0x1a2;eip=0x003e73; 	X(PUSH(di));	// 9682                  push    di ;~ 01A2:3E73
cs=0x1a2;eip=0x003e74; 	X(PUSH(es));	// 9683                  push    es ;~ 01A2:3E74
cs=0x1a2;eip=0x003e75; 	X(PUSH(ds));	// 9684                  push    ds ;~ 01A2:3E75
cs=0x1a2;eip=0x003e76; 	T(cx = dx;);	// 9685                  mov     cx, dx ;~ 01A2:3E76
cs=0x1a2;eip=0x003e78; 	T(ax = 6;);	// 9686                  mov     ax, 6 ;~ 01A2:3E78
cs=0x1a2;eip=0x003e7b; 	J(CALL(sub_1410e,0));	// 9687                  call    sub_1410E ;~ 01A2:3E7B
cs=0x1a2;eip=0x003e7e; 	T(MOV(al, *(raddr(ds,di+0x0A))));	// 9688                  mov     al, [di+0Ah] ;~ 01A2:3E7E
cs=0x1a2;eip=0x003e81; 	T(CMP(al, 0x0FF));	// 9689                  cmp     al, 0FFh ;~ 01A2:3E81
cs=0x1a2;eip=0x003e83; 	J(JZ(loc_13ee5));	// 9690                  jz      short loc_13EE5 ;~ 01A2:3E83
cs=0x1a2;eip=0x003e85; 	T(CMP(al, 0x0FE));	// 9691                  cmp     al, 0FEh ;~ 01A2:3E85
cs=0x1a2;eip=0x003e87; 	J(JZ(loc_13ef1));	// 9692                  jz      short loc_13EF1 ;~ 01A2:3E87
cs=0x1a2;eip=0x003e89; 	T(XOR(ah, ah));	// 9693                  xor     ah, ah ;~ 01A2:3E89
cs=0x1a2;eip=0x003e8b; 	X(PUSH(ax));	// 9694                  push    ax ;~ 01A2:3E8B
cs=0x1a2;eip=0x003e8c; 	T(MOV(dx, *(dw*)(raddr(ds,di+6))));	// 9695                  mov     dx, [di+6] ;~ 01A2:3E8C
cs=0x1a2;eip=0x003e8f; 	T(ax = 2;);	// 9696                  mov     ax, 2 ;~ 01A2:3E8F
cs=0x1a2;eip=0x003e92; 	J(CALL(sub_1410e,0));	// 9697                  call    sub_1410E ;~ 01A2:3E92
cs=0x1a2;eip=0x003e95; 	T(si = di;);	// 9698                  mov     si, di ;~ 01A2:3E95
cs=0x1a2;eip=0x003e97; 	X(POP(dx));	// 9699                  pop     dx ;~ 01A2:3E97
cs=0x1a2;eip=0x003e98; 	X(PUSH(dx));	// 9700                  push    dx ;~ 01A2:3E98
cs=0x1a2;eip=0x003e99; 	T(ax = 3;);	// 9701                  mov     ax, 3 ;~ 01A2:3E99
cs=0x1a2;eip=0x003e9c; 	J(CALL(sub_1410e,0));	// 9702                  call    sub_1410E ;~ 01A2:3E9C
cs=0x1a2;eip=0x003e9f; 	X(DEC(*(raddr(ds,di+0x1D))));	// 9703                  dec     byte ptr [di+1Dh] ;~ 01A2:3E9F
cs=0x1a2;eip=0x003ea2; 	T(TEST(*(raddr(es,si+0x0C)), 1));	// 9704                  test    byte ptr es:[si+0Ch], 1 ;~ 01A2:3EA2
cs=0x1a2;eip=0x003ea7; 	J(JZ(loc_13eae));	// 9705                  jz      short loc_13EAE ;~ 01A2:3EA7
cs=0x1a2;eip=0x003ea9; 	X(DEC(*(raddr(ds,di+0x1B))));	// 9706                  dec     byte ptr [di+1Bh] ;~ 01A2:3EA9
cs=0x1a2;eip=0x003eac; 	J(JMP(loc_13eb1));	// 9707                  jmp     short loc_13EB1 ;~ 01A2:3EAC
loc_13eae:
	// 5011 
cs=0x1a2;eip=0x003eae; 	X(DEC(*(raddr(ds,di+0x1C))));	// 9711                  dec     byte ptr [di+1Ch] ;~ 01A2:3EAE
loc_13eb1:
	// 5012 
cs=0x1a2;eip=0x003eb1; 	X(POP(dx));	// 9714                  pop     dx ;~ 01A2:3EB1
cs=0x1a2;eip=0x003eb2; 	X(PUSH(dx));	// 9715                  push    dx ;~ 01A2:3EB2
cs=0x1a2;eip=0x003eb3; 	T(ax = 5;);	// 9716                  mov     ax, 5 ;~ 01A2:3EB3
cs=0x1a2;eip=0x003eb6; 	J(CALL(sub_1410e,0));	// 9717                  call    sub_1410E ;~ 01A2:3EB6
cs=0x1a2;eip=0x003eb9; 	T(si = di;);	// 9718                  mov     si, di ;~ 01A2:3EB9
cs=0x1a2;eip=0x003ebb; 	X(word_1f3a0 = cx;);	// 9719                  mov     ds:word_1F3A0, cx ;~ 01A2:3EBB
cs=0x1a2;eip=0x003ebf; 	T(XOR(dx, dx));	// 9720                  xor     dx, dx ;~ 01A2:3EBF
cs=0x1a2;eip=0x003ec1; 	T(XOR(bp, bp));	// 9721                  xor     bp, bp ;~ 01A2:3EC1
loc_13ec3:
	// 5013 
cs=0x1a2;eip=0x003ec3; 	T(INC(dx));	// 9724                  inc     dx ;~ 01A2:3EC3
cs=0x1a2;eip=0x003ec4; 	T(LODSW);	// 9725                  lodsw ;~ 01A2:3EC4
cs=0x1a2;eip=0x003ec5; 	T(CMP(cx, ax));	// 9726                  cmp     cx, ax ;~ 01A2:3EC5
cs=0x1a2;eip=0x003ec7; 	J(JZ(loc_13ece));	// 9727                  jz      short loc_13ECE ;~ 01A2:3EC7
cs=0x1a2;eip=0x003ec9; 	T(ADD(bp, 2));	// 9728                  add     bp, 2 ;~ 01A2:3EC9
cs=0x1a2;eip=0x003ecc; 	J(JMP(loc_13ec3));	// 9729                  jmp     short loc_13EC3 ;~ 01A2:3ECC
loc_13ece:
	// 5014 
cs=0x1a2;eip=0x003ece; 	X(POP(dx));	// 9733                  pop     dx ;~ 01A2:3ECE
cs=0x1a2;eip=0x003ecf; 	T(cx = 2;);	// 9734                  mov     cx, 2 ;~ 01A2:3ECF
cs=0x1a2;eip=0x003ed2; 	T(al = 5;);	// 9735                  mov     al, 5 ;~ 01A2:3ED2
cs=0x1a2;eip=0x003ed4; 	T(XOR(si, si));	// 9736                  xor     si, si ;~ 01A2:3ED4
cs=0x1a2;eip=0x003ed6; 	J(CALL(sub_1440a,m2c::kloc_14428));	// 9737                  call    loc_14428 ;~ 01A2:3ED6
cs=0x1a2;eip=0x003ed9; 	T(XOR(al, al));	// 9738                  xor     al, al ;~ 01A2:3ED9
cs=0x1a2;eip=0x003edb; 	X(POP(ds));	// 9739                  pop     ds ;~ 01A2:3EDB
cs=0x1a2;eip=0x003edc; 	X(POP(es));	// 9740                  pop     es ;~ 01A2:3EDC
cs=0x1a2;eip=0x003edd; 	X(POP(di));	// 9741                  pop     di ;~ 01A2:3EDD
cs=0x1a2;eip=0x003ede; 	X(POP(si));	// 9742                  pop     si ;~ 01A2:3EDE
cs=0x1a2;eip=0x003edf; 	X(POP(bp));	// 9743                  pop     bp ;~ 01A2:3EDF
cs=0x1a2;eip=0x003ee0; 	X(POP(dx));	// 9744                  pop     dx ;~ 01A2:3EE0
cs=0x1a2;eip=0x003ee1; 	X(POP(cx));	// 9745                  pop     cx ;~ 01A2:3EE1
cs=0x1a2;eip=0x003ee2; 	X(POP(bx));	// 9746                  pop     bx ;~ 01A2:3EE2
cs=0x1a2;eip=0x003ee3; 	X(POP(ax));	// 9747                  pop     ax ;~ 01A2:3EE3
cs=0x1a2;eip=0x003ee4; 	J(RETN(0));	// 9748                  retn ;~ 01A2:3EE4
loc_13ee5:
	// 5015 
cs=0x1a2;eip=0x003ee5; 	T(OR(al, 0x0FF));	// 9752                  or      al, 0FFh ;~ 01A2:3EE5
cs=0x1a2;eip=0x003ee7; 	X(POP(ds));	// 9753                  pop     ds ;~ 01A2:3EE7
cs=0x1a2;eip=0x003ee8; 	X(POP(es));	// 9754                  pop     es ;~ 01A2:3EE8
cs=0x1a2;eip=0x003ee9; 	X(POP(di));	// 9755                  pop     di ;~ 01A2:3EE9
cs=0x1a2;eip=0x003eea; 	X(POP(si));	// 9756                  pop     si ;~ 01A2:3EEA
cs=0x1a2;eip=0x003eeb; 	X(POP(bp));	// 9757                  pop     bp ;~ 01A2:3EEB
cs=0x1a2;eip=0x003eec; 	X(POP(dx));	// 9758                  pop     dx ;~ 01A2:3EEC
cs=0x1a2;eip=0x003eed; 	X(POP(cx));	// 9759                  pop     cx ;~ 01A2:3EED
cs=0x1a2;eip=0x003eee; 	X(POP(bx));	// 9760                  pop     bx ;~ 01A2:3EEE
cs=0x1a2;eip=0x003eef; 	X(POP(ax));	// 9761                  pop     ax ;~ 01A2:3EEF
cs=0x1a2;eip=0x003ef0; 	J(RETN(0));	// 9762                  retn ;~ 01A2:3EF0
loc_13ef1:
	// 5016 
cs=0x1a2;eip=0x003ef1; 	T(XOR(al, al));	// 9766                  xor     al, al ;~ 01A2:3EF1
cs=0x1a2;eip=0x003ef3; 	X(POP(ds));	// 9767                  pop     ds ;~ 01A2:3EF3
cs=0x1a2;eip=0x003ef4; 	X(POP(es));	// 9769                  pop     es ;~ 01A2:3EF4
cs=0x1a2;eip=0x003ef5; 	X(POP(di));	// 9770                  pop     di ;~ 01A2:3EF5
cs=0x1a2;eip=0x003ef6; 	X(POP(si));	// 9771                  pop     si ;~ 01A2:3EF6
cs=0x1a2;eip=0x003ef7; 	X(POP(bp));	// 9772                  pop     bp ;~ 01A2:3EF7
cs=0x1a2;eip=0x003ef8; 	X(POP(dx));	// 9773                  pop     dx ;~ 01A2:3EF8
cs=0x1a2;eip=0x003ef9; 	X(POP(cx));	// 9774                  pop     cx ;~ 01A2:3EF9
cs=0x1a2;eip=0x003efa; 	X(POP(bx));	// 9775                  pop     bx ;~ 01A2:3EFA
cs=0x1a2;eip=0x003efb; 	X(POP(ax));	// 9776                  pop     ax ;~ 01A2:3EFB
cs=0x1a2;eip=0x003efc; 	J(RETN(0));	// 9777                  retn ;~ 01A2:3EFC

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_13eae: 	goto loc_13eae;
        case m2c::kloc_13eb1: 	goto loc_13eb1;
        case m2c::kloc_13ec3: 	goto loc_13ec3;
        case m2c::kloc_13ece: 	goto loc_13ece;
        case m2c::kloc_13ee5: 	goto loc_13ee5;
        case m2c::kloc_13ef1: 	goto loc_13ef1;
        case m2c::ksub_13e6d: 	goto sub_13e6d;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13efd(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13efd:
    _begin:
cs=0x1a2;eip=0x003efd; 	T(CMP(dx, word_1f3ea));	// 9787                  cmp     dx, ds:word_1F3EA ;~ 01A2:3EFD
cs=0x1a2;eip=0x003f01; 	J(JNZ(loc_13f06));	// 9788                  jnz     short loc_13F06 ;~ 01A2:3F01
cs=0x1a2;eip=0x003f03; 	J(CALL(sub_134bf,0));	// 9789                  call    sub_134BF ;~ 01A2:3F03
loc_13f06:
	// 5017 
cs=0x1a2;eip=0x003f06; 	X(PUSH(cx));	// 9792                  push    cx ;~ 01A2:3F06
cs=0x1a2;eip=0x003f07; 	X(PUSH(dx));	// 9793                  push    dx ;~ 01A2:3F07
cs=0x1a2;eip=0x003f08; 	X(PUSH(di));	// 9794                  push    di ;~ 01A2:3F08
cs=0x1a2;eip=0x003f09; 	T(cx = dx;);	// 9795                  mov     cx, dx ;~ 01A2:3F09
cs=0x1a2;eip=0x003f0b; 	T(al = 8;);	// 9796                  mov     al, 8 ;~ 01A2:3F0B
cs=0x1a2;eip=0x003f0d; 	T(dx = 0x0FFFF;);	// 9797                  mov     dx, 0FFFFh ;~ 01A2:3F0D
loc_13f10:
	// 5018 
cs=0x1a2;eip=0x003f10; 	T(INC(dx));	// 9800                  inc     dx ;~ 01A2:3F10
cs=0x1a2;eip=0x003f11; 	J(CALL(sub_1415c,0));	// 9801                  call    sub_1415C ;~ 01A2:3F11
cs=0x1a2;eip=0x003f14; 	T(CMP(cx, *(dw*)(raddr(ds,di))));	// 9802                  cmp     cx, [di] ;~ 01A2:3F14
cs=0x1a2;eip=0x003f16; 	J(JNZ(loc_13f10));	// 9803                  jnz     short loc_13F10 ;~ 01A2:3F16
cs=0x1a2;eip=0x003f18; 	T(al = 8;);	// 9804                  mov     al, 8 ;~ 01A2:3F18
cs=0x1a2;eip=0x003f1a; 	J(CALL(sub_1438a,0));	// 9805                  call    sub_1438A ;~ 01A2:3F1A
cs=0x1a2;eip=0x003f1d; 	X(DEC(byte_1f81d));	// 9806                  dec     ds:byte_1F81D ;~ 01A2:3F1D
cs=0x1a2;eip=0x003f21; 	X(POP(di));	// 9807                  pop     di ;~ 01A2:3F21
cs=0x1a2;eip=0x003f22; 	X(POP(dx));	// 9808                  pop     dx ;~ 01A2:3F22
cs=0x1a2;eip=0x003f23; 	X(POP(cx));	// 9809                  pop     cx ;~ 01A2:3F23
cs=0x1a2;eip=0x003f24; 	J(RETN(0));	// 9810                  retn ;~ 01A2:3F24

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_13f06: 	goto loc_13f06;
        case m2c::kloc_13f10: 	goto loc_13f10;
        case m2c::ksub_13efd: 	goto sub_13efd;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13f25(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13f25:
    _begin:
cs=0x1a2;eip=0x003f25; 	J(CALL(sub_13e6d,0));	// 9819                  call    sub_13E6D ;~ 01A2:3F25
cs=0x1a2;eip=0x003f28; 	J(JZ(loc_13f31));	// 9820                  jz      short loc_13F31 ;~ 01A2:3F28
cs=0x1a2;eip=0x003f2a; 	J(JNS(locret_13f34));	// 9821                  jns     short locret_13F34 ;~ 01A2:3F2A
cs=0x1a2;eip=0x003f2c; 	J(CALL(sub_13efd,0));	// 9822                  call    sub_13EFD ;~ 01A2:3F2C
cs=0x1a2;eip=0x003f2f; 	J(JMP(locret_13f34));	// 9823                  jmp     short locret_13F34 ;~ 01A2:3F2F
loc_13f31:
	// 5019 
cs=0x1a2;eip=0x003f31; 	J(CALL(sub_15108,0));	// 9827                  call    sub_15108 ;~ 01A2:3F31
locret_13f34:
	// 5020 
cs=0x1a2;eip=0x003f34; 	J(RETN(0));	// 9831                  retn ;~ 01A2:3F34

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_13f31: 	goto loc_13f31;
        case m2c::klocret_13f34: 	goto locret_13f34;
        case m2c::ksub_13f25: 	goto sub_13f25;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13f35(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13f35:
    _begin:
cs=0x1a2;eip=0x003f35; 	X(PUSH(ax));	// 9840                  push    ax ;~ 01A2:3F35
cs=0x1a2;eip=0x003f36; 	X(PUSH(bx));	// 9841                  push    bx ;~ 01A2:3F36
cs=0x1a2;eip=0x003f37; 	X(PUSH(cx));	// 9842                  push    cx ;~ 01A2:3F37
cs=0x1a2;eip=0x003f38; 	X(PUSH(dx));	// 9843                  push    dx ;~ 01A2:3F38
cs=0x1a2;eip=0x003f39; 	X(PUSH(bp));	// 9844                  push    bp ;~ 01A2:3F39
cs=0x1a2;eip=0x003f3a; 	X(PUSH(si));	// 9845                  push    si ;~ 01A2:3F3A
cs=0x1a2;eip=0x003f3b; 	X(PUSH(di));	// 9846                  push    di ;~ 01A2:3F3B
cs=0x1a2;eip=0x003f3c; 	X(PUSH(es));	// 9847                  push    es ;~ 01A2:3F3C
cs=0x1a2;eip=0x003f3d; 	X(PUSH(ds));	// 9848                  push    ds ;~ 01A2:3F3D
cs=0x1a2;eip=0x003f3e; 	X(word_1f72e = 0;);	// 9849                  mov     ds:word_1F72E, 0 ;~ 01A2:3F3E
cs=0x1a2;eip=0x003f44; 	X(word_1f730 = dx;);	// 9850                  mov     ds:word_1F730, dx ;~ 01A2:3F44
cs=0x1a2;eip=0x003f48; 	T(XOR(ch, ch));	// 9851                  xor     ch, ch ;~ 01A2:3F48
cs=0x1a2;eip=0x003f4a; 	T(cl = byte_1f81d;);	// 9852                  mov     cl, ds:byte_1F81D ;~ 01A2:3F4A
cs=0x1a2;eip=0x003f4e; 	T(CMP(cx, word_1f710));	// 9853                  cmp     cx, ds:word_1F710 ;~ 01A2:3F4E
cs=0x1a2;eip=0x003f52; 	J(JNZ(loc_13f57));	// 9854                  jnz     short loc_13F57 ;~ 01A2:3F52
cs=0x1a2;eip=0x003f54; 	J(JMP(loc_14054));	// 9855                  jmp     loc_14054 ;~ 01A2:3F54
loc_13f57:
	// 5021 
cs=0x1a2;eip=0x003f57; 	X(PUSH(di));	// 9859                  push    di ;~ 01A2:3F57
cs=0x1a2;eip=0x003f58; 	T(OR(cl, cl));	// 9860                  or      cl, cl ;~ 01A2:3F58
cs=0x1a2;eip=0x003f5a; 	J(JZ(loc_13fd6));	// 9861                  jz      short loc_13FD6 ;~ 01A2:3F5A
cs=0x1a2;eip=0x003f5c; 	T(DEC(cl));	// 9862                  dec     cl ;~ 01A2:3F5C
cs=0x1a2;eip=0x003f5e; 	T(MOV(dx, *(dw*)(raddr(ds,di+6))));	// 9863                  mov     dx, [di+6] ;~ 01A2:3F5E
cs=0x1a2;eip=0x003f61; 	T(ax = 2;);	// 9864                  mov     ax, 2 ;~ 01A2:3F61
cs=0x1a2;eip=0x003f64; 	J(CALL(sub_1410e,0));	// 9865                  call    sub_1410E ;~ 01A2:3F64
cs=0x1a2;eip=0x003f67; 	T(MOV(ch, *(raddr(es,di+0x16))));	// 9866                  mov     ch, es:[di+16h] ;~ 01A2:3F67
cs=0x1a2;eip=0x003f6b; 	T(OR(ch, ch));	// 9867                  or      ch, ch ;~ 01A2:3F6B
cs=0x1a2;eip=0x003f6d; 	J(JZ(loc_13f81));	// 9868                  jz      short loc_13F81 ;~ 01A2:3F6D
cs=0x1a2;eip=0x003f6f; 	T(si = 0x0FE46;);	// 9869                  mov     si, 0FE46h ;~ 01A2:3F6F
cs=0x1a2;eip=0x003f72; 	T(bp = 0x0FFFF;);	// 9870                  mov     bp, 0FFFFh ;~ 01A2:3F72
loc_13f75:
	// 5022 
cs=0x1a2;eip=0x003f75; 	T(INC(bp));	// 9873                  inc     bp ;~ 01A2:3F75
cs=0x1a2;eip=0x003f76; 	T(LODSB);	// 9874                  lodsb ;~ 01A2:3F76
cs=0x1a2;eip=0x003f77; 	T(OR(al, al));	// 9875                  or      al, al ;~ 01A2:3F77
cs=0x1a2;eip=0x003f79; 	J(JS(loc_13f81));	// 9876                  js      short loc_13F81 ;~ 01A2:3F79
cs=0x1a2;eip=0x003f7b; 	T(CMP(ch, al));	// 9877                  cmp     ch, al ;~ 01A2:3F7B
cs=0x1a2;eip=0x003f7d; 	J(JNZ(loc_13f75));	// 9878                  jnz     short loc_13F75 ;~ 01A2:3F7D
cs=0x1a2;eip=0x003f7f; 	J(JMP(loc_13f84));	// 9879                  jmp     short loc_13F84 ;~ 01A2:3F7F
loc_13f81:
	// 5023 
cs=0x1a2;eip=0x003f81; 	T(bp = 0x14;);	// 9884                  mov     bp, 14h ;~ 01A2:3F81
loc_13f84:
	// 5024 
cs=0x1a2;eip=0x003f84; 	X(PUSH(ax));	// 9887                  push    ax ;~ 01A2:3F84
cs=0x1a2;eip=0x003f85; 	T(al = 8;);	// 9888                  mov     al, 8 ;~ 01A2:3F85
cs=0x1a2;eip=0x003f87; 	J(CALL(sub_14060,0));	// 9889                  call    sub_14060 ;~ 01A2:3F87
cs=0x1a2;eip=0x003f8a; 	X(POP(ax));	// 9890                  pop     ax ;~ 01A2:3F8A
loc_13f8b:
	// 5025 
cs=0x1a2;eip=0x003f8b; 	T(CMP(*(dw*)(raddr(ds,si)), 0));	// 9894                  cmp     word ptr [si], 0 ;~ 01A2:3F8B
cs=0x1a2;eip=0x003f8e; 	J(JZ(loc_13fcd));	// 9895                  jz      short loc_13FCD ;~ 01A2:3F8E
cs=0x1a2;eip=0x003f90; 	X(PUSH(ax));	// 9896                  push    ax ;~ 01A2:3F90
cs=0x1a2;eip=0x003f91; 	T(MOV(dx, *(dw*)(raddr(ds,bx+2))));	// 9897                  mov     dx, [bx+2] ;~ 01A2:3F91
cs=0x1a2;eip=0x003f94; 	T(ax = 2;);	// 9898                  mov     ax, 2 ;~ 01A2:3F94
cs=0x1a2;eip=0x003f97; 	J(CALL(sub_1410e,0));	// 9899                  call    sub_1410E ;~ 01A2:3F97
cs=0x1a2;eip=0x003f9a; 	X(POP(ax));	// 9900                  pop     ax ;~ 01A2:3F9A
cs=0x1a2;eip=0x003f9b; 	T(MOV(al, *(raddr(es,di+0x16))));	// 9901                  mov     al, es:[di+16h] ;~ 01A2:3F9B
cs=0x1a2;eip=0x003f9f; 	T(OR(al, al));	// 9902                  or      al, al ;~ 01A2:3F9F
cs=0x1a2;eip=0x003fa1; 	J(JZ(loc_13fd6));	// 9903                  jz      short loc_13FD6 ;~ 01A2:3FA1
cs=0x1a2;eip=0x003fa3; 	T(di = si;);	// 9904                  mov     di, si ;~ 01A2:3FA3
cs=0x1a2;eip=0x003fa5; 	T(si = 0x0FE46;);	// 9905                  mov     si, 0FE46h ;~ 01A2:3FA5
cs=0x1a2;eip=0x003fa8; 	T(dx = 0x0FFFF;);	// 9906                  mov     dx, 0FFFFh ;~ 01A2:3FA8
cs=0x1a2;eip=0x003fab; 	T(ah = al;);	// 9907                  mov     ah, al ;~ 01A2:3FAB
loc_13fad:
	// 5026 
cs=0x1a2;eip=0x003fad; 	T(INC(dx));	// 9910                  inc     dx ;~ 01A2:3FAD
cs=0x1a2;eip=0x003fae; 	T(LODSB);	// 9911                  lodsb ;~ 01A2:3FAE
cs=0x1a2;eip=0x003faf; 	T(OR(al, al));	// 9912                  or      al, al ;~ 01A2:3FAF
cs=0x1a2;eip=0x003fb1; 	J(JS(loc_13fd6));	// 9913                  js      short loc_13FD6 ;~ 01A2:3FB1
cs=0x1a2;eip=0x003fb3; 	T(CMP(al, ah));	// 9914                  cmp     al, ah ;~ 01A2:3FB3
cs=0x1a2;eip=0x003fb5; 	J(JNZ(loc_13fad));	// 9915                  jnz     short loc_13FAD ;~ 01A2:3FB5
cs=0x1a2;eip=0x003fb7; 	T(CMP(bp, dx));	// 9916                  cmp     bp, dx ;~ 01A2:3FB7
cs=0x1a2;eip=0x003fb9; 	J(JLE(loc_13fd6));	// 9917                  jle     short loc_13FD6 ;~ 01A2:3FB9
cs=0x1a2;eip=0x003fbb; 	T(si = di;);	// 9918                  mov     si, di ;~ 01A2:3FBB
cs=0x1a2;eip=0x003fbd; 	X(INC(word_1f72e));	// 9919                  inc     ds:word_1F72E ;~ 01A2:3FBD
cs=0x1a2;eip=0x003fc1; 	T(ADD(bx, 4));	// 9920                  add     bx, 4 ;~ 01A2:3FC1
cs=0x1a2;eip=0x003fc4; 	T(ADD(si, 4));	// 9921                  add     si, 4 ;~ 01A2:3FC4
cs=0x1a2;eip=0x003fc7; 	T(DEC(cl));	// 9922                  dec     cl ;~ 01A2:3FC7
cs=0x1a2;eip=0x003fc9; 	J(JNS(loc_13f8b));	// 9923                  jns     short loc_13F8B ;~ 01A2:3FC9
cs=0x1a2;eip=0x003fcb; 	J(JMP(loc_13fd6));	// 9924                  jmp     short loc_13FD6 ;~ 01A2:3FCB
loc_13fcd:
	// 5027 
cs=0x1a2;eip=0x003fcd; 	X(INC(word_1f72e));	// 9929                  inc     ds:word_1F72E ;~ 01A2:3FCD
cs=0x1a2;eip=0x003fd1; 	T(ADD(si, 4));	// 9930                  add     si, 4 ;~ 01A2:3FD1
cs=0x1a2;eip=0x003fd4; 	J(JMP(loc_13f8b));	// 9931                  jmp     short loc_13F8B ;~ 01A2:3FD4
loc_13fd6:
	// 5028 
cs=0x1a2;eip=0x003fd6; 	T(dx = word_1f72e;);	// 9936                  mov     dx, ds:word_1F72E ;~ 01A2:3FD6
cs=0x1a2;eip=0x003fda; 	T(al = 8;);	// 9937                  mov     al, 8 ;~ 01A2:3FDA
cs=0x1a2;eip=0x003fdc; 	T(cx = 4;);	// 9938                  mov     cx, 4 ;~ 01A2:3FDC
cs=0x1a2;eip=0x003fdf; 	T(XOR(bp, bp));	// 9939                  xor     bp, bp ;~ 01A2:3FDF
cs=0x1a2;eip=0x003fe1; 	J(CALL(sub_1440a,0));	// 9940                  call    sub_1440A ;~ 01A2:3FE1
cs=0x1a2;eip=0x003fe4; 	X(POP(di));	// 9941                  pop     di ;~ 01A2:3FE4
cs=0x1a2;eip=0x003fe5; 	X(MOV(*(raddr(ds,di+0x0A)), 0x0FF));	// 9942                  mov     byte ptr [di+0Ah], 0FFh ;~ 01A2:3FE5
cs=0x1a2;eip=0x003fe9; 	T(si = *(dw*)(&off_1f194););	// 9943                  mov     si, word ptr off_1F194 ;~ 01A2:3FE9
cs=0x1a2;eip=0x003fed; 	T(dx = word_1f730;);	// 9944                  mov     dx, ds:word_1F730 ;~ 01A2:3FED
cs=0x1a2;eip=0x003ff1; 	X(MOV(*(dw*)(raddr(ds,si)), dx));	// 9945                  mov     [si], dx ;~ 01A2:3FF1
cs=0x1a2;eip=0x003ff3; 	J(CALL(sub_1407f,0));	// 9946                  call    sub_1407F ;~ 01A2:3FF3
cs=0x1a2;eip=0x003ff6; 	T(MOV(ax, *(dw*)(raddr(ds,di+6))));	// 9947                  mov     ax, [di+6] ;~ 01A2:3FF6
cs=0x1a2;eip=0x003ff9; 	X(MOV(*(dw*)(raddr(ds,si+2)), ax));	// 9948                  mov     [si+2], ax ;~ 01A2:3FF9
cs=0x1a2;eip=0x003ffc; 	X(INC(byte_1f81d));	// 9949                  inc     ds:byte_1F81D ;~ 01A2:3FFC
cs=0x1a2;eip=0x004000; 	T(al = 8;);	// 9950                  mov     al, 8 ;~ 01A2:4000
cs=0x1a2;eip=0x004002; 	J(CALL(sub_14060,0));	// 9951                  call    sub_14060 ;~ 01A2:4002
cs=0x1a2;eip=0x004005; 	T(ax = *(dw*)(&off_1f194););	// 9952                  mov     ax, word ptr off_1F194 ;~ 01A2:4005
cs=0x1a2;eip=0x004008; 	T(SUB(ax, bx));	// 9953                  sub     ax, bx ;~ 01A2:4008
cs=0x1a2;eip=0x00400a; 	T(XOR(dx, dx));	// 9954                  xor     dx, dx ;~ 01A2:400A
cs=0x1a2;eip=0x00400c; 	T(bx = 4;);	// 9955                  mov     bx, 4 ;~ 01A2:400C
cs=0x1a2;eip=0x00400f; 	T(DIV2(bx));	// 9956                  div     bx ;~ 01A2:400F
cs=0x1a2;eip=0x004011; 	X(word_1f6f6 = ax;);	// 9957                  mov     ds:word_1F6F6, ax ;~ 01A2:4011
cs=0x1a2;eip=0x004014; 	T(XOR(ah, ah));	// 9958                  xor     ah, ah ;~ 01A2:4014
cs=0x1a2;eip=0x004016; 	T(al = byte_1f81d;);	// 9959                  mov     al, ds:byte_1F81D ;~ 01A2:4016
cs=0x1a2;eip=0x004019; 	T(dx = ax;);	// 9960                  mov     dx, ax ;~ 01A2:4019
cs=0x1a2;eip=0x00401b; 	T(DEC(dx));	// 9961                  dec     dx ;~ 01A2:401B
cs=0x1a2;eip=0x00401c; 	T(XOR(cx, cx));	// 9962                  xor     cx, cx ;~ 01A2:401C
loc_1401e:
	// 5029 
cs=0x1a2;eip=0x00401e; 	X(MOV(*(dw*)(raddr(ds,si)), 4));	// 9965                  mov     word ptr [si], 4 ;~ 01A2:401E
cs=0x1a2;eip=0x004022; 	T(ADD(si, 2));	// 9966                  add     si, 2 ;~ 01A2:4022
cs=0x1a2;eip=0x004025; 	X(MOV(*(dw*)(raddr(ds,si)), cx));	// 9967                  mov     [si], cx ;~ 01A2:4025
cs=0x1a2;eip=0x004027; 	T(ADD(si, 2));	// 9968                  add     si, 2 ;~ 01A2:4027
cs=0x1a2;eip=0x00402a; 	T(ADD(cx, 4));	// 9969                  add     cx, 4 ;~ 01A2:402A
cs=0x1a2;eip=0x00402d; 	T(DEC(dx));	// 9970                  dec     dx ;~ 01A2:402D
cs=0x1a2;eip=0x00402e; 	J(JNS(loc_1401e));	// 9971                  jns     short loc_1401E ;~ 01A2:402E
cs=0x1a2;eip=0x004030; 	T(dx = word_1f710;);	// 9972                  mov     dx, ds:word_1F710 ;~ 01A2:4030
cs=0x1a2;eip=0x004034; 	T(SUB(dx, ax));	// 9973                  sub     dx, ax ;~ 01A2:4034
cs=0x1a2;eip=0x004036; 	J(JZ(loc_14048));	// 9974                  jz      short loc_14048 ;~ 01A2:4036
cs=0x1a2;eip=0x004038; 	T(DEC(dx));	// 9975                  dec     dx ;~ 01A2:4038
loc_14039:
	// 5030 
cs=0x1a2;eip=0x004039; 	X(MOV(*(dw*)(raddr(ds,si)), 0));	// 9978                  mov     word ptr [si], 0 ;~ 01A2:4039
cs=0x1a2;eip=0x00403d; 	T(ADD(si, 2));	// 9979                  add     si, 2 ;~ 01A2:403D
cs=0x1a2;eip=0x004040; 	X(MOV(*(dw*)(raddr(ds,si)), cx));	// 9980                  mov     [si], cx ;~ 01A2:4040
cs=0x1a2;eip=0x004042; 	T(ADD(si, 2));	// 9981                  add     si, 2 ;~ 01A2:4042
cs=0x1a2;eip=0x004045; 	T(DEC(dx));	// 9982                  dec     dx ;~ 01A2:4045
cs=0x1a2;eip=0x004046; 	J(JNS(loc_14039));	// 9983                  jns     short loc_14039 ;~ 01A2:4046
loc_14048:
	// 5031 
cs=0x1a2;eip=0x004048; 	T(XOR(al, al));	// 9986                  xor     al, al ;~ 01A2:4048
cs=0x1a2;eip=0x00404a; 	X(POP(ds));	// 9987                  pop     ds ;~ 01A2:404A
cs=0x1a2;eip=0x00404b; 	X(POP(es));	// 9988                  pop     es ;~ 01A2:404B
cs=0x1a2;eip=0x00404c; 	X(POP(di));	// 9990                  pop     di ;~ 01A2:404C
cs=0x1a2;eip=0x00404d; 	X(POP(si));	// 9991                  pop     si ;~ 01A2:404D
cs=0x1a2;eip=0x00404e; 	X(POP(bp));	// 9992                  pop     bp ;~ 01A2:404E
cs=0x1a2;eip=0x00404f; 	X(POP(dx));	// 9993                  pop     dx ;~ 01A2:404F
cs=0x1a2;eip=0x004050; 	X(POP(cx));	// 9994                  pop     cx ;~ 01A2:4050
cs=0x1a2;eip=0x004051; 	X(POP(bx));	// 9995                  pop     bx ;~ 01A2:4051
cs=0x1a2;eip=0x004052; 	X(POP(ax));	// 9996                  pop     ax ;~ 01A2:4052
cs=0x1a2;eip=0x004053; 	J(RETN(0));	// 9997                  retn ;~ 01A2:4053
loc_14054:
	// 5032 
cs=0x1a2;eip=0x004054; 	T(OR(al, 1));	// 10001                  or      al, 1 ;~ 01A2:4054
cs=0x1a2;eip=0x004056; 	X(POP(ds));	// 10002                  pop     ds ;~ 01A2:4056
cs=0x1a2;eip=0x004057; 	X(POP(es));	// 10004                  pop     es ;~ 01A2:4057
cs=0x1a2;eip=0x004058; 	X(POP(di));	// 10005                  pop     di ;~ 01A2:4058
cs=0x1a2;eip=0x004059; 	X(POP(si));	// 10006                  pop     si ;~ 01A2:4059
cs=0x1a2;eip=0x00405a; 	X(POP(bp));	// 10007                  pop     bp ;~ 01A2:405A
cs=0x1a2;eip=0x00405b; 	X(POP(dx));	// 10008                  pop     dx ;~ 01A2:405B
cs=0x1a2;eip=0x00405c; 	X(POP(cx));	// 10009                  pop     cx ;~ 01A2:405C
cs=0x1a2;eip=0x00405d; 	X(POP(bx));	// 10010                  pop     bx ;~ 01A2:405D
cs=0x1a2;eip=0x00405e; 	X(POP(ax));	// 10011                  pop     ax ;~ 01A2:405E
cs=0x1a2;eip=0x00405f; 	J(RETN(0));	// 10012                  retn ;~ 01A2:405F

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_13f57: 	goto loc_13f57;
        case m2c::kloc_13f75: 	goto loc_13f75;
        case m2c::kloc_13f81: 	goto loc_13f81;
        case m2c::kloc_13f84: 	goto loc_13f84;
        case m2c::kloc_13f8b: 	goto loc_13f8b;
        case m2c::kloc_13fad: 	goto loc_13fad;
        case m2c::kloc_13fcd: 	goto loc_13fcd;
        case m2c::kloc_13fd6: 	goto loc_13fd6;
        case m2c::kloc_1401e: 	goto loc_1401e;
        case m2c::kloc_14039: 	goto loc_14039;
        case m2c::kloc_14048: 	goto loc_14048;
        case m2c::kloc_14054: 	goto loc_14054;
        case m2c::ksub_13f35: 	goto sub_13f35;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_14060(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_14060:
    _begin:
cs=0x1a2;eip=0x004060; 	X(PUSH(ax));	// 10022                  push    ax ;~ 01A2:4060
cs=0x1a2;eip=0x004061; 	T(CBW);	// 10023                  cbw ;~ 01A2:4061
cs=0x1a2;eip=0x004062; 	T(SHL(ax, 1));	// 10024                  shl     ax, 1 ;~ 01A2:4062
cs=0x1a2;eip=0x004064; 	T(SHL(ax, 1));	// 10025                  shl     ax, 1 ;~ 01A2:4064
cs=0x1a2;eip=0x004066; 	T(SHL(ax, 1));	// 10026                  shl     ax, 1 ;~ 01A2:4066
cs=0x1a2;eip=0x004068; 	T(SHL(ax, 1));	// 10027                  shl     ax, 1 ;~ 01A2:4068
cs=0x1a2;eip=0x00406a; 	T(di = word_1f1ae;);	// 10028                  mov     di, word_1F1AE ;~ 01A2:406A
cs=0x1a2;eip=0x00406e; 	T(ADD(di, ax));	// 10029                  add     di, ax ;~ 01A2:406E
cs=0x1a2;eip=0x004070; 	T(MOV(si, *(dw*)(raddr(ds,di+2))));	// 10030                  mov     si, [di+2] ;~ 01A2:4070
cs=0x1a2;eip=0x004073; 	T(MOV(bx, *(dw*)(raddr(ds,di+6))));	// 10031                  mov     bx, [di+6] ;~ 01A2:4073
cs=0x1a2;eip=0x004076; 	X(POP(ax));	// 10032                  pop     ax ;~ 01A2:4076
cs=0x1a2;eip=0x004077; 	T(CMP(al, 2));	// 10033                  cmp     al, 2 ;~ 01A2:4077
cs=0x1a2;eip=0x004079; 	J(JNZ(locret_1407e));	// 10034                  jnz     short locret_1407E ;~ 01A2:4079
cs=0x1a2;eip=0x00407b; 	T(MOV(es, *(dw*)(raddr(ds,di+4))));	// 10036                  mov     es, word ptr [di+4] ;~ 01A2:407B
locret_1407e:
	// 5033 
cs=0x1a2;eip=0x00407e; 	J(RETN(0));	// 10040                  retn ;~ 01A2:407E

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::klocret_1407e: 	goto locret_1407e;
        case m2c::ksub_14060: 	goto sub_14060;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group14(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group14:
    _begin:
sub_1407f:
	// 10047 
cs=0x1a2;eip=0x00407f; 	T(CBW);	// 10049                  cbw ;~ 01A2:407F
cs=0x1a2;eip=0x004080; 	T(OR(dx, dx));	// 10050                  or      dx, dx ;~ 01A2:4080
cs=0x1a2;eip=0x004082; 	J(JNS(loc_140a1));	// 10051                  jns     short loc_140A1 ;~ 01A2:4082
cs=0x1a2;eip=0x004084; 	T(CMP(dx, 0x0FFFF));	// 10052                  cmp     dx, 0FFFFh ;~ 01A2:4084
cs=0x1a2;eip=0x004087; 	J(JNZ(loc_14090));	// 10053                  jnz     short loc_14090 ;~ 01A2:4087
cs=0x1a2;eip=0x004089; 	T(di = word_1f20c;);	// 10054                  mov     di, word_1F20C ;~ 01A2:4089
cs=0x1a2;eip=0x00408d; 	T(OR(dx, dx));	// 10055                  or      dx, dx ;~ 01A2:408D
cs=0x1a2;eip=0x00408f; 	J(RETN(0));	// 10056                  retn ;~ 01A2:408F
loc_14090:
	// 5034 
cs=0x1a2;eip=0x004090; 	X(PUSH(dx));	// 10060                  push    dx ;~ 01A2:4090
cs=0x1a2;eip=0x004091; 	T(dx = word_1f6f4;);	// 10061                  mov     dx, ds:word_1F6F4 ;~ 01A2:4091
cs=0x1a2;eip=0x004095; 	T(ADD(al, 9));	// 10062                  add     al, 9 ;~ 01A2:4095
cs=0x1a2;eip=0x004097; 	J(CALL(sub_140a4,0));	// 10063                  call    sub_140A4 ;~ 01A2:4097
cs=0x1a2;eip=0x00409a; 	X(PUSHF);	// 10064                  pushf ;~ 01A2:409A
cs=0x1a2;eip=0x00409b; 	T(ax = 6;);	// 10065                  mov     ax, 6 ;~ 01A2:409B
cs=0x1a2;eip=0x00409e; 	X(POPF);	// 10066                  popf ;~ 01A2:409E
cs=0x1a2;eip=0x00409f; 	X(POP(dx));	// 10067                  pop     dx ;~ 01A2:409F
cs=0x1a2;eip=0x0040a0; 	J(RETN(0));	// 10068                  retn ;~ 01A2:40A0
loc_140a1:
	// 5035 
cs=0x1a2;eip=0x0040a1; 	T(ax = 6;);	// 10072                  mov     ax, 6 ;~ 01A2:40A1
sub_140a4:
	// 10079 
cs=0x1a2;eip=0x0040a4; 	X(PUSH(ax));	// 10080                  push    ax ;~ 01A2:40A4
cs=0x1a2;eip=0x0040a5; 	X(PUSH(dx));	// 10081                  push    dx ;~ 01A2:40A5
cs=0x1a2;eip=0x0040a6; 	X(PUSH(si));	// 10082                  push    si ;~ 01A2:40A6
cs=0x1a2;eip=0x0040a7; 	J(return _group15(m2c::kloc_14116, _state););	// 10083                  jmp     short loc_14116 ;~ 01A2:40A7

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_14090: 	goto loc_14090;
        case m2c::kloc_140a1: 	goto loc_140a1;
        case m2c::ksub_1407f: 	goto sub_1407f;
        case m2c::ksub_140a4: 	goto sub_140a4;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group15(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group15:
    _begin:
sub_140a9:
	// 10090 
cs=0x1a2;eip=0x0040a9; 	X(PUSH(ax));	// 10092                  push    ax ;~ 01A2:40A9
cs=0x1a2;eip=0x0040aa; 	X(PUSH(dx));	// 10093                  push    dx ;~ 01A2:40AA
cs=0x1a2;eip=0x0040ab; 	X(PUSH(bx));	// 10094                  push    bx ;~ 01A2:40AB
cs=0x1a2;eip=0x0040ac; 	X(PUSH(cx));	// 10095                  push    cx ;~ 01A2:40AC
cs=0x1a2;eip=0x0040ad; 	X(PUSH(si));	// 10096                  push    si ;~ 01A2:40AD
cs=0x1a2;eip=0x0040ae; 	T(ax = 2;);	// 10097                  mov     ax, 2 ;~ 01A2:40AE
cs=0x1a2;eip=0x0040b1; 	T(SHL(ax, 1));	// 10098                  shl     ax, 1 ;~ 01A2:40B1
cs=0x1a2;eip=0x0040b3; 	T(SHL(ax, 1));	// 10099                  shl     ax, 1 ;~ 01A2:40B3
cs=0x1a2;eip=0x0040b5; 	T(SHL(ax, 1));	// 10100                  shl     ax, 1 ;~ 01A2:40B5
cs=0x1a2;eip=0x0040b7; 	T(SHL(ax, 1));	// 10101                  shl     ax, 1 ;~ 01A2:40B7
cs=0x1a2;eip=0x0040b9; 	T(di = word_1f1ae;);	// 10102                  mov     di, word_1F1AE ;~ 01A2:40B9
cs=0x1a2;eip=0x0040bd; 	T(ADD(di, ax));	// 10103                  add     di, ax ;~ 01A2:40BD
cs=0x1a2;eip=0x0040bf; 	T(CMP(dx, *(dw*)(raddr(ds,di+0x0E))));	// 10104                  cmp     dx, [di+0Eh] ;~ 01A2:40BF
cs=0x1a2;eip=0x0040c2; 	J(JGE(loc_14103));	// 10105                  jge     short loc_14103 ;~ 01A2:40C2
cs=0x1a2;eip=0x0040c4; 	T(MOV(si, *(dw*)(raddr(ds,di+2))));	// 10106                  mov     si, [di+2] ;~ 01A2:40C4
cs=0x1a2;eip=0x0040c7; 	T(MOV(bx, *(dw*)(raddr(ds,di+4))));	// 10107                  mov     bx, [di+4] ;~ 01A2:40C7
cs=0x1a2;eip=0x0040ca; 	T(MOV(di, *(dw*)(raddr(ds,di+6))));	// 10108                  mov     di, [di+6] ;~ 01A2:40CA
cs=0x1a2;eip=0x0040cd; 	T(SHL(dx, 1));	// 10109                  shl     dx, 1 ;~ 01A2:40CD
cs=0x1a2;eip=0x0040cf; 	T(SHL(dx, 1));	// 10110                  shl     dx, 1 ;~ 01A2:40CF
cs=0x1a2;eip=0x0040d1; 	T(ADD(si, dx));	// 10111                  add     si, dx ;~ 01A2:40D1
cs=0x1a2;eip=0x0040d3; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 10112                  mov     ax, [si] ;~ 01A2:40D3
cs=0x1a2;eip=0x0040d5; 	T(MOV(dx, *(dw*)(raddr(ds,si+2))));	// 10113                  mov     dx, [si+2] ;~ 01A2:40D5
cs=0x1a2;eip=0x0040d8; 	T(AND(dx, 0x0F));	// 10114                  and     dx, 0Fh ;~ 01A2:40D8
cs=0x1a2;eip=0x0040db; 	T(ADD(di, dx));	// 10115                  add     di, dx ;~ 01A2:40DB
cs=0x1a2;eip=0x0040dd; 	T(MOV(dx, *(dw*)(raddr(ds,si+2))));	// 10116                  mov     dx, [si+2] ;~ 01A2:40DD
cs=0x1a2;eip=0x0040e0; 	T(AND(ax, 1));	// 10117                  and     ax, 1 ;~ 01A2:40E0
cs=0x1a2;eip=0x0040e3; 	J(JZ(loc_140f1));	// 10118                  jz      short loc_140F1 ;~ 01A2:40E3
cs=0x1a2;eip=0x0040e5; 	T(SHR(dx, 1));	// 10119                  shr     dx, 1 ;~ 01A2:40E5
cs=0x1a2;eip=0x0040e7; 	T(OR(dx, 0x8000));	// 10120                  or      dx, 8000h ;~ 01A2:40E7
cs=0x1a2;eip=0x0040eb; 	T(cl = 3;);	// 10121                  mov     cl, 3 ;~ 01A2:40EB
cs=0x1a2;eip=0x0040ed; 	T(SHR(dx, cl));	// 10122                  shr     dx, cl ;~ 01A2:40ED
cs=0x1a2;eip=0x0040ef; 	J(JMP(loc_140f5));	// 10123                  jmp     short loc_140F5 ;~ 01A2:40EF
loc_140f1:
	// 5036 
cs=0x1a2;eip=0x0040f1; 	T(cl = 4;);	// 10127                  mov     cl, 4 ;~ 01A2:40F1
cs=0x1a2;eip=0x0040f3; 	T(SHR(dx, cl));	// 10128                  shr     dx, cl ;~ 01A2:40F3
loc_140f5:
	// 5037 
cs=0x1a2;eip=0x0040f5; 	T(ADD(bx, dx));	// 10131                  add     bx, dx ;~ 01A2:40F5
cs=0x1a2;eip=0x0040f7; 	T(es = bx;);	// 10132                  mov     es, bx ;~ 01A2:40F7
cs=0x1a2;eip=0x0040f9; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 10133                  mov     ax, [si] ;~ 01A2:40F9
cs=0x1a2;eip=0x0040fb; 	T(SHR(ax, 1));	// 10134                  shr     ax, 1 ;~ 01A2:40FB
cs=0x1a2;eip=0x0040fd; 	X(POP(si));	// 10135                  pop     si ;~ 01A2:40FD
cs=0x1a2;eip=0x0040fe; 	X(POP(cx));	// 10136                  pop     cx ;~ 01A2:40FE
cs=0x1a2;eip=0x0040ff; 	X(POP(bx));	// 10137                  pop     bx ;~ 01A2:40FF
cs=0x1a2;eip=0x004100; 	X(POP(dx));	// 10138                  pop     dx ;~ 01A2:4100
cs=0x1a2;eip=0x004101; 	X(POP(ax));	// 10139                  pop     ax ;~ 01A2:4101
cs=0x1a2;eip=0x004102; 	J(RETN(0));	// 10140                  retn ;~ 01A2:4102
loc_14103:
	// 5038 
cs=0x1a2;eip=0x004103; 	T(ax = 0x0FFFF;);	// 10145                  mov     ax, 0FFFFh ;~ 01A2:4103
cs=0x1a2;eip=0x004106; 	T(OR(ax, ax));	// 10146                  or      ax, ax ;~ 01A2:4106
cs=0x1a2;eip=0x004108; 	X(POP(si));	// 10147                  pop     si ;~ 01A2:4108
cs=0x1a2;eip=0x004109; 	X(POP(cx));	// 10148                  pop     cx ;~ 01A2:4109
cs=0x1a2;eip=0x00410a; 	X(POP(bx));	// 10149                  pop     bx ;~ 01A2:410A
cs=0x1a2;eip=0x00410b; 	X(POP(dx));	// 10150                  pop     dx ;~ 01A2:410B
cs=0x1a2;eip=0x00410c; 	X(POP(ax));	// 10151                  pop     ax ;~ 01A2:410C
cs=0x1a2;eip=0x00410d; 	J(RETN(0));	// 10152                  retn ;~ 01A2:410D
sub_1410e:
	// 10159 
cs=0x1a2;eip=0x00410e; 	T(CMP(ax, 2));	// 10161                  cmp     ax, 2 ;~ 01A2:410E
cs=0x1a2;eip=0x004111; 	J(JZ(sub_140a9));	// 10162                  jz      short sub_140A9 ;~ 01A2:4111
cs=0x1a2;eip=0x004113; 	X(PUSH(ax));	// 10163                  push    ax ;~ 01A2:4113
cs=0x1a2;eip=0x004114; 	X(PUSH(dx));	// 10164                  push    dx ;~ 01A2:4114
cs=0x1a2;eip=0x004115; 	X(PUSH(si));	// 10165                  push    si ;~ 01A2:4115
loc_14116:
	// 5039 
cs=0x1a2;eip=0x004116; 	T(SHL(ax, 1));	// 10168                  shl     ax, 1 ;~ 01A2:4116
cs=0x1a2;eip=0x004118; 	T(SHL(ax, 1));	// 10169                  shl     ax, 1 ;~ 01A2:4118
cs=0x1a2;eip=0x00411a; 	T(SHL(ax, 1));	// 10170                  shl     ax, 1 ;~ 01A2:411A
cs=0x1a2;eip=0x00411c; 	T(SHL(ax, 1));	// 10171                  shl     ax, 1 ;~ 01A2:411C
cs=0x1a2;eip=0x00411e; 	T(di = word_1f1ae;);	// 10172                  mov     di, word_1F1AE ;~ 01A2:411E
cs=0x1a2;eip=0x004122; 	T(ADD(di, ax));	// 10173                  add     di, ax ;~ 01A2:4122
cs=0x1a2;eip=0x004124; 	T(MOV(si, *(dw*)(raddr(ds,di+2))));	// 10174                  mov     si, [di+2] ;~ 01A2:4124
cs=0x1a2;eip=0x004127; 	T(MOV(di, *(dw*)(raddr(ds,di+6))));	// 10175                  mov     di, [di+6] ;~ 01A2:4127
cs=0x1a2;eip=0x00412a; 	T(SHL(dx, 1));	// 10176                  shl     dx, 1 ;~ 01A2:412A
cs=0x1a2;eip=0x00412c; 	T(SHL(dx, 1));	// 10177                  shl     dx, 1 ;~ 01A2:412C
cs=0x1a2;eip=0x00412e; 	T(ADD(si, dx));	// 10178                  add     si, dx ;~ 01A2:412E
cs=0x1a2;eip=0x004130; 	T(MOV(ax, *(dw*)(raddr(ds,si+2))));	// 10179                  mov     ax, [si+2] ;~ 01A2:4130
cs=0x1a2;eip=0x004133; 	T(ADD(di, ax));	// 10180                  add     di, ax ;~ 01A2:4133
cs=0x1a2;eip=0x004135; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 10181                  mov     ax, [si] ;~ 01A2:4135
cs=0x1a2;eip=0x004137; 	T(OR(ax, ax));	// 10182                  or      ax, ax ;~ 01A2:4137
cs=0x1a2;eip=0x004139; 	X(POP(si));	// 10183                  pop     si ;~ 01A2:4139
cs=0x1a2;eip=0x00413a; 	X(POP(dx));	// 10184                  pop     dx ;~ 01A2:413A
cs=0x1a2;eip=0x00413b; 	X(POP(ax));	// 10185                  pop     ax ;~ 01A2:413B
cs=0x1a2;eip=0x00413c; 	J(RETN(0));	// 10186                  retn ;~ 01A2:413C

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_140f1: 	goto loc_140f1;
        case m2c::kloc_140f5: 	goto loc_140f5;
        case m2c::kloc_14103: 	goto loc_14103;
        case m2c::kloc_14116: 	goto loc_14116;
        case m2c::ksub_140a9: 	goto sub_140a9;
        case m2c::ksub_1410e: 	goto sub_1410e;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1413d(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1413d:
    _begin:
cs=0x1a2;eip=0x00413d; 	X(PUSH(dx));	// 10196                  push    dx ;~ 01A2:413D
cs=0x1a2;eip=0x00413e; 	X(PUSH(di));	// 10197                  push    di ;~ 01A2:413E
cs=0x1a2;eip=0x00413f; 	T(CBW);	// 10198                  cbw ;~ 01A2:413F
cs=0x1a2;eip=0x004140; 	T(SHL(ax, 1));	// 10199                  shl     ax, 1 ;~ 01A2:4140
cs=0x1a2;eip=0x004142; 	T(SHL(ax, 1));	// 10200                  shl     ax, 1 ;~ 01A2:4142
cs=0x1a2;eip=0x004144; 	T(SHL(ax, 1));	// 10201                  shl     ax, 1 ;~ 01A2:4144
cs=0x1a2;eip=0x004146; 	T(SHL(ax, 1));	// 10202                  shl     ax, 1 ;~ 01A2:4146
cs=0x1a2;eip=0x004148; 	T(di = word_1f1ae;);	// 10203                  mov     di, word_1F1AE ;~ 01A2:4148
cs=0x1a2;eip=0x00414c; 	T(ADD(di, ax));	// 10204                  add     di, ax ;~ 01A2:414C
cs=0x1a2;eip=0x00414e; 	T(MOV(di, *(dw*)(raddr(ds,di+2))));	// 10205                  mov     di, [di+2] ;~ 01A2:414E
cs=0x1a2;eip=0x004151; 	T(SHL(dx, 1));	// 10206                  shl     dx, 1 ;~ 01A2:4151
cs=0x1a2;eip=0x004153; 	T(SHL(dx, 1));	// 10207                  shl     dx, 1 ;~ 01A2:4153
cs=0x1a2;eip=0x004155; 	T(ADD(di, dx));	// 10208                  add     di, dx ;~ 01A2:4155
cs=0x1a2;eip=0x004157; 	T(MOV(ax, *(dw*)(raddr(ds,di))));	// 10209                  mov     ax, [di] ;~ 01A2:4157
cs=0x1a2;eip=0x004159; 	X(POP(di));	// 10210                  pop     di ;~ 01A2:4159
cs=0x1a2;eip=0x00415a; 	X(POP(dx));	// 10211                  pop     dx ;~ 01A2:415A
cs=0x1a2;eip=0x00415b; 	J(RETN(0));	// 10212                  retn ;~ 01A2:415B

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1413d: 	goto sub_1413d;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1415c(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1415c:
    _begin:
cs=0x1a2;eip=0x00415c; 	X(PUSH(ax));	// 10221                  push    ax ;~ 01A2:415C
cs=0x1a2;eip=0x00415d; 	X(PUSH(bx));	// 10222                  push    bx ;~ 01A2:415D
cs=0x1a2;eip=0x00415e; 	X(PUSH(si));	// 10223                  push    si ;~ 01A2:415E
cs=0x1a2;eip=0x00415f; 	J(CALL(sub_14060,0));	// 10224                  call    sub_14060 ;~ 01A2:415F
cs=0x1a2;eip=0x004162; 	T(ax = dx;);	// 10225                  mov     ax, dx ;~ 01A2:4162
cs=0x1a2;eip=0x004164; 	T(CMP(ax, *(dw*)(raddr(ds,di+0x0E))));	// 10226                  cmp     ax, [di+0Eh] ;~ 01A2:4164
cs=0x1a2;eip=0x004167; 	J(JGE(loc_1417d));	// 10227                  jge     short loc_1417D ;~ 01A2:4167
cs=0x1a2;eip=0x004169; 	T(SHL(dx, 1));	// 10228                  shl     dx, 1 ;~ 01A2:4169
cs=0x1a2;eip=0x00416b; 	T(SHL(dx, 1));	// 10229                  shl     dx, 1 ;~ 01A2:416B
cs=0x1a2;eip=0x00416d; 	T(ADD(si, dx));	// 10230                  add     si, dx ;~ 01A2:416D
loc_1416f:
	// 5040 
cs=0x1a2;eip=0x00416f; 	T(CMP(*(dw*)(raddr(ds,si)), 0));	// 10233                  cmp     word ptr [si], 0 ;~ 01A2:416F
cs=0x1a2;eip=0x004172; 	J(JNZ(loc_14182));	// 10234                  jnz     short loc_14182 ;~ 01A2:4172
cs=0x1a2;eip=0x004174; 	T(ADD(si, 4));	// 10235                  add     si, 4 ;~ 01A2:4174
cs=0x1a2;eip=0x004177; 	T(INC(ax));	// 10236                  inc     ax ;~ 01A2:4177
cs=0x1a2;eip=0x004178; 	T(CMP(ax, *(dw*)(raddr(ds,di+0x0E))));	// 10237                  cmp     ax, [di+0Eh] ;~ 01A2:4178
cs=0x1a2;eip=0x00417b; 	J(JNZ(loc_1416f));	// 10238                  jnz     short loc_1416F ;~ 01A2:417B
loc_1417d:
	// 5041 
cs=0x1a2;eip=0x00417d; 	T(dx = 0x0FFFF;);	// 10241                  mov     dx, 0FFFFh ;~ 01A2:417D
cs=0x1a2;eip=0x004180; 	J(JMP(loc_1418b));	// 10242                  jmp     short loc_1418B ;~ 01A2:4180
loc_14182:
	// 5042 
cs=0x1a2;eip=0x004182; 	T(MOV(dx, *(dw*)(raddr(ds,si+2))));	// 10246                  mov     dx, [si+2] ;~ 01A2:4182
cs=0x1a2;eip=0x004185; 	T(ADD(bx, dx));	// 10247                  add     bx, dx ;~ 01A2:4185
cs=0x1a2;eip=0x004187; 	T(dx = ax;);	// 10248                  mov     dx, ax ;~ 01A2:4187
cs=0x1a2;eip=0x004189; 	T(di = bx;);	// 10249                  mov     di, bx ;~ 01A2:4189
loc_1418b:
	// 5043 
cs=0x1a2;eip=0x00418b; 	X(POP(si));	// 10252                  pop     si ;~ 01A2:418B
cs=0x1a2;eip=0x00418c; 	X(POP(bx));	// 10253                  pop     bx ;~ 01A2:418C
cs=0x1a2;eip=0x00418d; 	X(POP(ax));	// 10254                  pop     ax ;~ 01A2:418D
cs=0x1a2;eip=0x00418e; 	T(OR(dx, dx));	// 10255                  or      dx, dx ;~ 01A2:418E
cs=0x1a2;eip=0x004190; 	J(RETN(0));	// 10256                  retn ;~ 01A2:4190

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1416f: 	goto loc_1416f;
        case m2c::kloc_1417d: 	goto loc_1417d;
        case m2c::kloc_14182: 	goto loc_14182;
        case m2c::kloc_1418b: 	goto loc_1418b;
        case m2c::ksub_1415c: 	goto sub_1415c;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_4191_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_4191_proc:
    _begin:
cs=0x1a2;eip=0x004191; 	X(PUSH(ax));	// 10260                  push    ax ;~ 01A2:4191
cs=0x1a2;eip=0x004192; 	X(PUSH(cx));	// 10261                  push    cx ;~ 01A2:4192
cs=0x1a2;eip=0x004193; 	X(PUSH(bx));	// 10262                  push    bx ;~ 01A2:4193
cs=0x1a2;eip=0x004194; 	X(PUSH(si));	// 10263                  push    si ;~ 01A2:4194
cs=0x1a2;eip=0x004195; 	J(CALL(sub_14060,0));	// 10264                  call    sub_14060 ;~ 01A2:4195
cs=0x1a2;eip=0x004198; 	T(ax = dx;);	// 10265                  mov     ax, dx ;~ 01A2:4198
cs=0x1a2;eip=0x00419a; 	T(CMP(ax, *(dw*)(raddr(ds,di+0x0E))));	// 10266                  cmp     ax, [di+0Eh] ;~ 01A2:419A
cs=0x1a2;eip=0x00419d; 	J(JGE(loc_141b5));	// 10267                  jge     short loc_141B5 ;~ 01A2:419D
cs=0x1a2;eip=0x00419f; 	T(SHL(dx, 1));	// 10268                  shl     dx, 1 ;~ 01A2:419F
cs=0x1a2;eip=0x0041a1; 	T(SHL(dx, 1));	// 10269                  shl     dx, 1 ;~ 01A2:41A1
cs=0x1a2;eip=0x0041a3; 	T(ADD(si, dx));	// 10270                  add     si, dx ;~ 01A2:41A3
loc_141a5:
	// 5044 
cs=0x1a2;eip=0x0041a5; 	T(MOV(cx, *(dw*)(raddr(ds,si))));	// 10273                  mov     cx, [si] ;~ 01A2:41A5
cs=0x1a2;eip=0x0041a7; 	T(AND(cx, 0x0FFFE));	// 10274                  and     cx, 0FFFEh ;~ 01A2:41A7
cs=0x1a2;eip=0x0041aa; 	J(JNZ(loc_141ba));	// 10275                  jnz     short loc_141BA ;~ 01A2:41AA
cs=0x1a2;eip=0x0041ac; 	T(ADD(si, 4));	// 10276                  add     si, 4 ;~ 01A2:41AC
cs=0x1a2;eip=0x0041af; 	T(INC(ax));	// 10277                  inc     ax ;~ 01A2:41AF
cs=0x1a2;eip=0x0041b0; 	T(CMP(ax, *(dw*)(raddr(ds,di+0x0E))));	// 10278                  cmp     ax, [di+0Eh] ;~ 01A2:41B0
cs=0x1a2;eip=0x0041b3; 	J(JNZ(loc_141a5));	// 10279                  jnz     short loc_141A5 ;~ 01A2:41B3
loc_141b5:
	// 5045 
cs=0x1a2;eip=0x0041b5; 	T(dx = 0x0FFFF;);	// 10282                  mov     dx, 0FFFFh ;~ 01A2:41B5
cs=0x1a2;eip=0x0041b8; 	J(JMP(loc_141e8));	// 10283                  jmp     short loc_141E8 ;~ 01A2:41B8
loc_141ba:
	// 5046 
cs=0x1a2;eip=0x0041ba; 	T(dx = ax;);	// 10287                  mov     dx, ax ;~ 01A2:41BA
cs=0x1a2;eip=0x0041bc; 	X(PUSH(dx));	// 10288                  push    dx ;~ 01A2:41BC
cs=0x1a2;eip=0x0041bd; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 10289                  mov     ax, [si] ;~ 01A2:41BD
cs=0x1a2;eip=0x0041bf; 	T(MOV(dx, *(dw*)(raddr(ds,si+2))));	// 10290                  mov     dx, [si+2] ;~ 01A2:41BF
cs=0x1a2;eip=0x0041c2; 	T(AND(dx, 0x0F));	// 10291                  and     dx, 0Fh ;~ 01A2:41C2
cs=0x1a2;eip=0x0041c5; 	T(ADD(bx, dx));	// 10292                  add     bx, dx ;~ 01A2:41C5
cs=0x1a2;eip=0x0041c7; 	T(MOV(dx, *(dw*)(raddr(ds,si+2))));	// 10293                  mov     dx, [si+2] ;~ 01A2:41C7
cs=0x1a2;eip=0x0041ca; 	T(AND(ax, 1));	// 10294                  and     ax, 1 ;~ 01A2:41CA
cs=0x1a2;eip=0x0041cd; 	J(JZ(loc_141db));	// 10295                  jz      short loc_141DB ;~ 01A2:41CD
cs=0x1a2;eip=0x0041cf; 	T(SHR(dx, 1));	// 10296                  shr     dx, 1 ;~ 01A2:41CF
cs=0x1a2;eip=0x0041d1; 	T(OR(dx, 0x8000));	// 10297                  or      dx, 8000h ;~ 01A2:41D1
cs=0x1a2;eip=0x0041d5; 	T(cl = 3;);	// 10298                  mov     cl, 3 ;~ 01A2:41D5
cs=0x1a2;eip=0x0041d7; 	T(SHR(dx, cl));	// 10299                  shr     dx, cl ;~ 01A2:41D7
cs=0x1a2;eip=0x0041d9; 	J(JMP(loc_141df));	// 10300                  jmp     short loc_141DF ;~ 01A2:41D9
loc_141db:
	// 5047 
cs=0x1a2;eip=0x0041db; 	T(cl = 4;);	// 10304                  mov     cl, 4 ;~ 01A2:41DB
cs=0x1a2;eip=0x0041dd; 	T(SHR(dx, cl));	// 10305                  shr     dx, cl ;~ 01A2:41DD
loc_141df:
	// 5048 
cs=0x1a2;eip=0x0041df; 	T(ax = es;);	// 10308                  mov     ax, es ;~ 01A2:41DF
cs=0x1a2;eip=0x0041e1; 	T(ADD(ax, dx));	// 10309                  add     ax, dx ;~ 01A2:41E1
cs=0x1a2;eip=0x0041e3; 	T(es = ax;);	// 10310                  mov     es, ax ;~ 01A2:41E3
cs=0x1a2;eip=0x0041e5; 	X(POP(dx));	// 10312                  pop     dx ;~ 01A2:41E5
cs=0x1a2;eip=0x0041e6; 	T(di = bx;);	// 10313                  mov     di, bx ;~ 01A2:41E6
loc_141e8:
	// 5049 
cs=0x1a2;eip=0x0041e8; 	X(POP(si));	// 10316                  pop     si ;~ 01A2:41E8
cs=0x1a2;eip=0x0041e9; 	X(POP(bx));	// 10317                  pop     bx ;~ 01A2:41E9
cs=0x1a2;eip=0x0041ea; 	X(POP(cx));	// 10318                  pop     cx ;~ 01A2:41EA
cs=0x1a2;eip=0x0041eb; 	X(POP(ax));	// 10319                  pop     ax ;~ 01A2:41EB
cs=0x1a2;eip=0x0041ec; 	T(OR(dx, dx));	// 10320                  or      dx, dx ;~ 01A2:41EC
cs=0x1a2;eip=0x0041ee; 	J(RETN(0));	// 10321                  retn ;~ 01A2:41EE

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_141a5: 	goto loc_141a5;
        case m2c::kloc_141b5: 	goto loc_141b5;
        case m2c::kloc_141ba: 	goto loc_141ba;
        case m2c::kloc_141db: 	goto loc_141db;
        case m2c::kloc_141df: 	goto loc_141df;
        case m2c::kloc_141e8: 	goto loc_141e8;
        case m2c::kseg000_4191_proc: 	goto seg000_4191_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_141ef(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_141ef:
    _begin:
cs=0x1a2;eip=0x0041ef; 	X(PUSH(ax));	// 10327                  push    ax ;~ 01A2:41EF
cs=0x1a2;eip=0x0041f0; 	X(PUSH(bx));	// 10328                  push    bx ;~ 01A2:41F0
cs=0x1a2;eip=0x0041f1; 	X(PUSH(si));	// 10329                  push    si ;~ 01A2:41F1
cs=0x1a2;eip=0x0041f2; 	T(OR(dx, dx));	// 10330                  or      dx, dx ;~ 01A2:41F2
cs=0x1a2;eip=0x0041f4; 	J(JS(loc_14210));	// 10331                  js      short loc_14210 ;~ 01A2:41F4
cs=0x1a2;eip=0x0041f6; 	J(CALL(sub_14060,0));	// 10332                  call    sub_14060 ;~ 01A2:41F6
cs=0x1a2;eip=0x0041f9; 	T(ax = dx;);	// 10333                  mov     ax, dx ;~ 01A2:41F9
cs=0x1a2;eip=0x0041fb; 	T(SHL(dx, 1));	// 10334                  shl     dx, 1 ;~ 01A2:41FB
cs=0x1a2;eip=0x0041fd; 	T(SHL(dx, 1));	// 10335                  shl     dx, 1 ;~ 01A2:41FD
cs=0x1a2;eip=0x0041ff; 	T(ADD(si, dx));	// 10336                  add     si, dx ;~ 01A2:41FF
loc_14201:
	// 5050 
cs=0x1a2;eip=0x004201; 	T(CMP(*(dw*)(raddr(ds,si)), 0));	// 10339                  cmp     word ptr [si], 0 ;~ 01A2:4201
cs=0x1a2;eip=0x004204; 	J(JNZ(loc_14215));	// 10340                  jnz     short loc_14215 ;~ 01A2:4204
cs=0x1a2;eip=0x004206; 	T(OR(ax, ax));	// 10341                  or      ax, ax ;~ 01A2:4206
cs=0x1a2;eip=0x004208; 	J(JZ(loc_14210));	// 10342                  jz      short loc_14210 ;~ 01A2:4208
cs=0x1a2;eip=0x00420a; 	T(SUB(si, 4));	// 10343                  sub     si, 4 ;~ 01A2:420A
cs=0x1a2;eip=0x00420d; 	T(DEC(ax));	// 10344                  dec     ax ;~ 01A2:420D
cs=0x1a2;eip=0x00420e; 	J(JMP(loc_14201));	// 10345                  jmp     short loc_14201 ;~ 01A2:420E
loc_14210:
	// 5051 
cs=0x1a2;eip=0x004210; 	T(dx = 0x0FFFF;);	// 10350                  mov     dx, 0FFFFh ;~ 01A2:4210
cs=0x1a2;eip=0x004213; 	J(JMP(loc_1421e));	// 10351                  jmp     short loc_1421E ;~ 01A2:4213
loc_14215:
	// 5052 
cs=0x1a2;eip=0x004215; 	T(MOV(dx, *(dw*)(raddr(ds,si+2))));	// 10355                  mov     dx, [si+2] ;~ 01A2:4215
cs=0x1a2;eip=0x004218; 	T(ADD(bx, dx));	// 10356                  add     bx, dx ;~ 01A2:4218
cs=0x1a2;eip=0x00421a; 	T(dx = ax;);	// 10357                  mov     dx, ax ;~ 01A2:421A
cs=0x1a2;eip=0x00421c; 	T(di = bx;);	// 10358                  mov     di, bx ;~ 01A2:421C
loc_1421e:
	// 5053 
cs=0x1a2;eip=0x00421e; 	X(POP(si));	// 10361                  pop     si ;~ 01A2:421E
cs=0x1a2;eip=0x00421f; 	X(POP(bx));	// 10362                  pop     bx ;~ 01A2:421F
cs=0x1a2;eip=0x004220; 	X(POP(ax));	// 10363                  pop     ax ;~ 01A2:4220
cs=0x1a2;eip=0x004221; 	T(OR(dx, dx));	// 10364                  or      dx, dx ;~ 01A2:4221
cs=0x1a2;eip=0x004223; 	J(RETN(0));	// 10365                  retn ;~ 01A2:4223

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_14201: 	goto loc_14201;
        case m2c::kloc_14210: 	goto loc_14210;
        case m2c::kloc_14215: 	goto loc_14215;
        case m2c::kloc_1421e: 	goto loc_1421e;
        case m2c::ksub_141ef: 	goto sub_141ef;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_14224(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_14224:
    _begin:
cs=0x1a2;eip=0x004224; 	T(es = seg_1f8f4;);	// 10374                  mov     es, ds:seg_1F8F4 ;~ 01A2:4224
cs=0x1a2;eip=0x004228; 	T(di = word_1f1ae;);	// 10375                  mov     di, word_1F1AE ;~ 01A2:4228
cs=0x1a2;eip=0x00422c; 	T(dx = word_1f1b0;);	// 10376                  mov     dx, word_1F1B0 ;~ 01A2:422C
cs=0x1a2;eip=0x004230; 	T(bp = 0x0C96A;);	// 10377                  mov     bp, 0C96Ah ;~ 01A2:4230
cs=0x1a2;eip=0x004233; 	T(bx = 0x71E;);	// 10378                  mov     bx, 71Eh ;~ 01A2:4233
cs=0x1a2;eip=0x004236; 	T(XOR(si, si));	// 10379                  xor     si, si ;~ 01A2:4236
loc_14238:
	// 5054 
cs=0x1a2;eip=0x004238; 	T(MOV(cx, *(dw*)(raddr(ss,bp+0))));	// 10382                  mov     cx, [bp+0] ;~ 01A2:4238
cs=0x1a2;eip=0x00423b; 	T(MOV(ax, *(dw*)(raddr(ss,bp+2))));	// 10383                  mov     ax, [bp+2] ;~ 01A2:423B
cs=0x1a2;eip=0x00423e; 	X(MOV(*(dw*)(raddr(ds,di)), ds));	// 10384                  mov     word ptr [di], ds ;~ 01A2:423E
cs=0x1a2;eip=0x004240; 	X(MOV(*(dw*)(raddr(ds,di+2)), dx));	// 10385                  mov     [di+2], dx ;~ 01A2:4240
cs=0x1a2;eip=0x004243; 	X(MOV(*(dw*)(raddr(ds,di+0x0E)), ax));	// 10386                  mov     [di+0Eh], ax ;~ 01A2:4243
cs=0x1a2;eip=0x004246; 	T(SHL(ax, 1));	// 10387                  shl     ax, 1 ;~ 01A2:4246
cs=0x1a2;eip=0x004248; 	T(SHL(ax, 1));	// 10388                  shl     ax, 1 ;~ 01A2:4248
cs=0x1a2;eip=0x00424a; 	T(ADD(dx, ax));	// 10389                  add     dx, ax ;~ 01A2:424A
cs=0x1a2;eip=0x00424c; 	T(MOV(ax, *(dw*)(raddr(ds,bx+0x14))));	// 10390                  mov     ax, [bx+14h] ;~ 01A2:424C
cs=0x1a2;eip=0x00424f; 	X(MOV(*(dw*)(raddr(ds,di+4)), ax));	// 10391                  mov     [di+4], ax ;~ 01A2:424F
cs=0x1a2;eip=0x004252; 	X(MOV(*(dw*)(raddr(ds,di+8)), ax));	// 10392                  mov     [di+8], ax ;~ 01A2:4252
cs=0x1a2;eip=0x004255; 	T(MOV(ax, *(dw*)(raddr(ds,bx))));	// 10393                  mov     ax, [bx] ;~ 01A2:4255
cs=0x1a2;eip=0x004257; 	X(MOV(*(dw*)(raddr(ds,di+6)), ax));	// 10394                  mov     [di+6], ax ;~ 01A2:4257
cs=0x1a2;eip=0x00425a; 	X(MOV(*(dw*)(raddr(ds,di+0x0A)), ax));	// 10395                  mov     [di+0Ah], ax ;~ 01A2:425A
cs=0x1a2;eip=0x00425d; 	X(MOV(*(dw*)(raddr(ds,di+0x0C)), cx));	// 10396                  mov     [di+0Ch], cx ;~ 01A2:425D
cs=0x1a2;eip=0x004260; 	T(ax = si;);	// 10397                  mov     ax, si ;~ 01A2:4260
cs=0x1a2;eip=0x004262; 	J(CALL(sub_14275,0));	// 10398                  call    sub_14275 ;~ 01A2:4262
cs=0x1a2;eip=0x004265; 	T(ADD(bx, 2));	// 10399                  add     bx, 2 ;~ 01A2:4265
cs=0x1a2;eip=0x004268; 	T(ADD(bp, 4));	// 10400                  add     bp, 4 ;~ 01A2:4268
cs=0x1a2;eip=0x00426b; 	T(ADD(di, 0x10));	// 10401                  add     di, 10h ;~ 01A2:426B
cs=0x1a2;eip=0x00426e; 	T(INC(si));	// 10402                  inc     si ;~ 01A2:426E
cs=0x1a2;eip=0x00426f; 	T(CMP(si, 0x0A));	// 10403                  cmp     si, 0Ah ;~ 01A2:426F
cs=0x1a2;eip=0x004272; 	J(JNZ(loc_14238));	// 10404                  jnz     short loc_14238 ;~ 01A2:4272
cs=0x1a2;eip=0x004274; 	J(RETN(0));	// 10405                  retn ;~ 01A2:4274

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_14238: 	goto loc_14238;
        case m2c::ksub_14224: 	goto sub_14224;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_14275(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_14275:
    _begin:
cs=0x1a2;eip=0x004275; 	X(PUSH(ax));	// 10414                  push    ax ;~ 01A2:4275
cs=0x1a2;eip=0x004276; 	X(PUSH(bx));	// 10415                  push    bx ;~ 01A2:4276
cs=0x1a2;eip=0x004277; 	X(PUSH(cx));	// 10416                  push    cx ;~ 01A2:4277
cs=0x1a2;eip=0x004278; 	X(PUSH(dx));	// 10417                  push    dx ;~ 01A2:4278
cs=0x1a2;eip=0x004279; 	X(PUSH(bp));	// 10418                  push    bp ;~ 01A2:4279
cs=0x1a2;eip=0x00427a; 	X(PUSH(si));	// 10419                  push    si ;~ 01A2:427A
cs=0x1a2;eip=0x00427b; 	X(PUSH(di));	// 10420                  push    di ;~ 01A2:427B
cs=0x1a2;eip=0x00427c; 	X(PUSH(es));	// 10421                  push    es ;~ 01A2:427C
cs=0x1a2;eip=0x00427d; 	X(PUSH(ds));	// 10422                  push    ds ;~ 01A2:427D
cs=0x1a2;eip=0x00427e; 	J(CALL(sub_14060,0));	// 10423                  call    sub_14060 ;~ 01A2:427E
cs=0x1a2;eip=0x004281; 	T(ax = 0;);	// 10424                  mov     ax, 0 ;~ 01A2:4281
cs=0x1a2;eip=0x004284; 	T(MOV(cx, *(dw*)(raddr(ds,di+0x0E))));	// 10425                  mov     cx, [di+0Eh] ;~ 01A2:4284
cs=0x1a2;eip=0x004287; 	T(OR(cx, cx));	// 10426                  or      cx, cx ;~ 01A2:4287
cs=0x1a2;eip=0x004289; 	J(JZ(loc_14295));	// 10427                  jz      short loc_14295 ;~ 01A2:4289
loc_1428b:
	// 5055 
cs=0x1a2;eip=0x00428b; 	X(MOV(*(dw*)(raddr(ds,si)), ax));	// 10430                  mov     [si], ax ;~ 01A2:428B
cs=0x1a2;eip=0x00428d; 	X(MOV(*(dw*)(raddr(ds,si+2)), ax));	// 10431                  mov     [si+2], ax ;~ 01A2:428D
cs=0x1a2;eip=0x004290; 	T(ADD(si, 4));	// 10432                  add     si, 4 ;~ 01A2:4290
cs=0x1a2;eip=0x004293; 	J(LOOP(loc_1428b));	// 10433                  loop    loc_1428B ;~ 01A2:4293
loc_14295:
	// 5056 
cs=0x1a2;eip=0x004295; 	X(MOV(*(dw*)(raddr(ds,di+8)), ax));	// 10436                  mov     [di+8], ax ;~ 01A2:4295
cs=0x1a2;eip=0x004298; 	X(MOV(*(dw*)(raddr(ds,di+0x0A)), ax));	// 10437                  mov     [di+0Ah], ax ;~ 01A2:4298
cs=0x1a2;eip=0x00429b; 	X(POP(ds));	// 10438                  pop     ds ;~ 01A2:429B
cs=0x1a2;eip=0x00429c; 	X(POP(es));	// 10439                  pop     es ;~ 01A2:429C
cs=0x1a2;eip=0x00429d; 	X(POP(di));	// 10440                  pop     di ;~ 01A2:429D
cs=0x1a2;eip=0x00429e; 	X(POP(si));	// 10441                  pop     si ;~ 01A2:429E
cs=0x1a2;eip=0x00429f; 	X(POP(bp));	// 10442                  pop     bp ;~ 01A2:429F
cs=0x1a2;eip=0x0042a0; 	X(POP(dx));	// 10443                  pop     dx ;~ 01A2:42A0
cs=0x1a2;eip=0x0042a1; 	X(POP(cx));	// 10444                  pop     cx ;~ 01A2:42A1
cs=0x1a2;eip=0x0042a2; 	X(POP(bx));	// 10445                  pop     bx ;~ 01A2:42A2
cs=0x1a2;eip=0x0042a3; 	X(POP(ax));	// 10446                  pop     ax ;~ 01A2:42A3
cs=0x1a2;eip=0x0042a4; 	J(RETN(0));	// 10447                  retn ;~ 01A2:42A4

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1428b: 	goto loc_1428b;
        case m2c::kloc_14295: 	goto loc_14295;
        case m2c::ksub_14275: 	goto sub_14275;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_142a5(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_142a5:
    _begin:
cs=0x1a2;eip=0x0042a5; 	X(PUSH(ax));	// 10456                  push    ax ;~ 01A2:42A5
cs=0x1a2;eip=0x0042a6; 	X(PUSH(bx));	// 10457                  push    bx ;~ 01A2:42A6
cs=0x1a2;eip=0x0042a7; 	X(PUSH(cx));	// 10458                  push    cx ;~ 01A2:42A7
cs=0x1a2;eip=0x0042a8; 	X(PUSH(dx));	// 10459                  push    dx ;~ 01A2:42A8
cs=0x1a2;eip=0x0042a9; 	X(PUSH(bp));	// 10460                  push    bp ;~ 01A2:42A9
cs=0x1a2;eip=0x0042aa; 	X(PUSH(si));	// 10461                  push    si ;~ 01A2:42AA
cs=0x1a2;eip=0x0042ab; 	X(PUSH(di));	// 10462                  push    di ;~ 01A2:42AB
cs=0x1a2;eip=0x0042ac; 	X(PUSH(es));	// 10463                  push    es ;~ 01A2:42AC
cs=0x1a2;eip=0x0042ad; 	X(PUSH(ds));	// 10464                  push    ds ;~ 01A2:42AD
cs=0x1a2;eip=0x0042ae; 	X(word_1f388 = 0x0FFFF;);	// 10465                  mov     ds:word_1F388, 0FFFFh ;~ 01A2:42AE
cs=0x1a2;eip=0x0042b4; 	X(PUSH(di));	// 10466                  push    di ;~ 01A2:42B4
cs=0x1a2;eip=0x0042b5; 	J(CALL(sub_14060,0));	// 10467                  call    sub_14060 ;~ 01A2:42B5
cs=0x1a2;eip=0x0042b8; 	T(OR(dx, dx));	// 10468                  or      dx, dx ;~ 01A2:42B8
cs=0x1a2;eip=0x0042ba; 	J(JGE(loc_142dc));	// 10469                  jge     short loc_142DC ;~ 01A2:42BA
cs=0x1a2;eip=0x0042bc; 	T(CMP(dx, 0x0FFFE));	// 10470                  cmp     dx, 0FFFEh ;~ 01A2:42BC
cs=0x1a2;eip=0x0042bf; 	J(JNZ(loc_142ce));	// 10471                  jnz     short loc_142CE ;~ 01A2:42BF
cs=0x1a2;eip=0x0042c1; 	T(dx = 0x384;);	// 10472                  mov     dx, 384h ;~ 01A2:42C1
cs=0x1a2;eip=0x0042c4; 	J(CALL(sub_14557,0));	// 10473                  call    sub_14557 ;~ 01A2:42C4
cs=0x1a2;eip=0x0042c7; 	T(OR(dx, dx));	// 10474                  or      dx, dx ;~ 01A2:42C7
cs=0x1a2;eip=0x0042c9; 	J(JNS(loc_142d8));	// 10475                  jns     short loc_142D8 ;~ 01A2:42C9
cs=0x1a2;eip=0x0042cb; 	J(JMP(loc_1436b));	// 10476                  jmp     loc_1436B ;~ 01A2:42CB
loc_142ce:
	// 5057 
cs=0x1a2;eip=0x0042ce; 	J(CALL(sub_14563,0));	// 10480                  call    sub_14563 ;~ 01A2:42CE
cs=0x1a2;eip=0x0042d1; 	T(OR(dx, dx));	// 10481                  or      dx, dx ;~ 01A2:42D1
cs=0x1a2;eip=0x0042d3; 	J(JNS(loc_142d8));	// 10482                  jns     short loc_142D8 ;~ 01A2:42D3
cs=0x1a2;eip=0x0042d5; 	J(JMP(loc_1436b));	// 10483                  jmp     loc_1436B ;~ 01A2:42D5
loc_142d8:
	// 5058 
cs=0x1a2;eip=0x0042d8; 	X(word_1f388 = dx;);	// 10488                  mov     ds:word_1F388, dx ;~ 01A2:42D8
loc_142dc:
	// 5059 
cs=0x1a2;eip=0x0042dc; 	X(PUSH(dx));	// 10491                  push    dx ;~ 01A2:42DC
cs=0x1a2;eip=0x0042dd; 	T(SHL(dx, 1));	// 10492                  shl     dx, 1 ;~ 01A2:42DD
cs=0x1a2;eip=0x0042df; 	T(SHL(dx, 1));	// 10493                  shl     dx, 1 ;~ 01A2:42DF
cs=0x1a2;eip=0x0042e1; 	T(ADD(si, dx));	// 10494                  add     si, dx ;~ 01A2:42E1
cs=0x1a2;eip=0x0042e3; 	X(POP(dx));	// 10495                  pop     dx ;~ 01A2:42E3
cs=0x1a2;eip=0x0042e4; 	T(MOV(bp, *(dw*)(raddr(ds,si+2))));	// 10496                  mov     bp, [si+2] ;~ 01A2:42E4
cs=0x1a2;eip=0x0042e7; 	T(ADD(bp, bx));	// 10497                  add     bp, bx ;~ 01A2:42E7
cs=0x1a2;eip=0x0042e9; 	T(CMP(*(dw*)(raddr(ds,si)), 0));	// 10498                  cmp     word ptr [si], 0 ;~ 01A2:42E9
cs=0x1a2;eip=0x0042ec; 	J(JZ(loc_142f1));	// 10499                  jz      short loc_142F1 ;~ 01A2:42EC
cs=0x1a2;eip=0x0042ee; 	J(CALL(sub_1438a,0));	// 10500                  call    sub_1438A ;~ 01A2:42EE
loc_142f1:
	// 5060 
cs=0x1a2;eip=0x0042f1; 	X(MOV(*(dw*)(raddr(ds,si)), cx));	// 10503                  mov     [si], cx ;~ 01A2:42F1
cs=0x1a2;eip=0x0042f3; 	T(ADD(si, 4));	// 10504                  add     si, 4 ;~ 01A2:42F3
cs=0x1a2;eip=0x0042f6; 	X(PUSH(si));	// 10505                  push    si ;~ 01A2:42F6
cs=0x1a2;eip=0x0042f7; 	T(MOV(si, *(dw*)(raddr(ds,di+0x0A))));	// 10506                  mov     si, [di+0Ah] ;~ 01A2:42F7
cs=0x1a2;eip=0x0042fa; 	T(ax = si;);	// 10507                  mov     ax, si ;~ 01A2:42FA
cs=0x1a2;eip=0x0042fc; 	T(ADD(si, cx));	// 10508                  add     si, cx ;~ 01A2:42FC
cs=0x1a2;eip=0x0042fe; 	X(MOV(*(dw*)(raddr(ds,di+0x0A)), si));	// 10509                  mov     [di+0Ah], si ;~ 01A2:42FE
cs=0x1a2;eip=0x004301; 	T(ADD(si, bx));	// 10510                  add     si, bx ;~ 01A2:4301
cs=0x1a2;eip=0x004303; 	T(ADD(ax, bx));	// 10511                  add     ax, bx ;~ 01A2:4303
cs=0x1a2;eip=0x004305; 	X(PUSH(di));	// 10512                  push    di ;~ 01A2:4305
cs=0x1a2;eip=0x004306; 	T(di = ax;);	// 10513                  mov     di, ax ;~ 01A2:4306
cs=0x1a2;eip=0x004308; 	T(SUB(ax, bp));	// 10514                  sub     ax, bp ;~ 01A2:4308
cs=0x1a2;eip=0x00430a; 	J(JZ(loc_1430f));	// 10515                  jz      short loc_1430F ;~ 01A2:430A
cs=0x1a2;eip=0x00430c; 	J(CALL(sub_146d8,0));	// 10516                  call    sub_146D8 ;~ 01A2:430C
loc_1430f:
	// 5061 
cs=0x1a2;eip=0x00430f; 	X(POP(di));	// 10519                  pop     di ;~ 01A2:430F
cs=0x1a2;eip=0x004310; 	X(POP(si));	// 10520                  pop     si ;~ 01A2:4310
cs=0x1a2;eip=0x004311; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x0E))));	// 10521                  mov     ax, [di+0Eh] ;~ 01A2:4311
cs=0x1a2;eip=0x004314; 	T(SUB(ax, dx));	// 10522                  sub     ax, dx ;~ 01A2:4314
cs=0x1a2;eip=0x004316; 	T(SUB(ax, 2));	// 10523                  sub     ax, 2 ;~ 01A2:4316
cs=0x1a2;eip=0x004319; 	J(JS(loc_14324));	// 10524                  js      short loc_14324 ;~ 01A2:4319
loc_1431b:
	// 5062 
cs=0x1a2;eip=0x00431b; 	X(ADD(*(dw*)(raddr(ds,si+2)), cx));	// 10527                  add     [si+2], cx ;~ 01A2:431B
cs=0x1a2;eip=0x00431e; 	T(ADD(si, 4));	// 10528                  add     si, 4 ;~ 01A2:431E
cs=0x1a2;eip=0x004321; 	T(DEC(ax));	// 10529                  dec     ax ;~ 01A2:4321
cs=0x1a2;eip=0x004322; 	J(JNS(loc_1431b));	// 10530                  jns     short loc_1431B ;~ 01A2:4322
loc_14324:
	// 5063 
cs=0x1a2;eip=0x004324; 	X(POP(di));	// 10533                  pop     di ;~ 01A2:4324
cs=0x1a2;eip=0x004325; 	T(ax = ds;);	// 10534                  mov     ax, ds ;~ 01A2:4325
cs=0x1a2;eip=0x004327; 	T(es = ax;);	// 10535                  mov     es, ax ;~ 01A2:4327
cs=0x1a2;eip=0x004329; 	X(*(dw*)(&off_1f194) = bp;);	// 10536                  mov     word ptr off_1F194, bp ;~ 01A2:4329
cs=0x1a2;eip=0x00432d; 	T(CMP(di, 0x100));	// 10537                  cmp     di, 100h ;~ 01A2:432D
cs=0x1a2;eip=0x004331; 	J(JA(loc_14346));	// 10538                  ja      short loc_14346 ;~ 01A2:4331
cs=0x1a2;eip=0x004333; 	T(XCHG(bp, di));	// 10539                  xchg    bp, di ;~ 01A2:4333
cs=0x1a2;eip=0x004335; 	T(ax = di;);	// 10540                  mov     ax, di ;~ 01A2:4335
cs=0x1a2;eip=0x004337; 	T(ah = al;);	// 10541                  mov     ah, al ;~ 01A2:4337
cs=0x1a2;eip=0x004339; 	T(SHR(cx, 1));	// 10542                  shr     cx, 1 ;~ 01A2:4339
cs=0x1a2;eip=0x00433b; 	J(JNC(loc_14342));	// 10543                  jnb     short loc_14342 ;~ 01A2:433B
cs=0x1a2;eip=0x00433d; 	X(STOSB);	// 10544                  stosb ;~ 01A2:433D
cs=0x1a2;eip=0x00433e; 	T(OR(cx, cx));	// 10545                  or      cx, cx ;~ 01A2:433E
cs=0x1a2;eip=0x004340; 	J(JZ(loc_14355));	// 10546                  jz      short loc_14355 ;~ 01A2:4340
loc_14342:
	// 5064 
	// 10549                  rep stosw ;~ 01A2:4342
cs=0x1a2;eip=0x004342; 	X(	REP STOSW);	// 10549                  rep stosw ;~ 01A2:4342
cs=0x1a2;eip=0x004344; 	J(JMP(loc_14355));	// 10550                  jmp     short loc_14355 ;~ 01A2:4344
loc_14346:
	// 5065 
cs=0x1a2;eip=0x004346; 	T(si = di;);	// 10554                  mov     si, di ;~ 01A2:4346
cs=0x1a2;eip=0x004348; 	T(di = bp;);	// 10555                  mov     di, bp ;~ 01A2:4348
cs=0x1a2;eip=0x00434a; 	T(SHR(cx, 1));	// 10556                  shr     cx, 1 ;~ 01A2:434A
cs=0x1a2;eip=0x00434c; 	J(JNC(loc_14353));	// 10557                  jnb     short loc_14353 ;~ 01A2:434C
cs=0x1a2;eip=0x00434e; 	X(MOVSB);	// 10558                  movsb ;~ 01A2:434E
cs=0x1a2;eip=0x00434f; 	T(OR(cx, cx));	// 10559                  or      cx, cx ;~ 01A2:434F
cs=0x1a2;eip=0x004351; 	J(JZ(loc_14355));	// 10560                  jz      short loc_14355 ;~ 01A2:4351
loc_14353:
	// 5066 
	// 10563                  rep movsw ;~ 01A2:4353
cs=0x1a2;eip=0x004353; 	X(	REP MOVSW);	// 10563                  rep movsw ;~ 01A2:4353
loc_14355:
	// 5067 
cs=0x1a2;eip=0x004355; 	X(POP(ds));	// 10567                  pop     ds ;~ 01A2:4355
cs=0x1a2;eip=0x004356; 	X(POP(es));	// 10568                  pop     es ;~ 01A2:4356
cs=0x1a2;eip=0x004357; 	X(POP(di));	// 10570                  pop     di ;~ 01A2:4357
cs=0x1a2;eip=0x004358; 	X(POP(si));	// 10571                  pop     si ;~ 01A2:4358
cs=0x1a2;eip=0x004359; 	X(POP(bp));	// 10572                  pop     bp ;~ 01A2:4359
cs=0x1a2;eip=0x00435a; 	X(POP(dx));	// 10573                  pop     dx ;~ 01A2:435A
cs=0x1a2;eip=0x00435b; 	X(POP(cx));	// 10574                  pop     cx ;~ 01A2:435B
cs=0x1a2;eip=0x00435c; 	X(POP(bx));	// 10575                  pop     bx ;~ 01A2:435C
cs=0x1a2;eip=0x00435d; 	X(POP(ax));	// 10576                  pop     ax ;~ 01A2:435D
cs=0x1a2;eip=0x00435e; 	T(CMP(word_1f388, 0));	// 10577                  cmp     ds:word_1F388, 0 ;~ 01A2:435E
cs=0x1a2;eip=0x004363; 	J(JS(loc_14368));	// 10578                  js      short loc_14368 ;~ 01A2:4363
cs=0x1a2;eip=0x004365; 	T(ax = word_1f388;);	// 10579                  mov     ax, ds:word_1F388 ;~ 01A2:4365
loc_14368:
	// 5068 
cs=0x1a2;eip=0x004368; 	T(CMP(ax, ax));	// 10582                  cmp     ax, ax ;~ 01A2:4368
cs=0x1a2;eip=0x00436a; 	J(RETN(0));	// 10583                  retn ;~ 01A2:436A
loc_1436b:
	// 5069 
cs=0x1a2;eip=0x00436b; 	X(POP(di));	// 10588                  pop     di ;~ 01A2:436B
cs=0x1a2;eip=0x00436c; 	X(POP(ds));	// 10589                  pop     ds ;~ 01A2:436C
cs=0x1a2;eip=0x00436d; 	X(POP(es));	// 10591                  pop     es ;~ 01A2:436D
cs=0x1a2;eip=0x00436e; 	X(POP(di));	// 10592                  pop     di ;~ 01A2:436E
cs=0x1a2;eip=0x00436f; 	X(POP(si));	// 10593                  pop     si ;~ 01A2:436F
cs=0x1a2;eip=0x004370; 	X(POP(bp));	// 10594                  pop     bp ;~ 01A2:4370
cs=0x1a2;eip=0x004371; 	X(POP(dx));	// 10595                  pop     dx ;~ 01A2:4371
cs=0x1a2;eip=0x004372; 	X(POP(cx));	// 10596                  pop     cx ;~ 01A2:4372
cs=0x1a2;eip=0x004373; 	X(POP(bx));	// 10597                  pop     bx ;~ 01A2:4373
cs=0x1a2;eip=0x004374; 	X(POP(ax));	// 10598                  pop     ax ;~ 01A2:4374
cs=0x1a2;eip=0x004375; 	T(ax = 0x0FFFF;);	// 10599                  mov     ax, 0FFFFh ;~ 01A2:4375
cs=0x1a2;eip=0x004378; 	T(OR(ax, ax));	// 10600                  or      ax, ax ;~ 01A2:4378
cs=0x1a2;eip=0x00437a; 	J(RETN(0));	// 10601                  retn ;~ 01A2:437A

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_142ce: 	goto loc_142ce;
        case m2c::kloc_142d8: 	goto loc_142d8;
        case m2c::kloc_142dc: 	goto loc_142dc;
        case m2c::kloc_142f1: 	goto loc_142f1;
        case m2c::kloc_1430f: 	goto loc_1430f;
        case m2c::kloc_1431b: 	goto loc_1431b;
        case m2c::kloc_14324: 	goto loc_14324;
        case m2c::kloc_14342: 	goto loc_14342;
        case m2c::kloc_14346: 	goto loc_14346;
        case m2c::kloc_14353: 	goto loc_14353;
        case m2c::kloc_14355: 	goto loc_14355;
        case m2c::kloc_14368: 	goto loc_14368;
        case m2c::kloc_1436b: 	goto loc_1436b;
        case m2c::ksub_142a5: 	goto sub_142a5;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_437b_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_437b_proc:
    _begin:
cs=0x1a2;eip=0x00437b; 	X(POP(ds));	// 10605                  pop     ds ;~ 01A2:437B
cs=0x1a2;eip=0x00437c; 	X(POP(es));	// 10606                  pop     es ;~ 01A2:437C
cs=0x1a2;eip=0x00437d; 	X(POP(di));	// 10607                  pop     di ;~ 01A2:437D
cs=0x1a2;eip=0x00437e; 	X(POP(si));	// 10608                  pop     si ;~ 01A2:437E
cs=0x1a2;eip=0x00437f; 	X(POP(bp));	// 10609                  pop     bp ;~ 01A2:437F
cs=0x1a2;eip=0x004380; 	X(POP(dx));	// 10610                  pop     dx ;~ 01A2:4380
cs=0x1a2;eip=0x004381; 	X(POP(cx));	// 10611                  pop     cx ;~ 01A2:4381
cs=0x1a2;eip=0x004382; 	X(POP(bx));	// 10612                  pop     bx ;~ 01A2:4382
cs=0x1a2;eip=0x004383; 	X(POP(ax));	// 10613                  pop     ax ;~ 01A2:4383
cs=0x1a2;eip=0x004384; 	T(ax = 0x0FFFF;);	// 10614                  mov     ax, 0FFFFh ;~ 01A2:4384
cs=0x1a2;eip=0x004387; 	T(OR(ax, ax));	// 10615                  or      ax, ax ;~ 01A2:4387
cs=0x1a2;eip=0x004389; 	J(RETN(0));	// 10616                  retn ;~ 01A2:4389

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kseg000_437b_proc: 	goto seg000_437b_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1438a(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1438a:
    _begin:
cs=0x1a2;eip=0x00438a; 	X(PUSH(ax));	// 10624                  push    ax ;~ 01A2:438A
cs=0x1a2;eip=0x00438b; 	X(PUSH(bx));	// 10625                  push    bx ;~ 01A2:438B
cs=0x1a2;eip=0x00438c; 	X(PUSH(cx));	// 10626                  push    cx ;~ 01A2:438C
cs=0x1a2;eip=0x00438d; 	X(PUSH(dx));	// 10627                  push    dx ;~ 01A2:438D
cs=0x1a2;eip=0x00438e; 	X(PUSH(bp));	// 10628                  push    bp ;~ 01A2:438E
cs=0x1a2;eip=0x00438f; 	X(PUSH(si));	// 10629                  push    si ;~ 01A2:438F
cs=0x1a2;eip=0x004390; 	X(PUSH(di));	// 10630                  push    di ;~ 01A2:4390
cs=0x1a2;eip=0x004391; 	X(PUSH(es));	// 10631                  push    es ;~ 01A2:4391
cs=0x1a2;eip=0x004392; 	X(PUSH(ds));	// 10632                  push    ds ;~ 01A2:4392
cs=0x1a2;eip=0x004393; 	J(CALL(sub_14060,0));	// 10633                  call    sub_14060 ;~ 01A2:4393
cs=0x1a2;eip=0x004396; 	T(cx = dx;);	// 10634                  mov     cx, dx ;~ 01A2:4396
cs=0x1a2;eip=0x004398; 	T(SHL(cx, 1));	// 10635                  shl     cx, 1 ;~ 01A2:4398
cs=0x1a2;eip=0x00439a; 	T(SHL(cx, 1));	// 10636                  shl     cx, 1 ;~ 01A2:439A
cs=0x1a2;eip=0x00439c; 	T(ADD(si, cx));	// 10637                  add     si, cx ;~ 01A2:439C
cs=0x1a2;eip=0x00439e; 	T(MOV(bp, *(dw*)(raddr(ds,si+2))));	// 10638                  mov     bp, [si+2] ;~ 01A2:439E
cs=0x1a2;eip=0x0043a1; 	T(ADD(bp, bx));	// 10639                  add     bp, bx ;~ 01A2:43A1
cs=0x1a2;eip=0x0043a3; 	T(MOV(cx, *(dw*)(raddr(ds,si))));	// 10640                  mov     cx, [si] ;~ 01A2:43A3
cs=0x1a2;eip=0x0043a5; 	T(OR(cx, cx));	// 10641                  or      cx, cx ;~ 01A2:43A5
cs=0x1a2;eip=0x0043a7; 	J(JZ(loc_143e4));	// 10642                  jz      short loc_143E4 ;~ 01A2:43A7
cs=0x1a2;eip=0x0043a9; 	X(MOV(*(dw*)(raddr(ds,si)), 0));	// 10643                  mov     word ptr [si], 0 ;~ 01A2:43A9
cs=0x1a2;eip=0x0043ad; 	T(ADD(si, 4));	// 10644                  add     si, 4 ;~ 01A2:43AD
cs=0x1a2;eip=0x0043b0; 	X(PUSH(si));	// 10645                  push    si ;~ 01A2:43B0
cs=0x1a2;eip=0x0043b1; 	T(MOV(si, *(dw*)(raddr(ds,di+0x0A))));	// 10646                  mov     si, [di+0Ah] ;~ 01A2:43B1
cs=0x1a2;eip=0x0043b4; 	T(SUB(si, cx));	// 10647                  sub     si, cx ;~ 01A2:43B4
cs=0x1a2;eip=0x0043b6; 	X(MOV(*(dw*)(raddr(ds,di+0x0A)), si));	// 10648                  mov     [di+0Ah], si ;~ 01A2:43B6
cs=0x1a2;eip=0x0043b9; 	T(ax = bp;);	// 10649                  mov     ax, bp ;~ 01A2:43B9
cs=0x1a2;eip=0x0043bb; 	T(ADD(ax, cx));	// 10650                  add     ax, cx ;~ 01A2:43BB
cs=0x1a2;eip=0x0043bd; 	T(ADD(si, cx));	// 10651                  add     si, cx ;~ 01A2:43BD
cs=0x1a2;eip=0x0043bf; 	T(ADD(si, bx));	// 10652                  add     si, bx ;~ 01A2:43BF
cs=0x1a2;eip=0x0043c1; 	X(PUSH(di));	// 10653                  push    di ;~ 01A2:43C1
cs=0x1a2;eip=0x0043c2; 	T(di = ax;);	// 10654                  mov     di, ax ;~ 01A2:43C2
cs=0x1a2;eip=0x0043c4; 	T(ax = si;);	// 10655                  mov     ax, si ;~ 01A2:43C4
cs=0x1a2;eip=0x0043c6; 	T(SUB(ax, di));	// 10656                  sub     ax, di ;~ 01A2:43C6
cs=0x1a2;eip=0x0043c8; 	J(JZ(loc_143cf));	// 10657                  jz      short loc_143CF ;~ 01A2:43C8
cs=0x1a2;eip=0x0043ca; 	T(si = bp;);	// 10658                  mov     si, bp ;~ 01A2:43CA
cs=0x1a2;eip=0x0043cc; 	J(CALL(sub_146fc,0));	// 10659                  call    sub_146FC ;~ 01A2:43CC
loc_143cf:
	// 5070 
cs=0x1a2;eip=0x0043cf; 	X(POP(di));	// 10662                  pop     di ;~ 01A2:43CF
cs=0x1a2;eip=0x0043d0; 	X(POP(si));	// 10663                  pop     si ;~ 01A2:43D0
cs=0x1a2;eip=0x0043d1; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x0E))));	// 10664                  mov     ax, [di+0Eh] ;~ 01A2:43D1
cs=0x1a2;eip=0x0043d4; 	T(SUB(ax, dx));	// 10665                  sub     ax, dx ;~ 01A2:43D4
cs=0x1a2;eip=0x0043d6; 	T(SUB(ax, 2));	// 10666                  sub     ax, 2 ;~ 01A2:43D6
cs=0x1a2;eip=0x0043d9; 	J(JS(loc_143e4));	// 10667                  js      short loc_143E4 ;~ 01A2:43D9
loc_143db:
	// 5071 
cs=0x1a2;eip=0x0043db; 	X(SUB(*(dw*)(raddr(ds,si+2)), cx));	// 10670                  sub     [si+2], cx ;~ 01A2:43DB
cs=0x1a2;eip=0x0043de; 	T(ADD(si, 4));	// 10671                  add     si, 4 ;~ 01A2:43DE
cs=0x1a2;eip=0x0043e1; 	T(DEC(ax));	// 10672                  dec     ax ;~ 01A2:43E1
cs=0x1a2;eip=0x0043e2; 	J(JNS(loc_143db));	// 10673                  jns     short loc_143DB ;~ 01A2:43E2
loc_143e4:
	// 5072 
cs=0x1a2;eip=0x0043e4; 	T(XOR(ax, ax));	// 10677                  xor     ax, ax ;~ 01A2:43E4
loc_143e6:
	// 5073 
cs=0x1a2;eip=0x0043e6; 	X(POP(ds));	// 10680                  pop     ds ;~ 01A2:43E6
cs=0x1a2;eip=0x0043e7; 	X(POP(es));	// 10681                  pop     es ;~ 01A2:43E7
cs=0x1a2;eip=0x0043e8; 	X(POP(di));	// 10682                  pop     di ;~ 01A2:43E8
cs=0x1a2;eip=0x0043e9; 	X(POP(si));	// 10683                  pop     si ;~ 01A2:43E9
cs=0x1a2;eip=0x0043ea; 	X(POP(bp));	// 10684                  pop     bp ;~ 01A2:43EA
cs=0x1a2;eip=0x0043eb; 	X(POP(dx));	// 10685                  pop     dx ;~ 01A2:43EB
cs=0x1a2;eip=0x0043ec; 	X(POP(cx));	// 10686                  pop     cx ;~ 01A2:43EC
cs=0x1a2;eip=0x0043ed; 	X(POP(bx));	// 10687                  pop     bx ;~ 01A2:43ED
cs=0x1a2;eip=0x0043ee; 	X(POP(ax));	// 10688                  pop     ax ;~ 01A2:43EE
cs=0x1a2;eip=0x0043ef; 	T(OR(ax, ax));	// 10689                  or      ax, ax ;~ 01A2:43EF
cs=0x1a2;eip=0x0043f1; 	J(RETN(0));	// 10690                  retn ;~ 01A2:43F1

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_143cf: 	goto loc_143cf;
        case m2c::kloc_143db: 	goto loc_143db;
        case m2c::kloc_143e4: 	goto loc_143e4;
        case m2c::kloc_143e6: 	goto loc_143e6;
        case m2c::ksub_1438a: 	goto sub_1438a;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_43f2_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_43f2_proc:
    _begin:
cs=0x1a2;eip=0x0043f2; 	T(ax = 0x0FFFF;);	// 10694                  mov     ax, 0FFFFh ;~ 01A2:43F2
cs=0x1a2;eip=0x0043f5; 	J(return sub_1438a(m2c::kloc_143e6, _state););	// 10695                  jmp     short loc_143E6 ;~ 01A2:43F5
ret_1a2_43f7:
	// 5074 
cs=0x1a2;eip=0x0043f7; 	X(POP(ds));	// 10697                  pop     ds ;~ 01A2:43F7
cs=0x1a2;eip=0x0043f8; 	X(POP(es));	// 10699                  pop     es ;~ 01A2:43F8
cs=0x1a2;eip=0x0043f9; 	X(POP(di));	// 10700                  pop     di ;~ 01A2:43F9
cs=0x1a2;eip=0x0043fa; 	X(POP(si));	// 10701                  pop     si ;~ 01A2:43FA
cs=0x1a2;eip=0x0043fb; 	X(POP(bp));	// 10702                  pop     bp ;~ 01A2:43FB
cs=0x1a2;eip=0x0043fc; 	X(POP(dx));	// 10703                  pop     dx ;~ 01A2:43FC
cs=0x1a2;eip=0x0043fd; 	X(POP(cx));	// 10704                  pop     cx ;~ 01A2:43FD
cs=0x1a2;eip=0x0043fe; 	X(POP(bx));	// 10705                  pop     bx ;~ 01A2:43FE
cs=0x1a2;eip=0x0043ff; 	X(POP(ax));	// 10706                  pop     ax ;~ 01A2:43FF
cs=0x1a2;eip=0x004400; 	X(PUSH(ax));	// 10707                  push    ax ;~ 01A2:4400
cs=0x1a2;eip=0x004401; 	X(PUSH(di));	// 10708                  push    di ;~ 01A2:4401
cs=0x1a2;eip=0x004402; 	T(XOR(di, di));	// 10709                  xor     di, di ;~ 01A2:4402
cs=0x1a2;eip=0x004404; 	J(CALL(sub_142a5,0));	// 10710                  call    sub_142A5 ;~ 01A2:4404
cs=0x1a2;eip=0x004407; 	X(POP(di));	// 10711                  pop     di ;~ 01A2:4407
cs=0x1a2;eip=0x004408; 	X(POP(ax));	// 10712                  pop     ax ;~ 01A2:4408
cs=0x1a2;eip=0x004409; 	J(RETN(0));	// 10713                  retn ;~ 01A2:4409

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kret_1a2_43f7: 	goto ret_1a2_43f7;
        case m2c::kseg000_43f2_proc: 	goto seg000_43f2_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1440a(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1440a:
    _begin:
cs=0x1a2;eip=0x00440a; 	X(PUSH(ax));	// 10721                  push    ax ;~ 01A2:440A
cs=0x1a2;eip=0x00440b; 	X(PUSH(bx));	// 10722                  push    bx ;~ 01A2:440B
cs=0x1a2;eip=0x00440c; 	X(PUSH(cx));	// 10723                  push    cx ;~ 01A2:440C
cs=0x1a2;eip=0x00440d; 	X(PUSH(dx));	// 10724                  push    dx ;~ 01A2:440D
cs=0x1a2;eip=0x00440e; 	X(PUSH(bp));	// 10725                  push    bp ;~ 01A2:440E
cs=0x1a2;eip=0x00440f; 	X(PUSH(si));	// 10726                  push    si ;~ 01A2:440F
cs=0x1a2;eip=0x004410; 	X(PUSH(di));	// 10727                  push    di ;~ 01A2:4410
cs=0x1a2;eip=0x004411; 	X(PUSH(es));	// 10728                  push    es ;~ 01A2:4411
cs=0x1a2;eip=0x004412; 	X(PUSH(ds));	// 10729                  push    ds ;~ 01A2:4412
cs=0x1a2;eip=0x004413; 	X(word_1f1b2 = di;);	// 10730                  mov     word_1F1B2, di ;~ 01A2:4413
cs=0x1a2;eip=0x004417; 	J(CALL(sub_14060,0));	// 10731                  call    sub_14060 ;~ 01A2:4417
cs=0x1a2;eip=0x00441a; 	T(ax = dx;);	// 10732                  mov     ax, dx ;~ 01A2:441A
cs=0x1a2;eip=0x00441c; 	T(SHL(ax, 1));	// 10733                  shl     ax, 1 ;~ 01A2:441C
cs=0x1a2;eip=0x00441e; 	T(SHL(ax, 1));	// 10734                  shl     ax, 1 ;~ 01A2:441E
cs=0x1a2;eip=0x004420; 	T(ADD(si, ax));	// 10735                  add     si, ax ;~ 01A2:4420
cs=0x1a2;eip=0x004422; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 10736                  mov     ax, [si] ;~ 01A2:4422
cs=0x1a2;eip=0x004424; 	T(ADD(cx, ax));	// 10737                  add     cx, ax ;~ 01A2:4424
cs=0x1a2;eip=0x004426; 	J(JMP(loc_14449));	// 10738                  jmp     short loc_14449 ;~ 01A2:4426
loc_14428:
	// 5075 
cs=0x1a2;eip=0x004428; 	X(PUSH(ax));	// 10742                  push    ax ;~ 01A2:4428
cs=0x1a2;eip=0x004429; 	X(PUSH(bx));	// 10743                  push    bx ;~ 01A2:4429
cs=0x1a2;eip=0x00442a; 	X(PUSH(cx));	// 10744                  push    cx ;~ 01A2:442A
cs=0x1a2;eip=0x00442b; 	X(PUSH(dx));	// 10745                  push    dx ;~ 01A2:442B
cs=0x1a2;eip=0x00442c; 	X(PUSH(bp));	// 10746                  push    bp ;~ 01A2:442C
cs=0x1a2;eip=0x00442d; 	X(PUSH(si));	// 10747                  push    si ;~ 01A2:442D
cs=0x1a2;eip=0x00442e; 	X(PUSH(di));	// 10748                  push    di ;~ 01A2:442E
cs=0x1a2;eip=0x00442f; 	X(PUSH(es));	// 10749                  push    es ;~ 01A2:442F
cs=0x1a2;eip=0x004430; 	X(PUSH(ds));	// 10750                  push    ds ;~ 01A2:4430
cs=0x1a2;eip=0x004431; 	X(word_1f1b2 = di;);	// 10751                  mov     word_1F1B2, di ;~ 01A2:4431
cs=0x1a2;eip=0x004435; 	J(CALL(sub_14060,0));	// 10752                  call    sub_14060 ;~ 01A2:4435
cs=0x1a2;eip=0x004438; 	T(ax = dx;);	// 10753                  mov     ax, dx ;~ 01A2:4438
cs=0x1a2;eip=0x00443a; 	T(SHL(ax, 1));	// 10754                  shl     ax, 1 ;~ 01A2:443A
cs=0x1a2;eip=0x00443c; 	T(SHL(ax, 1));	// 10755                  shl     ax, 1 ;~ 01A2:443C
cs=0x1a2;eip=0x00443e; 	T(ADD(si, ax));	// 10756                  add     si, ax ;~ 01A2:443E
cs=0x1a2;eip=0x004440; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 10757                  mov     ax, [si] ;~ 01A2:4440
cs=0x1a2;eip=0x004442; 	T(NEG(cx));	// 10758                  neg     cx ;~ 01A2:4442
cs=0x1a2;eip=0x004444; 	T(ADD(cx, ax));	// 10759                  add     cx, ax ;~ 01A2:4444
cs=0x1a2;eip=0x004446; 	J(JMP(loc_144e5));	// 10760                  jmp     loc_144E5 ;~ 01A2:4446
loc_14449:
	// 5076 
cs=0x1a2;eip=0x004449; 	T(OR(bp, bp));	// 10764                  or      bp, bp ;~ 01A2:4449
cs=0x1a2;eip=0x00444b; 	J(JNS(loc_1444f));	// 10765                  jns     short loc_1444F ;~ 01A2:444B
cs=0x1a2;eip=0x00444d; 	T(bp = ax;);	// 10766                  mov     bp, ax ;~ 01A2:444D
loc_1444f:
	// 5077 
cs=0x1a2;eip=0x00444f; 	X(word_1f8d8 = ax;);	// 10769                  mov     ds:word_1F8D8, ax ;~ 01A2:444F
cs=0x1a2;eip=0x004452; 	X(word_1f8d4 = bp;);	// 10770                  mov     ds:word_1F8D4, bp ;~ 01A2:4452
cs=0x1a2;eip=0x004456; 	T(MOV(bp, *(dw*)(raddr(ds,si+2))));	// 10771                  mov     bp, [si+2] ;~ 01A2:4456
cs=0x1a2;eip=0x004459; 	T(ADD(bp, bx));	// 10772                  add     bp, bx ;~ 01A2:4459
cs=0x1a2;eip=0x00445b; 	X(MOV(*(dw*)(raddr(ds,si)), cx));	// 10773                  mov     [si], cx ;~ 01A2:445B
cs=0x1a2;eip=0x00445d; 	X(PUSH(si));	// 10774                  push    si ;~ 01A2:445D
cs=0x1a2;eip=0x00445e; 	T(MOV(si, *(dw*)(raddr(ds,di+0x0A))));	// 10775                  mov     si, [di+0Ah] ;~ 01A2:445E
cs=0x1a2;eip=0x004461; 	T(ax = si;);	// 10776                  mov     ax, si ;~ 01A2:4461
cs=0x1a2;eip=0x004463; 	T(SUB(si, word_1f8d8));	// 10777                  sub     si, ds:word_1F8D8 ;~ 01A2:4463
cs=0x1a2;eip=0x004467; 	T(ADD(si, cx));	// 10778                  add     si, cx ;~ 01A2:4467
cs=0x1a2;eip=0x004469; 	X(MOV(*(dw*)(raddr(ds,di+0x0A)), si));	// 10779                  mov     [di+0Ah], si ;~ 01A2:4469
cs=0x1a2;eip=0x00446c; 	T(ADD(ax, bx));	// 10780                  add     ax, bx ;~ 01A2:446C
cs=0x1a2;eip=0x00446e; 	T(ADD(si, bx));	// 10781                  add     si, bx ;~ 01A2:446E
cs=0x1a2;eip=0x004470; 	T(ADD(bp, word_1f8d8));	// 10782                  add     bp, ds:word_1F8D8 ;~ 01A2:4470
cs=0x1a2;eip=0x004474; 	X(PUSH(cx));	// 10783                  push    cx ;~ 01A2:4474
cs=0x1a2;eip=0x004475; 	X(PUSH(di));	// 10784                  push    di ;~ 01A2:4475
cs=0x1a2;eip=0x004476; 	T(di = ax;);	// 10785                  mov     di, ax ;~ 01A2:4476
cs=0x1a2;eip=0x004478; 	T(SUB(ax, bp));	// 10786                  sub     ax, bp ;~ 01A2:4478
cs=0x1a2;eip=0x00447a; 	T(cx = word_1f8d8;);	// 10787                  mov     cx, ds:word_1F8D8 ;~ 01A2:447A
cs=0x1a2;eip=0x00447e; 	T(SUB(cx, word_1f8d4));	// 10788                  sub     cx, ds:word_1F8D4 ;~ 01A2:447E
cs=0x1a2;eip=0x004482; 	X(word_1f8d6 = cx;);	// 10789                  mov     ds:word_1F8D6, cx ;~ 01A2:4482
cs=0x1a2;eip=0x004486; 	T(ADD(ax, cx));	// 10790                  add     ax, cx ;~ 01A2:4486
cs=0x1a2;eip=0x004488; 	J(JZ(loc_1448d));	// 10791                  jz      short loc_1448D ;~ 01A2:4488
cs=0x1a2;eip=0x00448a; 	J(CALL(sub_146d8,0));	// 10792                  call    sub_146D8 ;~ 01A2:448A
loc_1448d:
	// 5078 
cs=0x1a2;eip=0x00448d; 	T(ax = ds;);	// 10795                  mov     ax, ds ;~ 01A2:448D
cs=0x1a2;eip=0x00448f; 	T(es = ax;);	// 10796                  mov     es, ax ;~ 01A2:448F
cs=0x1a2;eip=0x004491; 	X(POP(di));	// 10798                  pop     di ;~ 01A2:4491
cs=0x1a2;eip=0x004492; 	X(POP(cx));	// 10799                  pop     cx ;~ 01A2:4492
cs=0x1a2;eip=0x004493; 	X(POP(si));	// 10800                  pop     si ;~ 01A2:4493
cs=0x1a2;eip=0x004494; 	T(SUB(cx, word_1f8d8));	// 10801                  sub     cx, ds:word_1F8D8 ;~ 01A2:4494
cs=0x1a2;eip=0x004498; 	X(PUSH(cx));	// 10802                  push    cx ;~ 01A2:4498
cs=0x1a2;eip=0x004499; 	T(SUB(bp, word_1f8d6));	// 10803                  sub     bp, ds:word_1F8D6 ;~ 01A2:4499
cs=0x1a2;eip=0x00449d; 	X(*(dw*)(&off_1f194) = bp;);	// 10804                  mov     word ptr off_1F194, bp ;~ 01A2:449D
cs=0x1a2;eip=0x0044a1; 	X(PUSH(si));	// 10805                  push    si ;~ 01A2:44A1
cs=0x1a2;eip=0x0044a2; 	X(PUSH(di));	// 10806                  push    di ;~ 01A2:44A2
cs=0x1a2;eip=0x0044a3; 	T(si = word_1f1b2;);	// 10807                  mov     si, word_1F1B2 ;~ 01A2:44A3
cs=0x1a2;eip=0x0044a7; 	T(CMP(si, 0x100));	// 10808                  cmp     si, 100h ;~ 01A2:44A7
cs=0x1a2;eip=0x0044ab; 	J(JA(loc_144c0));	// 10809                  ja      short loc_144C0 ;~ 01A2:44AB
cs=0x1a2;eip=0x0044ad; 	T(ax = si;);	// 10810                  mov     ax, si ;~ 01A2:44AD
cs=0x1a2;eip=0x0044af; 	T(ah = al;);	// 10811                  mov     ah, al ;~ 01A2:44AF
cs=0x1a2;eip=0x0044b1; 	T(di = bp;);	// 10812                  mov     di, bp ;~ 01A2:44B1
cs=0x1a2;eip=0x0044b3; 	T(SHR(cl, 1));	// 10813                  shr     cl, 1 ;~ 01A2:44B3
cs=0x1a2;eip=0x0044b5; 	J(JNC(loc_144bc));	// 10814                  jnb     short loc_144BC ;~ 01A2:44B5
cs=0x1a2;eip=0x0044b7; 	X(STOSB);	// 10815                  stosb ;~ 01A2:44B7
cs=0x1a2;eip=0x0044b8; 	T(OR(cx, cx));	// 10816                  or      cx, cx ;~ 01A2:44B8
cs=0x1a2;eip=0x0044ba; 	J(JZ(loc_144cd));	// 10817                  jz      short loc_144CD ;~ 01A2:44BA
loc_144bc:
	// 5079 
	// 10820                  rep stosw ;~ 01A2:44BC
cs=0x1a2;eip=0x0044bc; 	X(	REP STOSW);	// 10820                  rep stosw ;~ 01A2:44BC
cs=0x1a2;eip=0x0044be; 	J(JMP(loc_144cd));	// 10821                  jmp     short loc_144CD ;~ 01A2:44BE
loc_144c0:
	// 5080 
cs=0x1a2;eip=0x0044c0; 	T(di = bp;);	// 10825                  mov     di, bp ;~ 01A2:44C0
cs=0x1a2;eip=0x0044c2; 	T(SHR(cl, 1));	// 10826                  shr     cl, 1 ;~ 01A2:44C2
cs=0x1a2;eip=0x0044c4; 	J(JNC(loc_144cb));	// 10827                  jnb     short loc_144CB ;~ 01A2:44C4
cs=0x1a2;eip=0x0044c6; 	X(MOVSB);	// 10828                  movsb ;~ 01A2:44C6
cs=0x1a2;eip=0x0044c7; 	T(OR(cx, cx));	// 10829                  or      cx, cx ;~ 01A2:44C7
cs=0x1a2;eip=0x0044c9; 	J(JZ(loc_144cd));	// 10830                  jz      short loc_144CD ;~ 01A2:44C9
loc_144cb:
	// 5081 
	// 10833                  rep movsw ;~ 01A2:44CB
cs=0x1a2;eip=0x0044cb; 	X(	REP MOVSW);	// 10833                  rep movsw ;~ 01A2:44CB
loc_144cd:
	// 5082 
cs=0x1a2;eip=0x0044cd; 	X(POP(di));	// 10837                  pop     di ;~ 01A2:44CD
cs=0x1a2;eip=0x0044ce; 	X(POP(si));	// 10838                  pop     si ;~ 01A2:44CE
cs=0x1a2;eip=0x0044cf; 	X(POP(cx));	// 10839                  pop     cx ;~ 01A2:44CF
cs=0x1a2;eip=0x0044d0; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x0E))));	// 10840                  mov     ax, [di+0Eh] ;~ 01A2:44D0
cs=0x1a2;eip=0x0044d3; 	T(SUB(ax, dx));	// 10841                  sub     ax, dx ;~ 01A2:44D3
cs=0x1a2;eip=0x0044d5; 	T(SUB(ax, 2));	// 10842                  sub     ax, 2 ;~ 01A2:44D5
cs=0x1a2;eip=0x0044d8; 	J(JS(loc_14546));	// 10843                  js      short loc_14546 ;~ 01A2:44D8
loc_144da:
	// 5083 
cs=0x1a2;eip=0x0044da; 	T(ADD(si, 4));	// 10846                  add     si, 4 ;~ 01A2:44DA
cs=0x1a2;eip=0x0044dd; 	X(ADD(*(dw*)(raddr(ds,si+2)), cx));	// 10847                  add     [si+2], cx ;~ 01A2:44DD
cs=0x1a2;eip=0x0044e0; 	T(DEC(ax));	// 10848                  dec     ax ;~ 01A2:44E0
cs=0x1a2;eip=0x0044e1; 	J(JNS(loc_144da));	// 10849                  jns     short loc_144DA ;~ 01A2:44E1
cs=0x1a2;eip=0x0044e3; 	J(JMP(loc_14546));	// 10850                  jmp     short loc_14546 ;~ 01A2:44E3
loc_144e5:
	// 5084 
cs=0x1a2;eip=0x0044e5; 	T(OR(bp, bp));	// 10854                  or      bp, bp ;~ 01A2:44E5
cs=0x1a2;eip=0x0044e7; 	J(JNS(loc_144eb));	// 10855                  jns     short loc_144EB ;~ 01A2:44E7
cs=0x1a2;eip=0x0044e9; 	T(bp = cx;);	// 10856                  mov     bp, cx ;~ 01A2:44E9
loc_144eb:
	// 5085 
cs=0x1a2;eip=0x0044eb; 	X(word_1f8d8 = ax;);	// 10859                  mov     ds:word_1F8D8, ax ;~ 01A2:44EB
cs=0x1a2;eip=0x0044ee; 	X(word_1f8d4 = bp;);	// 10860                  mov     ds:word_1F8D4, bp ;~ 01A2:44EE
cs=0x1a2;eip=0x0044f2; 	T(MOV(bp, *(dw*)(raddr(ds,si+2))));	// 10861                  mov     bp, [si+2] ;~ 01A2:44F2
cs=0x1a2;eip=0x0044f5; 	T(ADD(bp, bx));	// 10862                  add     bp, bx ;~ 01A2:44F5
cs=0x1a2;eip=0x0044f7; 	X(MOV(*(dw*)(raddr(ds,si)), cx));	// 10863                  mov     [si], cx ;~ 01A2:44F7
cs=0x1a2;eip=0x0044f9; 	X(PUSH(si));	// 10864                  push    si ;~ 01A2:44F9
cs=0x1a2;eip=0x0044fa; 	T(MOV(si, *(dw*)(raddr(ds,di+0x0A))));	// 10865                  mov     si, [di+0Ah] ;~ 01A2:44FA
cs=0x1a2;eip=0x0044fd; 	T(CMP(*(dw*)(raddr(ds,di+0x0A)), 0));	// 10866                  cmp     word ptr [di+0Ah], 0 ;~ 01A2:44FD
cs=0x1a2;eip=0x004501; 	J(JZ(loc_14552));	// 10867                  jz      short loc_14552 ;~ 01A2:4501
cs=0x1a2;eip=0x004503; 	T(SUB(si, word_1f8d8));	// 10868                  sub     si, ds:word_1F8D8 ;~ 01A2:4503
cs=0x1a2;eip=0x004507; 	T(ADD(si, cx));	// 10869                  add     si, cx ;~ 01A2:4507
cs=0x1a2;eip=0x004509; 	X(MOV(*(dw*)(raddr(ds,di+0x0A)), si));	// 10870                  mov     [di+0Ah], si ;~ 01A2:4509
cs=0x1a2;eip=0x00450c; 	T(ADD(si, bx));	// 10871                  add     si, bx ;~ 01A2:450C
cs=0x1a2;eip=0x00450e; 	T(ADD(bp, word_1f8d4));	// 10872                  add     bp, ds:word_1F8D4 ;~ 01A2:450E
cs=0x1a2;eip=0x004512; 	X(*(dw*)(&off_1f194) = bp;);	// 10873                  mov     word ptr off_1F194, bp ;~ 01A2:4512
cs=0x1a2;eip=0x004516; 	X(SUB(word_1f8d8, cx));	// 10874                  sub     ds:word_1F8D8, cx ;~ 01A2:4516
cs=0x1a2;eip=0x00451a; 	X(PUSH(di));	// 10875                  push    di ;~ 01A2:451A
cs=0x1a2;eip=0x00451b; 	T(di = si;);	// 10876                  mov     di, si ;~ 01A2:451B
cs=0x1a2;eip=0x00451d; 	T(SUB(di, bp));	// 10877                  sub     di, bp ;~ 01A2:451D
cs=0x1a2;eip=0x00451f; 	J(JZ(loc_1452d));	// 10878                  jz      short loc_1452D ;~ 01A2:451F
cs=0x1a2;eip=0x004521; 	T(ax = bp;);	// 10879                  mov     ax, bp ;~ 01A2:4521
cs=0x1a2;eip=0x004523; 	T(ADD(ax, word_1f8d8));	// 10880                  add     ax, ds:word_1F8D8 ;~ 01A2:4523
cs=0x1a2;eip=0x004527; 	T(XCHG(ax, di));	// 10881                  xchg    ax, di ;~ 01A2:4527
cs=0x1a2;eip=0x004528; 	T(si = bp;);	// 10882                  mov     si, bp ;~ 01A2:4528
cs=0x1a2;eip=0x00452a; 	J(CALL(sub_146fc,0));	// 10883                  call    sub_146FC ;~ 01A2:452A
loc_1452d:
	// 5086 
cs=0x1a2;eip=0x00452d; 	X(POP(di));	// 10886                  pop     di ;~ 01A2:452D
cs=0x1a2;eip=0x00452e; 	X(POP(si));	// 10887                  pop     si ;~ 01A2:452E
cs=0x1a2;eip=0x00452f; 	T(cx = word_1f8d8;);	// 10888                  mov     cx, ds:word_1F8D8 ;~ 01A2:452F
cs=0x1a2;eip=0x004533; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x0E))));	// 10889                  mov     ax, [di+0Eh] ;~ 01A2:4533
cs=0x1a2;eip=0x004536; 	T(SUB(ax, dx));	// 10890                  sub     ax, dx ;~ 01A2:4536
cs=0x1a2;eip=0x004538; 	T(SUB(ax, 2));	// 10891                  sub     ax, 2 ;~ 01A2:4538
cs=0x1a2;eip=0x00453b; 	J(JS(loc_14546));	// 10892                  js      short loc_14546 ;~ 01A2:453B
loc_1453d:
	// 5087 
cs=0x1a2;eip=0x00453d; 	T(ADD(si, 4));	// 10895                  add     si, 4 ;~ 01A2:453D
cs=0x1a2;eip=0x004540; 	X(SUB(*(dw*)(raddr(ds,si+2)), cx));	// 10896                  sub     [si+2], cx ;~ 01A2:4540
cs=0x1a2;eip=0x004543; 	T(DEC(ax));	// 10897                  dec     ax ;~ 01A2:4543
cs=0x1a2;eip=0x004544; 	J(JNS(loc_1453d));	// 10898                  jns     short loc_1453D ;~ 01A2:4544
loc_14546:
	// 5088 
cs=0x1a2;eip=0x004546; 	T(XOR(ax, ax));	// 10902                  xor     ax, ax ;~ 01A2:4546
loc_14548:
	// 5089 
cs=0x1a2;eip=0x004548; 	X(POP(ds));	// 10905                  pop     ds ;~ 01A2:4548
cs=0x1a2;eip=0x004549; 	X(POP(es));	// 10906                  pop     es ;~ 01A2:4549
cs=0x1a2;eip=0x00454a; 	X(POP(di));	// 10908                  pop     di ;~ 01A2:454A
cs=0x1a2;eip=0x00454b; 	X(POP(si));	// 10909                  pop     si ;~ 01A2:454B
cs=0x1a2;eip=0x00454c; 	X(POP(bp));	// 10910                  pop     bp ;~ 01A2:454C
cs=0x1a2;eip=0x00454d; 	X(POP(dx));	// 10911                  pop     dx ;~ 01A2:454D
cs=0x1a2;eip=0x00454e; 	X(POP(cx));	// 10912                  pop     cx ;~ 01A2:454E
cs=0x1a2;eip=0x00454f; 	X(POP(bx));	// 10913                  pop     bx ;~ 01A2:454F
cs=0x1a2;eip=0x004550; 	X(POP(ax));	// 10914                  pop     ax ;~ 01A2:4550
cs=0x1a2;eip=0x004551; 	J(RETN(0));	// 10915                  retn ;~ 01A2:4551
loc_14552:
	// 5090 
cs=0x1a2;eip=0x004552; 	T(ax = 0x0FFFF;);	// 10919                  mov     ax, 0FFFFh ;~ 01A2:4552
cs=0x1a2;eip=0x004555; 	J(JMP(loc_14548));	// 10920                  jmp     short loc_14548 ;~ 01A2:4555

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_14428: 	goto loc_14428;
        case m2c::kloc_14449: 	goto loc_14449;
        case m2c::kloc_1444f: 	goto loc_1444f;
        case m2c::kloc_1448d: 	goto loc_1448d;
        case m2c::kloc_144bc: 	goto loc_144bc;
        case m2c::kloc_144c0: 	goto loc_144c0;
        case m2c::kloc_144cb: 	goto loc_144cb;
        case m2c::kloc_144cd: 	goto loc_144cd;
        case m2c::kloc_144da: 	goto loc_144da;
        case m2c::kloc_144e5: 	goto loc_144e5;
        case m2c::kloc_144eb: 	goto loc_144eb;
        case m2c::kloc_1452d: 	goto loc_1452d;
        case m2c::kloc_1453d: 	goto loc_1453d;
        case m2c::kloc_14546: 	goto loc_14546;
        case m2c::kloc_14548: 	goto loc_14548;
        case m2c::kloc_14552: 	goto loc_14552;
        case m2c::ksub_1440a: 	goto sub_1440a;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_14557(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_14557:
    _begin:
cs=0x1a2;eip=0x004557; 	X(PUSH(ax));	// 10928                  push    ax ;~ 01A2:4557
cs=0x1a2;eip=0x004558; 	X(PUSH(si));	// 10929                  push    si ;~ 01A2:4558
cs=0x1a2;eip=0x004559; 	T(ax = dx;);	// 10930                  mov     ax, dx ;~ 01A2:4559
cs=0x1a2;eip=0x00455b; 	T(SHL(ax, 1));	// 10931                  shl     ax, 1 ;~ 01A2:455B
cs=0x1a2;eip=0x00455d; 	T(SHL(ax, 1));	// 10932                  shl     ax, 1 ;~ 01A2:455D
cs=0x1a2;eip=0x00455f; 	T(ADD(si, ax));	// 10933                  add     si, ax ;~ 01A2:455F
cs=0x1a2;eip=0x004561; 	J(return sub_14563(m2c::kloc_14567, _state););	// 10934                  jmp     short loc_14567 ;~ 01A2:4561

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_14557: 	goto sub_14557;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_14563(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_14563:
    _begin:
cs=0x1a2;eip=0x004563; 	T(XOR(dx, dx));	// 10942                  xor     dx, dx ;~ 01A2:4563
cs=0x1a2;eip=0x004565; 	X(PUSH(ax));	// 10943                  push    ax ;~ 01A2:4565
cs=0x1a2;eip=0x004566; 	X(PUSH(si));	// 10944                  push    si ;~ 01A2:4566
loc_14567:
	// 5091 
cs=0x1a2;eip=0x004567; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x0E))));	// 10947                  mov     ax, [di+0Eh] ;~ 01A2:4567
loc_1456a:
	// 5092 
cs=0x1a2;eip=0x00456a; 	T(CMP(*(dw*)(raddr(ds,si)), 0));	// 10950                  cmp     word ptr [si], 0 ;~ 01A2:456A
cs=0x1a2;eip=0x00456d; 	J(JZ(loc_1457a));	// 10951                  jz      short loc_1457A ;~ 01A2:456D
cs=0x1a2;eip=0x00456f; 	T(ADD(si, 4));	// 10952                  add     si, 4 ;~ 01A2:456F
cs=0x1a2;eip=0x004572; 	T(INC(dx));	// 10953                  inc     dx ;~ 01A2:4572
cs=0x1a2;eip=0x004573; 	T(CMP(dx, ax));	// 10954                  cmp     dx, ax ;~ 01A2:4573
cs=0x1a2;eip=0x004575; 	J(JNZ(loc_1456a));	// 10955                  jnz     short loc_1456A ;~ 01A2:4575
cs=0x1a2;eip=0x004577; 	T(dx = 0x0FFFF;);	// 10956                  mov     dx, 0FFFFh ;~ 01A2:4577
loc_1457a:
	// 5093 
cs=0x1a2;eip=0x00457a; 	X(POP(si));	// 10959                  pop     si ;~ 01A2:457A
cs=0x1a2;eip=0x00457b; 	X(POP(ax));	// 10960                  pop     ax ;~ 01A2:457B
cs=0x1a2;eip=0x00457c; 	J(RETN(0));	// 10961                  retn ;~ 01A2:457C

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_14567: 	goto loc_14567;
        case m2c::kloc_1456a: 	goto loc_1456a;
        case m2c::kloc_1457a: 	goto loc_1457a;
        case m2c::ksub_14563: 	goto sub_14563;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1457d(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1457d:
    _begin:
cs=0x1a2;eip=0x00457d; 	J(CALL(sub_14060,0));	// 10971                  call    sub_14060 ;~ 01A2:457D
cs=0x1a2;eip=0x004580; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x0A))));	// 10972                  mov     ax, [di+0Ah] ;~ 01A2:4580
cs=0x1a2;eip=0x004583; 	T(dx = di;);	// 10973                  mov     dx, di ;~ 01A2:4583
cs=0x1a2;eip=0x004585; 	X(PUSH(ax));	// 10974                  push    ax ;~ 01A2:4585
cs=0x1a2;eip=0x004586; 	X(PUSH(bx));	// 10975                  push    bx ;~ 01A2:4586
cs=0x1a2;eip=0x004587; 	X(PUSH(cx));	// 10976                  push    cx ;~ 01A2:4587
cs=0x1a2;eip=0x004588; 	X(PUSH(dx));	// 10977                  push    dx ;~ 01A2:4588
cs=0x1a2;eip=0x004589; 	X(PUSH(bp));	// 10978                  push    bp ;~ 01A2:4589
cs=0x1a2;eip=0x00458a; 	X(PUSH(si));	// 10979                  push    si ;~ 01A2:458A
cs=0x1a2;eip=0x00458b; 	X(PUSH(di));	// 10980                  push    di ;~ 01A2:458B
cs=0x1a2;eip=0x00458c; 	X(PUSH(es));	// 10981                  push    es ;~ 01A2:458C
cs=0x1a2;eip=0x00458d; 	X(PUSH(ds));	// 10982                  push    ds ;~ 01A2:458D
cs=0x1a2;eip=0x00458e; 	T(ADD(dx, 0x0A));	// 10983                  add     dx, 0Ah ;~ 01A2:458E
cs=0x1a2;eip=0x004591; 	T(cx = 2;);	// 10984                  mov     cx, 2 ;~ 01A2:4591
cs=0x1a2;eip=0x004594; 	T(bx = word_1f8ee;);	// 10985                  mov     bx, ds:word_1F8EE ;~ 01A2:4594
cs=0x1a2;eip=0x004598; 	X(ADD(*(dw*)(&unk_6fb90), cx));	// 10986                  add     word ptr ss:unk_6FB90, cx ;~ 01A2:4598
cs=0x1a2;eip=0x00459d; 	T(ah = 0x40;);	// 10987                  mov     ah, 40h ;~ 01A2:459D
cs=0x1a2;eip=0x00459f; 	S(_INT(0x21));	// 10988                  int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE ;~ 01A2:459F
cs=0x1a2;eip=0x0045a1; 	X(POP(ds));	// 10990                  pop     ds ;~ 01A2:45A1
cs=0x1a2;eip=0x0045a2; 	X(POP(es));	// 10991                  pop     es ;~ 01A2:45A2
cs=0x1a2;eip=0x0045a3; 	X(POP(di));	// 10992                  pop     di ;~ 01A2:45A3
cs=0x1a2;eip=0x0045a4; 	X(POP(si));	// 10993                  pop     si ;~ 01A2:45A4
cs=0x1a2;eip=0x0045a5; 	X(POP(bp));	// 10994                  pop     bp ;~ 01A2:45A5
cs=0x1a2;eip=0x0045a6; 	X(POP(dx));	// 10995                  pop     dx ;~ 01A2:45A6
cs=0x1a2;eip=0x0045a7; 	X(POP(cx));	// 10996                  pop     cx ;~ 01A2:45A7
cs=0x1a2;eip=0x0045a8; 	X(POP(bx));	// 10997                  pop     bx ;~ 01A2:45A8
cs=0x1a2;eip=0x0045a9; 	X(POP(ax));	// 10998                  pop     ax ;~ 01A2:45A9
cs=0x1a2;eip=0x0045aa; 	J(JC(loc_14624));	// 10999                  jb      short loc_14624 ;~ 01A2:45AA
cs=0x1a2;eip=0x0045ac; 	T(CMP(word_1117b, 0));	// 11000                  cmp     cs:word_1117B, 0 ;~ 01A2:45AC
cs=0x1a2;eip=0x0045b2; 	J(JS(loc_14624));	// 11001                  js      short loc_14624 ;~ 01A2:45B2
cs=0x1a2;eip=0x0045b4; 	T(OR(ax, ax));	// 11002                  or      ax, ax ;~ 01A2:45B4
cs=0x1a2;eip=0x0045b6; 	J(JZ(loc_14621));	// 11003                  jz      short loc_14621 ;~ 01A2:45B6
cs=0x1a2;eip=0x0045b8; 	T(cx = ax;);	// 11004                  mov     cx, ax ;~ 01A2:45B8
cs=0x1a2;eip=0x0045ba; 	T(XCHG(bx, si));	// 11005                  xchg    bx, si ;~ 01A2:45BA
cs=0x1a2;eip=0x0045bc; 	X(PUSH(ax));	// 11006                  push    ax ;~ 01A2:45BC
cs=0x1a2;eip=0x0045bd; 	X(PUSH(bx));	// 11007                  push    bx ;~ 01A2:45BD
cs=0x1a2;eip=0x0045be; 	X(PUSH(cx));	// 11008                  push    cx ;~ 01A2:45BE
cs=0x1a2;eip=0x0045bf; 	X(PUSH(dx));	// 11009                  push    dx ;~ 01A2:45BF
cs=0x1a2;eip=0x0045c0; 	X(PUSH(bp));	// 11010                  push    bp ;~ 01A2:45C0
cs=0x1a2;eip=0x0045c1; 	X(PUSH(si));	// 11011                  push    si ;~ 01A2:45C1
cs=0x1a2;eip=0x0045c2; 	X(PUSH(di));	// 11012                  push    di ;~ 01A2:45C2
cs=0x1a2;eip=0x0045c3; 	X(PUSH(es));	// 11013                  push    es ;~ 01A2:45C3
cs=0x1a2;eip=0x0045c4; 	X(PUSH(ds));	// 11014                  push    ds ;~ 01A2:45C4
cs=0x1a2;eip=0x0045c5; 	T(dx = si;);	// 11015                  mov     dx, si ;~ 01A2:45C5
cs=0x1a2;eip=0x0045c7; 	T(cx = cx;);	// 11016                  mov     cx, cx ;~ 01A2:45C7
cs=0x1a2;eip=0x0045c9; 	T(bx = word_1f8ee;);	// 11017                  mov     bx, ds:word_1F8EE ;~ 01A2:45C9
cs=0x1a2;eip=0x0045cd; 	X(ADD(*(dw*)(&unk_6fb90), cx));	// 11018                  add     word ptr ss:unk_6FB90, cx ;~ 01A2:45CD
cs=0x1a2;eip=0x0045d2; 	T(ah = 0x40;);	// 11019                  mov     ah, 40h ;~ 01A2:45D2
cs=0x1a2;eip=0x0045d4; 	S(_INT(0x21));	// 11020                  int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE ;~ 01A2:45D4
cs=0x1a2;eip=0x0045d6; 	X(POP(ds));	// 11022                  pop     ds ;~ 01A2:45D6
cs=0x1a2;eip=0x0045d7; 	X(POP(es));	// 11023                  pop     es ;~ 01A2:45D7
cs=0x1a2;eip=0x0045d8; 	X(POP(di));	// 11024                  pop     di ;~ 01A2:45D8
cs=0x1a2;eip=0x0045d9; 	X(POP(si));	// 11025                  pop     si ;~ 01A2:45D9
cs=0x1a2;eip=0x0045da; 	X(POP(bp));	// 11026                  pop     bp ;~ 01A2:45DA
cs=0x1a2;eip=0x0045db; 	X(POP(dx));	// 11027                  pop     dx ;~ 01A2:45DB
cs=0x1a2;eip=0x0045dc; 	X(POP(cx));	// 11028                  pop     cx ;~ 01A2:45DC
cs=0x1a2;eip=0x0045dd; 	X(POP(bx));	// 11029                  pop     bx ;~ 01A2:45DD
cs=0x1a2;eip=0x0045de; 	X(POP(ax));	// 11030                  pop     ax ;~ 01A2:45DE
cs=0x1a2;eip=0x0045df; 	J(JC(loc_14624));	// 11031                  jb      short loc_14624 ;~ 01A2:45DF
cs=0x1a2;eip=0x0045e1; 	T(CMP(word_1117b, 0));	// 11032                  cmp     cs:word_1117B, 0 ;~ 01A2:45E1
cs=0x1a2;eip=0x0045e7; 	J(JS(loc_14624));	// 11033                  js      short loc_14624 ;~ 01A2:45E7
cs=0x1a2;eip=0x0045e9; 	T(si = dx;);	// 11034                  mov     si, dx ;~ 01A2:45E9
cs=0x1a2;eip=0x0045eb; 	T(MOV(cx, *(dw*)(raddr(ds,si+0x0E))));	// 11035                  mov     cx, [si+0Eh] ;~ 01A2:45EB
cs=0x1a2;eip=0x0045ee; 	T(SHL(cx, 1));	// 11036                  shl     cx, 1 ;~ 01A2:45EE
cs=0x1a2;eip=0x0045f0; 	T(SHL(cx, 1));	// 11037                  shl     cx, 1 ;~ 01A2:45F0
cs=0x1a2;eip=0x0045f2; 	T(XCHG(bx, si));	// 11038                  xchg    bx, si ;~ 01A2:45F2
cs=0x1a2;eip=0x0045f4; 	X(PUSH(ax));	// 11039                  push    ax ;~ 01A2:45F4
cs=0x1a2;eip=0x0045f5; 	X(PUSH(bx));	// 11040                  push    bx ;~ 01A2:45F5
cs=0x1a2;eip=0x0045f6; 	X(PUSH(cx));	// 11041                  push    cx ;~ 01A2:45F6
cs=0x1a2;eip=0x0045f7; 	X(PUSH(dx));	// 11042                  push    dx ;~ 01A2:45F7
cs=0x1a2;eip=0x0045f8; 	X(PUSH(bp));	// 11043                  push    bp ;~ 01A2:45F8
cs=0x1a2;eip=0x0045f9; 	X(PUSH(si));	// 11044                  push    si ;~ 01A2:45F9
cs=0x1a2;eip=0x0045fa; 	X(PUSH(di));	// 11045                  push    di ;~ 01A2:45FA
cs=0x1a2;eip=0x0045fb; 	X(PUSH(es));	// 11046                  push    es ;~ 01A2:45FB
cs=0x1a2;eip=0x0045fc; 	X(PUSH(ds));	// 11047                  push    ds ;~ 01A2:45FC
cs=0x1a2;eip=0x0045fd; 	T(dx = si;);	// 11048                  mov     dx, si ;~ 01A2:45FD
cs=0x1a2;eip=0x0045ff; 	T(cx = cx;);	// 11049                  mov     cx, cx ;~ 01A2:45FF
cs=0x1a2;eip=0x004601; 	T(bx = word_1f8ee;);	// 11050                  mov     bx, ds:word_1F8EE ;~ 01A2:4601
cs=0x1a2;eip=0x004605; 	X(ADD(*(dw*)(&unk_6fb90), cx));	// 11051                  add     word ptr ss:unk_6FB90, cx ;~ 01A2:4605
cs=0x1a2;eip=0x00460a; 	T(ah = 0x40;);	// 11052                  mov     ah, 40h ;~ 01A2:460A
cs=0x1a2;eip=0x00460c; 	S(_INT(0x21));	// 11053                  int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE ;~ 01A2:460C
cs=0x1a2;eip=0x00460e; 	X(POP(ds));	// 11055                  pop     ds ;~ 01A2:460E
cs=0x1a2;eip=0x00460f; 	X(POP(es));	// 11056                  pop     es ;~ 01A2:460F
cs=0x1a2;eip=0x004610; 	X(POP(di));	// 11057                  pop     di ;~ 01A2:4610
cs=0x1a2;eip=0x004611; 	X(POP(si));	// 11058                  pop     si ;~ 01A2:4611
cs=0x1a2;eip=0x004612; 	X(POP(bp));	// 11059                  pop     bp ;~ 01A2:4612
cs=0x1a2;eip=0x004613; 	X(POP(dx));	// 11060                  pop     dx ;~ 01A2:4613
cs=0x1a2;eip=0x004614; 	X(POP(cx));	// 11061                  pop     cx ;~ 01A2:4614
cs=0x1a2;eip=0x004615; 	X(POP(bx));	// 11062                  pop     bx ;~ 01A2:4615
cs=0x1a2;eip=0x004616; 	X(POP(ax));	// 11063                  pop     ax ;~ 01A2:4616
cs=0x1a2;eip=0x004617; 	J(JC(loc_14624));	// 11064                  jb      short loc_14624 ;~ 01A2:4617
cs=0x1a2;eip=0x004619; 	T(CMP(word_1117b, 0));	// 11065                  cmp     cs:word_1117B, 0 ;~ 01A2:4619
cs=0x1a2;eip=0x00461f; 	J(JS(loc_14624));	// 11066                  js      short loc_14624 ;~ 01A2:461F
loc_14621:
	// 5094 
cs=0x1a2;eip=0x004621; 	T(XOR(ax, ax));	// 11069                  xor     ax, ax ;~ 01A2:4621
cs=0x1a2;eip=0x004623; 	J(RETN(0));	// 11070                  retn ;~ 01A2:4623
loc_14624:
	// 5095 
cs=0x1a2;eip=0x004624; 	T(ax = 0x0FFFF;);	// 11075                  mov     ax, 0FFFFh ;~ 01A2:4624
cs=0x1a2;eip=0x004627; 	J(RETN(0));	// 11076                  retn ;~ 01A2:4627

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_14621: 	goto loc_14621;
        case m2c::kloc_14624: 	goto loc_14624;
        case m2c::ksub_1457d: 	goto sub_1457d;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_14628(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_14628:
    _begin:
cs=0x1a2;eip=0x004628; 	J(CALL(sub_14060,0));	// 11085                  call    sub_14060 ;~ 01A2:4628
cs=0x1a2;eip=0x00462b; 	T(dx = di;);	// 11086                  mov     dx, di ;~ 01A2:462B
cs=0x1a2;eip=0x00462d; 	T(ax = ds;);	// 11087                  mov     ax, ds ;~ 01A2:462D
cs=0x1a2;eip=0x00462f; 	T(es = ax;);	// 11088                  mov     es, ax ;~ 01A2:462F
cs=0x1a2;eip=0x004631; 	X(PUSH(ax));	// 11089                  push    ax ;~ 01A2:4631
cs=0x1a2;eip=0x004632; 	X(PUSH(bx));	// 11090                  push    bx ;~ 01A2:4632
cs=0x1a2;eip=0x004633; 	X(PUSH(cx));	// 11091                  push    cx ;~ 01A2:4633
cs=0x1a2;eip=0x004634; 	X(PUSH(dx));	// 11092                  push    dx ;~ 01A2:4634
cs=0x1a2;eip=0x004635; 	X(PUSH(bp));	// 11093                  push    bp ;~ 01A2:4635
cs=0x1a2;eip=0x004636; 	X(PUSH(si));	// 11094                  push    si ;~ 01A2:4636
cs=0x1a2;eip=0x004637; 	X(PUSH(di));	// 11095                  push    di ;~ 01A2:4637
cs=0x1a2;eip=0x004638; 	X(PUSH(es));	// 11096                  push    es ;~ 01A2:4638
cs=0x1a2;eip=0x004639; 	X(PUSH(ds));	// 11097                  push    ds ;~ 01A2:4639
cs=0x1a2;eip=0x00463a; 	T(dx = 0x0A62;);	// 11098                  mov     dx, 0A62h ;~ 01A2:463A
cs=0x1a2;eip=0x00463d; 	T(cx = 2;);	// 11099                  mov     cx, 2 ;~ 01A2:463D
cs=0x1a2;eip=0x004640; 	T(bx = word_1f8ee;);	// 11100                  mov     bx, ds:word_1F8EE ;~ 01A2:4640
cs=0x1a2;eip=0x004644; 	X(ADD(*(dw*)(&unk_6fb90), cx));	// 11101                  add     word ptr ss:unk_6FB90, cx ;~ 01A2:4644
cs=0x1a2;eip=0x004649; 	T(ah = 0x3F;);	// 11102                  mov     ah, 3Fh ;~ 01A2:4649
cs=0x1a2;eip=0x00464b; 	S(_INT(0x21));	// 11103                  int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE ;~ 01A2:464B
cs=0x1a2;eip=0x00464d; 	X(POP(ds));	// 11106                  pop     ds ;~ 01A2:464D
cs=0x1a2;eip=0x00464e; 	X(POP(es));	// 11107                  pop     es ;~ 01A2:464E
cs=0x1a2;eip=0x00464f; 	X(POP(di));	// 11108                  pop     di ;~ 01A2:464F
cs=0x1a2;eip=0x004650; 	X(POP(si));	// 11109                  pop     si ;~ 01A2:4650
cs=0x1a2;eip=0x004651; 	X(POP(bp));	// 11110                  pop     bp ;~ 01A2:4651
cs=0x1a2;eip=0x004652; 	X(POP(dx));	// 11111                  pop     dx ;~ 01A2:4652
cs=0x1a2;eip=0x004653; 	X(POP(cx));	// 11112                  pop     cx ;~ 01A2:4653
cs=0x1a2;eip=0x004654; 	X(POP(bx));	// 11113                  pop     bx ;~ 01A2:4654
cs=0x1a2;eip=0x004655; 	X(POP(ax));	// 11114                  pop     ax ;~ 01A2:4655
cs=0x1a2;eip=0x004656; 	J(JC(loc_146d4));	// 11115                  jb      short loc_146D4 ;~ 01A2:4656
cs=0x1a2;eip=0x004658; 	T(CMP(word_1117b, 0));	// 11116                  cmp     cs:word_1117B, 0 ;~ 01A2:4658
cs=0x1a2;eip=0x00465e; 	J(JS(loc_146d4));	// 11117                  js      short loc_146D4 ;~ 01A2:465E
cs=0x1a2;eip=0x004660; 	T(ax = word_1fbd2;);	// 11118                  mov     ax, ds:word_1FBD2 ;~ 01A2:4660
cs=0x1a2;eip=0x004663; 	X(MOV(*(dw*)(raddr(ds,di+0x0A)), ax));	// 11119                  mov     [di+0Ah], ax ;~ 01A2:4663
cs=0x1a2;eip=0x004666; 	T(OR(ax, ax));	// 11120                  or      ax, ax ;~ 01A2:4666
cs=0x1a2;eip=0x004668; 	J(JZ(loc_146d1));	// 11121                  jz      short loc_146D1 ;~ 01A2:4668
cs=0x1a2;eip=0x00466a; 	T(cx = ax;);	// 11122                  mov     cx, ax ;~ 01A2:466A
cs=0x1a2;eip=0x00466c; 	T(bp = bx;);	// 11123                  mov     bp, bx ;~ 01A2:466C
cs=0x1a2;eip=0x00466e; 	X(PUSH(ax));	// 11124                  push    ax ;~ 01A2:466E
cs=0x1a2;eip=0x00466f; 	X(PUSH(bx));	// 11125                  push    bx ;~ 01A2:466F
cs=0x1a2;eip=0x004670; 	X(PUSH(cx));	// 11126                  push    cx ;~ 01A2:4670
cs=0x1a2;eip=0x004671; 	X(PUSH(dx));	// 11127                  push    dx ;~ 01A2:4671
cs=0x1a2;eip=0x004672; 	X(PUSH(bp));	// 11128                  push    bp ;~ 01A2:4672
cs=0x1a2;eip=0x004673; 	X(PUSH(si));	// 11129                  push    si ;~ 01A2:4673
cs=0x1a2;eip=0x004674; 	X(PUSH(di));	// 11130                  push    di ;~ 01A2:4674
cs=0x1a2;eip=0x004675; 	X(PUSH(es));	// 11131                  push    es ;~ 01A2:4675
cs=0x1a2;eip=0x004676; 	X(PUSH(ds));	// 11132                  push    ds ;~ 01A2:4676
cs=0x1a2;eip=0x004677; 	T(dx = bp;);	// 11133                  mov     dx, bp ;~ 01A2:4677
cs=0x1a2;eip=0x004679; 	T(cx = cx;);	// 11134                  mov     cx, cx ;~ 01A2:4679
cs=0x1a2;eip=0x00467b; 	T(bx = word_1f8ee;);	// 11135                  mov     bx, ds:word_1F8EE ;~ 01A2:467B
cs=0x1a2;eip=0x00467f; 	X(ADD(*(dw*)(&unk_6fb90), cx));	// 11136                  add     word ptr ss:unk_6FB90, cx ;~ 01A2:467F
cs=0x1a2;eip=0x004684; 	T(ah = 0x3F;);	// 11137                  mov     ah, 3Fh ;~ 01A2:4684
cs=0x1a2;eip=0x004686; 	S(_INT(0x21));	// 11138                  int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE ;~ 01A2:4686
cs=0x1a2;eip=0x004688; 	X(POP(ds));	// 11141                  pop     ds ;~ 01A2:4688
cs=0x1a2;eip=0x004689; 	X(POP(es));	// 11142                  pop     es ;~ 01A2:4689
cs=0x1a2;eip=0x00468a; 	X(POP(di));	// 11143                  pop     di ;~ 01A2:468A
cs=0x1a2;eip=0x00468b; 	X(POP(si));	// 11144                  pop     si ;~ 01A2:468B
cs=0x1a2;eip=0x00468c; 	X(POP(bp));	// 11145                  pop     bp ;~ 01A2:468C
cs=0x1a2;eip=0x00468d; 	X(POP(dx));	// 11146                  pop     dx ;~ 01A2:468D
cs=0x1a2;eip=0x00468e; 	X(POP(cx));	// 11147                  pop     cx ;~ 01A2:468E
cs=0x1a2;eip=0x00468f; 	X(POP(bx));	// 11148                  pop     bx ;~ 01A2:468F
cs=0x1a2;eip=0x004690; 	X(POP(ax));	// 11149                  pop     ax ;~ 01A2:4690
cs=0x1a2;eip=0x004691; 	J(JC(loc_146d4));	// 11150                  jb      short loc_146D4 ;~ 01A2:4691
cs=0x1a2;eip=0x004693; 	T(CMP(word_1117b, 0));	// 11151                  cmp     cs:word_1117B, 0 ;~ 01A2:4693
cs=0x1a2;eip=0x004699; 	J(JS(loc_146d4));	// 11152                  js      short loc_146D4 ;~ 01A2:4699
cs=0x1a2;eip=0x00469b; 	T(di = dx;);	// 11153                  mov     di, dx ;~ 01A2:469B
cs=0x1a2;eip=0x00469d; 	T(MOV(cx, *(dw*)(raddr(ds,di+0x0E))));	// 11154                  mov     cx, [di+0Eh] ;~ 01A2:469D
cs=0x1a2;eip=0x0046a0; 	T(SHL(cx, 1));	// 11155                  shl     cx, 1 ;~ 01A2:46A0
cs=0x1a2;eip=0x0046a2; 	T(SHL(cx, 1));	// 11156                  shl     cx, 1 ;~ 01A2:46A2
cs=0x1a2;eip=0x0046a4; 	X(PUSH(ax));	// 11157                  push    ax ;~ 01A2:46A4
cs=0x1a2;eip=0x0046a5; 	X(PUSH(bx));	// 11158                  push    bx ;~ 01A2:46A5
cs=0x1a2;eip=0x0046a6; 	X(PUSH(cx));	// 11159                  push    cx ;~ 01A2:46A6
cs=0x1a2;eip=0x0046a7; 	X(PUSH(dx));	// 11160                  push    dx ;~ 01A2:46A7
cs=0x1a2;eip=0x0046a8; 	X(PUSH(bp));	// 11161                  push    bp ;~ 01A2:46A8
cs=0x1a2;eip=0x0046a9; 	X(PUSH(si));	// 11162                  push    si ;~ 01A2:46A9
cs=0x1a2;eip=0x0046aa; 	X(PUSH(di));	// 11163                  push    di ;~ 01A2:46AA
cs=0x1a2;eip=0x0046ab; 	X(PUSH(es));	// 11164                  push    es ;~ 01A2:46AB
cs=0x1a2;eip=0x0046ac; 	X(PUSH(ds));	// 11165                  push    ds ;~ 01A2:46AC
cs=0x1a2;eip=0x0046ad; 	T(dx = si;);	// 11166                  mov     dx, si ;~ 01A2:46AD
cs=0x1a2;eip=0x0046af; 	T(cx = cx;);	// 11167                  mov     cx, cx ;~ 01A2:46AF
cs=0x1a2;eip=0x0046b1; 	T(bx = word_1f8ee;);	// 11168                  mov     bx, ds:word_1F8EE ;~ 01A2:46B1
cs=0x1a2;eip=0x0046b5; 	X(ADD(*(dw*)(&unk_6fb90), cx));	// 11169                  add     word ptr ss:unk_6FB90, cx ;~ 01A2:46B5
cs=0x1a2;eip=0x0046ba; 	T(ah = 0x3F;);	// 11170                  mov     ah, 3Fh ;~ 01A2:46BA
cs=0x1a2;eip=0x0046bc; 	S(_INT(0x21));	// 11171                  int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE ;~ 01A2:46BC
cs=0x1a2;eip=0x0046be; 	X(POP(ds));	// 11174                  pop     ds ;~ 01A2:46BE
cs=0x1a2;eip=0x0046bf; 	X(POP(es));	// 11175                  pop     es ;~ 01A2:46BF
cs=0x1a2;eip=0x0046c0; 	X(POP(di));	// 11176                  pop     di ;~ 01A2:46C0
cs=0x1a2;eip=0x0046c1; 	X(POP(si));	// 11177                  pop     si ;~ 01A2:46C1
cs=0x1a2;eip=0x0046c2; 	X(POP(bp));	// 11178                  pop     bp ;~ 01A2:46C2
cs=0x1a2;eip=0x0046c3; 	X(POP(dx));	// 11179                  pop     dx ;~ 01A2:46C3
cs=0x1a2;eip=0x0046c4; 	X(POP(cx));	// 11180                  pop     cx ;~ 01A2:46C4
cs=0x1a2;eip=0x0046c5; 	X(POP(bx));	// 11181                  pop     bx ;~ 01A2:46C5
cs=0x1a2;eip=0x0046c6; 	X(POP(ax));	// 11182                  pop     ax ;~ 01A2:46C6
cs=0x1a2;eip=0x0046c7; 	J(JC(loc_146d4));	// 11183                  jb      short loc_146D4 ;~ 01A2:46C7
cs=0x1a2;eip=0x0046c9; 	T(CMP(word_1117b, 0));	// 11184                  cmp     cs:word_1117B, 0 ;~ 01A2:46C9
cs=0x1a2;eip=0x0046cf; 	J(JS(loc_146d4));	// 11185                  js      short loc_146D4 ;~ 01A2:46CF
loc_146d1:
	// 5096 
cs=0x1a2;eip=0x0046d1; 	T(XOR(ax, ax));	// 11188                  xor     ax, ax ;~ 01A2:46D1
cs=0x1a2;eip=0x0046d3; 	J(RETN(0));	// 11189                  retn ;~ 01A2:46D3
loc_146d4:
	// 5097 
cs=0x1a2;eip=0x0046d4; 	T(ax = 0x0FFFF;);	// 11194                  mov     ax, 0FFFFh ;~ 01A2:46D4
cs=0x1a2;eip=0x0046d7; 	J(RETN(0));	// 11195                  retn ;~ 01A2:46D7

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_146d1: 	goto loc_146d1;
        case m2c::kloc_146d4: 	goto loc_146d4;
        case m2c::ksub_14628: 	goto sub_14628;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_146d8(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_146d8:
    _begin:
cs=0x1a2;eip=0x0046d8; 	X(PUSH(cx));	// 11205                  push    cx ;~ 01A2:46D8
cs=0x1a2;eip=0x0046d9; 	X(PUSH(es));	// 11206                  push    es ;~ 01A2:46D9
cs=0x1a2;eip=0x0046da; 	T(cx = ax;);	// 11207                  mov     cx, ax ;~ 01A2:46DA
cs=0x1a2;eip=0x0046dc; 	T(XCHG(di, si));	// 11208                  xchg    di, si ;~ 01A2:46DC
cs=0x1a2;eip=0x0046de; 	T(es = seg_1f8f4;);	// 11209                  mov     es, ds:seg_1F8F4 ;~ 01A2:46DE
cs=0x1a2;eip=0x0046e2; 	T(STD);	// 11211                  std ;~ 01A2:46E2
cs=0x1a2;eip=0x0046e3; 	T(SHR(cx, 1));	// 11212                  shr     cx, 1 ;~ 01A2:46E3
cs=0x1a2;eip=0x0046e5; 	J(JNC(loc_146f0));	// 11213                  jnb     short loc_146F0 ;~ 01A2:46E5
cs=0x1a2;eip=0x0046e7; 	T(DEC(si));	// 11214                  dec     si ;~ 01A2:46E7
cs=0x1a2;eip=0x0046e8; 	T(DEC(di));	// 11215                  dec     di ;~ 01A2:46E8
cs=0x1a2;eip=0x0046e9; 	X(MOVSB);	// 11216                  movsb ;~ 01A2:46E9
cs=0x1a2;eip=0x0046ea; 	T(OR(cx, cx));	// 11217                  or      cx, cx ;~ 01A2:46EA
cs=0x1a2;eip=0x0046ec; 	J(JZ(loc_146f8));	// 11218                  jz      short loc_146F8 ;~ 01A2:46EC
cs=0x1a2;eip=0x0046ee; 	J(JMP(loc_146f6));	// 11219                  jmp     short loc_146F6 ;~ 01A2:46EE
loc_146f0:
	// 5098 
cs=0x1a2;eip=0x0046f0; 	T(SUB(si, 2));	// 11223                  sub     si, 2 ;~ 01A2:46F0
cs=0x1a2;eip=0x0046f3; 	T(SUB(di, 2));	// 11224                  sub     di, 2 ;~ 01A2:46F3
loc_146f6:
	// 5099 
	// 11227                  rep movsw ;~ 01A2:46F6
cs=0x1a2;eip=0x0046f6; 	X(	REP MOVSW);	// 11227                  rep movsw ;~ 01A2:46F6
loc_146f8:
	// 5100 
cs=0x1a2;eip=0x0046f8; 	T(CLD);	// 11230                  cld ;~ 01A2:46F8
cs=0x1a2;eip=0x0046f9; 	X(POP(es));	// 11231                  pop     es ;~ 01A2:46F9
cs=0x1a2;eip=0x0046fa; 	X(POP(cx));	// 11233                  pop     cx ;~ 01A2:46FA
cs=0x1a2;eip=0x0046fb; 	J(RETN(0));	// 11234                  retn ;~ 01A2:46FB

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_146f0: 	goto loc_146f0;
        case m2c::kloc_146f6: 	goto loc_146f6;
        case m2c::kloc_146f8: 	goto loc_146f8;
        case m2c::ksub_146d8: 	goto sub_146d8;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_146fc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_146fc:
    _begin:
cs=0x1a2;eip=0x0046fc; 	X(PUSH(cx));	// 11243                  push    cx ;~ 01A2:46FC
cs=0x1a2;eip=0x0046fd; 	X(PUSH(es));	// 11244                  push    es ;~ 01A2:46FD
cs=0x1a2;eip=0x0046fe; 	T(cx = ax;);	// 11245                  mov     cx, ax ;~ 01A2:46FE
cs=0x1a2;eip=0x004700; 	T(XCHG(di, si));	// 11246                  xchg    di, si ;~ 01A2:4700
cs=0x1a2;eip=0x004702; 	T(es = seg_1f8f4;);	// 11247                  mov     es, ds:seg_1F8F4 ;~ 01A2:4702
cs=0x1a2;eip=0x004706; 	T(SHR(cx, 1));	// 11249                  shr     cx, 1 ;~ 01A2:4706
cs=0x1a2;eip=0x004708; 	J(JNC(loc_1470f));	// 11250                  jnb     short loc_1470F ;~ 01A2:4708
cs=0x1a2;eip=0x00470a; 	X(MOVSB);	// 11251                  movsb ;~ 01A2:470A
cs=0x1a2;eip=0x00470b; 	T(OR(cx, cx));	// 11252                  or      cx, cx ;~ 01A2:470B
cs=0x1a2;eip=0x00470d; 	J(JZ(loc_14711));	// 11253                  jz      short loc_14711 ;~ 01A2:470D
loc_1470f:
	// 5101 
	// 11256                  rep movsw ;~ 01A2:470F
cs=0x1a2;eip=0x00470f; 	X(	REP MOVSW);	// 11256                  rep movsw ;~ 01A2:470F
loc_14711:
	// 5102 
cs=0x1a2;eip=0x004711; 	X(POP(es));	// 11259                  pop     es ;~ 01A2:4711
cs=0x1a2;eip=0x004712; 	X(POP(cx));	// 11261                  pop     cx ;~ 01A2:4712
cs=0x1a2;eip=0x004713; 	J(RETN(0));	// 11262                  retn ;~ 01A2:4713

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1470f: 	goto loc_1470f;
        case m2c::kloc_14711: 	goto loc_14711;
        case m2c::ksub_146fc: 	goto sub_146fc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_14714(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_14714:
    _begin:
cs=0x1a2;eip=0x004714; 	T(dx = word_1f3a2;);	// 11271                  mov     dx, ds:word_1F3A2 ;~ 01A2:4714
cs=0x1a2;eip=0x004718; 	J(CALL(sub_139f9,0));	// 11272                  call    sub_139F9 ;~ 01A2:4718
cs=0x1a2;eip=0x00471b; 	J(JNS(loc_14720));	// 11273                  jns     short loc_14720 ;~ 01A2:471B
cs=0x1a2;eip=0x00471d; 	J(CALL(sub_139db,0));	// 11274                  call    sub_139DB ;~ 01A2:471D
loc_14720:
	// 5103 
cs=0x1a2;eip=0x004720; 	X(*(dw*)(&off_1f736) = di;);	// 11277                  mov     word ptr ds:off_1F736, di ;~ 01A2:4720
cs=0x1a2;eip=0x004724; 	T(ax = 0x0FFFF;);	// 11278                  mov     ax, 0FFFFh ;~ 01A2:4724
cs=0x1a2;eip=0x004727; 	T(bx = 0x5E4;);	// 11279                  mov     bx, 5E4h ;~ 01A2:4727
cs=0x1a2;eip=0x00472a; 	X(MOV(*(dw*)(raddr(ds,bx)), ax));	// 11280                  mov     [bx], ax ;~ 01A2:472A
cs=0x1a2;eip=0x00472c; 	X(MOV(*(dw*)(raddr(ds,bx+2)), ax));	// 11281                  mov     [bx+2], ax ;~ 01A2:472C
cs=0x1a2;eip=0x00472f; 	X(MOV(*(dw*)(raddr(ds,bx+4)), ax));	// 11282                  mov     [bx+4], ax ;~ 01A2:472F
cs=0x1a2;eip=0x004732; 	X(MOV(*(dw*)(raddr(ds,bx+6)), ax));	// 11283                  mov     [bx+6], ax ;~ 01A2:4732
cs=0x1a2;eip=0x004735; 	X(MOV(*(dw*)(raddr(ds,bx+8)), ax));	// 11284                  mov     [bx+8], ax ;~ 01A2:4735
cs=0x1a2;eip=0x004738; 	X(MOV(*(dw*)(raddr(ds,bx+0x0A)), ax));	// 11285                  mov     [bx+0Ah], ax ;~ 01A2:4738
cs=0x1a2;eip=0x00473b; 	X(MOV(*(dw*)(raddr(ds,bx+0x0C)), ax));	// 11286                  mov     [bx+0Ch], ax ;~ 01A2:473B
cs=0x1a2;eip=0x00473e; 	X(MOV(*(dw*)(raddr(ds,bx+0x0E)), ax));	// 11287                  mov     [bx+0Eh], ax ;~ 01A2:473E
cs=0x1a2;eip=0x004741; 	X(word_1f1c4 = 0;);	// 11288                  mov     word_1F1C4, 0 ;~ 01A2:4741
cs=0x1a2;eip=0x004747; 	X(word_1f1c6 = 0;);	// 11289                  mov     word_1F1C6, 0 ;~ 01A2:4747
cs=0x1a2;eip=0x00474d; 	T(si = word_1f1a2;);	// 11290                  mov     si, word_1F1A2 ;~ 01A2:474D
cs=0x1a2;eip=0x004751; 	T(bx = word_1f1ce;);	// 11291                  mov     bx, word_1F1CE ;~ 01A2:4751
cs=0x1a2;eip=0x004755; 	T(MOV(al, *(raddr(ds,bx+0x14))));	// 11292                  mov     al, [bx+14h] ;~ 01A2:4755
cs=0x1a2;eip=0x004758; 	X(byte_1f741 = al;);	// 11293                  mov     ds:byte_1F741, al ;~ 01A2:4758
cs=0x1a2;eip=0x00475b; 	T(MOV(al, *(raddr(ds,bx+0x15))));	// 11294                  mov     al, [bx+15h] ;~ 01A2:475B
cs=0x1a2;eip=0x00475e; 	X(byte_1f742 = al;);	// 11295                  mov     ds:byte_1F742, al ;~ 01A2:475E
cs=0x1a2;eip=0x004761; 	X(word_1f72a = 0;);	// 11296                  mov     ds:word_1F72A, 0 ;~ 01A2:4761
cs=0x1a2;eip=0x004767; 	X(word_1f72c = 0;);	// 11297                  mov     ds:word_1F72C, 0 ;~ 01A2:4767
cs=0x1a2;eip=0x00476d; 	X(word_1f72e = 0;);	// 11298                  mov     ds:word_1F72E, 0 ;~ 01A2:476D
cs=0x1a2;eip=0x004773; 	X(word_1f38a = 1;);	// 11299                  mov     ds:word_1F38A, 1 ;~ 01A2:4773
cs=0x1a2;eip=0x004779; 	X(word_1f38c = 0;);	// 11300                  mov     ds:word_1F38C, 0 ;~ 01A2:4779
cs=0x1a2;eip=0x00477f; 	X(PUSH(*(dw*)(&off_1f736)));	// 11301                  push    word ptr ds:off_1F736 ;~ 01A2:477F
loc_14783:
	// 5104 
cs=0x1a2;eip=0x004783; 	T(XOR(ah, ah));	// 11305                  xor     ah, ah ;~ 01A2:4783
cs=0x1a2;eip=0x004785; 	T(MOV(al, *(raddr(ds,di+1))));	// 11306                  mov     al, [di+1] ;~ 01A2:4785
cs=0x1a2;eip=0x004788; 	T(OR(al, al));	// 11307                  or      al, al ;~ 01A2:4788
cs=0x1a2;eip=0x00478a; 	J(JNZ(loc_1478f));	// 11308                  jnz     short loc_1478F ;~ 01A2:478A
cs=0x1a2;eip=0x00478c; 	J(JMP(loc_14949));	// 11309                  jmp     loc_14949 ;~ 01A2:478C
loc_1478f:
	// 5105 
cs=0x1a2;eip=0x00478f; 	J(JNS(loc_14794));	// 11313                  jns     short loc_14794 ;~ 01A2:478F
cs=0x1a2;eip=0x004791; 	J(JMP(loc_1488c));	// 11314                  jmp     loc_1488C ;~ 01A2:4791
loc_14794:
	// 5106 
cs=0x1a2;eip=0x004794; 	T(dx = 0x280;);	// 11318                  mov     dx, 280h ;~ 01A2:4794
cs=0x1a2;eip=0x004797; 	T(MUL1_2(dx));	// 11319                  mul     dx ;~ 01A2:4797
cs=0x1a2;eip=0x004799; 	X(*(dw*)(((db*)&off_1f736)+2) = ax;);	// 11320                  mov     word ptr ds:off_1F736+2, ax ;~ 01A2:4799
cs=0x1a2;eip=0x00479c; 	T(ADD(ax, word_1f184));	// 11321                  add     ax, word_1F184 ;~ 01A2:479C
cs=0x1a2;eip=0x0047a0; 	X(word_1f732 = ax;);	// 11322                  mov     ds:word_1F732, ax ;~ 01A2:47A0
cs=0x1a2;eip=0x0047a3; 	X(PUSH(word_1f72a));	// 11323                  push    ds:word_1F72A ;~ 01A2:47A3
cs=0x1a2;eip=0x0047a7; 	X(PUSH(word_1f72c));	// 11324                  push    ds:word_1F72C ;~ 01A2:47A7
cs=0x1a2;eip=0x0047ab; 	X(PUSH(word_1f72e));	// 11325                  push    ds:word_1F72E ;~ 01A2:47AB
cs=0x1a2;eip=0x0047af; 	T(dx = word_1f72a;);	// 11326                  mov     dx, ds:word_1F72A ;~ 01A2:47AF
cs=0x1a2;eip=0x0047b3; 	T(bp = word_1f72c;);	// 11327                  mov     bp, ds:word_1F72C ;~ 01A2:47B3
cs=0x1a2;eip=0x0047b7; 	T(XOR(ch, ch));	// 11328                  xor     ch, ch ;~ 01A2:47B7
cs=0x1a2;eip=0x0047b9; 	T(MOV(cl, *(raddr(ds,di))));	// 11329                  mov     cl, [di] ;~ 01A2:47B9
cs=0x1a2;eip=0x0047bb; 	T(CMP(word_1f38a, 0));	// 11330                  cmp     ds:word_1F38A, 0 ;~ 01A2:47BB
cs=0x1a2;eip=0x0047c0; 	J(JNZ(loc_147ca));	// 11331                  jnz     short loc_147CA ;~ 01A2:47C0
cs=0x1a2;eip=0x0047c2; 	T(ADD(dx, cx));	// 11332                  add     dx, cx ;~ 01A2:47C2
cs=0x1a2;eip=0x0047c4; 	X(word_1f72a = dx;);	// 11333                  mov     ds:word_1F72A, dx ;~ 01A2:47C4
cs=0x1a2;eip=0x0047c8; 	J(JMP(loc_147cc));	// 11334                  jmp     short loc_147CC ;~ 01A2:47C8
loc_147ca:
	// 5107 
cs=0x1a2;eip=0x0047ca; 	T(ADD(bp, cx));	// 11338                  add     bp, cx ;~ 01A2:47CA
loc_147cc:
	// 5108 
cs=0x1a2;eip=0x0047cc; 	X(PUSH(*(dw*)(((db*)&off_1f736)+2)));	// 11341                  push    word ptr ds:off_1F736+2 ;~ 01A2:47CC
cs=0x1a2;eip=0x0047d0; 	X(PUSH(si));	// 11342                  push    si ;~ 01A2:47D0
cs=0x1a2;eip=0x0047d1; 	T(CMP(word_1f72e, 0));	// 11343                  cmp     ds:word_1F72E, 0 ;~ 01A2:47D1
cs=0x1a2;eip=0x0047d6; 	J(JNZ(loc_1484d));	// 11344                  jnz     short loc_1484D ;~ 01A2:47D6
cs=0x1a2;eip=0x0047d8; 	T(XOR(dh, dh));	// 11345                  xor     dh, dh ;~ 01A2:47D8
cs=0x1a2;eip=0x0047da; 	T(MOV(dl, *(raddr(ds,di+1))));	// 11346                  mov     dl, [di+1] ;~ 01A2:47DA
cs=0x1a2;eip=0x0047dd; 	T(si = 0x9A4;);	// 11347                  mov     si, 9A4h ;~ 01A2:47DD
cs=0x1a2;eip=0x0047e0; 	T(LODSB);	// 11348                  lodsb ;~ 01A2:47E0
cs=0x1a2;eip=0x0047e1; 	T(OR(al, al));	// 11349                  or      al, al ;~ 01A2:47E1
cs=0x1a2;eip=0x0047e3; 	J(JZ(loc_1484d));	// 11350                  jz      short loc_1484D ;~ 01A2:47E3
cs=0x1a2;eip=0x0047e5; 	T(XOR(ch, ch));	// 11351                  xor     ch, ch ;~ 01A2:47E5
cs=0x1a2;eip=0x0047e7; 	T(cl = al;);	// 11352                  mov     cl, al ;~ 01A2:47E7
loc_147e9:
	// 5109 
cs=0x1a2;eip=0x0047e9; 	T(CMP(dl, *(raddr(ds,si))));	// 11355                  cmp     dl, [si] ;~ 01A2:47E9
cs=0x1a2;eip=0x0047eb; 	J(JZ(loc_147f2));	// 11356                  jz      short loc_147F2 ;~ 01A2:47EB
cs=0x1a2;eip=0x0047ed; 	T(INC(si));	// 11357                  inc     si ;~ 01A2:47ED
cs=0x1a2;eip=0x0047ee; 	J(LOOP(loc_147e9));	// 11358                  loop    loc_147E9 ;~ 01A2:47EE
cs=0x1a2;eip=0x0047f0; 	J(JMP(loc_1484d));	// 11359                  jmp     short loc_1484D ;~ 01A2:47F0
loc_147f2:
	// 5110 
cs=0x1a2;eip=0x0047f2; 	T(INC(si));	// 11363                  inc     si ;~ 01A2:47F2
cs=0x1a2;eip=0x0047f3; 	T(si = 0x5E4;);	// 11364                  mov     si, 5E4h ;~ 01A2:47F3
cs=0x1a2;eip=0x0047f6; 	T(cx = 4;);	// 11365                  mov     cx, 4 ;~ 01A2:47F6
loc_147f9:
	// 5111 
cs=0x1a2;eip=0x0047f9; 	T(CMP(*(dw*)(raddr(ds,si)), 0));	// 11368                  cmp     word ptr [si], 0 ;~ 01A2:47F9
cs=0x1a2;eip=0x0047fc; 	J(JS(loc_14805));	// 11369                  js      short loc_14805 ;~ 01A2:47FC
cs=0x1a2;eip=0x0047fe; 	T(ADD(si, 4));	// 11370                  add     si, 4 ;~ 01A2:47FE
cs=0x1a2;eip=0x004801; 	J(LOOP(loc_147f9));	// 11371                  loop    loc_147F9 ;~ 01A2:4801
cs=0x1a2;eip=0x004803; 	J(JMP(loc_1484d));	// 11372                  jmp     short loc_1484D ;~ 01A2:4803
loc_14805:
	// 5112 
cs=0x1a2;eip=0x004805; 	T(ADD(si, 4));	// 11376                  add     si, 4 ;~ 01A2:4805
cs=0x1a2;eip=0x004808; 	X(PUSH(si));	// 11377                  push    si ;~ 01A2:4808
cs=0x1a2;eip=0x004809; 	T(ADD(cl, cl));	// 11378                  add     cl, cl ;~ 01A2:4809
cs=0x1a2;eip=0x00480b; 	T(ADD(cl, cl));	// 11379                  add     cl, cl ;~ 01A2:480B
cs=0x1a2;eip=0x00480d; 	T(si = 0x16CB;);	// 11380                  mov     si, 16CBh ;~ 01A2:480D
cs=0x1a2;eip=0x004810; 	X(PUSH(ax));	// 11381                  push    ax ;~ 01A2:4810
cs=0x1a2;eip=0x004811; 	T(XOR(ah, ah));	// 11382                  xor     ah, ah ;~ 01A2:4811
cs=0x1a2;eip=0x004813; 	T(al = cl;);	// 11383                  mov     al, cl ;~ 01A2:4813
cs=0x1a2;eip=0x004815; 	T(ADD(si, ax));	// 11384                  add     si, ax ;~ 01A2:4815
cs=0x1a2;eip=0x004817; 	T(SUB(si, 4));	// 11385                  sub     si, 4 ;~ 01A2:4817
cs=0x1a2;eip=0x00481a; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 11386                  mov     ax, [si] ;~ 01A2:481A
cs=0x1a2;eip=0x00481c; 	X(word_1f1c4 = ax;);	// 11387                  mov     word_1F1C4, ax ;~ 01A2:481C
cs=0x1a2;eip=0x00481f; 	T(si = 0x1A67;);	// 11388                  mov     si, 1A67h ;~ 01A2:481F
cs=0x1a2;eip=0x004822; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 11389                  mov     ax, [si] ;~ 01A2:4822
cs=0x1a2;eip=0x004824; 	X(word_1f1c6 = ax;);	// 11390                  mov     word_1F1C6, ax ;~ 01A2:4824
cs=0x1a2;eip=0x004827; 	X(POP(ax));	// 11391                  pop     ax ;~ 01A2:4827
cs=0x1a2;eip=0x004828; 	X(POP(si));	// 11392                  pop     si ;~ 01A2:4828
cs=0x1a2;eip=0x004829; 	T(dx = word_1f72a;);	// 11393                  mov     dx, ds:word_1F72A ;~ 01A2:4829
cs=0x1a2;eip=0x00482d; 	T(SHL(dl, 1));	// 11394                  shl     dl, 1 ;~ 01A2:482D
cs=0x1a2;eip=0x00482f; 	T(SHL(dl, 1));	// 11395                  shl     dl, 1 ;~ 01A2:482F
cs=0x1a2;eip=0x004831; 	T(SHL(dl, 1));	// 11396                  shl     dl, 1 ;~ 01A2:4831
cs=0x1a2;eip=0x004833; 	X(MOV(*(raddr(ds,si-2)), dl));	// 11397                  mov     [si-2], dl ;~ 01A2:4833
cs=0x1a2;eip=0x004836; 	T(ADD(dl, 7));	// 11398                  add     dl, 7 ;~ 01A2:4836
cs=0x1a2;eip=0x004839; 	X(MOV(*(raddr(ds,si-4)), dl));	// 11399                  mov     [si-4], dl ;~ 01A2:4839
cs=0x1a2;eip=0x00483c; 	T(dx = bp;);	// 11400                  mov     dx, bp ;~ 01A2:483C
cs=0x1a2;eip=0x00483e; 	T(SHL(dl, 1));	// 11401                  shl     dl, 1 ;~ 01A2:483E
cs=0x1a2;eip=0x004840; 	T(SHL(dl, 1));	// 11402                  shl     dl, 1 ;~ 01A2:4840
cs=0x1a2;eip=0x004842; 	T(SHL(dl, 1));	// 11403                  shl     dl, 1 ;~ 01A2:4842
cs=0x1a2;eip=0x004844; 	X(MOV(*(raddr(ds,si-1)), dl));	// 11404                  mov     [si-1], dl ;~ 01A2:4844
cs=0x1a2;eip=0x004847; 	T(ADD(dl, 7));	// 11405                  add     dl, 7 ;~ 01A2:4847
cs=0x1a2;eip=0x00484a; 	X(MOV(*(raddr(ds,si-3)), dl));	// 11406                  mov     [si-3], dl ;~ 01A2:484A
loc_1484d:
	// 5113 
cs=0x1a2;eip=0x00484d; 	X(POP(si));	// 11410                  pop     si ;~ 01A2:484D
cs=0x1a2;eip=0x00484e; 	X(POP(*(dw*)(((db*)&off_1f736)+2)));	// 11411                  pop     word ptr ds:off_1F736+2 ;~ 01A2:484E
cs=0x1a2;eip=0x004852; 	X(PUSH(ax));	// 11412                  push    ax ;~ 01A2:4852
cs=0x1a2;eip=0x004853; 	T(ax = seg_1f182;);	// 11413                  mov     ax, seg_1F182 ;~ 01A2:4853
cs=0x1a2;eip=0x004856; 	X(MOV(*(dw*)(raddr(ss,si+0x0A)), ax));	// 11414                  mov     ss:[si+0Ah], ax ;~ 01A2:4856
cs=0x1a2;eip=0x00485a; 	T(ax = word_1f732;);	// 11415                  mov     ax, ds:word_1F732 ;~ 01A2:485A
cs=0x1a2;eip=0x00485d; 	X(MOV(*(dw*)(raddr(ss,si+0x0C)), ax));	// 11416                  mov     ss:[si+0Ch], ax ;~ 01A2:485D
cs=0x1a2;eip=0x004861; 	X(POP(ax));	// 11417                  pop     ax ;~ 01A2:4861
cs=0x1a2;eip=0x004862; 	X(MOV(*(raddr(ss,si+2)), 2));	// 11418                  mov     byte ptr ss:[si+2], 2 ;~ 01A2:4862
cs=0x1a2;eip=0x004867; 	X(MOV(*(raddr(ss,si+3)), 0x20));	// 11419                  mov     byte ptr ss:[si+3], 20h ; ' ' ;~ 01A2:4867
cs=0x1a2;eip=0x00486c; 	X(PUSH(di));	// 11420                  push    di ;~ 01A2:486C
cs=0x1a2;eip=0x00486d; 	X(PUSH(es));	// 11421                  push    es ;~ 01A2:486D
cs=0x1a2;eip=0x00486e; 	T(es = seg_1f8f4;);	// 11422                  mov     es, ds:seg_1F8F4 ;~ 01A2:486E
cs=0x1a2;eip=0x004872; 	T(di = 0x0F9CE;);	// 11423                  mov     di, 0F9CEh ;~ 01A2:4872
cs=0x1a2;eip=0x004875; 	J(CALL(sub_14f86,0));	// 11424                  call    sub_14F86 ;~ 01A2:4875
cs=0x1a2;eip=0x004878; 	T(ADD(si, 0x10));	// 11425                  add     si, 10h ;~ 01A2:4878
cs=0x1a2;eip=0x00487b; 	X(POP(es));	// 11426                  pop     es ;~ 01A2:487B
cs=0x1a2;eip=0x00487c; 	X(POP(di));	// 11428                  pop     di ;~ 01A2:487C
cs=0x1a2;eip=0x00487d; 	X(POP(word_1f72e));	// 11429                  pop     ds:word_1F72E ;~ 01A2:487D
cs=0x1a2;eip=0x004881; 	X(POP(word_1f72c));	// 11430                  pop     ds:word_1F72C ;~ 01A2:4881
cs=0x1a2;eip=0x004885; 	X(POP(word_1f72a));	// 11431                  pop     ds:word_1F72A ;~ 01A2:4885
cs=0x1a2;eip=0x004889; 	J(JMP(loc_14949));	// 11432                  jmp     loc_14949 ;~ 01A2:4889
loc_1488c:
	// 5114 
cs=0x1a2;eip=0x00488c; 	T(TEST(al, 0x40));	// 11436                  test    al, 40h ;~ 01A2:488C
cs=0x1a2;eip=0x00488e; 	J(JNZ(loc_14893));	// 11437                  jnz     short loc_14893 ;~ 01A2:488E
cs=0x1a2;eip=0x004890; 	J(JMP(loc_14949));	// 11438                  jmp     loc_14949 ;~ 01A2:4890
loc_14893:
	// 5115 
cs=0x1a2;eip=0x004893; 	T(TEST(al, 4));	// 11443                  test    al, 4 ;~ 01A2:4893
cs=0x1a2;eip=0x004895; 	J(JZ(loc_1489a));	// 11444                  jz      short loc_1489A ;~ 01A2:4895
cs=0x1a2;eip=0x004897; 	J(JMP(loc_14949));	// 11445                  jmp     loc_14949 ;~ 01A2:4897
loc_1489a:
	// 5116 
cs=0x1a2;eip=0x00489a; 	X(PUSH(word_1f386));	// 11449                  push    ds:word_1F386 ;~ 01A2:489A
cs=0x1a2;eip=0x00489e; 	T(AND(ax, 0x0F));	// 11450                  and     ax, 0Fh ;~ 01A2:489E
cs=0x1a2;eip=0x0048a1; 	T(DEC(ax));	// 11451                  dec     ax ;~ 01A2:48A1
cs=0x1a2;eip=0x0048a2; 	X(PUSH(si));	// 11452                  push    si ;~ 01A2:48A2
cs=0x1a2;eip=0x0048a3; 	X(PUSH(ax));	// 11453                  push    ax ;~ 01A2:48A3
cs=0x1a2;eip=0x0048a4; 	X(PUSH(word_1f72a));	// 11454                  push    ds:word_1F72A ;~ 01A2:48A4
cs=0x1a2;eip=0x0048a8; 	X(PUSH(word_1f72c));	// 11455                  push    ds:word_1F72C ;~ 01A2:48A8
cs=0x1a2;eip=0x0048ac; 	X(PUSH(word_1f72e));	// 11456                  push    ds:word_1F72E ;~ 01A2:48AC
cs=0x1a2;eip=0x0048b0; 	X(PUSH(word_1f730));	// 11457                  push    ds:word_1F730 ;~ 01A2:48B0
cs=0x1a2;eip=0x0048b4; 	X(PUSH(*(dw*)(&off_1f736)));	// 11458                  push    word ptr ds:off_1F736 ;~ 01A2:48B4
cs=0x1a2;eip=0x0048b8; 	J(CALL(sub_12188,0));	// 11459                  call    sub_12188 ;~ 01A2:48B8
cs=0x1a2;eip=0x0048bb; 	X(POP(*(dw*)(&off_1f736)));	// 11460                  pop     word ptr ds:off_1F736 ;~ 01A2:48BB
cs=0x1a2;eip=0x0048bf; 	X(POP(word_1f730));	// 11461                  pop     ds:word_1F730 ;~ 01A2:48BF
cs=0x1a2;eip=0x0048c3; 	X(POP(word_1f72e));	// 11462                  pop     ds:word_1F72E ;~ 01A2:48C3
cs=0x1a2;eip=0x0048c7; 	X(POP(word_1f72c));	// 11463                  pop     ds:word_1F72C ;~ 01A2:48C7
cs=0x1a2;eip=0x0048cb; 	X(POP(word_1f72a));	// 11464                  pop     ds:word_1F72A ;~ 01A2:48CB
cs=0x1a2;eip=0x0048cf; 	X(POP(ax));	// 11465                  pop     ax ;~ 01A2:48CF
cs=0x1a2;eip=0x0048d0; 	X(POP(si));	// 11466                  pop     si ;~ 01A2:48D0
cs=0x1a2;eip=0x0048d1; 	T(es = *(dw*)(((db*)&off_1f194)+2););	// 11467                  mov     es, word ptr off_1F194+2 ;~ 01A2:48D1
cs=0x1a2;eip=0x0048d5; 	T(di = word_1f198;);	// 11469                  mov     di, word_1F198 ;~ 01A2:48D5
cs=0x1a2;eip=0x0048d9; 	X(PUSH(word_1f72a));	// 11470                  push    ds:word_1F72A ;~ 01A2:48D9
cs=0x1a2;eip=0x0048dd; 	X(PUSH(word_1f72c));	// 11471                  push    ds:word_1F72C ;~ 01A2:48DD
cs=0x1a2;eip=0x0048e1; 	T(TEST(al, 1));	// 11472                  test    al, 1 ;~ 01A2:48E1
cs=0x1a2;eip=0x0048e3; 	J(JZ(loc_148eb));	// 11473                  jz      short loc_148EB ;~ 01A2:48E3
cs=0x1a2;eip=0x0048e5; 	X(INC(word_1f72a));	// 11474                  inc     ds:word_1F72A ;~ 01A2:48E5
cs=0x1a2;eip=0x0048e9; 	J(JMP(loc_148ef));	// 11475                  jmp     short loc_148EF ;~ 01A2:48E9
loc_148eb:
	// 5117 
cs=0x1a2;eip=0x0048eb; 	X(INC(word_1f72c));	// 11480                  inc     ds:word_1F72C ;~ 01A2:48EB
loc_148ef:
	// 5118 
cs=0x1a2;eip=0x0048ef; 	X(word_1f732 = di;);	// 11484                  mov     ds:word_1F732, di ;~ 01A2:48EF
cs=0x1a2;eip=0x0048f3; 	T(ADD(di, 0x20));	// 11485                  add     di, 20h ; ' ' ;~ 01A2:48F3
cs=0x1a2;eip=0x0048f6; 	T(MOV(cx, *(dw*)(raddr(es,di))));	// 11486                  mov     cx, es:[di] ;~ 01A2:48F6
cs=0x1a2;eip=0x0048f9; 	T(ADD(di, 2));	// 11487                  add     di, 2 ;~ 01A2:48F9
cs=0x1a2;eip=0x0048fc; 	X(MOV(*(raddr(ss,si+2)), cl));	// 11488                  mov     ss:[si+2], cl ;~ 01A2:48FC
cs=0x1a2;eip=0x004900; 	T(MOV(dx, *(dw*)(raddr(es,di))));	// 11489                  mov     dx, es:[di] ;~ 01A2:4900
cs=0x1a2;eip=0x004903; 	T(ADD(di, 2));	// 11490                  add     di, 2 ;~ 01A2:4903
cs=0x1a2;eip=0x004906; 	X(MOV(*(raddr(ss,si+3)), dl));	// 11491                  mov     ss:[si+3], dl ;~ 01A2:4906
cs=0x1a2;eip=0x00490a; 	X(MOV(*(dw*)(raddr(ss,si+0x0A)), es));	// 11492                  mov     word ptr ss:[si+0Ah], es ;~ 01A2:490A
cs=0x1a2;eip=0x00490e; 	X(MOV(*(dw*)(raddr(ss,si+0x0C)), di));	// 11493                  mov     ss:[si+0Ch], di ;~ 01A2:490E
cs=0x1a2;eip=0x004912; 	X(PUSH(word_1f72e));	// 11494                  push    ds:word_1F72E ;~ 01A2:4912
cs=0x1a2;eip=0x004916; 	X(PUSH(word_1f730));	// 11495                  push    ds:word_1F730 ;~ 01A2:4916
cs=0x1a2;eip=0x00491a; 	X(PUSH(*(dw*)(&off_1f736)));	// 11496                  push    word ptr ds:off_1F736 ;~ 01A2:491A
cs=0x1a2;eip=0x00491e; 	T(bp = word_1f72c;);	// 11497                  mov     bp, ds:word_1F72C ;~ 01A2:491E
cs=0x1a2;eip=0x004922; 	T(SUB(di, 0x24));	// 11498                  sub     di, 24h ; '$' ;~ 01A2:4922
cs=0x1a2;eip=0x004925; 	J(CALL(sub_14f86,0));	// 11499                  call    sub_14F86 ;~ 01A2:4925
cs=0x1a2;eip=0x004928; 	T(ADD(si, 0x10));	// 11500                  add     si, 10h ;~ 01A2:4928
cs=0x1a2;eip=0x00492b; 	X(POP(*(dw*)(&off_1f736)));	// 11501                  pop     word ptr ds:off_1F736 ;~ 01A2:492B
cs=0x1a2;eip=0x00492f; 	X(POP(word_1f730));	// 11502                  pop     ds:word_1F730 ;~ 01A2:492F
cs=0x1a2;eip=0x004933; 	X(POP(word_1f72e));	// 11503                  pop     ds:word_1F72E ;~ 01A2:4933
cs=0x1a2;eip=0x004937; 	X(POP(word_1f72c));	// 11504                  pop     ds:word_1F72C ;~ 01A2:4937
cs=0x1a2;eip=0x00493b; 	X(POP(word_1f72a));	// 11505                  pop     ds:word_1F72A ;~ 01A2:493B
cs=0x1a2;eip=0x00493f; 	X(POP(word_1f386));	// 11506                  pop     ds:word_1F386 ;~ 01A2:493F
cs=0x1a2;eip=0x004943; 	T(ax = word_1f386;);	// 11507                  mov     ax, ds:word_1F386 ;~ 01A2:4943
cs=0x1a2;eip=0x004946; 	J(CALL(sub_12188,0));	// 11508                  call    sub_12188 ;~ 01A2:4946
loc_14949:
	// 5119 
cs=0x1a2;eip=0x004949; 	T(bx = word_1f1ce;);	// 11512                  mov     bx, word_1F1CE ;~ 01A2:4949
cs=0x1a2;eip=0x00494d; 	X(ADD(*(dw*)(&off_1f736), 2));	// 11513                  add     word ptr ds:off_1F736, 2 ;~ 01A2:494D
cs=0x1a2;eip=0x004952; 	T(di = *(dw*)(&off_1f736););	// 11514                  mov     di, word ptr ds:off_1F736 ;~ 01A2:4952
cs=0x1a2;eip=0x004956; 	X(INC(word_1f72e));	// 11515                  inc     ds:word_1F72E ;~ 01A2:4956
cs=0x1a2;eip=0x00495a; 	T(CMP(word_1f72e, 8));	// 11516                  cmp     ds:word_1F72E, 8 ;~ 01A2:495A
cs=0x1a2;eip=0x00495f; 	J(JZ(loc_14964));	// 11517                  jz      short loc_14964 ;~ 01A2:495F
cs=0x1a2;eip=0x004961; 	J(JMP(loc_14783));	// 11518                  jmp     loc_14783 ;~ 01A2:4961
loc_14964:
	// 5120 
cs=0x1a2;eip=0x004964; 	X(word_1f72e = 0;);	// 11522                  mov     ds:word_1F72E, 0 ;~ 01A2:4964
cs=0x1a2;eip=0x00496a; 	T(ax = word_1f38a;);	// 11523                  mov     ax, ds:word_1F38A ;~ 01A2:496A
cs=0x1a2;eip=0x00496d; 	X(ADD(word_1f72a, ax));	// 11524                  add     ds:word_1F72A, ax ;~ 01A2:496D
cs=0x1a2;eip=0x004971; 	T(ax = word_1f38c;);	// 11525                  mov     ax, ds:word_1F38C ;~ 01A2:4971
cs=0x1a2;eip=0x004974; 	X(ADD(word_1f72c, ax));	// 11526                  add     ds:word_1F72C, ax ;~ 01A2:4974
cs=0x1a2;eip=0x004978; 	T(ax = word_1f72c;);	// 11527                  mov     ax, ds:word_1F72C ;~ 01A2:4978
cs=0x1a2;eip=0x00497b; 	T(CMP(al, *(raddr(ds,bx+5))));	// 11528                  cmp     al, [bx+5] ;~ 01A2:497B
cs=0x1a2;eip=0x00497e; 	J(JZ(loc_149b0));	// 11529                  jz      short loc_149B0 ;~ 01A2:497E
cs=0x1a2;eip=0x004980; 	T(ax = word_1f72a;);	// 11530                  mov     ax, ds:word_1F72A ;~ 01A2:4980
cs=0x1a2;eip=0x004983; 	T(CMP(al, *(raddr(ds,bx+4))));	// 11531                  cmp     al, [bx+4] ;~ 01A2:4983
cs=0x1a2;eip=0x004986; 	J(JZ(loc_1498b));	// 11532                  jz      short loc_1498B ;~ 01A2:4986
cs=0x1a2;eip=0x004988; 	J(JMP(loc_14783));	// 11533                  jmp     loc_14783 ;~ 01A2:4988
loc_1498b:
	// 5121 
cs=0x1a2;eip=0x00498b; 	X(word_1f72a = 0;);	// 11537                  mov     ds:word_1F72A, 0 ;~ 01A2:498B
cs=0x1a2;eip=0x004991; 	X(word_1f72c = 1;);	// 11538                  mov     ds:word_1F72C, 1 ;~ 01A2:4991
cs=0x1a2;eip=0x004997; 	X(POP(di));	// 11539                  pop     di ;~ 01A2:4997
cs=0x1a2;eip=0x004998; 	X(PUSH(di));	// 11540                  push    di ;~ 01A2:4998
cs=0x1a2;eip=0x004999; 	T(ADD(di, 0x0A0));	// 11541                  add     di, 0A0h ;~ 01A2:4999
cs=0x1a2;eip=0x00499d; 	X(*(dw*)(&off_1f736) = di;);	// 11542                  mov     word ptr ds:off_1F736, di ;~ 01A2:499D
cs=0x1a2;eip=0x0049a1; 	T(ax = word_1f72a;);	// 11543                  mov     ax, ds:word_1F72A ;~ 01A2:49A1
cs=0x1a2;eip=0x0049a4; 	X(word_1f38a = ax;);	// 11544                  mov     ds:word_1F38A, ax ;~ 01A2:49A4
cs=0x1a2;eip=0x0049a7; 	T(ax = word_1f72c;);	// 11545                  mov     ax, ds:word_1F72C ;~ 01A2:49A7
cs=0x1a2;eip=0x0049aa; 	X(word_1f38c = ax;);	// 11546                  mov     ds:word_1F38C, ax ;~ 01A2:49AA
cs=0x1a2;eip=0x0049ad; 	J(JMP(loc_14783));	// 11547                  jmp     loc_14783 ;~ 01A2:49AD
loc_149b0:
	// 5122 
cs=0x1a2;eip=0x0049b0; 	T(ax = 0x0FFFF;);	// 11551                  mov     ax, 0FFFFh ;~ 01A2:49B0
cs=0x1a2;eip=0x0049b3; 	X(MOV(*(dw*)(raddr(ss,si+0x0A)), ax));	// 11552                  mov     ss:[si+0Ah], ax ;~ 01A2:49B3
cs=0x1a2;eip=0x0049b7; 	X(MOV(*(dw*)(raddr(ss,si+0x0C)), ax));	// 11553                  mov     ss:[si+0Ch], ax ;~ 01A2:49B7
cs=0x1a2;eip=0x0049bb; 	X(POP(di));	// 11554                  pop     di ;~ 01A2:49BB
cs=0x1a2;eip=0x0049bc; 	X(PUSH(di));	// 11555                  push    di ;~ 01A2:49BC
cs=0x1a2;eip=0x0049bd; 	T(XOR(ch, ch));	// 11556                  xor     ch, ch ;~ 01A2:49BD
cs=0x1a2;eip=0x0049bf; 	T(MOV(cl, *(raddr(ds,bx+4))));	// 11557                  mov     cl, [bx+4] ;~ 01A2:49BF
cs=0x1a2;eip=0x0049c2; 	T(XOR(ax, ax));	// 11558                  xor     ax, ax ;~ 01A2:49C2
cs=0x1a2;eip=0x0049c4; 	T(dx = 0x10;);	// 11559                  mov     dx, 10h ;~ 01A2:49C4
loc_149c7:
	// 5123 
cs=0x1a2;eip=0x0049c7; 	T(CMP(*(raddr(ds,di)), 0));	// 11562                  cmp     byte ptr [di], 0 ;~ 01A2:49C7
cs=0x1a2;eip=0x0049ca; 	J(JZ(loc_149d1));	// 11563                  jz      short loc_149D1 ;~ 01A2:49CA
cs=0x1a2;eip=0x0049cc; 	T(INC(ax));	// 11564                  inc     ax ;~ 01A2:49CC
cs=0x1a2;eip=0x0049cd; 	T(ADD(di, dx));	// 11565                  add     di, dx ;~ 01A2:49CD
cs=0x1a2;eip=0x0049cf; 	J(LOOP(loc_149c7));	// 11566                  loop    loc_149C7 ;~ 01A2:49CF
loc_149d1:
	// 5124 
cs=0x1a2;eip=0x0049d1; 	T(SHL(ax, 1));	// 11569                  shl     ax, 1 ;~ 01A2:49D1
cs=0x1a2;eip=0x0049d3; 	T(SHL(ax, 1));	// 11570                  shl     ax, 1 ;~ 01A2:49D3
cs=0x1a2;eip=0x0049d5; 	T(SHL(ax, 1));	// 11571                  shl     ax, 1 ;~ 01A2:49D5
cs=0x1a2;eip=0x0049d7; 	T(ADD(ax, 2));	// 11572                  add     ax, 2 ;~ 01A2:49D7
cs=0x1a2;eip=0x0049da; 	X(byte_1f74f = al;);	// 11573                  mov     ds:byte_1F74F, al ;~ 01A2:49DA
cs=0x1a2;eip=0x0049dd; 	X(POP(di));	// 11574                  pop     di ;~ 01A2:49DD
cs=0x1a2;eip=0x0049de; 	T(ADD(di, 0x0A0));	// 11575                  add     di, 0A0h ;~ 01A2:49DE
cs=0x1a2;eip=0x0049e2; 	T(XOR(ch, ch));	// 11576                  xor     ch, ch ;~ 01A2:49E2
cs=0x1a2;eip=0x0049e4; 	T(MOV(cl, *(raddr(ds,bx+5))));	// 11577                  mov     cl, [bx+5] ;~ 01A2:49E4
cs=0x1a2;eip=0x0049e7; 	T(XOR(ax, ax));	// 11578                  xor     ax, ax ;~ 01A2:49E7
loc_149e9:
	// 5125 
cs=0x1a2;eip=0x0049e9; 	T(CMP(*(raddr(ds,di)), 0));	// 11581                  cmp     byte ptr [di], 0 ;~ 01A2:49E9
cs=0x1a2;eip=0x0049ec; 	J(JZ(loc_149f3));	// 11582                  jz      short loc_149F3 ;~ 01A2:49EC
cs=0x1a2;eip=0x0049ee; 	T(INC(ax));	// 11583                  inc     ax ;~ 01A2:49EE
cs=0x1a2;eip=0x0049ef; 	T(ADD(di, dx));	// 11584                  add     di, dx ;~ 01A2:49EF
cs=0x1a2;eip=0x0049f1; 	J(LOOP(loc_149e9));	// 11585                  loop    loc_149E9 ;~ 01A2:49F1
loc_149f3:
	// 5126 
cs=0x1a2;eip=0x0049f3; 	T(SHL(ax, 1));	// 11588                  shl     ax, 1 ;~ 01A2:49F3
cs=0x1a2;eip=0x0049f5; 	T(SHL(ax, 1));	// 11589                  shl     ax, 1 ;~ 01A2:49F5
cs=0x1a2;eip=0x0049f7; 	T(SHL(ax, 1));	// 11590                  shl     ax, 1 ;~ 01A2:49F7
cs=0x1a2;eip=0x0049f9; 	T(ADD(ax, 0x0A));	// 11591                  add     ax, 0Ah ;~ 01A2:49F9
cs=0x1a2;eip=0x0049fc; 	X(byte_1f750 = al;);	// 11592                  mov     ds:byte_1F750, al ;~ 01A2:49FC
cs=0x1a2;eip=0x0049ff; 	J(RETN(0));	// 11593                  retn ;~ 01A2:49FF

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_14720: 	goto loc_14720;
        case m2c::kloc_14783: 	goto loc_14783;
        case m2c::kloc_1478f: 	goto loc_1478f;
        case m2c::kloc_14794: 	goto loc_14794;
        case m2c::kloc_147ca: 	goto loc_147ca;
        case m2c::kloc_147cc: 	goto loc_147cc;
        case m2c::kloc_147e9: 	goto loc_147e9;
        case m2c::kloc_147f2: 	goto loc_147f2;
        case m2c::kloc_147f9: 	goto loc_147f9;
        case m2c::kloc_14805: 	goto loc_14805;
        case m2c::kloc_1484d: 	goto loc_1484d;
        case m2c::kloc_1488c: 	goto loc_1488c;
        case m2c::kloc_14893: 	goto loc_14893;
        case m2c::kloc_1489a: 	goto loc_1489a;
        case m2c::kloc_148eb: 	goto loc_148eb;
        case m2c::kloc_148ef: 	goto loc_148ef;
        case m2c::kloc_14949: 	goto loc_14949;
        case m2c::kloc_14964: 	goto loc_14964;
        case m2c::kloc_1498b: 	goto loc_1498b;
        case m2c::kloc_149b0: 	goto loc_149b0;
        case m2c::kloc_149c7: 	goto loc_149c7;
        case m2c::kloc_149d1: 	goto loc_149d1;
        case m2c::kloc_149e9: 	goto loc_149e9;
        case m2c::kloc_149f3: 	goto loc_149f3;
        case m2c::ksub_14714: 	goto sub_14714;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_14a00(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_14a00:
    _begin:
cs=0x1a2;eip=0x004a00; 	X(PUSH(ax));	// 11602                  push    ax ;~ 01A2:4A00
cs=0x1a2;eip=0x004a01; 	X(PUSH(bx));	// 11603                  push    bx ;~ 01A2:4A01
cs=0x1a2;eip=0x004a02; 	X(PUSH(cx));	// 11604                  push    cx ;~ 01A2:4A02
cs=0x1a2;eip=0x004a03; 	X(PUSH(dx));	// 11605                  push    dx ;~ 01A2:4A03
cs=0x1a2;eip=0x004a04; 	X(PUSH(bp));	// 11606                  push    bp ;~ 01A2:4A04
cs=0x1a2;eip=0x004a05; 	X(PUSH(si));	// 11607                  push    si ;~ 01A2:4A05
cs=0x1a2;eip=0x004a06; 	X(PUSH(di));	// 11608                  push    di ;~ 01A2:4A06
cs=0x1a2;eip=0x004a07; 	X(PUSH(es));	// 11609                  push    es ;~ 01A2:4A07
cs=0x1a2;eip=0x004a08; 	X(PUSH(ds));	// 11610                  push    ds ;~ 01A2:4A08
loc_14a09:
	// 5127 
cs=0x1a2;eip=0x004a09; 	J(CALL(sub_14a2e,0));	// 11613                  call    sub_14A2E ;~ 01A2:4A09
cs=0x1a2;eip=0x004a0c; 	J(JNZ(loc_14a09));	// 11614                  jnz     short loc_14A09 ;~ 01A2:4A0C
cs=0x1a2;eip=0x004a0e; 	J(CALL(sub_15098,0));	// 11615                  call    sub_15098 ;~ 01A2:4A0E
cs=0x1a2;eip=0x004a11; 	J(CALL(sub_14714,0));	// 11616                  call    sub_14714 ;~ 01A2:4A11
cs=0x1a2;eip=0x004a14; 	J(CALL(sub_14cfa,0));	// 11617                  call    sub_14CFA ;~ 01A2:4A14
cs=0x1a2;eip=0x004a17; 	T(si = word_1f1a0;);	// 11618                  mov     si, word_1F1A0 ;~ 01A2:4A17
cs=0x1a2;eip=0x004a1b; 	T(di = word_1f19a;);	// 11619                  mov     di, word_1F19A ;~ 01A2:4A1B
cs=0x1a2;eip=0x004a1f; 	T(XOR(dh, dh));	// 11620                  xor     dh, dh ;~ 01A2:4A1F
cs=0x1a2;eip=0x004a21; 	J(CALL(sub_14ece,0));	// 11621                  call    sub_14ECE ;~ 01A2:4A21
cs=0x1a2;eip=0x004a24; 	X(POP(ds));	// 11622                  pop     ds ;~ 01A2:4A24
cs=0x1a2;eip=0x004a25; 	X(POP(es));	// 11623                  pop     es ;~ 01A2:4A25
cs=0x1a2;eip=0x004a26; 	X(POP(di));	// 11624                  pop     di ;~ 01A2:4A26
cs=0x1a2;eip=0x004a27; 	X(POP(si));	// 11625                  pop     si ;~ 01A2:4A27
cs=0x1a2;eip=0x004a28; 	X(POP(bp));	// 11626                  pop     bp ;~ 01A2:4A28
cs=0x1a2;eip=0x004a29; 	X(POP(dx));	// 11627                  pop     dx ;~ 01A2:4A29
cs=0x1a2;eip=0x004a2a; 	X(POP(cx));	// 11628                  pop     cx ;~ 01A2:4A2A
cs=0x1a2;eip=0x004a2b; 	X(POP(bx));	// 11629                  pop     bx ;~ 01A2:4A2B
cs=0x1a2;eip=0x004a2c; 	X(POP(ax));	// 11630                  pop     ax ;~ 01A2:4A2C
cs=0x1a2;eip=0x004a2d; 	J(RETN(0));	// 11631                  retn ;~ 01A2:4A2D

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_14a09: 	goto loc_14a09;
        case m2c::ksub_14a00: 	goto sub_14a00;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_14a2e(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_14a2e:
    _begin:
cs=0x1a2;eip=0x004a2e; 	T(di = word_1f1a0;);	// 11639                  mov     di, word_1F1A0 ;~ 01A2:4A2E
cs=0x1a2;eip=0x004a32; 	T(si = di;);	// 11640                  mov     si, di ;~ 01A2:4A32
cs=0x1a2;eip=0x004a34; 	T(ax = ds;);	// 11641                  mov     ax, ds ;~ 01A2:4A34
cs=0x1a2;eip=0x004a36; 	T(es = ax;);	// 11642                  mov     es, ax ;~ 01A2:4A36
cs=0x1a2;eip=0x004a38; 	T(cx = 0x300;);	// 11643                  mov     cx, 300h ;~ 01A2:4A38
cs=0x1a2;eip=0x004a3b; 	T(XOR(ax, ax));	// 11644                  xor     ax, ax ;~ 01A2:4A3B
cs=0x1a2;eip=0x004a3d; 	X(byte_1f766 = al;);	// 11645                  mov     ds:byte_1F766, al ;~ 01A2:4A3D
	// 11646                  rep stosw ;~ 01A2:4A40
cs=0x1a2;eip=0x004a40; 	X(	REP STOSW);	// 11646                  rep stosw ;~ 01A2:4A40
cs=0x1a2;eip=0x004a42; 	T(dx = 0x10;);	// 11647                  mov     dx, 10h ;~ 01A2:4A42
cs=0x1a2;eip=0x004a45; 	T(cx = 0x60;);	// 11648                  mov     cx, 60h ; '`' ;~ 01A2:4A45
cs=0x1a2;eip=0x004a48; 	T(ax = 0x0FFFF;);	// 11649                  mov     ax, 0FFFFh ;~ 01A2:4A48
loc_14a4b:
	// 5128 
cs=0x1a2;eip=0x004a4b; 	X(MOV(*(dw*)(raddr(ds,si)), ax));	// 11652                  mov     [si], ax ;~ 01A2:4A4B
cs=0x1a2;eip=0x004a4d; 	X(MOV(*(dw*)(raddr(ds,si+2)), ax));	// 11653                  mov     [si+2], ax ;~ 01A2:4A4D
cs=0x1a2;eip=0x004a50; 	T(ADD(si, dx));	// 11654                  add     si, dx ;~ 01A2:4A50
cs=0x1a2;eip=0x004a52; 	J(LOOP(loc_14a4b));	// 11655                  loop    loc_14A4B ;~ 01A2:4A52
cs=0x1a2;eip=0x004a54; 	T(di = word_1f19a;);	// 11656                  mov     di, word_1F19A ;~ 01A2:4A54
cs=0x1a2;eip=0x004a58; 	T(dx = 0x32;);	// 11657                  mov     dx, 32h ; '2' ;~ 01A2:4A58
cs=0x1a2;eip=0x004a5b; 	T(bx = 0x0FFFE;);	// 11658                  mov     bx, 0FFFEh ;~ 01A2:4A5B
cs=0x1a2;eip=0x004a5e; 	T(bp = 0x0FFFF;);	// 11659                  mov     bp, 0FFFFh ;~ 01A2:4A5E
cs=0x1a2;eip=0x004a61; 	T(XOR(ax, ax));	// 11660                  xor     ax, ax ;~ 01A2:4A61
cs=0x1a2;eip=0x004a63; 	T(cx = 0x60;);	// 11661                  mov     cx, 60h ; '`' ;~ 01A2:4A63
loc_14a66:
	// 5129 
cs=0x1a2;eip=0x004a66; 	X(MOV(*(dw*)(raddr(ds,di)), bp));	// 11664                  mov     [di], bp ;~ 01A2:4A66
cs=0x1a2;eip=0x004a68; 	X(MOV(*(dw*)(raddr(ds,di+2)), bx));	// 11665                  mov     [di+2], bx ;~ 01A2:4A68
cs=0x1a2;eip=0x004a6b; 	X(MOV(*(dw*)(raddr(ds,di+0x2A)), ax));	// 11666                  mov     [di+2Ah], ax ;~ 01A2:4A6B
cs=0x1a2;eip=0x004a6e; 	X(MOV(*(dw*)(raddr(ds,di+0x2C)), ax));	// 11667                  mov     [di+2Ch], ax ;~ 01A2:4A6E
cs=0x1a2;eip=0x004a71; 	X(MOV(*(raddr(ds,di+0x12)), al));	// 11668                  mov     [di+12h], al ;~ 01A2:4A71
cs=0x1a2;eip=0x004a74; 	X(MOV(*(raddr(ds,di+0x23)), al));	// 11669                  mov     [di+23h], al ;~ 01A2:4A74
cs=0x1a2;eip=0x004a77; 	X(MOV(*(raddr(ds,di+0x20)), 4));	// 11670                  mov     byte ptr [di+20h], 4 ;~ 01A2:4A77
cs=0x1a2;eip=0x004a7b; 	T(ADD(di, dx));	// 11671                  add     di, dx ;~ 01A2:4A7B
cs=0x1a2;eip=0x004a7d; 	J(LOOP(loc_14a66));	// 11672                  loop    loc_14A66 ;~ 01A2:4A7D
cs=0x1a2;eip=0x004a7f; 	T(di = word_1f1ce;);	// 11673                  mov     di, word_1F1CE ;~ 01A2:4A7F
cs=0x1a2;eip=0x004a83; 	T(XOR(ax, ax));	// 11674                  xor     ax, ax ;~ 01A2:4A83
cs=0x1a2;eip=0x004a85; 	X(word_1f390 = ax;);	// 11675                  mov     ds:word_1F390, ax ;~ 01A2:4A85
cs=0x1a2;eip=0x004a88; 	X(word_1f394 = ax;);	// 11676                  mov     ds:word_1F394, ax ;~ 01A2:4A88
cs=0x1a2;eip=0x004a8b; 	X(word_1f392 = ax;);	// 11677                  mov     ds:word_1F392, ax ;~ 01A2:4A8B
cs=0x1a2;eip=0x004a8e; 	T(MOV(al, *(raddr(ds,di+0x1D))));	// 11678                  mov     al, [di+1Dh] ;~ 01A2:4A8E
cs=0x1a2;eip=0x004a91; 	X(*(dw*)(((db*)&off_1f736)+2) = ax;);	// 11679                  mov     word ptr ds:off_1F736+2, ax ;~ 01A2:4A91
cs=0x1a2;eip=0x004a94; 	T(dx = word_1f3a2;);	// 11680                  mov     dx, ds:word_1F3A2 ;~ 01A2:4A94
cs=0x1a2;eip=0x004a98; 	X(PUSH(*(dw*)(((db*)&off_1f736)+2)));	// 11681                  push    word ptr ds:off_1F736+2 ;~ 01A2:4A98
cs=0x1a2;eip=0x004a9c; 	T(ax = 5;);	// 11682                  mov     ax, 5 ;~ 01A2:4A9C
cs=0x1a2;eip=0x004a9f; 	J(CALL(sub_1410e,0));	// 11683                  call    sub_1410E ;~ 01A2:4A9F
cs=0x1a2;eip=0x004aa2; 	X(POP(*(dw*)(((db*)&off_1f736)+2)));	// 11684                  pop     word ptr ds:off_1F736+2 ;~ 01A2:4AA2
cs=0x1a2;eip=0x004aa6; 	X(word_1f732 = di;);	// 11685                  mov     ds:word_1F732, di ;~ 01A2:4AA6
cs=0x1a2;eip=0x004aaa; 	T(si = word_1f19a;);	// 11686                  mov     si, word_1F19A ;~ 01A2:4AAA
cs=0x1a2;eip=0x004aae; 	X(PUSH(*(dw*)(((db*)&off_1f736)+2)));	// 11687                  push    word ptr ds:off_1F736+2 ;~ 01A2:4AAE
cs=0x1a2;eip=0x004ab2; 	X(PUSH(word_1f732));	// 11688                  push    ds:word_1F732 ;~ 01A2:4AB2
cs=0x1a2;eip=0x004ab6; 	X(PUSH(*(dw*)(((db*)&off_1f736)+2)));	// 11689                  push    word ptr ds:off_1F736+2 ;~ 01A2:4AB6
cs=0x1a2;eip=0x004aba; 	X(PUSH(word_1f732));	// 11690                  push    ds:word_1F732 ;~ 01A2:4ABA
cs=0x1a2;eip=0x004abe; 	J(JMP(loc_14c32));	// 11691                  jmp     loc_14C32 ;~ 01A2:4ABE
loc_14ac1:
	// 5130 
cs=0x1a2;eip=0x004ac1; 	T(di = word_1f732;);	// 11695                  mov     di, ds:word_1F732 ;~ 01A2:4AC1
cs=0x1a2;eip=0x004ac5; 	T(MOV(dx, *(dw*)(raddr(ds,di))));	// 11696                  mov     dx, [di] ;~ 01A2:4AC5
cs=0x1a2;eip=0x004ac7; 	T(ADD(di, 2));	// 11697                  add     di, 2 ;~ 01A2:4AC7
cs=0x1a2;eip=0x004aca; 	X(word_1f732 = di;);	// 11698                  mov     ds:word_1F732, di ;~ 01A2:4ACA
cs=0x1a2;eip=0x004ace; 	X(MOV(*(dw*)(raddr(ds,si+0x2E)), dx));	// 11699                  mov     [si+2Eh], dx ;~ 01A2:4ACE
cs=0x1a2;eip=0x004ad1; 	X(PUSH(*(dw*)(((db*)&off_1f736)+2)));	// 11700                  push    word ptr ds:off_1F736+2 ;~ 01A2:4AD1
cs=0x1a2;eip=0x004ad5; 	X(PUSH(word_1f732));	// 11701                  push    ds:word_1F732 ;~ 01A2:4AD5
cs=0x1a2;eip=0x004ad9; 	X(PUSH(si));	// 11702                  push    si ;~ 01A2:4AD9
cs=0x1a2;eip=0x004ada; 	T(ax = 6;);	// 11703                  mov     ax, 6 ;~ 01A2:4ADA
cs=0x1a2;eip=0x004add; 	J(CALL(sub_1410e,0));	// 11704                  call    sub_1410E ;~ 01A2:4ADD
cs=0x1a2;eip=0x004ae0; 	X(POP(si));	// 11705                  pop     si ;~ 01A2:4AE0
cs=0x1a2;eip=0x004ae1; 	T(MOV(al, *(raddr(ds,di+3))));	// 11706                  mov     al, [di+3] ;~ 01A2:4AE1
cs=0x1a2;eip=0x004ae4; 	T(TEST(al, 0x80));	// 11707                  test    al, 80h ;~ 01A2:4AE4
cs=0x1a2;eip=0x004ae6; 	J(JZ(loc_14aeb));	// 11708                  jz      short loc_14AEB ;~ 01A2:4AE6
cs=0x1a2;eip=0x004ae8; 	J(JMP(loc_14c32));	// 11710                  jmp     loc_14C32 ;~ 01A2:4AE8
loc_14aeb:
	// 5131 
cs=0x1a2;eip=0x004aeb; 	T(TEST(al, 8));	// 11714                  test    al, 8 ;~ 01A2:4AEB
cs=0x1a2;eip=0x004aed; 	J(JZ(loc_14af2));	// 11715                  jz      short loc_14AF2 ;~ 01A2:4AED
cs=0x1a2;eip=0x004aef; 	X(byte_1f766 = al;);	// 11716                  mov     ds:byte_1F766, al ;~ 01A2:4AEF
loc_14af2:
	// 5132 
cs=0x1a2;eip=0x004af2; 	T(MOV(dx, *(dw*)(raddr(ds,di+6))));	// 11719                  mov     dx, [di+6] ;~ 01A2:4AF2
cs=0x1a2;eip=0x004af5; 	X(PUSH(si));	// 11720                  push    si ;~ 01A2:4AF5
cs=0x1a2;eip=0x004af6; 	X(PUSH(di));	// 11721                  push    di ;~ 01A2:4AF6
cs=0x1a2;eip=0x004af7; 	T(ax = 2;);	// 11722                  mov     ax, 2 ;~ 01A2:4AF7
cs=0x1a2;eip=0x004afa; 	J(CALL(sub_1410e,0));	// 11723                  call    sub_1410E ;~ 01A2:4AFA
cs=0x1a2;eip=0x004afd; 	T(bx = di;);	// 11724                  mov     bx, di ;~ 01A2:4AFD
cs=0x1a2;eip=0x004aff; 	X(POP(di));	// 11725                  pop     di ;~ 01A2:4AFF
cs=0x1a2;eip=0x004b00; 	X(POP(si));	// 11726                  pop     si ;~ 01A2:4B00
cs=0x1a2;eip=0x004b01; 	T(MOV(dh, *(raddr(ds,di))));	// 11727                  mov     dh, [di] ;~ 01A2:4B01
cs=0x1a2;eip=0x004b03; 	T(MOV(cl, *(raddr(ds,di+1))));	// 11728                  mov     cl, [di+1] ;~ 01A2:4B03
cs=0x1a2;eip=0x004b06; 	T(MOV(ch, *(raddr(ds,di+2))));	// 11729                  mov     ch, [di+2] ;~ 01A2:4B06
cs=0x1a2;eip=0x004b09; 	T(MOV(dl, *(raddr(es,bx+0x16))));	// 11730                  mov     dl, es:[bx+16h] ;~ 01A2:4B09
cs=0x1a2;eip=0x004b0d; 	T(OR(dl, dl));	// 11731                  or      dl, dl ;~ 01A2:4B0D
cs=0x1a2;eip=0x004b0f; 	J(JNS(loc_14b3c));	// 11732                  jns     short loc_14B3C ;~ 01A2:4B0F
loc_14b11:
	// 5133 
cs=0x1a2;eip=0x004b11; 	X(PUSH(ax));	// 11735                  push    ax ;~ 01A2:4B11
cs=0x1a2;eip=0x004b12; 	X(PUSH(bx));	// 11736                  push    bx ;~ 01A2:4B12
cs=0x1a2;eip=0x004b13; 	X(PUSH(cx));	// 11737                  push    cx ;~ 01A2:4B13
cs=0x1a2;eip=0x004b14; 	X(PUSH(dx));	// 11738                  push    dx ;~ 01A2:4B14
cs=0x1a2;eip=0x004b15; 	X(PUSH(bp));	// 11739                  push    bp ;~ 01A2:4B15
cs=0x1a2;eip=0x004b16; 	X(PUSH(si));	// 11740                  push    si ;~ 01A2:4B16
cs=0x1a2;eip=0x004b17; 	X(PUSH(di));	// 11741                  push    di ;~ 01A2:4B17
cs=0x1a2;eip=0x004b18; 	X(PUSH(es));	// 11742                  push    es ;~ 01A2:4B18
cs=0x1a2;eip=0x004b19; 	X(PUSH(ds));	// 11743                  push    ds ;~ 01A2:4B19
cs=0x1a2;eip=0x004b1a; 	T(MOV(dx, *(dw*)(raddr(ds,si+0x2E))));	// 11744                  mov     dx, [si+2Eh] ;~ 01A2:4B1A
cs=0x1a2;eip=0x004b1d; 	X(PUSH(dx));	// 11745                  push    dx ;~ 01A2:4B1D
cs=0x1a2;eip=0x004b1e; 	J(CALL(sub_13e6d,0));	// 11746                  call    sub_13E6D ;~ 01A2:4B1E
cs=0x1a2;eip=0x004b21; 	X(POP(dx));	// 11747                  pop     dx ;~ 01A2:4B21
cs=0x1a2;eip=0x004b22; 	T(ax = 6;);	// 11748                  mov     ax, 6 ;~ 01A2:4B22
cs=0x1a2;eip=0x004b25; 	J(CALL(sub_1438a,0));	// 11749                  call    sub_1438A ;~ 01A2:4B25
cs=0x1a2;eip=0x004b28; 	X(POP(ds));	// 11750                  pop     ds ;~ 01A2:4B28
cs=0x1a2;eip=0x004b29; 	X(POP(es));	// 11752                  pop     es ;~ 01A2:4B29
cs=0x1a2;eip=0x004b2a; 	X(POP(di));	// 11754                  pop     di ;~ 01A2:4B2A
cs=0x1a2;eip=0x004b2b; 	X(POP(si));	// 11755                  pop     si ;~ 01A2:4B2B
cs=0x1a2;eip=0x004b2c; 	X(POP(bp));	// 11756                  pop     bp ;~ 01A2:4B2C
cs=0x1a2;eip=0x004b2d; 	X(POP(dx));	// 11757                  pop     dx ;~ 01A2:4B2D
cs=0x1a2;eip=0x004b2e; 	X(POP(cx));	// 11758                  pop     cx ;~ 01A2:4B2E
cs=0x1a2;eip=0x004b2f; 	X(POP(bx));	// 11759                  pop     bx ;~ 01A2:4B2F
cs=0x1a2;eip=0x004b30; 	X(POP(ax));	// 11760                  pop     ax ;~ 01A2:4B30
cs=0x1a2;eip=0x004b31; 	X(POP(*(dw*)(raddr(ds,0x5C2))));	// 11761                  pop     word ptr ds:5C2h ;~ 01A2:4B31
cs=0x1a2;eip=0x004b35; 	X(POP(*(dw*)(raddr(ds,0x5C8))));	// 11762                  pop     word ptr ds:5C8h ;~ 01A2:4B35
cs=0x1a2;eip=0x004b39; 	J(JMP(loc_14c43));	// 11763                  jmp     loc_14C43 ;~ 01A2:4B39
loc_14b3c:
	// 5134 
cs=0x1a2;eip=0x004b3c; 	T(CMP(dl, 3));	// 11768                  cmp     dl, 3 ;~ 01A2:4B3C
cs=0x1a2;eip=0x004b3f; 	J(JNZ(loc_14b45));	// 11769                  jnz     short loc_14B45 ;~ 01A2:4B3F
cs=0x1a2;eip=0x004b41; 	X(MOV(*(raddr(ds,si+0x20)), 0));	// 11770                  mov     byte ptr [si+20h], 0 ;~ 01A2:4B41
loc_14b45:
	// 5135 
cs=0x1a2;eip=0x004b45; 	T(CMP(dl, 0x10));	// 11773                  cmp     dl, 10h ;~ 01A2:4B45
cs=0x1a2;eip=0x004b48; 	J(JZ(loc_14b11));	// 11774                  jz      short loc_14B11 ;~ 01A2:4B48
cs=0x1a2;eip=0x004b4a; 	T(XOR(ah, ah));	// 11775                  xor     ah, ah ;~ 01A2:4B4A
cs=0x1a2;eip=0x004b4c; 	T(MOV(al, *(raddr(es,bx+0x1E))));	// 11776                  mov     al, es:[bx+1Eh] ;~ 01A2:4B4C
cs=0x1a2;eip=0x004b50; 	T(CMP(al, 0x3B));	// 11777                  cmp     al, 3Bh ; ';' ;~ 01A2:4B50
cs=0x1a2;eip=0x004b52; 	J(JNZ(loc_14b56));	// 11778                  jnz     short loc_14B56 ;~ 01A2:4B52
cs=0x1a2;eip=0x004b54; 	T(al = 0x0FF;);	// 11779                  mov     al, 0FFh ;~ 01A2:4B54
loc_14b56:
	// 5136 
cs=0x1a2;eip=0x004b56; 	X(MOV(*(raddr(ds,si+0x22)), al));	// 11782                  mov     [si+22h], al ;~ 01A2:4B56
cs=0x1a2;eip=0x004b59; 	T(CMP(al, 0x0FF));	// 11783                  cmp     al, 0FFh ;~ 01A2:4B59
cs=0x1a2;eip=0x004b5b; 	J(JZ(loc_14b60));	// 11784                  jz      short loc_14B60 ;~ 01A2:4B5B
cs=0x1a2;eip=0x004b5d; 	J(CALL(sub_1156c,0));	// 11785                  call    sub_1156C ;~ 01A2:4B5D
loc_14b60:
	// 5137 
cs=0x1a2;eip=0x004b60; 	T(TEST(*(raddr(es,bx+0x0C)), 1));	// 11788                  test    byte ptr es:[bx+0Ch], 1 ;~ 01A2:4B60
cs=0x1a2;eip=0x004b65; 	J(JZ(loc_14b77));	// 11789                  jz      short loc_14B77 ;~ 01A2:4B65
cs=0x1a2;eip=0x004b67; 	X(INC(word_1f390));	// 11790                  inc     ds:word_1F390 ;~ 01A2:4B67
cs=0x1a2;eip=0x004b6b; 	T(CMP(*(dw*)(raddr(ds,di+4)), 0));	// 11791                  cmp     word ptr [di+4], 0 ;~ 01A2:4B6B
cs=0x1a2;eip=0x004b6f; 	J(JNZ(loc_14b7b));	// 11792                  jnz     short loc_14B7B ;~ 01A2:4B6F
cs=0x1a2;eip=0x004b71; 	X(word_1f1c2 = si;);	// 11794                  mov     word_1F1C2, si ;~ 01A2:4B71
cs=0x1a2;eip=0x004b75; 	J(JMP(loc_14b7b));	// 11795                  jmp     short loc_14B7B ;~ 01A2:4B75
loc_14b77:
	// 5138 
cs=0x1a2;eip=0x004b77; 	X(INC(word_1f392));	// 11799                  inc     ds:word_1F392 ;~ 01A2:4B77
loc_14b7b:
	// 5139 
cs=0x1a2;eip=0x004b7b; 	X(INC(word_1f394));	// 11803                  inc     ds:word_1F394 ;~ 01A2:4B7B
cs=0x1a2;eip=0x004b7f; 	X(MOV(*(raddr(ds,si)), dh));	// 11804                  mov     [si], dh ;~ 01A2:4B7F
cs=0x1a2;eip=0x004b81; 	X(MOV(*(raddr(ds,si+1)), cl));	// 11805                  mov     [si+1], cl ;~ 01A2:4B81
cs=0x1a2;eip=0x004b84; 	X(MOV(*(raddr(ds,si+5)), ch));	// 11806                  mov     [si+5], ch ;~ 01A2:4B84
cs=0x1a2;eip=0x004b87; 	T(MOV(ax, *(dw*)(raddr(es,bx+0x10))));	// 11807                  mov     ax, es:[bx+10h] ;~ 01A2:4B87
cs=0x1a2;eip=0x004b8b; 	T(SUB(dh, al));	// 11808                  sub     dh, al ;~ 01A2:4B8B
cs=0x1a2;eip=0x004b8d; 	T(INC(dh));	// 11809                  inc     dh ;~ 01A2:4B8D
cs=0x1a2;eip=0x004b8f; 	T(MOV(ax, *(dw*)(raddr(es,bx+0x12))));	// 11810                  mov     ax, es:[bx+12h] ;~ 01A2:4B8F
cs=0x1a2;eip=0x004b93; 	T(SUB(cl, al));	// 11811                  sub     cl, al ;~ 01A2:4B93
cs=0x1a2;eip=0x004b95; 	T(INC(cl));	// 11812                  inc     cl ;~ 01A2:4B95
cs=0x1a2;eip=0x004b97; 	X(MOV(*(raddr(ds,si+2)), dh));	// 11813                  mov     [si+2], dh ;~ 01A2:4B97
cs=0x1a2;eip=0x004b9a; 	X(MOV(*(raddr(ds,si+3)), cl));	// 11814                  mov     [si+3], cl ;~ 01A2:4B9A
cs=0x1a2;eip=0x004b9d; 	T(MOV(ax, *(dw*)(raddr(es,bx+0x14))));	// 11815                  mov     ax, es:[bx+14h] ;~ 01A2:4B9D
cs=0x1a2;eip=0x004ba1; 	T(ADD(ch, al));	// 11816                  add     ch, al ;~ 01A2:4BA1
cs=0x1a2;eip=0x004ba3; 	T(DEC(ch));	// 11817                  dec     ch ;~ 01A2:4BA3
cs=0x1a2;eip=0x004ba5; 	X(MOV(*(raddr(ds,si+4)), ch));	// 11818                  mov     [si+4], ch ;~ 01A2:4BA5
cs=0x1a2;eip=0x004ba8; 	X(MOV(*(dw*)(raddr(ds,di+8)), si));	// 11819                  mov     [di+8], si ;~ 01A2:4BA8
cs=0x1a2;eip=0x004bab; 	T(MOV(al, *(raddr(ds,di+3))));	// 11820                  mov     al, [di+3] ;~ 01A2:4BAB
cs=0x1a2;eip=0x004bae; 	X(MOV(*(raddr(ds,si+0x26)), al));	// 11821                  mov     [si+26h], al ;~ 01A2:4BAE
cs=0x1a2;eip=0x004bb1; 	T(MOV(al, *(raddr(es,bx+0x0C))));	// 11822                  mov     al, es:[bx+0Ch] ;~ 01A2:4BB1
cs=0x1a2;eip=0x004bb5; 	X(MOV(*(raddr(ds,si+0x27)), al));	// 11823                  mov     [si+27h], al ;~ 01A2:4BB5
cs=0x1a2;eip=0x004bb8; 	X(MOV(*(dw*)(raddr(ds,si+0x18)), 0));	// 11824                  mov     word ptr [si+18h], 0 ;~ 01A2:4BB8
cs=0x1a2;eip=0x004bbd; 	X(MOV(*(dw*)(raddr(ds,si+0x1A)), 0));	// 11825                  mov     word ptr [si+1Ah], 0 ;~ 01A2:4BBD
cs=0x1a2;eip=0x004bc2; 	X(MOV(*(dw*)(raddr(ds,si+6)), es));	// 11826                  mov     word ptr [si+6], es ;~ 01A2:4BC2
cs=0x1a2;eip=0x004bc5; 	X(MOV(*(dw*)(raddr(ds,si+8)), bx));	// 11827                  mov     [si+8], bx ;~ 01A2:4BC5
cs=0x1a2;eip=0x004bc8; 	T(CMP(*(raddr(es,bx+0x0D)), 0));	// 11828                  cmp     byte ptr es:[bx+0Dh], 0 ;~ 01A2:4BC8
cs=0x1a2;eip=0x004bcd; 	J(JNZ(loc_14bd4));	// 11829                  jnz     short loc_14BD4 ;~ 01A2:4BCD
cs=0x1a2;eip=0x004bcf; 	X(MOV(*(raddr(es,bx+0x0D)), 0x0A));	// 11830                  mov     byte ptr es:[bx+0Dh], 0Ah ;~ 01A2:4BCF
loc_14bd4:
	// 5140 
cs=0x1a2;eip=0x004bd4; 	X(MOV(*(dw*)(raddr(ds,si+0x0A)), di));	// 11833                  mov     [si+0Ah], di ;~ 01A2:4BD4
cs=0x1a2;eip=0x004bd7; 	X(MOV(*(dw*)(raddr(ds,si+0x0C)), 0));	// 11834                  mov     word ptr [si+0Ch], 0 ;~ 01A2:4BD7
cs=0x1a2;eip=0x004bdc; 	X(word_1f72a = bx;);	// 11835                  mov     ds:word_1F72A, bx ;~ 01A2:4BDC
cs=0x1a2;eip=0x004be0; 	T(TEST(*(raddr(es,bx+0x0C)), 0x20));	// 11836                  test    byte ptr es:[bx+0Ch], 20h ;~ 01A2:4BE0
cs=0x1a2;eip=0x004be5; 	J(JZ(loc_14c09));	// 11837                  jz      short loc_14C09 ;~ 01A2:4BE5
cs=0x1a2;eip=0x004be7; 	T(ADD(bx, 0x22));	// 11838                  add     bx, 22h ; '"' ;~ 01A2:4BE7
cs=0x1a2;eip=0x004bea; 	T(XOR(dx, dx));	// 11839                  xor     dx, dx ;~ 01A2:4BEA
cs=0x1a2;eip=0x004bec; 	X(PUSH(bx));	// 11840                  push    bx ;~ 01A2:4BEC
cs=0x1a2;eip=0x004bed; 	X(PUSH(di));	// 11841                  push    di ;~ 01A2:4BED
cs=0x1a2;eip=0x004bee; 	X(PUSH(si));	// 11842                  push    si ;~ 01A2:4BEE
cs=0x1a2;eip=0x004bef; 	T(XCHG(bx, di));	// 11843                  xchg    bx, di ;~ 01A2:4BEF
cs=0x1a2;eip=0x004bf1; 	T(si = di;);	// 11844                  mov     si, di ;~ 01A2:4BF1
cs=0x1a2;eip=0x004bf3; 	T(SUB(si, 2));	// 11845                  sub     si, 2 ;~ 01A2:4BF3
cs=0x1a2;eip=0x004bf6; 	T(SUB(di, 0x20));	// 11846                  sub     di, 20h ; ' ' ;~ 01A2:4BF6
cs=0x1a2;eip=0x004bf9; 	J(CALL(sub_18d86,0));	// 11847                  call    sub_18D86 ;~ 01A2:4BF9
cs=0x1a2;eip=0x004bfc; 	T(ax = si;);	// 11848                  mov     ax, si ;~ 01A2:4BFC
cs=0x1a2;eip=0x004bfe; 	X(POP(si));	// 11849                  pop     si ;~ 01A2:4BFE
cs=0x1a2;eip=0x004bff; 	X(MOV(*(dw*)(raddr(ds,si+0x1E)), ax));	// 11850                  mov     [si+1Eh], ax ;~ 01A2:4BFF
cs=0x1a2;eip=0x004c02; 	X(MOV(*(dw*)(raddr(ds,si+0x2A)), es));	// 11851                  mov     word ptr [si+2Ah], es ;~ 01A2:4C02
cs=0x1a2;eip=0x004c05; 	X(POP(di));	// 11852                  pop     di ;~ 01A2:4C05
cs=0x1a2;eip=0x004c06; 	X(POP(bx));	// 11853                  pop     bx ;~ 01A2:4C06
cs=0x1a2;eip=0x004c07; 	J(JMP(loc_14c26));	// 11854                  jmp     short loc_14C26 ;~ 01A2:4C07
loc_14c09:
	// 5141 
cs=0x1a2;eip=0x004c09; 	T(ADD(bx, 0x20));	// 11858                  add     bx, 20h ; ' ' ;~ 01A2:4C09
cs=0x1a2;eip=0x004c0c; 	X(PUSH(bx));	// 11859                  push    bx ;~ 01A2:4C0C
cs=0x1a2;eip=0x004c0d; 	T(bx = word_1f72a;);	// 11860                  mov     bx, ds:word_1F72A ;~ 01A2:4C0D
cs=0x1a2;eip=0x004c11; 	T(TEST(*(raddr(es,bx+0x0C)), 4));	// 11861                  test    byte ptr es:[bx+0Ch], 4 ;~ 01A2:4C11
cs=0x1a2;eip=0x004c16; 	X(POP(bx));	// 11862                  pop     bx ;~ 01A2:4C16
cs=0x1a2;eip=0x004c17; 	J(JNZ(loc_14c21));	// 11863                  jnz     short loc_14C21 ;~ 01A2:4C17
cs=0x1a2;eip=0x004c19; 	X(MOV(*(dw*)(raddr(ds,si+0x1E)), bx));	// 11864                  mov     [si+1Eh], bx ;~ 01A2:4C19
cs=0x1a2;eip=0x004c1c; 	X(MOV(*(dw*)(raddr(ds,si+0x2A)), es));	// 11865                  mov     word ptr [si+2Ah], es ;~ 01A2:4C1C
cs=0x1a2;eip=0x004c1f; 	J(JMP(loc_14c26));	// 11866                  jmp     short loc_14C26 ;~ 01A2:4C1F
loc_14c21:
	// 5142 
cs=0x1a2;eip=0x004c21; 	X(PUSH(bx));	// 11870                  push    bx ;~ 01A2:4C21
cs=0x1a2;eip=0x004c22; 	J(CALL(sub_13ac3,0));	// 11871                  call    sub_13AC3 ;~ 01A2:4C22
cs=0x1a2;eip=0x004c25; 	X(POP(bx));	// 11872                  pop     bx ;~ 01A2:4C25
loc_14c26:
	// 5143 
cs=0x1a2;eip=0x004c26; 	X(PUSH(bx));	// 11876                  push    bx ;~ 01A2:4C26
cs=0x1a2;eip=0x004c27; 	T(bx = word_1f72a;);	// 11877                  mov     bx, ds:word_1F72A ;~ 01A2:4C27
cs=0x1a2;eip=0x004c2b; 	J(CALL(sub_14cb9,0));	// 11878                  call    sub_14CB9 ;~ 01A2:4C2B
cs=0x1a2;eip=0x004c2e; 	X(POP(bx));	// 11879                  pop     bx ;~ 01A2:4C2E
cs=0x1a2;eip=0x004c2f; 	T(ADD(si, 0x32));	// 11880                  add     si, 32h ; '2' ;~ 01A2:4C2F
loc_14c32:
	// 5144 
cs=0x1a2;eip=0x004c32; 	X(POP(word_1f732));	// 11884                  pop     ds:word_1F732 ;~ 01A2:4C32
cs=0x1a2;eip=0x004c36; 	X(POP(*(dw*)(((db*)&off_1f736)+2)));	// 11885                  pop     word ptr ds:off_1F736+2 ;~ 01A2:4C36
cs=0x1a2;eip=0x004c3a; 	X(DEC(*(dw*)(((db*)&off_1f736)+2)));	// 11886                  dec     word ptr ds:off_1F736+2 ;~ 01A2:4C3A
cs=0x1a2;eip=0x004c3e; 	J(JS(loc_14c43));	// 11887                  js      short loc_14C43 ;~ 01A2:4C3E
cs=0x1a2;eip=0x004c40; 	J(JMP(loc_14ac1));	// 11888                  jmp     loc_14AC1 ;~ 01A2:4C40
loc_14c43:
	// 5145 
cs=0x1a2;eip=0x004c43; 	T(ax = *(dw*)(((db*)&off_1f736)+2););	// 11893                  mov     ax, word ptr ds:off_1F736+2 ;~ 01A2:4C43
cs=0x1a2;eip=0x004c46; 	X(POP(word_1f732));	// 11894                  pop     ds:word_1F732 ;~ 01A2:4C46
cs=0x1a2;eip=0x004c4a; 	X(POP(*(dw*)(((db*)&off_1f736)+2)));	// 11895                  pop     word ptr ds:off_1F736+2 ;~ 01A2:4C4A
cs=0x1a2;eip=0x004c4e; 	T(OR(ax, ax));	// 11896                  or      ax, ax ;~ 01A2:4C4E
cs=0x1a2;eip=0x004c50; 	J(JNS(loc_14cb5));	// 11897                  jns     short loc_14CB5 ;~ 01A2:4C50
cs=0x1a2;eip=0x004c52; 	T(CMP(byte_1f766, 0));	// 11898                  cmp     ds:byte_1F766, 0 ;~ 01A2:4C52
cs=0x1a2;eip=0x004c57; 	J(JZ(locret_14cb8));	// 11899                  jz      short locret_14CB8 ;~ 01A2:4C57
cs=0x1a2;eip=0x004c59; 	J(JMP(loc_14caf));	// 11900                  jmp     short loc_14CAF ;~ 01A2:4C59
loc_14c5b:
	// 5146 
cs=0x1a2;eip=0x004c5b; 	T(di = word_1f732;);	// 11904                  mov     di, ds:word_1F732 ;~ 01A2:4C5B
cs=0x1a2;eip=0x004c5f; 	X(ADD(word_1f732, 2));	// 11905                  add     ds:word_1F732, 2 ;~ 01A2:4C5F
cs=0x1a2;eip=0x004c64; 	T(MOV(dx, *(dw*)(raddr(ds,di))));	// 11906                  mov     dx, [di] ;~ 01A2:4C64
cs=0x1a2;eip=0x004c66; 	T(ax = 6;);	// 11907                  mov     ax, 6 ;~ 01A2:4C66
cs=0x1a2;eip=0x004c69; 	J(CALL(sub_1410e,0));	// 11908                  call    sub_1410E ;~ 01A2:4C69
cs=0x1a2;eip=0x004c6c; 	T(TEST(*(raddr(ds,di+3)), 8));	// 11909                  test    byte ptr [di+3], 8 ;~ 01A2:4C6C
cs=0x1a2;eip=0x004c70; 	X(PUSHF);	// 11910                  pushf ;~ 01A2:4C70
cs=0x1a2;eip=0x004c71; 	X(AND(*(raddr(ds,di+3)), 0x0F7));	// 11911                  and     byte ptr [di+3], 0F7h ;~ 01A2:4C71
cs=0x1a2;eip=0x004c75; 	X(POPF);	// 11912                  popf ;~ 01A2:4C75
cs=0x1a2;eip=0x004c76; 	J(JZ(loc_14caf));	// 11913                  jz      short loc_14CAF ;~ 01A2:4C76
cs=0x1a2;eip=0x004c78; 	T(si = di;);	// 11914                  mov     si, di ;~ 01A2:4C78
cs=0x1a2;eip=0x004c7a; 	T(MOV(dx, *(dw*)(raddr(ds,si+6))));	// 11915                  mov     dx, [si+6] ;~ 01A2:4C7A
cs=0x1a2;eip=0x004c7d; 	T(ax = 2;);	// 11916                  mov     ax, 2 ;~ 01A2:4C7D
cs=0x1a2;eip=0x004c80; 	J(CALL(sub_1410e,0));	// 11917                  call    sub_1410E ;~ 01A2:4C80
cs=0x1a2;eip=0x004c83; 	T(MOV(dl, *(raddr(ds,si))));	// 11918                  mov     dl, [si] ;~ 01A2:4C83
cs=0x1a2;eip=0x004c85; 	T(MOV(dh, *(raddr(ds,si+1))));	// 11919                  mov     dh, [si+1] ;~ 01A2:4C85
cs=0x1a2;eip=0x004c88; 	T(MOV(ch, *(raddr(ds,si+2))));	// 11920                  mov     ch, [si+2] ;~ 01A2:4C88
cs=0x1a2;eip=0x004c8b; 	T(bp = 0x0F;);	// 11921                  mov     bp, 0Fh ;~ 01A2:4C8B
cs=0x1a2;eip=0x004c8e; 	X(PUSH(si));	// 11922                  push    si ;~ 01A2:4C8E
cs=0x1a2;eip=0x004c8f; 	J(CALL(sub_11cc1,0));	// 11923                  call    sub_11CC1 ;~ 01A2:4C8F
cs=0x1a2;eip=0x004c92; 	X(POP(si));	// 11924                  pop     si ;~ 01A2:4C92
cs=0x1a2;eip=0x004c93; 	J(JNZ(loc_14ca5));	// 11925                  jnz     short loc_14CA5 ;~ 01A2:4C93
cs=0x1a2;eip=0x004c95; 	T(MOV(dl, *(raddr(ds,si))));	// 11926                  mov     dl, [si] ;~ 01A2:4C95
cs=0x1a2;eip=0x004c97; 	T(MOV(dh, *(raddr(ds,si+1))));	// 11927                  mov     dh, [si+1] ;~ 01A2:4C97
cs=0x1a2;eip=0x004c9a; 	T(MOV(ch, *(raddr(ds,si+2))));	// 11928                  mov     ch, [si+2] ;~ 01A2:4C9A
cs=0x1a2;eip=0x004c9d; 	T(bp = 0x3F;);	// 11929                  mov     bp, 3Fh ; '?' ;~ 01A2:4C9D
cs=0x1a2;eip=0x004ca0; 	X(PUSH(si));	// 11930                  push    si ;~ 01A2:4CA0
cs=0x1a2;eip=0x004ca1; 	J(CALL(sub_11cc1,0));	// 11931                  call    sub_11CC1 ;~ 01A2:4CA1
cs=0x1a2;eip=0x004ca4; 	X(POP(si));	// 11932                  pop     si ;~ 01A2:4CA4
loc_14ca5:
	// 5147 
cs=0x1a2;eip=0x004ca5; 	X(MOV(*(raddr(ds,si)), dl));	// 11935                  mov     [si], dl ;~ 01A2:4CA5
cs=0x1a2;eip=0x004ca7; 	X(MOV(*(raddr(ds,si+1)), dh));	// 11936                  mov     [si+1], dh ;~ 01A2:4CA7
cs=0x1a2;eip=0x004caa; 	X(MOV(*(raddr(ds,si+2)), ch));	// 11937                  mov     [si+2], ch ;~ 01A2:4CAA
cs=0x1a2;eip=0x004cad; 	J(JMP(loc_14cb5));	// 11938                  jmp     short loc_14CB5 ;~ 01A2:4CAD
loc_14caf:
	// 5148 
cs=0x1a2;eip=0x004caf; 	X(DEC(*(dw*)(((db*)&off_1f736)+2)));	// 11943                  dec     word ptr ds:off_1F736+2 ;~ 01A2:4CAF
cs=0x1a2;eip=0x004cb3; 	J(JNS(loc_14c5b));	// 11944                  jns     short loc_14C5B ;~ 01A2:4CB3
loc_14cb5:
	// 5149 
cs=0x1a2;eip=0x004cb5; 	T(ax = 1;);	// 11948                  mov     ax, 1 ;~ 01A2:4CB5
locret_14cb8:
	// 5150 
cs=0x1a2;eip=0x004cb8; 	J(RETN(0));	// 11951                  retn ;~ 01A2:4CB8

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_14a4b: 	goto loc_14a4b;
        case m2c::kloc_14a66: 	goto loc_14a66;
        case m2c::kloc_14ac1: 	goto loc_14ac1;
        case m2c::kloc_14aeb: 	goto loc_14aeb;
        case m2c::kloc_14af2: 	goto loc_14af2;
        case m2c::kloc_14b11: 	goto loc_14b11;
        case m2c::kloc_14b3c: 	goto loc_14b3c;
        case m2c::kloc_14b45: 	goto loc_14b45;
        case m2c::kloc_14b56: 	goto loc_14b56;
        case m2c::kloc_14b60: 	goto loc_14b60;
        case m2c::kloc_14b77: 	goto loc_14b77;
        case m2c::kloc_14b7b: 	goto loc_14b7b;
        case m2c::kloc_14bd4: 	goto loc_14bd4;
        case m2c::kloc_14c09: 	goto loc_14c09;
        case m2c::kloc_14c21: 	goto loc_14c21;
        case m2c::kloc_14c26: 	goto loc_14c26;
        case m2c::kloc_14c32: 	goto loc_14c32;
        case m2c::kloc_14c43: 	goto loc_14c43;
        case m2c::kloc_14c5b: 	goto loc_14c5b;
        case m2c::kloc_14ca5: 	goto loc_14ca5;
        case m2c::kloc_14caf: 	goto loc_14caf;
        case m2c::kloc_14cb5: 	goto loc_14cb5;
        case m2c::klocret_14cb8: 	goto locret_14cb8;
        case m2c::ksub_14a2e: 	goto sub_14a2e;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_14cb9(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_14cb9:
    _begin:
cs=0x1a2;eip=0x004cb9; 	T(cl = 4;);	// 11960                  mov     cl, 4 ;~ 01A2:4CB9
cs=0x1a2;eip=0x004cbb; 	T(MOV(al, *(raddr(es,bx+0x0E))));	// 11961                  mov     al, es:[bx+0Eh] ;~ 01A2:4CBB
cs=0x1a2;eip=0x004cbf; 	T(OR(al, al));	// 11962                  or      al, al ;~ 01A2:4CBF
cs=0x1a2;eip=0x004cc1; 	J(JZ(loc_14cd0));	// 11963                  jz      short loc_14CD0 ;~ 01A2:4CC1
cs=0x1a2;eip=0x004cc3; 	T(ah = al;);	// 11965                  mov     ah, al ;~ 01A2:4CC3
cs=0x1a2;eip=0x004cc5; 	T(AND(ah, 0x0F));	// 11966                  and     ah, 0Fh ;~ 01A2:4CC5
cs=0x1a2;eip=0x004cc8; 	X(SUB(*(raddr(ds,si+4)), ah));	// 11967                  sub     [si+4], ah ;~ 01A2:4CC8
cs=0x1a2;eip=0x004ccb; 	T(SHR(al, cl));	// 11968                  shr     al, cl ;~ 01A2:4CCB
cs=0x1a2;eip=0x004ccd; 	X(ADD(*(raddr(ds,si+5)), al));	// 11969                  add     [si+5], al ;~ 01A2:4CCD
loc_14cd0:
	// 5151 
cs=0x1a2;eip=0x004cd0; 	T(MOV(al, *(raddr(es,bx+0x1A))));	// 11972                  mov     al, es:[bx+1Ah] ;~ 01A2:4CD0
cs=0x1a2;eip=0x004cd4; 	T(OR(al, al));	// 11973                  or      al, al ;~ 01A2:4CD4
cs=0x1a2;eip=0x004cd6; 	J(JZ(loc_14ce4));	// 11974                  jz      short loc_14CE4 ;~ 01A2:4CD6
cs=0x1a2;eip=0x004cd8; 	T(ah = al;);	// 11975                  mov     ah, al ;~ 01A2:4CD8
cs=0x1a2;eip=0x004cda; 	T(AND(ah, 0x0F));	// 11976                  and     ah, 0Fh ;~ 01A2:4CDA
cs=0x1a2;eip=0x004cdd; 	X(SUB(*(raddr(ds,si)), ah));	// 11977                  sub     [si], ah ;~ 01A2:4CDD
cs=0x1a2;eip=0x004cdf; 	T(SHR(al, cl));	// 11978                  shr     al, cl ;~ 01A2:4CDF
cs=0x1a2;eip=0x004ce1; 	X(ADD(*(raddr(ds,si+2)), al));	// 11979                  add     [si+2], al ;~ 01A2:4CE1
loc_14ce4:
	// 5152 
cs=0x1a2;eip=0x004ce4; 	T(MOV(al, *(raddr(es,bx+0x1B))));	// 11982                  mov     al, es:[bx+1Bh] ;~ 01A2:4CE4
cs=0x1a2;eip=0x004ce8; 	T(OR(al, al));	// 11983                  or      al, al ;~ 01A2:4CE8
cs=0x1a2;eip=0x004cea; 	J(JZ(locret_14cf9));	// 11984                  jz      short locret_14CF9 ;~ 01A2:4CEA
cs=0x1a2;eip=0x004cec; 	T(ah = al;);	// 11985                  mov     ah, al ;~ 01A2:4CEC
cs=0x1a2;eip=0x004cee; 	T(AND(ah, 0x0F));	// 11986                  and     ah, 0Fh ;~ 01A2:4CEE
cs=0x1a2;eip=0x004cf1; 	X(SUB(*(raddr(ds,si+1)), ah));	// 11987                  sub     [si+1], ah ;~ 01A2:4CF1
cs=0x1a2;eip=0x004cf4; 	T(SHR(al, cl));	// 11988                  shr     al, cl ;~ 01A2:4CF4
cs=0x1a2;eip=0x004cf6; 	X(ADD(*(raddr(ds,si+3)), al));	// 11989                  add     [si+3], al ;~ 01A2:4CF6
locret_14cf9:
	// 5153 
cs=0x1a2;eip=0x004cf9; 	J(RETN(0));	// 11992                  retn ;~ 01A2:4CF9

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_14cd0: 	goto loc_14cd0;
        case m2c::kloc_14ce4: 	goto loc_14ce4;
        case m2c::klocret_14cf9: 	goto locret_14cf9;
        case m2c::ksub_14cb9: 	goto sub_14cb9;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_14cfa(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_14cfa:
    _begin:
cs=0x1a2;eip=0x004cfa; 	X(word_1f39e = 0;);	// 12000                  mov     ds:word_1F39E, 0 ;~ 01A2:4CFA
cs=0x1a2;eip=0x004d00; 	T(si = word_1f1aa;);	// 12001                  mov     si, word_1F1AA ;~ 01A2:4D00
cs=0x1a2;eip=0x004d04; 	T(bx = word_1f1ce;);	// 12002                  mov     bx, word_1F1CE ;~ 01A2:4D04
cs=0x1a2;eip=0x004d08; 	T(XOR(ch, ch));	// 12003                  xor     ch, ch ;~ 01A2:4D08
cs=0x1a2;eip=0x004d0a; 	T(MOV(cl, *(raddr(ds,bx+0x16))));	// 12004                  mov     cl, [bx+16h] ;~ 01A2:4D0A
cs=0x1a2;eip=0x004d0d; 	T(OR(cl, cl));	// 12005                  or      cl, cl ;~ 01A2:4D0D
cs=0x1a2;eip=0x004d0f; 	J(JNZ(loc_14d14));	// 12006                  jnz     short loc_14D14 ;~ 01A2:4D0F
cs=0x1a2;eip=0x004d11; 	J(JMP(locret_14ecd));	// 12007                  jmp     locret_14ECD ;~ 01A2:4D11
loc_14d14:
	// 5154 
cs=0x1a2;eip=0x004d14; 	T(bp = bx;);	// 12011                  mov     bp, bx ;~ 01A2:4D14
cs=0x1a2;eip=0x004d16; 	T(ADD(bp, 6));	// 12012                  add     bp, 6 ;~ 01A2:4D16
loc_14d19:
	// 5155 
cs=0x1a2;eip=0x004d19; 	T(MOV(dx, *(dw*)(raddr(ds,bp+0))));	// 12016                  mov     dx, ds:[bp+0] ;~ 01A2:4D19
cs=0x1a2;eip=0x004d1d; 	T(ADD(bp, 2));	// 12017                  add     bp, 2 ;~ 01A2:4D1D
cs=0x1a2;eip=0x004d20; 	T(OR(dx, dx));	// 12018                  or      dx, dx ;~ 01A2:4D20
cs=0x1a2;eip=0x004d22; 	J(JS(loc_14d19));	// 12019                  js      short loc_14D19 ;~ 01A2:4D22
cs=0x1a2;eip=0x004d24; 	X(PUSH(bp));	// 12020                  push    bp ;~ 01A2:4D24
cs=0x1a2;eip=0x004d25; 	X(PUSH(cx));	// 12021                  push    cx ;~ 01A2:4D25
cs=0x1a2;eip=0x004d26; 	X(MOV(*(dw*)(raddr(ss,si+0x16)), dx));	// 12022                  mov     ss:[si+16h], dx ;~ 01A2:4D26
cs=0x1a2;eip=0x004d2a; 	X(PUSH(si));	// 12023                  push    si ;~ 01A2:4D2A
cs=0x1a2;eip=0x004d2b; 	X(PUSH(bx));	// 12024                  push    bx ;~ 01A2:4D2B
cs=0x1a2;eip=0x004d2c; 	T(ax = 4;);	// 12025                  mov     ax, 4 ;~ 01A2:4D2C
cs=0x1a2;eip=0x004d2f; 	J(CALL(sub_1410e,0));	// 12026                  call    sub_1410E ;~ 01A2:4D2F
cs=0x1a2;eip=0x004d32; 	X(POP(bx));	// 12027                  pop     bx ;~ 01A2:4D32
cs=0x1a2;eip=0x004d33; 	X(POP(si));	// 12028                  pop     si ;~ 01A2:4D33
cs=0x1a2;eip=0x004d34; 	T(bp = di;);	// 12029                  mov     bp, di ;~ 01A2:4D34
cs=0x1a2;eip=0x004d36; 	T(XOR(ah, ah));	// 12030                  xor     ah, ah ;~ 01A2:4D36
cs=0x1a2;eip=0x004d38; 	T(MOV(al, *(raddr(ds,di+4))));	// 12031                  mov     al, [di+4] ;~ 01A2:4D38
cs=0x1a2;eip=0x004d3b; 	T(DEC(ax));	// 12032                  dec     ax ;~ 01A2:4D3B
cs=0x1a2;eip=0x004d3c; 	T(SHL(ax, 1));	// 12033                  shl     ax, 1 ;~ 01A2:4D3C
cs=0x1a2;eip=0x004d3e; 	T(SHL(ax, 1));	// 12034                  shl     ax, 1 ;~ 01A2:4D3E
cs=0x1a2;eip=0x004d40; 	X(PUSH(ax));	// 12035                  push    ax ;~ 01A2:4D40
cs=0x1a2;eip=0x004d41; 	T(MOV(dl, *(raddr(ds,di))));	// 12036                  mov     dl, [di] ;~ 01A2:4D41
cs=0x1a2;eip=0x004d43; 	T(MOV(dh, *(raddr(ds,di+1))));	// 12037                  mov     dh, [di+1] ;~ 01A2:4D43
cs=0x1a2;eip=0x004d46; 	T(CMP(*(raddr(ds,di+5)), 0));	// 12038                  cmp     byte ptr [di+5], 0 ;~ 01A2:4D46
cs=0x1a2;eip=0x004d4a; 	J(JNZ(loc_14d60));	// 12039                  jnz     short loc_14D60 ;~ 01A2:4D4A
cs=0x1a2;eip=0x004d4c; 	T(ch = 2;);	// 12041                  mov     ch, 2 ;~ 01A2:4D4C
cs=0x1a2;eip=0x004d4e; 	T(MOV(al, *(raddr(ds,bx+1))));	// 12042                  mov     al, [bx+1] ;~ 01A2:4D4E
cs=0x1a2;eip=0x004d51; 	T(SUB(dl, al));	// 12043                  sub     dl, al ;~ 01A2:4D51
cs=0x1a2;eip=0x004d53; 	J(JNS(loc_14d59));	// 12044                  jns     short loc_14D59 ;~ 01A2:4D53
cs=0x1a2;eip=0x004d55; 	T(INC(dl));	// 12045                  inc     dl ;~ 01A2:4D55
cs=0x1a2;eip=0x004d57; 	T(ch = 0;);	// 12046                  mov     ch, 0 ;~ 01A2:4D57
loc_14d59:
	// 5156 
cs=0x1a2;eip=0x004d59; 	T(MOV(al, *(raddr(ds,bx+3))));	// 12049                  mov     al, [bx+3] ;~ 01A2:4D59
cs=0x1a2;eip=0x004d5c; 	T(SUB(dh, al));	// 12050                  sub     dh, al ;~ 01A2:4D5C
cs=0x1a2;eip=0x004d5e; 	J(JMP(loc_14d72));	// 12051                  jmp     short loc_14D72 ;~ 01A2:4D5E
loc_14d60:
	// 5157 
cs=0x1a2;eip=0x004d60; 	T(ch = 3;);	// 12055                  mov     ch, 3 ;~ 01A2:4D60
cs=0x1a2;eip=0x004d62; 	T(MOV(al, *(raddr(ds,bx+3))));	// 12056                  mov     al, [bx+3] ;~ 01A2:4D62
cs=0x1a2;eip=0x004d65; 	T(SUB(dh, al));	// 12057                  sub     dh, al ;~ 01A2:4D65
cs=0x1a2;eip=0x004d67; 	J(JNS(loc_14d6d));	// 12058                  jns     short loc_14D6D ;~ 01A2:4D67
cs=0x1a2;eip=0x004d69; 	T(INC(dh));	// 12059                  inc     dh ;~ 01A2:4D69
cs=0x1a2;eip=0x004d6b; 	T(ch = 1;);	// 12060                  mov     ch, 1 ;~ 01A2:4D6B
loc_14d6d:
	// 5158 
cs=0x1a2;eip=0x004d6d; 	T(MOV(al, *(raddr(ds,bx+1))));	// 12063                  mov     al, [bx+1] ;~ 01A2:4D6D
cs=0x1a2;eip=0x004d70; 	T(SUB(dl, al));	// 12064                  sub     dl, al ;~ 01A2:4D70
loc_14d72:
	// 5159 
cs=0x1a2;eip=0x004d72; 	X(POP(ax));	// 12067                  pop     ax ;~ 01A2:4D72
cs=0x1a2;eip=0x004d73; 	T(ADD(al, ch));	// 12068                  add     al, ch ;~ 01A2:4D73
cs=0x1a2;eip=0x004d75; 	X(PUSH(dx));	// 12069                  push    dx ;~ 01A2:4D75
cs=0x1a2;eip=0x004d76; 	T(XOR(dh, dh));	// 12070                  xor     dh, dh ;~ 01A2:4D76
cs=0x1a2;eip=0x004d78; 	T(dl = al;);	// 12071                  mov     dl, al ;~ 01A2:4D78
cs=0x1a2;eip=0x004d7a; 	X(PUSH(si));	// 12072                  push    si ;~ 01A2:4D7A
cs=0x1a2;eip=0x004d7b; 	X(PUSH(bx));	// 12073                  push    bx ;~ 01A2:4D7B
cs=0x1a2;eip=0x004d7c; 	X(PUSH(bp));	// 12074                  push    bp ;~ 01A2:4D7C
cs=0x1a2;eip=0x004d7d; 	X(PUSH(cx));	// 12075                  push    cx ;~ 01A2:4D7D
cs=0x1a2;eip=0x004d7e; 	T(ax = 2;);	// 12076                  mov     ax, 2 ;~ 01A2:4D7E
cs=0x1a2;eip=0x004d81; 	J(CALL(sub_1410e,0));	// 12077                  call    sub_1410E ;~ 01A2:4D81
cs=0x1a2;eip=0x004d84; 	X(POP(cx));	// 12078                  pop     cx ;~ 01A2:4D84
cs=0x1a2;eip=0x004d85; 	X(POP(bp));	// 12079                  pop     bp ;~ 01A2:4D85
cs=0x1a2;eip=0x004d86; 	X(POP(bx));	// 12080                  pop     bx ;~ 01A2:4D86
cs=0x1a2;eip=0x004d87; 	X(POP(si));	// 12081                  pop     si ;~ 01A2:4D87
cs=0x1a2;eip=0x004d88; 	X(POP(dx));	// 12082                  pop     dx ;~ 01A2:4D88
cs=0x1a2;eip=0x004d89; 	T(MOV(ch, *(raddr(ds,bp+6))));	// 12083                  mov     ch, ds:[bp+6] ;~ 01A2:4D89
cs=0x1a2;eip=0x004d8d; 	T(SUB(ch, *(raddr(ds,bx+0x1E))));	// 12084                  sub     ch, [bx+1Eh] ;~ 01A2:4D8D
cs=0x1a2;eip=0x004d90; 	T(SHL(ch, 1));	// 12085                  shl     ch, 1 ;~ 01A2:4D90
cs=0x1a2;eip=0x004d92; 	T(SHL(ch, 1));	// 12086                  shl     ch, 1 ;~ 01A2:4D92
cs=0x1a2;eip=0x004d94; 	T(SHL(ch, 1));	// 12087                  shl     ch, 1 ;~ 01A2:4D94
cs=0x1a2;eip=0x004d96; 	T(SHL(ch, 1));	// 12088                  shl     ch, 1 ;~ 01A2:4D96
cs=0x1a2;eip=0x004d98; 	T(SHL(dl, 1));	// 12089                  shl     dl, 1 ;~ 01A2:4D98
cs=0x1a2;eip=0x004d9a; 	T(SHL(dl, 1));	// 12090                  shl     dl, 1 ;~ 01A2:4D9A
cs=0x1a2;eip=0x004d9c; 	T(SHL(dl, 1));	// 12091                  shl     dl, 1 ;~ 01A2:4D9C
cs=0x1a2;eip=0x004d9e; 	T(SHL(dh, 1));	// 12092                  shl     dh, 1 ;~ 01A2:4D9E
cs=0x1a2;eip=0x004da0; 	T(SHL(dh, 1));	// 12093                  shl     dh, 1 ;~ 01A2:4DA0
cs=0x1a2;eip=0x004da2; 	T(SHL(dh, 1));	// 12094                  shl     dh, 1 ;~ 01A2:4DA2
cs=0x1a2;eip=0x004da4; 	X(MOV(*(raddr(ss,si+2)), dl));	// 12095                  mov     ss:[si+2], dl ;~ 01A2:4DA4
cs=0x1a2;eip=0x004da8; 	X(MOV(*(raddr(ss,si+3)), dh));	// 12096                  mov     ss:[si+3], dh ;~ 01A2:4DA8
cs=0x1a2;eip=0x004dac; 	X(MOV(*(raddr(ss,si+5)), ch));	// 12097                  mov     ss:[si+5], ch ;~ 01A2:4DAC
cs=0x1a2;eip=0x004db0; 	T(MOV(ax, *(dw*)(raddr(es,di+0x10))));	// 12098                  mov     ax, es:[di+10h] ;~ 01A2:4DB0
cs=0x1a2;eip=0x004db4; 	X(word_1f72a = ax;);	// 12099                  mov     ds:word_1F72A, ax ;~ 01A2:4DB4
cs=0x1a2;eip=0x004db7; 	T(CMP(ax, 8));	// 12100                  cmp     ax, 8 ;~ 01A2:4DB7
cs=0x1a2;eip=0x004dba; 	J(JNZ(loc_14e1d));	// 12101                  jnz     short loc_14E1D ;~ 01A2:4DBA
cs=0x1a2;eip=0x004dbc; 	T(al = byte_1f742;);	// 12103                  mov     al, ds:byte_1F742 ;~ 01A2:4DBC
cs=0x1a2;eip=0x004dbf; 	X(word_1f72a = ax;);	// 12104                  mov     ds:word_1F72A, ax ;~ 01A2:4DBF
cs=0x1a2;eip=0x004dc2; 	X(PUSH(dx));	// 12105                  push    dx ;~ 01A2:4DC2
cs=0x1a2;eip=0x004dc3; 	X(PUSH(di));	// 12106                  push    di ;~ 01A2:4DC3
cs=0x1a2;eip=0x004dc4; 	T(cl = 3;);	// 12107                  mov     cl, 3 ;~ 01A2:4DC4
cs=0x1a2;eip=0x004dc6; 	T(SHR(dl, cl));	// 12108                  shr     dl, cl ;~ 01A2:4DC6
cs=0x1a2;eip=0x004dc8; 	J(JZ(loc_14e13));	// 12109                  jz      short loc_14E13 ;~ 01A2:4DC8
cs=0x1a2;eip=0x004dca; 	T(SHR(dh, cl));	// 12110                  shr     dh, cl ;~ 01A2:4DCA
cs=0x1a2;eip=0x004dcc; 	T(XOR(ah, ah));	// 12111                  xor     ah, ah ;~ 01A2:4DCC
cs=0x1a2;eip=0x004dce; 	T(MOV(al, *(raddr(ds,bx+4))));	// 12112                  mov     al, [bx+4] ;~ 01A2:4DCE
cs=0x1a2;eip=0x004dd1; 	T(INC(al));	// 12113                  inc     al ;~ 01A2:4DD1
cs=0x1a2;eip=0x004dd3; 	X(word_1f72e = ax;);	// 12114                  mov     ds:word_1F72E, ax ;~ 01A2:4DD3
cs=0x1a2;eip=0x004dd6; 	X(PUSH(dx));	// 12115                  push    dx ;~ 01A2:4DD6
cs=0x1a2;eip=0x004dd7; 	T(dl = dh;);	// 12116                  mov     dl, dh ;~ 01A2:4DD7
cs=0x1a2;eip=0x004dd9; 	T(XOR(dh, dh));	// 12117                  xor     dh, dh ;~ 01A2:4DD9
cs=0x1a2;eip=0x004ddb; 	T(MUL1_2(dx));	// 12118                  mul     dx ;~ 01A2:4DDB
cs=0x1a2;eip=0x004ddd; 	X(POP(dx));	// 12119                  pop     dx ;~ 01A2:4DDD
cs=0x1a2;eip=0x004dde; 	X(PUSH(dx));	// 12120                  push    dx ;~ 01A2:4DDE
cs=0x1a2;eip=0x004ddf; 	T(XOR(dh, dh));	// 12121                  xor     dh, dh ;~ 01A2:4DDF
cs=0x1a2;eip=0x004de1; 	T(ADD(dx, ax));	// 12122                  add     dx, ax ;~ 01A2:4DE1
cs=0x1a2;eip=0x004de3; 	T(di = word_1f1a8;);	// 12123                  mov     di, word_1F1A8 ;~ 01A2:4DE3
cs=0x1a2;eip=0x004de7; 	T(ADD(di, dx));	// 12124                  add     di, dx ;~ 01A2:4DE7
cs=0x1a2;eip=0x004de9; 	X(POP(dx));	// 12125                  pop     dx ;~ 01A2:4DE9
cs=0x1a2;eip=0x004dea; 	X(PUSH(si));	// 12126                  push    si ;~ 01A2:4DEA
cs=0x1a2;eip=0x004deb; 	X(PUSH(es));	// 12127                  push    es ;~ 01A2:4DEB
cs=0x1a2;eip=0x004dec; 	T(si = *(dw*)(&off_1f88a););	// 12128                  mov     si, word ptr ds:off_1F88A ;~ 01A2:4DEC
cs=0x1a2;eip=0x004df0; 	T(es = *(dw*)(((db*)&off_1f88a)+2););	// 12129                  mov     es, word ptr ds:off_1F88A+2 ;~ 01A2:4DF0
cs=0x1a2;eip=0x004df4; 	T(OR(si, si));	// 12131                  or      si, si ;~ 01A2:4DF4
cs=0x1a2;eip=0x004df6; 	J(JNZ(loc_14dfd));	// 12132                  jnz     short loc_14DFD ;~ 01A2:4DF6
cs=0x1a2;eip=0x004df8; 	T(ax = 2;);	// 12133                  mov     ax, 2 ;~ 01A2:4DF8
cs=0x1a2;eip=0x004dfb; 	J(JMP(loc_14e09));	// 12134                  jmp     short loc_14E09 ;~ 01A2:4DFB
loc_14dfd:
	// 5160 
cs=0x1a2;eip=0x004dfd; 	T(MOV(ax, *(dw*)(raddr(es,si+0x0E))));	// 12138                  mov     ax, es:[si+0Eh] ;~ 01A2:4DFD
cs=0x1a2;eip=0x004e01; 	T(OR(ch, ch));	// 12139                  or      ch, ch ;~ 01A2:4E01
cs=0x1a2;eip=0x004e03; 	J(JNZ(loc_14e09));	// 12140                  jnz     short loc_14E09 ;~ 01A2:4E03
cs=0x1a2;eip=0x004e05; 	T(MOV(ax, *(dw*)(raddr(es,si+0x0C))));	// 12141                  mov     ax, es:[si+0Ch] ;~ 01A2:4E05
loc_14e09:
	// 5161 
cs=0x1a2;eip=0x004e09; 	X(MOV(*(raddr(ds,di)), al));	// 12145                  mov     [di], al ;~ 01A2:4E09
cs=0x1a2;eip=0x004e0b; 	T(ADD(di, word_1f72e));	// 12146                  add     di, ds:word_1F72E ;~ 01A2:4E0B
cs=0x1a2;eip=0x004e0f; 	X(MOV(*(raddr(ds,di)), al));	// 12147                  mov     [di], al ;~ 01A2:4E0F
cs=0x1a2;eip=0x004e11; 	X(POP(es));	// 12148                  pop     es ;~ 01A2:4E11
cs=0x1a2;eip=0x004e12; 	X(POP(si));	// 12150                  pop     si ;~ 01A2:4E12
loc_14e13:
	// 5162 
cs=0x1a2;eip=0x004e13; 	X(POP(di));	// 12153                  pop     di ;~ 01A2:4E13
cs=0x1a2;eip=0x004e14; 	X(POP(dx));	// 12154                  pop     dx ;~ 01A2:4E14
cs=0x1a2;eip=0x004e15; 	X(SUB(*(dw*)(raddr(ss,si+3)), 4));	// 12155                  sub     word ptr ss:[si+3], 4 ;~ 01A2:4E15
cs=0x1a2;eip=0x004e1a; 	T(ADD(dh, 4));	// 12156                  add     dh, 4 ;~ 01A2:4E1A
loc_14e1d:
	// 5163 
cs=0x1a2;eip=0x004e1d; 	T(MOV(ax, *(dw*)(raddr(es,di+0x12))));	// 12159                  mov     ax, es:[di+12h] ;~ 01A2:4E1D
cs=0x1a2;eip=0x004e21; 	X(word_1f72c = ax;);	// 12160                  mov     ds:word_1F72C, ax ;~ 01A2:4E21
cs=0x1a2;eip=0x004e24; 	T(CMP(ax, 8));	// 12161                  cmp     ax, 8 ;~ 01A2:4E24
cs=0x1a2;eip=0x004e27; 	J(JNZ(loc_14e86));	// 12162                  jnz     short loc_14E86 ;~ 01A2:4E27
cs=0x1a2;eip=0x004e29; 	T(al = byte_1f741;);	// 12163                  mov     al, ds:byte_1F741 ;~ 01A2:4E29
cs=0x1a2;eip=0x004e2c; 	X(word_1f72c = ax;);	// 12164                  mov     ds:word_1F72C, ax ;~ 01A2:4E2C
cs=0x1a2;eip=0x004e2f; 	X(PUSH(dx));	// 12165                  push    dx ;~ 01A2:4E2F
cs=0x1a2;eip=0x004e30; 	X(PUSH(di));	// 12166                  push    di ;~ 01A2:4E30
cs=0x1a2;eip=0x004e31; 	T(cl = 3;);	// 12167                  mov     cl, 3 ;~ 01A2:4E31
cs=0x1a2;eip=0x004e33; 	T(SHR(dl, cl));	// 12168                  shr     dl, cl ;~ 01A2:4E33
cs=0x1a2;eip=0x004e35; 	T(SHR(dh, cl));	// 12169                  shr     dh, cl ;~ 01A2:4E35
cs=0x1a2;eip=0x004e37; 	J(JZ(loc_14e7c));	// 12170                  jz      short loc_14E7C ;~ 01A2:4E37
cs=0x1a2;eip=0x004e39; 	T(XOR(ah, ah));	// 12172                  xor     ah, ah ;~ 01A2:4E39
cs=0x1a2;eip=0x004e3b; 	T(MOV(al, *(raddr(ds,bx+4))));	// 12173                  mov     al, [bx+4] ;~ 01A2:4E3B
cs=0x1a2;eip=0x004e3e; 	T(INC(ax));	// 12174                  inc     ax ;~ 01A2:4E3E
cs=0x1a2;eip=0x004e3f; 	X(word_1f72e = ax;);	// 12175                  mov     ds:word_1F72E, ax ;~ 01A2:4E3F
cs=0x1a2;eip=0x004e42; 	X(PUSH(dx));	// 12176                  push    dx ;~ 01A2:4E42
cs=0x1a2;eip=0x004e43; 	T(dl = dh;);	// 12177                  mov     dl, dh ;~ 01A2:4E43
cs=0x1a2;eip=0x004e45; 	T(XOR(dh, dh));	// 12178                  xor     dh, dh ;~ 01A2:4E45
cs=0x1a2;eip=0x004e47; 	T(MUL1_2(dx));	// 12179                  mul     dx ;~ 01A2:4E47
cs=0x1a2;eip=0x004e49; 	X(POP(dx));	// 12180                  pop     dx ;~ 01A2:4E49
cs=0x1a2;eip=0x004e4a; 	X(PUSH(dx));	// 12181                  push    dx ;~ 01A2:4E4A
cs=0x1a2;eip=0x004e4b; 	T(XOR(dh, dh));	// 12182                  xor     dh, dh ;~ 01A2:4E4B
cs=0x1a2;eip=0x004e4d; 	T(ADD(ax, dx));	// 12183                  add     ax, dx ;~ 01A2:4E4D
cs=0x1a2;eip=0x004e4f; 	T(di = word_1f1a8;);	// 12184                  mov     di, word_1F1A8 ;~ 01A2:4E4F
cs=0x1a2;eip=0x004e53; 	T(ADD(di, ax));	// 12185                  add     di, ax ;~ 01A2:4E53
cs=0x1a2;eip=0x004e55; 	X(POP(dx));	// 12186                  pop     dx ;~ 01A2:4E55
cs=0x1a2;eip=0x004e56; 	X(PUSH(si));	// 12187                  push    si ;~ 01A2:4E56
cs=0x1a2;eip=0x004e57; 	X(PUSH(es));	// 12188                  push    es ;~ 01A2:4E57
cs=0x1a2;eip=0x004e58; 	T(si = *(dw*)(&off_1f88a););	// 12189                  mov     si, word ptr ds:off_1F88A ;~ 01A2:4E58
cs=0x1a2;eip=0x004e5c; 	T(es = *(dw*)(((db*)&off_1f88a)+2););	// 12190                  mov     es, word ptr ds:off_1F88A+2 ;~ 01A2:4E5C
cs=0x1a2;eip=0x004e60; 	T(OR(si, si));	// 12192                  or      si, si ;~ 01A2:4E60
cs=0x1a2;eip=0x004e62; 	J(JNZ(loc_14e69));	// 12193                  jnz     short loc_14E69 ;~ 01A2:4E62
cs=0x1a2;eip=0x004e64; 	T(ax = 2;);	// 12194                  mov     ax, 2 ;~ 01A2:4E64
cs=0x1a2;eip=0x004e67; 	J(JMP(loc_14e75));	// 12195                  jmp     short loc_14E75 ;~ 01A2:4E67
loc_14e69:
	// 5164 
cs=0x1a2;eip=0x004e69; 	T(MOV(ax, *(dw*)(raddr(es,si+0x0E))));	// 12199                  mov     ax, es:[si+0Eh] ;~ 01A2:4E69
cs=0x1a2;eip=0x004e6d; 	T(OR(ch, ch));	// 12200                  or      ch, ch ;~ 01A2:4E6D
cs=0x1a2;eip=0x004e6f; 	J(JNZ(loc_14e75));	// 12201                  jnz     short loc_14E75 ;~ 01A2:4E6F
cs=0x1a2;eip=0x004e71; 	T(MOV(ax, *(dw*)(raddr(es,si+0x0C))));	// 12202                  mov     ax, es:[si+0Ch] ;~ 01A2:4E71
loc_14e75:
	// 5165 
cs=0x1a2;eip=0x004e75; 	X(MOV(*(raddr(ds,di)), al));	// 12206                  mov     [di], al ;~ 01A2:4E75
cs=0x1a2;eip=0x004e77; 	X(MOV(*(raddr(ds,di+1)), al));	// 12207                  mov     [di+1], al ;~ 01A2:4E77
cs=0x1a2;eip=0x004e7a; 	X(POP(es));	// 12208                  pop     es ;~ 01A2:4E7A
cs=0x1a2;eip=0x004e7b; 	X(POP(si));	// 12210                  pop     si ;~ 01A2:4E7B
loc_14e7c:
	// 5166 
cs=0x1a2;eip=0x004e7c; 	X(POP(di));	// 12213                  pop     di ;~ 01A2:4E7C
cs=0x1a2;eip=0x004e7d; 	X(POP(dx));	// 12214                  pop     dx ;~ 01A2:4E7D
cs=0x1a2;eip=0x004e7e; 	X(SUB(*(dw*)(raddr(ss,si+2)), 4));	// 12215                  sub     word ptr ss:[si+2], 4 ;~ 01A2:4E7E
cs=0x1a2;eip=0x004e83; 	T(ADD(dl, 4));	// 12216                  add     dl, 4 ;~ 01A2:4E83
loc_14e86:
	// 5167 
cs=0x1a2;eip=0x004e86; 	T(ax = word_1f72a;);	// 12219                  mov     ax, ds:word_1F72A ;~ 01A2:4E86
cs=0x1a2;eip=0x004e89; 	T(ADD(dl, al));	// 12220                  add     dl, al ;~ 01A2:4E89
cs=0x1a2;eip=0x004e8b; 	T(DEC(dl));	// 12221                  dec     dl ;~ 01A2:4E8B
cs=0x1a2;eip=0x004e8d; 	T(ax = word_1f72c;);	// 12222                  mov     ax, ds:word_1F72C ;~ 01A2:4E8D
cs=0x1a2;eip=0x004e90; 	T(ADD(dh, al));	// 12223                  add     dh, al ;~ 01A2:4E90
cs=0x1a2;eip=0x004e92; 	T(DEC(dh));	// 12224                  dec     dh ;~ 01A2:4E92
cs=0x1a2;eip=0x004e94; 	X(MOV(*(raddr(ss,si)), dl));	// 12225                  mov     ss:[si], dl ;~ 01A2:4E94
cs=0x1a2;eip=0x004e97; 	X(MOV(*(raddr(ss,si+1)), dh));	// 12226                  mov     ss:[si+1], dh ;~ 01A2:4E97
cs=0x1a2;eip=0x004e9b; 	T(MOV(ax, *(dw*)(raddr(es,di+0x14))));	// 12227                  mov     ax, es:[di+14h] ;~ 01A2:4E9B
cs=0x1a2;eip=0x004e9f; 	T(ADD(ch, al));	// 12228                  add     ch, al ;~ 01A2:4E9F
cs=0x1a2;eip=0x004ea1; 	T(DEC(ch));	// 12229                  dec     ch ;~ 01A2:4EA1
cs=0x1a2;eip=0x004ea3; 	X(MOV(*(raddr(ss,si+4)), ch));	// 12230                  mov     ss:[si+4], ch ;~ 01A2:4EA3
cs=0x1a2;eip=0x004ea7; 	X(MOV(*(dw*)(raddr(ss,si+6)), es));	// 12231                  mov     word ptr ss:[si+6], es ;~ 01A2:4EA7
cs=0x1a2;eip=0x004eab; 	X(MOV(*(dw*)(raddr(ss,si+8)), di));	// 12232                  mov     ss:[si+8], di ;~ 01A2:4EAB
cs=0x1a2;eip=0x004eaf; 	X(MOV(*(dw*)(raddr(ss,si+0x0A)), bp));	// 12233                  mov     ss:[si+0Ah], bp ;~ 01A2:4EAF
cs=0x1a2;eip=0x004eb3; 	T(ADD(si, 0x32));	// 12234                  add     si, 32h ; '2' ;~ 01A2:4EB3
cs=0x1a2;eip=0x004eb6; 	X(INC(word_1f39e));	// 12235                  inc     ds:word_1F39E ;~ 01A2:4EB6
cs=0x1a2;eip=0x004eba; 	X(POP(cx));	// 12236                  pop     cx ;~ 01A2:4EBA
cs=0x1a2;eip=0x004ebb; 	X(POP(bp));	// 12237                  pop     bp ;~ 01A2:4EBB
cs=0x1a2;eip=0x004ebc; 	J(LOOP(loc_14ec0));	// 12238                  loop    loc_14EC0 ;~ 01A2:4EBC
cs=0x1a2;eip=0x004ebe; 	J(JMP(loc_14ec3));	// 12239                  jmp     short loc_14EC3 ;~ 01A2:4EBE
loc_14ec0:
	// 5168 
cs=0x1a2;eip=0x004ec0; 	J(JMP(loc_14d19));	// 12243                  jmp     loc_14D19 ;~ 01A2:4EC0
loc_14ec3:
	// 5169 
cs=0x1a2;eip=0x004ec3; 	T(ax = 0x0FFFF;);	// 12247                  mov     ax, 0FFFFh ;~ 01A2:4EC3
cs=0x1a2;eip=0x004ec6; 	X(MOV(*(dw*)(raddr(ss,si)), ax));	// 12248                  mov     ss:[si], ax ;~ 01A2:4EC6
cs=0x1a2;eip=0x004ec9; 	X(MOV(*(dw*)(raddr(ss,si+2)), ax));	// 12249                  mov     ss:[si+2], ax ;~ 01A2:4EC9
locret_14ecd:
	// 5170 
cs=0x1a2;eip=0x004ecd; 	J(RETN(0));	// 12252                  retn ;~ 01A2:4ECD

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_14d14: 	goto loc_14d14;
        case m2c::kloc_14d19: 	goto loc_14d19;
        case m2c::kloc_14d59: 	goto loc_14d59;
        case m2c::kloc_14d60: 	goto loc_14d60;
        case m2c::kloc_14d6d: 	goto loc_14d6d;
        case m2c::kloc_14d72: 	goto loc_14d72;
        case m2c::kloc_14dfd: 	goto loc_14dfd;
        case m2c::kloc_14e09: 	goto loc_14e09;
        case m2c::kloc_14e13: 	goto loc_14e13;
        case m2c::kloc_14e1d: 	goto loc_14e1d;
        case m2c::kloc_14e69: 	goto loc_14e69;
        case m2c::kloc_14e75: 	goto loc_14e75;
        case m2c::kloc_14e7c: 	goto loc_14e7c;
        case m2c::kloc_14e86: 	goto loc_14e86;
        case m2c::kloc_14ec0: 	goto loc_14ec0;
        case m2c::kloc_14ec3: 	goto loc_14ec3;
        case m2c::klocret_14ecd: 	goto locret_14ecd;
        case m2c::ksub_14cfa: 	goto sub_14cfa;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_14ece(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_14ece:
    _begin:
cs=0x1a2;eip=0x004ece; 	T(cx = word_1f394;);	// 12260                  mov     cx, ds:word_1F394 ;~ 01A2:4ECE
cs=0x1a2;eip=0x004ed2; 	T(OR(cx, cx));	// 12261                  or      cx, cx ;~ 01A2:4ED2
cs=0x1a2;eip=0x004ed4; 	J(JZ(locret_14ed8));	// 12262                  jz      short locret_14ED8 ;~ 01A2:4ED4
cs=0x1a2;eip=0x004ed6; 	J(JMP(loc_14ed9));	// 12263                  jmp     short loc_14ED9 ;~ 01A2:4ED6
locret_14ed8:
	// 5171 
cs=0x1a2;eip=0x004ed8; 	J(RETN(0));	// 12267                  retn ;~ 01A2:4ED8
loc_14ed9:
	// 5172 
cs=0x1a2;eip=0x004ed9; 	T(XOR(dl, dl));	// 12271                  xor     dl, dl ;~ 01A2:4ED9
cs=0x1a2;eip=0x004edb; 	T(XOR(bp, bp));	// 12272                  xor     bp, bp ;~ 01A2:4EDB
cs=0x1a2;eip=0x004edd; 	X(word_1f730 = di;);	// 12273                  mov     ds:word_1F730, di ;~ 01A2:4EDD
loc_14ee1:
	// 5173 
cs=0x1a2;eip=0x004ee1; 	X(MOV(*(raddr(ds,di+0x14)), 0x0FF));	// 12276                  mov     byte ptr [di+14h], 0FFh ;~ 01A2:4EE1
cs=0x1a2;eip=0x004ee5; 	T(TEST(*(raddr(ds,di+0x27)), 1));	// 12277                  test    byte ptr [di+27h], 1 ;~ 01A2:4EE5
cs=0x1a2;eip=0x004ee9; 	J(JZ(loc_14eee));	// 12278                  jz      short loc_14EEE ;~ 01A2:4EE9
cs=0x1a2;eip=0x004eeb; 	X(MOV(*(raddr(ds,di+0x14)), dl));	// 12279                  mov     [di+14h], dl ;~ 01A2:4EEB
loc_14eee:
	// 5174 
cs=0x1a2;eip=0x004eee; 	X(MOV(*(raddr(ds,di+0x15)), dl));	// 12282                  mov     [di+15h], dl ;~ 01A2:4EEE
cs=0x1a2;eip=0x004ef1; 	X(MOV(*(dw*)(raddr(ds,di+0x16)), bp));	// 12283                  mov     [di+16h], bp ;~ 01A2:4EF1
cs=0x1a2;eip=0x004ef4; 	X(PUSH(si));	// 12284                  push    si ;~ 01A2:4EF4
cs=0x1a2;eip=0x004ef5; 	T(ADD(si, bp));	// 12285                  add     si, bp ;~ 01A2:4EF5
cs=0x1a2;eip=0x004ef7; 	J(CALL(sub_14f08,0));	// 12286                  call    sub_14F08 ;~ 01A2:4EF7
cs=0x1a2;eip=0x004efa; 	X(POP(si));	// 12287                  pop     si ;~ 01A2:4EFA
cs=0x1a2;eip=0x004efb; 	T(ADD(di, 0x32));	// 12288                  add     di, 32h ; '2' ;~ 01A2:4EFB
cs=0x1a2;eip=0x004efe; 	T(INC(dh));	// 12289                  inc     dh ;~ 01A2:4EFE
cs=0x1a2;eip=0x004f00; 	T(INC(dl));	// 12290                  inc     dl ;~ 01A2:4F00
cs=0x1a2;eip=0x004f02; 	T(ADD(bp, 0x10));	// 12291                  add     bp, 10h ;~ 01A2:4F02
cs=0x1a2;eip=0x004f05; 	J(LOOP(loc_14ee1));	// 12292                  loop    loc_14EE1 ;~ 01A2:4F05
cs=0x1a2;eip=0x004f07; 	J(RETN(0));	// 12293                  retn ;~ 01A2:4F07

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_14ed9: 	goto loc_14ed9;
        case m2c::kloc_14ee1: 	goto loc_14ee1;
        case m2c::kloc_14eee: 	goto loc_14eee;
        case m2c::klocret_14ed8: 	goto locret_14ed8;
        case m2c::ksub_14ece: 	goto sub_14ece;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_14f08(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_14f08:
    _begin:
cs=0x1a2;eip=0x004f08; 	X(PUSH(ax));	// 12301                  push    ax ;~ 01A2:4F08
cs=0x1a2;eip=0x004f09; 	X(PUSH(bx));	// 12302                  push    bx ;~ 01A2:4F09
cs=0x1a2;eip=0x004f0a; 	X(PUSH(cx));	// 12303                  push    cx ;~ 01A2:4F0A
cs=0x1a2;eip=0x004f0b; 	X(PUSH(dx));	// 12304                  push    dx ;~ 01A2:4F0B
cs=0x1a2;eip=0x004f0c; 	X(PUSH(bp));	// 12305                  push    bp ;~ 01A2:4F0C
cs=0x1a2;eip=0x004f0d; 	X(PUSH(si));	// 12306                  push    si ;~ 01A2:4F0D
cs=0x1a2;eip=0x004f0e; 	X(PUSH(di));	// 12307                  push    di ;~ 01A2:4F0E
cs=0x1a2;eip=0x004f0f; 	X(PUSH(es));	// 12308                  push    es ;~ 01A2:4F0F
cs=0x1a2;eip=0x004f10; 	X(PUSH(ds));	// 12309                  push    ds ;~ 01A2:4F10
cs=0x1a2;eip=0x004f11; 	T(bx = word_1f19a;);	// 12310                  mov     bx, word_1F19A ;~ 01A2:4F11
cs=0x1a2;eip=0x004f15; 	T(cx = word_1f394;);	// 12311                  mov     cx, ds:word_1F394 ;~ 01A2:4F15
cs=0x1a2;eip=0x004f19; 	X(byte_1f865 = cl;);	// 12312                  mov     ds:byte_1F865, cl ;~ 01A2:4F19
cs=0x1a2;eip=0x004f1d; 	X(byte_1f862 = dh;);	// 12313                  mov     ds:byte_1F862, dh ;~ 01A2:4F1D
cs=0x1a2;eip=0x004f21; 	T(bp = si;);	// 12314                  mov     bp, si ;~ 01A2:4F21
cs=0x1a2;eip=0x004f23; 	T(dl = 1;);	// 12315                  mov     dl, 1 ;~ 01A2:4F23
cs=0x1a2;eip=0x004f25; 	T(XOR(ch, ch));	// 12316                  xor     ch, ch ;~ 01A2:4F25
cs=0x1a2;eip=0x004f27; 	X(MOV(*(dw*)(raddr(ds,bp+0)), 0));	// 12317                  mov     word ptr ds:[bp+0], 0 ;~ 01A2:4F27
cs=0x1a2;eip=0x004f2d; 	T(ADD(bp, 2));	// 12318                  add     bp, 2 ;~ 01A2:4F2D
cs=0x1a2;eip=0x004f30; 	X(MOV(*(dw*)(raddr(ds,bp+0)), 0));	// 12319                  mov     word ptr ds:[bp+0], 0 ;~ 01A2:4F30
cs=0x1a2;eip=0x004f36; 	T(ADD(bp, 2));	// 12320                  add     bp, 2 ;~ 01A2:4F36
cs=0x1a2;eip=0x004f39; 	T(MOV(al, *(raddr(ds,di))));	// 12321                  mov     al, [di] ;~ 01A2:4F39
cs=0x1a2;eip=0x004f3b; 	T(MOV(ah, *(raddr(ds,di+1))));	// 12322                  mov     ah, [di+1] ;~ 01A2:4F3B
cs=0x1a2;eip=0x004f3e; 	T(MOV(cl, *(raddr(ds,di+4))));	// 12323                  mov     cl, [di+4] ;~ 01A2:4F3E
cs=0x1a2;eip=0x004f41; 	T(di = word_1f730;);	// 12324                  mov     di, ds:word_1F730 ;~ 01A2:4F41
loc_14f45:
	// 5175 
cs=0x1a2;eip=0x004f45; 	T(CMP(byte_1f862, ch));	// 12327                  cmp     ds:byte_1F862, ch ;~ 01A2:4F45
cs=0x1a2;eip=0x004f49; 	J(JZ(loc_14f6a));	// 12328                  jz      short loc_14F6A ;~ 01A2:4F49
cs=0x1a2;eip=0x004f4b; 	T(CMP(*(dw*)(raddr(ds,di)), 0));	// 12329                  cmp     word ptr [di], 0 ;~ 01A2:4F4B
cs=0x1a2;eip=0x004f4e; 	J(JS(loc_14f6a));	// 12330                  js      short loc_14F6A ;~ 01A2:4F4E
cs=0x1a2;eip=0x004f50; 	T(CMP(al, *(raddr(ds,di+2))));	// 12331                  cmp     al, [di+2] ;~ 01A2:4F50
cs=0x1a2;eip=0x004f53; 	J(JC(loc_14f6a));	// 12332                  jb      short loc_14F6A ;~ 01A2:4F53
cs=0x1a2;eip=0x004f55; 	T(CMP(ah, *(raddr(ds,di+3))));	// 12333                  cmp     ah, [di+3] ;~ 01A2:4F55
cs=0x1a2;eip=0x004f58; 	J(JC(loc_14f6a));	// 12334                  jb      short loc_14F6A ;~ 01A2:4F58
cs=0x1a2;eip=0x004f5a; 	T(CMP(cl, *(raddr(ds,di+5))));	// 12335                  cmp     cl, [di+5] ;~ 01A2:4F5A
cs=0x1a2;eip=0x004f5d; 	J(JC(loc_14f6a));	// 12336                  jb      short loc_14F6A ;~ 01A2:4F5D
cs=0x1a2;eip=0x004f5f; 	X(OR(*(raddr(ds,bp+0)), dl));	// 12337                  or      ds:[bp+0], dl ;~ 01A2:4F5F
cs=0x1a2;eip=0x004f63; 	X(ADD(*(dw*)(raddr(ds,si)), 1));	// 12338                  add     word ptr [si], 1 ;~ 01A2:4F63
cs=0x1a2;eip=0x004f66; 	X(ADD(*(dw*)(raddr(ds,si+2)), 1));	// 12339                  add     word ptr [si+2], 1 ;~ 01A2:4F66
loc_14f6a:
	// 5176 
cs=0x1a2;eip=0x004f6a; 	T(ADD(dl, dl));	// 12343                  add     dl, dl ;~ 01A2:4F6A
cs=0x1a2;eip=0x004f6c; 	J(JNZ(loc_14f71));	// 12344                  jnz     short loc_14F71 ;~ 01A2:4F6C
cs=0x1a2;eip=0x004f6e; 	T(INC(bp));	// 12346                  inc     bp ;~ 01A2:4F6E
cs=0x1a2;eip=0x004f6f; 	T(dl = 1;);	// 12347                  mov     dl, 1 ;~ 01A2:4F6F
loc_14f71:
	// 5177 
cs=0x1a2;eip=0x004f71; 	T(INC(ch));	// 12350                  inc     ch ;~ 01A2:4F71
cs=0x1a2;eip=0x004f73; 	T(ADD(di, 0x32));	// 12351                  add     di, 32h ; '2' ;~ 01A2:4F73
cs=0x1a2;eip=0x004f76; 	X(DEC(byte_1f865));	// 12352                  dec     ds:byte_1F865 ;~ 01A2:4F76
cs=0x1a2;eip=0x004f7a; 	J(JNZ(loc_14f45));	// 12353                  jnz     short loc_14F45 ;~ 01A2:4F7A
cs=0x1a2;eip=0x004f7c; 	X(POP(ds));	// 12354                  pop     ds ;~ 01A2:4F7C
cs=0x1a2;eip=0x004f7d; 	X(POP(es));	// 12355                  pop     es ;~ 01A2:4F7D
cs=0x1a2;eip=0x004f7e; 	X(POP(di));	// 12357                  pop     di ;~ 01A2:4F7E
cs=0x1a2;eip=0x004f7f; 	X(POP(si));	// 12358                  pop     si ;~ 01A2:4F7F
cs=0x1a2;eip=0x004f80; 	X(POP(bp));	// 12359                  pop     bp ;~ 01A2:4F80
cs=0x1a2;eip=0x004f81; 	X(POP(dx));	// 12360                  pop     dx ;~ 01A2:4F81
cs=0x1a2;eip=0x004f82; 	X(POP(cx));	// 12361                  pop     cx ;~ 01A2:4F82
cs=0x1a2;eip=0x004f83; 	X(POP(bx));	// 12362                  pop     bx ;~ 01A2:4F83
cs=0x1a2;eip=0x004f84; 	X(POP(ax));	// 12363                  pop     ax ;~ 01A2:4F84
cs=0x1a2;eip=0x004f85; 	J(RETN(0));	// 12364                  retn ;~ 01A2:4F85

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_14f45: 	goto loc_14f45;
        case m2c::kloc_14f6a: 	goto loc_14f6a;
        case m2c::kloc_14f71: 	goto loc_14f71;
        case m2c::ksub_14f08: 	goto sub_14f08;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_14f86(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_14f86:
    _begin:
cs=0x1a2;eip=0x004f86; 	X(PUSH(ax));	// 12373                  push    ax ;~ 01A2:4F86
cs=0x1a2;eip=0x004f87; 	X(PUSH(bx));	// 12374                  push    bx ;~ 01A2:4F87
cs=0x1a2;eip=0x004f88; 	X(PUSH(cx));	// 12375                  push    cx ;~ 01A2:4F88
cs=0x1a2;eip=0x004f89; 	X(PUSH(dx));	// 12376                  push    dx ;~ 01A2:4F89
cs=0x1a2;eip=0x004f8a; 	X(PUSH(bp));	// 12377                  push    bp ;~ 01A2:4F8A
cs=0x1a2;eip=0x004f8b; 	X(PUSH(si));	// 12378                  push    si ;~ 01A2:4F8B
cs=0x1a2;eip=0x004f8c; 	X(PUSH(di));	// 12379                  push    di ;~ 01A2:4F8C
cs=0x1a2;eip=0x004f8d; 	X(PUSH(es));	// 12380                  push    es ;~ 01A2:4F8D
cs=0x1a2;eip=0x004f8e; 	X(PUSH(ds));	// 12381                  push    ds ;~ 01A2:4F8E
cs=0x1a2;eip=0x004f8f; 	T(XOR(ah, ah));	// 12382                  xor     ah, ah ;~ 01A2:4F8F
cs=0x1a2;eip=0x004f91; 	T(al = byte_1f76a;);	// 12383                  mov     al, ds:byte_1F76A ;~ 01A2:4F91
cs=0x1a2;eip=0x004f94; 	T(MUL1_2(bp));	// 12384                  mul     bp ;~ 01A2:4F94
cs=0x1a2;eip=0x004f96; 	T(bx = ax;);	// 12385                  mov     bx, ax ;~ 01A2:4F96
cs=0x1a2;eip=0x004f98; 	T(ax = word_1f72e;);	// 12386                  mov     ax, ds:word_1F72E ;~ 01A2:4F98
cs=0x1a2;eip=0x004f9b; 	T(ADD(bx, word_1f72a));	// 12387                  add     bx, ds:word_1F72A ;~ 01A2:4F9B
cs=0x1a2;eip=0x004f9f; 	T(SHL(bx, 1));	// 12388                  shl     bx, 1 ;~ 01A2:4F9F
cs=0x1a2;eip=0x004fa1; 	X(PUSH(si));	// 12389                  push    si ;~ 01A2:4FA1
cs=0x1a2;eip=0x004fa2; 	T(si = 0x8DC;);	// 12390                  mov     si, 8DCh ;~ 01A2:4FA2
cs=0x1a2;eip=0x004fa5; 	T(MOV(si, *(dw*)(raddr(ds,bx+si))));	// 12391                  mov     si, [bx+si] ;~ 01A2:4FA5
cs=0x1a2;eip=0x004fa7; 	X(POP(bp));	// 12392                  pop     bp ;~ 01A2:4FA7
cs=0x1a2;eip=0x004fa8; 	T(bx = 0x0F9CA;);	// 12393                  mov     bx, 0F9CAh ;~ 01A2:4FA8
cs=0x1a2;eip=0x004fab; 	T(ADD(si, *(dw*)(raddr(ds,bx))));	// 12394                  add     si, [bx] ;~ 01A2:4FAB
cs=0x1a2;eip=0x004fad; 	T(MOV(cx, *(dw*)(raddr(ds,bx+2))));	// 12395                  mov     cx, [bx+2] ;~ 01A2:4FAD
cs=0x1a2;eip=0x004fb0; 	T(SHL(ax, 1));	// 12396                  shl     ax, 1 ;~ 01A2:4FB0
cs=0x1a2;eip=0x004fb2; 	T(SHL(ax, 1));	// 12397                  shl     ax, 1 ;~ 01A2:4FB2
cs=0x1a2;eip=0x004fb4; 	T(SHL(ax, 1));	// 12398                  shl     ax, 1 ;~ 01A2:4FB4
cs=0x1a2;eip=0x004fb6; 	T(SHL(ax, 1));	// 12399                  shl     ax, 1 ;~ 01A2:4FB6
cs=0x1a2;eip=0x004fb8; 	T(SUB(ax, *(dw*)(raddr(es,di+2))));	// 12400                  sub     ax, es:[di+2] ;~ 01A2:4FB8
cs=0x1a2;eip=0x004fbc; 	T(ADD(ax, *(dw*)(raddr(es,di+0x10))));	// 12401                  add     ax, es:[di+10h] ;~ 01A2:4FBC
cs=0x1a2;eip=0x004fc0; 	T(ADD(ax, *(dw*)(raddr(es,di+0x12))));	// 12402                  add     ax, es:[di+12h] ;~ 01A2:4FC0
cs=0x1a2;eip=0x004fc4; 	T(ADD(ax, *(dw*)(raddr(es,di+0x14))));	// 12403                  add     ax, es:[di+14h] ;~ 01A2:4FC4
cs=0x1a2;eip=0x004fc8; 	T(SHL(ax, 1));	// 12404                  shl     ax, 1 ;~ 01A2:4FC8
cs=0x1a2;eip=0x004fca; 	T(SHL(ax, 1));	// 12405                  shl     ax, 1 ;~ 01A2:4FCA
cs=0x1a2;eip=0x004fcc; 	T(SHL(ax, 1));	// 12406                  shl     ax, 1 ;~ 01A2:4FCC
cs=0x1a2;eip=0x004fce; 	T(dx = ax;);	// 12407                  mov     dx, ax ;~ 01A2:4FCE
cs=0x1a2;eip=0x004fd0; 	T(SHL(ax, 1));	// 12408                  shl     ax, 1 ;~ 01A2:4FD0
cs=0x1a2;eip=0x004fd2; 	T(SHL(ax, 1));	// 12409                  shl     ax, 1 ;~ 01A2:4FD2
cs=0x1a2;eip=0x004fd4; 	T(ADD(ax, dx));	// 12410                  add     ax, dx ;~ 01A2:4FD4
cs=0x1a2;eip=0x004fd6; 	T(SUB(si, ax));	// 12411                  sub     si, ax ;~ 01A2:4FD6
cs=0x1a2;eip=0x004fd8; 	T(MOV(ax, *(dw*)(raddr(es,di+4))));	// 12412                  mov     ax, es:[di+4] ;~ 01A2:4FD8
cs=0x1a2;eip=0x004fdc; 	T(DEC(ax));	// 12413                  dec     ax ;~ 01A2:4FDC
cs=0x1a2;eip=0x004fdd; 	T(SHL(ax, 1));	// 12414                  shl     ax, 1 ;~ 01A2:4FDD
cs=0x1a2;eip=0x004fdf; 	T(SUB(si, ax));	// 12415                  sub     si, ax ;~ 01A2:4FDF
cs=0x1a2;eip=0x004fe1; 	T(MOV(ax, *(dw*)(raddr(es,di+0x10))));	// 12416                  mov     ax, es:[di+10h] ;~ 01A2:4FE1
cs=0x1a2;eip=0x004fe5; 	T(AND(ax, 7));	// 12417                  and     ax, 7 ;~ 01A2:4FE5
cs=0x1a2;eip=0x004fe8; 	J(JZ(loc_14ffe));	// 12418                  jz      short loc_14FFE ;~ 01A2:4FE8
cs=0x1a2;eip=0x004fea; 	T(bx = 8;);	// 12419                  mov     bx, 8 ;~ 01A2:4FEA
cs=0x1a2;eip=0x004fed; 	T(SUB(bx, ax));	// 12420                  sub     bx, ax ;~ 01A2:4FED
cs=0x1a2;eip=0x004fef; 	T(SHL(bx, 1));	// 12421                  shl     bx, 1 ;~ 01A2:4FEF
cs=0x1a2;eip=0x004ff1; 	T(ADD(cx, bx));	// 12422                  add     cx, bx ;~ 01A2:4FF1
cs=0x1a2;eip=0x004ff3; 	T(CMP(cx, 0x10));	// 12423                  cmp     cx, 10h ;~ 01A2:4FF3
cs=0x1a2;eip=0x004ff6; 	J(JC(loc_14ffe));	// 12424                  jb      short loc_14FFE ;~ 01A2:4FF6
cs=0x1a2;eip=0x004ff8; 	T(AND(cx, 0x0F));	// 12425                  and     cx, 0Fh ;~ 01A2:4FF8
cs=0x1a2;eip=0x004ffb; 	T(ADD(si, 2));	// 12426                  add     si, 2 ;~ 01A2:4FFB
loc_14ffe:
	// 5178 
cs=0x1a2;eip=0x004ffe; 	T(MOV(bx, *(dw*)(raddr(ss,bp+0x0C))));	// 12430                  mov     bx, [bp+0Ch] ;~ 01A2:4FFE
cs=0x1a2;eip=0x005001; 	T(MOV(dl, *(raddr(ss,bp+2))));	// 12431                  mov     dl, [bp+2] ;~ 01A2:5001
cs=0x1a2;eip=0x005004; 	T(MOV(dh, *(raddr(ss,bp+3))));	// 12432                  mov     dh, [bp+3] ;~ 01A2:5004
cs=0x1a2;eip=0x005007; 	X(MOV(*(dw*)(raddr(ss,bp+0x0E)), 0));	// 12433                  mov     word ptr [bp+0Eh], 0 ;~ 01A2:5007
cs=0x1a2;eip=0x00500c; 	T(OR(si, si));	// 12434                  or      si, si ;~ 01A2:500C
cs=0x1a2;eip=0x00500e; 	J(JNS(loc_15034));	// 12435                  jns     short loc_15034 ;~ 01A2:500E
cs=0x1a2;eip=0x005010; 	T(NEG(si));	// 12437                  neg     si ;~ 01A2:5010
cs=0x1a2;eip=0x005012; 	T(ax = si;);	// 12438                  mov     ax, si ;~ 01A2:5012
cs=0x1a2;eip=0x005014; 	X(PUSH(dx));	// 12439                  push    dx ;~ 01A2:5014
cs=0x1a2;eip=0x005015; 	T(dl = 0x28;);	// 12440                  mov     dl, 28h ; '(' ;~ 01A2:5015
cs=0x1a2;eip=0x005017; 	T(DIV1(dl));	// 12441                  div     dl ;~ 01A2:5017
cs=0x1a2;eip=0x005019; 	X(POP(dx));	// 12442                  pop     dx ;~ 01A2:5019
cs=0x1a2;eip=0x00501a; 	T(INC(al));	// 12443                  inc     al ;~ 01A2:501A
cs=0x1a2;eip=0x00501c; 	T(SUB(dh, al));	// 12444                  sub     dh, al ;~ 01A2:501C
cs=0x1a2;eip=0x00501e; 	J(JLE(loc_15089));	// 12445                  jle     short loc_15089 ;~ 01A2:501E
cs=0x1a2;eip=0x005020; 	X(PUSH(ax));	// 12446                  push    ax ;~ 01A2:5020
cs=0x1a2;eip=0x005021; 	T(MUL1_1(dl));	// 12447                  mul     dl ;~ 01A2:5021
cs=0x1a2;eip=0x005023; 	T(SHL(ax, 1));	// 12448                  shl     ax, 1 ;~ 01A2:5023
cs=0x1a2;eip=0x005025; 	X(MOV(*(dw*)(raddr(ss,bp+0x0E)), ax));	// 12449                  mov     [bp+0Eh], ax ;~ 01A2:5025
cs=0x1a2;eip=0x005028; 	T(ADD(bx, ax));	// 12450                  add     bx, ax ;~ 01A2:5028
cs=0x1a2;eip=0x00502a; 	X(POP(ax));	// 12451                  pop     ax ;~ 01A2:502A
cs=0x1a2;eip=0x00502b; 	T(al = ah;);	// 12452                  mov     al, ah ;~ 01A2:502B
cs=0x1a2;eip=0x00502d; 	T(XOR(ah, ah));	// 12453                  xor     ah, ah ;~ 01A2:502D
cs=0x1a2;eip=0x00502f; 	T(si = 0x28;);	// 12454                  mov     si, 28h ; '(' ;~ 01A2:502F
cs=0x1a2;eip=0x005032; 	T(SUB(si, ax));	// 12455                  sub     si, ax ;~ 01A2:5032
loc_15034:
	// 5179 
cs=0x1a2;eip=0x005034; 	X(MOV(*(raddr(ss,bp+3)), dh));	// 12458                  mov     [bp+3], dh ;~ 01A2:5034
cs=0x1a2;eip=0x005037; 	X(MOV(*(raddr(ss,bp+2)), dl));	// 12459                  mov     [bp+2], dl ;~ 01A2:5037
cs=0x1a2;eip=0x00503a; 	X(MOV(*(dw*)(raddr(ss,bp+0x0C)), bx));	// 12460                  mov     [bp+0Ch], bx ;~ 01A2:503A
cs=0x1a2;eip=0x00503d; 	X(MOV(*(dw*)(raddr(ss,bp+8)), si));	// 12461                  mov     [bp+8], si ;~ 01A2:503D
cs=0x1a2;eip=0x005040; 	T(XOR(ax, ax));	// 12462                  xor     ax, ax ;~ 01A2:5040
cs=0x1a2;eip=0x005042; 	X(MOV(*(raddr(ss,bp+0)), al));	// 12463                  mov     [bp+0], al ;~ 01A2:5042
cs=0x1a2;eip=0x005045; 	T(OR(si, si));	// 12464                  or      si, si ;~ 01A2:5045
cs=0x1a2;eip=0x005047; 	J(JZ(loc_1504f));	// 12465                  jz      short loc_1504F ;~ 01A2:5047
cs=0x1a2;eip=0x005049; 	T(ax = si;);	// 12466                  mov     ax, si ;~ 01A2:5049
cs=0x1a2;eip=0x00504b; 	T(bl = 0x28;);	// 12467                  mov     bl, 28h ; '(' ;~ 01A2:504B
cs=0x1a2;eip=0x00504d; 	T(IDIV1(bl));	// 12468                  idiv    bl ;~ 01A2:504D
loc_1504f:
	// 5180 
cs=0x1a2;eip=0x00504f; 	X(MOV(*(raddr(ss,bp+0)), al));	// 12471                  mov     [bp+0], al ;~ 01A2:504F
cs=0x1a2;eip=0x005052; 	T(ADD(al, dh));	// 12472                  add     al, dh ;~ 01A2:5052
cs=0x1a2;eip=0x005054; 	X(MOV(*(raddr(ss,bp+1)), al));	// 12473                  mov     [bp+1], al ;~ 01A2:5054
cs=0x1a2;eip=0x005057; 	T(al = ah;);	// 12474                  mov     al, ah ;~ 01A2:5057
cs=0x1a2;eip=0x005059; 	T(XOR(ah, ah));	// 12475                  xor     ah, ah ;~ 01A2:5059
cs=0x1a2;eip=0x00505b; 	T(SHL(ax, 1));	// 12476                  shl     ax, 1 ;~ 01A2:505B
cs=0x1a2;eip=0x00505d; 	T(SHL(ax, 1));	// 12477                  shl     ax, 1 ;~ 01A2:505D
cs=0x1a2;eip=0x00505f; 	T(ADD(al, cl));	// 12478                  add     al, cl ;~ 01A2:505F
cs=0x1a2;eip=0x005061; 	T(ADC(ah, 0));	// 12479                  adc     ah, 0 ;~ 01A2:5061
cs=0x1a2;eip=0x005064; 	X(MOV(*(dw*)(raddr(ss,bp+4)), ax));	// 12480                  mov     [bp+4], ax ;~ 01A2:5064
cs=0x1a2;eip=0x005067; 	T(SHL(dl, 1));	// 12481                  shl     dl, 1 ;~ 01A2:5067
cs=0x1a2;eip=0x005069; 	T(SHL(dl, 1));	// 12482                  shl     dl, 1 ;~ 01A2:5069
cs=0x1a2;eip=0x00506b; 	T(SHL(dl, 1));	// 12483                  shl     dl, 1 ;~ 01A2:506B
cs=0x1a2;eip=0x00506d; 	T(SHL(dl, 1));	// 12484                  shl     dl, 1 ;~ 01A2:506D
cs=0x1a2;eip=0x00506f; 	T(ADD(al, dl));	// 12485                  add     al, dl ;~ 01A2:506F
cs=0x1a2;eip=0x005071; 	T(ADC(ah, 0));	// 12486                  adc     ah, 0 ;~ 01A2:5071
cs=0x1a2;eip=0x005074; 	X(MOV(*(dw*)(raddr(ss,bp+6)), ax));	// 12487                  mov     [bp+6], ax ;~ 01A2:5074
cs=0x1a2;eip=0x005077; 	T(ADD(bp, 0x10));	// 12488                  add     bp, 10h ;~ 01A2:5077
cs=0x1a2;eip=0x00507a; 	X(MOV(*(dw*)(raddr(ss,bp+0x0C)), 0x0FFFF));	// 12489                  mov     word ptr [bp+0Ch], 0FFFFh ;~ 01A2:507A
cs=0x1a2;eip=0x00507f; 	X(POP(ds));	// 12490                  pop     ds ;~ 01A2:507F
cs=0x1a2;eip=0x005080; 	X(POP(es));	// 12491                  pop     es ;~ 01A2:5080
cs=0x1a2;eip=0x005081; 	X(POP(di));	// 12493                  pop     di ;~ 01A2:5081
cs=0x1a2;eip=0x005082; 	X(POP(si));	// 12494                  pop     si ;~ 01A2:5082
cs=0x1a2;eip=0x005083; 	X(POP(bp));	// 12495                  pop     bp ;~ 01A2:5083
cs=0x1a2;eip=0x005084; 	X(POP(dx));	// 12496                  pop     dx ;~ 01A2:5084
cs=0x1a2;eip=0x005085; 	X(POP(cx));	// 12497                  pop     cx ;~ 01A2:5085
cs=0x1a2;eip=0x005086; 	X(POP(bx));	// 12498                  pop     bx ;~ 01A2:5086
cs=0x1a2;eip=0x005087; 	X(POP(ax));	// 12499                  pop     ax ;~ 01A2:5087
cs=0x1a2;eip=0x005088; 	J(RETN(0));	// 12500                  retn ;~ 01A2:5088
loc_15089:
	// 5181 
cs=0x1a2;eip=0x005089; 	X(MOV(*(dw*)(raddr(ss,bp+8)), 0x0FFFF));	// 12505                  mov     word ptr [bp+8], 0FFFFh ;~ 01A2:5089
cs=0x1a2;eip=0x00508e; 	X(POP(ds));	// 12506                  pop     ds ;~ 01A2:508E
cs=0x1a2;eip=0x00508f; 	X(POP(es));	// 12507                  pop     es ;~ 01A2:508F
cs=0x1a2;eip=0x005090; 	X(POP(di));	// 12508                  pop     di ;~ 01A2:5090
cs=0x1a2;eip=0x005091; 	X(POP(si));	// 12509                  pop     si ;~ 01A2:5091
cs=0x1a2;eip=0x005092; 	X(POP(bp));	// 12510                  pop     bp ;~ 01A2:5092
cs=0x1a2;eip=0x005093; 	X(POP(dx));	// 12511                  pop     dx ;~ 01A2:5093
cs=0x1a2;eip=0x005094; 	X(POP(cx));	// 12512                  pop     cx ;~ 01A2:5094
cs=0x1a2;eip=0x005095; 	X(POP(bx));	// 12513                  pop     bx ;~ 01A2:5095
cs=0x1a2;eip=0x005096; 	X(POP(ax));	// 12514                  pop     ax ;~ 01A2:5096
cs=0x1a2;eip=0x005097; 	J(RETN(0));	// 12515                  retn ;~ 01A2:5097

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_14ffe: 	goto loc_14ffe;
        case m2c::kloc_15034: 	goto loc_15034;
        case m2c::kloc_1504f: 	goto loc_1504f;
        case m2c::kloc_15089: 	goto loc_15089;
        case m2c::ksub_14f86: 	goto sub_14f86;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_15098(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_15098:
    _begin:
cs=0x1a2;eip=0x005098; 	T(ax = ds;);	// 12523                  mov     ax, ds ;~ 01A2:5098
cs=0x1a2;eip=0x00509a; 	T(es = ax;);	// 12524                  mov     es, ax ;~ 01A2:509A
cs=0x1a2;eip=0x00509c; 	T(di = word_1f1a8;);	// 12525                  mov     di, word_1F1A8 ;~ 01A2:509C
cs=0x1a2;eip=0x0050a0; 	T(cx = 0x79;);	// 12526                  mov     cx, 79h ; 'y' ;~ 01A2:50A0
cs=0x1a2;eip=0x0050a3; 	T(XOR(al, al));	// 12527                  xor     al, al ;~ 01A2:50A3
	// 12528                  rep stosb ;~ 01A2:50A5
cs=0x1a2;eip=0x0050a5; 	X(	REP STOSB);	// 12528                  rep stosb ;~ 01A2:50A5
cs=0x1a2;eip=0x0050a7; 	J(CALL(sub_139ea,0));	// 12529                  call    sub_139EA ;~ 01A2:50A7
cs=0x1a2;eip=0x0050aa; 	T(si = di;);	// 12530                  mov     si, di ;~ 01A2:50AA
cs=0x1a2;eip=0x0050ac; 	T(di = word_1f1ce;);	// 12531                  mov     di, word_1F1CE ;~ 01A2:50AC
cs=0x1a2;eip=0x0050b0; 	T(XOR(dh, dh));	// 12532                  xor     dh, dh ;~ 01A2:50B0
cs=0x1a2;eip=0x0050b2; 	T(MOV(dl, *(raddr(ds,di+4))));	// 12533                  mov     dl, [di+4] ;~ 01A2:50B2
cs=0x1a2;eip=0x0050b5; 	T(MOV(ah, *(raddr(ds,di+5))));	// 12534                  mov     ah, [di+5] ;~ 01A2:50B5
cs=0x1a2;eip=0x0050b8; 	T(bp = di;);	// 12535                  mov     bp, di ;~ 01A2:50B8
cs=0x1a2;eip=0x0050ba; 	T(di = word_1f1a8;);	// 12536                  mov     di, word_1F1A8 ;~ 01A2:50BA
loc_150be:
	// 5182 
cs=0x1a2;eip=0x0050be; 	T(cx = dx;);	// 12539                  mov     cx, dx ;~ 01A2:50BE
loc_150c0:
	// 5183 
cs=0x1a2;eip=0x0050c0; 	T(TEST(*(raddr(ds,bp+0x17)), 4));	// 12542                  test    byte ptr ds:[bp+17h], 4 ;~ 01A2:50C0
cs=0x1a2;eip=0x0050c5; 	J(JNZ(loc_150cc));	// 12543                  jnz     short loc_150CC ;~ 01A2:50C5
cs=0x1a2;eip=0x0050c7; 	T(MOV(al, *(raddr(ss,si))));	// 12544                  mov     al, ss:[si] ;~ 01A2:50C7
cs=0x1a2;eip=0x0050ca; 	J(JMP(loc_150ce));	// 12545                  jmp     short loc_150CE ;~ 01A2:50CA
loc_150cc:
	// 5184 
cs=0x1a2;eip=0x0050cc; 	X(LODS(*(raddr(ss,si)),si,1));	// 12549                  lods    byte ptr ss:[si] ;~ 01A2:50CC
loc_150ce:
	// 5185 
cs=0x1a2;eip=0x0050ce; 	X(STOSB);	// 12552                  stosb ;~ 01A2:50CE
cs=0x1a2;eip=0x0050cf; 	J(LOOP(loc_150c0));	// 12553                  loop    loc_150C0 ;~ 01A2:50CF
cs=0x1a2;eip=0x0050d1; 	T(INC(di));	// 12554                  inc     di ;~ 01A2:50D1
cs=0x1a2;eip=0x0050d2; 	T(DEC(ah));	// 12555                  dec     ah ;~ 01A2:50D2
cs=0x1a2;eip=0x0050d4; 	J(JNZ(loc_150be));	// 12556                  jnz     short loc_150BE ;~ 01A2:50D4
cs=0x1a2;eip=0x0050d6; 	J(RETN(0));	// 12557                  retn ;~ 01A2:50D6

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_150be: 	goto loc_150be;
        case m2c::kloc_150c0: 	goto loc_150c0;
        case m2c::kloc_150cc: 	goto loc_150cc;
        case m2c::kloc_150ce: 	goto loc_150ce;
        case m2c::ksub_15098: 	goto sub_15098;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_150d7(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_150d7:
    _begin:
cs=0x1a2;eip=0x0050d7; 	X(PUSH(ax));	// 12566                  push    ax ;~ 01A2:50D7
cs=0x1a2;eip=0x0050d8; 	X(PUSH(bx));	// 12567                  push    bx ;~ 01A2:50D8
cs=0x1a2;eip=0x0050d9; 	X(PUSH(cx));	// 12568                  push    cx ;~ 01A2:50D9
cs=0x1a2;eip=0x0050da; 	X(PUSH(dx));	// 12569                  push    dx ;~ 01A2:50DA
cs=0x1a2;eip=0x0050db; 	X(PUSH(bp));	// 12570                  push    bp ;~ 01A2:50DB
cs=0x1a2;eip=0x0050dc; 	X(PUSH(si));	// 12571                  push    si ;~ 01A2:50DC
cs=0x1a2;eip=0x0050dd; 	X(PUSH(di));	// 12572                  push    di ;~ 01A2:50DD
cs=0x1a2;eip=0x0050de; 	X(PUSH(es));	// 12573                  push    es ;~ 01A2:50DE
cs=0x1a2;eip=0x0050df; 	X(PUSH(ds));	// 12574                  push    ds ;~ 01A2:50DF
cs=0x1a2;eip=0x0050e0; 	T(cx = word_1f394;);	// 12575                  mov     cx, ds:word_1F394 ;~ 01A2:50E0
cs=0x1a2;eip=0x0050e4; 	T(si = word_1f19a;);	// 12576                  mov     si, word_1F19A ;~ 01A2:50E4
loc_150e8:
	// 5186 
cs=0x1a2;eip=0x0050e8; 	T(CMP(*(dw*)(raddr(ds,si)), 0));	// 12579                  cmp     word ptr [si], 0 ;~ 01A2:50E8
cs=0x1a2;eip=0x0050eb; 	J(JS(loc_150f9));	// 12580                  js      short loc_150F9 ;~ 01A2:50EB
cs=0x1a2;eip=0x0050ed; 	T(MOV(dx, *(dw*)(raddr(ds,si+0x2E))));	// 12581                  mov     dx, [si+2Eh] ;~ 01A2:50ED
cs=0x1a2;eip=0x0050f0; 	T(ax = 6;);	// 12582                  mov     ax, 6 ;~ 01A2:50F0
cs=0x1a2;eip=0x0050f3; 	J(CALL(sub_1410e,0));	// 12583                  call    sub_1410E ;~ 01A2:50F3
cs=0x1a2;eip=0x0050f6; 	X(MOV(*(dw*)(raddr(ds,si+0x0A)), di));	// 12584                  mov     [si+0Ah], di ;~ 01A2:50F6
loc_150f9:
	// 5187 
cs=0x1a2;eip=0x0050f9; 	T(ADD(si, 0x32));	// 12587                  add     si, 32h ; '2' ;~ 01A2:50F9
cs=0x1a2;eip=0x0050fc; 	J(LOOP(loc_150e8));	// 12588                  loop    loc_150E8 ;~ 01A2:50FC
cs=0x1a2;eip=0x0050fe; 	X(POP(ds));	// 12589                  pop     ds ;~ 01A2:50FE
cs=0x1a2;eip=0x0050ff; 	X(POP(es));	// 12590                  pop     es ;~ 01A2:50FF
cs=0x1a2;eip=0x005100; 	X(POP(di));	// 12592                  pop     di ;~ 01A2:5100
cs=0x1a2;eip=0x005101; 	X(POP(si));	// 12593                  pop     si ;~ 01A2:5101
cs=0x1a2;eip=0x005102; 	X(POP(bp));	// 12594                  pop     bp ;~ 01A2:5102
cs=0x1a2;eip=0x005103; 	X(POP(dx));	// 12595                  pop     dx ;~ 01A2:5103
cs=0x1a2;eip=0x005104; 	X(POP(cx));	// 12596                  pop     cx ;~ 01A2:5104
cs=0x1a2;eip=0x005105; 	X(POP(bx));	// 12597                  pop     bx ;~ 01A2:5105
cs=0x1a2;eip=0x005106; 	X(POP(ax));	// 12598                  pop     ax ;~ 01A2:5106
cs=0x1a2;eip=0x005107; 	J(RETN(0));	// 12599                  retn ;~ 01A2:5107

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_150e8: 	goto loc_150e8;
        case m2c::kloc_150f9: 	goto loc_150f9;
        case m2c::ksub_150d7: 	goto sub_150d7;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group16(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group16:
    _begin:
sub_15108:
	// 12606 
cs=0x1a2;eip=0x005108; 	X(PUSH(ax));	// 12608                  push    ax ;~ 01A2:5108
cs=0x1a2;eip=0x005109; 	T(MOV(al, *(raddr(ds,di+0x0A))));	// 12609                  mov     al, [di+0Ah] ;~ 01A2:5109
cs=0x1a2;eip=0x00510c; 	T(CMP(al, *(db*)(&word_1f3a2)));	// 12610                  cmp     al, byte ptr ds:word_1F3A2 ;~ 01A2:510C
cs=0x1a2;eip=0x005110; 	X(POP(ax));	// 12611                  pop     ax ;~ 01A2:5110
cs=0x1a2;eip=0x005111; 	J(JZ(sub_15114));	// 12612                  jz      short sub_15114 ;~ 01A2:5111
cs=0x1a2;eip=0x005113; 	J(RETN(0));	// 12614                  retn ;~ 01A2:5113
sub_15114:
	// 12621 
cs=0x1a2;eip=0x005114; 	X(PUSH(ax));	// 12623                  push    ax ;~ 01A2:5114
cs=0x1a2;eip=0x005115; 	X(PUSH(bx));	// 12624                  push    bx ;~ 01A2:5115
cs=0x1a2;eip=0x005116; 	X(PUSH(cx));	// 12625                  push    cx ;~ 01A2:5116
cs=0x1a2;eip=0x005117; 	X(PUSH(dx));	// 12626                  push    dx ;~ 01A2:5117
cs=0x1a2;eip=0x005118; 	X(PUSH(bp));	// 12627                  push    bp ;~ 01A2:5118
cs=0x1a2;eip=0x005119; 	X(PUSH(si));	// 12628                  push    si ;~ 01A2:5119
cs=0x1a2;eip=0x00511a; 	X(PUSH(di));	// 12629                  push    di ;~ 01A2:511A
cs=0x1a2;eip=0x00511b; 	X(PUSH(es));	// 12630                  push    es ;~ 01A2:511B
cs=0x1a2;eip=0x00511c; 	X(PUSH(ds));	// 12631                  push    ds ;~ 01A2:511C
cs=0x1a2;eip=0x00511d; 	T(MOV(si, *(dw*)(raddr(ds,di+8))));	// 12632                  mov     si, [di+8] ;~ 01A2:511D
cs=0x1a2;eip=0x005120; 	X(PUSH(si));	// 12633                  push    si ;~ 01A2:5120
cs=0x1a2;eip=0x005121; 	J(CALL(sub_1577a,0));	// 12634                  call    sub_1577A ;~ 01A2:5121
cs=0x1a2;eip=0x005124; 	X(POP(si));	// 12635                  pop     si ;~ 01A2:5124
cs=0x1a2;eip=0x005125; 	X(PUSH(si));	// 12636                  push    si ;~ 01A2:5125
cs=0x1a2;eip=0x005126; 	J(CALL(sub_1572b,0));	// 12637                  call    sub_1572B ;~ 01A2:5126
cs=0x1a2;eip=0x005129; 	X(POP(si));	// 12638                  pop     si ;~ 01A2:5129
cs=0x1a2;eip=0x00512a; 	T(XOR(ax, ax));	// 12639                  xor     ax, ax ;~ 01A2:512A
cs=0x1a2;eip=0x00512c; 	X(MOV(*(dw*)(raddr(ds,si+0x1A)), ax));	// 12640                  mov     [si+1Ah], ax ;~ 01A2:512C
cs=0x1a2;eip=0x00512f; 	X(MOV(*(dw*)(raddr(ds,si+0x18)), ax));	// 12641                  mov     [si+18h], ax ;~ 01A2:512F
cs=0x1a2;eip=0x005132; 	T(DEC(ax));	// 12642                  dec     ax ;~ 01A2:5132
cs=0x1a2;eip=0x005133; 	X(MOV(*(dw*)(raddr(ds,si)), ax));	// 12643                  mov     [si], ax ;~ 01A2:5133
cs=0x1a2;eip=0x005135; 	T(MOV(al, *(raddr(ds,si+0x22))));	// 12644                  mov     al, [si+22h] ;~ 01A2:5135
cs=0x1a2;eip=0x005138; 	T(CMP(al, 0x0FF));	// 12645                  cmp     al, 0FFh ;~ 01A2:5138
cs=0x1a2;eip=0x00513a; 	J(JZ(loc_1513f));	// 12646                  jz      short loc_1513F ;~ 01A2:513A
cs=0x1a2;eip=0x00513c; 	J(CALL(sub_11613,0));	// 12648                  call    sub_11613 ;~ 01A2:513C
loc_1513f:
	// 5188 
cs=0x1a2;eip=0x00513f; 	T(MOV(dx, *(dw*)(raddr(ds,si+0x16))));	// 12651                  mov     dx, [si+16h] ;~ 01A2:513F
cs=0x1a2;eip=0x005142; 	T(MOV(cl, *(raddr(ds,si+0x15))));	// 12652                  mov     cl, [si+15h] ;~ 01A2:5142
cs=0x1a2;eip=0x005145; 	T(bp = cx;);	// 12653                  mov     bp, cx ;~ 01A2:5145
cs=0x1a2;eip=0x005147; 	T(AND(bp, 0x78));	// 12654                  and     bp, 78h ;~ 01A2:5147
cs=0x1a2;eip=0x00514a; 	T(bl = 1;);	// 12655                  mov     bl, 1 ;~ 01A2:514A
cs=0x1a2;eip=0x00514c; 	T(AND(cl, 7));	// 12656                  and     cl, 7 ;~ 01A2:514C
cs=0x1a2;eip=0x00514f; 	J(JZ(loc_15153));	// 12657                  jz      short loc_15153 ;~ 01A2:514F
cs=0x1a2;eip=0x005151; 	T(ROL(bl, cl));	// 12658                  rol     bl, cl ;~ 01A2:5151
loc_15153:
	// 5189 
cs=0x1a2;eip=0x005153; 	T(bh = bl;);	// 12661                  mov     bh, bl ;~ 01A2:5153
cs=0x1a2;eip=0x005155; 	T(NOT(bh));	// 12662                  not     bh ;~ 01A2:5155
cs=0x1a2;eip=0x005157; 	T(TEST(*(raddr(ds,si+0x27)), 1));	// 12663                  test    byte ptr [si+27h], 1 ;~ 01A2:5157
cs=0x1a2;eip=0x00515b; 	J(JNZ(loc_15163));	// 12664                  jnz     short loc_15163 ;~ 01A2:515B
cs=0x1a2;eip=0x00515d; 	X(DEC(word_1f392));	// 12665                  dec     ds:word_1F392 ;~ 01A2:515D
cs=0x1a2;eip=0x005161; 	J(JMP(loc_15167));	// 12666                  jmp     short loc_15167 ;~ 01A2:5161
loc_15163:
	// 5190 
cs=0x1a2;eip=0x005163; 	X(DEC(word_1f390));	// 12670                  dec     ds:word_1F390 ;~ 01A2:5163
loc_15167:
	// 5191 
cs=0x1a2;eip=0x005167; 	X(MOV(*(dw*)(raddr(ds,si)), 0x0FFFF));	// 12673                  mov     word ptr [si], 0FFFFh ;~ 01A2:5167
cs=0x1a2;eip=0x00516b; 	T(SHR(bp, 1));	// 12674                  shr     bp, 1 ;~ 01A2:516B
cs=0x1a2;eip=0x00516d; 	T(SHR(bp, 1));	// 12675                  shr     bp, 1 ;~ 01A2:516D
cs=0x1a2;eip=0x00516f; 	T(SHR(bp, 1));	// 12676                  shr     bp, 1 ;~ 01A2:516F
cs=0x1a2;eip=0x005171; 	T(si = word_1f1a0;);	// 12677                  mov     si, word_1F1A0 ;~ 01A2:5171
cs=0x1a2;eip=0x005175; 	T(ADD(si, dx));	// 12678                  add     si, dx ;~ 01A2:5175
cs=0x1a2;eip=0x005177; 	X(MOV(*(dw*)(raddr(ds,si+2)), 0x0FFFF));	// 12679                  mov     word ptr [si+2], 0FFFFh ;~ 01A2:5177
cs=0x1a2;eip=0x00517c; 	T(SUB(si, dx));	// 12680                  sub     si, dx ;~ 01A2:517C
cs=0x1a2;eip=0x00517e; 	T(cx = 0x60;);	// 12681                  mov     cx, 60h ; '`' ;~ 01A2:517E
cs=0x1a2;eip=0x005181; 	T(di = si;);	// 12682                  mov     di, si ;~ 01A2:5181
cs=0x1a2;eip=0x005183; 	T(ADD(di, bp));	// 12683                  add     di, bp ;~ 01A2:5183
cs=0x1a2;eip=0x005185; 	T(ADD(di, 4));	// 12684                  add     di, 4 ;~ 01A2:5185
cs=0x1a2;eip=0x005188; 	T(ADD(si, 2));	// 12685                  add     si, 2 ;~ 01A2:5188
cs=0x1a2;eip=0x00518b; 	T(bp = 0x10;);	// 12686                  mov     bp, 10h ;~ 01A2:518B
cs=0x1a2;eip=0x00518e; 	T(XOR(dx, dx));	// 12687                  xor     dx, dx ;~ 01A2:518E
loc_15190:
	// 5192 
cs=0x1a2;eip=0x005190; 	T(CMP(*(dw*)(raddr(ds,si)), dx));	// 12690                  cmp     [si], dx ;~ 01A2:5190
cs=0x1a2;eip=0x005192; 	J(JS(loc_151a0));	// 12691                  js      short loc_151A0 ;~ 01A2:5192
cs=0x1a2;eip=0x005194; 	T(MOV(al, *(raddr(ds,di))));	// 12692                  mov     al, [di] ;~ 01A2:5194
cs=0x1a2;eip=0x005196; 	T(TEST(al, bl));	// 12693                  test    al, bl ;~ 01A2:5196
cs=0x1a2;eip=0x005198; 	J(JZ(loc_1519c));	// 12694                  jz      short loc_1519C ;~ 01A2:5198
cs=0x1a2;eip=0x00519a; 	X(DEC(*(dw*)(raddr(ds,si))));	// 12695                  dec     word ptr [si] ;~ 01A2:519A
loc_1519c:
	// 5193 
cs=0x1a2;eip=0x00519c; 	T(AND(al, bh));	// 12698                  and     al, bh ;~ 01A2:519C
cs=0x1a2;eip=0x00519e; 	X(MOV(*(raddr(ds,di)), al));	// 12699                  mov     [di], al ;~ 01A2:519E
loc_151a0:
	// 5194 
cs=0x1a2;eip=0x0051a0; 	T(ADD(di, bp));	// 12702                  add     di, bp ;~ 01A2:51A0
cs=0x1a2;eip=0x0051a2; 	T(ADD(si, bp));	// 12703                  add     si, bp ;~ 01A2:51A2
cs=0x1a2;eip=0x0051a4; 	J(LOOP(loc_15190));	// 12704                  loop    loc_15190 ;~ 01A2:51A4
cs=0x1a2;eip=0x0051a6; 	J(CALL(sub_151b3,0));	// 12705                  call    sub_151B3 ;~ 01A2:51A6
cs=0x1a2;eip=0x0051a9; 	X(POP(ds));	// 12706                  pop     ds ;~ 01A2:51A9
cs=0x1a2;eip=0x0051aa; 	X(POP(es));	// 12707                  pop     es ;~ 01A2:51AA
cs=0x1a2;eip=0x0051ab; 	X(POP(di));	// 12709                  pop     di ;~ 01A2:51AB
cs=0x1a2;eip=0x0051ac; 	X(POP(si));	// 12710                  pop     si ;~ 01A2:51AC
cs=0x1a2;eip=0x0051ad; 	X(POP(bp));	// 12711                  pop     bp ;~ 01A2:51AD
cs=0x1a2;eip=0x0051ae; 	X(POP(dx));	// 12712                  pop     dx ;~ 01A2:51AE
cs=0x1a2;eip=0x0051af; 	X(POP(cx));	// 12713                  pop     cx ;~ 01A2:51AF
cs=0x1a2;eip=0x0051b0; 	X(POP(bx));	// 12714                  pop     bx ;~ 01A2:51B0
cs=0x1a2;eip=0x0051b1; 	X(POP(ax));	// 12715                  pop     ax ;~ 01A2:51B1
cs=0x1a2;eip=0x0051b2; 	J(RETN(0));	// 12716                  retn ;~ 01A2:51B2

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1513f: 	goto loc_1513f;
        case m2c::kloc_15153: 	goto loc_15153;
        case m2c::kloc_15163: 	goto loc_15163;
        case m2c::kloc_15167: 	goto loc_15167;
        case m2c::kloc_15190: 	goto loc_15190;
        case m2c::kloc_1519c: 	goto loc_1519c;
        case m2c::kloc_151a0: 	goto loc_151a0;
        case m2c::ksub_15108: 	goto sub_15108;
        case m2c::ksub_15114: 	goto sub_15114;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_151b3(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_151b3:
    _begin:
cs=0x1a2;eip=0x0051b3; 	T(XOR(cx, cx));	// 12725                  xor     cx, cx ;~ 01A2:51B3
cs=0x1a2;eip=0x0051b5; 	T(si = word_1f19a;);	// 12726                  mov     si, word_1F19A ;~ 01A2:51B5
cs=0x1a2;eip=0x0051b9; 	T(bp = 0x32;);	// 12727                  mov     bp, 32h ; '2' ;~ 01A2:51B9
cs=0x1a2;eip=0x0051bc; 	T(dx = 0x0FFFE;);	// 12728                  mov     dx, 0FFFEh ;~ 01A2:51BC
cs=0x1a2;eip=0x0051bf; 	T(bx = 0x0FFFF;);	// 12729                  mov     bx, 0FFFFh ;~ 01A2:51BF
loc_151c2:
	// 5195 
cs=0x1a2;eip=0x0051c2; 	T(CMP(*(dw*)(raddr(ds,si)), bx));	// 12732                  cmp     [si], bx ;~ 01A2:51C2
cs=0x1a2;eip=0x0051c4; 	J(JNZ(loc_151cb));	// 12733                  jnz     short loc_151CB ;~ 01A2:51C4
cs=0x1a2;eip=0x0051c6; 	T(CMP(*(dw*)(raddr(ds,si+2)), dx));	// 12734                  cmp     [si+2], dx ;~ 01A2:51C6
cs=0x1a2;eip=0x0051c9; 	J(JZ(loc_151d3));	// 12735                  jz      short loc_151D3 ;~ 01A2:51C9
loc_151cb:
	// 5196 
cs=0x1a2;eip=0x0051cb; 	T(ADD(si, bp));	// 12738                  add     si, bp ;~ 01A2:51CB
cs=0x1a2;eip=0x0051cd; 	T(INC(cx));	// 12739                  inc     cx ;~ 01A2:51CD
cs=0x1a2;eip=0x0051ce; 	T(CMP(cx, 0x60));	// 12740                  cmp     cx, 60h ; '`' ;~ 01A2:51CE
cs=0x1a2;eip=0x0051d1; 	J(JNZ(loc_151c2));	// 12741                  jnz     short loc_151C2 ;~ 01A2:51D1
loc_151d3:
	// 5197 
cs=0x1a2;eip=0x0051d3; 	X(word_1f394 = cx;);	// 12744                  mov     ds:word_1F394, cx ;~ 01A2:51D3
cs=0x1a2;eip=0x0051d7; 	J(RETN(0));	// 12745                  retn ;~ 01A2:51D7

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_151c2: 	goto loc_151c2;
        case m2c::kloc_151cb: 	goto loc_151cb;
        case m2c::kloc_151d3: 	goto loc_151d3;
        case m2c::ksub_151b3: 	goto sub_151b3;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group17(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group17:
    _begin:
sub_151d8:
	// 12752 
cs=0x1a2;eip=0x0051d8; 	T(MOV(al, *(raddr(ds,si+0x0A))));	// 12754                  mov     al, [si+0Ah] ;~ 01A2:51D8
cs=0x1a2;eip=0x0051db; 	T(CMP(al, *(db*)(&word_1f3a2)));	// 12755                  cmp     al, byte ptr ds:word_1F3A2 ;~ 01A2:51DB
cs=0x1a2;eip=0x0051df; 	J(JZ(sub_151e2));	// 12756                  jz      short sub_151E2 ;~ 01A2:51DF
cs=0x1a2;eip=0x0051e1; 	J(RETN(0));	// 12757                  retn ;~ 01A2:51E1
sub_151e2:
	// 12764 
cs=0x1a2;eip=0x0051e2; 	T(TEST(*(raddr(es,di+0x0C)), 1));	// 12766                  test    byte ptr es:[di+0Ch], 1 ;~ 01A2:51E2
cs=0x1a2;eip=0x0051e7; 	J(JNZ(loc_151eb));	// 12767                  jnz     short loc_151EB ;~ 01A2:51E7
cs=0x1a2;eip=0x0051e9; 	J(JMP(loc_151ef));	// 12768                  jmp     short loc_151EF ;~ 01A2:51E9
loc_151eb:
	// 5198 
cs=0x1a2;eip=0x0051eb; 	T(bh = 1;);	// 12772                  mov     bh, 1 ;~ 01A2:51EB
cs=0x1a2;eip=0x0051ed; 	J(JMP(loc_151f1));	// 12773                  jmp     short loc_151F1 ;~ 01A2:51ED
loc_151ef:
	// 5199 
cs=0x1a2;eip=0x0051ef; 	T(XOR(bh, bh));	// 12777                  xor     bh, bh ;~ 01A2:51EF
loc_151f1:
	// 5200 
cs=0x1a2;eip=0x0051f1; 	T(cx = 0x60;);	// 12780                  mov     cx, 60h ; '`' ;~ 01A2:51F1
cs=0x1a2;eip=0x0051f4; 	X(PUSH(si));	// 12781                  push    si ;~ 01A2:51F4
cs=0x1a2;eip=0x0051f5; 	T(si = word_1f19a;);	// 12782                  mov     si, word_1F19A ;~ 01A2:51F5
cs=0x1a2;eip=0x0051f9; 	T(XOR(bl, bl));	// 12783                  xor     bl, bl ;~ 01A2:51F9
cs=0x1a2;eip=0x0051fb; 	T(XOR(dx, dx));	// 12784                  xor     dx, dx ;~ 01A2:51FB
cs=0x1a2;eip=0x0051fd; 	T(XOR(ax, ax));	// 12785                  xor     ax, ax ;~ 01A2:51FD
loc_151ff:
	// 5201 
cs=0x1a2;eip=0x0051ff; 	T(CMP(*(dw*)(raddr(ds,si)), ax));	// 12788                  cmp     [si], ax ;~ 01A2:51FF
cs=0x1a2;eip=0x005201; 	J(JS(loc_1520d));	// 12789                  js      short loc_1520D ;~ 01A2:5201
cs=0x1a2;eip=0x005203; 	T(ADD(si, 0x32));	// 12790                  add     si, 32h ; '2' ;~ 01A2:5203
cs=0x1a2;eip=0x005206; 	T(INC(bl));	// 12791                  inc     bl ;~ 01A2:5206
cs=0x1a2;eip=0x005208; 	T(ADD(dx, 0x10));	// 12792                  add     dx, 10h ;~ 01A2:5208
cs=0x1a2;eip=0x00520b; 	J(LOOP(loc_151ff));	// 12793                  loop    loc_151FF ;~ 01A2:520B
loc_1520d:
	// 5202 
cs=0x1a2;eip=0x00520d; 	X(MOV(*(dw*)(raddr(ds,si+0x1A)), ax));	// 12796                  mov     [si+1Ah], ax ;~ 01A2:520D
cs=0x1a2;eip=0x005210; 	X(MOV(*(dw*)(raddr(ds,si+0x18)), ax));	// 12797                  mov     [si+18h], ax ;~ 01A2:5210
cs=0x1a2;eip=0x005213; 	X(MOV(*(dw*)(raddr(ds,si+0x2A)), ax));	// 12798                  mov     [si+2Ah], ax ;~ 01A2:5213
cs=0x1a2;eip=0x005216; 	X(MOV(*(dw*)(raddr(ds,si+0x2C)), ax));	// 12799                  mov     [si+2Ch], ax ;~ 01A2:5216
cs=0x1a2;eip=0x005219; 	X(MOV(*(raddr(ds,si+0x12)), al));	// 12800                  mov     [si+12h], al ;~ 01A2:5219
cs=0x1a2;eip=0x00521c; 	X(MOV(*(raddr(ds,si+0x23)), al));	// 12801                  mov     [si+23h], al ;~ 01A2:521C
cs=0x1a2;eip=0x00521f; 	X(MOV(*(raddr(ds,si+0x20)), al));	// 12802                  mov     [si+20h], al ;~ 01A2:521F
cs=0x1a2;eip=0x005222; 	T(CMP(bh, 0));	// 12803                  cmp     bh, 0 ;~ 01A2:5222
cs=0x1a2;eip=0x005225; 	J(JNZ(loc_15231));	// 12804                  jnz     short loc_15231 ;~ 01A2:5225
cs=0x1a2;eip=0x005227; 	X(INC(word_1f392));	// 12805                  inc     ds:word_1F392 ;~ 01A2:5227
cs=0x1a2;eip=0x00522b; 	X(MOV(*(raddr(ds,si+0x14)), 0x0FF));	// 12806                  mov     byte ptr [si+14h], 0FFh ;~ 01A2:522B
cs=0x1a2;eip=0x00522f; 	J(JMP(loc_15238));	// 12807                  jmp     short loc_15238 ;~ 01A2:522F
loc_15231:
	// 5203 
cs=0x1a2;eip=0x005231; 	X(MOV(*(raddr(ds,si+0x14)), bl));	// 12811                  mov     [si+14h], bl ;~ 01A2:5231
cs=0x1a2;eip=0x005234; 	X(INC(word_1f390));	// 12812                  inc     ds:word_1F390 ;~ 01A2:5234
loc_15238:
	// 5204 
cs=0x1a2;eip=0x005238; 	T(CMP(*(raddr(es,di+0x16)), al));	// 12815                  cmp     es:[di+16h], al ;~ 01A2:5238
cs=0x1a2;eip=0x00523c; 	J(JNS(loc_15248));	// 12816                  jns     short loc_15248 ;~ 01A2:523C
cs=0x1a2;eip=0x00523e; 	T(TEST(*(raddr(ds,si+0x12)), 0x40));	// 12818                  test    byte ptr [si+12h], 40h ;~ 01A2:523E
cs=0x1a2;eip=0x005242; 	X(PUSHF);	// 12819                  pushf ;~ 01A2:5242
cs=0x1a2;eip=0x005243; 	X(OR(*(raddr(ds,si+0x12)), 0x40));	// 12820                  or      byte ptr [si+12h], 40h ;~ 01A2:5243
cs=0x1a2;eip=0x005247; 	X(POPF);	// 12821                  popf ;~ 01A2:5247
loc_15248:
	// 5205 
cs=0x1a2;eip=0x005248; 	T(CMP(*(raddr(es,di+0x16)), 0x10));	// 12824                  cmp     byte ptr es:[di+16h], 10h ;~ 01A2:5248
cs=0x1a2;eip=0x00524d; 	J(JNZ(loc_15259));	// 12825                  jnz     short loc_15259 ;~ 01A2:524D
cs=0x1a2;eip=0x00524f; 	T(TEST(*(raddr(ds,si+0x12)), 0x80));	// 12827                  test    byte ptr [si+12h], 80h ;~ 01A2:524F
cs=0x1a2;eip=0x005253; 	X(PUSHF);	// 12828                  pushf ;~ 01A2:5253
cs=0x1a2;eip=0x005254; 	X(OR(*(raddr(ds,si+0x12)), 0x80));	// 12829                  or      byte ptr [si+12h], 80h ;~ 01A2:5254
cs=0x1a2;eip=0x005258; 	X(POPF);	// 12830                  popf ;~ 01A2:5258
loc_15259:
	// 5206 
cs=0x1a2;eip=0x005259; 	T(MOV(al, *(raddr(es,di+0x1E))));	// 12833                  mov     al, es:[di+1Eh] ;~ 01A2:5259
cs=0x1a2;eip=0x00525d; 	T(CMP(al, 0x3B));	// 12834                  cmp     al, 3Bh ; ';' ;~ 01A2:525D
cs=0x1a2;eip=0x00525f; 	J(JNZ(loc_15263));	// 12835                  jnz     short loc_15263 ;~ 01A2:525F
cs=0x1a2;eip=0x005261; 	T(al = 0x0FF;);	// 12837                  mov     al, 0FFh ;~ 01A2:5261
loc_15263:
	// 5207 
cs=0x1a2;eip=0x005263; 	X(MOV(*(raddr(ds,si+0x22)), al));	// 12840                  mov     [si+22h], al ;~ 01A2:5263
cs=0x1a2;eip=0x005266; 	T(CMP(al, 0x0FF));	// 12841                  cmp     al, 0FFh ;~ 01A2:5266
cs=0x1a2;eip=0x005268; 	J(JZ(loc_1526d));	// 12842                  jz      short loc_1526D ;~ 01A2:5268
cs=0x1a2;eip=0x00526a; 	J(CALL(sub_1164e,0));	// 12843                  call    sub_1164E ;~ 01A2:526A
loc_1526d:
	// 5208 
cs=0x1a2;eip=0x00526d; 	T(CMP(*(raddr(es,di+0x0D)), 0));	// 12846                  cmp     byte ptr es:[di+0Dh], 0 ;~ 01A2:526D
cs=0x1a2;eip=0x005272; 	J(JNZ(loc_15279));	// 12847                  jnz     short loc_15279 ;~ 01A2:5272
cs=0x1a2;eip=0x005274; 	X(MOV(*(raddr(es,di+0x0D)), 0x0A));	// 12848                  mov     byte ptr es:[di+0Dh], 0Ah ;~ 01A2:5274
loc_15279:
	// 5209 
cs=0x1a2;eip=0x005279; 	X(MOV(*(dw*)(raddr(ds,si+6)), es));	// 12851                  mov     word ptr [si+6], es ;~ 01A2:5279
cs=0x1a2;eip=0x00527c; 	X(MOV(*(dw*)(raddr(ds,si+8)), di));	// 12852                  mov     [si+8], di ;~ 01A2:527C
cs=0x1a2;eip=0x00527f; 	X(MOV(*(raddr(ds,si+0x15)), bl));	// 12853                  mov     [si+15h], bl ;~ 01A2:527F
cs=0x1a2;eip=0x005282; 	X(MOV(*(dw*)(raddr(ds,si+0x16)), dx));	// 12854                  mov     [si+16h], dx ;~ 01A2:5282
cs=0x1a2;eip=0x005285; 	X(POP(*(dw*)(raddr(ds,si+0x0A))));	// 12855                  pop     word ptr [si+0Ah] ;~ 01A2:5285
cs=0x1a2;eip=0x005288; 	X(PUSH(*(dw*)(raddr(ds,si+0x0A))));	// 12856                  push    word ptr [si+0Ah] ;~ 01A2:5288
cs=0x1a2;eip=0x00528b; 	T(TEST(*(raddr(es,di+0x0C)), 4));	// 12857                  test    byte ptr es:[di+0Ch], 4 ;~ 01A2:528B
cs=0x1a2;eip=0x005290; 	J(JNZ(loc_1529e));	// 12858                  jnz     short loc_1529E ;~ 01A2:5290
loc_15292:
	// 5210 
cs=0x1a2;eip=0x005292; 	X(MOV(*(dw*)(raddr(ds,si+0x1E)), di));	// 12861                  mov     [si+1Eh], di ;~ 01A2:5292
cs=0x1a2;eip=0x005295; 	X(ADD(*(dw*)(raddr(ds,si+0x1E)), 0x20));	// 12862                  add     word ptr [si+1Eh], 20h ; ' ' ;~ 01A2:5295
cs=0x1a2;eip=0x005299; 	X(MOV(*(dw*)(raddr(ds,si+0x2A)), es));	// 12863                  mov     word ptr [si+2Ah], es ;~ 01A2:5299
cs=0x1a2;eip=0x00529c; 	J(JMP(loc_152a8));	// 12864                  jmp     short loc_152A8 ;~ 01A2:529C
loc_1529e:
	// 5211 
cs=0x1a2;eip=0x00529e; 	T(TEST(*(raddr(es,di+0x0C)), 0x20));	// 12868                  test    byte ptr es:[di+0Ch], 20h ;~ 01A2:529E
cs=0x1a2;eip=0x0052a3; 	J(JNZ(loc_15292));	// 12869                  jnz     short loc_15292 ;~ 01A2:52A3
cs=0x1a2;eip=0x0052a5; 	J(CALL(sub_13ac3,0));	// 12870                  call    sub_13AC3 ;~ 01A2:52A5
loc_152a8:
	// 5212 
cs=0x1a2;eip=0x0052a8; 	T(MOV(al, *(raddr(es,di+0x0C))));	// 12873                  mov     al, es:[di+0Ch] ;~ 01A2:52A8
cs=0x1a2;eip=0x0052ac; 	X(MOV(*(raddr(ds,si+0x27)), al));	// 12874                  mov     [si+27h], al ;~ 01A2:52AC
cs=0x1a2;eip=0x0052af; 	T(MOV(bx, *(dw*)(raddr(es,di+0x10))));	// 12875                  mov     bx, es:[di+10h] ;~ 01A2:52AF
cs=0x1a2;eip=0x0052b3; 	T(MOV(dx, *(dw*)(raddr(es,di+0x12))));	// 12876                  mov     dx, es:[di+12h] ;~ 01A2:52B3
cs=0x1a2;eip=0x0052b7; 	T(MOV(bp, *(dw*)(raddr(es,di+0x14))));	// 12877                  mov     bp, es:[di+14h] ;~ 01A2:52B7
cs=0x1a2;eip=0x0052bb; 	X(POP(ax));	// 12878                  pop     ax ;~ 01A2:52BB
cs=0x1a2;eip=0x0052bc; 	X(PUSH(di));	// 12879                  push    di ;~ 01A2:52BC
cs=0x1a2;eip=0x0052bd; 	T(di = ax;);	// 12880                  mov     di, ax ;~ 01A2:52BD
cs=0x1a2;eip=0x0052bf; 	T(MOV(ax, *(dw*)(raddr(ds,di+4))));	// 12881                  mov     ax, [di+4] ;~ 01A2:52BF
cs=0x1a2;eip=0x0052c2; 	X(MOV(*(dw*)(raddr(ds,si+0x2E)), ax));	// 12882                  mov     [si+2Eh], ax ;~ 01A2:52C2
cs=0x1a2;eip=0x0052c5; 	X(MOV(*(dw*)(raddr(ds,si+0x0A)), di));	// 12883                  mov     [si+0Ah], di ;~ 01A2:52C5
cs=0x1a2;eip=0x0052c8; 	T(XOR(ah, ah));	// 12884                  xor     ah, ah ;~ 01A2:52C8
cs=0x1a2;eip=0x0052ca; 	T(MOV(al, *(raddr(ds,di))));	// 12885                  mov     al, [di] ;~ 01A2:52CA
cs=0x1a2;eip=0x0052cc; 	X(MOV(*(raddr(ds,si)), al));	// 12886                  mov     [si], al ;~ 01A2:52CC
cs=0x1a2;eip=0x0052ce; 	T(SUB(ax, bx));	// 12887                  sub     ax, bx ;~ 01A2:52CE
cs=0x1a2;eip=0x0052d0; 	T(INC(ax));	// 12888                  inc     ax ;~ 01A2:52D0
cs=0x1a2;eip=0x0052d1; 	X(MOV(*(raddr(ds,si+2)), al));	// 12889                  mov     [si+2], al ;~ 01A2:52D1
cs=0x1a2;eip=0x0052d4; 	T(XOR(ah, ah));	// 12890                  xor     ah, ah ;~ 01A2:52D4
cs=0x1a2;eip=0x0052d6; 	T(MOV(al, *(raddr(ds,di+1))));	// 12891                  mov     al, [di+1] ;~ 01A2:52D6
cs=0x1a2;eip=0x0052d9; 	X(MOV(*(raddr(ds,si+1)), al));	// 12892                  mov     [si+1], al ;~ 01A2:52D9
cs=0x1a2;eip=0x0052dc; 	T(SUB(ax, dx));	// 12893                  sub     ax, dx ;~ 01A2:52DC
cs=0x1a2;eip=0x0052de; 	T(INC(ax));	// 12894                  inc     ax ;~ 01A2:52DE
cs=0x1a2;eip=0x0052df; 	X(MOV(*(raddr(ds,si+3)), al));	// 12895                  mov     [si+3], al ;~ 01A2:52DF
cs=0x1a2;eip=0x0052e2; 	T(XOR(ah, ah));	// 12896                  xor     ah, ah ;~ 01A2:52E2
cs=0x1a2;eip=0x0052e4; 	T(MOV(al, *(raddr(ds,di+2))));	// 12897                  mov     al, [di+2] ;~ 01A2:52E4
cs=0x1a2;eip=0x0052e7; 	X(MOV(*(raddr(ds,si+5)), al));	// 12898                  mov     [si+5], al ;~ 01A2:52E7
cs=0x1a2;eip=0x0052ea; 	T(ADD(ax, bp));	// 12899                  add     ax, bp ;~ 01A2:52EA
cs=0x1a2;eip=0x0052ec; 	T(DEC(al));	// 12900                  dec     al ;~ 01A2:52EC
cs=0x1a2;eip=0x0052ee; 	X(MOV(*(raddr(ds,si+4)), al));	// 12901                  mov     [si+4], al ;~ 01A2:52EE
cs=0x1a2;eip=0x0052f1; 	T(ax = si;);	// 12902                  mov     ax, si ;~ 01A2:52F1
cs=0x1a2;eip=0x0052f3; 	X(MOV(*(dw*)(raddr(ds,di+8)), ax));	// 12903                  mov     [di+8], ax ;~ 01A2:52F3
cs=0x1a2;eip=0x0052f6; 	T(MOV(al, *(raddr(ds,di+3))));	// 12904                  mov     al, [di+3] ;~ 01A2:52F6
cs=0x1a2;eip=0x0052f9; 	X(MOV(*(raddr(ds,si+0x26)), al));	// 12905                  mov     [si+26h], al ;~ 01A2:52F9
cs=0x1a2;eip=0x0052fc; 	X(POP(bx));	// 12906                  pop     bx ;~ 01A2:52FC
cs=0x1a2;eip=0x0052fd; 	J(CALL(sub_14cb9,0));	// 12907                  call    sub_14CB9 ;~ 01A2:52FD
cs=0x1a2;eip=0x005300; 	X(PUSH(si));	// 12908                  push    si ;~ 01A2:5300
cs=0x1a2;eip=0x005301; 	X(PUSH(di));	// 12909                  push    di ;~ 01A2:5301
cs=0x1a2;eip=0x005302; 	J(CALL(sub_151b3,0));	// 12910                  call    sub_151B3 ;~ 01A2:5302
cs=0x1a2;eip=0x005305; 	X(POP(di));	// 12911                  pop     di ;~ 01A2:5305
cs=0x1a2;eip=0x005306; 	J(CALL(sub_15329,0));	// 12912                  call    sub_15329 ;~ 01A2:5306
cs=0x1a2;eip=0x005309; 	X(POP(si));	// 12913                  pop     si ;~ 01A2:5309
cs=0x1a2;eip=0x00530a; 	J(CALL(sub_16bfc,0));	// 12914                  call    sub_16BFC ;~ 01A2:530A
cs=0x1a2;eip=0x00530d; 	J(RETN(0));	// 12915                  retn ;~ 01A2:530D

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_151eb: 	goto loc_151eb;
        case m2c::kloc_151ef: 	goto loc_151ef;
        case m2c::kloc_151f1: 	goto loc_151f1;
        case m2c::kloc_151ff: 	goto loc_151ff;
        case m2c::kloc_1520d: 	goto loc_1520d;
        case m2c::kloc_15231: 	goto loc_15231;
        case m2c::kloc_15238: 	goto loc_15238;
        case m2c::kloc_15248: 	goto loc_15248;
        case m2c::kloc_15259: 	goto loc_15259;
        case m2c::kloc_15263: 	goto loc_15263;
        case m2c::kloc_1526d: 	goto loc_1526d;
        case m2c::kloc_15279: 	goto loc_15279;
        case m2c::kloc_15292: 	goto loc_15292;
        case m2c::kloc_1529e: 	goto loc_1529e;
        case m2c::kloc_152a8: 	goto loc_152a8;
        case m2c::ksub_151d8: 	goto sub_151d8;
        case m2c::ksub_151e2: 	goto sub_151e2;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1530e(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1530e:
    _begin:
cs=0x1a2;eip=0x00530e; 	T(MOV(si, *(dw*)(raddr(ds,di+8))));	// 12924                  mov     si, [di+8] ;~ 01A2:530E
cs=0x1a2;eip=0x005311; 	T(TEST(*(raddr(ds,si+0x12)), 4));	// 12925                  test    byte ptr [si+12h], 4 ;~ 01A2:5311
cs=0x1a2;eip=0x005315; 	X(PUSHF);	// 12926                  pushf ;~ 01A2:5315
cs=0x1a2;eip=0x005316; 	X(AND(*(raddr(ds,si+0x12)), 0x0FB));	// 12927                  and     byte ptr [si+12h], 0FBh ;~ 01A2:5316
cs=0x1a2;eip=0x00531a; 	X(POPF);	// 12928                  popf ;~ 01A2:531A
cs=0x1a2;eip=0x00531b; 	X(PUSH(si));	// 12929                  push    si ;~ 01A2:531B
cs=0x1a2;eip=0x00531c; 	X(PUSH(di));	// 12930                  push    di ;~ 01A2:531C
cs=0x1a2;eip=0x00531d; 	J(CALL(sub_1577a,0));	// 12931                  call    sub_1577A ;~ 01A2:531D
cs=0x1a2;eip=0x005320; 	X(POP(di));	// 12932                  pop     di ;~ 01A2:5320
cs=0x1a2;eip=0x005321; 	J(CALL(sub_15329,0));	// 12933                  call    sub_15329 ;~ 01A2:5321
cs=0x1a2;eip=0x005324; 	X(POP(si));	// 12934                  pop     si ;~ 01A2:5324
cs=0x1a2;eip=0x005325; 	J(CALL(sub_15a61,0));	// 12935                  call    sub_15A61 ;~ 01A2:5325
cs=0x1a2;eip=0x005328; 	J(RETN(0));	// 12936                  retn ;~ 01A2:5328

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1530e: 	goto sub_1530e;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_15329(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_15329:
    _begin:
cs=0x1a2;eip=0x005329; 	T(MOV(si, *(dw*)(raddr(ds,di+8))));	// 12945                  mov     si, [di+8] ;~ 01A2:5329
cs=0x1a2;eip=0x00532c; 	X(MOV(*(dw*)(raddr(ds,si+0x0C)), 0));	// 12946                  mov     word ptr [si+0Ch], 0 ;~ 01A2:532C
cs=0x1a2;eip=0x005331; 	T(MOV(cl, *(raddr(ds,si+0x15))));	// 12947                  mov     cl, [si+15h] ;~ 01A2:5331
cs=0x1a2;eip=0x005334; 	T(ch = cl;);	// 12948                  mov     ch, cl ;~ 01A2:5334
cs=0x1a2;eip=0x005336; 	T(dl = cl;);	// 12949                  mov     dl, cl ;~ 01A2:5336
cs=0x1a2;eip=0x005338; 	T(XOR(dh, dh));	// 12950                  xor     dh, dh ;~ 01A2:5338
cs=0x1a2;eip=0x00533a; 	T(AND(dl, 0x78));	// 12951                  and     dl, 78h ;~ 01A2:533A
cs=0x1a2;eip=0x00533d; 	T(ROR(dx, 1));	// 12952                  ror     dx, 1 ;~ 01A2:533D
cs=0x1a2;eip=0x00533f; 	T(ROR(dx, 1));	// 12953                  ror     dx, 1 ;~ 01A2:533F
cs=0x1a2;eip=0x005341; 	T(ROR(dx, 1));	// 12954                  ror     dx, 1 ;~ 01A2:5341
cs=0x1a2;eip=0x005343; 	T(al = 1;);	// 12955                  mov     al, 1 ;~ 01A2:5343
cs=0x1a2;eip=0x005345; 	T(AND(cl, 7));	// 12956                  and     cl, 7 ;~ 01A2:5345
cs=0x1a2;eip=0x005348; 	J(JZ(loc_1534c));	// 12957                  jz      short loc_1534C ;~ 01A2:5348
cs=0x1a2;eip=0x00534a; 	T(ROL(al, cl));	// 12958                  rol     al, cl ;~ 01A2:534A
loc_1534c:
	// 5213 
cs=0x1a2;eip=0x00534c; 	T(XOR(dh, dh));	// 12961                  xor     dh, dh ;~ 01A2:534C
cs=0x1a2;eip=0x00534e; 	T(cl = al;);	// 12962                  mov     cl, al ;~ 01A2:534E
cs=0x1a2;eip=0x005350; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x16))));	// 12963                  mov     ax, [si+16h] ;~ 01A2:5350
cs=0x1a2;eip=0x005353; 	T(bp = word_1f1a0;);	// 12964                  mov     bp, word_1F1A0 ;~ 01A2:5353
cs=0x1a2;eip=0x005357; 	T(bx = bp;);	// 12965                  mov     bx, bp ;~ 01A2:5357
cs=0x1a2;eip=0x005359; 	T(ADD(bp, ax));	// 12966                  add     bp, ax ;~ 01A2:5359
cs=0x1a2;eip=0x00535b; 	T(ADD(bx, 2));	// 12967                  add     bx, 2 ;~ 01A2:535B
cs=0x1a2;eip=0x00535e; 	T(di = bp;);	// 12968                  mov     di, bp ;~ 01A2:535E
cs=0x1a2;eip=0x005360; 	X(byte_1f865 = 1;);	// 12969                  mov     ds:byte_1F865, 1 ;~ 01A2:5360
cs=0x1a2;eip=0x005365; 	T(XOR(ax, ax));	// 12970                  xor     ax, ax ;~ 01A2:5365
cs=0x1a2;eip=0x005367; 	X(byte_1f866 = al;);	// 12971                  mov     ds:byte_1F866, al ;~ 01A2:5367
cs=0x1a2;eip=0x00536a; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 12972                  mov     [di], ax ;~ 01A2:536A
cs=0x1a2;eip=0x00536c; 	T(ADD(di, 2));	// 12973                  add     di, 2 ;~ 01A2:536C
cs=0x1a2;eip=0x00536f; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 12974                  mov     [di], ax ;~ 01A2:536F
cs=0x1a2;eip=0x005371; 	T(ADD(di, 2));	// 12975                  add     di, 2 ;~ 01A2:5371
cs=0x1a2;eip=0x005374; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 12976                  mov     [di], ax ;~ 01A2:5374
cs=0x1a2;eip=0x005376; 	X(MOV(*(dw*)(raddr(ds,di+2)), ax));	// 12977                  mov     [di+2], ax ;~ 01A2:5376
cs=0x1a2;eip=0x005379; 	X(MOV(*(dw*)(raddr(ds,di+4)), ax));	// 12978                  mov     [di+4], ax ;~ 01A2:5379
cs=0x1a2;eip=0x00537c; 	X(MOV(*(dw*)(raddr(ds,di+6)), ax));	// 12979                  mov     [di+6], ax ;~ 01A2:537C
cs=0x1a2;eip=0x00537f; 	X(MOV(*(dw*)(raddr(ds,di+8)), ax));	// 12980                  mov     [di+8], ax ;~ 01A2:537F
cs=0x1a2;eip=0x005382; 	X(MOV(*(dw*)(raddr(ds,di+0x0A)), ax));	// 12981                  mov     [di+0Ah], ax ;~ 01A2:5382
cs=0x1a2;eip=0x005385; 	T(MOV(al, *(raddr(ds,si+2))));	// 12982                  mov     al, [si+2] ;~ 01A2:5385
cs=0x1a2;eip=0x005388; 	X(byte_1f85f = al;);	// 12983                  mov     ds:byte_1F85F, al ;~ 01A2:5388
cs=0x1a2;eip=0x00538b; 	T(MOV(al, *(raddr(ds,si+3))));	// 12984                  mov     al, [si+3] ;~ 01A2:538B
cs=0x1a2;eip=0x00538e; 	X(byte_1f860 = al;);	// 12985                  mov     ds:byte_1F860, al ;~ 01A2:538E
cs=0x1a2;eip=0x005391; 	T(MOV(al, *(raddr(ds,si+5))));	// 12986                  mov     al, [si+5] ;~ 01A2:5391
cs=0x1a2;eip=0x005394; 	X(byte_1f861 = al;);	// 12987                  mov     ds:byte_1F861, al ;~ 01A2:5394
cs=0x1a2;eip=0x005397; 	T(MOV(al, *(raddr(ds,si+4))));	// 12988                  mov     al, [si+4] ;~ 01A2:5397
cs=0x1a2;eip=0x00539a; 	X(byte_1f862 = al;);	// 12989                  mov     ds:byte_1F862, al ;~ 01A2:539A
cs=0x1a2;eip=0x00539d; 	T(MOV(al, *(raddr(ds,si))));	// 12990                  mov     al, [si] ;~ 01A2:539D
cs=0x1a2;eip=0x00539f; 	X(byte_1f863 = al;);	// 12991                  mov     ds:byte_1F863, al ;~ 01A2:539F
cs=0x1a2;eip=0x0053a2; 	T(MOV(al, *(raddr(ds,si+1))));	// 12992                  mov     al, [si+1] ;~ 01A2:53A2
cs=0x1a2;eip=0x0053a5; 	X(byte_1f864 = al;);	// 12993                  mov     ds:byte_1F864, al ;~ 01A2:53A5
cs=0x1a2;eip=0x0053a8; 	T(si = word_1f19a;);	// 12994                  mov     si, word_1F19A ;~ 01A2:53A8
cs=0x1a2;eip=0x0053ac; 	T(ax = word_1f394;);	// 12995                  mov     ax, ds:word_1F394 ;~ 01A2:53AC
cs=0x1a2;eip=0x0053af; 	X(byte_1f867 = al;);	// 12996                  mov     ds:byte_1F867, al ;~ 01A2:53AF
loc_153b2:
	// 5214 
cs=0x1a2;eip=0x0053b2; 	T(CMP(ch, byte_1f866));	// 12999                  cmp     ch, ds:byte_1F866 ;~ 01A2:53B2
cs=0x1a2;eip=0x0053b6; 	J(JZ(loc_15425));	// 13000                  jz      short loc_15425 ;~ 01A2:53B6
cs=0x1a2;eip=0x0053b8; 	T(CMP(*(dw*)(raddr(ds,si)), 0));	// 13001                  cmp     word ptr [si], 0 ;~ 01A2:53B8
cs=0x1a2;eip=0x0053bb; 	J(JS(loc_15425));	// 13002                  js      short loc_15425 ;~ 01A2:53BB
cs=0x1a2;eip=0x0053bd; 	T(MOV(al, *(raddr(ds,si+2))));	// 13003                  mov     al, [si+2] ;~ 01A2:53BD
cs=0x1a2;eip=0x0053c0; 	T(CMP(byte_1f863, al));	// 13004                  cmp     ds:byte_1F863, al ;~ 01A2:53C0
cs=0x1a2;eip=0x0053c4; 	J(JC(loc_153e5));	// 13005                  jb      short loc_153E5 ;~ 01A2:53C4
cs=0x1a2;eip=0x0053c6; 	T(MOV(al, *(raddr(ds,si+3))));	// 13006                  mov     al, [si+3] ;~ 01A2:53C6
cs=0x1a2;eip=0x0053c9; 	T(CMP(byte_1f864, al));	// 13007                  cmp     ds:byte_1F864, al ;~ 01A2:53C9
cs=0x1a2;eip=0x0053cd; 	J(JC(loc_153e5));	// 13008                  jb      short loc_153E5 ;~ 01A2:53CD
cs=0x1a2;eip=0x0053cf; 	T(MOV(al, *(raddr(ds,si+5))));	// 13009                  mov     al, [si+5] ;~ 01A2:53CF
cs=0x1a2;eip=0x0053d2; 	T(CMP(byte_1f862, al));	// 13010                  cmp     ds:byte_1F862, al ;~ 01A2:53D2
cs=0x1a2;eip=0x0053d6; 	J(JC(loc_153e5));	// 13011                  jb      short loc_153E5 ;~ 01A2:53D6
cs=0x1a2;eip=0x0053d8; 	T(al = byte_1f865;);	// 13012                  mov     al, ds:byte_1F865 ;~ 01A2:53D8
cs=0x1a2;eip=0x0053db; 	X(OR(*(raddr(ds,di)), al));	// 13013                  or      [di], al ;~ 01A2:53DB
cs=0x1a2;eip=0x0053dd; 	X(INC(*(dw*)(raddr(ds,bp+0))));	// 13014                  inc     word ptr ds:[bp+0] ;~ 01A2:53DD
cs=0x1a2;eip=0x0053e1; 	X(INC(*(dw*)(raddr(ds,bp+2))));	// 13015                  inc     word ptr ds:[bp+2] ;~ 01A2:53E1
loc_153e5:
	// 5215 
cs=0x1a2;eip=0x0053e5; 	T(MOV(al, *(raddr(ds,si))));	// 13019                  mov     al, [si] ;~ 01A2:53E5
cs=0x1a2;eip=0x0053e7; 	T(CMP(byte_1f85f, al));	// 13020                  cmp     ds:byte_1F85F, al ;~ 01A2:53E7
cs=0x1a2;eip=0x0053eb; 	J(JA(loc_15413));	// 13021                  ja      short loc_15413 ;~ 01A2:53EB
cs=0x1a2;eip=0x0053ed; 	T(MOV(al, *(raddr(ds,si+1))));	// 13022                  mov     al, [si+1] ;~ 01A2:53ED
cs=0x1a2;eip=0x0053f0; 	T(CMP(byte_1f860, al));	// 13023                  cmp     ds:byte_1F860, al ;~ 01A2:53F0
cs=0x1a2;eip=0x0053f4; 	J(JA(loc_15413));	// 13024                  ja      short loc_15413 ;~ 01A2:53F4
cs=0x1a2;eip=0x0053f6; 	T(MOV(al, *(raddr(ds,si+4))));	// 13025                  mov     al, [si+4] ;~ 01A2:53F6
cs=0x1a2;eip=0x0053f9; 	T(CMP(byte_1f861, al));	// 13026                  cmp     ds:byte_1F861, al ;~ 01A2:53F9
cs=0x1a2;eip=0x0053fd; 	J(JA(loc_15413));	// 13027                  ja      short loc_15413 ;~ 01A2:53FD
cs=0x1a2;eip=0x0053ff; 	X(PUSH(bx));	// 13028                  push    bx ;~ 01A2:53FF
cs=0x1a2;eip=0x005400; 	T(ADD(bx, dx));	// 13029                  add     bx, dx ;~ 01A2:5400
cs=0x1a2;eip=0x005402; 	T(MOV(al, *(raddr(ds,bx+2))));	// 13030                  mov     al, [bx+2] ;~ 01A2:5402
cs=0x1a2;eip=0x005405; 	T(AND(al, cl));	// 13031                  and     al, cl ;~ 01A2:5405
cs=0x1a2;eip=0x005407; 	J(JNZ(loc_15410));	// 13032                  jnz     short loc_15410 ;~ 01A2:5407
cs=0x1a2;eip=0x005409; 	X(OR(*(raddr(ds,bx+2)), cl));	// 13034                  or      [bx+2], cl ;~ 01A2:5409
cs=0x1a2;eip=0x00540c; 	T(SUB(bx, dx));	// 13035                  sub     bx, dx ;~ 01A2:540C
cs=0x1a2;eip=0x00540e; 	X(INC(*(dw*)(raddr(ds,bx))));	// 13036                  inc     word ptr [bx] ;~ 01A2:540E
loc_15410:
	// 5216 
cs=0x1a2;eip=0x005410; 	X(POP(bx));	// 13039                  pop     bx ;~ 01A2:5410
cs=0x1a2;eip=0x005411; 	J(JMP(loc_15425));	// 13040                  jmp     short loc_15425 ;~ 01A2:5411
loc_15413:
	// 5217 
cs=0x1a2;eip=0x005413; 	X(PUSH(bx));	// 13045                  push    bx ;~ 01A2:5413
cs=0x1a2;eip=0x005414; 	T(ADD(bx, dx));	// 13046                  add     bx, dx ;~ 01A2:5414
cs=0x1a2;eip=0x005416; 	T(MOV(al, *(raddr(ds,bx+2))));	// 13047                  mov     al, [bx+2] ;~ 01A2:5416
cs=0x1a2;eip=0x005419; 	T(AND(al, cl));	// 13048                  and     al, cl ;~ 01A2:5419
cs=0x1a2;eip=0x00541b; 	J(JZ(loc_15424));	// 13049                  jz      short loc_15424 ;~ 01A2:541B
cs=0x1a2;eip=0x00541d; 	X(XOR(*(raddr(ds,bx+2)), cl));	// 13050                  xor     [bx+2], cl ;~ 01A2:541D
cs=0x1a2;eip=0x005420; 	T(SUB(bx, dx));	// 13051                  sub     bx, dx ;~ 01A2:5420
cs=0x1a2;eip=0x005422; 	X(DEC(*(dw*)(raddr(ds,bx))));	// 13052                  dec     word ptr [bx] ;~ 01A2:5422
loc_15424:
	// 5218 
cs=0x1a2;eip=0x005424; 	X(POP(bx));	// 13055                  pop     bx ;~ 01A2:5424
loc_15425:
	// 5219 
cs=0x1a2;eip=0x005425; 	T(al = byte_1f865;);	// 13059                  mov     al, ds:byte_1F865 ;~ 01A2:5425
cs=0x1a2;eip=0x005428; 	T(ADD(al, al));	// 13060                  add     al, al ;~ 01A2:5428
cs=0x1a2;eip=0x00542a; 	J(JNZ(loc_1542f));	// 13061                  jnz     short loc_1542F ;~ 01A2:542A
cs=0x1a2;eip=0x00542c; 	T(INC(di));	// 13062                  inc     di ;~ 01A2:542C
cs=0x1a2;eip=0x00542d; 	T(al = 1;);	// 13063                  mov     al, 1 ;~ 01A2:542D
loc_1542f:
	// 5220 
cs=0x1a2;eip=0x00542f; 	X(byte_1f865 = al;);	// 13066                  mov     ds:byte_1F865, al ;~ 01A2:542F
cs=0x1a2;eip=0x005432; 	X(INC(byte_1f866));	// 13067                  inc     ds:byte_1F866 ;~ 01A2:5432
cs=0x1a2;eip=0x005436; 	T(ADD(si, 0x32));	// 13068                  add     si, 32h ; '2' ;~ 01A2:5436
cs=0x1a2;eip=0x005439; 	T(ADD(bx, 0x10));	// 13069                  add     bx, 10h ;~ 01A2:5439
cs=0x1a2;eip=0x00543c; 	X(DEC(byte_1f867));	// 13070                  dec     ds:byte_1F867 ;~ 01A2:543C
cs=0x1a2;eip=0x005440; 	J(JZ(locret_15445));	// 13071                  jz      short locret_15445 ;~ 01A2:5440
cs=0x1a2;eip=0x005442; 	J(JMP(loc_153b2));	// 13072                  jmp     loc_153B2 ;~ 01A2:5442
locret_15445:
	// 5221 
cs=0x1a2;eip=0x005445; 	J(RETN(0));	// 13076                  retn ;~ 01A2:5445

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1534c: 	goto loc_1534c;
        case m2c::kloc_153b2: 	goto loc_153b2;
        case m2c::kloc_153e5: 	goto loc_153e5;
        case m2c::kloc_15410: 	goto loc_15410;
        case m2c::kloc_15413: 	goto loc_15413;
        case m2c::kloc_15424: 	goto loc_15424;
        case m2c::kloc_15425: 	goto loc_15425;
        case m2c::kloc_1542f: 	goto loc_1542f;
        case m2c::klocret_15445: 	goto locret_15445;
        case m2c::ksub_15329: 	goto sub_15329;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_15446(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_15446:
    _begin:
cs=0x1a2;eip=0x005446; 	X(byte_1f82d = 1;);	// 13085                  mov     ds:byte_1F82D, 1 ;~ 01A2:5446
cs=0x1a2;eip=0x00544b; 	T(cx = 1;);	// 13086                  mov     cx, 1 ;~ 01A2:544B
cs=0x1a2;eip=0x00544e; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x16))));	// 13087                  mov     ax, [di+16h] ;~ 01A2:544E
cs=0x1a2;eip=0x005451; 	T(bx = word_1f1a0;);	// 13088                  mov     bx, word_1F1A0 ;~ 01A2:5451
cs=0x1a2;eip=0x005455; 	T(ADD(bx, ax));	// 13089                  add     bx, ax ;~ 01A2:5455
cs=0x1a2;eip=0x005457; 	T(ADD(bx, 4));	// 13090                  add     bx, 4 ;~ 01A2:5457
cs=0x1a2;eip=0x00545a; 	T(XOR(dx, dx));	// 13091                  xor     dx, dx ;~ 01A2:545A
cs=0x1a2;eip=0x00545c; 	J(return sub_15465(m2c::kloc_154b8, _state););	// 13092                  jmp     short loc_154B8 ;~ 01A2:545C

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_15446: 	goto sub_15446;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1545e(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1545e:
    _begin:
cs=0x1a2;eip=0x00545e; 	X(byte_1f82d = 1;);	// 13101                  mov     ds:byte_1F82D, 1 ;~ 01A2:545E
cs=0x1a2;eip=0x005463; 	J(return sub_15465(m2c::kloc_1546a, _state););	// 13102                  jmp     short loc_1546A ;~ 01A2:5463

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1545e: 	goto sub_1545e;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_15465(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_15465:
    _begin:
cs=0x1a2;eip=0x005465; 	X(byte_1f82d = 0;);	// 13111                  mov     ds:byte_1F82D, 0 ;~ 01A2:5465
loc_1546a:
	// 5222 
cs=0x1a2;eip=0x00546a; 	T(di = word_1f19a;);	// 13114                  mov     di, word_1F19A ;~ 01A2:546A
cs=0x1a2;eip=0x00546e; 	T(bx = word_1f1a0;);	// 13115                  mov     bx, word_1F1A0 ;~ 01A2:546E
cs=0x1a2;eip=0x005472; 	T(ADD(bx, 4));	// 13116                  add     bx, 4 ;~ 01A2:5472
cs=0x1a2;eip=0x005475; 	T(cx = word_1f394;);	// 13117                  mov     cx, ds:word_1F394 ;~ 01A2:5475
loc_15479:
	// 5223 
cs=0x1a2;eip=0x005479; 	T(XOR(dx, dx));	// 13120                  xor     dx, dx ;~ 01A2:5479
cs=0x1a2;eip=0x00547b; 	T(CMP(*(dw*)(raddr(ds,di)), 0));	// 13121                  cmp     word ptr [di], 0 ;~ 01A2:547B
cs=0x1a2;eip=0x00547e; 	J(JNS(loc_15483));	// 13122                  jns     short loc_15483 ;~ 01A2:547E
cs=0x1a2;eip=0x005480; 	J(JMP(loc_15512));	// 13123                  jmp     loc_15512 ;~ 01A2:5480
loc_15483:
	// 5224 
cs=0x1a2;eip=0x005483; 	T(MOV(al, *(raddr(ds,di+0x20))));	// 13127                  mov     al, [di+20h] ;~ 01A2:5483
cs=0x1a2;eip=0x005486; 	T(CMP(al, 5));	// 13128                  cmp     al, 5 ;~ 01A2:5486
cs=0x1a2;eip=0x005488; 	J(JNZ(loc_1548d));	// 13129                  jnz     short loc_1548D ;~ 01A2:5488
cs=0x1a2;eip=0x00548a; 	J(JMP(loc_15512));	// 13130                  jmp     loc_15512 ;~ 01A2:548A
loc_1548d:
	// 5225 
cs=0x1a2;eip=0x00548d; 	T(CMP(byte_1f82d, 0));	// 13134                  cmp     ds:byte_1F82D, 0 ;~ 01A2:548D
cs=0x1a2;eip=0x005492; 	J(JZ(loc_154b8));	// 13135                  jz      short loc_154B8 ;~ 01A2:5492
cs=0x1a2;eip=0x005494; 	T(TEST(*(raddr(ds,di+0x27)), 4));	// 13136                  test    byte ptr [di+27h], 4 ;~ 01A2:5494
cs=0x1a2;eip=0x005498; 	J(JZ(loc_154a3));	// 13137                  jz      short loc_154A3 ;~ 01A2:5498
cs=0x1a2;eip=0x00549a; 	T(MOV(si, *(dw*)(raddr(ds,di+0x0A))));	// 13138                  mov     si, [di+0Ah] ;~ 01A2:549A
cs=0x1a2;eip=0x00549d; 	T(TEST(*(raddr(ds,si+0x0F)), 1));	// 13139                  test    byte ptr [si+0Fh], 1 ;~ 01A2:549D
cs=0x1a2;eip=0x0054a1; 	J(JZ(loc_15512));	// 13140                  jz      short loc_15512 ;~ 01A2:54A1
loc_154a3:
	// 5226 
cs=0x1a2;eip=0x0054a3; 	T(INC(al));	// 13143                  inc     al ;~ 01A2:54A3
cs=0x1a2;eip=0x0054a5; 	X(MOV(*(raddr(ds,di+0x20)), al));	// 13144                  mov     [di+20h], al ;~ 01A2:54A5
cs=0x1a2;eip=0x0054a8; 	T(CMP(al, 5));	// 13145                  cmp     al, 5 ;~ 01A2:54A8
cs=0x1a2;eip=0x0054aa; 	J(JNZ(loc_15512));	// 13146                  jnz     short loc_15512 ;~ 01A2:54AA
cs=0x1a2;eip=0x0054ac; 	T(TEST(byte_1f740, 2));	// 13147                  test    ds:byte_1F740, 2 ;~ 01A2:54AC
cs=0x1a2;eip=0x0054b1; 	X(PUSHF);	// 13148                  pushf ;~ 01A2:54B1
cs=0x1a2;eip=0x0054b2; 	X(OR(byte_1f740, 2));	// 13149                  or      ds:byte_1F740, 2 ;~ 01A2:54B2
cs=0x1a2;eip=0x0054b7; 	X(POPF);	// 13150                  popf ;~ 01A2:54B7
loc_154b8:
	// 5227 
cs=0x1a2;eip=0x0054b8; 	X(PUSH(di));	// 13154                  push    di ;~ 01A2:54B8
cs=0x1a2;eip=0x0054b9; 	X(PUSH(bx));	// 13155                  push    bx ;~ 01A2:54B9
cs=0x1a2;eip=0x0054ba; 	X(PUSH(di));	// 13156                  push    di ;~ 01A2:54BA
cs=0x1a2;eip=0x0054bb; 	T(dx = di;);	// 13157                  mov     dx, di ;~ 01A2:54BB
cs=0x1a2;eip=0x0054bd; 	T(di = word_1f19e;);	// 13158                  mov     di, word_1F19E ;~ 01A2:54BD
cs=0x1a2;eip=0x0054c1; 	X(MOV(*(dw*)(raddr(ds,di)), 0));	// 13159                  mov     word ptr [di], 0 ;~ 01A2:54C1
cs=0x1a2;eip=0x0054c5; 	T(ax = word_1f394;);	// 13160                  mov     ax, ds:word_1F394 ;~ 01A2:54C5
cs=0x1a2;eip=0x0054c8; 	T(ah = al;);	// 13161                  mov     ah, al ;~ 01A2:54C8
cs=0x1a2;eip=0x0054ca; 	T(si = word_1f19a;);	// 13162                  mov     si, word_1F19A ;~ 01A2:54CA
cs=0x1a2;eip=0x0054ce; 	T(ch = 1;);	// 13163                  mov     ch, 1 ;~ 01A2:54CE
cs=0x1a2;eip=0x0054d0; 	T(MOV(al, *(raddr(ds,bx))));	// 13164                  mov     al, [bx] ;~ 01A2:54D0
cs=0x1a2;eip=0x0054d2; 	T(INC(bx));	// 13165                  inc     bx ;~ 01A2:54D2
loc_154d3:
	// 5228 
cs=0x1a2;eip=0x0054d3; 	T(CMP(dx, si));	// 13168                  cmp     dx, si ;~ 01A2:54D3
cs=0x1a2;eip=0x0054d5; 	J(JZ(loc_154e5));	// 13169                  jz      short loc_154E5 ;~ 01A2:54D5
cs=0x1a2;eip=0x0054d7; 	T(TEST(al, ch));	// 13170                  test    al, ch ;~ 01A2:54D7
cs=0x1a2;eip=0x0054d9; 	J(JNZ(loc_154e5));	// 13171                  jnz     short loc_154E5 ;~ 01A2:54D9
cs=0x1a2;eip=0x0054db; 	T(CMP(*(dw*)(raddr(ds,si)), 0));	// 13172                  cmp     word ptr [si], 0 ;~ 01A2:54DB
cs=0x1a2;eip=0x0054de; 	J(JS(loc_154e5));	// 13173                  js      short loc_154E5 ;~ 01A2:54DE
cs=0x1a2;eip=0x0054e0; 	X(MOV(*(dw*)(raddr(ds,di)), si));	// 13174                  mov     [di], si ;~ 01A2:54E0
cs=0x1a2;eip=0x0054e2; 	T(ADD(di, 2));	// 13175                  add     di, 2 ;~ 01A2:54E2
loc_154e5:
	// 5229 
cs=0x1a2;eip=0x0054e5; 	T(ADD(si, 0x32));	// 13179                  add     si, 32h ; '2' ;~ 01A2:54E5
cs=0x1a2;eip=0x0054e8; 	T(SHL(ch, 1));	// 13180                  shl     ch, 1 ;~ 01A2:54E8
cs=0x1a2;eip=0x0054ea; 	J(JNZ(loc_154f2));	// 13181                  jnz     short loc_154F2 ;~ 01A2:54EA
cs=0x1a2;eip=0x0054ec; 	T(OR(ch, 1));	// 13182                  or      ch, 1 ;~ 01A2:54EC
cs=0x1a2;eip=0x0054ef; 	T(MOV(al, *(raddr(ds,bx))));	// 13183                  mov     al, [bx] ;~ 01A2:54EF
cs=0x1a2;eip=0x0054f1; 	T(INC(bx));	// 13184                  inc     bx ;~ 01A2:54F1
loc_154f2:
	// 5230 
cs=0x1a2;eip=0x0054f2; 	T(DEC(ah));	// 13187                  dec     ah ;~ 01A2:54F2
cs=0x1a2;eip=0x0054f4; 	J(JNZ(loc_154d3));	// 13188                  jnz     short loc_154D3 ;~ 01A2:54F4
cs=0x1a2;eip=0x0054f6; 	X(MOV(*(dw*)(raddr(ds,di)), 0));	// 13189                  mov     word ptr [di], 0 ;~ 01A2:54F6
cs=0x1a2;eip=0x0054fa; 	X(POP(ax));	// 13190                  pop     ax ;~ 01A2:54FA
cs=0x1a2;eip=0x0054fb; 	X(PUSH(ax));	// 13191                  push    ax ;~ 01A2:54FB
cs=0x1a2;eip=0x0054fc; 	X(PUSH(bx));	// 13192                  push    bx ;~ 01A2:54FC
cs=0x1a2;eip=0x0054fd; 	X(PUSH(cx));	// 13193                  push    cx ;~ 01A2:54FD
cs=0x1a2;eip=0x0054fe; 	X(PUSH(dx));	// 13194                  push    dx ;~ 01A2:54FE
cs=0x1a2;eip=0x0054ff; 	X(PUSH(bp));	// 13195                  push    bp ;~ 01A2:54FF
cs=0x1a2;eip=0x005500; 	X(PUSH(si));	// 13196                  push    si ;~ 01A2:5500
cs=0x1a2;eip=0x005501; 	X(PUSH(di));	// 13197                  push    di ;~ 01A2:5501
cs=0x1a2;eip=0x005502; 	X(PUSH(es));	// 13198                  push    es ;~ 01A2:5502
cs=0x1a2;eip=0x005503; 	X(PUSH(ds));	// 13199                  push    ds ;~ 01A2:5503
cs=0x1a2;eip=0x005504; 	J(CALL(sub_15520,0));	// 13200                  call    sub_15520 ;~ 01A2:5504
cs=0x1a2;eip=0x005507; 	X(POP(ds));	// 13201                  pop     ds ;~ 01A2:5507
cs=0x1a2;eip=0x005508; 	X(POP(es));	// 13202                  pop     es ;~ 01A2:5508
cs=0x1a2;eip=0x005509; 	X(POP(di));	// 13204                  pop     di ;~ 01A2:5509
cs=0x1a2;eip=0x00550a; 	X(POP(si));	// 13205                  pop     si ;~ 01A2:550A
cs=0x1a2;eip=0x00550b; 	X(POP(bp));	// 13206                  pop     bp ;~ 01A2:550B
cs=0x1a2;eip=0x00550c; 	X(POP(dx));	// 13207                  pop     dx ;~ 01A2:550C
cs=0x1a2;eip=0x00550d; 	X(POP(cx));	// 13208                  pop     cx ;~ 01A2:550D
cs=0x1a2;eip=0x00550e; 	X(POP(bx));	// 13209                  pop     bx ;~ 01A2:550E
cs=0x1a2;eip=0x00550f; 	X(POP(ax));	// 13210                  pop     ax ;~ 01A2:550F
cs=0x1a2;eip=0x005510; 	X(POP(bx));	// 13211                  pop     bx ;~ 01A2:5510
cs=0x1a2;eip=0x005511; 	X(POP(di));	// 13212                  pop     di ;~ 01A2:5511
loc_15512:
	// 5231 
cs=0x1a2;eip=0x005512; 	T(ADD(di, 0x32));	// 13216                  add     di, 32h ; '2' ;~ 01A2:5512
cs=0x1a2;eip=0x005515; 	T(ADD(bx, 0x10));	// 13217                  add     bx, 10h ;~ 01A2:5515
cs=0x1a2;eip=0x005518; 	T(DEC(cl));	// 13218                  dec     cl ;~ 01A2:5518
cs=0x1a2;eip=0x00551a; 	J(JZ(locret_1551f));	// 13219                  jz      short locret_1551F ;~ 01A2:551A
cs=0x1a2;eip=0x00551c; 	J(JMP(loc_15479));	// 13220                  jmp     loc_15479 ;~ 01A2:551C
locret_1551f:
	// 5232 
cs=0x1a2;eip=0x00551f; 	J(RETN(0));	// 13224                  retn ;~ 01A2:551F

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1546a: 	goto loc_1546a;
        case m2c::kloc_15479: 	goto loc_15479;
        case m2c::kloc_15483: 	goto loc_15483;
        case m2c::kloc_1548d: 	goto loc_1548d;
        case m2c::kloc_154a3: 	goto loc_154a3;
        case m2c::kloc_154b8: 	goto loc_154b8;
        case m2c::kloc_154d3: 	goto loc_154d3;
        case m2c::kloc_154e5: 	goto loc_154e5;
        case m2c::kloc_154f2: 	goto loc_154f2;
        case m2c::kloc_15512: 	goto loc_15512;
        case m2c::klocret_1551f: 	goto locret_1551f;
        case m2c::ksub_15465: 	goto sub_15465;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_15520(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_15520:
    _begin:
cs=0x1a2;eip=0x005520; 	T(di = word_1f19e;);	// 13232                  mov     di, word_1F19E ;~ 01A2:5520
cs=0x1a2;eip=0x005524; 	X(word_1f8be = di;);	// 13233                  mov     ds:word_1F8BE, di ;~ 01A2:5524
cs=0x1a2;eip=0x005528; 	T(di = word_1f208;);	// 13234                  mov     di, word_1F208 ;~ 01A2:5528
cs=0x1a2;eip=0x00552c; 	X(word_1f8bc = ax;);	// 13235                  mov     ds:word_1F8BC, ax ;~ 01A2:552C
cs=0x1a2;eip=0x00552f; 	T(XOR(cl, cl));	// 13236                  xor     cl, cl ;~ 01A2:552F
cs=0x1a2;eip=0x005531; 	T(si = ax;);	// 13237                  mov     si, ax ;~ 01A2:5531
cs=0x1a2;eip=0x005533; 	T(MOV(bp, *(dw*)(raddr(ds,si+0x0E))));	// 13238                  mov     bp, [si+0Eh] ;~ 01A2:5533
cs=0x1a2;eip=0x005536; 	T(CMP(bp, 0));	// 13239                  cmp     bp, 0 ;~ 01A2:5536
cs=0x1a2;eip=0x005539; 	J(JNS(loc_1553e));	// 13240                  jns     short loc_1553E ;~ 01A2:5539
cs=0x1a2;eip=0x00553b; 	J(JMP(locret_1570a));	// 13241                  jmp     locret_1570A ;~ 01A2:553B
loc_1553e:
	// 5233 
cs=0x1a2;eip=0x00553e; 	T(MOV(dl, *(raddr(ds,si+0x10))));	// 13245                  mov     dl, [si+10h] ;~ 01A2:553E
cs=0x1a2;eip=0x005541; 	T(MOV(bx, *(dw*)(raddr(ds,si+0x24))));	// 13246                  mov     bx, [si+24h] ;~ 01A2:5541
cs=0x1a2;eip=0x005544; 	T(MOV(dh, *(raddr(ds,si+0x13))));	// 13247                  mov     dh, [si+13h] ;~ 01A2:5544
cs=0x1a2;eip=0x005547; 	X(MOV(*(dw*)(raddr(ds,di)), si));	// 13248                  mov     [di], si ;~ 01A2:5547
cs=0x1a2;eip=0x005549; 	T(ADD(di, 2));	// 13249                  add     di, 2 ;~ 01A2:5549
cs=0x1a2;eip=0x00554c; 	X(word_1f8c0 = di;);	// 13250                  mov     ds:word_1F8C0, di ;~ 01A2:554C
cs=0x1a2;eip=0x005550; 	T(si = word_1f8be;);	// 13251                  mov     si, ds:word_1F8BE ;~ 01A2:5550
cs=0x1a2;eip=0x005554; 	T(ax = ds;);	// 13252                  mov     ax, ds ;~ 01A2:5554
cs=0x1a2;eip=0x005556; 	T(es = ax;);	// 13253                  mov     es, ax ;~ 01A2:5556
loc_15558:
	// 5234 
cs=0x1a2;eip=0x005558; 	T(LODSW);	// 13258                  lodsw ;~ 01A2:5558
cs=0x1a2;eip=0x005559; 	T(CMP(ax, 0));	// 13259                  cmp     ax, 0 ;~ 01A2:5559
cs=0x1a2;eip=0x00555c; 	J(JZ(loc_1559e));	// 13260                  jz      short loc_1559E ;~ 01A2:555C
cs=0x1a2;eip=0x00555e; 	J(JS(loc_15558));	// 13261                  js      short loc_15558 ;~ 01A2:555E
cs=0x1a2;eip=0x005560; 	T(CMP(ax, word_1f8bc));	// 13262                  cmp     ax, ds:word_1F8BC ;~ 01A2:5560
cs=0x1a2;eip=0x005564; 	J(JZ(loc_15558));	// 13263                  jz      short loc_15558 ;~ 01A2:5564
cs=0x1a2;eip=0x005566; 	T(di = ax;);	// 13264                  mov     di, ax ;~ 01A2:5566
cs=0x1a2;eip=0x005568; 	T(CMP(byte_1f82d, 0));	// 13265                  cmp     ds:byte_1F82D, 0 ;~ 01A2:5568
cs=0x1a2;eip=0x00556d; 	J(JZ(loc_15575));	// 13266                  jz      short loc_15575 ;~ 01A2:556D
cs=0x1a2;eip=0x00556f; 	T(CMP(*(raddr(ds,di+0x20)), 5));	// 13267                  cmp     byte ptr [di+20h], 5 ;~ 01A2:556F
cs=0x1a2;eip=0x005573; 	J(JNZ(loc_15558));	// 13268                  jnz     short loc_15558 ;~ 01A2:5573
loc_15575:
	// 5235 
cs=0x1a2;eip=0x005575; 	T(CMP(*(dw*)(raddr(ds,di+0x0E)), 0));	// 13271                  cmp     word ptr [di+0Eh], 0 ;~ 01A2:5575
cs=0x1a2;eip=0x005579; 	J(JS(loc_15558));	// 13272                  js      short loc_15558 ;~ 01A2:5579
cs=0x1a2;eip=0x00557b; 	T(CMP(dl, *(raddr(ds,di+0x13))));	// 13273                  cmp     dl, [di+13h] ;~ 01A2:557B
cs=0x1a2;eip=0x00557e; 	J(JNC(loc_15558));	// 13274                  jnb     short loc_15558 ;~ 01A2:557E
cs=0x1a2;eip=0x005580; 	T(CMP(dh, *(raddr(ds,di+0x10))));	// 13275                  cmp     dh, [di+10h] ;~ 01A2:5580
cs=0x1a2;eip=0x005583; 	J(JBE(loc_15558));	// 13276                  jbe     short loc_15558 ;~ 01A2:5583
cs=0x1a2;eip=0x005585; 	T(CMP(bp, *(dw*)(raddr(ds,di+0x24))));	// 13277                  cmp     bp, [di+24h] ;~ 01A2:5585
cs=0x1a2;eip=0x005588; 	J(JNC(loc_15558));	// 13278                  jnb     short loc_15558 ;~ 01A2:5588
cs=0x1a2;eip=0x00558a; 	T(CMP(bx, *(dw*)(raddr(ds,di+0x0E))));	// 13279                  cmp     bx, [di+0Eh] ;~ 01A2:558A
cs=0x1a2;eip=0x00558d; 	J(JBE(loc_15558));	// 13280                  jbe     short loc_15558 ;~ 01A2:558D
cs=0x1a2;eip=0x00558f; 	T(INC(cl));	// 13281                  inc     cl ;~ 01A2:558F
cs=0x1a2;eip=0x005591; 	T(ax = di;);	// 13282                  mov     ax, di ;~ 01A2:5591
cs=0x1a2;eip=0x005593; 	T(di = word_1f8c0;);	// 13283                  mov     di, ds:word_1F8C0 ;~ 01A2:5593
cs=0x1a2;eip=0x005597; 	X(STOSW);	// 13284                  stosw ;~ 01A2:5597
cs=0x1a2;eip=0x005598; 	X(word_1f8c0 = di;);	// 13285                  mov     ds:word_1F8C0, di ;~ 01A2:5598
cs=0x1a2;eip=0x00559c; 	J(JMP(loc_15558));	// 13286                  jmp     short loc_15558 ;~ 01A2:559C
loc_1559e:
	// 5236 
cs=0x1a2;eip=0x00559e; 	T(di = word_1f8c0;);	// 13290                  mov     di, ds:word_1F8C0 ;~ 01A2:559E
cs=0x1a2;eip=0x0055a2; 	X(MOV(*(dw*)(raddr(ds,di)), 0x0FFFF));	// 13291                  mov     word ptr [di], 0FFFFh ;~ 01A2:55A2
cs=0x1a2;eip=0x0055a6; 	X(PUSH(cx));	// 13292                  push    cx ;~ 01A2:55A6
cs=0x1a2;eip=0x0055a7; 	T(si = word_1f208;);	// 13293                  mov     si, word_1F208 ;~ 01A2:55A7
cs=0x1a2;eip=0x0055ab; 	T(MOV(si, *(dw*)(raddr(ds,si))));	// 13294                  mov     si, [si] ;~ 01A2:55AB
cs=0x1a2;eip=0x0055ad; 	X(POP(cx));	// 13295                  pop     cx ;~ 01A2:55AD
cs=0x1a2;eip=0x0055ae; 	T(OR(cl, cl));	// 13296                  or      cl, cl ;~ 01A2:55AE
cs=0x1a2;eip=0x0055b0; 	J(JNZ(loc_155e3));	// 13297                  jnz     short loc_155E3 ;~ 01A2:55B0
cs=0x1a2;eip=0x0055b2; 	T(si = word_1f208;);	// 13298                  mov     si, word_1F208 ;~ 01A2:55B2
cs=0x1a2;eip=0x0055b6; 	T(MOV(di, *(dw*)(raddr(ds,si))));	// 13299                  mov     di, [si] ;~ 01A2:55B6
cs=0x1a2;eip=0x0055b8; 	T(MOV(bx, *(dw*)(raddr(ds,di+0x0C))));	// 13300                  mov     bx, [di+0Ch] ;~ 01A2:55B8
cs=0x1a2;eip=0x0055bb; 	T(MOV(cl, *(raddr(ds,di+0x28))));	// 13301                  mov     cl, [di+28h] ;~ 01A2:55BB
cs=0x1a2;eip=0x0055be; 	T(MOV(ch, *(raddr(ds,di+0x29))));	// 13302                  mov     ch, [di+29h] ;~ 01A2:55BE
cs=0x1a2;eip=0x0055c1; 	T(CMP(cx, 0));	// 13303                  cmp     cx, 0 ;~ 01A2:55C1
cs=0x1a2;eip=0x0055c4; 	J(JZ(loc_155e0));	// 13304                  jz      short loc_155E0 ;~ 01A2:55C4
cs=0x1a2;eip=0x0055c6; 	T(dl = cl;);	// 13305                  mov     dl, cl ;~ 01A2:55C6
cs=0x1a2;eip=0x0055c8; 	T(MOV(cl, *(raddr(ds,di+0x11))));	// 13306                  mov     cl, [di+11h] ;~ 01A2:55C8
cs=0x1a2;eip=0x0055cb; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x30))));	// 13307                  mov     ax, [di+30h] ;~ 01A2:55CB
cs=0x1a2;eip=0x0055ce; 	X(*(dw*)(&unk_6fb96) = ax;);	// 13308                  mov     word ptr ss:unk_6FB96, ax ;~ 01A2:55CE
cs=0x1a2;eip=0x0055d2; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x2A))));	// 13309                  mov     ax, [di+2Ah] ;~ 01A2:55D2
cs=0x1a2;eip=0x0055d5; 	X(*(dw*)(((db*)&off_1f8c8)+2) = ax;);	// 13310                  mov     word ptr ds:off_1F8C8+2, ax ;~ 01A2:55D5
cs=0x1a2;eip=0x0055d8; 	T(MOV(si, *(dw*)(raddr(ds,di+0x2C))));	// 13311                  mov     si, [di+2Ch] ;~ 01A2:55D8
cs=0x1a2;eip=0x0055db; 	T(di = bx;);	// 13312                  mov     di, bx ;~ 01A2:55DB
cs=0x1a2;eip=0x0055dd; 	J(CALL(sub_18e71,0));	// 13313                  call    sub_18E71 ;~ 01A2:55DD
loc_155e0:
	// 5237 
cs=0x1a2;eip=0x0055e0; 	J(JMP(locret_1570a));	// 13316                  jmp     locret_1570A ;~ 01A2:55E0
loc_155e3:
	// 5238 
cs=0x1a2;eip=0x0055e3; 	T(si = word_1f208;);	// 13320                  mov     si, word_1F208 ;~ 01A2:55E3
cs=0x1a2;eip=0x0055e7; 	T(LODSW);	// 13321                  lodsw ;~ 01A2:55E7
cs=0x1a2;eip=0x0055e8; 	T(di = ax;);	// 13322                  mov     di, ax ;~ 01A2:55E8
cs=0x1a2;eip=0x0055ea; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x30))));	// 13323                  mov     ax, [di+30h] ;~ 01A2:55EA
cs=0x1a2;eip=0x0055ed; 	X(*(dw*)(&unk_6fb96) = ax;);	// 13324                  mov     word ptr ss:unk_6FB96, ax ;~ 01A2:55ED
cs=0x1a2;eip=0x0055f1; 	T(MOV(cl, *(raddr(ds,di+0x28))));	// 13325                  mov     cl, [di+28h] ;~ 01A2:55F1
cs=0x1a2;eip=0x0055f4; 	T(MOV(ch, *(raddr(ds,di+0x29))));	// 13326                  mov     ch, [di+29h] ;~ 01A2:55F4
cs=0x1a2;eip=0x0055f7; 	T(XOR(dh, dh));	// 13327                  xor     dh, dh ;~ 01A2:55F7
cs=0x1a2;eip=0x0055f9; 	T(bx = dx;);	// 13328                  mov     bx, dx ;~ 01A2:55F9
cs=0x1a2;eip=0x0055fb; 	T(SHL(dx, 1));	// 13329                  shl     dx, 1 ;~ 01A2:55FB
cs=0x1a2;eip=0x0055fd; 	T(SHL(dx, 1));	// 13330                  shl     dx, 1 ;~ 01A2:55FD
cs=0x1a2;eip=0x0055ff; 	T(SHL(dx, 1));	// 13331                  shl     dx, 1 ;~ 01A2:55FF
cs=0x1a2;eip=0x005601; 	T(ax = dx;);	// 13332                  mov     ax, dx ;~ 01A2:5601
cs=0x1a2;eip=0x005603; 	T(SHL(dx, 1));	// 13333                  shl     dx, 1 ;~ 01A2:5603
cs=0x1a2;eip=0x005605; 	T(SHL(dx, 1));	// 13334                  shl     dx, 1 ;~ 01A2:5605
cs=0x1a2;eip=0x005607; 	T(ADD(dx, ax));	// 13335                  add     dx, ax ;~ 01A2:5607
cs=0x1a2;eip=0x005609; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x0C))));	// 13336                  mov     ax, [di+0Ch] ;~ 01A2:5609
cs=0x1a2;eip=0x00560c; 	T(bp = word_1f210;);	// 13337                  mov     bp, word_1F210 ;~ 01A2:560C
cs=0x1a2;eip=0x005610; 	T(SUB(ax, dx));	// 13338                  sub     ax, dx ;~ 01A2:5610
cs=0x1a2;eip=0x005612; 	X(PUSH(ax));	// 13339                  push    ax ;~ 01A2:5612
cs=0x1a2;eip=0x005613; 	X(PUSH(bp));	// 13340                  push    bp ;~ 01A2:5613
cs=0x1a2;eip=0x005614; 	X(PUSH(di));	// 13341                  push    di ;~ 01A2:5614
cs=0x1a2;eip=0x005615; 	X(PUSH(bx));	// 13342                  push    bx ;~ 01A2:5615
cs=0x1a2;eip=0x005616; 	X(PUSH(dx));	// 13343                  push    dx ;~ 01A2:5616
cs=0x1a2;eip=0x005617; 	X(PUSH(cx));	// 13344                  push    cx ;~ 01A2:5617
cs=0x1a2;eip=0x005618; 	X(PUSH(si));	// 13345                  push    si ;~ 01A2:5618
cs=0x1a2;eip=0x005619; 	T(dl = cl;);	// 13346                  mov     dl, cl ;~ 01A2:5619
cs=0x1a2;eip=0x00561b; 	T(MOV(cl, *(raddr(ds,di+0x11))));	// 13347                  mov     cl, [di+11h] ;~ 01A2:561B
cs=0x1a2;eip=0x00561e; 	T(si = ax;);	// 13348                  mov     si, ax ;~ 01A2:561E
cs=0x1a2;eip=0x005620; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x2A))));	// 13349                  mov     ax, [di+2Ah] ;~ 01A2:5620
cs=0x1a2;eip=0x005623; 	X(*(dw*)(((db*)&off_1f8c8)+2) = ax;);	// 13350                  mov     word ptr ds:off_1F8C8+2, ax ;~ 01A2:5623
cs=0x1a2;eip=0x005626; 	T(MOV(di, *(dw*)(raddr(ds,di+0x2C))));	// 13351                  mov     di, [di+2Ch] ;~ 01A2:5626
cs=0x1a2;eip=0x005629; 	T(XCHG(di, si));	// 13352                  xchg    di, si ;~ 01A2:5629
cs=0x1a2;eip=0x00562b; 	J(CALL(__dispatch_call,*((byte_19ee2)+0x18)));	// 13353                  call    near ptr byte_19EE2+18h ;~ 01A2:562B
cs=0x1a2;eip=0x00562e; 	X(POP(si));	// 13354                  pop     si ;~ 01A2:562E
cs=0x1a2;eip=0x00562f; 	X(POP(cx));	// 13355                  pop     cx ;~ 01A2:562F
cs=0x1a2;eip=0x005630; 	X(POP(dx));	// 13356                  pop     dx ;~ 01A2:5630
cs=0x1a2;eip=0x005631; 	X(POP(bx));	// 13357                  pop     bx ;~ 01A2:5631
cs=0x1a2;eip=0x005632; 	X(byte_1f862 = ch;);	// 13358                  mov     ds:byte_1F862, ch ;~ 01A2:5632
cs=0x1a2;eip=0x005636; 	X(word_1f8c0 = si;);	// 13359                  mov     ds:word_1F8C0, si ;~ 01A2:5636
cs=0x1a2;eip=0x00563a; 	X(word_1f8c2 = dx;);	// 13360                  mov     ds:word_1F8C2, dx ;~ 01A2:563A
cs=0x1a2;eip=0x00563e; 	X(word_1f8bc = bx;);	// 13361                  mov     ds:word_1F8BC, bx ;~ 01A2:563E
loc_15642:
	// 5239 
cs=0x1a2;eip=0x005642; 	T(si = word_1f8c0;);	// 13364                  mov     si, ds:word_1F8C0 ;~ 01A2:5642
cs=0x1a2;eip=0x005646; 	T(LODSW);	// 13365                  lodsw ;~ 01A2:5646
cs=0x1a2;eip=0x005647; 	T(OR(ax, ax));	// 13366                  or      ax, ax ;~ 01A2:5647
cs=0x1a2;eip=0x005649; 	J(JNS(loc_1564e));	// 13367                  jns     short loc_1564E ;~ 01A2:5649
cs=0x1a2;eip=0x00564b; 	J(JMP(loc_156e5));	// 13368                  jmp     loc_156E5 ;~ 01A2:564B
loc_1564e:
	// 5240 
cs=0x1a2;eip=0x00564e; 	X(word_1f8c0 = si;);	// 13372                  mov     ds:word_1F8C0, si ;~ 01A2:564E
cs=0x1a2;eip=0x005652; 	T(di = ax;);	// 13373                  mov     di, ax ;~ 01A2:5652
cs=0x1a2;eip=0x005654; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x30))));	// 13374                  mov     ax, [di+30h] ;~ 01A2:5654
cs=0x1a2;eip=0x005657; 	X(*(dw*)(&unk_6fb96) = ax;);	// 13375                  mov     word ptr ss:unk_6FB96, ax ;~ 01A2:5657
cs=0x1a2;eip=0x00565b; 	T(XOR(bh, bh));	// 13376                  xor     bh, bh ;~ 01A2:565B
cs=0x1a2;eip=0x00565d; 	T(MOV(bl, *(raddr(ds,di+0x10))));	// 13377                  mov     bl, [di+10h] ;~ 01A2:565D
cs=0x1a2;eip=0x005660; 	T(SUB(bx, word_1f8bc));	// 13378                  sub     bx, ds:word_1F8BC ;~ 01A2:5660
cs=0x1a2;eip=0x005664; 	J(JS(loc_1568e));	// 13379                  js      short loc_1568E ;~ 01A2:5664
cs=0x1a2;eip=0x005666; 	T(bh = bl;);	// 13380                  mov     bh, bl ;~ 01A2:5666
cs=0x1a2;eip=0x005668; 	T(MOV(si, *(dw*)(raddr(ds,di+0x0C))));	// 13381                  mov     si, [di+0Ch] ;~ 01A2:5668
cs=0x1a2;eip=0x00566b; 	T(SUB(si, word_1f8c2));	// 13382                  sub     si, ds:word_1F8C2 ;~ 01A2:566B
cs=0x1a2;eip=0x00566f; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x2A))));	// 13383                  mov     ax, [di+2Ah] ;~ 01A2:566F
cs=0x1a2;eip=0x005672; 	X(*(dw*)(((db*)&off_1f8c8)+2) = ax;);	// 13384                  mov     word ptr ds:off_1F8C8+2, ax ;~ 01A2:5672
cs=0x1a2;eip=0x005675; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x2C))));	// 13385                  mov     ax, [di+2Ch] ;~ 01A2:5675
cs=0x1a2;eip=0x005678; 	T(MOV(dl, *(raddr(ds,di+0x28))));	// 13386                  mov     dl, [di+28h] ;~ 01A2:5678
cs=0x1a2;eip=0x00567b; 	T(MOV(ch, *(raddr(ds,di+0x29))));	// 13387                  mov     ch, [di+29h] ;~ 01A2:567B
cs=0x1a2;eip=0x00567e; 	T(ADD(bl, ch));	// 13388                  add     bl, ch ;~ 01A2:567E
cs=0x1a2;eip=0x005680; 	T(CMP(bl, byte_1f862));	// 13389                  cmp     bl, ds:byte_1F862 ;~ 01A2:5680
cs=0x1a2;eip=0x005684; 	J(JBE(loc_156d5));	// 13390                  jbe     short loc_156D5 ;~ 01A2:5684
cs=0x1a2;eip=0x005686; 	T(ch = byte_1f862;);	// 13391                  mov     ch, ds:byte_1F862 ;~ 01A2:5686
cs=0x1a2;eip=0x00568a; 	T(SUB(ch, bh));	// 13392                  sub     ch, bh ;~ 01A2:568A
cs=0x1a2;eip=0x00568c; 	J(JMP(loc_156d5));	// 13393                  jmp     short loc_156D5 ;~ 01A2:568C
loc_1568e:
	// 5241 
cs=0x1a2;eip=0x00568e; 	T(MOV(si, *(dw*)(raddr(ds,di+0x0C))));	// 13397                  mov     si, [di+0Ch] ;~ 01A2:568E
cs=0x1a2;eip=0x005691; 	T(SUB(si, word_1f8c2));	// 13398                  sub     si, ds:word_1F8C2 ;~ 01A2:5691
cs=0x1a2;eip=0x005695; 	T(NEG(bx));	// 13399                  neg     bx ;~ 01A2:5695
cs=0x1a2;eip=0x005697; 	T(dx = bx;);	// 13400                  mov     dx, bx ;~ 01A2:5697
cs=0x1a2;eip=0x005699; 	T(SHL(dx, 1));	// 13401                  shl     dx, 1 ;~ 01A2:5699
cs=0x1a2;eip=0x00569b; 	T(SHL(dx, 1));	// 13402                  shl     dx, 1 ;~ 01A2:569B
cs=0x1a2;eip=0x00569d; 	T(SHL(dx, 1));	// 13403                  shl     dx, 1 ;~ 01A2:569D
cs=0x1a2;eip=0x00569f; 	T(ax = dx;);	// 13404                  mov     ax, dx ;~ 01A2:569F
cs=0x1a2;eip=0x0056a1; 	T(SHL(dx, 1));	// 13405                  shl     dx, 1 ;~ 01A2:56A1
cs=0x1a2;eip=0x0056a3; 	T(SHL(dx, 1));	// 13406                  shl     dx, 1 ;~ 01A2:56A3
cs=0x1a2;eip=0x0056a5; 	T(ADD(dx, ax));	// 13407                  add     dx, ax ;~ 01A2:56A5
cs=0x1a2;eip=0x0056a7; 	T(ADD(si, dx));	// 13408                  add     si, dx ;~ 01A2:56A7
cs=0x1a2;eip=0x0056a9; 	T(dx = bx;);	// 13409                  mov     dx, bx ;~ 01A2:56A9
cs=0x1a2;eip=0x0056ab; 	T(MOV(cl, *(raddr(ds,di+0x28))));	// 13410                  mov     cl, [di+28h] ;~ 01A2:56AB
cs=0x1a2;eip=0x0056ae; 	T(MOV(ch, *(raddr(ds,di+0x29))));	// 13411                  mov     ch, [di+29h] ;~ 01A2:56AE
cs=0x1a2;eip=0x0056b1; 	T(SHL(bx, 1));	// 13412                  shl     bx, 1 ;~ 01A2:56B1
cs=0x1a2;eip=0x0056b3; 	T(al = cl;);	// 13413                  mov     al, cl ;~ 01A2:56B3
cs=0x1a2;eip=0x0056b5; 	T(XOR(ah, ah));	// 13414                  xor     ah, ah ;~ 01A2:56B5
cs=0x1a2;eip=0x0056b7; 	X(PUSH(dx));	// 13415                  push    dx ;~ 01A2:56B7
cs=0x1a2;eip=0x0056b8; 	T(MUL1_2(bx));	// 13416                  mul     bx ;~ 01A2:56B8
cs=0x1a2;eip=0x0056ba; 	X(POP(dx));	// 13417                  pop     dx ;~ 01A2:56BA
cs=0x1a2;eip=0x0056bb; 	T(MOV(bx, *(dw*)(raddr(ds,di+0x2A))));	// 13418                  mov     bx, [di+2Ah] ;~ 01A2:56BB
cs=0x1a2;eip=0x0056be; 	X(*(dw*)(((db*)&off_1f8c8)+2) = bx;);	// 13419                  mov     word ptr ds:off_1F8C8+2, bx ;~ 01A2:56BE
cs=0x1a2;eip=0x0056c2; 	T(MOV(bx, *(dw*)(raddr(ds,di+0x2C))));	// 13420                  mov     bx, [di+2Ch] ;~ 01A2:56C2
cs=0x1a2;eip=0x0056c5; 	T(ADD(ax, bx));	// 13421                  add     ax, bx ;~ 01A2:56C5
cs=0x1a2;eip=0x0056c7; 	T(XCHG(dl, cl));	// 13422                  xchg    dl, cl ;~ 01A2:56C7
cs=0x1a2;eip=0x0056c9; 	T(SUB(ch, cl));	// 13423                  sub     ch, cl ;~ 01A2:56C9
cs=0x1a2;eip=0x0056cb; 	T(CMP(ch, byte_1f862));	// 13424                  cmp     ch, ds:byte_1F862 ;~ 01A2:56CB
cs=0x1a2;eip=0x0056cf; 	J(JBE(loc_156d5));	// 13425                  jbe     short loc_156D5 ;~ 01A2:56CF
cs=0x1a2;eip=0x0056d1; 	T(ch = byte_1f862;);	// 13426                  mov     ch, ds:byte_1F862 ;~ 01A2:56D1
loc_156d5:
	// 5242 
cs=0x1a2;eip=0x0056d5; 	T(bp = word_1f210;);	// 13430                  mov     bp, word_1F210 ;~ 01A2:56D5
cs=0x1a2;eip=0x0056d9; 	T(MOV(cl, *(raddr(ds,di+0x11))));	// 13431                  mov     cl, [di+11h] ;~ 01A2:56D9
cs=0x1a2;eip=0x0056dc; 	T(XCHG(ax, si));	// 13432                  xchg    ax, si ;~ 01A2:56DC
cs=0x1a2;eip=0x0056dd; 	T(di = ax;);	// 13433                  mov     di, ax ;~ 01A2:56DD
cs=0x1a2;eip=0x0056df; 	J(CALL(_group29,m2c::kloc_1a623));	// 13434                  call    loc_1A623 ;~ 01A2:56DF
cs=0x1a2;eip=0x0056e2; 	J(JMP(loc_15642));	// 13435                  jmp     loc_15642 ;~ 01A2:56E2
loc_156e5:
	// 5243 
cs=0x1a2;eip=0x0056e5; 	X(POP(di));	// 13439                  pop     di ;~ 01A2:56E5
cs=0x1a2;eip=0x0056e6; 	X(POP(bp));	// 13440                  pop     bp ;~ 01A2:56E6
cs=0x1a2;eip=0x0056e7; 	X(POP(bx));	// 13441                  pop     bx ;~ 01A2:56E7
cs=0x1a2;eip=0x0056e8; 	X(*(dw*)(((db*)&off_1f8c8)+2) = bp;);	// 13442                  mov     word ptr ds:off_1F8C8+2, bp ;~ 01A2:56E8
cs=0x1a2;eip=0x0056ec; 	T(MOV(si, *(dw*)(raddr(ds,di+0x0C))));	// 13443                  mov     si, [di+0Ch] ;~ 01A2:56EC
cs=0x1a2;eip=0x0056ef; 	T(MOV(dl, *(raddr(ds,di+0x28))));	// 13444                  mov     dl, [di+28h] ;~ 01A2:56EF
cs=0x1a2;eip=0x0056f2; 	T(MOV(ch, *(raddr(ds,di+0x29))));	// 13445                  mov     ch, [di+29h] ;~ 01A2:56F2
cs=0x1a2;eip=0x0056f5; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x30))));	// 13446                  mov     ax, [di+30h] ;~ 01A2:56F5
cs=0x1a2;eip=0x0056f8; 	X(*(dw*)(&unk_6fb96) = ax;);	// 13447                  mov     word ptr ss:unk_6FB96, ax ;~ 01A2:56F8
cs=0x1a2;eip=0x0056fc; 	T(bp = *(dw*)(((db*)&seg_1f171)+1););	// 13448                  mov     bp, seg_1F171+1 ;~ 01A2:56FC
cs=0x1a2;eip=0x005700; 	T(MOV(cl, *(raddr(ds,di+0x11))));	// 13449                  mov     cl, [di+11h] ;~ 01A2:5700
cs=0x1a2;eip=0x005703; 	T(di = bx;);	// 13450                  mov     di, bx ;~ 01A2:5703
cs=0x1a2;eip=0x005705; 	T(XCHG(si, di));	// 13451                  xchg    si, di ;~ 01A2:5705
cs=0x1a2;eip=0x005707; 	J(CALL(sub_1a91c,0));	// 13452                  call    sub_1A91C ;~ 01A2:5707
locret_1570a:
	// 5244 
cs=0x1a2;eip=0x00570a; 	J(RETN(0));	// 13456                  retn ;~ 01A2:570A

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1553e: 	goto loc_1553e;
        case m2c::kloc_15558: 	goto loc_15558;
        case m2c::kloc_15575: 	goto loc_15575;
        case m2c::kloc_1559e: 	goto loc_1559e;
        case m2c::kloc_155e0: 	goto loc_155e0;
        case m2c::kloc_155e3: 	goto loc_155e3;
        case m2c::kloc_15642: 	goto loc_15642;
        case m2c::kloc_1564e: 	goto loc_1564e;
        case m2c::kloc_1568e: 	goto loc_1568e;
        case m2c::kloc_156d5: 	goto loc_156d5;
        case m2c::kloc_156e5: 	goto loc_156e5;
        case m2c::klocret_1570a: 	goto locret_1570a;
        case m2c::ksub_15520: 	goto sub_15520;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1570b(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1570b:
    _begin:
cs=0x1a2;eip=0x00570b; 	T(cx = word_1f394;);	// 13465                  mov     cx, ds:word_1F394 ;~ 01A2:570B
cs=0x1a2;eip=0x00570f; 	T(si = word_1f19a;);	// 13466                  mov     si, word_1F19A ;~ 01A2:570F
loc_15713:
	// 5245 
cs=0x1a2;eip=0x005713; 	T(CMP(*(dw*)(raddr(ds,si)), 0));	// 13469                  cmp     word ptr [si], 0 ;~ 01A2:5713
cs=0x1a2;eip=0x005716; 	J(JS(loc_15725));	// 13470                  js      short loc_15725 ;~ 01A2:5716
cs=0x1a2;eip=0x005718; 	T(CMP(*(dw*)(raddr(ds,si+0x0C)), 0));	// 13471                  cmp     word ptr [si+0Ch], 0 ;~ 01A2:5718
cs=0x1a2;eip=0x00571c; 	J(JNZ(loc_15725));	// 13472                  jnz     short loc_15725 ;~ 01A2:571C
cs=0x1a2;eip=0x00571e; 	X(PUSH(cx));	// 13473                  push    cx ;~ 01A2:571E
cs=0x1a2;eip=0x00571f; 	X(PUSH(si));	// 13474                  push    si ;~ 01A2:571F
cs=0x1a2;eip=0x005720; 	J(CALL(sub_15a61,0));	// 13475                  call    sub_15A61 ;~ 01A2:5720
cs=0x1a2;eip=0x005723; 	X(POP(si));	// 13476                  pop     si ;~ 01A2:5723
cs=0x1a2;eip=0x005724; 	X(POP(cx));	// 13477                  pop     cx ;~ 01A2:5724
loc_15725:
	// 5246 
cs=0x1a2;eip=0x005725; 	T(ADD(si, 0x32));	// 13481                  add     si, 32h ; '2' ;~ 01A2:5725
cs=0x1a2;eip=0x005728; 	J(LOOP(loc_15713));	// 13482                  loop    loc_15713 ;~ 01A2:5728
cs=0x1a2;eip=0x00572a; 	J(RETN(0));	// 13483                  retn ;~ 01A2:572A

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_15713: 	goto loc_15713;
        case m2c::kloc_15725: 	goto loc_15725;
        case m2c::ksub_1570b: 	goto sub_1570b;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1572b(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1572b:
    _begin:
cs=0x1a2;eip=0x00572b; 	T(si = word_1f19a;);	// 13493                  mov     si, word_1F19A ;~ 01A2:572B
cs=0x1a2;eip=0x00572f; 	T(cx = word_1f390;);	// 13494                  mov     cx, ds:word_1F390 ;~ 01A2:572F
cs=0x1a2;eip=0x005733; 	T(OR(cx, cx));	// 13495                  or      cx, cx ;~ 01A2:5733
cs=0x1a2;eip=0x005735; 	J(JS(locret_15779));	// 13496                  js      short locret_15779 ;~ 01A2:5735
cs=0x1a2;eip=0x005737; 	J(JMP(loc_1573c));	// 13497                  jmp     short loc_1573C ;~ 01A2:5737
loc_15739:
	// 5247 
cs=0x1a2;eip=0x005739; 	T(ADD(si, 0x32));	// 13502                  add     si, 32h ; '2' ;~ 01A2:5739
loc_1573c:
	// 5248 
cs=0x1a2;eip=0x00573c; 	T(CMP(*(dw*)(raddr(ds,si)), 0));	// 13506                  cmp     word ptr [si], 0 ;~ 01A2:573C
cs=0x1a2;eip=0x00573f; 	J(JS(loc_15739));	// 13507                  js      short loc_15739 ;~ 01A2:573F
cs=0x1a2;eip=0x005741; 	T(TEST(*(raddr(ds,si+0x27)), 1));	// 13508                  test    byte ptr [si+27h], 1 ;~ 01A2:5741
cs=0x1a2;eip=0x005745; 	J(JZ(loc_15739));	// 13509                  jz      short loc_15739 ;~ 01A2:5745
cs=0x1a2;eip=0x005747; 	T(CMP(*(raddr(ds,si+5)), 0));	// 13510                  cmp     byte ptr [si+5], 0 ;~ 01A2:5747
cs=0x1a2;eip=0x00574b; 	J(JZ(loc_15774));	// 13511                  jz      short loc_15774 ;~ 01A2:574B
cs=0x1a2;eip=0x00574d; 	T(CMP(*(dw*)(raddr(ds,si+0x18)), 0));	// 13512                  cmp     word ptr [si+18h], 0 ;~ 01A2:574D
cs=0x1a2;eip=0x005751; 	J(JNZ(loc_15774));	// 13513                  jnz     short loc_15774 ;~ 01A2:5751
cs=0x1a2;eip=0x005753; 	T(CMP(*(dw*)(raddr(ds,si+0x1A)), 0));	// 13514                  cmp     word ptr [si+1Ah], 0 ;~ 01A2:5753
cs=0x1a2;eip=0x005757; 	J(JNZ(loc_15774));	// 13515                  jnz     short loc_15774 ;~ 01A2:5757
cs=0x1a2;eip=0x005759; 	T(TEST(*(raddr(ds,si+0x12)), 2));	// 13516                  test    byte ptr [si+12h], 2 ;~ 01A2:5759
cs=0x1a2;eip=0x00575d; 	X(PUSHF);	// 13517                  pushf ;~ 01A2:575D
cs=0x1a2;eip=0x00575e; 	X(OR(*(raddr(ds,si+0x12)), 2));	// 13518                  or      byte ptr [si+12h], 2 ;~ 01A2:575E
cs=0x1a2;eip=0x005762; 	X(POPF);	// 13519                  popf ;~ 01A2:5762
cs=0x1a2;eip=0x005763; 	X(PUSH(si));	// 13520                  push    si ;~ 01A2:5763
cs=0x1a2;eip=0x005764; 	X(PUSH(cx));	// 13521                  push    cx ;~ 01A2:5764
cs=0x1a2;eip=0x005765; 	J(CALL(sub_16bfc,0));	// 13522                  call    sub_16BFC ;~ 01A2:5765
cs=0x1a2;eip=0x005768; 	X(POP(cx));	// 13523                  pop     cx ;~ 01A2:5768
cs=0x1a2;eip=0x005769; 	X(POP(si));	// 13524                  pop     si ;~ 01A2:5769
cs=0x1a2;eip=0x00576a; 	T(TEST(*(raddr(ds,si+0x12)), 1));	// 13525                  test    byte ptr [si+12h], 1 ;~ 01A2:576A
cs=0x1a2;eip=0x00576e; 	X(PUSHF);	// 13526                  pushf ;~ 01A2:576E
cs=0x1a2;eip=0x00576f; 	X(OR(*(raddr(ds,si+0x12)), 1));	// 13527                  or      byte ptr [si+12h], 1 ;~ 01A2:576F
cs=0x1a2;eip=0x005773; 	X(POPF);	// 13528                  popf ;~ 01A2:5773
loc_15774:
	// 5249 
cs=0x1a2;eip=0x005774; 	T(ADD(si, 0x32));	// 13532                  add     si, 32h ; '2' ;~ 01A2:5774
cs=0x1a2;eip=0x005777; 	J(LOOP(loc_1573c));	// 13533                  loop    loc_1573C ;~ 01A2:5777
locret_15779:
	// 5250 
cs=0x1a2;eip=0x005779; 	J(RETN(0));	// 13536                  retn ;~ 01A2:5779

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_15739: 	goto loc_15739;
        case m2c::kloc_1573c: 	goto loc_1573c;
        case m2c::kloc_15774: 	goto loc_15774;
        case m2c::klocret_15779: 	goto locret_15779;
        case m2c::ksub_1572b: 	goto sub_1572b;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1577a(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1577a:
    _begin:
cs=0x1a2;eip=0x00577a; 	T(ax = ds;);	// 13548                  mov     ax, ds ;~ 01A2:577A
cs=0x1a2;eip=0x00577c; 	T(es = ax;);	// 13549                  mov     es, ax ;~ 01A2:577C
cs=0x1a2;eip=0x00577e; 	T(CMP(*(dw*)(raddr(ds,si+0x0C)), 0x0FFFF));	// 13551                  cmp     word ptr [si+0Ch], 0FFFFh ;~ 01A2:577E
cs=0x1a2;eip=0x005782; 	J(JNZ(loc_15785));	// 13552                  jnz     short loc_15785 ;~ 01A2:5782
cs=0x1a2;eip=0x005784; 	J(RETN(0));	// 13553                  retn ;~ 01A2:5784
loc_15785:
	// 5251 
cs=0x1a2;eip=0x005785; 	T(MOV(al, *(raddr(ds,si+0x20))));	// 13557                  mov     al, [si+20h] ;~ 01A2:5785
cs=0x1a2;eip=0x005788; 	X(MOV(*(raddr(ds,si+0x20)), 0));	// 13558                  mov     byte ptr [si+20h], 0 ;~ 01A2:5788
cs=0x1a2;eip=0x00578c; 	T(CMP(al, 5));	// 13559                  cmp     al, 5 ;~ 01A2:578C
cs=0x1a2;eip=0x00578e; 	J(JZ(loc_15793));	// 13560                  jz      short loc_15793 ;~ 01A2:578E
cs=0x1a2;eip=0x005790; 	J(return _group18(m2c::knullsub_1, _state););	// 13561                  jmp     nullsub_1 ;~ 01A2:5790
loc_15793:
	// 5252 
cs=0x1a2;eip=0x005793; 	T(TEST(byte_1f740, 2));	// 13565                  test    ds:byte_1F740, 2 ;~ 01A2:5793
cs=0x1a2;eip=0x005798; 	X(PUSHF);	// 13566                  pushf ;~ 01A2:5798
cs=0x1a2;eip=0x005799; 	X(OR(byte_1f740, 2));	// 13567                  or      ds:byte_1F740, 2 ;~ 01A2:5799
cs=0x1a2;eip=0x00579e; 	X(POPF);	// 13568                  popf ;~ 01A2:579E
cs=0x1a2;eip=0x00579f; 	T(MOV(bp, *(dw*)(raddr(ds,si+0x0E))));	// 13569                  mov     bp, [si+0Eh] ;~ 01A2:579F
cs=0x1a2;eip=0x0057a2; 	T(MOV(dl, *(raddr(ds,si+0x10))));	// 13570                  mov     dl, [si+10h] ;~ 01A2:57A2
cs=0x1a2;eip=0x0057a5; 	X(byte_1f87d = dl;);	// 13571                  mov     ds:byte_1F87D, dl ;~ 01A2:57A5
cs=0x1a2;eip=0x0057a9; 	T(MOV(bx, *(dw*)(raddr(ds,si+0x24))));	// 13572                  mov     bx, [si+24h] ;~ 01A2:57A9
cs=0x1a2;eip=0x0057ac; 	T(MOV(dh, *(raddr(ds,si+0x13))));	// 13573                  mov     dh, [si+13h] ;~ 01A2:57AC
cs=0x1a2;eip=0x0057af; 	T(XOR(ch, ch));	// 13574                  xor     ch, ch ;~ 01A2:57AF
cs=0x1a2;eip=0x0057b1; 	T(di = word_1f20a;);	// 13575                  mov     di, word_1F20A ;~ 01A2:57B1
cs=0x1a2;eip=0x0057b5; 	T(ax = si;);	// 13576                  mov     ax, si ;~ 01A2:57B5
cs=0x1a2;eip=0x0057b7; 	X(STOSW);	// 13577                  stosw ;~ 01A2:57B7
cs=0x1a2;eip=0x0057b8; 	T(ax = bp;);	// 13578                  mov     ax, bp ;~ 01A2:57B8
cs=0x1a2;eip=0x0057ba; 	T(bp = word_1f1a4;);	// 13579                  mov     bp, word_1F1A4 ;~ 01A2:57BA
cs=0x1a2;eip=0x0057be; 	J(CALL(sub_15a31,0));	// 13580                  call    sub_15A31 ;~ 01A2:57BE
cs=0x1a2;eip=0x0057c1; 	T(bp = word_1f1a2;);	// 13581                  mov     bp, word_1F1A2 ;~ 01A2:57C1
cs=0x1a2;eip=0x0057c5; 	J(CALL(sub_15a31,0));	// 13582                  call    sub_15A31 ;~ 01A2:57C5
cs=0x1a2;eip=0x0057c8; 	T(bp = ax;);	// 13583                  mov     bp, ax ;~ 01A2:57C8
cs=0x1a2;eip=0x0057ca; 	T(ax = 0x0FFFF;);	// 13584                  mov     ax, 0FFFFh ;~ 01A2:57CA
cs=0x1a2;eip=0x0057cd; 	X(STOSW);	// 13585                  stosw ;~ 01A2:57CD
cs=0x1a2;eip=0x0057ce; 	T(ax = word_1f394;);	// 13586                  mov     ax, ds:word_1F394 ;~ 01A2:57CE
cs=0x1a2;eip=0x0057d1; 	T(cl = al;);	// 13587                  mov     cl, al ;~ 01A2:57D1
cs=0x1a2;eip=0x0057d3; 	T(si = word_1f19a;);	// 13588                  mov     si, word_1F19A ;~ 01A2:57D3
loc_157d7:
	// 5253 
cs=0x1a2;eip=0x0057d7; 	T(CMP(*(dw*)(raddr(ds,si)), 0));	// 13591                  cmp     word ptr [si], 0 ;~ 01A2:57D7
cs=0x1a2;eip=0x0057da; 	J(JNS(loc_157de));	// 13592                  jns     short loc_157DE ;~ 01A2:57DA
cs=0x1a2;eip=0x0057dc; 	J(JMP(loc_15803));	// 13593                  jmp     short loc_15803 ;~ 01A2:57DC
loc_157de:
	// 5254 
cs=0x1a2;eip=0x0057de; 	T(CMP(*(raddr(ds,si+0x20)), 5));	// 13597                  cmp     byte ptr [si+20h], 5 ;~ 01A2:57DE
cs=0x1a2;eip=0x0057e2; 	J(JNZ(loc_15803));	// 13598                  jnz     short loc_15803 ;~ 01A2:57E2
cs=0x1a2;eip=0x0057e4; 	T(CMP(*(dw*)(raddr(ds,si+0x0E)), 0));	// 13599                  cmp     word ptr [si+0Eh], 0 ;~ 01A2:57E4
cs=0x1a2;eip=0x0057e8; 	J(JS(loc_15803));	// 13600                  js      short loc_15803 ;~ 01A2:57E8
cs=0x1a2;eip=0x0057ea; 	T(CMP(dl, *(raddr(ds,si+0x13))));	// 13601                  cmp     dl, [si+13h] ;~ 01A2:57EA
cs=0x1a2;eip=0x0057ed; 	J(JNC(loc_15803));	// 13602                  jnb     short loc_15803 ;~ 01A2:57ED
cs=0x1a2;eip=0x0057ef; 	T(CMP(dh, *(raddr(ds,si+0x10))));	// 13603                  cmp     dh, [si+10h] ;~ 01A2:57EF
cs=0x1a2;eip=0x0057f2; 	J(JBE(loc_15803));	// 13604                  jbe     short loc_15803 ;~ 01A2:57F2
cs=0x1a2;eip=0x0057f4; 	T(CMP(bp, *(dw*)(raddr(ds,si+0x24))));	// 13605                  cmp     bp, [si+24h] ;~ 01A2:57F4
cs=0x1a2;eip=0x0057f7; 	J(JNC(loc_15803));	// 13606                  jnb     short loc_15803 ;~ 01A2:57F7
cs=0x1a2;eip=0x0057f9; 	T(CMP(bx, *(dw*)(raddr(ds,si+0x0E))));	// 13607                  cmp     bx, [si+0Eh] ;~ 01A2:57F9
cs=0x1a2;eip=0x0057fc; 	J(JBE(loc_15803));	// 13608                  jbe     short loc_15803 ;~ 01A2:57FC
cs=0x1a2;eip=0x0057fe; 	T(INC(ch));	// 13609                  inc     ch ;~ 01A2:57FE
cs=0x1a2;eip=0x005800; 	T(ax = si;);	// 13610                  mov     ax, si ;~ 01A2:5800
cs=0x1a2;eip=0x005802; 	X(STOSW);	// 13611                  stosw ;~ 01A2:5802
loc_15803:
	// 5255 
cs=0x1a2;eip=0x005803; 	T(ADD(si, 0x32));	// 13615                  add     si, 32h ; '2' ;~ 01A2:5803
cs=0x1a2;eip=0x005806; 	T(DEC(cl));	// 13616                  dec     cl ;~ 01A2:5806
cs=0x1a2;eip=0x005808; 	J(JNZ(loc_157d7));	// 13617                  jnz     short loc_157D7 ;~ 01A2:5808
cs=0x1a2;eip=0x00580a; 	T(XOR(ax, ax));	// 13618                  xor     ax, ax ;~ 01A2:580A
cs=0x1a2;eip=0x00580c; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 13619                  mov     [di], ax ;~ 01A2:580C
cs=0x1a2;eip=0x00580e; 	T(si = word_1f20a;);	// 13620                  mov     si, word_1F20A ;~ 01A2:580E
cs=0x1a2;eip=0x005812; 	X(PUSH(ax));	// 13621                  push    ax ;~ 01A2:5812
cs=0x1a2;eip=0x005813; 	X(PUSH(bx));	// 13622                  push    bx ;~ 01A2:5813
cs=0x1a2;eip=0x005814; 	X(PUSH(cx));	// 13623                  push    cx ;~ 01A2:5814
cs=0x1a2;eip=0x005815; 	X(PUSH(dx));	// 13624                  push    dx ;~ 01A2:5815
cs=0x1a2;eip=0x005816; 	X(PUSH(bp));	// 13625                  push    bp ;~ 01A2:5816
cs=0x1a2;eip=0x005817; 	X(PUSH(si));	// 13626                  push    si ;~ 01A2:5817
cs=0x1a2;eip=0x005818; 	X(PUSH(di));	// 13627                  push    di ;~ 01A2:5818
cs=0x1a2;eip=0x005819; 	X(PUSH(es));	// 13628                  push    es ;~ 01A2:5819
cs=0x1a2;eip=0x00581a; 	X(PUSH(ds));	// 13629                  push    ds ;~ 01A2:581A
cs=0x1a2;eip=0x00581b; 	T(MOV(si, *(dw*)(raddr(ds,si))));	// 13630                  mov     si, [si] ;~ 01A2:581B
cs=0x1a2;eip=0x00581d; 	T(MOV(di, *(dw*)(raddr(ds,si+0x0C))));	// 13631                  mov     di, [si+0Ch] ;~ 01A2:581D
cs=0x1a2;eip=0x005820; 	T(MOV(dl, *(raddr(ds,si+0x28))));	// 13632                  mov     dl, [si+28h] ;~ 01A2:5820
cs=0x1a2;eip=0x005823; 	T(MOV(ch, *(raddr(ds,si+0x29))));	// 13633                  mov     ch, [si+29h] ;~ 01A2:5823
cs=0x1a2;eip=0x005826; 	T(bp = *(dw*)(((db*)&seg_1f171)+1););	// 13634                  mov     bp, seg_1F171+1 ;~ 01A2:5826
cs=0x1a2;eip=0x00582a; 	T(MOV(cl, *(raddr(ds,si+0x11))));	// 13635                  mov     cl, [si+11h] ;~ 01A2:582A
cs=0x1a2;eip=0x00582d; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x2A))));	// 13636                  mov     ax, [si+2Ah] ;~ 01A2:582D
cs=0x1a2;eip=0x005830; 	X(*(dw*)(((db*)&off_1f8c8)+2) = ax;);	// 13637                  mov     word ptr ds:off_1F8C8+2, ax ;~ 01A2:5830
cs=0x1a2;eip=0x005833; 	T(MOV(si, *(dw*)(raddr(ds,si+0x2C))));	// 13638                  mov     si, [si+2Ch] ;~ 01A2:5833
cs=0x1a2;eip=0x005836; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x30))));	// 13639                  mov     ax, [di+30h] ;~ 01A2:5836
cs=0x1a2;eip=0x005839; 	X(*(dw*)(&unk_6fb96) = ax;);	// 13640                  mov     word ptr ss:unk_6FB96, ax ;~ 01A2:5839
cs=0x1a2;eip=0x00583d; 	J(CALL(sub_1a621,0));	// 13641                  call    sub_1A621 ;~ 01A2:583D
cs=0x1a2;eip=0x005840; 	X(POP(ds));	// 13642                  pop     ds ;~ 01A2:5840
cs=0x1a2;eip=0x005841; 	X(POP(es));	// 13643                  pop     es ;~ 01A2:5841
cs=0x1a2;eip=0x005842; 	X(POP(di));	// 13644                  pop     di ;~ 01A2:5842
cs=0x1a2;eip=0x005843; 	X(POP(si));	// 13645                  pop     si ;~ 01A2:5843
cs=0x1a2;eip=0x005844; 	X(POP(bp));	// 13646                  pop     bp ;~ 01A2:5844
cs=0x1a2;eip=0x005845; 	X(POP(dx));	// 13647                  pop     dx ;~ 01A2:5845
cs=0x1a2;eip=0x005846; 	X(POP(cx));	// 13648                  pop     cx ;~ 01A2:5846
cs=0x1a2;eip=0x005847; 	X(POP(bx));	// 13649                  pop     bx ;~ 01A2:5847
cs=0x1a2;eip=0x005848; 	X(POP(ax));	// 13650                  pop     ax ;~ 01A2:5848
cs=0x1a2;eip=0x005849; 	T(OR(ch, ch));	// 13651                  or      ch, ch ;~ 01A2:5849
cs=0x1a2;eip=0x00584b; 	J(JNZ(loc_15850));	// 13652                  jnz     short loc_15850 ;~ 01A2:584B
cs=0x1a2;eip=0x00584d; 	J(return _group18(m2c::knullsub_1, _state););	// 13653                  jmp     nullsub_1 ;~ 01A2:584D
loc_15850:
	// 5256 
cs=0x1a2;eip=0x005850; 	T(LODSW);	// 13657                  lodsw ;~ 01A2:5850
cs=0x1a2;eip=0x005851; 	T(di = ax;);	// 13658                  mov     di, ax ;~ 01A2:5851
cs=0x1a2;eip=0x005853; 	T(MOV(bp, *(dw*)(raddr(ds,di))));	// 13659                  mov     bp, [di] ;~ 01A2:5853
cs=0x1a2;eip=0x005855; 	X(MOV(*(dw*)(raddr(ds,di)), 0x0FFFF));	// 13660                  mov     word ptr [di], 0FFFFh ;~ 01A2:5855
cs=0x1a2;eip=0x005859; 	T(MOV(ch, *(raddr(ds,di+0x28))));	// 13661                  mov     ch, [di+28h] ;~ 01A2:5859
cs=0x1a2;eip=0x00585c; 	T(MOV(cl, *(raddr(ds,di+0x29))));	// 13662                  mov     cl, [di+29h] ;~ 01A2:585C
cs=0x1a2;eip=0x00585f; 	T(XOR(dh, dh));	// 13663                  xor     dh, dh ;~ 01A2:585F
cs=0x1a2;eip=0x005861; 	T(bx = dx;);	// 13664                  mov     bx, dx ;~ 01A2:5861
cs=0x1a2;eip=0x005863; 	T(SHL(dx, 1));	// 13665                  shl     dx, 1 ;~ 01A2:5863
cs=0x1a2;eip=0x005865; 	T(SHL(dx, 1));	// 13666                  shl     dx, 1 ;~ 01A2:5865
cs=0x1a2;eip=0x005867; 	T(SHL(dx, 1));	// 13667                  shl     dx, 1 ;~ 01A2:5867
cs=0x1a2;eip=0x005869; 	T(ax = dx;);	// 13668                  mov     ax, dx ;~ 01A2:5869
cs=0x1a2;eip=0x00586b; 	T(SHL(dx, 1));	// 13669                  shl     dx, 1 ;~ 01A2:586B
cs=0x1a2;eip=0x00586d; 	T(SHL(dx, 1));	// 13670                  shl     dx, 1 ;~ 01A2:586D
cs=0x1a2;eip=0x00586f; 	T(ADD(dx, ax));	// 13671                  add     dx, ax ;~ 01A2:586F
cs=0x1a2;eip=0x005871; 	T(MOV(bx, *(dw*)(raddr(ds,di+0x0C))));	// 13672                  mov     bx, [di+0Ch] ;~ 01A2:5871
cs=0x1a2;eip=0x005874; 	X(PUSH(bp));	// 13673                  push    bp ;~ 01A2:5874
cs=0x1a2;eip=0x005875; 	X(PUSH(bx));	// 13674                  push    bx ;~ 01A2:5875
cs=0x1a2;eip=0x005876; 	X(PUSH(di));	// 13675                  push    di ;~ 01A2:5876
cs=0x1a2;eip=0x005877; 	X(PUSH(bx));	// 13676                  push    bx ;~ 01A2:5877
cs=0x1a2;eip=0x005878; 	X(PUSH(dx));	// 13677                  push    dx ;~ 01A2:5878
cs=0x1a2;eip=0x005879; 	X(PUSH(cx));	// 13678                  push    cx ;~ 01A2:5879
cs=0x1a2;eip=0x00587a; 	X(PUSH(si));	// 13679                  push    si ;~ 01A2:587A
cs=0x1a2;eip=0x00587b; 	T(MOV(al, *(raddr(ds,di+0x11))));	// 13680                  mov     al, [di+11h] ;~ 01A2:587B
cs=0x1a2;eip=0x00587e; 	T(OR(al, al));	// 13681                  or      al, al ;~ 01A2:587E
cs=0x1a2;eip=0x005880; 	J(JZ(loc_15884));	// 13682                  jz      short loc_15884 ;~ 01A2:5880
cs=0x1a2;eip=0x005882; 	T(INC(ch));	// 13683                  inc     ch ;~ 01A2:5882
loc_15884:
	// 5257 
cs=0x1a2;eip=0x005884; 	T(SUB(bx, dx));	// 13686                  sub     bx, dx ;~ 01A2:5884
cs=0x1a2;eip=0x005886; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x30))));	// 13687                  mov     ax, [di+30h] ;~ 01A2:5886
cs=0x1a2;eip=0x005889; 	X(*(dw*)(&unk_6fb96) = ax;);	// 13688                  mov     word ptr ss:unk_6FB96, ax ;~ 01A2:5889
cs=0x1a2;eip=0x00588d; 	T(bp = word_1f210;);	// 13689                  mov     bp, word_1F210 ;~ 01A2:588D
cs=0x1a2;eip=0x005891; 	T(XOR(dl, dl));	// 13690                  xor     dl, dl ;~ 01A2:5891
cs=0x1a2;eip=0x005893; 	X(word_1f1e0 = bx;);	// 13691                  mov     word_1F1E0, bx ;~ 01A2:5893
cs=0x1a2;eip=0x005897; 	X(word_1f1de = bp;);	// 13692                  mov     word_1F1DE, bp ;~ 01A2:5897
cs=0x1a2;eip=0x00589b; 	X(word_1f1e2 = di;);	// 13693                  mov     word_1F1E2, di ;~ 01A2:589B
cs=0x1a2;eip=0x00589f; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x2A))));	// 13694                  mov     ax, [di+2Ah] ;~ 01A2:589F
cs=0x1a2;eip=0x0058a2; 	X(*(dw*)(((db*)&off_1f8c8)+2) = ax;);	// 13695                  mov     word ptr ds:off_1F8C8+2, ax ;~ 01A2:58A2
cs=0x1a2;eip=0x0058a5; 	T(MOV(di, *(dw*)(raddr(ds,di+0x2C))));	// 13696                  mov     di, [di+2Ch] ;~ 01A2:58A5
cs=0x1a2;eip=0x0058a8; 	T(si = bx;);	// 13697                  mov     si, bx ;~ 01A2:58A8
cs=0x1a2;eip=0x0058aa; 	T(XCHG(si, di));	// 13698                  xchg    si, di ;~ 01A2:58AA
cs=0x1a2;eip=0x0058ac; 	T(XCHG(dl, ch));	// 13699                  xchg    dl, ch ;~ 01A2:58AC
cs=0x1a2;eip=0x0058ae; 	T(XCHG(cl, ch));	// 13700                  xchg    cl, ch ;~ 01A2:58AE
cs=0x1a2;eip=0x0058b0; 	X(byte_1f880 = ch;);	// 13701                  mov     ds:byte_1F880, ch ;~ 01A2:58B0
cs=0x1a2;eip=0x0058b4; 	J(CALL(sub_19ddc,0));	// 13702                  call    sub_19DDC ;~ 01A2:58B4
cs=0x1a2;eip=0x0058b7; 	X(POP(si));	// 13703                  pop     si ;~ 01A2:58B7
cs=0x1a2;eip=0x0058b8; 	X(POP(cx));	// 13704                  pop     cx ;~ 01A2:58B8
cs=0x1a2;eip=0x0058b9; 	X(POP(dx));	// 13705                  pop     dx ;~ 01A2:58B9
cs=0x1a2;eip=0x0058ba; 	X(POP(bx));	// 13706                  pop     bx ;~ 01A2:58BA
cs=0x1a2;eip=0x0058bb; 	X(byte_1f87c = 0;);	// 13707                  mov     ds:byte_1F87C, 0 ;~ 01A2:58BB
loc_158c0:
	// 5258 
cs=0x1a2;eip=0x0058c0; 	T(LODSW);	// 13711                  lodsw ;~ 01A2:58C0
cs=0x1a2;eip=0x0058c1; 	T(OR(ax, ax));	// 13712                  or      ax, ax ;~ 01A2:58C1
cs=0x1a2;eip=0x0058c3; 	J(JNZ(loc_158c8));	// 13713                  jnz     short loc_158C8 ;~ 01A2:58C3
cs=0x1a2;eip=0x0058c5; 	J(return _group18(m2c::kloc_15a21, _state););	// 13715                  jmp     loc_15A21 ;~ 01A2:58C5
loc_158c8:
	// 5259 
cs=0x1a2;eip=0x0058c8; 	T(CMP(ax, 0x0FFFF));	// 13719                  cmp     ax, 0FFFFh ;~ 01A2:58C8
cs=0x1a2;eip=0x0058cb; 	J(JNZ(loc_158d2));	// 13720                  jnz     short loc_158D2 ;~ 01A2:58CB
cs=0x1a2;eip=0x0058cd; 	X(byte_1f87c = al;);	// 13721                  mov     ds:byte_1F87C, al ;~ 01A2:58CD
cs=0x1a2;eip=0x0058d0; 	J(JMP(loc_158c0));	// 13722                  jmp     short loc_158C0 ;~ 01A2:58D0
loc_158d2:
	// 5260 
cs=0x1a2;eip=0x0058d2; 	T(CMP(byte_1f87c, 0));	// 13726                  cmp     ds:byte_1F87C, 0 ;~ 01A2:58D2
cs=0x1a2;eip=0x0058d7; 	J(JNZ(loc_158dc));	// 13727                  jnz     short loc_158DC ;~ 01A2:58D7
cs=0x1a2;eip=0x0058d9; 	J(return sub_1595c(0, _state););	// 13728                  jmp     sub_1595C ;~ 01A2:58D9
loc_158dc:
	// 5261 
cs=0x1a2;eip=0x0058dc; 	T(CMP(word_1f1de, 0));	// 13732                  cmp     word_1F1DE, 0 ;~ 01A2:58DC
cs=0x1a2;eip=0x0058e1; 	J(JZ(loc_158e6));	// 13733                  jz      short loc_158E6 ;~ 01A2:58E1
cs=0x1a2;eip=0x0058e3; 	J(CALL(sub_158f3,0));	// 13734                  call    sub_158F3 ;~ 01A2:58E3
loc_158e6:
	// 5262 
cs=0x1a2;eip=0x0058e6; 	X(PUSH(dx));	// 13737                  push    dx ;~ 01A2:58E6
cs=0x1a2;eip=0x0058e7; 	X(PUSH(si));	// 13738                  push    si ;~ 01A2:58E7
cs=0x1a2;eip=0x0058e8; 	X(PUSH(di));	// 13739                  push    di ;~ 01A2:58E8
cs=0x1a2;eip=0x0058e9; 	T(di = ax;);	// 13740                  mov     di, ax ;~ 01A2:58E9
cs=0x1a2;eip=0x0058eb; 	J(CALL(sub_15446,0));	// 13741                  call    sub_15446 ;~ 01A2:58EB
cs=0x1a2;eip=0x0058ee; 	X(POP(di));	// 13742                  pop     di ;~ 01A2:58EE
cs=0x1a2;eip=0x0058ef; 	X(POP(si));	// 13743                  pop     si ;~ 01A2:58EF
cs=0x1a2;eip=0x0058f0; 	X(POP(dx));	// 13744                  pop     dx ;~ 01A2:58F0
cs=0x1a2;eip=0x0058f1; 	J(JMP(loc_158c0));	// 13745                  jmp     short loc_158C0 ;~ 01A2:58F1

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_15785: 	goto loc_15785;
        case m2c::kloc_15793: 	goto loc_15793;
        case m2c::kloc_157d7: 	goto loc_157d7;
        case m2c::kloc_157de: 	goto loc_157de;
        case m2c::kloc_15803: 	goto loc_15803;
        case m2c::kloc_15850: 	goto loc_15850;
        case m2c::kloc_15884: 	goto loc_15884;
        case m2c::kloc_158c0: 	goto loc_158c0;
        case m2c::kloc_158c8: 	goto loc_158c8;
        case m2c::kloc_158d2: 	goto loc_158d2;
        case m2c::kloc_158dc: 	goto loc_158dc;
        case m2c::kloc_158e6: 	goto loc_158e6;
        case m2c::ksub_1577a: 	goto sub_1577a;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_158f3(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_158f3:
    _begin:
cs=0x1a2;eip=0x0058f3; 	X(PUSH(ax));	// 13754                  push    ax ;~ 01A2:58F3
cs=0x1a2;eip=0x0058f4; 	X(PUSH(bx));	// 13755                  push    bx ;~ 01A2:58F4
cs=0x1a2;eip=0x0058f5; 	X(PUSH(cx));	// 13756                  push    cx ;~ 01A2:58F5
cs=0x1a2;eip=0x0058f6; 	X(PUSH(dx));	// 13757                  push    dx ;~ 01A2:58F6
cs=0x1a2;eip=0x0058f7; 	X(PUSH(bp));	// 13758                  push    bp ;~ 01A2:58F7
cs=0x1a2;eip=0x0058f8; 	X(PUSH(si));	// 13759                  push    si ;~ 01A2:58F8
cs=0x1a2;eip=0x0058f9; 	X(PUSH(di));	// 13760                  push    di ;~ 01A2:58F9
cs=0x1a2;eip=0x0058fa; 	X(PUSH(es));	// 13761                  push    es ;~ 01A2:58FA
cs=0x1a2;eip=0x0058fb; 	X(PUSH(ds));	// 13762                  push    ds ;~ 01A2:58FB
cs=0x1a2;eip=0x0058fc; 	T(si = word_1f1e2;);	// 13763                  mov     si, word_1F1E2 ;~ 01A2:58FC
cs=0x1a2;eip=0x005900; 	T(di = word_1f1e0;);	// 13764                  mov     di, word_1F1E0 ;~ 01A2:5900
cs=0x1a2;eip=0x005904; 	T(MOV(dl, *(raddr(ds,si+0x28))));	// 13765                  mov     dl, [si+28h] ;~ 01A2:5904
cs=0x1a2;eip=0x005907; 	T(MOV(ch, *(raddr(ds,si+0x29))));	// 13766                  mov     ch, [si+29h] ;~ 01A2:5907
cs=0x1a2;eip=0x00590a; 	T(bp = word_1f210;);	// 13767                  mov     bp, word_1F210 ;~ 01A2:590A
cs=0x1a2;eip=0x00590e; 	T(MOV(cl, *(raddr(ds,si+0x11))));	// 13768                  mov     cl, [si+11h] ;~ 01A2:590E
cs=0x1a2;eip=0x005911; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x2A))));	// 13769                  mov     ax, [si+2Ah] ;~ 01A2:5911
cs=0x1a2;eip=0x005914; 	X(*(dw*)(((db*)&off_1f8c8)+2) = ax;);	// 13770                  mov     word ptr ds:off_1F8C8+2, ax ;~ 01A2:5914
cs=0x1a2;eip=0x005917; 	T(MOV(si, *(dw*)(raddr(ds,si+0x2C))));	// 13771                  mov     si, [si+2Ch] ;~ 01A2:5917
cs=0x1a2;eip=0x00591a; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x30))));	// 13772                  mov     ax, [di+30h] ;~ 01A2:591A
cs=0x1a2;eip=0x00591d; 	X(*(dw*)(&unk_6fb96) = ax;);	// 13773                  mov     word ptr ss:unk_6FB96, ax ;~ 01A2:591D
cs=0x1a2;eip=0x005921; 	J(CALL(sub_1b012,0));	// 13774                  call    sub_1B012 ;~ 01A2:5921
cs=0x1a2;eip=0x005924; 	T(si = word_1f1e2;);	// 13775                  mov     si, word_1F1E2 ;~ 01A2:5924
cs=0x1a2;eip=0x005928; 	T(MOV(dl, *(raddr(ds,si+0x28))));	// 13776                  mov     dl, [si+28h] ;~ 01A2:5928
cs=0x1a2;eip=0x00592b; 	T(MOV(ch, *(raddr(ds,si+0x29))));	// 13777                  mov     ch, [si+29h] ;~ 01A2:592B
cs=0x1a2;eip=0x00592e; 	T(bp = *(dw*)(((db*)&seg_1f171)+1););	// 13778                  mov     bp, seg_1F171+1 ;~ 01A2:592E
cs=0x1a2;eip=0x005932; 	T(MOV(cl, *(raddr(ds,si+0x11))));	// 13779                  mov     cl, [si+11h] ;~ 01A2:5932
cs=0x1a2;eip=0x005935; 	T(ax = word_1f210;);	// 13780                  mov     ax, word_1F210 ;~ 01A2:5935
cs=0x1a2;eip=0x005938; 	X(*(dw*)(((db*)&off_1f8c8)+2) = ax;);	// 13781                  mov     word ptr ds:off_1F8C8+2, ax ;~ 01A2:5938
cs=0x1a2;eip=0x00593b; 	T(ax = 0;);	// 13782                  mov     ax, 0 ;~ 01A2:593B
cs=0x1a2;eip=0x00593e; 	X(*(dw*)(&unk_6fb96) = ax;);	// 13783                  mov     word ptr ss:unk_6FB96, ax ;~ 01A2:593E
cs=0x1a2;eip=0x005942; 	T(MOV(di, *(dw*)(raddr(ds,si+0x0C))));	// 13784                  mov     di, [si+0Ch] ;~ 01A2:5942
cs=0x1a2;eip=0x005945; 	T(si = word_1f1e0;);	// 13785                  mov     si, word_1F1E0 ;~ 01A2:5945
cs=0x1a2;eip=0x005949; 	J(CALL(sub_1adb4,0));	// 13786                  call    sub_1ADB4 ;~ 01A2:5949
cs=0x1a2;eip=0x00594c; 	X(word_1f1de = 0;);	// 13787                  mov     word_1F1DE, 0 ;~ 01A2:594C
cs=0x1a2;eip=0x005952; 	X(POP(ds));	// 13788                  pop     ds ;~ 01A2:5952
cs=0x1a2;eip=0x005953; 	X(POP(es));	// 13789                  pop     es ;~ 01A2:5953
cs=0x1a2;eip=0x005954; 	X(POP(di));	// 13790                  pop     di ;~ 01A2:5954
cs=0x1a2;eip=0x005955; 	X(POP(si));	// 13791                  pop     si ;~ 01A2:5955
cs=0x1a2;eip=0x005956; 	X(POP(bp));	// 13792                  pop     bp ;~ 01A2:5956
cs=0x1a2;eip=0x005957; 	X(POP(dx));	// 13793                  pop     dx ;~ 01A2:5957
cs=0x1a2;eip=0x005958; 	X(POP(cx));	// 13794                  pop     cx ;~ 01A2:5958
cs=0x1a2;eip=0x005959; 	X(POP(bx));	// 13795                  pop     bx ;~ 01A2:5959
cs=0x1a2;eip=0x00595a; 	X(POP(ax));	// 13796                  pop     ax ;~ 01A2:595A
cs=0x1a2;eip=0x00595b; 	J(RETN(0));	// 13797                  retn ;~ 01A2:595B

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_158f3: 	goto sub_158f3;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1595c(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1595c:
    _begin:
cs=0x1a2;eip=0x00595c; 	X(PUSH(ax));	// 13805                  push    ax ;~ 01A2:595C
cs=0x1a2;eip=0x00595d; 	X(PUSH(dx));	// 13806                  push    dx ;~ 01A2:595D
cs=0x1a2;eip=0x00595e; 	X(PUSH(si));	// 13807                  push    si ;~ 01A2:595E
cs=0x1a2;eip=0x00595f; 	X(PUSH(di));	// 13808                  push    di ;~ 01A2:595F
cs=0x1a2;eip=0x005960; 	T(bp = ax;);	// 13809                  mov     bp, ax ;~ 01A2:5960
cs=0x1a2;eip=0x005962; 	T(di = dx;);	// 13810                  mov     di, dx ;~ 01A2:5962
cs=0x1a2;eip=0x005964; 	T(MOV(ax, *(dw*)(raddr(ss,bp+0x0A))));	// 13811                  mov     ax, [bp+0Ah] ;~ 01A2:5964
cs=0x1a2;eip=0x005967; 	X(*(dw*)(((db*)&off_1f8c8)+2) = ax;);	// 13812                  mov     word ptr ds:off_1F8C8+2, ax ;~ 01A2:5967
cs=0x1a2;eip=0x00596a; 	T(MOV(ax, *(dw*)(raddr(ss,bp+0x0E))));	// 13813                  mov     ax, [bp+0Eh] ;~ 01A2:596A
cs=0x1a2;eip=0x00596d; 	X(*(dw*)(&unk_6fb96) = ax;);	// 13814                  mov     word ptr ss:unk_6FB96, ax ;~ 01A2:596D
cs=0x1a2;eip=0x005971; 	T(MOV(al, *(raddr(ss,bp+0))));	// 13815                  mov     al, [bp+0] ;~ 01A2:5971
cs=0x1a2;eip=0x005974; 	T(SUB(al, byte_1f87d));	// 13816                  sub     al, ds:byte_1F87D ;~ 01A2:5974
cs=0x1a2;eip=0x005978; 	X(byte_1f87f = al;);	// 13817                  mov     ds:byte_1F87F, al ;~ 01A2:5978
cs=0x1a2;eip=0x00597b; 	J(JS(loc_159b3));	// 13818                  js      short loc_159B3 ;~ 01A2:597B
cs=0x1a2;eip=0x00597d; 	X(byte_1f87e = al;);	// 13819                  mov     ds:byte_1F87E, al ;~ 01A2:597D
cs=0x1a2;eip=0x005980; 	T(MOV(bx, *(dw*)(raddr(ss,bp+8))));	// 13820                  mov     bx, [bp+8] ;~ 01A2:5980
cs=0x1a2;eip=0x005983; 	T(SUB(bx, di));	// 13821                  sub     bx, di ;~ 01A2:5983
cs=0x1a2;eip=0x005985; 	T(MOV(dl, *(raddr(ss,bp+2))));	// 13822                  mov     dl, [bp+2] ;~ 01A2:5985
cs=0x1a2;eip=0x005988; 	T(MOV(ch, *(raddr(ss,bp+3))));	// 13823                  mov     ch, [bp+3] ;~ 01A2:5988
cs=0x1a2;eip=0x00598b; 	X(ADD(byte_1f87f, ch));	// 13824                  add     ds:byte_1F87F, ch ;~ 01A2:598B
cs=0x1a2;eip=0x00598f; 	T(MOV(si, *(dw*)(raddr(ss,bp+0x0C))));	// 13825                  mov     si, [bp+0Ch] ;~ 01A2:598F
cs=0x1a2;eip=0x005992; 	T(al = byte_1f87f;);	// 13826                  mov     al, ds:byte_1F87F ;~ 01A2:5992
cs=0x1a2;eip=0x005995; 	T(CMP(al, byte_1f880));	// 13827                  cmp     al, ds:byte_1F880 ;~ 01A2:5995
cs=0x1a2;eip=0x005999; 	J(JBE(loc_15a05));	// 13828                  jbe     short loc_15A05 ;~ 01A2:5999
cs=0x1a2;eip=0x00599b; 	T(al = byte_1f880;);	// 13829                  mov     al, ds:byte_1F880 ;~ 01A2:599B
cs=0x1a2;eip=0x00599e; 	T(SUB(al, byte_1f87e));	// 13830                  sub     al, ds:byte_1F87E ;~ 01A2:599E
cs=0x1a2;eip=0x0059a2; 	T(SUB(ch, al));	// 13831                  sub     ch, al ;~ 01A2:59A2
cs=0x1a2;eip=0x0059a4; 	T(XCHG(ch, al));	// 13832                  xchg    ch, al ;~ 01A2:59A4
cs=0x1a2;eip=0x0059a6; 	T(XOR(ah, ah));	// 13833                  xor     ah, ah ;~ 01A2:59A6
cs=0x1a2;eip=0x0059a8; 	T(MUL1_1(dl));	// 13834                  mul     dl ;~ 01A2:59A8
cs=0x1a2;eip=0x0059aa; 	T(SHL(ax, 1));	// 13835                  shl     ax, 1 ;~ 01A2:59AA
cs=0x1a2;eip=0x0059ac; 	X(ADD(*(dw*)(&unk_6fb96), ax));	// 13836                  add     word ptr ss:unk_6FB96, ax ;~ 01A2:59AC
cs=0x1a2;eip=0x0059b1; 	J(JMP(loc_15a05));	// 13837                  jmp     short loc_15A05 ;~ 01A2:59B1
loc_159b3:
	// 5263 
cs=0x1a2;eip=0x0059b3; 	T(MOV(bx, *(dw*)(raddr(ss,bp+8))));	// 13841                  mov     bx, [bp+8] ;~ 01A2:59B3
cs=0x1a2;eip=0x0059b6; 	T(SUB(bx, di));	// 13842                  sub     bx, di ;~ 01A2:59B6
cs=0x1a2;eip=0x0059b8; 	T(dl = byte_1f87f;);	// 13843                  mov     dl, ds:byte_1F87F ;~ 01A2:59B8
cs=0x1a2;eip=0x0059bc; 	T(dh = 0x0FF;);	// 13844                  mov     dh, 0FFh ;~ 01A2:59BC
cs=0x1a2;eip=0x0059be; 	T(NEG(dx));	// 13845                  neg     dx ;~ 01A2:59BE
cs=0x1a2;eip=0x0059c0; 	X(PUSH(dx));	// 13846                  push    dx ;~ 01A2:59C0
cs=0x1a2;eip=0x0059c1; 	X(PUSH(ax));	// 13847                  push    ax ;~ 01A2:59C1
cs=0x1a2;eip=0x0059c2; 	T(SHL(dx, 1));	// 13848                  shl     dx, 1 ;~ 01A2:59C2
cs=0x1a2;eip=0x0059c4; 	T(SHL(dx, 1));	// 13849                  shl     dx, 1 ;~ 01A2:59C4
cs=0x1a2;eip=0x0059c6; 	T(SHL(dx, 1));	// 13850                  shl     dx, 1 ;~ 01A2:59C6
cs=0x1a2;eip=0x0059c8; 	T(ax = dx;);	// 13851                  mov     ax, dx ;~ 01A2:59C8
cs=0x1a2;eip=0x0059ca; 	T(SHL(dx, 1));	// 13852                  shl     dx, 1 ;~ 01A2:59CA
cs=0x1a2;eip=0x0059cc; 	T(SHL(dx, 1));	// 13853                  shl     dx, 1 ;~ 01A2:59CC
cs=0x1a2;eip=0x0059ce; 	T(ADD(dx, ax));	// 13854                  add     dx, ax ;~ 01A2:59CE
cs=0x1a2;eip=0x0059d0; 	X(POP(ax));	// 13855                  pop     ax ;~ 01A2:59D0
cs=0x1a2;eip=0x0059d1; 	T(ADD(bx, dx));	// 13856                  add     bx, dx ;~ 01A2:59D1
cs=0x1a2;eip=0x0059d3; 	X(POP(ax));	// 13857                  pop     ax ;~ 01A2:59D3
cs=0x1a2;eip=0x0059d4; 	X(PUSH(ax));	// 13858                  push    ax ;~ 01A2:59D4
cs=0x1a2;eip=0x0059d5; 	T(MOV(si, *(dw*)(raddr(ss,bp+0x0C))));	// 13859                  mov     si, [bp+0Ch] ;~ 01A2:59D5
cs=0x1a2;eip=0x0059d8; 	T(MOV(dl, *(raddr(ss,bp+2))));	// 13860                  mov     dl, [bp+2] ;~ 01A2:59D8
cs=0x1a2;eip=0x0059db; 	T(MOV(ch, *(raddr(ss,bp+3))));	// 13861                  mov     ch, [bp+3] ;~ 01A2:59DB
cs=0x1a2;eip=0x0059de; 	T(MUL1_1(dl));	// 13862                  mul     dl ;~ 01A2:59DE
cs=0x1a2;eip=0x0059e0; 	T(SHL(ax, 1));	// 13863                  shl     ax, 1 ;~ 01A2:59E0
cs=0x1a2;eip=0x0059e2; 	X(ADD(*(dw*)(&unk_6fb96), ax));	// 13864                  add     word ptr ss:unk_6FB96, ax ;~ 01A2:59E2
cs=0x1a2;eip=0x0059e7; 	T(ADD(si, ax));	// 13865                  add     si, ax ;~ 01A2:59E7
cs=0x1a2;eip=0x0059e9; 	X(POP(ax));	// 13866                  pop     ax ;~ 01A2:59E9
cs=0x1a2;eip=0x0059ea; 	T(SUB(ch, al));	// 13867                  sub     ch, al ;~ 01A2:59EA
cs=0x1a2;eip=0x0059ec; 	T(CMP(ch, byte_1f880));	// 13868                  cmp     ch, ds:byte_1F880 ;~ 01A2:59EC
cs=0x1a2;eip=0x0059f0; 	J(JBE(loc_15a05));	// 13869                  jbe     short loc_15A05 ;~ 01A2:59F0
cs=0x1a2;eip=0x0059f2; 	T(XOR(ah, ah));	// 13870                  xor     ah, ah ;~ 01A2:59F2
cs=0x1a2;eip=0x0059f4; 	T(al = ch;);	// 13871                  mov     al, ch ;~ 01A2:59F4
cs=0x1a2;eip=0x0059f6; 	T(ch = byte_1f880;);	// 13872                  mov     ch, ds:byte_1F880 ;~ 01A2:59F6
cs=0x1a2;eip=0x0059fa; 	T(SUB(al, ch));	// 13873                  sub     al, ch ;~ 01A2:59FA
cs=0x1a2;eip=0x0059fc; 	T(MUL1_1(dl));	// 13874                  mul     dl ;~ 01A2:59FC
cs=0x1a2;eip=0x0059fe; 	T(SHL(ax, 1));	// 13875                  shl     ax, 1 ;~ 01A2:59FE
cs=0x1a2;eip=0x005a00; 	X(ADD(*(dw*)(&unk_6fb96), ax));	// 13876                  add     word ptr ss:unk_6FB96, ax ;~ 01A2:5A00
loc_15a05:
	// 5264 
cs=0x1a2;eip=0x005a05; 	T(XOR(cl, cl));	// 13880                  xor     cl, cl ;~ 01A2:5A05
cs=0x1a2;eip=0x005a07; 	X(PUSH(*(dw*)(((db*)&seg_1f171)+1)));	// 13881                  push    seg_1F171+1 ;~ 01A2:5A07
cs=0x1a2;eip=0x005a0b; 	T(ax = word_1f210;);	// 13882                  mov     ax, word_1F210 ;~ 01A2:5A0B
cs=0x1a2;eip=0x005a0e; 	X(*(dw*)(((db*)&seg_1f171)+1) = ax;);	// 13883                  mov     seg_1F171+1, ax ;~ 01A2:5A0E
cs=0x1a2;eip=0x005a11; 	T(di = bx;);	// 13884                  mov     di, bx ;~ 01A2:5A11
cs=0x1a2;eip=0x005a13; 	J(CALL(sub_18e71,0));	// 13885                  call    sub_18E71 ;~ 01A2:5A13
cs=0x1a2;eip=0x005a16; 	X(POP(*(dw*)(((db*)&seg_1f171)+1)));	// 13886                  pop     seg_1F171+1 ;~ 01A2:5A16
cs=0x1a2;eip=0x005a1a; 	X(POP(di));	// 13887                  pop     di ;~ 01A2:5A1A
cs=0x1a2;eip=0x005a1b; 	X(POP(si));	// 13888                  pop     si ;~ 01A2:5A1B
cs=0x1a2;eip=0x005a1c; 	X(POP(dx));	// 13889                  pop     dx ;~ 01A2:5A1C
cs=0x1a2;eip=0x005a1d; 	X(POP(ax));	// 13890                  pop     ax ;~ 01A2:5A1D
cs=0x1a2;eip=0x005a1e; 	J(return sub_1577a(m2c::kloc_158c0, _state););	// 13891                  jmp     loc_158C0 ;~ 01A2:5A1E

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_159b3: 	goto loc_159b3;
        case m2c::kloc_15a05: 	goto loc_15a05;
        case m2c::ksub_1595c: 	goto sub_1595c;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group18(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group18:
    _begin:
seg000_5a21_proc:
	// 13897 
loc_15a21:
	// 5265 
cs=0x1a2;eip=0x005a21; 	X(POP(di));	// 13898                  pop     di ;~ 01A2:5A21
cs=0x1a2;eip=0x005a22; 	X(POP(bx));	// 13899                  pop     bx ;~ 01A2:5A22
cs=0x1a2;eip=0x005a23; 	X(POP(bp));	// 13900                  pop     bp ;~ 01A2:5A23
cs=0x1a2;eip=0x005a24; 	X(MOV(*(dw*)(raddr(ds,di)), bp));	// 13901                  mov     [di], bp ;~ 01A2:5A24
cs=0x1a2;eip=0x005a26; 	T(CMP(word_1f1de, 0));	// 13902                  cmp     word_1F1DE, 0 ;~ 01A2:5A26
cs=0x1a2;eip=0x005a2b; 	J(JZ(nullsub_1));	// 13903                  jz      short nullsub_1 ;~ 01A2:5A2B
cs=0x1a2;eip=0x005a2d; 	J(CALL(sub_158f3,0));	// 13904                  call    sub_158F3 ;~ 01A2:5A2D
nullsub_1:
	// 13910 
cs=0x1a2;eip=0x005a30; 	J(RETN(0));	// 13912                  retn ;~ 01A2:5A30

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::knullsub_1: 	goto nullsub_1;
        case m2c::kseg000_5a21_proc: 	goto seg000_5a21_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_15a31(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_15a31:
    _begin:
cs=0x1a2;eip=0x005a31; 	T(SUB(bp, 0x10));	// 13922                  sub     bp, 10h ;~ 01A2:5A31
loc_15a34:
	// 5266 
cs=0x1a2;eip=0x005a34; 	T(ADD(bp, 0x10));	// 13926                  add     bp, 10h ;~ 01A2:5A34
cs=0x1a2;eip=0x005a37; 	T(CMP(*(dw*)(raddr(ss,bp+0x0A)), 0x0FFFF));	// 13927                  cmp     word ptr [bp+0Ah], 0FFFFh ;~ 01A2:5A37
cs=0x1a2;eip=0x005a3b; 	J(JZ(locret_15a60));	// 13928                  jz      short locret_15A60 ;~ 01A2:5A3B
cs=0x1a2;eip=0x005a3d; 	T(CMP(*(dw*)(raddr(ss,bp+8)), 0x0FFFF));	// 13929                  cmp     word ptr [bp+8], 0FFFFh ;~ 01A2:5A3D
cs=0x1a2;eip=0x005a41; 	J(JZ(loc_15a34));	// 13930                  jz      short loc_15A34 ;~ 01A2:5A41
cs=0x1a2;eip=0x005a43; 	T(CMP(dl, *(raddr(ss,bp+1))));	// 13931                  cmp     dl, [bp+1] ;~ 01A2:5A43
cs=0x1a2;eip=0x005a46; 	J(JNC(loc_15a34));	// 13932                  jnb     short loc_15A34 ;~ 01A2:5A46
cs=0x1a2;eip=0x005a48; 	T(CMP(dh, *(raddr(ss,bp+0))));	// 13933                  cmp     dh, [bp+0] ;~ 01A2:5A48
cs=0x1a2;eip=0x005a4b; 	J(JBE(loc_15a34));	// 13934                  jbe     short loc_15A34 ;~ 01A2:5A4B
cs=0x1a2;eip=0x005a4d; 	T(CMP(ax, *(dw*)(raddr(ss,bp+6))));	// 13935                  cmp     ax, [bp+6] ;~ 01A2:5A4D
cs=0x1a2;eip=0x005a50; 	J(JNC(loc_15a34));	// 13936                  jnb     short loc_15A34 ;~ 01A2:5A50
cs=0x1a2;eip=0x005a52; 	T(CMP(bx, *(dw*)(raddr(ss,bp+4))));	// 13937                  cmp     bx, [bp+4] ;~ 01A2:5A52
cs=0x1a2;eip=0x005a55; 	J(JBE(loc_15a34));	// 13938                  jbe     short loc_15A34 ;~ 01A2:5A55
cs=0x1a2;eip=0x005a57; 	T(INC(ch));	// 13939                  inc     ch ;~ 01A2:5A57
cs=0x1a2;eip=0x005a59; 	X(PUSH(ax));	// 13940                  push    ax ;~ 01A2:5A59
cs=0x1a2;eip=0x005a5a; 	T(ax = bp;);	// 13941                  mov     ax, bp ;~ 01A2:5A5A
cs=0x1a2;eip=0x005a5c; 	X(STOSW);	// 13942                  stosw ;~ 01A2:5A5C
cs=0x1a2;eip=0x005a5d; 	X(POP(ax));	// 13943                  pop     ax ;~ 01A2:5A5D
cs=0x1a2;eip=0x005a5e; 	J(JMP(loc_15a34));	// 13944                  jmp     short loc_15A34 ;~ 01A2:5A5E
locret_15a60:
	// 5267 
cs=0x1a2;eip=0x005a60; 	J(RETN(0));	// 13948                  retn ;~ 01A2:5A60

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_15a34: 	goto loc_15a34;
        case m2c::klocret_15a60: 	goto locret_15a60;
        case m2c::ksub_15a31: 	goto sub_15a31;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_15a61(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_15a61:
    _begin:
cs=0x1a2;eip=0x005a61; 	X(PUSH(ax));	// 13957                  push    ax ;~ 01A2:5A61
cs=0x1a2;eip=0x005a62; 	X(PUSH(bx));	// 13958                  push    bx ;~ 01A2:5A62
cs=0x1a2;eip=0x005a63; 	X(PUSH(cx));	// 13959                  push    cx ;~ 01A2:5A63
cs=0x1a2;eip=0x005a64; 	X(PUSH(dx));	// 13960                  push    dx ;~ 01A2:5A64
cs=0x1a2;eip=0x005a65; 	X(PUSH(bp));	// 13961                  push    bp ;~ 01A2:5A65
cs=0x1a2;eip=0x005a66; 	X(PUSH(si));	// 13962                  push    si ;~ 01A2:5A66
cs=0x1a2;eip=0x005a67; 	X(PUSH(di));	// 13963                  push    di ;~ 01A2:5A67
cs=0x1a2;eip=0x005a68; 	X(PUSH(es));	// 13964                  push    es ;~ 01A2:5A68
cs=0x1a2;eip=0x005a69; 	X(PUSH(ds));	// 13965                  push    ds ;~ 01A2:5A69
cs=0x1a2;eip=0x005a6a; 	T(MOV(di, *(dw*)(raddr(ds,si+0x0A))));	// 13966                  mov     di, [si+0Ah] ;~ 01A2:5A6A
cs=0x1a2;eip=0x005a6d; 	T(MOV(bl, *(raddr(ds,di))));	// 13967                  mov     bl, [di] ;~ 01A2:5A6D
cs=0x1a2;eip=0x005a6f; 	T(MOV(bh, *(raddr(ds,di+1))));	// 13968                  mov     bh, [di+1] ;~ 01A2:5A6F
cs=0x1a2;eip=0x005a72; 	T(dl = bl;);	// 13969                  mov     dl, bl ;~ 01A2:5A72
cs=0x1a2;eip=0x005a74; 	T(dh = bh;);	// 13970                  mov     dh, bh ;~ 01A2:5A74
cs=0x1a2;eip=0x005a76; 	T(cl = 3;);	// 13971                  mov     cl, 3 ;~ 01A2:5A76
cs=0x1a2;eip=0x005a78; 	T(SHR(bl, cl));	// 13972                  shr     bl, cl ;~ 01A2:5A78
cs=0x1a2;eip=0x005a7a; 	T(SHR(bh, cl));	// 13973                  shr     bh, cl ;~ 01A2:5A7A
cs=0x1a2;eip=0x005a7c; 	T(cl = 7;);	// 13974                  mov     cl, 7 ;~ 01A2:5A7C
cs=0x1a2;eip=0x005a7e; 	T(AND(dl, cl));	// 13975                  and     dl, cl ;~ 01A2:5A7E
cs=0x1a2;eip=0x005a80; 	T(AND(dh, cl));	// 13976                  and     dh, cl ;~ 01A2:5A80
cs=0x1a2;eip=0x005a82; 	T(al = byte_1f76a;);	// 13977                  mov     al, ds:byte_1F76A ;~ 01A2:5A82
cs=0x1a2;eip=0x005a85; 	T(MUL1_1(bh));	// 13978                  mul     bh ;~ 01A2:5A85
cs=0x1a2;eip=0x005a87; 	T(ADD(al, bl));	// 13979                  add     al, bl ;~ 01A2:5A87
cs=0x1a2;eip=0x005a89; 	T(ADC(ah, 0));	// 13980                  adc     ah, 0 ;~ 01A2:5A89
cs=0x1a2;eip=0x005a8c; 	T(SHL(ax, 1));	// 13981                  shl     ax, 1 ;~ 01A2:5A8C
cs=0x1a2;eip=0x005a8e; 	T(bp = 0x8DC;);	// 13982                  mov     bp, 8DCh ;~ 01A2:5A8E
cs=0x1a2;eip=0x005a91; 	T(ADD(bp, ax));	// 13983                  add     bp, ax ;~ 01A2:5A91
cs=0x1a2;eip=0x005a93; 	T(MOV(bp, *(dw*)(raddr(ds,bp+0))));	// 13984                  mov     bp, ds:[bp+0] ;~ 01A2:5A93
cs=0x1a2;eip=0x005a97; 	T(XOR(ah, ah));	// 13985                  xor     ah, ah ;~ 01A2:5A97
cs=0x1a2;eip=0x005a99; 	T(al = dh;);	// 13986                  mov     al, dh ;~ 01A2:5A99
cs=0x1a2;eip=0x005a9b; 	T(SHL(ax, 1));	// 13987                  shl     ax, 1 ;~ 01A2:5A9B
cs=0x1a2;eip=0x005a9d; 	T(SHL(ax, 1));	// 13988                  shl     ax, 1 ;~ 01A2:5A9D
cs=0x1a2;eip=0x005a9f; 	T(SHL(ax, 1));	// 13989                  shl     ax, 1 ;~ 01A2:5A9F
cs=0x1a2;eip=0x005aa1; 	T(ADD(al, dl));	// 13990                  add     al, dl ;~ 01A2:5AA1
cs=0x1a2;eip=0x005aa3; 	T(ADC(ah, 0));	// 13991                  adc     ah, 0 ;~ 01A2:5AA3
cs=0x1a2;eip=0x005aa6; 	T(SHL(ax, 1));	// 13992                  shl     ax, 1 ;~ 01A2:5AA6
cs=0x1a2;eip=0x005aa8; 	T(SHL(ax, 1));	// 13993                  shl     ax, 1 ;~ 01A2:5AA8
cs=0x1a2;eip=0x005aaa; 	X(PUSH(si));	// 13994                  push    si ;~ 01A2:5AAA
cs=0x1a2;eip=0x005aab; 	T(si = 0x0F8CE;);	// 13995                  mov     si, 0F8CEh ;~ 01A2:5AAB
cs=0x1a2;eip=0x005aae; 	T(ADD(si, ax));	// 13996                  add     si, ax ;~ 01A2:5AAE
cs=0x1a2;eip=0x005ab0; 	T(LODSW);	// 13997                  lodsw ;~ 01A2:5AB0
cs=0x1a2;eip=0x005ab1; 	T(ADD(bp, ax));	// 13998                  add     bp, ax ;~ 01A2:5AB1
cs=0x1a2;eip=0x005ab3; 	T(LODSW);	// 13999                  lodsw ;~ 01A2:5AB3
cs=0x1a2;eip=0x005ab4; 	T(bl = al;);	// 14000                  mov     bl, al ;~ 01A2:5AB4
cs=0x1a2;eip=0x005ab6; 	X(POP(si));	// 14001                  pop     si ;~ 01A2:5AB6
cs=0x1a2;eip=0x005ab7; 	T(XOR(ah, ah));	// 14002                  xor     ah, ah ;~ 01A2:5AB7
cs=0x1a2;eip=0x005ab9; 	T(MOV(al, *(raddr(ds,di+2))));	// 14003                  mov     al, [di+2] ;~ 01A2:5AB9
cs=0x1a2;eip=0x005abc; 	T(MOV(es, *(dw*)(raddr(ds,si+6))));	// 14004                  mov     es, word ptr [si+6] ;~ 01A2:5ABC
cs=0x1a2;eip=0x005abf; 	T(MOV(di, *(dw*)(raddr(ds,si+8))));	// 14006                  mov     di, [si+8] ;~ 01A2:5ABF
cs=0x1a2;eip=0x005ac2; 	T(SUB(ax, *(dw*)(raddr(es,di+2))));	// 14007                  sub     ax, es:[di+2] ;~ 01A2:5AC2
cs=0x1a2;eip=0x005ac6; 	T(ADD(ax, *(dw*)(raddr(es,di+0x10))));	// 14008                  add     ax, es:[di+10h] ;~ 01A2:5AC6
cs=0x1a2;eip=0x005aca; 	T(ADD(ax, *(dw*)(raddr(es,di+0x12))));	// 14009                  add     ax, es:[di+12h] ;~ 01A2:5ACA
cs=0x1a2;eip=0x005ace; 	T(ADD(ax, *(dw*)(raddr(es,di+0x14))));	// 14010                  add     ax, es:[di+14h] ;~ 01A2:5ACE
cs=0x1a2;eip=0x005ad2; 	T(SHL(ax, 1));	// 14011                  shl     ax, 1 ;~ 01A2:5AD2
cs=0x1a2;eip=0x005ad4; 	T(SHL(ax, 1));	// 14012                  shl     ax, 1 ;~ 01A2:5AD4
cs=0x1a2;eip=0x005ad6; 	T(SHL(ax, 1));	// 14013                  shl     ax, 1 ;~ 01A2:5AD6
cs=0x1a2;eip=0x005ad8; 	T(dx = ax;);	// 14014                  mov     dx, ax ;~ 01A2:5AD8
cs=0x1a2;eip=0x005ada; 	T(SHL(ax, 1));	// 14015                  shl     ax, 1 ;~ 01A2:5ADA
cs=0x1a2;eip=0x005adc; 	T(SHL(ax, 1));	// 14016                  shl     ax, 1 ;~ 01A2:5ADC
cs=0x1a2;eip=0x005ade; 	T(ADD(ax, dx));	// 14017                  add     ax, dx ;~ 01A2:5ADE
cs=0x1a2;eip=0x005ae0; 	T(SUB(bp, ax));	// 14018                  sub     bp, ax ;~ 01A2:5AE0
cs=0x1a2;eip=0x005ae2; 	T(cl = bl;);	// 14019                  mov     cl, bl ;~ 01A2:5AE2
cs=0x1a2;eip=0x005ae4; 	T(MOV(ax, *(dw*)(raddr(es,di+4))));	// 14020                  mov     ax, es:[di+4] ;~ 01A2:5AE4
cs=0x1a2;eip=0x005ae8; 	T(DEC(ax));	// 14021                  dec     ax ;~ 01A2:5AE8
cs=0x1a2;eip=0x005ae9; 	T(SHL(ax, 1));	// 14022                  shl     ax, 1 ;~ 01A2:5AE9
cs=0x1a2;eip=0x005aeb; 	T(SUB(bp, ax));	// 14023                  sub     bp, ax ;~ 01A2:5AEB
cs=0x1a2;eip=0x005aed; 	T(MOV(ax, *(dw*)(raddr(es,di+0x10))));	// 14024                  mov     ax, es:[di+10h] ;~ 01A2:5AED
cs=0x1a2;eip=0x005af1; 	T(AND(ax, 7));	// 14025                  and     ax, 7 ;~ 01A2:5AF1
cs=0x1a2;eip=0x005af4; 	J(JZ(loc_15b0a));	// 14026                  jz      short loc_15B0A ;~ 01A2:5AF4
cs=0x1a2;eip=0x005af6; 	T(dx = 8;);	// 14027                  mov     dx, 8 ;~ 01A2:5AF6
cs=0x1a2;eip=0x005af9; 	T(SUB(dx, ax));	// 14028                  sub     dx, ax ;~ 01A2:5AF9
cs=0x1a2;eip=0x005afb; 	T(SHL(dx, 1));	// 14029                  shl     dx, 1 ;~ 01A2:5AFB
cs=0x1a2;eip=0x005afd; 	T(ADD(cl, dl));	// 14030                  add     cl, dl ;~ 01A2:5AFD
cs=0x1a2;eip=0x005aff; 	T(CMP(cl, 0x10));	// 14031                  cmp     cl, 10h ;~ 01A2:5AFF
cs=0x1a2;eip=0x005b02; 	J(JC(loc_15b0a));	// 14032                  jb      short loc_15B0A ;~ 01A2:5B02
cs=0x1a2;eip=0x005b04; 	T(AND(cl, 0x0F));	// 14033                  and     cl, 0Fh ;~ 01A2:5B04
cs=0x1a2;eip=0x005b07; 	T(ADD(bp, 2));	// 14034                  add     bp, 2 ;~ 01A2:5B07
loc_15b0a:
	// 5268 
cs=0x1a2;eip=0x005b0a; 	X(MOV(*(dw*)(raddr(ds,si+0x30)), 0));	// 14038                  mov     word ptr [si+30h], 0 ;~ 01A2:5B0A
cs=0x1a2;eip=0x005b0f; 	T(MOV(ax, *(dw*)(raddr(es,di+0x18))));	// 14039                  mov     ax, es:[di+18h] ;~ 01A2:5B0F
cs=0x1a2;eip=0x005b13; 	T(OR(ax, ax));	// 14040                  or      ax, ax ;~ 01A2:5B13
cs=0x1a2;eip=0x005b15; 	J(JS(loc_15b23));	// 14041                  js      short loc_15B23 ;~ 01A2:5B15
cs=0x1a2;eip=0x005b17; 	T(bx = ax;);	// 14042                  mov     bx, ax ;~ 01A2:5B17
cs=0x1a2;eip=0x005b19; 	T(es = seg_1f182;);	// 14043                  mov     es, seg_1F182 ;~ 01A2:5B19
cs=0x1a2;eip=0x005b1d; 	T(dl = 2;);	// 14044                  mov     dl, 2 ;~ 01A2:5B1D
cs=0x1a2;eip=0x005b1f; 	T(dh = 0x20;);	// 14045                  mov     dh, 20h ; ' ' ;~ 01A2:5B1F
cs=0x1a2;eip=0x005b21; 	J(JMP(loc_15b6f));	// 14046                  jmp     short loc_15B6F ;~ 01A2:5B21
loc_15b23:
	// 5269 
cs=0x1a2;eip=0x005b23; 	T(TEST(*(raddr(es,di+0x0C)), 4));	// 14050                  test    byte ptr es:[di+0Ch], 4 ;~ 01A2:5B23
cs=0x1a2;eip=0x005b28; 	J(JZ(loc_15b5e));	// 14051                  jz      short loc_15B5E ;~ 01A2:5B28
cs=0x1a2;eip=0x005b2a; 	T(MOV(bx, *(dw*)(raddr(ds,si+0x0A))));	// 14052                  mov     bx, [si+0Ah] ;~ 01A2:5B2A
cs=0x1a2;eip=0x005b2d; 	T(XOR(ax, ax));	// 14053                  xor     ax, ax ;~ 01A2:5B2D
cs=0x1a2;eip=0x005b2f; 	T(MOV(al, *(raddr(ds,bx+0x0E))));	// 14054                  mov     al, [bx+0Eh] ;~ 01A2:5B2F
cs=0x1a2;eip=0x005b32; 	T(ADD(bx, ax));	// 14055                  add     bx, ax ;~ 01A2:5B32
cs=0x1a2;eip=0x005b34; 	T(MOV(ax, *(dw*)(raddr(ds,bx+6))));	// 14056                  mov     ax, [bx+6] ;~ 01A2:5B34
cs=0x1a2;eip=0x005b37; 	T(SHL(ax, 1));	// 14057                  shl     ax, 1 ;~ 01A2:5B37
cs=0x1a2;eip=0x005b39; 	T(SHL(ax, 1));	// 14058                  shl     ax, 1 ;~ 01A2:5B39
cs=0x1a2;eip=0x005b3b; 	T(SHL(ax, 1));	// 14059                  shl     ax, 1 ;~ 01A2:5B3B
cs=0x1a2;eip=0x005b3d; 	T(dx = ax;);	// 14060                  mov     dx, ax ;~ 01A2:5B3D
cs=0x1a2;eip=0x005b3f; 	T(SHL(ax, 1));	// 14061                  shl     ax, 1 ;~ 01A2:5B3F
cs=0x1a2;eip=0x005b41; 	T(SHL(ax, 1));	// 14062                  shl     ax, 1 ;~ 01A2:5B41
cs=0x1a2;eip=0x005b43; 	T(ADD(ax, dx));	// 14063                  add     ax, dx ;~ 01A2:5B43
cs=0x1a2;eip=0x005b45; 	T(ADD(bp, ax));	// 14064                  add     bp, ax ;~ 01A2:5B45
cs=0x1a2;eip=0x005b47; 	T(MOV(ax, *(dw*)(raddr(ds,bx+4))));	// 14065                  mov     ax, [bx+4] ;~ 01A2:5B47
cs=0x1a2;eip=0x005b4a; 	T(XOR(ch, ch));	// 14066                  xor     ch, ch ;~ 01A2:5B4A
cs=0x1a2;eip=0x005b4c; 	T(ADD(cx, ax));	// 14067                  add     cx, ax ;~ 01A2:5B4C
cs=0x1a2;eip=0x005b4e; 	T(ax = cx;);	// 14068                  mov     ax, cx ;~ 01A2:5B4E
cs=0x1a2;eip=0x005b50; 	T(AND(cl, 0x0F));	// 14069                  and     cl, 0Fh ;~ 01A2:5B50
cs=0x1a2;eip=0x005b53; 	T(SAR(ax, 1));	// 14070                  sar     ax, 1 ;~ 01A2:5B53
cs=0x1a2;eip=0x005b55; 	T(SAR(ax, 1));	// 14071                  sar     ax, 1 ;~ 01A2:5B55
cs=0x1a2;eip=0x005b57; 	T(SAR(ax, 1));	// 14072                  sar     ax, 1 ;~ 01A2:5B57
cs=0x1a2;eip=0x005b59; 	T(AND(ax, 0x0FFFE));	// 14073                  and     ax, 0FFFEh ;~ 01A2:5B59
cs=0x1a2;eip=0x005b5c; 	T(ADD(bp, ax));	// 14074                  add     bp, ax ;~ 01A2:5B5C
loc_15b5e:
	// 5270 
cs=0x1a2;eip=0x005b5e; 	T(MOV(bx, *(dw*)(raddr(ds,si+0x1E))));	// 14077                  mov     bx, [si+1Eh] ;~ 01A2:5B5E
cs=0x1a2;eip=0x005b61; 	T(MOV(ax, *(dw*)(raddr(es,bx))));	// 14078                  mov     ax, es:[bx] ;~ 01A2:5B61
cs=0x1a2;eip=0x005b64; 	T(dl = al;);	// 14079                  mov     dl, al ;~ 01A2:5B64
cs=0x1a2;eip=0x005b66; 	T(MOV(ax, *(dw*)(raddr(es,bx+2))));	// 14080                  mov     ax, es:[bx+2] ;~ 01A2:5B66
cs=0x1a2;eip=0x005b6a; 	T(dh = al;);	// 14081                  mov     dh, al ;~ 01A2:5B6A
cs=0x1a2;eip=0x005b6c; 	T(ADD(bx, 4));	// 14082                  add     bx, 4 ;~ 01A2:5B6C
loc_15b6f:
	// 5271 
cs=0x1a2;eip=0x005b6f; 	T(OR(bp, bp));	// 14085                  or      bp, bp ;~ 01A2:5B6F
cs=0x1a2;eip=0x005b71; 	J(JNS(loc_15b97));	// 14086                  jns     short loc_15B97 ;~ 01A2:5B71
cs=0x1a2;eip=0x005b73; 	T(NEG(bp));	// 14088                  neg     bp ;~ 01A2:5B73
cs=0x1a2;eip=0x005b75; 	T(ax = bp;);	// 14089                  mov     ax, bp ;~ 01A2:5B75
cs=0x1a2;eip=0x005b77; 	X(PUSH(dx));	// 14090                  push    dx ;~ 01A2:5B77
cs=0x1a2;eip=0x005b78; 	T(dl = 0x28;);	// 14091                  mov     dl, 28h ; '(' ;~ 01A2:5B78
cs=0x1a2;eip=0x005b7a; 	T(DIV1(dl));	// 14092                  div     dl ;~ 01A2:5B7A
cs=0x1a2;eip=0x005b7c; 	X(POP(dx));	// 14093                  pop     dx ;~ 01A2:5B7C
cs=0x1a2;eip=0x005b7d; 	T(INC(al));	// 14094                  inc     al ;~ 01A2:5B7D
cs=0x1a2;eip=0x005b7f; 	T(SUB(dh, al));	// 14095                  sub     dh, al ;~ 01A2:5B7F
cs=0x1a2;eip=0x005b81; 	J(JLE(loc_15bfb));	// 14096                  jle     short loc_15BFB ;~ 01A2:5B81
cs=0x1a2;eip=0x005b83; 	X(PUSH(ax));	// 14097                  push    ax ;~ 01A2:5B83
cs=0x1a2;eip=0x005b84; 	T(MUL1_1(dl));	// 14098                  mul     dl ;~ 01A2:5B84
cs=0x1a2;eip=0x005b86; 	T(SHL(ax, 1));	// 14099                  shl     ax, 1 ;~ 01A2:5B86
cs=0x1a2;eip=0x005b88; 	X(MOV(*(dw*)(raddr(ds,si+0x30)), ax));	// 14100                  mov     [si+30h], ax ;~ 01A2:5B88
cs=0x1a2;eip=0x005b8b; 	T(ADD(bx, ax));	// 14101                  add     bx, ax ;~ 01A2:5B8B
cs=0x1a2;eip=0x005b8d; 	X(POP(ax));	// 14102                  pop     ax ;~ 01A2:5B8D
cs=0x1a2;eip=0x005b8e; 	T(al = ah;);	// 14103                  mov     al, ah ;~ 01A2:5B8E
cs=0x1a2;eip=0x005b90; 	T(XOR(ah, ah));	// 14104                  xor     ah, ah ;~ 01A2:5B90
cs=0x1a2;eip=0x005b92; 	T(bp = 0x28;);	// 14105                  mov     bp, 28h ; '(' ;~ 01A2:5B92
cs=0x1a2;eip=0x005b95; 	T(SUB(bp, ax));	// 14106                  sub     bp, ax ;~ 01A2:5B95
loc_15b97:
	// 5272 
cs=0x1a2;eip=0x005b97; 	X(MOV(*(raddr(ds,si+0x29)), dh));	// 14109                  mov     [si+29h], dh ;~ 01A2:5B97
cs=0x1a2;eip=0x005b9a; 	X(MOV(*(raddr(ds,si+0x28)), dl));	// 14110                  mov     [si+28h], dl ;~ 01A2:5B9A
cs=0x1a2;eip=0x005b9d; 	X(MOV(*(dw*)(raddr(ds,si+0x2A)), es));	// 14111                  mov     word ptr [si+2Ah], es ;~ 01A2:5B9D
cs=0x1a2;eip=0x005ba0; 	X(MOV(*(dw*)(raddr(ds,si+0x2C)), bx));	// 14112                  mov     [si+2Ch], bx ;~ 01A2:5BA0
cs=0x1a2;eip=0x005ba3; 	X(MOV(*(dw*)(raddr(ds,si+0x0C)), bp));	// 14113                  mov     [si+0Ch], bp ;~ 01A2:5BA3
cs=0x1a2;eip=0x005ba6; 	T(XOR(ax, ax));	// 14114                  xor     ax, ax ;~ 01A2:5BA6
cs=0x1a2;eip=0x005ba8; 	X(MOV(*(raddr(ds,si+0x10)), al));	// 14115                  mov     [si+10h], al ;~ 01A2:5BA8
cs=0x1a2;eip=0x005bab; 	T(OR(bp, bp));	// 14116                  or      bp, bp ;~ 01A2:5BAB
cs=0x1a2;eip=0x005bad; 	J(JZ(loc_15bc3));	// 14117                  jz      short loc_15BC3 ;~ 01A2:5BAD
cs=0x1a2;eip=0x005baf; 	T(ax = bp;);	// 14118                  mov     ax, bp ;~ 01A2:5BAF
cs=0x1a2;eip=0x005bb1; 	X(PUSH(dx));	// 14119                  push    dx ;~ 01A2:5BB1
cs=0x1a2;eip=0x005bb2; 	T(XOR(dx, dx));	// 14120                  xor     dx, dx ;~ 01A2:5BB2
cs=0x1a2;eip=0x005bb4; 	T(OR(ax, ax));	// 14121                  or      ax, ax ;~ 01A2:5BB4
cs=0x1a2;eip=0x005bb6; 	J(JNS(loc_15bbb));	// 14122                  jns     short loc_15BBB ;~ 01A2:5BB6
cs=0x1a2;eip=0x005bb8; 	T(dx = 0x0FFFF;);	// 14123                  mov     dx, 0FFFFh ;~ 01A2:5BB8
loc_15bbb:
	// 5273 
cs=0x1a2;eip=0x005bbb; 	T(bx = 0x28;);	// 14126                  mov     bx, 28h ; '(' ;~ 01A2:5BBB
cs=0x1a2;eip=0x005bbe; 	T(IDIV2(bx));	// 14127                  idiv    bx ;~ 01A2:5BBE
cs=0x1a2;eip=0x005bc0; 	T(ah = dl;);	// 14128                  mov     ah, dl ;~ 01A2:5BC0
cs=0x1a2;eip=0x005bc2; 	X(POP(dx));	// 14129                  pop     dx ;~ 01A2:5BC2
loc_15bc3:
	// 5274 
cs=0x1a2;eip=0x005bc3; 	T(AND(cl, 0x0FE));	// 14132                  and     cl, 0FEh ;~ 01A2:5BC3
cs=0x1a2;eip=0x005bc6; 	X(MOV(*(raddr(ds,si+0x11)), cl));	// 14133                  mov     [si+11h], cl ;~ 01A2:5BC6
cs=0x1a2;eip=0x005bc9; 	X(MOV(*(raddr(ds,si+0x10)), al));	// 14134                  mov     [si+10h], al ;~ 01A2:5BC9
cs=0x1a2;eip=0x005bcc; 	T(ADD(al, dh));	// 14135                  add     al, dh ;~ 01A2:5BCC
cs=0x1a2;eip=0x005bce; 	X(MOV(*(raddr(ds,si+0x13)), al));	// 14136                  mov     [si+13h], al ;~ 01A2:5BCE
cs=0x1a2;eip=0x005bd1; 	T(al = ah;);	// 14137                  mov     al, ah ;~ 01A2:5BD1
cs=0x1a2;eip=0x005bd3; 	T(XOR(ah, ah));	// 14138                  xor     ah, ah ;~ 01A2:5BD3
cs=0x1a2;eip=0x005bd5; 	T(SHL(ax, 1));	// 14139                  shl     ax, 1 ;~ 01A2:5BD5
cs=0x1a2;eip=0x005bd7; 	T(SHL(ax, 1));	// 14140                  shl     ax, 1 ;~ 01A2:5BD7
cs=0x1a2;eip=0x005bd9; 	T(ADD(al, cl));	// 14141                  add     al, cl ;~ 01A2:5BD9
cs=0x1a2;eip=0x005bdb; 	T(ADC(ah, 0));	// 14142                  adc     ah, 0 ;~ 01A2:5BDB
cs=0x1a2;eip=0x005bde; 	X(MOV(*(dw*)(raddr(ds,si+0x0E)), ax));	// 14143                  mov     [si+0Eh], ax ;~ 01A2:5BDE
cs=0x1a2;eip=0x005be1; 	T(SHL(dl, 1));	// 14144                  shl     dl, 1 ;~ 01A2:5BE1
cs=0x1a2;eip=0x005be3; 	T(SHL(dl, 1));	// 14145                  shl     dl, 1 ;~ 01A2:5BE3
cs=0x1a2;eip=0x005be5; 	T(SHL(dl, 1));	// 14146                  shl     dl, 1 ;~ 01A2:5BE5
cs=0x1a2;eip=0x005be7; 	T(SHL(dl, 1));	// 14147                  shl     dl, 1 ;~ 01A2:5BE7
cs=0x1a2;eip=0x005be9; 	T(ADD(al, dl));	// 14148                  add     al, dl ;~ 01A2:5BE9
cs=0x1a2;eip=0x005beb; 	T(ADC(ah, 0));	// 14149                  adc     ah, 0 ;~ 01A2:5BEB
cs=0x1a2;eip=0x005bee; 	X(MOV(*(dw*)(raddr(ds,si+0x24)), ax));	// 14150                  mov     [si+24h], ax ;~ 01A2:5BEE
cs=0x1a2;eip=0x005bf1; 	X(POP(ds));	// 14151                  pop     ds ;~ 01A2:5BF1
cs=0x1a2;eip=0x005bf2; 	X(POP(es));	// 14152                  pop     es ;~ 01A2:5BF2
cs=0x1a2;eip=0x005bf3; 	X(POP(di));	// 14154                  pop     di ;~ 01A2:5BF3
cs=0x1a2;eip=0x005bf4; 	X(POP(si));	// 14155                  pop     si ;~ 01A2:5BF4
cs=0x1a2;eip=0x005bf5; 	X(POP(bp));	// 14156                  pop     bp ;~ 01A2:5BF5
cs=0x1a2;eip=0x005bf6; 	X(POP(dx));	// 14157                  pop     dx ;~ 01A2:5BF6
cs=0x1a2;eip=0x005bf7; 	X(POP(cx));	// 14158                  pop     cx ;~ 01A2:5BF7
cs=0x1a2;eip=0x005bf8; 	X(POP(bx));	// 14159                  pop     bx ;~ 01A2:5BF8
cs=0x1a2;eip=0x005bf9; 	X(POP(ax));	// 14160                  pop     ax ;~ 01A2:5BF9
cs=0x1a2;eip=0x005bfa; 	J(RETN(0));	// 14161                  retn ;~ 01A2:5BFA
loc_15bfb:
	// 5275 
cs=0x1a2;eip=0x005bfb; 	T(ax = 0x0FFFF;);	// 14165                  mov     ax, 0FFFFh ;~ 01A2:5BFB
cs=0x1a2;eip=0x005bfe; 	X(MOV(*(dw*)(raddr(ds,si+0x0C)), ax));	// 14166                  mov     [si+0Ch], ax ;~ 01A2:5BFE
cs=0x1a2;eip=0x005c01; 	X(MOV(*(dw*)(raddr(ds,si+0x0E)), ax));	// 14167                  mov     [si+0Eh], ax ;~ 01A2:5C01
cs=0x1a2;eip=0x005c04; 	X(POP(ds));	// 14168                  pop     ds ;~ 01A2:5C04
cs=0x1a2;eip=0x005c05; 	X(POP(es));	// 14170                  pop     es ;~ 01A2:5C05
cs=0x1a2;eip=0x005c06; 	X(POP(di));	// 14171                  pop     di ;~ 01A2:5C06
cs=0x1a2;eip=0x005c07; 	X(POP(si));	// 14172                  pop     si ;~ 01A2:5C07
cs=0x1a2;eip=0x005c08; 	X(POP(bp));	// 14173                  pop     bp ;~ 01A2:5C08
cs=0x1a2;eip=0x005c09; 	X(POP(dx));	// 14174                  pop     dx ;~ 01A2:5C09
cs=0x1a2;eip=0x005c0a; 	X(POP(cx));	// 14175                  pop     cx ;~ 01A2:5C0A
cs=0x1a2;eip=0x005c0b; 	X(POP(bx));	// 14176                  pop     bx ;~ 01A2:5C0B
cs=0x1a2;eip=0x005c0c; 	X(POP(ax));	// 14177                  pop     ax ;~ 01A2:5C0C
cs=0x1a2;eip=0x005c0d; 	J(RETN(0));	// 14178                  retn ;~ 01A2:5C0D

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_15b0a: 	goto loc_15b0a;
        case m2c::kloc_15b23: 	goto loc_15b23;
        case m2c::kloc_15b5e: 	goto loc_15b5e;
        case m2c::kloc_15b6f: 	goto loc_15b6f;
        case m2c::kloc_15b97: 	goto loc_15b97;
        case m2c::kloc_15bbb: 	goto loc_15bbb;
        case m2c::kloc_15bc3: 	goto loc_15bc3;
        case m2c::kloc_15bfb: 	goto loc_15bfb;
        case m2c::ksub_15a61: 	goto sub_15a61;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_15c0e(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_15c0e:
    _begin:
cs=0x1a2;eip=0x005c0e; 	X(PUSH(cx));	// 14187                  push    cx ;~ 01A2:5C0E
cs=0x1a2;eip=0x005c0f; 	X(PUSH(si));	// 14188                  push    si ;~ 01A2:5C0F
cs=0x1a2;eip=0x005c10; 	X(PUSH(bx));	// 14189                  push    bx ;~ 01A2:5C10
cs=0x1a2;eip=0x005c11; 	T(cl = dl;);	// 14190                  mov     cl, dl ;~ 01A2:5C11
cs=0x1a2;eip=0x005c13; 	T(bl = dh;);	// 14191                  mov     bl, dh ;~ 01A2:5C13
cs=0x1a2;eip=0x005c15; 	X(*(dw*)(((db*)&off_1f736)+2) = 0x0FFFF;);	// 14192                  mov     word ptr ds:off_1F736+2, 0FFFFh ;~ 01A2:5C15
cs=0x1a2;eip=0x005c1b; 	T(al = 3;);	// 14193                  mov     al, 3 ;~ 01A2:5C1B
cs=0x1a2;eip=0x005c1d; 	T(XOR(dx, dx));	// 14194                  xor     dx, dx ;~ 01A2:5C1D
cs=0x1a2;eip=0x005c1f; 	T(CMP(word_1f86a, 0));	// 14195                  cmp     ds:word_1F86A, 0 ;~ 01A2:5C1F
cs=0x1a2;eip=0x005c24; 	J(JZ(loc_15c92));	// 14196                  jz      short loc_15C92 ;~ 01A2:5C24
loc_15c26:
	// 5276 
cs=0x1a2;eip=0x005c26; 	T(al = 3;);	// 14199                  mov     al, 3 ;~ 01A2:5C26
cs=0x1a2;eip=0x005c28; 	J(CALL(sub_1415c,0));	// 14200                  call    sub_1415C ;~ 01A2:5C28
cs=0x1a2;eip=0x005c2b; 	T(OR(dx, dx));	// 14201                  or      dx, dx ;~ 01A2:5C2B
cs=0x1a2;eip=0x005c2d; 	J(JS(loc_15c92));	// 14202                  js      short loc_15C92 ;~ 01A2:5C2D
cs=0x1a2;eip=0x005c2f; 	T(MOV(al, *(raddr(ds,di+1))));	// 14203                  mov     al, [di+1] ;~ 01A2:5C2F
cs=0x1a2;eip=0x005c32; 	T(MOV(ah, *(raddr(ds,di+3))));	// 14204                  mov     ah, [di+3] ;~ 01A2:5C32
cs=0x1a2;eip=0x005c35; 	T(DEC(al));	// 14205                  dec     al ;~ 01A2:5C35
cs=0x1a2;eip=0x005c37; 	T(DEC(ah));	// 14206                  dec     ah ;~ 01A2:5C37
cs=0x1a2;eip=0x005c39; 	T(CMP(cl, al));	// 14207                  cmp     cl, al ;~ 01A2:5C39
cs=0x1a2;eip=0x005c3b; 	J(JZ(loc_15c69));	// 14208                  jz      short loc_15C69 ;~ 01A2:5C3B
cs=0x1a2;eip=0x005c3d; 	T(CMP(bl, ah));	// 14209                  cmp     bl, ah ;~ 01A2:5C3D
cs=0x1a2;eip=0x005c3f; 	J(JZ(loc_15c57));	// 14210                  jz      short loc_15C57 ;~ 01A2:5C3F
cs=0x1a2;eip=0x005c41; 	T(INC(al));	// 14211                  inc     al ;~ 01A2:5C41
cs=0x1a2;eip=0x005c43; 	T(INC(ah));	// 14212                  inc     ah ;~ 01A2:5C43
cs=0x1a2;eip=0x005c45; 	T(MOV(bh, *(raddr(ds,di+4))));	// 14213                  mov     bh, [di+4] ;~ 01A2:5C45
cs=0x1a2;eip=0x005c48; 	T(ADD(al, bh));	// 14214                  add     al, bh ;~ 01A2:5C48
cs=0x1a2;eip=0x005c4a; 	T(CMP(cl, al));	// 14215                  cmp     cl, al ;~ 01A2:5C4A
cs=0x1a2;eip=0x005c4c; 	J(JZ(loc_15c69));	// 14216                  jz      short loc_15C69 ;~ 01A2:5C4C
cs=0x1a2;eip=0x005c4e; 	T(MOV(bh, *(raddr(ds,di+5))));	// 14217                  mov     bh, [di+5] ;~ 01A2:5C4E
cs=0x1a2;eip=0x005c51; 	T(ADD(ah, bh));	// 14218                  add     ah, bh ;~ 01A2:5C51
cs=0x1a2;eip=0x005c53; 	T(CMP(bl, ah));	// 14219                  cmp     bl, ah ;~ 01A2:5C53
cs=0x1a2;eip=0x005c55; 	J(JNZ(loc_15c7b));	// 14220                  jnz     short loc_15C7B ;~ 01A2:5C55
loc_15c57:
	// 5277 
cs=0x1a2;eip=0x005c57; 	T(MOV(al, *(raddr(ds,di+1))));	// 14223                  mov     al, [di+1] ;~ 01A2:5C57
cs=0x1a2;eip=0x005c5a; 	T(CMP(cl, al));	// 14224                  cmp     cl, al ;~ 01A2:5C5A
cs=0x1a2;eip=0x005c5c; 	J(JC(loc_15c7b));	// 14225                  jb      short loc_15C7B ;~ 01A2:5C5C
cs=0x1a2;eip=0x005c5e; 	T(MOV(bh, *(raddr(ds,di+4))));	// 14226                  mov     bh, [di+4] ;~ 01A2:5C5E
cs=0x1a2;eip=0x005c61; 	T(ADD(al, bh));	// 14227                  add     al, bh ;~ 01A2:5C61
cs=0x1a2;eip=0x005c63; 	T(CMP(cl, al));	// 14228                  cmp     cl, al ;~ 01A2:5C63
cs=0x1a2;eip=0x005c65; 	J(JNC(loc_15c7b));	// 14229                  jnb     short loc_15C7B ;~ 01A2:5C65
cs=0x1a2;eip=0x005c67; 	J(JMP(loc_15c7e));	// 14230                  jmp     short loc_15C7E ;~ 01A2:5C67
loc_15c69:
	// 5278 
cs=0x1a2;eip=0x005c69; 	T(MOV(ah, *(raddr(ds,di+3))));	// 14235                  mov     ah, [di+3] ;~ 01A2:5C69
cs=0x1a2;eip=0x005c6c; 	T(CMP(bl, ah));	// 14236                  cmp     bl, ah ;~ 01A2:5C6C
cs=0x1a2;eip=0x005c6e; 	J(JC(loc_15c7b));	// 14237                  jb      short loc_15C7B ;~ 01A2:5C6E
cs=0x1a2;eip=0x005c70; 	T(MOV(bh, *(raddr(ds,di+5))));	// 14238                  mov     bh, [di+5] ;~ 01A2:5C70
cs=0x1a2;eip=0x005c73; 	T(ADD(ah, bh));	// 14239                  add     ah, bh ;~ 01A2:5C73
cs=0x1a2;eip=0x005c75; 	T(CMP(bl, ah));	// 14240                  cmp     bl, ah ;~ 01A2:5C75
cs=0x1a2;eip=0x005c77; 	J(JNC(loc_15c7b));	// 14241                  jnb     short loc_15C7B ;~ 01A2:5C77
cs=0x1a2;eip=0x005c79; 	J(JMP(loc_15c7e));	// 14242                  jmp     short loc_15C7E ;~ 01A2:5C79
loc_15c7b:
	// 5279 
cs=0x1a2;eip=0x005c7b; 	T(INC(dx));	// 14247                  inc     dx ;~ 01A2:5C7B
cs=0x1a2;eip=0x005c7c; 	J(JMP(loc_15c26));	// 14248                  jmp     short loc_15C26 ;~ 01A2:5C7C
loc_15c7e:
	// 5280 
cs=0x1a2;eip=0x005c7e; 	T(CMP(*(dw*)(((db*)&off_1f736)+2), 0));	// 14253                  cmp     word ptr ds:off_1F736+2, 0 ;~ 01A2:5C7E
cs=0x1a2;eip=0x005c83; 	J(JNS(loc_15c8b));	// 14254                  jns     short loc_15C8B ;~ 01A2:5C83
cs=0x1a2;eip=0x005c85; 	X(*(dw*)(((db*)&off_1f736)+2) = dx;);	// 14255                  mov     word ptr ds:off_1F736+2, dx ;~ 01A2:5C85
cs=0x1a2;eip=0x005c89; 	J(JMP(loc_15c7b));	// 14256                  jmp     short loc_15C7B ;~ 01A2:5C89
loc_15c8b:
	// 5281 
cs=0x1a2;eip=0x005c8b; 	T(ax = *(dw*)(((db*)&off_1f736)+2););	// 14260                  mov     ax, word ptr ds:off_1F736+2 ;~ 01A2:5C8B
cs=0x1a2;eip=0x005c8e; 	X(POP(bx));	// 14261                  pop     bx ;~ 01A2:5C8E
cs=0x1a2;eip=0x005c8f; 	X(POP(si));	// 14262                  pop     si ;~ 01A2:5C8F
cs=0x1a2;eip=0x005c90; 	X(POP(cx));	// 14263                  pop     cx ;~ 01A2:5C90
cs=0x1a2;eip=0x005c91; 	J(RETN(0));	// 14264                  retn ;~ 01A2:5C91
loc_15c92:
	// 5282 
cs=0x1a2;eip=0x005c92; 	T(ax = 0x0FFFF;);	// 14269                  mov     ax, 0FFFFh ;~ 01A2:5C92
cs=0x1a2;eip=0x005c95; 	T(dx = 0x0FFFF;);	// 14270                  mov     dx, 0FFFFh ;~ 01A2:5C95
cs=0x1a2;eip=0x005c98; 	X(POP(bx));	// 14271                  pop     bx ;~ 01A2:5C98
cs=0x1a2;eip=0x005c99; 	X(POP(si));	// 14272                  pop     si ;~ 01A2:5C99
cs=0x1a2;eip=0x005c9a; 	X(POP(cx));	// 14273                  pop     cx ;~ 01A2:5C9A
cs=0x1a2;eip=0x005c9b; 	J(RETN(0));	// 14274                  retn ;~ 01A2:5C9B

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_15c26: 	goto loc_15c26;
        case m2c::kloc_15c57: 	goto loc_15c57;
        case m2c::kloc_15c69: 	goto loc_15c69;
        case m2c::kloc_15c7b: 	goto loc_15c7b;
        case m2c::kloc_15c7e: 	goto loc_15c7e;
        case m2c::kloc_15c8b: 	goto loc_15c8b;
        case m2c::kloc_15c92: 	goto loc_15c92;
        case m2c::ksub_15c0e: 	goto sub_15c0e;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_15c9c(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_15c9c:
    _begin:
cs=0x1a2;eip=0x005c9c; 	X(PUSH(si));	// 14283                  push    si ;~ 01A2:5C9C
cs=0x1a2;eip=0x005c9d; 	X(PUSH(ax));	// 14284                  push    ax ;~ 01A2:5C9D
cs=0x1a2;eip=0x005c9e; 	T(si = word_1f1f4;);	// 14285                  mov     si, word_1F1F4 ;~ 01A2:5C9E
cs=0x1a2;eip=0x005ca2; 	X(MOV(*(dw*)(raddr(ds,si)), 8));	// 14286                  mov     word ptr [si], 8 ;~ 01A2:5CA2
cs=0x1a2;eip=0x005ca6; 	T(ax = word_1f70a;);	// 14287                  mov     ax, ds:word_1F70A ;~ 01A2:5CA6
cs=0x1a2;eip=0x005ca9; 	X(MOV(*(dw*)(raddr(ds,si+2)), ax));	// 14288                  mov     [si+2], ax ;~ 01A2:5CA9
cs=0x1a2;eip=0x005cac; 	X(ADD(word_1f1f4, 8));	// 14289                  add     word_1F1F4, 8 ;~ 01A2:5CAC
cs=0x1a2;eip=0x005cb1; 	X(INC(word_1f396));	// 14290                  inc     ds:word_1F396 ;~ 01A2:5CB1
cs=0x1a2;eip=0x005cb5; 	X(POP(ax));	// 14291                  pop     ax ;~ 01A2:5CB5
cs=0x1a2;eip=0x005cb6; 	X(POP(si));	// 14292                  pop     si ;~ 01A2:5CB6
cs=0x1a2;eip=0x005cb7; 	J(RETN(0));	// 14293                  retn ;~ 01A2:5CB7

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_15c9c: 	goto sub_15c9c;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group19(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group19:
    _begin:
sub_15cb8:
	// 14301 
cs=0x1a2;eip=0x005cb8; 	T(es = seg_1f8f4;);	// 14302                  mov     es, ds:seg_1F8F4 ;~ 01A2:5CB8
cs=0x1a2;eip=0x005cbc; 	T(di = 0x693;);	// 14303                  mov     di, 693h ;~ 01A2:5CBC
cs=0x1a2;eip=0x005cbf; 	T(cx = 0x14;);	// 14304                  mov     cx, 14h ;~ 01A2:5CBF
cs=0x1a2;eip=0x005cc2; 	T(al = 0x0FF;);	// 14305                  mov     al, 0FFh ;~ 01A2:5CC2
	// 14306                  rep stosb ;~ 01A2:5CC4
cs=0x1a2;eip=0x005cc4; 	X(	REP STOSB);	// 14306                  rep stosb ;~ 01A2:5CC4
cs=0x1a2;eip=0x005cc6; 	X(byte_1f79a = 0;);	// 14307                  mov     ds:byte_1F79A, 0 ;~ 01A2:5CC6
cs=0x1a2;eip=0x005ccb; 	T(di = 0x62B;);	// 14308                  mov     di, 62Bh ;~ 01A2:5CCB
cs=0x1a2;eip=0x005cce; 	J(CALL(sub_15cd4,0));	// 14309                  call    sub_15CD4 ;~ 01A2:5CCE
cs=0x1a2;eip=0x005cd1; 	T(di = 0x65F;);	// 14310                  mov     di, 65Fh ;~ 01A2:5CD1
sub_15cd4:
	// 14317 
cs=0x1a2;eip=0x005cd4; 	T(cx = 0x34;);	// 14318                  mov     cx, 34h ; '4' ;~ 01A2:5CD4
cs=0x1a2;eip=0x005cd7; 	T(XOR(al, al));	// 14319                  xor     al, al ;~ 01A2:5CD7
	// 14320                  rep stosb ;~ 01A2:5CD9
cs=0x1a2;eip=0x005cd9; 	X(	REP STOSB);	// 14320                  rep stosb ;~ 01A2:5CD9
cs=0x1a2;eip=0x005cdb; 	J(RETN(0));	// 14321                  retn ;~ 01A2:5CDB

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_15cb8: 	goto sub_15cb8;
        case m2c::ksub_15cd4: 	goto sub_15cd4;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_15cdc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_15cdc:
    _begin:
cs=0x1a2;eip=0x005cdc; 	X(PUSH(ax));	// 14330                  push    ax ;~ 01A2:5CDC
cs=0x1a2;eip=0x005cdd; 	X(PUSH(bx));	// 14331                  push    bx ;~ 01A2:5CDD
cs=0x1a2;eip=0x005cde; 	X(PUSH(cx));	// 14332                  push    cx ;~ 01A2:5CDE
cs=0x1a2;eip=0x005cdf; 	X(PUSH(dx));	// 14333                  push    dx ;~ 01A2:5CDF
cs=0x1a2;eip=0x005ce0; 	X(PUSH(bp));	// 14334                  push    bp ;~ 01A2:5CE0
cs=0x1a2;eip=0x005ce1; 	X(PUSH(si));	// 14335                  push    si ;~ 01A2:5CE1
cs=0x1a2;eip=0x005ce2; 	X(PUSH(di));	// 14336                  push    di ;~ 01A2:5CE2
cs=0x1a2;eip=0x005ce3; 	X(PUSH(es));	// 14337                  push    es ;~ 01A2:5CE3
cs=0x1a2;eip=0x005ce4; 	X(PUSH(ds));	// 14338                  push    ds ;~ 01A2:5CE4
cs=0x1a2;eip=0x005ce5; 	T(CMP(ax, word_1f3b8));	// 14339                  cmp     ax, ds:word_1F3B8 ;~ 01A2:5CE5
cs=0x1a2;eip=0x005ce9; 	J(JLE(loc_15cf7));	// 14340                  jle     short loc_15CF7 ;~ 01A2:5CE9
cs=0x1a2;eip=0x005ceb; 	T(CMP(word_1f3ba, 0));	// 14341                  cmp     ds:word_1F3BA, 0 ;~ 01A2:5CEB
cs=0x1a2;eip=0x005cf0; 	J(JNZ(loc_15cf7));	// 14342                  jnz     short loc_15CF7 ;~ 01A2:5CF0
cs=0x1a2;eip=0x005cf2; 	T(ax = 0x0FFFF;);	// 14343                  mov     ax, 0FFFFh ;~ 01A2:5CF2
cs=0x1a2;eip=0x005cf5; 	J(JMP(loc_15d34));	// 14344                  jmp     short loc_15D34 ;~ 01A2:5CF5
loc_15cf7:
	// 5283 
cs=0x1a2;eip=0x005cf7; 	X(PUSH(ax));	// 14349                  push    ax ;~ 01A2:5CF7
cs=0x1a2;eip=0x005cf8; 	X(PUSH(ax));	// 14350                  push    ax ;~ 01A2:5CF8
cs=0x1a2;eip=0x005cf9; 	J(CALL(sub_175af,0));	// 14351                  call    sub_175AF ;~ 01A2:5CF9
cs=0x1a2;eip=0x005cfc; 	X(POP(dx));	// 14352                  pop     dx ;~ 01A2:5CFC
cs=0x1a2;eip=0x005cfd; 	T(si = 0x7C4;);	// 14353                  mov     si, 7C4h ;~ 01A2:5CFD
cs=0x1a2;eip=0x005d00; 	J(CALL(sub_19c97,0));	// 14354                  call    sub_19C97 ;~ 01A2:5D00
cs=0x1a2;eip=0x005d03; 	T(cl = 0x0FF;);	// 14355                  mov     cl, 0FFh ;~ 01A2:5D03
cs=0x1a2;eip=0x005d05; 	J(CALL(sub_19ba0,0));	// 14356                  call    sub_19BA0 ;~ 01A2:5D05
cs=0x1a2;eip=0x005d08; 	X(MOV(*(raddr(ds,si)), 0x2E));	// 14357                  mov     byte ptr [si], 2Eh ; '.' ;~ 01A2:5D08
cs=0x1a2;eip=0x005d0b; 	X(MOV(*(raddr(ds,si+1)), 0x20));	// 14358                  mov     byte ptr [si+1], 20h ; ' ' ;~ 01A2:5D0B
cs=0x1a2;eip=0x005d0f; 	T(ADD(si, 2));	// 14359                  add     si, 2 ;~ 01A2:5D0F
cs=0x1a2;eip=0x005d12; 	T(dx = 0x3E;);	// 14360                  mov     dx, 3Eh ; '>' ;~ 01A2:5D12
cs=0x1a2;eip=0x005d15; 	J(CALL(sub_175af,0));	// 14361                  call    sub_175AF ;~ 01A2:5D15
cs=0x1a2;eip=0x005d18; 	J(CALL(sub_19c82,0));	// 14362                  call    sub_19C82 ;~ 01A2:5D18
cs=0x1a2;eip=0x005d1b; 	T(di = 0x7C4;);	// 14363                  mov     di, 7C4h ;~ 01A2:5D1B
cs=0x1a2;eip=0x005d1e; 	T(al = 0x0C;);	// 14364                  mov     al, 0Ch ;~ 01A2:5D1E
cs=0x1a2;eip=0x005d20; 	J(CALL(sub_15dcb,0));	// 14365                  call    sub_15DCB ;~ 01A2:5D20
cs=0x1a2;eip=0x005d23; 	J(CALL(sub_15d40,0));	// 14366                  call    sub_15D40 ;~ 01A2:5D23
cs=0x1a2;eip=0x005d26; 	X(POP(ax));	// 14367                  pop     ax ;~ 01A2:5D26
cs=0x1a2;eip=0x005d27; 	J(JNZ(loc_15d34));	// 14368                  jnz     short loc_15D34 ;~ 01A2:5D27
cs=0x1a2;eip=0x005d29; 	X(SUB(word_1f3b8, ax));	// 14369                  sub     ds:word_1F3B8, ax ;~ 01A2:5D29
cs=0x1a2;eip=0x005d2d; 	X(SBB(word_1f3ba, 0));	// 14370                  sbb     ds:word_1F3BA, 0 ;~ 01A2:5D2D
cs=0x1a2;eip=0x005d32; 	T(XOR(ax, ax));	// 14371                  xor     ax, ax ;~ 01A2:5D32
loc_15d34:
	// 5284 
cs=0x1a2;eip=0x005d34; 	T(OR(ax, ax));	// 14375                  or      ax, ax ;~ 01A2:5D34
cs=0x1a2;eip=0x005d36; 	X(POP(ds));	// 14376                  pop     ds ;~ 01A2:5D36
cs=0x1a2;eip=0x005d37; 	X(POP(es));	// 14377                  pop     es ;~ 01A2:5D37
cs=0x1a2;eip=0x005d38; 	X(POP(di));	// 14378                  pop     di ;~ 01A2:5D38
cs=0x1a2;eip=0x005d39; 	X(POP(si));	// 14379                  pop     si ;~ 01A2:5D39
cs=0x1a2;eip=0x005d3a; 	X(POP(bp));	// 14380                  pop     bp ;~ 01A2:5D3A
cs=0x1a2;eip=0x005d3b; 	X(POP(dx));	// 14381                  pop     dx ;~ 01A2:5D3B
cs=0x1a2;eip=0x005d3c; 	X(POP(cx));	// 14382                  pop     cx ;~ 01A2:5D3C
cs=0x1a2;eip=0x005d3d; 	X(POP(bx));	// 14383                  pop     bx ;~ 01A2:5D3D
cs=0x1a2;eip=0x005d3e; 	X(POP(ax));	// 14384                  pop     ax ;~ 01A2:5D3E
cs=0x1a2;eip=0x005d3f; 	J(RETN(0));	// 14385                  retn ;~ 01A2:5D3F

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_15cf7: 	goto loc_15cf7;
        case m2c::kloc_15d34: 	goto loc_15d34;
        case m2c::ksub_15cdc: 	goto sub_15cdc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_15d40(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_15d40:
    _begin:
cs=0x1a2;eip=0x005d40; 	X(PUSH(ax));	// 14393                  push    ax ;~ 01A2:5D40
cs=0x1a2;eip=0x005d41; 	X(PUSH(si));	// 14394                  push    si ;~ 01A2:5D41
cs=0x1a2;eip=0x005d42; 	X(PUSH(bx));	// 14395                  push    bx ;~ 01A2:5D42
cs=0x1a2;eip=0x005d43; 	T(XOR(bh, bh));	// 14396                  xor     bh, bh ;~ 01A2:5D43
cs=0x1a2;eip=0x005d45; 	T(bl = byte_1f87b;);	// 14397                  mov     bl, ds:byte_1F87B ;~ 01A2:5D45
cs=0x1a2;eip=0x005d49; 	J(CALL(sub_19d33,0));	// 14398                  call    sub_19D33 ;~ 01A2:5D49
cs=0x1a2;eip=0x005d4c; 	J(CALL(sub_1dec8,0));	// 14399                  call    sub_1DEC8 ;~ 01A2:5D4C
loc_15d4f:
	// 5285 
cs=0x1a2;eip=0x005d4f; 	T(ah = 0;);	// 14402                  mov     ah, 0 ;~ 01A2:5D4F
cs=0x1a2;eip=0x005d51; 	S(_INT(0x16));	// 14403                  int     16h             ; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY ;~ 01A2:5D51
cs=0x1a2;eip=0x005d53; 	T(al = ah;);	// 14405                  mov     al, ah ;~ 01A2:5D53
cs=0x1a2;eip=0x005d55; 	T(TEST(al, 0x80));	// 14406                  test    al, 80h ;~ 01A2:5D55
cs=0x1a2;eip=0x005d57; 	X(PUSHF);	// 14407                  pushf ;~ 01A2:5D57
cs=0x1a2;eip=0x005d58; 	T(AND(al, 0x7F));	// 14408                  and     al, 7Fh ;~ 01A2:5D58
cs=0x1a2;eip=0x005d5a; 	X(POPF);	// 14409                  popf ;~ 01A2:5D5A
cs=0x1a2;eip=0x005d5b; 	T(OR(bl, bl));	// 14410                  or      bl, bl ;~ 01A2:5D5B
cs=0x1a2;eip=0x005d5d; 	J(JNZ(loc_15d65));	// 14411                  jnz     short loc_15D65 ;~ 01A2:5D5D
cs=0x1a2;eip=0x005d5f; 	T(CMP(al, 0x15));	// 14412                  cmp     al, 15h ;~ 01A2:5D5F
cs=0x1a2;eip=0x005d61; 	J(JZ(loc_15d7c));	// 14413                  jz      short loc_15D7C ;~ 01A2:5D61
cs=0x1a2;eip=0x005d63; 	J(JMP(loc_15d74));	// 14414                  jmp     short loc_15D74 ;~ 01A2:5D63
loc_15d65:
	// 5286 
cs=0x1a2;eip=0x005d65; 	T(CMP(bl, 1));	// 14418                  cmp     bl, 1 ;~ 01A2:5D65
cs=0x1a2;eip=0x005d68; 	J(JNZ(loc_15d70));	// 14419                  jnz     short loc_15D70 ;~ 01A2:5D68
cs=0x1a2;eip=0x005d6a; 	T(CMP(al, 0x18));	// 14420                  cmp     al, 18h ;~ 01A2:5D6A
cs=0x1a2;eip=0x005d6c; 	J(JZ(loc_15d7c));	// 14421                  jz      short loc_15D7C ;~ 01A2:5D6C
cs=0x1a2;eip=0x005d6e; 	J(JMP(loc_15d74));	// 14422                  jmp     short loc_15D74 ;~ 01A2:5D6E
loc_15d70:
	// 5287 
cs=0x1a2;eip=0x005d70; 	T(CMP(al, 0x24));	// 14426                  cmp     al, 24h ; '$' ;~ 01A2:5D70
cs=0x1a2;eip=0x005d72; 	J(JZ(loc_15d7c));	// 14427                  jz      short loc_15D7C ;~ 01A2:5D72
loc_15d74:
	// 5288 
cs=0x1a2;eip=0x005d74; 	T(CMP(al, 0x31));	// 14431                  cmp     al, 31h ; '1' ;~ 01A2:5D74
cs=0x1a2;eip=0x005d76; 	J(JNZ(loc_15d4f));	// 14432                  jnz     short loc_15D4F ;~ 01A2:5D76
cs=0x1a2;eip=0x005d78; 	T(al = 1;);	// 14433                  mov     al, 1 ;~ 01A2:5D78
cs=0x1a2;eip=0x005d7a; 	T(OR(al, al));	// 14434                  or      al, al ;~ 01A2:5D7A
loc_15d7c:
	// 5289 
cs=0x1a2;eip=0x005d7c; 	X(POP(si));	// 14438                  pop     si ;~ 01A2:5D7C
cs=0x1a2;eip=0x005d7d; 	X(POP(bx));	// 14439                  pop     bx ;~ 01A2:5D7D
cs=0x1a2;eip=0x005d7e; 	X(POP(ax));	// 14440                  pop     ax ;~ 01A2:5D7E
cs=0x1a2;eip=0x005d7f; 	J(RETN(0));	// 14441                  retn ;~ 01A2:5D7F

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_15d4f: 	goto loc_15d4f;
        case m2c::kloc_15d65: 	goto loc_15d65;
        case m2c::kloc_15d70: 	goto loc_15d70;
        case m2c::kloc_15d74: 	goto loc_15d74;
        case m2c::kloc_15d7c: 	goto loc_15d7c;
        case m2c::ksub_15d40: 	goto sub_15d40;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_15d80(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_15d80:
    _begin:
cs=0x1a2;eip=0x005d80; 	X(PUSH(ax));	// 14450                  push    ax ;~ 01A2:5D80
cs=0x1a2;eip=0x005d81; 	X(PUSH(dx));	// 14451                  push    dx ;~ 01A2:5D81
cs=0x1a2;eip=0x005d82; 	X(PUSH(bx));	// 14452                  push    bx ;~ 01A2:5D82
cs=0x1a2;eip=0x005d83; 	X(PUSH(cx));	// 14453                  push    cx ;~ 01A2:5D83
cs=0x1a2;eip=0x005d84; 	X(PUSH(bp));	// 14454                  push    bp ;~ 01A2:5D84
cs=0x1a2;eip=0x005d85; 	T(bl = bh;);	// 14455                  mov     bl, bh ;~ 01A2:5D85
cs=0x1a2;eip=0x005d87; 	X(PUSH(dx));	// 14456                  push    dx ;~ 01A2:5D87
cs=0x1a2;eip=0x005d88; 	X(PUSH(bx));	// 14457                  push    bx ;~ 01A2:5D88
cs=0x1a2;eip=0x005d89; 	T(XOR(dh, dh));	// 14458                  xor     dh, dh ;~ 01A2:5D89
cs=0x1a2;eip=0x005d8b; 	X(PUSH(dx));	// 14459                  push    dx ;~ 01A2:5D8B
cs=0x1a2;eip=0x005d8c; 	T(ADD(cx, ax));	// 14460                  add     cx, ax ;~ 01A2:5D8C
cs=0x1a2;eip=0x005d8e; 	X(PUSH(cx));	// 14461                  push    cx ;~ 01A2:5D8E
cs=0x1a2;eip=0x005d8f; 	X(PUSH(dx));	// 14462                  push    dx ;~ 01A2:5D8F
cs=0x1a2;eip=0x005d90; 	X(PUSH(ax));	// 14463                  push    ax ;~ 01A2:5D90
loc_15d91:
	// 5290 
cs=0x1a2;eip=0x005d91; 	J(CALL(sub_199b0,0));	// 14466                  call    sub_199B0 ;~ 01A2:5D91
cs=0x1a2;eip=0x005d94; 	T(bp = sp;);	// 14467                  mov     bp, sp ;~ 01A2:5D94
cs=0x1a2;eip=0x005d96; 	X(INC(*(dw*)(raddr(ss,bp+2))));	// 14468                  inc     word ptr [bp+2] ;~ 01A2:5D96
cs=0x1a2;eip=0x005d99; 	X(INC(*(dw*)(raddr(ss,bp+6))));	// 14469                  inc     word ptr [bp+6] ;~ 01A2:5D99
cs=0x1a2;eip=0x005d9c; 	X(DEC(*(raddr(ss,bp+0x0B))));	// 14470                  dec     byte ptr [bp+0Bh] ;~ 01A2:5D9C
cs=0x1a2;eip=0x005d9f; 	J(JNZ(loc_15d91));	// 14471                  jnz     short loc_15D91 ;~ 01A2:5D9F
cs=0x1a2;eip=0x005da1; 	T(ADD(sp, 0x0C));	// 14472                  add     sp, 0Ch ;~ 01A2:5DA1
cs=0x1a2;eip=0x005da4; 	X(POP(bp));	// 14473                  pop     bp ;~ 01A2:5DA4
cs=0x1a2;eip=0x005da5; 	X(POP(cx));	// 14474                  pop     cx ;~ 01A2:5DA5
cs=0x1a2;eip=0x005da6; 	X(POP(bx));	// 14475                  pop     bx ;~ 01A2:5DA6
cs=0x1a2;eip=0x005da7; 	X(POP(dx));	// 14476                  pop     dx ;~ 01A2:5DA7
cs=0x1a2;eip=0x005da8; 	X(POP(ax));	// 14477                  pop     ax ;~ 01A2:5DA8
cs=0x1a2;eip=0x005da9; 	J(RETN(0));	// 14478                  retn ;~ 01A2:5DA9

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_15d91: 	goto loc_15d91;
        case m2c::ksub_15d80: 	goto sub_15d80;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_5daa_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_5daa_proc:
    _begin:
cs=0x1a2;eip=0x005daa; 	X(PUSH(ax));	// 14482                  push    ax ;~ 01A2:5DAA
cs=0x1a2;eip=0x005dab; 	X(PUSH(bx));	// 14483                  push    bx ;~ 01A2:5DAB
cs=0x1a2;eip=0x005dac; 	X(PUSH(cx));	// 14484                  push    cx ;~ 01A2:5DAC
cs=0x1a2;eip=0x005dad; 	X(PUSH(dx));	// 14485                  push    dx ;~ 01A2:5DAD
cs=0x1a2;eip=0x005dae; 	X(PUSH(bp));	// 14486                  push    bp ;~ 01A2:5DAE
cs=0x1a2;eip=0x005daf; 	X(PUSH(si));	// 14487                  push    si ;~ 01A2:5DAF
cs=0x1a2;eip=0x005db0; 	X(PUSH(di));	// 14488                  push    di ;~ 01A2:5DB0
cs=0x1a2;eip=0x005db1; 	X(PUSH(es));	// 14489                  push    es ;~ 01A2:5DB1
cs=0x1a2;eip=0x005db2; 	X(PUSH(ds));	// 14490                  push    ds ;~ 01A2:5DB2
cs=0x1a2;eip=0x005db3; 	X(PUSH(ax));	// 14491                  push    ax ;~ 01A2:5DB3
cs=0x1a2;eip=0x005db4; 	X(byte_1f797 = 0;);	// 14492                  mov     ds:byte_1F797, 0 ;~ 01A2:5DB4
cs=0x1a2;eip=0x005db9; 	T(dx = di;);	// 14493                  mov     dx, di ;~ 01A2:5DB9
cs=0x1a2;eip=0x005dbb; 	J(CALL(sub_175af,0));	// 14494                  call    sub_175AF ;~ 01A2:5DBB
cs=0x1a2;eip=0x005dbe; 	X(POP(ax));	// 14495                  pop     ax ;~ 01A2:5DBE
cs=0x1a2;eip=0x005dbf; 	J(return sub_15dcb(m2c::kloc_15dd9, _state););	// 14496                  jmp     short loc_15DD9 ;~ 01A2:5DBF

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kseg000_5daa_proc: 	goto seg000_5daa_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_15dc1(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_15dc1:
    _begin:
cs=0x1a2;eip=0x005dc1; 	T(ax = word_1f3ac;);	// 14503                  mov     ax, ds:word_1F3AC ;~ 01A2:5DC1
cs=0x1a2;eip=0x005dc4; 	X(word_1f700 = ax;);	// 14504                  mov     ds:word_1F700, ax ;~ 01A2:5DC4
cs=0x1a2;eip=0x005dc7; 	T(al = cl;);	// 14505                  mov     al, cl ;~ 01A2:5DC7
cs=0x1a2;eip=0x005dc9; 	J(return sub_15dcb(m2c::kloc_15dd0, _state););	// 14506                  jmp     short loc_15DD0 ;~ 01A2:5DC9

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_15dc1: 	goto sub_15dc1;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_15dcb(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_15dcb:
    _begin:
cs=0x1a2;eip=0x005dcb; 	X(byte_1f797 = 0;);	// 14515                  mov     ds:byte_1F797, 0 ;~ 01A2:5DCB
loc_15dd0:
	// 5291 
cs=0x1a2;eip=0x005dd0; 	X(PUSH(ax));	// 14518                  push    ax ;~ 01A2:5DD0
cs=0x1a2;eip=0x005dd1; 	X(PUSH(bx));	// 14519                  push    bx ;~ 01A2:5DD1
cs=0x1a2;eip=0x005dd2; 	X(PUSH(cx));	// 14520                  push    cx ;~ 01A2:5DD2
cs=0x1a2;eip=0x005dd3; 	X(PUSH(dx));	// 14521                  push    dx ;~ 01A2:5DD3
cs=0x1a2;eip=0x005dd4; 	X(PUSH(bp));	// 14522                  push    bp ;~ 01A2:5DD4
cs=0x1a2;eip=0x005dd5; 	X(PUSH(si));	// 14523                  push    si ;~ 01A2:5DD5
cs=0x1a2;eip=0x005dd6; 	X(PUSH(di));	// 14524                  push    di ;~ 01A2:5DD6
cs=0x1a2;eip=0x005dd7; 	X(PUSH(es));	// 14525                  push    es ;~ 01A2:5DD7
cs=0x1a2;eip=0x005dd8; 	X(PUSH(ds));	// 14526                  push    ds ;~ 01A2:5DD8
loc_15dd9:
	// 5292 
cs=0x1a2;eip=0x005dd9; 	T(XOR(ah, ah));	// 14529                  xor     ah, ah ;~ 01A2:5DD9
cs=0x1a2;eip=0x005ddb; 	T(CMP(byte_1f827, 0));	// 14530                  cmp     ds:byte_1F827, 0 ;~ 01A2:5DDB
cs=0x1a2;eip=0x005de0; 	J(JNZ(loc_15dff));	// 14531                  jnz     short loc_15DFF ;~ 01A2:5DE0
cs=0x1a2;eip=0x005de2; 	X(PUSH(ax));	// 14532                  push    ax ;~ 01A2:5DE2
cs=0x1a2;eip=0x005de3; 	J(CALL(sub_19c41,0));	// 14533                  call    sub_19C41 ;~ 01A2:5DE3
cs=0x1a2;eip=0x005de6; 	X(POP(ax));	// 14534                  pop     ax ;~ 01A2:5DE6
cs=0x1a2;eip=0x005de7; 	X(*(dw*)(&off_1f736) = ax;);	// 14535                  mov     word ptr ds:off_1F736, ax ;~ 01A2:5DE7
cs=0x1a2;eip=0x005dea; 	T(SHL(ax, 1));	// 14536                  shl     ax, 1 ;~ 01A2:5DEA
cs=0x1a2;eip=0x005dec; 	T(SHL(ax, 1));	// 14537                  shl     ax, 1 ;~ 01A2:5DEC
cs=0x1a2;eip=0x005dee; 	T(SUB(dx, ax));	// 14538                  sub     dx, ax ;~ 01A2:5DEE
cs=0x1a2;eip=0x005df0; 	J(JL(loc_15dfc));	// 14539                  jl      short loc_15DFC ;~ 01A2:5DF0
loc_15df2:
	// 5293 
cs=0x1a2;eip=0x005df2; 	X(INC(*(dw*)(&off_1f736)));	// 14542                  inc     word ptr ds:off_1F736 ;~ 01A2:5DF2
cs=0x1a2;eip=0x005df6; 	T(SUB(dx, *(dw*)(&off_1f736)));	// 14543                  sub     dx, word ptr ds:off_1F736 ;~ 01A2:5DF6
cs=0x1a2;eip=0x005dfa; 	J(JG(loc_15df2));	// 14544                  jg      short loc_15DF2 ;~ 01A2:5DFA
loc_15dfc:
	// 5294 
cs=0x1a2;eip=0x005dfc; 	T(ax = *(dw*)(&off_1f736););	// 14547                  mov     ax, word ptr ds:off_1F736 ;~ 01A2:5DFC
loc_15dff:
	// 5295 
cs=0x1a2;eip=0x005dff; 	X(*(dw*)(((db*)&off_1f736)+2) = ax;);	// 14550                  mov     word ptr ds:off_1F736+2, ax ;~ 01A2:5DFF
cs=0x1a2;eip=0x005e02; 	T(si = word_1f378;);	// 14551                  mov     si, ds:word_1F378 ;~ 01A2:5E02
cs=0x1a2;eip=0x005e06; 	X(byte_1f862 = 0;);	// 14552                  mov     ds:byte_1F862, 0 ;~ 01A2:5E06
cs=0x1a2;eip=0x005e0b; 	X(byte_1f864 = 0;);	// 14553                  mov     ds:byte_1F864, 0 ;~ 01A2:5E0B
loc_15e10:
	// 5296 
cs=0x1a2;eip=0x005e10; 	T(XOR(bx, bx));	// 14556                  xor     bx, bx ;~ 01A2:5E10
cs=0x1a2;eip=0x005e12; 	X(word_1f72e = di;);	// 14557                  mov     ds:word_1F72E, di ;~ 01A2:5E12
cs=0x1a2;eip=0x005e16; 	T(bp = *(dw*)(((db*)&off_1f736)+2););	// 14558                  mov     bp, word ptr ds:off_1F736+2 ;~ 01A2:5E16
loc_15e1a:
	// 5297 
cs=0x1a2;eip=0x005e1a; 	J(CALL(sub_15ee3,0));	// 14561                  call    sub_15EE3 ;~ 01A2:5E1A
cs=0x1a2;eip=0x005e1d; 	T(CMP(bx, *(dw*)(((db*)&off_1f736)+2)));	// 14562                  cmp     bx, word ptr ds:off_1F736+2 ;~ 01A2:5E1D
cs=0x1a2;eip=0x005e21; 	J(JG(loc_15e2f));	// 14563                  jg      short loc_15E2F ;~ 01A2:5E21
cs=0x1a2;eip=0x005e23; 	T(bp = bx;);	// 14564                  mov     bp, bx ;~ 01A2:5E23
cs=0x1a2;eip=0x005e25; 	T(INC(bx));	// 14565                  inc     bx ;~ 01A2:5E25
cs=0x1a2;eip=0x005e26; 	T(CMP(byte_1f864, 0));	// 14566                  cmp     ds:byte_1F864, 0 ;~ 01A2:5E26
cs=0x1a2;eip=0x005e2b; 	J(JNZ(loc_15e34));	// 14567                  jnz     short loc_15E34 ;~ 01A2:5E2B
cs=0x1a2;eip=0x005e2d; 	J(JMP(loc_15e1a));	// 14568                  jmp     short loc_15E1A ;~ 01A2:5E2D
loc_15e2f:
	// 5298 
cs=0x1a2;eip=0x005e2f; 	X(byte_1f864 = 0;);	// 14572                  mov     ds:byte_1F864, 0 ;~ 01A2:5E2F
loc_15e34:
	// 5299 
cs=0x1a2;eip=0x005e34; 	J(CALL(sub_19c71,0));	// 14575                  call    sub_19C71 ;~ 01A2:5E34
cs=0x1a2;eip=0x005e37; 	T(ADD(si, bp));	// 14576                  add     si, bp ;~ 01A2:5E37
cs=0x1a2;eip=0x005e39; 	X(MOV(*(raddr(ds,si)), 0));	// 14577                  mov     byte ptr [si], 0 ;~ 01A2:5E39
cs=0x1a2;eip=0x005e3c; 	T(INC(si));	// 14578                  inc     si ;~ 01A2:5E3C
cs=0x1a2;eip=0x005e3d; 	T(ADD(di, bp));	// 14579                  add     di, bp ;~ 01A2:5E3D
cs=0x1a2;eip=0x005e3f; 	T(CMP(*(raddr(ds,di)), 0x20));	// 14580                  cmp     byte ptr [di], 20h ; ' ' ;~ 01A2:5E3F
cs=0x1a2;eip=0x005e42; 	J(JNZ(loc_15e45));	// 14581                  jnz     short loc_15E45 ;~ 01A2:5E42
cs=0x1a2;eip=0x005e44; 	T(INC(di));	// 14582                  inc     di ;~ 01A2:5E44
loc_15e45:
	// 5300 
cs=0x1a2;eip=0x005e45; 	X(ADD(byte_1f862, 6));	// 14585                  add     ds:byte_1F862, 6 ;~ 01A2:5E45
cs=0x1a2;eip=0x005e4a; 	T(CMP(byte_1f864, 0));	// 14586                  cmp     ds:byte_1F864, 0 ;~ 01A2:5E4A
cs=0x1a2;eip=0x005e4f; 	J(JZ(loc_15e10));	// 14587                  jz      short loc_15E10 ;~ 01A2:5E4F
cs=0x1a2;eip=0x005e51; 	X(MOV(*(raddr(ds,si)), 0x0FF));	// 14588                  mov     byte ptr [si], 0FFh ;~ 01A2:5E51
cs=0x1a2;eip=0x005e54; 	T(al = byte_1f862;);	// 14589                  mov     al, ds:byte_1F862 ;~ 01A2:5E54
cs=0x1a2;eip=0x005e57; 	T(XOR(ah, ah));	// 14590                  xor     ah, ah ;~ 01A2:5E57
cs=0x1a2;eip=0x005e59; 	T(dh = 8;);	// 14591                  mov     dh, 8 ;~ 01A2:5E59
cs=0x1a2;eip=0x005e5b; 	T(DIV1(dh));	// 14592                  div     dh ;~ 01A2:5E5B
cs=0x1a2;eip=0x005e5d; 	T(dh = al;);	// 14593                  mov     dh, al ;~ 01A2:5E5D
cs=0x1a2;eip=0x005e5f; 	X(PUSH(dx));	// 14594                  push    dx ;~ 01A2:5E5F
cs=0x1a2;eip=0x005e60; 	T(ax = *(dw*)(((db*)&off_1f736)+2););	// 14595                  mov     ax, word ptr ds:off_1F736+2 ;~ 01A2:5E60
cs=0x1a2;eip=0x005e63; 	T(dx = 6;);	// 14596                  mov     dx, 6 ;~ 01A2:5E63
cs=0x1a2;eip=0x005e66; 	T(MUL1_2(dx));	// 14597                  mul     dx ;~ 01A2:5E66
cs=0x1a2;eip=0x005e68; 	T(cx = 8;);	// 14598                  mov     cx, 8 ;~ 01A2:5E68
cs=0x1a2;eip=0x005e6b; 	T(DIV2(cx));	// 14599                  div     cx ;~ 01A2:5E6B
cs=0x1a2;eip=0x005e6d; 	T(cx = ax;);	// 14600                  mov     cx, ax ;~ 01A2:5E6D
cs=0x1a2;eip=0x005e6f; 	X(POP(dx));	// 14601                  pop     dx ;~ 01A2:5E6F
cs=0x1a2;eip=0x005e70; 	T(ax = 0x20;);	// 14602                  mov     ax, 20h ; ' ' ;~ 01A2:5E70
cs=0x1a2;eip=0x005e73; 	T(dl = 0x14;);	// 14603                  mov     dl, 14h ;~ 01A2:5E73
cs=0x1a2;eip=0x005e75; 	T(CMP(byte_1f827, 0));	// 14604                  cmp     ds:byte_1F827, 0 ;~ 01A2:5E75
cs=0x1a2;eip=0x005e7a; 	J(JZ(loc_15e8c));	// 14605                  jz      short loc_15E8C ;~ 01A2:5E7A
cs=0x1a2;eip=0x005e7c; 	J(JS(loc_15e85));	// 14606                  js      short loc_15E85 ;~ 01A2:5E7C
cs=0x1a2;eip=0x005e7e; 	T(ax = 0x0D0;);	// 14607                  mov     ax, 0D0h ;~ 01A2:5E7E
cs=0x1a2;eip=0x005e81; 	T(dl = 0x14;);	// 14608                  mov     dl, 14h ;~ 01A2:5E81
cs=0x1a2;eip=0x005e83; 	J(JMP(loc_15ea0));	// 14609                  jmp     short loc_15EA0 ;~ 01A2:5E83
loc_15e85:
	// 5301 
cs=0x1a2;eip=0x005e85; 	T(ax = 0x0D0;);	// 14613                  mov     ax, 0D0h ;~ 01A2:5E85
cs=0x1a2;eip=0x005e88; 	T(dl = 0x74;);	// 14614                  mov     dl, 74h ; 't' ;~ 01A2:5E88
cs=0x1a2;eip=0x005e8a; 	J(JMP(loc_15ea0));	// 14615                  jmp     short loc_15EA0 ;~ 01A2:5E8A
loc_15e8c:
	// 5302 
cs=0x1a2;eip=0x005e8c; 	X(PUSH(bx));	// 14619                  push    bx ;~ 01A2:5E8C
cs=0x1a2;eip=0x005e8d; 	T(XOR(bh, bh));	// 14620                  xor     bh, bh ;~ 01A2:5E8D
cs=0x1a2;eip=0x005e8f; 	T(bl = byte_1f798;);	// 14621                  mov     bl, ds:byte_1F798 ;~ 01A2:5E8F
cs=0x1a2;eip=0x005e93; 	T(SHL(bx, 1));	// 14622                  shl     bx, 1 ;~ 01A2:5E93
cs=0x1a2;eip=0x005e95; 	T(SHL(bx, 1));	// 14623                  shl     bx, 1 ;~ 01A2:5E95
cs=0x1a2;eip=0x005e97; 	T(SHL(bx, 1));	// 14624                  shl     bx, 1 ;~ 01A2:5E97
cs=0x1a2;eip=0x005e99; 	T(SHL(bx, 1));	// 14625                  shl     bx, 1 ;~ 01A2:5E99
cs=0x1a2;eip=0x005e9b; 	T(ADD(ax, bx));	// 14626                  add     ax, bx ;~ 01A2:5E9B
cs=0x1a2;eip=0x005e9d; 	T(ADD(dl, bl));	// 14627                  add     dl, bl ;~ 01A2:5E9D
cs=0x1a2;eip=0x005e9f; 	X(POP(bx));	// 14628                  pop     bx ;~ 01A2:5E9F
loc_15ea0:
	// 5303 
cs=0x1a2;eip=0x005ea0; 	X(word_1f3e4 = ax;);	// 14632                  mov     ds:word_1F3E4, ax ;~ 01A2:5EA0
cs=0x1a2;eip=0x005ea3; 	X(byte_1f3e6 = dl;);	// 14633                  mov     ds:byte_1F3E6, dl ;~ 01A2:5EA3
cs=0x1a2;eip=0x005ea7; 	J(CALL(sub_18a87,0));	// 14634                  call    sub_18A87 ;~ 01A2:5EA7
cs=0x1a2;eip=0x005eaa; 	T(di = word_1f378;);	// 14635                  mov     di, ds:word_1F378 ;~ 01A2:5EAA
cs=0x1a2;eip=0x005eae; 	T(dh = byte_1f3e6;);	// 14636                  mov     dh, ds:byte_1F3E6 ;~ 01A2:5EAE
cs=0x1a2;eip=0x005eb2; 	T(ADD(dh, 0x0D));	// 14637                  add     dh, 0Dh ;~ 01A2:5EB2
cs=0x1a2;eip=0x005eb5; 	T(ADD(cx, 2));	// 14638                  add     cx, 2 ;~ 01A2:5EB5
cs=0x1a2;eip=0x005eb8; 	X(PUSH(dx));	// 14639                  push    dx ;~ 01A2:5EB8
cs=0x1a2;eip=0x005eb9; 	X(PUSH(ax));	// 14640                  push    ax ;~ 01A2:5EB9
cs=0x1a2;eip=0x005eba; 	T(ax = 8;);	// 14641                  mov     ax, 8 ;~ 01A2:5EBA
cs=0x1a2;eip=0x005ebd; 	T(MUL1_2(cx));	// 14642                  mul     cx ;~ 01A2:5EBD
cs=0x1a2;eip=0x005ebf; 	T(ch = al;);	// 14643                  mov     ch, al ;~ 01A2:5EBF
cs=0x1a2;eip=0x005ec1; 	X(POP(ax));	// 14644                  pop     ax ;~ 01A2:5EC1
cs=0x1a2;eip=0x005ec2; 	X(POP(dx));	// 14645                  pop     dx ;~ 01A2:5EC2
loc_15ec3:
	// 5304 
cs=0x1a2;eip=0x005ec3; 	T(ax = word_1f3e4;);	// 14648                  mov     ax, ds:word_1F3E4 ;~ 01A2:5EC3
cs=0x1a2;eip=0x005ec6; 	J(CALL(sub_18714,0));	// 14649                  call    sub_18714 ;~ 01A2:5EC6
cs=0x1a2;eip=0x005ec9; 	T(ADD(dh, 6));	// 14650                  add     dh, 6 ;~ 01A2:5EC9
cs=0x1a2;eip=0x005ecc; 	X(PUSH(dx));	// 14651                  push    dx ;~ 01A2:5ECC
cs=0x1a2;eip=0x005ecd; 	J(CALL(sub_19c41,0));	// 14652                  call    sub_19C41 ;~ 01A2:5ECD
cs=0x1a2;eip=0x005ed0; 	T(ADD(di, dx));	// 14653                  add     di, dx ;~ 01A2:5ED0
cs=0x1a2;eip=0x005ed2; 	X(POP(dx));	// 14654                  pop     dx ;~ 01A2:5ED2
cs=0x1a2;eip=0x005ed3; 	T(INC(di));	// 14655                  inc     di ;~ 01A2:5ED3
cs=0x1a2;eip=0x005ed4; 	T(CMP(*(raddr(ds,di)), 0));	// 14656                  cmp     byte ptr [di], 0 ;~ 01A2:5ED4
cs=0x1a2;eip=0x005ed7; 	J(JNS(loc_15ec3));	// 14657                  jns     short loc_15EC3 ;~ 01A2:5ED7
cs=0x1a2;eip=0x005ed9; 	X(POP(ds));	// 14658                  pop     ds ;~ 01A2:5ED9
cs=0x1a2;eip=0x005eda; 	X(POP(es));	// 14659                  pop     es ;~ 01A2:5EDA
cs=0x1a2;eip=0x005edb; 	X(POP(di));	// 14661                  pop     di ;~ 01A2:5EDB
cs=0x1a2;eip=0x005edc; 	X(POP(si));	// 14662                  pop     si ;~ 01A2:5EDC
cs=0x1a2;eip=0x005edd; 	X(POP(bp));	// 14663                  pop     bp ;~ 01A2:5EDD
cs=0x1a2;eip=0x005ede; 	X(POP(dx));	// 14664                  pop     dx ;~ 01A2:5EDE
cs=0x1a2;eip=0x005edf; 	X(POP(cx));	// 14665                  pop     cx ;~ 01A2:5EDF
cs=0x1a2;eip=0x005ee0; 	X(POP(bx));	// 14666                  pop     bx ;~ 01A2:5EE0
cs=0x1a2;eip=0x005ee1; 	X(POP(ax));	// 14667                  pop     ax ;~ 01A2:5EE1
cs=0x1a2;eip=0x005ee2; 	J(RETN(0));	// 14668                  retn ;~ 01A2:5EE2

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_15dd0: 	goto loc_15dd0;
        case m2c::kloc_15dd9: 	goto loc_15dd9;
        case m2c::kloc_15df2: 	goto loc_15df2;
        case m2c::kloc_15dfc: 	goto loc_15dfc;
        case m2c::kloc_15dff: 	goto loc_15dff;
        case m2c::kloc_15e10: 	goto loc_15e10;
        case m2c::kloc_15e1a: 	goto loc_15e1a;
        case m2c::kloc_15e2f: 	goto loc_15e2f;
        case m2c::kloc_15e34: 	goto loc_15e34;
        case m2c::kloc_15e45: 	goto loc_15e45;
        case m2c::kloc_15e85: 	goto loc_15e85;
        case m2c::kloc_15e8c: 	goto loc_15e8c;
        case m2c::kloc_15ea0: 	goto loc_15ea0;
        case m2c::kloc_15ec3: 	goto loc_15ec3;
        case m2c::ksub_15dcb: 	goto sub_15dcb;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_15ee3(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_15ee3:
    _begin:
cs=0x1a2;eip=0x005ee3; 	X(PUSH(si));	// 14676                  push    si ;~ 01A2:5EE3
cs=0x1a2;eip=0x005ee4; 	T(si = word_1f72e;);	// 14677                  mov     si, ds:word_1F72E ;~ 01A2:5EE4
loc_15ee8:
	// 5305 
cs=0x1a2;eip=0x005ee8; 	T(CMP(*(raddr(ds,si)), 0));	// 14680                  cmp     byte ptr [si], 0 ;~ 01A2:5EE8
cs=0x1a2;eip=0x005eeb; 	J(JZ(loc_15efd));	// 14681                  jz      short loc_15EFD ;~ 01A2:5EEB
cs=0x1a2;eip=0x005eed; 	T(CMP(*(raddr(ds,si)), 0x20));	// 14682                  cmp     byte ptr [si], 20h ; ' ' ;~ 01A2:5EED
cs=0x1a2;eip=0x005ef0; 	J(JZ(loc_15ef6));	// 14683                  jz      short loc_15EF6 ;~ 01A2:5EF0
cs=0x1a2;eip=0x005ef2; 	T(INC(si));	// 14684                  inc     si ;~ 01A2:5EF2
cs=0x1a2;eip=0x005ef3; 	T(INC(bx));	// 14685                  inc     bx ;~ 01A2:5EF3
cs=0x1a2;eip=0x005ef4; 	J(JMP(loc_15ee8));	// 14686                  jmp     short loc_15EE8 ;~ 01A2:5EF4
loc_15ef6:
	// 5306 
cs=0x1a2;eip=0x005ef6; 	T(INC(si));	// 14690                  inc     si ;~ 01A2:5EF6
cs=0x1a2;eip=0x005ef7; 	X(word_1f72e = si;);	// 14691                  mov     ds:word_1F72E, si ;~ 01A2:5EF7
cs=0x1a2;eip=0x005efb; 	X(POP(si));	// 14692                  pop     si ;~ 01A2:5EFB
cs=0x1a2;eip=0x005efc; 	J(RETN(0));	// 14693                  retn ;~ 01A2:5EFC
loc_15efd:
	// 5307 
cs=0x1a2;eip=0x005efd; 	X(word_1f72e = si;);	// 14698                  mov     ds:word_1F72E, si ;~ 01A2:5EFD
cs=0x1a2;eip=0x005f01; 	X(POP(si));	// 14699                  pop     si ;~ 01A2:5F01
cs=0x1a2;eip=0x005f02; 	X(byte_1f864 = 1;);	// 14700                  mov     ds:byte_1F864, 1 ;~ 01A2:5F02
cs=0x1a2;eip=0x005f07; 	J(RETN(0));	// 14701                  retn ;~ 01A2:5F07

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_15ee8: 	goto loc_15ee8;
        case m2c::kloc_15ef6: 	goto loc_15ef6;
        case m2c::kloc_15efd: 	goto loc_15efd;
        case m2c::ksub_15ee3: 	goto sub_15ee3;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_15f08(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_15f08:
    _begin:
cs=0x1a2;eip=0x005f08; 	T(es = seg_1f8f4;);	// 14710                  mov     es, ds:seg_1F8F4 ;~ 01A2:5F08
cs=0x1a2;eip=0x005f0c; 	T(di = 0x0B8;);	// 14712                  mov     di, 0B8h ;~ 01A2:5F0C
cs=0x1a2;eip=0x005f0f; 	T(XOR(ax, ax));	// 14713                  xor     ax, ax ;~ 01A2:5F0F
cs=0x1a2;eip=0x005f11; 	X(STOSW);	// 14714                  stosw ;~ 01A2:5F11
cs=0x1a2;eip=0x005f12; 	T(cx = 6;);	// 14715                  mov     cx, 6 ;~ 01A2:5F12
	// 14716                  rep stosw ;~ 01A2:5F15
cs=0x1a2;eip=0x005f15; 	X(	REP STOSW);	// 14716                  rep stosw ;~ 01A2:5F15
cs=0x1a2;eip=0x005f17; 	J(RETN(0));	// 14717                  retn ;~ 01A2:5F17

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_15f08: 	goto sub_15f08;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_15f18(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_15f18:
    _begin:
cs=0x1a2;eip=0x005f18; 	X(PUSH(si));	// 14726                  push    si ;~ 01A2:5F18
cs=0x1a2;eip=0x005f19; 	X(PUSH(ax));	// 14727                  push    ax ;~ 01A2:5F19
cs=0x1a2;eip=0x005f1a; 	T(si = 0x0B8;);	// 14728                  mov     si, 0B8h ;~ 01A2:5F1A
cs=0x1a2;eip=0x005f1d; 	T(LODSW);	// 14729                  lodsw ;~ 01A2:5F1D
cs=0x1a2;eip=0x005f1e; 	T(CMP(ax, 6));	// 14730                  cmp     ax, 6 ;~ 01A2:5F1E
cs=0x1a2;eip=0x005f21; 	X(INC(*(dw*)(raddr(ds,si-2))));	// 14731                  inc     word ptr [si-2] ;~ 01A2:5F21
loc_15f24:
	// 5308 
cs=0x1a2;eip=0x005f24; 	T(LODSW);	// 14734                  lodsw ;~ 01A2:5F24
cs=0x1a2;eip=0x005f25; 	T(OR(ax, ax));	// 14735                  or      ax, ax ;~ 01A2:5F25
cs=0x1a2;eip=0x005f27; 	J(JNZ(loc_15f24));	// 14736                  jnz     short loc_15F24 ;~ 01A2:5F27
cs=0x1a2;eip=0x005f29; 	X(MOV(*(dw*)(raddr(ds,si-2)), dx));	// 14737                  mov     [si-2], dx ;~ 01A2:5F29
cs=0x1a2;eip=0x005f2c; 	X(POP(ax));	// 14738                  pop     ax ;~ 01A2:5F2C
cs=0x1a2;eip=0x005f2d; 	X(POP(si));	// 14739                  pop     si ;~ 01A2:5F2D
cs=0x1a2;eip=0x005f2e; 	J(RETN(0));	// 14740                  retn ;~ 01A2:5F2E

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_15f24: 	goto loc_15f24;
        case m2c::ksub_15f18: 	goto sub_15f18;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_15f2f(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_15f2f:
    _begin:
cs=0x1a2;eip=0x005f2f; 	X(PUSH(cx));	// 14749                  push    cx ;~ 01A2:5F2F
cs=0x1a2;eip=0x005f30; 	X(PUSH(si));	// 14750                  push    si ;~ 01A2:5F30
cs=0x1a2;eip=0x005f31; 	X(PUSH(ax));	// 14751                  push    ax ;~ 01A2:5F31
cs=0x1a2;eip=0x005f32; 	T(si = 0x0B8;);	// 14752                  mov     si, 0B8h ;~ 01A2:5F32
cs=0x1a2;eip=0x005f35; 	T(LODSW);	// 14753                  lodsw ;~ 01A2:5F35
cs=0x1a2;eip=0x005f36; 	T(cx = 6;);	// 14754                  mov     cx, 6 ;~ 01A2:5F36
cs=0x1a2;eip=0x005f39; 	X(DEC(*(dw*)(raddr(ds,si-2))));	// 14755                  dec     word ptr [si-2] ;~ 01A2:5F39
loc_15f3c:
	// 5309 
cs=0x1a2;eip=0x005f3c; 	T(LODSW);	// 14758                  lodsw ;~ 01A2:5F3C
cs=0x1a2;eip=0x005f3d; 	T(CMP(ax, dx));	// 14759                  cmp     ax, dx ;~ 01A2:5F3D
cs=0x1a2;eip=0x005f3f; 	J(JZ(loc_15f43));	// 14760                  jz      short loc_15F43 ;~ 01A2:5F3F
cs=0x1a2;eip=0x005f41; 	J(LOOP(loc_15f3c));	// 14761                  loop    loc_15F3C ;~ 01A2:5F41
loc_15f43:
	// 5310 
cs=0x1a2;eip=0x005f43; 	X(POP(ax));	// 14764                  pop     ax ;~ 01A2:5F43
cs=0x1a2;eip=0x005f44; 	X(MOV(*(dw*)(raddr(ds,si-2)), 0));	// 14765                  mov     word ptr [si-2], 0 ;~ 01A2:5F44
cs=0x1a2;eip=0x005f49; 	X(POP(si));	// 14766                  pop     si ;~ 01A2:5F49
cs=0x1a2;eip=0x005f4a; 	X(POP(cx));	// 14767                  pop     cx ;~ 01A2:5F4A
cs=0x1a2;eip=0x005f4b; 	J(RETN(0));	// 14768                  retn ;~ 01A2:5F4B

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_15f3c: 	goto loc_15f3c;
        case m2c::kloc_15f43: 	goto loc_15f43;
        case m2c::ksub_15f2f: 	goto sub_15f2f;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_15f4c(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_15f4c:
    _begin:
cs=0x1a2;eip=0x005f4c; 	T(CMP(byte_1f7bd, 0));	// 14776                  cmp     ds:byte_1F7BD, 0 ;~ 01A2:5F4C
cs=0x1a2;eip=0x005f51; 	J(JZ(loc_15f56));	// 14777                  jz      short loc_15F56 ;~ 01A2:5F51
cs=0x1a2;eip=0x005f53; 	J(JMP(locret_16018));	// 14778                  jmp     locret_16018 ;~ 01A2:5F53
loc_15f56:
	// 5311 
cs=0x1a2;eip=0x005f56; 	T(CMP(byte_1f83a, 0));	// 14782                  cmp     ds:byte_1F83A, 0 ;~ 01A2:5F56
cs=0x1a2;eip=0x005f5b; 	J(JZ(loc_15f6e));	// 14783                  jz      short loc_15F6E ;~ 01A2:5F5B
cs=0x1a2;eip=0x005f5d; 	T(TEST(byte_1f83a, 2));	// 14784                  test    ds:byte_1F83A, 2 ;~ 01A2:5F5D
cs=0x1a2;eip=0x005f62; 	X(PUSHF);	// 14785                  pushf ;~ 01A2:5F62
cs=0x1a2;eip=0x005f63; 	X(XOR(byte_1f83a, 2));	// 14786                  xor     ds:byte_1F83A, 2 ;~ 01A2:5F63
cs=0x1a2;eip=0x005f68; 	X(POPF);	// 14787                  popf ;~ 01A2:5F68
cs=0x1a2;eip=0x005f69; 	J(JNZ(loc_15f6e));	// 14788                  jnz     short loc_15F6E ;~ 01A2:5F69
cs=0x1a2;eip=0x005f6b; 	J(JMP(locret_16018));	// 14789                  jmp     locret_16018 ;~ 01A2:5F6B
loc_15f6e:
	// 5312 
cs=0x1a2;eip=0x005f6e; 	T(ax = word_1f3ec;);	// 14794                  mov     ax, ds:word_1F3EC ;~ 01A2:5F6E
cs=0x1a2;eip=0x005f71; 	X(*(dw*)(((db*)&off_1f736)+2) = ax;);	// 14795                  mov     word ptr ds:off_1F736+2, ax ;~ 01A2:5F71
cs=0x1a2;eip=0x005f74; 	T(OR(ax, ax));	// 14796                  or      ax, ax ;~ 01A2:5F74
cs=0x1a2;eip=0x005f76; 	J(JZ(loc_15fd0));	// 14797                  jz      short loc_15FD0 ;~ 01A2:5F76
cs=0x1a2;eip=0x005f78; 	T(si = 0x27E;);	// 14798                  mov     si, 27Eh ;~ 01A2:5F78
cs=0x1a2;eip=0x005f7b; 	X(word_1f1f6 = si;);	// 14799                  mov     word_1F1F6, si ;~ 01A2:5F7B
loc_15f7f:
	// 5313 
cs=0x1a2;eip=0x005f7f; 	T(XOR(bh, bh));	// 14802                  xor     bh, bh ;~ 01A2:5F7F
cs=0x1a2;eip=0x005f81; 	T(LODSB);	// 14803                  lodsb ;~ 01A2:5F81
cs=0x1a2;eip=0x005f82; 	T(bx = ax;);	// 14804                  mov     bx, ax ;~ 01A2:5F82
cs=0x1a2;eip=0x005f84; 	T(ADD(bl, 9));	// 14805                  add     bl, 9 ;~ 01A2:5F84
cs=0x1a2;eip=0x005f87; 	T(di = *(dw*)(&off_1f88a););	// 14806                  mov     di, word ptr ds:off_1F88A ;~ 01A2:5F87
cs=0x1a2;eip=0x005f8b; 	X(PUSH(es));	// 14807                  push    es ;~ 01A2:5F8B
cs=0x1a2;eip=0x005f8c; 	T(es = *(dw*)(((db*)&off_1f88a)+2););	// 14808                  mov     es, word ptr ds:off_1F88A+2 ;~ 01A2:5F8C
cs=0x1a2;eip=0x005f90; 	T(SHL(bx, 1));	// 14810                  shl     bx, 1 ;~ 01A2:5F90
cs=0x1a2;eip=0x005f92; 	T(SHL(bx, 1));	// 14811                  shl     bx, 1 ;~ 01A2:5F92
cs=0x1a2;eip=0x005f94; 	T(MOV(di, *(dw*)(raddr(es,bx+di+2))));	// 14812                  mov     di, es:[bx+di+2] ;~ 01A2:5F94
cs=0x1a2;eip=0x005f98; 	T(XOR(ah, ah));	// 14813                  xor     ah, ah ;~ 01A2:5F98
cs=0x1a2;eip=0x005f9a; 	T(LODSB);	// 14814                  lodsb ;~ 01A2:5F9A
cs=0x1a2;eip=0x005f9b; 	T(bx = ax;);	// 14815                  mov     bx, ax ;~ 01A2:5F9B
cs=0x1a2;eip=0x005f9d; 	T(SHL(bx, 1));	// 14816                  shl     bx, 1 ;~ 01A2:5F9D
cs=0x1a2;eip=0x005f9f; 	T(MOV(cx, *(dw*)(raddr(es,bx+di))));	// 14817                  mov     cx, es:[bx+di] ;~ 01A2:5F9F
cs=0x1a2;eip=0x005fa2; 	X(POP(es));	// 14818                  pop     es ;~ 01A2:5FA2
cs=0x1a2;eip=0x005fa3; 	T(LODSW);	// 14820                  lodsw ;~ 01A2:5FA3
cs=0x1a2;eip=0x005fa4; 	T(dx = ax;);	// 14821                  mov     dx, ax ;~ 01A2:5FA4
cs=0x1a2;eip=0x005fa6; 	J(CALL(sub_1407f,0));	// 14822                  call    sub_1407F ;~ 01A2:5FA6
cs=0x1a2;eip=0x005fa9; 	T(XOR(ah, ah));	// 14823                  xor     ah, ah ;~ 01A2:5FA9
cs=0x1a2;eip=0x005fab; 	T(MOV(al, *(raddr(ds,di+0x0C))));	// 14824                  mov     al, [di+0Ch] ;~ 01A2:5FAB
cs=0x1a2;eip=0x005fae; 	T(bp = di;);	// 14825                  mov     bp, di ;~ 01A2:5FAE
cs=0x1a2;eip=0x005fb0; 	T(ADD(bp, ax));	// 14826                  add     bp, ax ;~ 01A2:5FB0
cs=0x1a2;eip=0x005fb2; 	X(PUSH(*(dw*)(((db*)&off_1f736)+2)));	// 14827                  push    word ptr ds:off_1F736+2 ;~ 01A2:5FB2
cs=0x1a2;eip=0x005fb6; 	X(PUSH(si));	// 14828                  push    si ;~ 01A2:5FB6
cs=0x1a2;eip=0x005fb7; 	X(word_1f8fc = cx;);	// 14829                  mov     ds:word_1F8FC, cx ;~ 01A2:5FB7
cs=0x1a2;eip=0x005fbb; 	J(CALL(__dispatch_call,off_1f8f8));	// 14830                  call    ds:off_1F8F8 ;~ 01A2:5FBB
cs=0x1a2;eip=0x005fbf; 	X(POP(si));	// 14831                  pop     si ;~ 01A2:5FBF
cs=0x1a2;eip=0x005fc0; 	X(POP(*(dw*)(((db*)&off_1f736)+2)));	// 14832                  pop     word ptr ds:off_1F736+2 ;~ 01A2:5FC0
cs=0x1a2;eip=0x005fc4; 	X(DEC(*(dw*)(((db*)&off_1f736)+2)));	// 14833                  dec     word ptr ds:off_1F736+2 ;~ 01A2:5FC4
cs=0x1a2;eip=0x005fc8; 	J(JNZ(loc_15f7f));	// 14834                  jnz     short loc_15F7F ;~ 01A2:5FC8
cs=0x1a2;eip=0x005fca; 	X(word_1f3ec = 0;);	// 14835                  mov     ds:word_1F3EC, 0 ;~ 01A2:5FCA
loc_15fd0:
	// 5314 
cs=0x1a2;eip=0x005fd0; 	T(si = 0x0B8;);	// 14838                  mov     si, 0B8h ;~ 01A2:5FD0
cs=0x1a2;eip=0x005fd3; 	T(LODSW);	// 14839                  lodsw ;~ 01A2:5FD3
cs=0x1a2;eip=0x005fd4; 	X(*(dw*)(((db*)&off_1f736)+2) = ax;);	// 14840                  mov     word ptr ds:off_1F736+2, ax ;~ 01A2:5FD4
cs=0x1a2;eip=0x005fd7; 	T(OR(ax, ax));	// 14841                  or      ax, ax ;~ 01A2:5FD7
cs=0x1a2;eip=0x005fd9; 	J(JZ(locret_16018));	// 14842                  jz      short locret_16018 ;~ 01A2:5FD9
cs=0x1a2;eip=0x005fdb; 	X(DEC(*(dw*)(((db*)&off_1f736)+2)));	// 14843                  dec     word ptr ds:off_1F736+2 ;~ 01A2:5FDB
loc_15fdf:
	// 5315 
cs=0x1a2;eip=0x005fdf; 	T(LODSW);	// 14847                  lodsw ;~ 01A2:5FDF
cs=0x1a2;eip=0x005fe0; 	T(OR(ax, ax));	// 14848                  or      ax, ax ;~ 01A2:5FE0
cs=0x1a2;eip=0x005fe2; 	J(JZ(loc_15fdf));	// 14849                  jz      short loc_15FDF ;~ 01A2:5FE2
cs=0x1a2;eip=0x005fe4; 	T(dx = ax;);	// 14850                  mov     dx, ax ;~ 01A2:5FE4
cs=0x1a2;eip=0x005fe6; 	T(ax = 6;);	// 14851                  mov     ax, 6 ;~ 01A2:5FE6
cs=0x1a2;eip=0x005fe9; 	J(CALL(sub_1410e,0));	// 14852                  call    sub_1410E ;~ 01A2:5FE9
cs=0x1a2;eip=0x005fec; 	J(JZ(loc_16012));	// 14853                  jz      short loc_16012 ;~ 01A2:5FEC
cs=0x1a2;eip=0x005fee; 	X(PUSH(*(dw*)(((db*)&off_1f736)+2)));	// 14854                  push    word ptr ds:off_1F736+2 ;~ 01A2:5FEE
cs=0x1a2;eip=0x005ff2; 	X(PUSH(si));	// 14855                  push    si ;~ 01A2:5FF2
cs=0x1a2;eip=0x005ff3; 	T(XOR(ah, ah));	// 14856                  xor     ah, ah ;~ 01A2:5FF3
cs=0x1a2;eip=0x005ff5; 	T(MOV(al, *(raddr(ds,di+0x0C))));	// 14857                  mov     al, [di+0Ch] ;~ 01A2:5FF5
cs=0x1a2;eip=0x005ff8; 	T(bx = di;);	// 14858                  mov     bx, di ;~ 01A2:5FF8
cs=0x1a2;eip=0x005ffa; 	T(ADD(bx, ax));	// 14859                  add     bx, ax ;~ 01A2:5FFA
cs=0x1a2;eip=0x005ffc; 	T(XOR(ah, ah));	// 14860                  xor     ah, ah ;~ 01A2:5FFC
cs=0x1a2;eip=0x005ffe; 	T(MOV(al, *(raddr(ds,bx+1))));	// 14861                  mov     al, [bx+1] ;~ 01A2:5FFE
cs=0x1a2;eip=0x006001; 	T(OR(al, al));	// 14862                  or      al, al ;~ 01A2:6001
cs=0x1a2;eip=0x006003; 	J(JZ(loc_1600d));	// 14863                  jz      short loc_1600D ;~ 01A2:6003
cs=0x1a2;eip=0x006005; 	T(ADD(ax, 9));	// 14864                  add     ax, 9 ;~ 01A2:6005
cs=0x1a2;eip=0x006008; 	T(bp = bx;);	// 14865                  mov     bp, bx ;~ 01A2:6008
cs=0x1a2;eip=0x00600a; 	J(CALL(sub_1601e,0));	// 14866                  call    sub_1601E ;~ 01A2:600A
loc_1600d:
	// 5316 
cs=0x1a2;eip=0x00600d; 	X(POP(si));	// 14869                  pop     si ;~ 01A2:600D
cs=0x1a2;eip=0x00600e; 	X(POP(*(dw*)(((db*)&off_1f736)+2)));	// 14870                  pop     word ptr ds:off_1F736+2 ;~ 01A2:600E
loc_16012:
	// 5317 
cs=0x1a2;eip=0x006012; 	X(DEC(*(dw*)(((db*)&off_1f736)+2)));	// 14873                  dec     word ptr ds:off_1F736+2 ;~ 01A2:6012
cs=0x1a2;eip=0x006016; 	J(JNS(loc_15fdf));	// 14874                  jns     short loc_15FDF ;~ 01A2:6016
locret_16018:
	// 5318 
cs=0x1a2;eip=0x006018; 	J(RETN(0));	// 14878                  retn ;~ 01A2:6018

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_15f56: 	goto loc_15f56;
        case m2c::kloc_15f6e: 	goto loc_15f6e;
        case m2c::kloc_15f7f: 	goto loc_15f7f;
        case m2c::kloc_15fd0: 	goto loc_15fd0;
        case m2c::kloc_15fdf: 	goto loc_15fdf;
        case m2c::kloc_1600d: 	goto loc_1600d;
        case m2c::kloc_16012: 	goto loc_16012;
        case m2c::klocret_16018: 	goto locret_16018;
        case m2c::ksub_15f4c: 	goto sub_15f4c;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_16019(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_16019:
    _begin:
cs=0x1a2;eip=0x006019; 	J(CALL(__dispatch_call,word_1f902));	// 14887                  call    ds:word_1F902 ;~ 01A2:6019
cs=0x1a2;eip=0x00601d; 	J(RETF(0));	// 14888                  retf ;~ 01A2:601D

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_16019: 	goto sub_16019;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1601e(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1601e:
    _begin:
cs=0x1a2;eip=0x00601e; 	X(PUSH(si));	// 14896                  push    si ;~ 01A2:601E
cs=0x1a2;eip=0x00601f; 	T(si = *(dw*)(&off_1f88a););	// 14897                  mov     si, word ptr ds:off_1F88A ;~ 01A2:601F
cs=0x1a2;eip=0x006023; 	X(PUSH(es));	// 14898                  push    es ;~ 01A2:6023
cs=0x1a2;eip=0x006024; 	T(es = *(dw*)(((db*)&off_1f88a)+2););	// 14899                  mov     es, word ptr ds:off_1F88A+2 ;~ 01A2:6024
cs=0x1a2;eip=0x006028; 	X(PUSH(bx));	// 14901                  push    bx ;~ 01A2:6028
cs=0x1a2;eip=0x006029; 	T(bx = ax;);	// 14902                  mov     bx, ax ;~ 01A2:6029
cs=0x1a2;eip=0x00602b; 	T(SHL(bx, 1));	// 14903                  shl     bx, 1 ;~ 01A2:602B
cs=0x1a2;eip=0x00602d; 	T(SHL(bx, 1));	// 14904                  shl     bx, 1 ;~ 01A2:602D
cs=0x1a2;eip=0x00602f; 	T(MOV(si, *(dw*)(raddr(es,bx+si))));	// 14905                  mov     si, es:[bx+si] ;~ 01A2:602F
cs=0x1a2;eip=0x006032; 	T(ADD(si, 2));	// 14906                  add     si, 2 ;~ 01A2:6032
cs=0x1a2;eip=0x006035; 	X(POP(bx));	// 14907                  pop     bx ;~ 01A2:6035
cs=0x1a2;eip=0x006036; 	X(POP(es));	// 14908                  pop     es ;~ 01A2:6036
cs=0x1a2;eip=0x006037; 	X(word_1f8fc = si;);	// 14910                  mov     ds:word_1F8FC, si ;~ 01A2:6037
cs=0x1a2;eip=0x00603b; 	J(CALL(__dispatch_call,off_1f8f8));	// 14911                  call    ds:off_1F8F8 ;~ 01A2:603B
cs=0x1a2;eip=0x00603f; 	X(POP(si));	// 14912                  pop     si ;~ 01A2:603F
cs=0x1a2;eip=0x006040; 	J(RETN(0));	// 14913                  retn ;~ 01A2:6040

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1601e: 	goto sub_1601e;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_16041(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_16041:
    _begin:
cs=0x1a2;eip=0x006041; 	J(CALL(sub_15f08,0));	// 14922                  call    sub_15F08 ;~ 01A2:6041
cs=0x1a2;eip=0x006044; 	T(bx = word_1f19a;);	// 14924                  mov     bx, word_1F19A ;~ 01A2:6044
cs=0x1a2;eip=0x006048; 	T(ax = word_1f394;);	// 14925                  mov     ax, ds:word_1F394 ;~ 01A2:6048
cs=0x1a2;eip=0x00604b; 	T(DEC(ax));	// 14926                  dec     ax ;~ 01A2:604B
cs=0x1a2;eip=0x00604c; 	X(*(dw*)(((db*)&off_1f736)+2) = ax;);	// 14927                  mov     word ptr ds:off_1F736+2, ax ;~ 01A2:604C
loc_1604f:
	// 5319 
cs=0x1a2;eip=0x00604f; 	X(PUSH(bx));	// 14930                  push    bx ;~ 01A2:604F
cs=0x1a2;eip=0x006050; 	X(PUSH(*(dw*)(((db*)&off_1f736)+2)));	// 14931                  push    word ptr ds:off_1F736+2 ;~ 01A2:6050
cs=0x1a2;eip=0x006054; 	T(CMP(*(dw*)(raddr(ds,bx)), 0));	// 14932                  cmp     word ptr [bx], 0 ;~ 01A2:6054
cs=0x1a2;eip=0x006057; 	J(JS(loc_16080));	// 14933                  js      short loc_16080 ;~ 01A2:6057
cs=0x1a2;eip=0x006059; 	T(MOV(si, *(dw*)(raddr(ds,bx+0x0A))));	// 14934                  mov     si, [bx+0Ah] ;~ 01A2:6059
cs=0x1a2;eip=0x00605c; 	T(MOV(es, *(dw*)(raddr(ds,bx+6))));	// 14935                  mov     es, word ptr [bx+6] ;~ 01A2:605C
cs=0x1a2;eip=0x00605f; 	T(MOV(di, *(dw*)(raddr(ds,bx+8))));	// 14937                  mov     di, [bx+8] ;~ 01A2:605F
cs=0x1a2;eip=0x006062; 	T(TEST(*(raddr(ds,si+3)), 0x80));	// 14938                  test    byte ptr [si+3], 80h ;~ 01A2:6062
cs=0x1a2;eip=0x006066; 	J(JNZ(loc_16080));	// 14939                  jnz     short loc_16080 ;~ 01A2:6066
cs=0x1a2;eip=0x006068; 	T(XOR(bh, bh));	// 14940                  xor     bh, bh ;~ 01A2:6068
cs=0x1a2;eip=0x00606a; 	T(MOV(bl, *(raddr(ds,si+0x0C))));	// 14941                  mov     bl, [si+0Ch] ;~ 01A2:606A
cs=0x1a2;eip=0x00606d; 	T(TEST(*(raddr(ds,bx+si+5)), 0x80));	// 14942                  test    byte ptr [bx+si+5], 80h ;~ 01A2:606D
cs=0x1a2;eip=0x006071; 	J(JNZ(loc_16080));	// 14943                  jnz     short loc_16080 ;~ 01A2:6071
cs=0x1a2;eip=0x006073; 	T(CMP(*(raddr(es,di+0x16)), 3));	// 14944                  cmp     byte ptr es:[di+16h], 3 ;~ 01A2:6073
cs=0x1a2;eip=0x006078; 	J(JNZ(loc_16080));	// 14945                  jnz     short loc_16080 ;~ 01A2:6078
cs=0x1a2;eip=0x00607a; 	T(MOV(dx, *(dw*)(raddr(ds,si+4))));	// 14946                  mov     dx, [si+4] ;~ 01A2:607A
cs=0x1a2;eip=0x00607d; 	J(CALL(sub_15f18,0));	// 14947                  call    sub_15F18 ;~ 01A2:607D
loc_16080:
	// 5320 
cs=0x1a2;eip=0x006080; 	X(POP(*(dw*)(((db*)&off_1f736)+2)));	// 14951                  pop     word ptr ds:off_1F736+2 ;~ 01A2:6080
cs=0x1a2;eip=0x006084; 	X(POP(bx));	// 14952                  pop     bx ;~ 01A2:6084
cs=0x1a2;eip=0x006085; 	T(ADD(bx, 0x32));	// 14953                  add     bx, 32h ; '2' ;~ 01A2:6085
cs=0x1a2;eip=0x006088; 	X(DEC(*(dw*)(((db*)&off_1f736)+2)));	// 14954                  dec     word ptr ds:off_1F736+2 ;~ 01A2:6088
cs=0x1a2;eip=0x00608c; 	J(JNS(loc_1604f));	// 14955                  jns     short loc_1604F ;~ 01A2:608C
cs=0x1a2;eip=0x00608e; 	J(RETN(0));	// 14956                  retn ;~ 01A2:608E

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1604f: 	goto loc_1604f;
        case m2c::kloc_16080: 	goto loc_16080;
        case m2c::ksub_16041: 	goto sub_16041;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1608f(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1608f:
    _begin:
cs=0x1a2;eip=0x00608f; 	T(si = 0x2F6;);	// 14965                  mov     si, 2F6h ;~ 01A2:608F
cs=0x1a2;eip=0x006092; 	T(LODSW);	// 14966                  lodsw ;~ 01A2:6092
cs=0x1a2;eip=0x006093; 	T(OR(ax, ax));	// 14967                  or      ax, ax ;~ 01A2:6093
cs=0x1a2;eip=0x006095; 	J(JNZ(loc_1609a));	// 14968                  jnz     short loc_1609A ;~ 01A2:6095
cs=0x1a2;eip=0x006097; 	J(JMP(loc_1613b));	// 14969                  jmp     loc_1613B ;~ 01A2:6097
loc_1609a:
	// 5321 
cs=0x1a2;eip=0x00609a; 	T(DEC(ax));	// 14973                  dec     ax ;~ 01A2:609A
cs=0x1a2;eip=0x00609b; 	X(*(dw*)(((db*)&off_1f736)+2) = ax;);	// 14974                  mov     word ptr ds:off_1F736+2, ax ;~ 01A2:609B
cs=0x1a2;eip=0x00609e; 	X(MOV(*(dw*)(raddr(ds,si-2)), 0));	// 14975                  mov     word ptr [si-2], 0 ;~ 01A2:609E
loc_160a3:
	// 5322 
cs=0x1a2;eip=0x0060a3; 	T(LODSW);	// 14978                  lodsw ;~ 01A2:60A3
cs=0x1a2;eip=0x0060a4; 	T(dx = ax;);	// 14979                  mov     dx, ax ;~ 01A2:60A4
cs=0x1a2;eip=0x0060a6; 	T(TEST(dh, 0x80));	// 14980                  test    dh, 80h ;~ 01A2:60A6
cs=0x1a2;eip=0x0060a9; 	X(PUSHF);	// 14981                  pushf ;~ 01A2:60A9
cs=0x1a2;eip=0x0060aa; 	T(AND(dh, 0x7F));	// 14982                  and     dh, 7Fh ;~ 01A2:60AA
cs=0x1a2;eip=0x0060ad; 	X(POPF);	// 14983                  popf ;~ 01A2:60AD
cs=0x1a2;eip=0x0060ae; 	J(JZ(loc_1612a));	// 14984                  jz      short loc_1612A ;~ 01A2:60AE
cs=0x1a2;eip=0x0060b0; 	X(PUSH(*(dw*)(((db*)&off_1f736)+2)));	// 14985                  push    word ptr ds:off_1F736+2 ;~ 01A2:60B0
cs=0x1a2;eip=0x0060b4; 	X(PUSH(si));	// 14986                  push    si ;~ 01A2:60B4
cs=0x1a2;eip=0x0060b5; 	T(al = 6;);	// 14987                  mov     al, 6 ;~ 01A2:60B5
cs=0x1a2;eip=0x0060b7; 	T(ax = 6;);	// 14988                  mov     ax, 6 ;~ 01A2:60B7
cs=0x1a2;eip=0x0060ba; 	J(CALL(sub_1410e,0));	// 14989                  call    sub_1410E ;~ 01A2:60BA
cs=0x1a2;eip=0x0060bd; 	T(XOR(bh, bh));	// 14990                  xor     bh, bh ;~ 01A2:60BD
cs=0x1a2;eip=0x0060bf; 	T(MOV(bl, *(raddr(ds,di+0x0C))));	// 14991                  mov     bl, [di+0Ch] ;~ 01A2:60BF
cs=0x1a2;eip=0x0060c2; 	T(TEST(*(raddr(ds,bx+di+6)), 2));	// 14992                  test    byte ptr [bx+di+6], 2 ;~ 01A2:60C2
cs=0x1a2;eip=0x0060c6; 	J(JNZ(loc_16125));	// 14993                  jnz     short loc_16125 ;~ 01A2:60C6
cs=0x1a2;eip=0x0060c8; 	T(MOV(al, *(raddr(ds,di))));	// 14994                  mov     al, [di] ;~ 01A2:60C8
cs=0x1a2;eip=0x0060ca; 	X(byte_1f861 = al;);	// 14995                  mov     ds:byte_1F861, al ;~ 01A2:60CA
cs=0x1a2;eip=0x0060cd; 	T(MOV(al, *(raddr(ds,di+1))));	// 14996                  mov     al, [di+1] ;~ 01A2:60CD
cs=0x1a2;eip=0x0060d0; 	X(byte_1f862 = al;);	// 14997                  mov     ds:byte_1F862, al ;~ 01A2:60D0
cs=0x1a2;eip=0x0060d3; 	T(MOV(al, *(raddr(ds,di+2))));	// 14998                  mov     al, [di+2] ;~ 01A2:60D3
cs=0x1a2;eip=0x0060d6; 	X(byte_1f863 = al;);	// 14999                  mov     ds:byte_1F863, al ;~ 01A2:60D6
cs=0x1a2;eip=0x0060d9; 	T(al = 6;);	// 15000                  mov     al, 6 ;~ 01A2:60D9
cs=0x1a2;eip=0x0060db; 	J(CALL(sub_1438a,0));	// 15001                  call    sub_1438A ;~ 01A2:60DB
cs=0x1a2;eip=0x0060de; 	T(bx = 0x346;);	// 15002                  mov     bx, 346h ;~ 01A2:60DE
cs=0x1a2;eip=0x0060e1; 	T(MOV(ax, *(dw*)(raddr(ds,bx))));	// 15003                  mov     ax, [bx] ;~ 01A2:60E1
cs=0x1a2;eip=0x0060e3; 	X(INC(*(dw*)(raddr(ds,bx))));	// 15004                  inc     word ptr [bx] ;~ 01A2:60E3
cs=0x1a2;eip=0x0060e5; 	T(ADD(bx, 2));	// 15005                  add     bx, 2 ;~ 01A2:60E5
cs=0x1a2;eip=0x0060e8; 	T(SHL(ax, 1));	// 15006                  shl     ax, 1 ;~ 01A2:60E8
cs=0x1a2;eip=0x0060ea; 	T(di = ax;);	// 15007                  mov     di, ax ;~ 01A2:60EA
cs=0x1a2;eip=0x0060ec; 	T(SHL(ax, 1));	// 15008                  shl     ax, 1 ;~ 01A2:60EC
cs=0x1a2;eip=0x0060ee; 	T(SHL(ax, 1));	// 15009                  shl     ax, 1 ;~ 01A2:60EE
cs=0x1a2;eip=0x0060f0; 	T(SHL(ax, 1));	// 15010                  shl     ax, 1 ;~ 01A2:60F0
cs=0x1a2;eip=0x0060f2; 	T(ADD(bx, ax));	// 15011                  add     bx, ax ;~ 01A2:60F2
cs=0x1a2;eip=0x0060f4; 	T(SUB(bx, di));	// 15012                  sub     bx, di ;~ 01A2:60F4
cs=0x1a2;eip=0x0060f6; 	T(di = bx;);	// 15013                  mov     di, bx ;~ 01A2:60F6
cs=0x1a2;eip=0x0060f8; 	T(es = seg_1f8f4;);	// 15014                  mov     es, ds:seg_1F8F4 ;~ 01A2:60F8
cs=0x1a2;eip=0x0060fc; 	T(ax = word_1f71a;);	// 15016                  mov     ax, ds:word_1F71A ;~ 01A2:60FC
cs=0x1a2;eip=0x0060ff; 	X(STOSW);	// 15017                  stosw ;~ 01A2:60FF
cs=0x1a2;eip=0x006100; 	T(ax = word_1f36c;);	// 15018                  mov     ax, ds:word_1F36C ;~ 01A2:6100
cs=0x1a2;eip=0x006103; 	X(STOSW);	// 15019                  stosw ;~ 01A2:6103
cs=0x1a2;eip=0x006104; 	T(al = byte_1f861;);	// 15020                  mov     al, ds:byte_1F861 ;~ 01A2:6104
cs=0x1a2;eip=0x006107; 	X(STOSB);	// 15021                  stosb ;~ 01A2:6107
cs=0x1a2;eip=0x006108; 	T(al = byte_1f862;);	// 15022                  mov     al, ds:byte_1F862 ;~ 01A2:6108
cs=0x1a2;eip=0x00610b; 	X(STOSB);	// 15023                  stosb ;~ 01A2:610B
cs=0x1a2;eip=0x00610c; 	T(al = byte_1f863;);	// 15024                  mov     al, ds:byte_1F863 ;~ 01A2:610C
cs=0x1a2;eip=0x00610f; 	X(STOSB);	// 15025                  stosb ;~ 01A2:610F
cs=0x1a2;eip=0x006110; 	T(al = 0x0FE;);	// 15026                  mov     al, 0FEh ;~ 01A2:6110
cs=0x1a2;eip=0x006112; 	X(STOSB);	// 15027                  stosb ;~ 01A2:6112
cs=0x1a2;eip=0x006113; 	T(al = 0x0FF;);	// 15028                  mov     al, 0FFh ;~ 01A2:6113
cs=0x1a2;eip=0x006115; 	X(STOSW);	// 15029                  stosw ;~ 01A2:6115
cs=0x1a2;eip=0x006116; 	T(ax = seg_1f368;);	// 15030                  mov     ax, ds:seg_1F368 ;~ 01A2:6116
cs=0x1a2;eip=0x006119; 	X(STOSW);	// 15031                  stosw ;~ 01A2:6119
cs=0x1a2;eip=0x00611a; 	T(ax = word_1f36a;);	// 15032                  mov     ax, ds:word_1F36A ;~ 01A2:611A
cs=0x1a2;eip=0x00611d; 	X(STOSW);	// 15033                  stosw ;~ 01A2:611D
cs=0x1a2;eip=0x00611e; 	X(POP(si));	// 15034                  pop     si ;~ 01A2:611E
cs=0x1a2;eip=0x00611f; 	X(POP(*(dw*)(((db*)&off_1f736)+2)));	// 15035                  pop     word ptr ds:off_1F736+2 ;~ 01A2:611F
cs=0x1a2;eip=0x006123; 	J(JMP(loc_1612f));	// 15036                  jmp     short loc_1612F ;~ 01A2:6123
loc_16125:
	// 5323 
cs=0x1a2;eip=0x006125; 	X(POP(si));	// 15041                  pop     si ;~ 01A2:6125
cs=0x1a2;eip=0x006126; 	X(POP(*(dw*)(((db*)&off_1f736)+2)));	// 15042                  pop     word ptr ds:off_1F736+2 ;~ 01A2:6126
loc_1612a:
	// 5324 
cs=0x1a2;eip=0x00612a; 	T(al = 6;);	// 15045                  mov     al, 6 ;~ 01A2:612A
cs=0x1a2;eip=0x00612c; 	J(CALL(sub_1438a,0));	// 15046                  call    sub_1438A ;~ 01A2:612C
loc_1612f:
	// 5325 
cs=0x1a2;eip=0x00612f; 	X(DEC(*(dw*)(((db*)&off_1f736)+2)));	// 15049                  dec     word ptr ds:off_1F736+2 ;~ 01A2:612F
cs=0x1a2;eip=0x006133; 	J(JS(loc_16138));	// 15050                  js      short loc_16138 ;~ 01A2:6133
cs=0x1a2;eip=0x006135; 	J(JMP(loc_160a3));	// 15051                  jmp     loc_160A3 ;~ 01A2:6135
loc_16138:
	// 5326 
cs=0x1a2;eip=0x006138; 	J(CALL(sub_150d7,0));	// 15055                  call    sub_150D7 ;~ 01A2:6138
loc_1613b:
	// 5327 
cs=0x1a2;eip=0x00613b; 	T(si = 0x346;);	// 15058                  mov     si, 346h ;~ 01A2:613B
cs=0x1a2;eip=0x00613e; 	T(LODSW);	// 15059                  lodsw ;~ 01A2:613E
cs=0x1a2;eip=0x00613f; 	T(OR(ax, ax));	// 15060                  or      ax, ax ;~ 01A2:613F
cs=0x1a2;eip=0x006141; 	J(JNZ(loc_16146));	// 15061                  jnz     short loc_16146 ;~ 01A2:6141
cs=0x1a2;eip=0x006143; 	J(JMP(locret_162a3));	// 15062                  jmp     locret_162A3 ;~ 01A2:6143
loc_16146:
	// 5328 
cs=0x1a2;eip=0x006146; 	X(MOV(*(dw*)(raddr(ds,si-2)), 0));	// 15066                  mov     word ptr [si-2], 0 ;~ 01A2:6146
cs=0x1a2;eip=0x00614b; 	X(*(dw*)(((db*)&off_1f736)+2) = ax;);	// 15067                  mov     word ptr ds:off_1F736+2, ax ;~ 01A2:614B
loc_1614e:
	// 5329 
cs=0x1a2;eip=0x00614e; 	T(LODSW);	// 15070                  lodsw ;~ 01A2:614E
cs=0x1a2;eip=0x00614f; 	T(cx = ax;);	// 15071                  mov     cx, ax ;~ 01A2:614F
cs=0x1a2;eip=0x006151; 	T(LODSW);	// 15072                  lodsw ;~ 01A2:6151
cs=0x1a2;eip=0x006152; 	T(di = ax;);	// 15073                  mov     di, ax ;~ 01A2:6152
cs=0x1a2;eip=0x006154; 	T(al = 6;);	// 15074                  mov     al, 6 ;~ 01A2:6154
cs=0x1a2;eip=0x006156; 	T(dx = 0x0FFFE;);	// 15075                  mov     dx, 0FFFEh ;~ 01A2:6156
cs=0x1a2;eip=0x006159; 	J(CALL(sub_142a5,0));	// 15076                  call    sub_142A5 ;~ 01A2:6159
cs=0x1a2;eip=0x00615c; 	T(di = *(dw*)(&off_1f194););	// 15077                  mov     di, word ptr off_1F194 ;~ 01A2:615C
cs=0x1a2;eip=0x006160; 	T(dx = ax;);	// 15078                  mov     dx, ax ;~ 01A2:6160
cs=0x1a2;eip=0x006162; 	X(MOV(*(dw*)(raddr(ds,di+4)), ax));	// 15079                  mov     [di+4], ax ;~ 01A2:6162
cs=0x1a2;eip=0x006165; 	X(word_1f72c = di;);	// 15080                  mov     ds:word_1F72C, di ;~ 01A2:6165
cs=0x1a2;eip=0x006169; 	J(CALL(sub_150d7,0));	// 15081                  call    sub_150D7 ;~ 01A2:6169
cs=0x1a2;eip=0x00616c; 	X(PUSH(dx));	// 15082                  push    dx ;~ 01A2:616C
cs=0x1a2;eip=0x00616d; 	T(LODSB);	// 15083                  lodsb ;~ 01A2:616D
cs=0x1a2;eip=0x00616e; 	T(dl = al;);	// 15084                  mov     dl, al ;~ 01A2:616E
cs=0x1a2;eip=0x006170; 	T(LODSB);	// 15085                  lodsb ;~ 01A2:6170
cs=0x1a2;eip=0x006171; 	T(dh = al;);	// 15086                  mov     dh, al ;~ 01A2:6171
cs=0x1a2;eip=0x006173; 	T(LODSB);	// 15087                  lodsb ;~ 01A2:6173
cs=0x1a2;eip=0x006174; 	T(ch = al;);	// 15088                  mov     ch, al ;~ 01A2:6174
cs=0x1a2;eip=0x006176; 	T(LODSB);	// 15089                  lodsb ;~ 01A2:6176
cs=0x1a2;eip=0x006177; 	T(cl = al;);	// 15090                  mov     cl, al ;~ 01A2:6177
cs=0x1a2;eip=0x006179; 	T(LODSW);	// 15091                  lodsw ;~ 01A2:6179
cs=0x1a2;eip=0x00617a; 	X(*(dw*)(&off_1f736) = ax;);	// 15092                  mov     word ptr ds:off_1F736, ax ;~ 01A2:617A
cs=0x1a2;eip=0x00617d; 	T(LODSW);	// 15093                  lodsw ;~ 01A2:617D
cs=0x1a2;eip=0x00617e; 	T(es = ax;);	// 15094                  mov     es, ax ;~ 01A2:617E
cs=0x1a2;eip=0x006180; 	T(LODSW);	// 15096                  lodsw ;~ 01A2:6180
cs=0x1a2;eip=0x006181; 	T(di = ax;);	// 15097                  mov     di, ax ;~ 01A2:6181
cs=0x1a2;eip=0x006183; 	X(POP(ax));	// 15098                  pop     ax ;~ 01A2:6183
cs=0x1a2;eip=0x006184; 	X(PUSH(*(dw*)(((db*)&off_1f736)+2)));	// 15099                  push    word ptr ds:off_1F736+2 ;~ 01A2:6184
cs=0x1a2;eip=0x006188; 	X(PUSH(si));	// 15100                  push    si ;~ 01A2:6188
cs=0x1a2;eip=0x006189; 	T(si = word_1f72c;);	// 15101                  mov     si, ds:word_1F72C ;~ 01A2:6189
cs=0x1a2;eip=0x00618d; 	T(CMP(cl, 0x0FE));	// 15102                  cmp     cl, 0FEh ;~ 01A2:618D
cs=0x1a2;eip=0x006190; 	J(JZ(loc_16195));	// 15103                  jz      short loc_16195 ;~ 01A2:6190
cs=0x1a2;eip=0x006192; 	J(JMP(loc_1626f));	// 15104                  jmp     loc_1626F ;~ 01A2:6192
loc_16195:
	// 5330 
cs=0x1a2;eip=0x006195; 	T(cl = *(db*)(&word_1f3a2););	// 15108                  mov     cl, byte ptr ds:word_1F3A2 ;~ 01A2:6195
loc_16199:
	// 5331 
cs=0x1a2;eip=0x006199; 	T(CMP(*(dw*)(&off_1f736), 0));	// 15111                  cmp     word ptr ds:off_1F736, 0 ;~ 01A2:6199
cs=0x1a2;eip=0x00619e; 	J(JNS(loc_161a3));	// 15112                  jns     short loc_161A3 ;~ 01A2:619E
cs=0x1a2;eip=0x0061a0; 	J(JMP(loc_1625e));	// 15113                  jmp     loc_1625E ;~ 01A2:61A0
loc_161a3:
	// 5332 
cs=0x1a2;eip=0x0061a3; 	X(PUSH(ax));	// 15117                  push    ax ;~ 01A2:61A3
cs=0x1a2;eip=0x0061a4; 	X(PUSH(cx));	// 15118                  push    cx ;~ 01A2:61A4
cs=0x1a2;eip=0x0061a5; 	X(PUSH(bx));	// 15119                  push    bx ;~ 01A2:61A5
cs=0x1a2;eip=0x0061a6; 	X(PUSH(si));	// 15120                  push    si ;~ 01A2:61A6
cs=0x1a2;eip=0x0061a7; 	X(PUSH(di));	// 15121                  push    di ;~ 01A2:61A7
cs=0x1a2;eip=0x0061a8; 	T(CMP(*(raddr(es,di+0x16)), 0));	// 15122                  cmp     byte ptr es:[di+16h], 0 ;~ 01A2:61A8
cs=0x1a2;eip=0x0061ad; 	J(JS(loc_161b2));	// 15123                  js      short loc_161B2 ;~ 01A2:61AD
cs=0x1a2;eip=0x0061af; 	J(JMP(loc_16249));	// 15124                  jmp     loc_16249 ;~ 01A2:61AF
loc_161b2:
	// 5333 
cs=0x1a2;eip=0x0061b2; 	X(PUSH(ax));	// 15129                  push    ax ;~ 01A2:61B2
cs=0x1a2;eip=0x0061b3; 	T(ax = word_1f1f4;);	// 15130                  mov     ax, word_1F1F4 ;~ 01A2:61B3
cs=0x1a2;eip=0x0061b6; 	X(word_1f206 = ax;);	// 15131                  mov     word_1F206, ax ;~ 01A2:61B6
cs=0x1a2;eip=0x0061b9; 	T(ax = word_1f396;);	// 15132                  mov     ax, ds:word_1F396 ;~ 01A2:61B9
cs=0x1a2;eip=0x0061bc; 	X(word_1f708 = ax;);	// 15133                  mov     ds:word_1F708, ax ;~ 01A2:61BC
cs=0x1a2;eip=0x0061bf; 	X(POP(ax));	// 15134                  pop     ax ;~ 01A2:61BF
cs=0x1a2;eip=0x0061c0; 	J(CALL(sub_116e0,0));	// 15135                  call    sub_116E0 ;~ 01A2:61C0
cs=0x1a2;eip=0x0061c3; 	X(PUSHF);	// 15136                  pushf ;~ 01A2:61C3
cs=0x1a2;eip=0x0061c4; 	X(PUSH(ax));	// 15137                  push    ax ;~ 01A2:61C4
cs=0x1a2;eip=0x0061c5; 	T(ax = word_1f206;);	// 15138                  mov     ax, word_1F206 ;~ 01A2:61C5
cs=0x1a2;eip=0x0061c8; 	X(word_1f1f4 = ax;);	// 15139                  mov     word_1F1F4, ax ;~ 01A2:61C8
cs=0x1a2;eip=0x0061cb; 	T(ax = word_1f708;);	// 15140                  mov     ax, ds:word_1F708 ;~ 01A2:61CB
cs=0x1a2;eip=0x0061ce; 	X(word_1f396 = ax;);	// 15141                  mov     ds:word_1F396, ax ;~ 01A2:61CE
cs=0x1a2;eip=0x0061d1; 	X(POP(ax));	// 15142                  pop     ax ;~ 01A2:61D1
cs=0x1a2;eip=0x0061d2; 	X(POPF);	// 15143                  popf ;~ 01A2:61D2
cs=0x1a2;eip=0x0061d3; 	X(POP(di));	// 15144                  pop     di ;~ 01A2:61D3
cs=0x1a2;eip=0x0061d4; 	X(POP(si));	// 15145                  pop     si ;~ 01A2:61D4
cs=0x1a2;eip=0x0061d5; 	X(POP(bx));	// 15146                  pop     bx ;~ 01A2:61D5
cs=0x1a2;eip=0x0061d6; 	X(POP(cx));	// 15147                  pop     cx ;~ 01A2:61D6
cs=0x1a2;eip=0x0061d7; 	X(POP(ax));	// 15148                  pop     ax ;~ 01A2:61D7
cs=0x1a2;eip=0x0061d8; 	J(JNZ(loc_1623c));	// 15149                  jnz     short loc_1623C ;~ 01A2:61D8
cs=0x1a2;eip=0x0061da; 	T(si = word_1f72c;);	// 15150                  mov     si, ds:word_1F72C ;~ 01A2:61DA
cs=0x1a2;eip=0x0061de; 	X(PUSH(es));	// 15151                  push    es ;~ 01A2:61DE
cs=0x1a2;eip=0x0061df; 	X(PUSH(di));	// 15152                  push    di ;~ 01A2:61DF
cs=0x1a2;eip=0x0061e0; 	X(PUSH(si));	// 15153                  push    si ;~ 01A2:61E0
cs=0x1a2;eip=0x0061e1; 	J(CALL(sub_13de2,0));	// 15154                  call    sub_13DE2 ;~ 01A2:61E1
cs=0x1a2;eip=0x0061e4; 	X(POP(si));	// 15155                  pop     si ;~ 01A2:61E4
cs=0x1a2;eip=0x0061e5; 	X(POP(di));	// 15156                  pop     di ;~ 01A2:61E5
cs=0x1a2;eip=0x0061e6; 	X(POP(es));	// 15157                  pop     es ;~ 01A2:61E6
cs=0x1a2;eip=0x0061e7; 	J(JS(loc_1623c));	// 15158                  js      short loc_1623C ;~ 01A2:61E7
cs=0x1a2;eip=0x0061e9; 	T(XOR(bh, bh));	// 15159                  xor     bh, bh ;~ 01A2:61E9
cs=0x1a2;eip=0x0061eb; 	T(MOV(bl, *(raddr(ds,si+0x0C))));	// 15160                  mov     bl, [si+0Ch] ;~ 01A2:61EB
cs=0x1a2;eip=0x0061ee; 	T(MOV(bl, *(raddr(ds,bx+si+4))));	// 15161                  mov     bl, [bx+si+4] ;~ 01A2:61EE
cs=0x1a2;eip=0x0061f1; 	T(OR(bl, bl));	// 15162                  or      bl, bl ;~ 01A2:61F1
cs=0x1a2;eip=0x0061f3; 	J(JNZ(loc_161f8));	// 15163                  jnz     short loc_161F8 ;~ 01A2:61F3
cs=0x1a2;eip=0x0061f5; 	J(JMP(loc_1628d));	// 15164                  jmp     loc_1628D ;~ 01A2:61F5
loc_161f8:
	// 5334 
cs=0x1a2;eip=0x0061f8; 	X(PUSH(es));	// 15168                  push    es ;~ 01A2:61F8
cs=0x1a2;eip=0x0061f9; 	X(PUSH(di));	// 15169                  push    di ;~ 01A2:61F9
cs=0x1a2;eip=0x0061fa; 	X(PUSH(si));	// 15170                  push    si ;~ 01A2:61FA
cs=0x1a2;eip=0x0061fb; 	X(PUSH(*(dw*)(&off_1f736)));	// 15171                  push    word ptr ds:off_1F736 ;~ 01A2:61FB
cs=0x1a2;eip=0x0061ff; 	X(PUSH(bx));	// 15172                  push    bx ;~ 01A2:61FF
cs=0x1a2;eip=0x006200; 	J(CALL(sub_151d8,0));	// 15173                  call    sub_151D8 ;~ 01A2:6200
cs=0x1a2;eip=0x006203; 	X(POP(bx));	// 15174                  pop     bx ;~ 01A2:6203
cs=0x1a2;eip=0x006204; 	X(POP(*(dw*)(&off_1f736)));	// 15175                  pop     word ptr ds:off_1F736 ;~ 01A2:6204
cs=0x1a2;eip=0x006208; 	X(POP(si));	// 15176                  pop     si ;~ 01A2:6208
cs=0x1a2;eip=0x006209; 	X(POP(di));	// 15177                  pop     di ;~ 01A2:6209
cs=0x1a2;eip=0x00620a; 	X(POP(es));	// 15178                  pop     es ;~ 01A2:620A
cs=0x1a2;eip=0x00620b; 	T(bp = 0x0FB53;);	// 15179                  mov     bp, 0FB53h ;~ 01A2:620B
cs=0x1a2;eip=0x00620e; 	T(SHL(bx, 1));	// 15180                  shl     bx, 1 ;~ 01A2:620E
cs=0x1a2;eip=0x006210; 	T(ADD(bx, bp));	// 15181                  add     bx, bp ;~ 01A2:6210
cs=0x1a2;eip=0x006212; 	T(MOV(bx, *(dw*)(raddr(ds,bx))));	// 15182                  mov     bx, [bx] ;~ 01A2:6212
cs=0x1a2;eip=0x006214; 	T(MOV(bp, *(dw*)(raddr(ds,si+8))));	// 15183                  mov     bp, [si+8] ;~ 01A2:6214
cs=0x1a2;eip=0x006217; 	X(MOV(*(dw*)(raddr(ds,bp+0x18)), bx));	// 15184                  mov     ds:[bp+18h], bx ;~ 01A2:6217
cs=0x1a2;eip=0x00621b; 	T(TEST(*(raddr(ds,bp+0x12)), 8));	// 15185                  test    byte ptr ds:[bp+12h], 8 ;~ 01A2:621B
cs=0x1a2;eip=0x006220; 	X(PUSHF);	// 15186                  pushf ;~ 01A2:6220
cs=0x1a2;eip=0x006221; 	X(OR(*(raddr(ds,bp+0x12)), 8));	// 15187                  or      byte ptr ds:[bp+12h], 8 ;~ 01A2:6221
cs=0x1a2;eip=0x006226; 	X(POPF);	// 15188                  popf ;~ 01A2:6226
cs=0x1a2;eip=0x006227; 	T(bx = *(dw*)(&off_1f736););	// 15189                  mov     bx, word ptr ds:off_1F736 ;~ 01A2:6227
cs=0x1a2;eip=0x00622b; 	X(PUSH(si));	// 15190                  push    si ;~ 01A2:622B
cs=0x1a2;eip=0x00622c; 	T(si = 0x0FBDE;);	// 15191                  mov     si, 0FBDEh ;~ 01A2:622C
cs=0x1a2;eip=0x00622f; 	T(SHL(bx, 1));	// 15192                  shl     bx, 1 ;~ 01A2:622F
cs=0x1a2;eip=0x006231; 	T(ADD(si, bx));	// 15193                  add     si, bx ;~ 01A2:6231
cs=0x1a2;eip=0x006233; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 15194                  mov     ax, [si] ;~ 01A2:6233
cs=0x1a2;eip=0x006235; 	X(MOV(*(dw*)(raddr(ds,bp+0x1A)), ax));	// 15195                  mov     ds:[bp+1Ah], ax ;~ 01A2:6235
cs=0x1a2;eip=0x006239; 	X(POP(si));	// 15196                  pop     si ;~ 01A2:6239
cs=0x1a2;eip=0x00623a; 	J(JMP(loc_16290));	// 15197                  jmp     short loc_16290 ;~ 01A2:623A
loc_1623c:
	// 5335 
cs=0x1a2;eip=0x00623c; 	T(MOV(dx, *(dw*)(raddr(ds,si+4))));	// 15202                  mov     dx, [si+4] ;~ 01A2:623C
cs=0x1a2;eip=0x00623f; 	T(al = 6;);	// 15203                  mov     al, 6 ;~ 01A2:623F
cs=0x1a2;eip=0x006241; 	J(CALL(sub_1438a,0));	// 15204                  call    sub_1438A ;~ 01A2:6241
cs=0x1a2;eip=0x006244; 	J(CALL(sub_150d7,0));	// 15205                  call    sub_150D7 ;~ 01A2:6244
cs=0x1a2;eip=0x006247; 	J(JMP(loc_16290));	// 15206                  jmp     short loc_16290 ;~ 01A2:6247
loc_16249:
	// 5336 
cs=0x1a2;eip=0x006249; 	T(bp = 0x3F;);	// 15210                  mov     bp, 3Fh ; '?' ;~ 01A2:6249
cs=0x1a2;eip=0x00624c; 	J(CALL(sub_11cc1,0));	// 15211                  call    sub_11CC1 ;~ 01A2:624C
cs=0x1a2;eip=0x00624f; 	X(byte_1f863 = ch;);	// 15212                  mov     ds:byte_1F863, ch ;~ 01A2:624F
cs=0x1a2;eip=0x006253; 	X(POP(di));	// 15213                  pop     di ;~ 01A2:6253
cs=0x1a2;eip=0x006254; 	X(POP(si));	// 15214                  pop     si ;~ 01A2:6254
cs=0x1a2;eip=0x006255; 	X(POP(bx));	// 15215                  pop     bx ;~ 01A2:6255
cs=0x1a2;eip=0x006256; 	X(POP(cx));	// 15216                  pop     cx ;~ 01A2:6256
cs=0x1a2;eip=0x006257; 	X(POP(ax));	// 15217                  pop     ax ;~ 01A2:6257
cs=0x1a2;eip=0x006258; 	T(ch = byte_1f863;);	// 15218                  mov     ch, ds:byte_1F863 ;~ 01A2:6258
cs=0x1a2;eip=0x00625c; 	J(JZ(loc_1623c));	// 15219                  jz      short loc_1623C ;~ 01A2:625C
loc_1625e:
	// 5337 
cs=0x1a2;eip=0x00625e; 	T(CMP(*(raddr(es,di+0x16)), 3));	// 15222                  cmp     byte ptr es:[di+16h], 3 ;~ 01A2:625E
cs=0x1a2;eip=0x006263; 	J(JNZ(loc_1626d));	// 15223                  jnz     short loc_1626D ;~ 01A2:6263
cs=0x1a2;eip=0x006265; 	X(PUSH(dx));	// 15224                  push    dx ;~ 01A2:6265
cs=0x1a2;eip=0x006266; 	T(MOV(dx, *(dw*)(raddr(ds,si+4))));	// 15225                  mov     dx, [si+4] ;~ 01A2:6266
cs=0x1a2;eip=0x006269; 	J(CALL(sub_15f18,0));	// 15226                  call    sub_15F18 ;~ 01A2:6269
cs=0x1a2;eip=0x00626c; 	X(POP(dx));	// 15227                  pop     dx ;~ 01A2:626C
loc_1626d:
	// 5338 
cs=0x1a2;eip=0x00626d; 	J(JMP(loc_16282));	// 15230                  jmp     short loc_16282 ;~ 01A2:626D
loc_1626f:
	// 5339 
cs=0x1a2;eip=0x00626f; 	T(CMP(cl, *(db*)(&word_1f3a2)));	// 15234                  cmp     cl, byte ptr ds:word_1F3A2 ;~ 01A2:626F
cs=0x1a2;eip=0x006273; 	J(JNZ(loc_16278));	// 15235                  jnz     short loc_16278 ;~ 01A2:6273
cs=0x1a2;eip=0x006275; 	J(JMP(loc_16199));	// 15236                  jmp     loc_16199 ;~ 01A2:6275
loc_16278:
	// 5340 
cs=0x1a2;eip=0x006278; 	T(TEST(*(raddr(ds,si+3)), 8));	// 15240                  test    byte ptr [si+3], 8 ;~ 01A2:6278
cs=0x1a2;eip=0x00627c; 	X(PUSHF);	// 15241                  pushf ;~ 01A2:627C
cs=0x1a2;eip=0x00627d; 	X(OR(*(raddr(ds,si+3)), 8));	// 15242                  or      byte ptr [si+3], 8 ;~ 01A2:627D
cs=0x1a2;eip=0x006281; 	X(POPF);	// 15243                  popf ;~ 01A2:6281
loc_16282:
	// 5341 
cs=0x1a2;eip=0x006282; 	X(PUSH(es));	// 15246                  push    es ;~ 01A2:6282
cs=0x1a2;eip=0x006283; 	X(PUSH(di));	// 15247                  push    di ;~ 01A2:6283
cs=0x1a2;eip=0x006284; 	X(PUSH(si));	// 15248                  push    si ;~ 01A2:6284
cs=0x1a2;eip=0x006285; 	J(CALL(sub_13de2,0));	// 15249                  call    sub_13DE2 ;~ 01A2:6285
cs=0x1a2;eip=0x006288; 	X(POP(si));	// 15250                  pop     si ;~ 01A2:6288
cs=0x1a2;eip=0x006289; 	X(POP(di));	// 15251                  pop     di ;~ 01A2:6289
cs=0x1a2;eip=0x00628a; 	X(POP(es));	// 15252                  pop     es ;~ 01A2:628A
cs=0x1a2;eip=0x00628b; 	J(JS(loc_1623c));	// 15254                  js      short loc_1623C ;~ 01A2:628B
loc_1628d:
	// 5342 
cs=0x1a2;eip=0x00628d; 	J(CALL(sub_151d8,0));	// 15257                  call    sub_151D8 ;~ 01A2:628D
loc_16290:
	// 5343 
cs=0x1a2;eip=0x006290; 	X(POP(si));	// 15261                  pop     si ;~ 01A2:6290
cs=0x1a2;eip=0x006291; 	X(POP(*(dw*)(((db*)&off_1f736)+2)));	// 15262                  pop     word ptr ds:off_1F736+2 ;~ 01A2:6291
cs=0x1a2;eip=0x006295; 	X(DEC(*(dw*)(((db*)&off_1f736)+2)));	// 15263                  dec     word ptr ds:off_1F736+2 ;~ 01A2:6295
cs=0x1a2;eip=0x006299; 	J(JZ(loc_1629e));	// 15264                  jz      short loc_1629E ;~ 01A2:6299
cs=0x1a2;eip=0x00629b; 	J(JMP(loc_1614e));	// 15265                  jmp     loc_1614E ;~ 01A2:629B
loc_1629e:
	// 5344 
cs=0x1a2;eip=0x00629e; 	T(al = 9;);	// 15269                  mov     al, 9 ;~ 01A2:629E
cs=0x1a2;eip=0x0062a0; 	J(CALL(sub_14275,0));	// 15270                  call    sub_14275 ;~ 01A2:62A0
locret_162a3:
	// 5345 
cs=0x1a2;eip=0x0062a3; 	J(RETN(0));	// 15273                  retn ;~ 01A2:62A3

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1609a: 	goto loc_1609a;
        case m2c::kloc_160a3: 	goto loc_160a3;
        case m2c::kloc_16125: 	goto loc_16125;
        case m2c::kloc_1612a: 	goto loc_1612a;
        case m2c::kloc_1612f: 	goto loc_1612f;
        case m2c::kloc_16138: 	goto loc_16138;
        case m2c::kloc_1613b: 	goto loc_1613b;
        case m2c::kloc_16146: 	goto loc_16146;
        case m2c::kloc_1614e: 	goto loc_1614e;
        case m2c::kloc_16195: 	goto loc_16195;
        case m2c::kloc_16199: 	goto loc_16199;
        case m2c::kloc_161a3: 	goto loc_161a3;
        case m2c::kloc_161b2: 	goto loc_161b2;
        case m2c::kloc_161f8: 	goto loc_161f8;
        case m2c::kloc_1623c: 	goto loc_1623c;
        case m2c::kloc_16249: 	goto loc_16249;
        case m2c::kloc_1625e: 	goto loc_1625e;
        case m2c::kloc_1626d: 	goto loc_1626d;
        case m2c::kloc_1626f: 	goto loc_1626f;
        case m2c::kloc_16278: 	goto loc_16278;
        case m2c::kloc_16282: 	goto loc_16282;
        case m2c::kloc_1628d: 	goto loc_1628d;
        case m2c::kloc_16290: 	goto loc_16290;
        case m2c::kloc_1629e: 	goto loc_1629e;
        case m2c::klocret_162a3: 	goto locret_162a3;
        case m2c::ksub_1608f: 	goto sub_1608f;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_162a4(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_162a4:
    _begin:
cs=0x1a2;eip=0x0062a4; 	X(PUSH(si));	// 15282                  push    si ;~ 01A2:62A4
cs=0x1a2;eip=0x0062a5; 	X(PUSH(ax));	// 15283                  push    ax ;~ 01A2:62A5
cs=0x1a2;eip=0x0062a6; 	X(PUSH(dx));	// 15284                  push    dx ;~ 01A2:62A6
cs=0x1a2;eip=0x0062a7; 	J(return sub_162a9(m2c::kloc_162ae, _state););	// 15285                  jmp     short loc_162AE ;~ 01A2:62A7

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_162a4: 	goto sub_162a4;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_162a9(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_162a9:
    _begin:
cs=0x1a2;eip=0x0062a9; 	X(PUSH(si));	// 15294                  push    si ;~ 01A2:62A9
cs=0x1a2;eip=0x0062aa; 	X(PUSH(ax));	// 15295                  push    ax ;~ 01A2:62AA
cs=0x1a2;eip=0x0062ab; 	X(PUSH(dx));	// 15296                  push    dx ;~ 01A2:62AB
cs=0x1a2;eip=0x0062ac; 	T(ax = dx;);	// 15297                  mov     ax, dx ;~ 01A2:62AC
loc_162ae:
	// 5346 
cs=0x1a2;eip=0x0062ae; 	T(CMP(ax, word_1f3ea));	// 15300                  cmp     ax, ds:word_1F3EA ;~ 01A2:62AE
cs=0x1a2;eip=0x0062b2; 	J(JNZ(loc_162b9));	// 15301                  jnz     short loc_162B9 ;~ 01A2:62B2
cs=0x1a2;eip=0x0062b4; 	X(PUSH(ax));	// 15302                  push    ax ;~ 01A2:62B4
cs=0x1a2;eip=0x0062b5; 	J(CALL(sub_134bf,0));	// 15303                  call    sub_134BF ;~ 01A2:62B5
cs=0x1a2;eip=0x0062b8; 	X(POP(ax));	// 15304                  pop     ax ;~ 01A2:62B8
loc_162b9:
	// 5347 
cs=0x1a2;eip=0x0062b9; 	T(si = 0x2F6;);	// 15307                  mov     si, 2F6h ;~ 01A2:62B9
cs=0x1a2;eip=0x0062bc; 	T(MOV(dx, *(dw*)(raddr(ds,si))));	// 15308                  mov     dx, [si] ;~ 01A2:62BC
cs=0x1a2;eip=0x0062be; 	X(INC(*(dw*)(raddr(ds,si))));	// 15309                  inc     word ptr [si] ;~ 01A2:62BE
cs=0x1a2;eip=0x0062c0; 	T(SHL(dx, 1));	// 15310                  shl     dx, 1 ;~ 01A2:62C0
cs=0x1a2;eip=0x0062c2; 	T(ADD(si, dx));	// 15311                  add     si, dx ;~ 01A2:62C2
cs=0x1a2;eip=0x0062c4; 	X(MOV(*(dw*)(raddr(ds,si+2)), ax));	// 15312                  mov     [si+2], ax ;~ 01A2:62C4
cs=0x1a2;eip=0x0062c7; 	X(POP(dx));	// 15313                  pop     dx ;~ 01A2:62C7
cs=0x1a2;eip=0x0062c8; 	X(POP(ax));	// 15314                  pop     ax ;~ 01A2:62C8
cs=0x1a2;eip=0x0062c9; 	X(POP(si));	// 15315                  pop     si ;~ 01A2:62C9
cs=0x1a2;eip=0x0062ca; 	J(RETN(0));	// 15316                  retn ;~ 01A2:62CA

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_162ae: 	goto loc_162ae;
        case m2c::kloc_162b9: 	goto loc_162b9;
        case m2c::ksub_162a9: 	goto sub_162a9;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_162cb(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_162cb:
    _begin:
cs=0x1a2;eip=0x0062cb; 	T(XOR(dx, dx));	// 15324                  xor     dx, dx ;~ 01A2:62CB
cs=0x1a2;eip=0x0062cd; 	T(bp = word_1f372;);	// 15325                  mov     bp, ds:word_1F372 ;~ 01A2:62CD
loc_162d1:
	// 5348 
cs=0x1a2;eip=0x0062d1; 	T(al = 8;);	// 15328                  mov     al, 8 ;~ 01A2:62D1
cs=0x1a2;eip=0x0062d3; 	J(CALL(sub_1415c,0));	// 15329                  call    sub_1415C ;~ 01A2:62D3
cs=0x1a2;eip=0x0062d6; 	T(OR(dx, dx));	// 15330                  or      dx, dx ;~ 01A2:62D6
cs=0x1a2;eip=0x0062d8; 	J(JNS(loc_162dd));	// 15331                  jns     short loc_162DD ;~ 01A2:62D8
cs=0x1a2;eip=0x0062da; 	J(JMP(loc_16366));	// 15332                  jmp     loc_16366 ;~ 01A2:62DA
loc_162dd:
	// 5349 
cs=0x1a2;eip=0x0062dd; 	T(INC(dx));	// 15336                  inc     dx ;~ 01A2:62DD
cs=0x1a2;eip=0x0062de; 	X(PUSH(dx));	// 15337                  push    dx ;~ 01A2:62DE
cs=0x1a2;eip=0x0062df; 	T(MOV(dx, *(dw*)(raddr(ds,di))));	// 15338                  mov     dx, [di] ;~ 01A2:62DF
cs=0x1a2;eip=0x0062e1; 	T(si = *(dw*)(&off_1f88a););	// 15339                  mov     si, word ptr ds:off_1F88A ;~ 01A2:62E1
cs=0x1a2;eip=0x0062e5; 	T(es = *(dw*)(((db*)&off_1f88a)+2););	// 15340                  mov     es, word ptr ds:off_1F88A+2 ;~ 01A2:62E5
cs=0x1a2;eip=0x0062e9; 	T(MOV(si, *(dw*)(raddr(es,si+8))));	// 15342                  mov     si, es:[si+8] ;~ 01A2:62E9
loc_162ed:
	// 5350 
cs=0x1a2;eip=0x0062ed; 	T(es = *(dw*)(((db*)&off_1f88a)+2););	// 15345                  mov     es, word ptr ds:off_1F88A+2 ;~ 01A2:62ED
cs=0x1a2;eip=0x0062f1; 	T(CMP(*(dw*)(raddr(es,si)), 0));	// 15346                  cmp     word ptr es:[si], 0 ;~ 01A2:62F1
cs=0x1a2;eip=0x0062f5; 	J(JS(loc_16306));	// 15347                  js      short loc_16306 ;~ 01A2:62F5
cs=0x1a2;eip=0x0062f7; 	T(MOV(ax, *(dw*)(raddr(es,si))));	// 15348                  mov     ax, es:[si] ;~ 01A2:62F7
cs=0x1a2;eip=0x0062fa; 	T(ADD(si, 2));	// 15349                  add     si, 2 ;~ 01A2:62FA
cs=0x1a2;eip=0x0062fd; 	T(CMP(dx, ax));	// 15350                  cmp     dx, ax ;~ 01A2:62FD
cs=0x1a2;eip=0x0062ff; 	J(JZ(loc_16309));	// 15351                  jz      short loc_16309 ;~ 01A2:62FF
cs=0x1a2;eip=0x006301; 	T(ADD(si, 2));	// 15352                  add     si, 2 ;~ 01A2:6301
cs=0x1a2;eip=0x006304; 	J(JMP(loc_162ed));	// 15353                  jmp     short loc_162ED ;~ 01A2:6304
loc_16306:
	// 5351 
cs=0x1a2;eip=0x006306; 	X(POP(dx));	// 15358                  pop     dx ;~ 01A2:6306
cs=0x1a2;eip=0x006307; 	J(JMP(loc_162d1));	// 15359                  jmp     short loc_162D1 ;~ 01A2:6307
loc_16309:
	// 5352 
cs=0x1a2;eip=0x006309; 	T(bx = di;);	// 15363                  mov     bx, di ;~ 01A2:6309
cs=0x1a2;eip=0x00630b; 	T(ax = 6;);	// 15364                  mov     ax, 6 ;~ 01A2:630B
cs=0x1a2;eip=0x00630e; 	J(CALL(sub_1410e,0));	// 15365                  call    sub_1410E ;~ 01A2:630E
cs=0x1a2;eip=0x006311; 	X(word_1f72c = di;);	// 15366                  mov     ds:word_1F72C, di ;~ 01A2:6311
cs=0x1a2;eip=0x006315; 	T(XOR(ah, ah));	// 15367                  xor     ah, ah ;~ 01A2:6315
cs=0x1a2;eip=0x006317; 	T(MOV(al, *(raddr(ds,di+0x0C))));	// 15368                  mov     al, [di+0Ch] ;~ 01A2:6317
cs=0x1a2;eip=0x00631a; 	X(ADD(word_1f72c, ax));	// 15369                  add     ds:word_1F72C, ax ;~ 01A2:631A
cs=0x1a2;eip=0x00631e; 	T(MOV(ax, *(dw*)(raddr(es,si))));	// 15370                  mov     ax, es:[si] ;~ 01A2:631E
cs=0x1a2;eip=0x006321; 	T(ADD(si, 2));	// 15371                  add     si, 2 ;~ 01A2:6321
cs=0x1a2;eip=0x006324; 	X(MOV(*(dw*)(raddr(ss,bp+0)), ax));	// 15372                  mov     [bp+0], ax ;~ 01A2:6324
cs=0x1a2;eip=0x006327; 	T(ADD(bp, 2));	// 15373                  add     bp, 2 ;~ 01A2:6327
cs=0x1a2;eip=0x00632a; 	X(MOV(*(dw*)(raddr(ss,bp+0)), 0));	// 15374                  mov     word ptr [bp+0], 0 ;~ 01A2:632A
cs=0x1a2;eip=0x00632f; 	T(ADD(bp, 2));	// 15375                  add     bp, 2 ;~ 01A2:632F
cs=0x1a2;eip=0x006332; 	T(MOV(dx, *(dw*)(raddr(ds,bx+2))));	// 15376                  mov     dx, [bx+2] ;~ 01A2:6332
cs=0x1a2;eip=0x006335; 	T(ax = 2;);	// 15377                  mov     ax, 2 ;~ 01A2:6335
cs=0x1a2;eip=0x006338; 	J(CALL(sub_1410e,0));	// 15378                  call    sub_1410E ;~ 01A2:6338
cs=0x1a2;eip=0x00633b; 	T(MOV(cl, *(raddr(es,di+0x16))));	// 15379                  mov     cl, es:[di+16h] ;~ 01A2:633B
cs=0x1a2;eip=0x00633f; 	T(CMP(cl, 1));	// 15380                  cmp     cl, 1 ;~ 01A2:633F
cs=0x1a2;eip=0x006342; 	J(JZ(loc_16350));	// 15381                  jz      short loc_16350 ;~ 01A2:6342
cs=0x1a2;eip=0x006344; 	T(CMP(cl, 2));	// 15382                  cmp     cl, 2 ;~ 01A2:6344
cs=0x1a2;eip=0x006347; 	J(JZ(loc_1634b));	// 15383                  jz      short loc_1634B ;~ 01A2:6347
cs=0x1a2;eip=0x006349; 	J(JMP(loc_16364));	// 15384                  jmp     short loc_16364 ;~ 01A2:6349
loc_1634b:
	// 5353 
cs=0x1a2;eip=0x00634b; 	T(cx = 4;);	// 15388                  mov     cx, 4 ;~ 01A2:634B
cs=0x1a2;eip=0x00634e; 	J(JMP(loc_16353));	// 15389                  jmp     short loc_16353 ;~ 01A2:634E
loc_16350:
	// 5354 
cs=0x1a2;eip=0x006350; 	T(cx = 0x0A;);	// 15393                  mov     cx, 0Ah ;~ 01A2:6350
loc_16353:
	// 5355 
cs=0x1a2;eip=0x006353; 	X(MOV(*(dw*)(raddr(ss,bp-2)), cx));	// 15396                  mov     [bp-2], cx ;~ 01A2:6353
cs=0x1a2;eip=0x006356; 	T(si = word_1f72c;);	// 15397                  mov     si, ds:word_1F72C ;~ 01A2:6356
cs=0x1a2;eip=0x00635a; 	T(di = bp;);	// 15398                  mov     di, bp ;~ 01A2:635A
cs=0x1a2;eip=0x00635c; 	T(ax = ss;);	// 15399                  mov     ax, ss ;~ 01A2:635C
cs=0x1a2;eip=0x00635e; 	T(es = ax;);	// 15400                  mov     es, ax ;~ 01A2:635E
	// 15402                  rep movsb ;~ 01A2:6360
cs=0x1a2;eip=0x006360; 	X(	REP MOVSB);	// 15402                  rep movsb ;~ 01A2:6360
cs=0x1a2;eip=0x006362; 	T(bp = di;);	// 15403                  mov     bp, di ;~ 01A2:6362
loc_16364:
	// 5356 
cs=0x1a2;eip=0x006364; 	J(JMP(loc_16306));	// 15406                  jmp     short loc_16306 ;~ 01A2:6364
loc_16366:
	// 5357 
cs=0x1a2;eip=0x006366; 	T(di = bp;);	// 15410                  mov     di, bp ;~ 01A2:6366
cs=0x1a2;eip=0x006368; 	T(ax = ss;);	// 15411                  mov     ax, ss ;~ 01A2:6368
cs=0x1a2;eip=0x00636a; 	T(es = ax;);	// 15412                  mov     es, ax ;~ 01A2:636A
cs=0x1a2;eip=0x00636c; 	T(ax = 0x0FFFF;);	// 15413                  mov     ax, 0FFFFh ;~ 01A2:636C
cs=0x1a2;eip=0x00636f; 	X(STOSW);	// 15414                  stosw ;~ 01A2:636F
cs=0x1a2;eip=0x006370; 	T(ax = word_1f3b8;);	// 15415                  mov     ax, ds:word_1F3B8 ;~ 01A2:6370
cs=0x1a2;eip=0x006373; 	X(STOSW);	// 15416                  stosw ;~ 01A2:6373
cs=0x1a2;eip=0x006374; 	T(ax = word_1f3ba;);	// 15417                  mov     ax, ds:word_1F3BA ;~ 01A2:6374
cs=0x1a2;eip=0x006377; 	X(STOSW);	// 15418                  stosw ;~ 01A2:6377
cs=0x1a2;eip=0x006378; 	T(ax = word_1f3bc;);	// 15419                  mov     ax, ds:word_1F3BC ;~ 01A2:6378
cs=0x1a2;eip=0x00637b; 	X(STOSW);	// 15420                  stosw ;~ 01A2:637B
cs=0x1a2;eip=0x00637c; 	T(ax = word_1f3be;);	// 15421                  mov     ax, ds:word_1F3BE ;~ 01A2:637C
cs=0x1a2;eip=0x00637f; 	X(STOSW);	// 15422                  stosw ;~ 01A2:637F
cs=0x1a2;eip=0x006380; 	T(ax = word_1f3aa;);	// 15423                  mov     ax, ds:word_1F3AA ;~ 01A2:6380
cs=0x1a2;eip=0x006383; 	X(STOSW);	// 15424                  stosw ;~ 01A2:6383
cs=0x1a2;eip=0x006384; 	T(al = byte_1f722;);	// 15425                  mov     al, ds:byte_1F722 ;~ 01A2:6384
cs=0x1a2;eip=0x006387; 	X(STOSB);	// 15426                  stosb ;~ 01A2:6387
cs=0x1a2;eip=0x006388; 	T(al = byte_1f723;);	// 15427                  mov     al, ds:byte_1F723 ;~ 01A2:6388
cs=0x1a2;eip=0x00638b; 	X(STOSB);	// 15428                  stosb ;~ 01A2:638B
cs=0x1a2;eip=0x00638c; 	T(al = byte_1f724;);	// 15429                  mov     al, ds:byte_1F724 ;~ 01A2:638C
cs=0x1a2;eip=0x00638f; 	X(STOSB);	// 15430                  stosb ;~ 01A2:638F
cs=0x1a2;eip=0x006390; 	T(al = byte_1f725;);	// 15431                  mov     al, ds:byte_1F725 ;~ 01A2:6390
cs=0x1a2;eip=0x006393; 	X(STOSB);	// 15432                  stosb ;~ 01A2:6393
cs=0x1a2;eip=0x006394; 	T(al = byte_1f726;);	// 15433                  mov     al, ds:byte_1F726 ;~ 01A2:6394
cs=0x1a2;eip=0x006397; 	X(STOSB);	// 15434                  stosb ;~ 01A2:6397
cs=0x1a2;eip=0x006398; 	T(al = *(db*)(&seg_1f727););	// 15435                  mov     al, byte ptr ds:seg_1F727 ;~ 01A2:6398
cs=0x1a2;eip=0x00639b; 	X(STOSB);	// 15436                  stosb ;~ 01A2:639B
cs=0x1a2;eip=0x00639c; 	T(al = *(db*)(((db*)&seg_1f727)+1););	// 15437                  mov     al, byte ptr ds:seg_1F727+1 ;~ 01A2:639C
cs=0x1a2;eip=0x00639f; 	X(STOSB);	// 15438                  stosb ;~ 01A2:639F
cs=0x1a2;eip=0x0063a0; 	J(RETN(0));	// 15439                  retn ;~ 01A2:63A0

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_162d1: 	goto loc_162d1;
        case m2c::kloc_162dd: 	goto loc_162dd;
        case m2c::kloc_162ed: 	goto loc_162ed;
        case m2c::kloc_16306: 	goto loc_16306;
        case m2c::kloc_16309: 	goto loc_16309;
        case m2c::kloc_1634b: 	goto loc_1634b;
        case m2c::kloc_16350: 	goto loc_16350;
        case m2c::kloc_16353: 	goto loc_16353;
        case m2c::kloc_16364: 	goto loc_16364;
        case m2c::kloc_16366: 	goto loc_16366;
        case m2c::ksub_162cb: 	goto sub_162cb;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_163a1(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_163a1:
    _begin:
cs=0x1a2;eip=0x0063a1; 	T(bp = word_1f372;);	// 15447                  mov     bp, ds:word_1F372 ;~ 01A2:63A1
loc_163a5:
	// 5358 
cs=0x1a2;eip=0x0063a5; 	T(MOV(ax, *(dw*)(raddr(ss,bp+0))));	// 15450                  mov     ax, [bp+0] ;~ 01A2:63A5
cs=0x1a2;eip=0x0063a8; 	T(ADD(bp, 2));	// 15451                  add     bp, 2 ;~ 01A2:63A8
cs=0x1a2;eip=0x0063ab; 	T(OR(ax, ax));	// 15452                  or      ax, ax ;~ 01A2:63AB
cs=0x1a2;eip=0x0063ad; 	J(JS(loc_163e3));	// 15453                  js      short loc_163E3 ;~ 01A2:63AD
cs=0x1a2;eip=0x0063af; 	T(dx = ax;);	// 15454                  mov     dx, ax ;~ 01A2:63AF
cs=0x1a2;eip=0x0063b1; 	X(PUSH(ax));	// 15455                  push    ax ;~ 01A2:63B1
cs=0x1a2;eip=0x0063b2; 	T(ax = 6;);	// 15456                  mov     ax, 6 ;~ 01A2:63B2
cs=0x1a2;eip=0x0063b5; 	J(CALL(sub_1410e,0));	// 15457                  call    sub_1410E ;~ 01A2:63B5
cs=0x1a2;eip=0x0063b8; 	T(bx = di;);	// 15458                  mov     bx, di ;~ 01A2:63B8
cs=0x1a2;eip=0x0063ba; 	T(XOR(ah, ah));	// 15459                  xor     ah, ah ;~ 01A2:63BA
cs=0x1a2;eip=0x0063bc; 	T(MOV(al, *(raddr(ds,di+0x0C))));	// 15460                  mov     al, [di+0Ch] ;~ 01A2:63BC
cs=0x1a2;eip=0x0063bf; 	T(ADD(bx, ax));	// 15461                  add     bx, ax ;~ 01A2:63BF
cs=0x1a2;eip=0x0063c1; 	T(MOV(ax, *(dw*)(raddr(ss,bp+0))));	// 15462                  mov     ax, [bp+0] ;~ 01A2:63C1
cs=0x1a2;eip=0x0063c4; 	T(ADD(bp, 2));	// 15463                  add     bp, 2 ;~ 01A2:63C4
cs=0x1a2;eip=0x0063c7; 	T(OR(ax, ax));	// 15464                  or      ax, ax ;~ 01A2:63C7
cs=0x1a2;eip=0x0063c9; 	J(JZ(loc_163dd));	// 15465                  jz      short loc_163DD ;~ 01A2:63C9
cs=0x1a2;eip=0x0063cb; 	T(cx = ax;);	// 15466                  mov     cx, ax ;~ 01A2:63CB
loc_163cd:
	// 5359 
cs=0x1a2;eip=0x0063cd; 	T(MOV(al, *(raddr(ss,bp+0))));	// 15469                  mov     al, [bp+0] ;~ 01A2:63CD
cs=0x1a2;eip=0x0063d0; 	T(ADD(bp, 1));	// 15470                  add     bp, 1 ;~ 01A2:63D0
cs=0x1a2;eip=0x0063d3; 	T(CMP(*(raddr(ds,bx)), 0));	// 15471                  cmp     byte ptr [bx], 0 ;~ 01A2:63D3
cs=0x1a2;eip=0x0063d6; 	J(JNZ(loc_163da));	// 15472                  jnz     short loc_163DA ;~ 01A2:63D6
cs=0x1a2;eip=0x0063d8; 	X(MOV(*(raddr(ds,bx)), al));	// 15473                  mov     [bx], al ;~ 01A2:63D8
loc_163da:
	// 5360 
cs=0x1a2;eip=0x0063da; 	T(INC(bx));	// 15476                  inc     bx ;~ 01A2:63DA
cs=0x1a2;eip=0x0063db; 	J(LOOP(loc_163cd));	// 15477                  loop    loc_163CD ;~ 01A2:63DB
loc_163dd:
	// 5361 
cs=0x1a2;eip=0x0063dd; 	X(POP(dx));	// 15480                  pop     dx ;~ 01A2:63DD
cs=0x1a2;eip=0x0063de; 	J(CALL(sub_13f35,0));	// 15481                  call    sub_13F35 ;~ 01A2:63DE
cs=0x1a2;eip=0x0063e1; 	J(JMP(loc_163a5));	// 15482                  jmp     short loc_163A5 ;~ 01A2:63E1
loc_163e3:
	// 5362 
cs=0x1a2;eip=0x0063e3; 	T(MOV(ax, *(dw*)(raddr(ss,bp+0))));	// 15486                  mov     ax, [bp+0] ;~ 01A2:63E3
cs=0x1a2;eip=0x0063e6; 	T(ADD(bp, 2));	// 15487                  add     bp, 2 ;~ 01A2:63E6
cs=0x1a2;eip=0x0063e9; 	X(word_1f3b8 = ax;);	// 15488                  mov     ds:word_1F3B8, ax ;~ 01A2:63E9
cs=0x1a2;eip=0x0063ec; 	T(MOV(ax, *(dw*)(raddr(ss,bp+0))));	// 15489                  mov     ax, [bp+0] ;~ 01A2:63EC
cs=0x1a2;eip=0x0063ef; 	T(ADD(bp, 2));	// 15490                  add     bp, 2 ;~ 01A2:63EF
cs=0x1a2;eip=0x0063f2; 	X(word_1f3ba = ax;);	// 15491                  mov     ds:word_1F3BA, ax ;~ 01A2:63F2
cs=0x1a2;eip=0x0063f5; 	T(MOV(ax, *(dw*)(raddr(ss,bp+0))));	// 15492                  mov     ax, [bp+0] ;~ 01A2:63F5
cs=0x1a2;eip=0x0063f8; 	T(ADD(bp, 2));	// 15493                  add     bp, 2 ;~ 01A2:63F8
cs=0x1a2;eip=0x0063fb; 	X(word_1f3bc = ax;);	// 15494                  mov     ds:word_1F3BC, ax ;~ 01A2:63FB
cs=0x1a2;eip=0x0063fe; 	T(MOV(ax, *(dw*)(raddr(ss,bp+0))));	// 15495                  mov     ax, [bp+0] ;~ 01A2:63FE
cs=0x1a2;eip=0x006401; 	T(ADD(bp, 2));	// 15496                  add     bp, 2 ;~ 01A2:6401
cs=0x1a2;eip=0x006404; 	X(word_1f3be = ax;);	// 15497                  mov     ds:word_1F3BE, ax ;~ 01A2:6404
cs=0x1a2;eip=0x006407; 	T(MOV(ax, *(dw*)(raddr(ss,bp+0))));	// 15498                  mov     ax, [bp+0] ;~ 01A2:6407
cs=0x1a2;eip=0x00640a; 	T(ADD(bp, 2));	// 15499                  add     bp, 2 ;~ 01A2:640A
cs=0x1a2;eip=0x00640d; 	X(word_1f3aa = ax;);	// 15500                  mov     ds:word_1F3AA, ax ;~ 01A2:640D
cs=0x1a2;eip=0x006410; 	T(MOV(ax, *(dw*)(raddr(ss,bp+0))));	// 15501                  mov     ax, [bp+0] ;~ 01A2:6410
cs=0x1a2;eip=0x006413; 	T(ADD(bp, 2));	// 15502                  add     bp, 2 ;~ 01A2:6413
cs=0x1a2;eip=0x006416; 	X(byte_1f722 = al;);	// 15503                  mov     ds:byte_1F722, al ;~ 01A2:6416
cs=0x1a2;eip=0x006419; 	X(byte_1f723 = ah;);	// 15504                  mov     ds:byte_1F723, ah ;~ 01A2:6419
cs=0x1a2;eip=0x00641d; 	T(MOV(ax, *(dw*)(raddr(ss,bp+0))));	// 15505                  mov     ax, [bp+0] ;~ 01A2:641D
cs=0x1a2;eip=0x006420; 	T(ADD(bp, 2));	// 15506                  add     bp, 2 ;~ 01A2:6420
cs=0x1a2;eip=0x006423; 	X(byte_1f724 = al;);	// 15507                  mov     ds:byte_1F724, al ;~ 01A2:6423
cs=0x1a2;eip=0x006426; 	X(byte_1f725 = ah;);	// 15508                  mov     ds:byte_1F725, ah ;~ 01A2:6426
cs=0x1a2;eip=0x00642a; 	T(MOV(ax, *(dw*)(raddr(ss,bp+0))));	// 15509                  mov     ax, [bp+0] ;~ 01A2:642A
cs=0x1a2;eip=0x00642d; 	T(ADD(bp, 2));	// 15510                  add     bp, 2 ;~ 01A2:642D
cs=0x1a2;eip=0x006430; 	X(byte_1f726 = al;);	// 15511                  mov     ds:byte_1F726, al ;~ 01A2:6430
cs=0x1a2;eip=0x006433; 	X(*(db*)(&seg_1f727) = ah;);	// 15512                  mov     byte ptr ds:seg_1F727, ah ;~ 01A2:6433
cs=0x1a2;eip=0x006437; 	T(MOV(al, *(raddr(ss,bp+0))));	// 15513                  mov     al, [bp+0] ;~ 01A2:6437
cs=0x1a2;eip=0x00643a; 	T(ADD(bp, 2));	// 15514                  add     bp, 2 ;~ 01A2:643A
cs=0x1a2;eip=0x00643d; 	X(*(db*)(((db*)&seg_1f727)+1) = al;);	// 15515                  mov     byte ptr ds:seg_1F727+1, al ;~ 01A2:643D
cs=0x1a2;eip=0x006440; 	J(RETN(0));	// 15516                  retn ;~ 01A2:6440

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_163a5: 	goto loc_163a5;
        case m2c::kloc_163cd: 	goto loc_163cd;
        case m2c::kloc_163da: 	goto loc_163da;
        case m2c::kloc_163dd: 	goto loc_163dd;
        case m2c::kloc_163e3: 	goto loc_163e3;
        case m2c::ksub_163a1: 	goto sub_163a1;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_16441(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_16441:
    _begin:
cs=0x1a2;eip=0x006441; 	X(PUSH(ax));	// 15525                  push    ax ;~ 01A2:6441
cs=0x1a2;eip=0x006442; 	X(PUSH(bp));	// 15526                  push    bp ;~ 01A2:6442
cs=0x1a2;eip=0x006443; 	X(PUSH(si));	// 15527                  push    si ;~ 01A2:6443
cs=0x1a2;eip=0x006444; 	X(PUSH(cx));	// 15528                  push    cx ;~ 01A2:6444
cs=0x1a2;eip=0x006445; 	T(bp = ax;);	// 15529                  mov     bp, ax ;~ 01A2:6445
cs=0x1a2;eip=0x006447; 	T(si = 0x0F6;);	// 15530                  mov     si, 0F6h ;~ 01A2:6447
cs=0x1a2;eip=0x00644a; 	T(cx = word_1f70e;);	// 15531                  mov     cx, ds:word_1F70E ;~ 01A2:644A
cs=0x1a2;eip=0x00644e; 	T(OR(cx, cx));	// 15532                  or      cx, cx ;~ 01A2:644E
cs=0x1a2;eip=0x006450; 	J(JS(loc_16466));	// 15533                  js      short loc_16466 ;~ 01A2:6450
cs=0x1a2;eip=0x006452; 	T(INC(cx));	// 15534                  inc     cx ;~ 01A2:6452
loc_16453:
	// 5363 
cs=0x1a2;eip=0x006453; 	T(LODSW);	// 15538                  lodsw ;~ 01A2:6453
cs=0x1a2;eip=0x006454; 	T(CMP(ax, bp));	// 15539                  cmp     ax, bp ;~ 01A2:6454
cs=0x1a2;eip=0x006456; 	J(JNZ(loc_16461));	// 15540                  jnz     short loc_16461 ;~ 01A2:6456
cs=0x1a2;eip=0x006458; 	T(LODSW);	// 15541                  lodsw ;~ 01A2:6458
cs=0x1a2;eip=0x006459; 	T(CMP(ax, dx));	// 15542                  cmp     ax, dx ;~ 01A2:6459
cs=0x1a2;eip=0x00645b; 	J(JZ(loc_16479));	// 15543                  jz      short loc_16479 ;~ 01A2:645B
cs=0x1a2;eip=0x00645d; 	J(LOOP(loc_16453));	// 15544                  loop    loc_16453 ;~ 01A2:645D
cs=0x1a2;eip=0x00645f; 	J(JMP(loc_16466));	// 15545                  jmp     short loc_16466 ;~ 01A2:645F
loc_16461:
	// 5364 
cs=0x1a2;eip=0x006461; 	T(ADD(si, 2));	// 15549                  add     si, 2 ;~ 01A2:6461
cs=0x1a2;eip=0x006464; 	J(LOOP(loc_16453));	// 15550                  loop    loc_16453 ;~ 01A2:6464
loc_16466:
	// 5365 
cs=0x1a2;eip=0x006466; 	T(ax = word_1f70e;);	// 15554                  mov     ax, ds:word_1F70E ;~ 01A2:6466
cs=0x1a2;eip=0x006469; 	T(CMP(ax, 0x40));	// 15555                  cmp     ax, 40h ; '@' ;~ 01A2:6469
cs=0x1a2;eip=0x00646c; 	J(JZ(loc_16479));	// 15556                  jz      short loc_16479 ;~ 01A2:646C
cs=0x1a2;eip=0x00646e; 	X(INC(word_1f70e));	// 15557                  inc     ds:word_1F70E ;~ 01A2:646E
cs=0x1a2;eip=0x006472; 	X(MOV(*(dw*)(raddr(ds,si)), bp));	// 15558                  mov     [si], bp ;~ 01A2:6472
cs=0x1a2;eip=0x006474; 	X(MOV(*(dw*)(raddr(ds,si+2)), dx));	// 15559                  mov     [si+2], dx ;~ 01A2:6474
cs=0x1a2;eip=0x006477; 	T(OR(al, 1));	// 15560                  or      al, 1 ;~ 01A2:6477
loc_16479:
	// 5366 
cs=0x1a2;eip=0x006479; 	X(POP(cx));	// 15564                  pop     cx ;~ 01A2:6479
cs=0x1a2;eip=0x00647a; 	X(POP(si));	// 15565                  pop     si ;~ 01A2:647A
cs=0x1a2;eip=0x00647b; 	X(POP(bp));	// 15566                  pop     bp ;~ 01A2:647B
cs=0x1a2;eip=0x00647c; 	X(POP(ax));	// 15567                  pop     ax ;~ 01A2:647C
cs=0x1a2;eip=0x00647d; 	J(RETN(0));	// 15568                  retn ;~ 01A2:647D

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_16453: 	goto loc_16453;
        case m2c::kloc_16461: 	goto loc_16461;
        case m2c::kloc_16466: 	goto loc_16466;
        case m2c::kloc_16479: 	goto loc_16479;
        case m2c::ksub_16441: 	goto sub_16441;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1647e(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1647e:
    _begin:
cs=0x1a2;eip=0x00647e; 	X(PUSH(ax));	// 15577                  push    ax ;~ 01A2:647E
cs=0x1a2;eip=0x00647f; 	X(PUSH(bx));	// 15578                  push    bx ;~ 01A2:647F
cs=0x1a2;eip=0x006480; 	X(PUSH(cx));	// 15579                  push    cx ;~ 01A2:6480
cs=0x1a2;eip=0x006481; 	X(PUSH(dx));	// 15580                  push    dx ;~ 01A2:6481
cs=0x1a2;eip=0x006482; 	X(PUSH(bp));	// 15581                  push    bp ;~ 01A2:6482
cs=0x1a2;eip=0x006483; 	X(PUSH(si));	// 15582                  push    si ;~ 01A2:6483
cs=0x1a2;eip=0x006484; 	X(PUSH(di));	// 15583                  push    di ;~ 01A2:6484
cs=0x1a2;eip=0x006485; 	X(PUSH(es));	// 15584                  push    es ;~ 01A2:6485
cs=0x1a2;eip=0x006486; 	X(PUSH(ds));	// 15585                  push    ds ;~ 01A2:6486
cs=0x1a2;eip=0x006487; 	T(XOR(bh, bh));	// 15586                  xor     bh, bh ;~ 01A2:6487
cs=0x1a2;eip=0x006489; 	T(si = bx;);	// 15587                  mov     si, bx ;~ 01A2:6489
cs=0x1a2;eip=0x00648b; 	T(ADD(cx, ax));	// 15588                  add     cx, ax ;~ 01A2:648B
cs=0x1a2;eip=0x00648d; 	T(ADD(dh, dl));	// 15589                  add     dh, dl ;~ 01A2:648D
cs=0x1a2;eip=0x00648f; 	T(bl = dh;);	// 15590                  mov     bl, dh ;~ 01A2:648F
cs=0x1a2;eip=0x006491; 	T(XOR(dh, dh));	// 15591                  xor     dh, dh ;~ 01A2:6491
cs=0x1a2;eip=0x006493; 	X(PUSH(si));	// 15592                  push    si ;~ 01A2:6493
cs=0x1a2;eip=0x006494; 	X(PUSH(dx));	// 15593                  push    dx ;~ 01A2:6494
cs=0x1a2;eip=0x006495; 	X(PUSH(cx));	// 15594                  push    cx ;~ 01A2:6495
cs=0x1a2;eip=0x006496; 	X(PUSH(dx));	// 15595                  push    dx ;~ 01A2:6496
cs=0x1a2;eip=0x006497; 	X(PUSH(ax));	// 15596                  push    ax ;~ 01A2:6497
cs=0x1a2;eip=0x006498; 	X(PUSH(si));	// 15597                  push    si ;~ 01A2:6498
cs=0x1a2;eip=0x006499; 	X(PUSH(bx));	// 15598                  push    bx ;~ 01A2:6499
cs=0x1a2;eip=0x00649a; 	X(PUSH(cx));	// 15599                  push    cx ;~ 01A2:649A
cs=0x1a2;eip=0x00649b; 	X(PUSH(bx));	// 15600                  push    bx ;~ 01A2:649B
cs=0x1a2;eip=0x00649c; 	X(PUSH(ax));	// 15601                  push    ax ;~ 01A2:649C
cs=0x1a2;eip=0x00649d; 	X(PUSH(si));	// 15602                  push    si ;~ 01A2:649D
cs=0x1a2;eip=0x00649e; 	X(PUSH(bx));	// 15603                  push    bx ;~ 01A2:649E
cs=0x1a2;eip=0x00649f; 	X(PUSH(cx));	// 15604                  push    cx ;~ 01A2:649F
cs=0x1a2;eip=0x0064a0; 	X(PUSH(dx));	// 15605                  push    dx ;~ 01A2:64A0
cs=0x1a2;eip=0x0064a1; 	X(PUSH(cx));	// 15606                  push    cx ;~ 01A2:64A1
cs=0x1a2;eip=0x0064a2; 	X(PUSH(si));	// 15607                  push    si ;~ 01A2:64A2
cs=0x1a2;eip=0x0064a3; 	X(PUSH(bx));	// 15608                  push    bx ;~ 01A2:64A3
cs=0x1a2;eip=0x0064a4; 	X(PUSH(ax));	// 15609                  push    ax ;~ 01A2:64A4
cs=0x1a2;eip=0x0064a5; 	X(PUSH(dx));	// 15610                  push    dx ;~ 01A2:64A5
cs=0x1a2;eip=0x0064a6; 	X(PUSH(ax));	// 15611                  push    ax ;~ 01A2:64A6
cs=0x1a2;eip=0x0064a7; 	J(CALL(sub_199b0,0));	// 15612                  call    sub_199B0 ;~ 01A2:64A7
cs=0x1a2;eip=0x0064aa; 	T(ADD(sp, 0x0A));	// 15613                  add     sp, 0Ah ;~ 01A2:64AA
cs=0x1a2;eip=0x0064ad; 	J(CALL(sub_199b0,0));	// 15614                  call    sub_199B0 ;~ 01A2:64AD
cs=0x1a2;eip=0x0064b0; 	T(ADD(sp, 0x0A));	// 15615                  add     sp, 0Ah ;~ 01A2:64B0
cs=0x1a2;eip=0x0064b3; 	J(CALL(sub_199b0,0));	// 15616                  call    sub_199B0 ;~ 01A2:64B3
cs=0x1a2;eip=0x0064b6; 	T(ADD(sp, 0x0A));	// 15617                  add     sp, 0Ah ;~ 01A2:64B6
cs=0x1a2;eip=0x0064b9; 	J(CALL(sub_199b0,0));	// 15618                  call    sub_199B0 ;~ 01A2:64B9
cs=0x1a2;eip=0x0064bc; 	T(ADD(sp, 0x0A));	// 15619                  add     sp, 0Ah ;~ 01A2:64BC
cs=0x1a2;eip=0x0064bf; 	X(POP(ds));	// 15620                  pop     ds ;~ 01A2:64BF
cs=0x1a2;eip=0x0064c0; 	X(POP(es));	// 15621                  pop     es ;~ 01A2:64C0
cs=0x1a2;eip=0x0064c1; 	X(POP(di));	// 15623                  pop     di ;~ 01A2:64C1
cs=0x1a2;eip=0x0064c2; 	X(POP(si));	// 15624                  pop     si ;~ 01A2:64C2
cs=0x1a2;eip=0x0064c3; 	X(POP(bp));	// 15625                  pop     bp ;~ 01A2:64C3
cs=0x1a2;eip=0x0064c4; 	X(POP(dx));	// 15626                  pop     dx ;~ 01A2:64C4
cs=0x1a2;eip=0x0064c5; 	X(POP(cx));	// 15627                  pop     cx ;~ 01A2:64C5
cs=0x1a2;eip=0x0064c6; 	X(POP(bx));	// 15628                  pop     bx ;~ 01A2:64C6
cs=0x1a2;eip=0x0064c7; 	X(POP(ax));	// 15629                  pop     ax ;~ 01A2:64C7
cs=0x1a2;eip=0x0064c8; 	J(RETN(0));	// 15630                  retn ;~ 01A2:64C8

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1647e: 	goto sub_1647e;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_164c9(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_164c9:
    _begin:
cs=0x1a2;eip=0x0064c9; 	X(PUSH(ax));	// 15639                  push    ax ;~ 01A2:64C9
cs=0x1a2;eip=0x0064ca; 	X(PUSH(bx));	// 15640                  push    bx ;~ 01A2:64CA
cs=0x1a2;eip=0x0064cb; 	X(PUSH(cx));	// 15641                  push    cx ;~ 01A2:64CB
cs=0x1a2;eip=0x0064cc; 	X(PUSH(dx));	// 15642                  push    dx ;~ 01A2:64CC
cs=0x1a2;eip=0x0064cd; 	X(PUSH(bp));	// 15643                  push    bp ;~ 01A2:64CD
cs=0x1a2;eip=0x0064ce; 	X(PUSH(si));	// 15644                  push    si ;~ 01A2:64CE
cs=0x1a2;eip=0x0064cf; 	X(PUSH(di));	// 15645                  push    di ;~ 01A2:64CF
cs=0x1a2;eip=0x0064d0; 	X(PUSH(es));	// 15646                  push    es ;~ 01A2:64D0
cs=0x1a2;eip=0x0064d1; 	X(PUSH(ds));	// 15647                  push    ds ;~ 01A2:64D1
cs=0x1a2;eip=0x0064d2; 	T(XOR(bh, bh));	// 15648                  xor     bh, bh ;~ 01A2:64D2
cs=0x1a2;eip=0x0064d4; 	T(si = bx;);	// 15649                  mov     si, bx ;~ 01A2:64D4
cs=0x1a2;eip=0x0064d6; 	T(bl = dh;);	// 15650                  mov     bl, dh ;~ 01A2:64D6
cs=0x1a2;eip=0x0064d8; 	T(XOR(dh, dh));	// 15651                  xor     dh, dh ;~ 01A2:64D8
cs=0x1a2;eip=0x0064da; 	X(PUSH(si));	// 15652                  push    si ;~ 01A2:64DA
cs=0x1a2;eip=0x0064db; 	X(PUSH(dx));	// 15653                  push    dx ;~ 01A2:64DB
cs=0x1a2;eip=0x0064dc; 	X(PUSH(cx));	// 15654                  push    cx ;~ 01A2:64DC
cs=0x1a2;eip=0x0064dd; 	X(PUSH(dx));	// 15655                  push    dx ;~ 01A2:64DD
cs=0x1a2;eip=0x0064de; 	X(PUSH(ax));	// 15656                  push    ax ;~ 01A2:64DE
cs=0x1a2;eip=0x0064df; 	X(PUSH(si));	// 15657                  push    si ;~ 01A2:64DF
cs=0x1a2;eip=0x0064e0; 	X(PUSH(bx));	// 15658                  push    bx ;~ 01A2:64E0
cs=0x1a2;eip=0x0064e1; 	X(PUSH(cx));	// 15659                  push    cx ;~ 01A2:64E1
cs=0x1a2;eip=0x0064e2; 	X(PUSH(bx));	// 15660                  push    bx ;~ 01A2:64E2
cs=0x1a2;eip=0x0064e3; 	X(PUSH(ax));	// 15661                  push    ax ;~ 01A2:64E3
cs=0x1a2;eip=0x0064e4; 	X(PUSH(si));	// 15662                  push    si ;~ 01A2:64E4
cs=0x1a2;eip=0x0064e5; 	X(PUSH(bx));	// 15663                  push    bx ;~ 01A2:64E5
cs=0x1a2;eip=0x0064e6; 	X(PUSH(cx));	// 15664                  push    cx ;~ 01A2:64E6
cs=0x1a2;eip=0x0064e7; 	X(PUSH(dx));	// 15665                  push    dx ;~ 01A2:64E7
cs=0x1a2;eip=0x0064e8; 	X(PUSH(cx));	// 15666                  push    cx ;~ 01A2:64E8
cs=0x1a2;eip=0x0064e9; 	X(PUSH(si));	// 15667                  push    si ;~ 01A2:64E9
cs=0x1a2;eip=0x0064ea; 	X(PUSH(bx));	// 15668                  push    bx ;~ 01A2:64EA
cs=0x1a2;eip=0x0064eb; 	X(PUSH(ax));	// 15669                  push    ax ;~ 01A2:64EB
cs=0x1a2;eip=0x0064ec; 	X(PUSH(dx));	// 15670                  push    dx ;~ 01A2:64EC
cs=0x1a2;eip=0x0064ed; 	X(PUSH(ax));	// 15671                  push    ax ;~ 01A2:64ED
cs=0x1a2;eip=0x0064ee; 	J(CALL(sub_16524,0));	// 15672                  call    sub_16524 ;~ 01A2:64EE
cs=0x1a2;eip=0x0064f1; 	J(JC(loc_164f6));	// 15673                  jb      short loc_164F6 ;~ 01A2:64F1
cs=0x1a2;eip=0x0064f3; 	J(CALL(sub_199b0,0));	// 15674                  call    sub_199B0 ;~ 01A2:64F3
loc_164f6:
	// 5367 
cs=0x1a2;eip=0x0064f6; 	T(ADD(sp, 0x0A));	// 15677                  add     sp, 0Ah ;~ 01A2:64F6
cs=0x1a2;eip=0x0064f9; 	J(CALL(sub_16524,0));	// 15678                  call    sub_16524 ;~ 01A2:64F9
cs=0x1a2;eip=0x0064fc; 	J(JC(loc_16501));	// 15679                  jb      short loc_16501 ;~ 01A2:64FC
cs=0x1a2;eip=0x0064fe; 	J(CALL(sub_199b0,0));	// 15680                  call    sub_199B0 ;~ 01A2:64FE
loc_16501:
	// 5368 
cs=0x1a2;eip=0x006501; 	T(ADD(sp, 0x0A));	// 15683                  add     sp, 0Ah ;~ 01A2:6501
cs=0x1a2;eip=0x006504; 	J(CALL(sub_16524,0));	// 15684                  call    sub_16524 ;~ 01A2:6504
cs=0x1a2;eip=0x006507; 	J(JC(loc_1650c));	// 15685                  jb      short loc_1650C ;~ 01A2:6507
cs=0x1a2;eip=0x006509; 	J(CALL(sub_199b0,0));	// 15686                  call    sub_199B0 ;~ 01A2:6509
loc_1650c:
	// 5369 
cs=0x1a2;eip=0x00650c; 	T(ADD(sp, 0x0A));	// 15689                  add     sp, 0Ah ;~ 01A2:650C
cs=0x1a2;eip=0x00650f; 	J(CALL(sub_16524,0));	// 15690                  call    sub_16524 ;~ 01A2:650F
cs=0x1a2;eip=0x006512; 	J(JC(loc_16517));	// 15691                  jb      short loc_16517 ;~ 01A2:6512
cs=0x1a2;eip=0x006514; 	J(CALL(sub_199b0,0));	// 15692                  call    sub_199B0 ;~ 01A2:6514
loc_16517:
	// 5370 
cs=0x1a2;eip=0x006517; 	T(ADD(sp, 0x0A));	// 15695                  add     sp, 0Ah ;~ 01A2:6517
cs=0x1a2;eip=0x00651a; 	X(POP(ds));	// 15696                  pop     ds ;~ 01A2:651A
cs=0x1a2;eip=0x00651b; 	X(POP(es));	// 15697                  pop     es ;~ 01A2:651B
cs=0x1a2;eip=0x00651c; 	X(POP(di));	// 15698                  pop     di ;~ 01A2:651C
cs=0x1a2;eip=0x00651d; 	X(POP(si));	// 15699                  pop     si ;~ 01A2:651D
cs=0x1a2;eip=0x00651e; 	X(POP(bp));	// 15700                  pop     bp ;~ 01A2:651E
cs=0x1a2;eip=0x00651f; 	X(POP(dx));	// 15701                  pop     dx ;~ 01A2:651F
cs=0x1a2;eip=0x006520; 	X(POP(cx));	// 15702                  pop     cx ;~ 01A2:6520
cs=0x1a2;eip=0x006521; 	X(POP(bx));	// 15703                  pop     bx ;~ 01A2:6521
cs=0x1a2;eip=0x006522; 	X(POP(ax));	// 15704                  pop     ax ;~ 01A2:6522
cs=0x1a2;eip=0x006523; 	J(RETN(0));	// 15705                  retn ;~ 01A2:6523

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_164f6: 	goto loc_164f6;
        case m2c::kloc_16501: 	goto loc_16501;
        case m2c::kloc_1650c: 	goto loc_1650c;
        case m2c::kloc_16517: 	goto loc_16517;
        case m2c::ksub_164c9: 	goto sub_164c9;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_16524(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_16524:
    _begin:
#undef arg_0
#define arg_0 2
	// 15716 arg_0           = word ptr  2 ;~ 01A2:6524
#undef arg_2
#define arg_2 4
	// 15717 arg_2           = word ptr  4 ;~ 01A2:6524
#undef arg_4
#define arg_4 6
	// 15718 arg_4           = word ptr  6 ;~ 01A2:6524
#undef arg_6
#define arg_6 8
	// 15719 arg_6           = word ptr  8 ;~ 01A2:6524
cs=0x1a2;eip=0x006524; 	T(bp = sp;);	// 15721                  mov     bp, sp ;~ 01A2:6524
cs=0x1a2;eip=0x006526; 	T(CMP(*(dw*)(raddr(ss,bp+arg_0)), 0x0D5));	// 15722                  cmp     [bp+arg_0], 0D5h ;~ 01A2:6526
cs=0x1a2;eip=0x00652b; 	J(JA(loc_1656e));	// 15723                  ja      short loc_1656E ;~ 01A2:652B
cs=0x1a2;eip=0x00652d; 	T(CMP(*(dw*)(raddr(ss,bp+arg_4)), 0x6B));	// 15724                  cmp     [bp+arg_4], 6Bh ; 'k' ;~ 01A2:652D
cs=0x1a2;eip=0x006531; 	J(JBE(loc_1656e));	// 15725                  jbe     short loc_1656E ;~ 01A2:6531
cs=0x1a2;eip=0x006533; 	T(CMP(*(dw*)(raddr(ss,bp+arg_2)), 0x73));	// 15726                  cmp     [bp+arg_2], 73h ; 's' ;~ 01A2:6533
cs=0x1a2;eip=0x006537; 	J(JA(loc_1656e));	// 15727                  ja      short loc_1656E ;~ 01A2:6537
cs=0x1a2;eip=0x006539; 	T(CMP(*(dw*)(raddr(ss,bp+arg_6)), 0x29));	// 15728                  cmp     [bp+arg_6], 29h ; ')' ;~ 01A2:6539
cs=0x1a2;eip=0x00653d; 	J(JBE(loc_1656e));	// 15729                  jbe     short loc_1656E ;~ 01A2:653D
cs=0x1a2;eip=0x00653f; 	T(CMP(*(dw*)(raddr(ss,bp+arg_0)), 0x6B));	// 15730                  cmp     [bp+arg_0], 6Bh ; 'k' ;~ 01A2:653F
cs=0x1a2;eip=0x006543; 	J(JNC(loc_1654a));	// 15731                  jnb     short loc_1654A ;~ 01A2:6543
cs=0x1a2;eip=0x006545; 	X(MOV(*(dw*)(raddr(ss,bp+arg_0)), 0x6B));	// 15732                  mov     [bp+arg_0], 6Bh ; 'k' ;~ 01A2:6545
loc_1654a:
	// 5371 
cs=0x1a2;eip=0x00654a; 	T(CMP(*(dw*)(raddr(ss,bp+arg_4)), 0x0D5));	// 15735                  cmp     [bp+arg_4], 0D5h ;~ 01A2:654A
cs=0x1a2;eip=0x00654f; 	J(JBE(loc_16556));	// 15736                  jbe     short loc_16556 ;~ 01A2:654F
cs=0x1a2;eip=0x006551; 	X(MOV(*(dw*)(raddr(ss,bp+arg_4)), 0x0D5));	// 15737                  mov     [bp+arg_4], 0D5h ;~ 01A2:6551
loc_16556:
	// 5372 
cs=0x1a2;eip=0x006556; 	T(CMP(*(dw*)(raddr(ss,bp+arg_2)), 0x29));	// 15740                  cmp     [bp+arg_2], 29h ; ')' ;~ 01A2:6556
cs=0x1a2;eip=0x00655a; 	J(JNC(loc_16561));	// 15741                  jnb     short loc_16561 ;~ 01A2:655A
cs=0x1a2;eip=0x00655c; 	X(MOV(*(dw*)(raddr(ss,bp+arg_2)), 0x29));	// 15742                  mov     [bp+arg_2], 29h ; ')' ;~ 01A2:655C
loc_16561:
	// 5373 
cs=0x1a2;eip=0x006561; 	T(CMP(*(dw*)(raddr(ss,bp+arg_6)), 0x73));	// 15745                  cmp     [bp+arg_6], 73h ; 's' ;~ 01A2:6561
cs=0x1a2;eip=0x006565; 	J(JBE(loc_1656c));	// 15746                  jbe     short loc_1656C ;~ 01A2:6565
cs=0x1a2;eip=0x006567; 	X(MOV(*(dw*)(raddr(ss,bp+arg_6)), 0x73));	// 15747                  mov     [bp+arg_6], 73h ; 's' ;~ 01A2:6567
loc_1656c:
	// 5374 
cs=0x1a2;eip=0x00656c; 	T(CLC);	// 15750                  clc ;~ 01A2:656C
cs=0x1a2;eip=0x00656d; 	J(RETN(0));	// 15751                  retn ;~ 01A2:656D
loc_1656e:
	// 5375 
cs=0x1a2;eip=0x00656e; 	T(STC);	// 15756                  stc ;~ 01A2:656E
cs=0x1a2;eip=0x00656f; 	J(RETN(0));	// 15757                  retn ;~ 01A2:656F

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1654a: 	goto loc_1654a;
        case m2c::kloc_16556: 	goto loc_16556;
        case m2c::kloc_16561: 	goto loc_16561;
        case m2c::kloc_1656c: 	goto loc_1656c;
        case m2c::kloc_1656e: 	goto loc_1656e;
        case m2c::ksub_16524: 	goto sub_16524;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_16570(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_16570:
    _begin:
cs=0x1a2;eip=0x006570; 	X(PUSH(ax));	// 15766                  push    ax ;~ 01A2:6570
cs=0x1a2;eip=0x006571; 	X(PUSH(bx));	// 15767                  push    bx ;~ 01A2:6571
cs=0x1a2;eip=0x006572; 	X(PUSH(cx));	// 15768                  push    cx ;~ 01A2:6572
cs=0x1a2;eip=0x006573; 	X(PUSH(dx));	// 15769                  push    dx ;~ 01A2:6573
cs=0x1a2;eip=0x006574; 	X(PUSH(bp));	// 15770                  push    bp ;~ 01A2:6574
cs=0x1a2;eip=0x006575; 	X(PUSH(si));	// 15771                  push    si ;~ 01A2:6575
cs=0x1a2;eip=0x006576; 	X(PUSH(di));	// 15772                  push    di ;~ 01A2:6576
cs=0x1a2;eip=0x006577; 	X(PUSH(es));	// 15773                  push    es ;~ 01A2:6577
cs=0x1a2;eip=0x006578; 	X(PUSH(ds));	// 15774                  push    ds ;~ 01A2:6578
cs=0x1a2;eip=0x006579; 	X(word_1f37a = sp;);	// 15775                  mov     ds:word_1F37A, sp ;~ 01A2:6579
cs=0x1a2;eip=0x00657d; 	X(byte_1f85c = 0;);	// 15776                  mov     ds:byte_1F85C, 0 ;~ 01A2:657D
cs=0x1a2;eip=0x006582; 	T(TEST(byte_1f873, 4));	// 15777                  test    ds:byte_1F873, 4 ;~ 01A2:6582
cs=0x1a2;eip=0x006587; 	X(PUSHF);	// 15778                  pushf ;~ 01A2:6587
cs=0x1a2;eip=0x006588; 	X(AND(byte_1f873, 0x0FB));	// 15779                  and     ds:byte_1F873, 0FBh ;~ 01A2:6588
cs=0x1a2;eip=0x00658d; 	X(POPF);	// 15780                  popf ;~ 01A2:658D
cs=0x1a2;eip=0x00658e; 	X(byte_1f8c7 = 1;);	// 15781                  mov     ds:byte_1F8C7, 1 ;~ 01A2:658E
cs=0x1a2;eip=0x006593; 	X(*(db*)(&off_1f8c8) = dl;);	// 15782                  mov     byte ptr ds:off_1F8C8, dl ;~ 01A2:6593
cs=0x1a2;eip=0x006597; 	X(*(db*)(((db*)&off_1f8c8)+1) = dh;);	// 15783                  mov     byte ptr ds:off_1F8C8+1, dh ;~ 01A2:6597
cs=0x1a2;eip=0x00659b; 	X(byte_1f8c6 = ch;);	// 15784                  mov     ds:byte_1F8C6, ch ;~ 01A2:659B
cs=0x1a2;eip=0x00659f; 	J(return sub_165d2(m2c::kloc_16601, _state););	// 15785                  jmp     short loc_16601 ;~ 01A2:659F

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_16570: 	goto sub_16570;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_165a1(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_165a1:
    _begin:
cs=0x1a2;eip=0x0065a1; 	X(PUSH(ax));	// 15794                  push    ax ;~ 01A2:65A1
cs=0x1a2;eip=0x0065a2; 	X(PUSH(bx));	// 15795                  push    bx ;~ 01A2:65A2
cs=0x1a2;eip=0x0065a3; 	X(PUSH(cx));	// 15796                  push    cx ;~ 01A2:65A3
cs=0x1a2;eip=0x0065a4; 	X(PUSH(dx));	// 15797                  push    dx ;~ 01A2:65A4
cs=0x1a2;eip=0x0065a5; 	X(PUSH(bp));	// 15798                  push    bp ;~ 01A2:65A5
cs=0x1a2;eip=0x0065a6; 	X(PUSH(si));	// 15799                  push    si ;~ 01A2:65A6
cs=0x1a2;eip=0x0065a7; 	X(PUSH(di));	// 15800                  push    di ;~ 01A2:65A7
cs=0x1a2;eip=0x0065a8; 	X(PUSH(es));	// 15801                  push    es ;~ 01A2:65A8
cs=0x1a2;eip=0x0065a9; 	X(PUSH(ds));	// 15802                  push    ds ;~ 01A2:65A9
cs=0x1a2;eip=0x0065aa; 	X(word_1f37a = sp;);	// 15803                  mov     ds:word_1F37A, sp ;~ 01A2:65AA
cs=0x1a2;eip=0x0065ae; 	X(byte_1f85c = 0;);	// 15804                  mov     ds:byte_1F85C, 0 ;~ 01A2:65AE
cs=0x1a2;eip=0x0065b3; 	X(byte_1f8c7 = 0;);	// 15805                  mov     ds:byte_1F8C7, 0 ;~ 01A2:65B3
cs=0x1a2;eip=0x0065b8; 	T(TEST(byte_1f873, 4));	// 15806                  test    ds:byte_1F873, 4 ;~ 01A2:65B8
cs=0x1a2;eip=0x0065bd; 	X(PUSHF);	// 15807                  pushf ;~ 01A2:65BD
cs=0x1a2;eip=0x0065be; 	X(AND(byte_1f873, 0x0FB));	// 15808                  and     ds:byte_1F873, 0FBh ;~ 01A2:65BE
cs=0x1a2;eip=0x0065c3; 	X(POPF);	// 15809                  popf ;~ 01A2:65C3
cs=0x1a2;eip=0x0065c4; 	X(*(db*)(&off_1f8c8) = dl;);	// 15810                  mov     byte ptr ds:off_1F8C8, dl ;~ 01A2:65C4
cs=0x1a2;eip=0x0065c8; 	X(*(db*)(((db*)&off_1f8c8)+1) = dh;);	// 15811                  mov     byte ptr ds:off_1F8C8+1, dh ;~ 01A2:65C8
cs=0x1a2;eip=0x0065cc; 	X(byte_1f8c6 = ch;);	// 15812                  mov     ds:byte_1F8C6, ch ;~ 01A2:65CC
cs=0x1a2;eip=0x0065d0; 	J(return sub_165d2(m2c::kloc_16601, _state););	// 15813                  jmp     short loc_16601 ;~ 01A2:65D0

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_165a1: 	goto sub_165a1;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_165d2(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_165d2:
    _begin:
cs=0x1a2;eip=0x0065d2; 	X(PUSH(ax));	// 15821                  push    ax ;~ 01A2:65D2
cs=0x1a2;eip=0x0065d3; 	X(PUSH(bx));	// 15822                  push    bx ;~ 01A2:65D3
cs=0x1a2;eip=0x0065d4; 	X(PUSH(cx));	// 15823                  push    cx ;~ 01A2:65D4
cs=0x1a2;eip=0x0065d5; 	X(PUSH(dx));	// 15824                  push    dx ;~ 01A2:65D5
cs=0x1a2;eip=0x0065d6; 	X(PUSH(bp));	// 15825                  push    bp ;~ 01A2:65D6
cs=0x1a2;eip=0x0065d7; 	X(PUSH(si));	// 15826                  push    si ;~ 01A2:65D7
cs=0x1a2;eip=0x0065d8; 	X(PUSH(di));	// 15827                  push    di ;~ 01A2:65D8
cs=0x1a2;eip=0x0065d9; 	X(PUSH(es));	// 15828                  push    es ;~ 01A2:65D9
cs=0x1a2;eip=0x0065da; 	X(PUSH(ds));	// 15829                  push    ds ;~ 01A2:65DA
cs=0x1a2;eip=0x0065db; 	T(cl = byte_1f85c;);	// 15830                  mov     cl, ds:byte_1F85C ;~ 01A2:65DB
cs=0x1a2;eip=0x0065df; 	T(INC(cl));	// 15831                  inc     cl ;~ 01A2:65DF
cs=0x1a2;eip=0x0065e1; 	T(CMP(cl, 0x20));	// 15832                  cmp     cl, 20h ; ' ' ;~ 01A2:65E1
cs=0x1a2;eip=0x0065e4; 	J(JNZ(loc_165f8));	// 15833                  jnz     short loc_165F8 ;~ 01A2:65E4
cs=0x1a2;eip=0x0065e6; 	T(sp = word_1f37a;);	// 15834                  mov     sp, ds:word_1F37A ;~ 01A2:65E6
cs=0x1a2;eip=0x0065ea; 	T(al = 0x0FF;);	// 15835                  mov     al, 0FFh ;~ 01A2:65EA
cs=0x1a2;eip=0x0065ec; 	T(OR(al, al));	// 15836                  or      al, al ;~ 01A2:65EC
cs=0x1a2;eip=0x0065ee; 	X(POP(ds));	// 15837                  pop     ds ;~ 01A2:65EE
cs=0x1a2;eip=0x0065ef; 	X(POP(es));	// 15839                  pop     es ;~ 01A2:65EF
cs=0x1a2;eip=0x0065f0; 	X(POP(di));	// 15841                  pop     di ;~ 01A2:65F0
cs=0x1a2;eip=0x0065f1; 	X(POP(si));	// 15842                  pop     si ;~ 01A2:65F1
cs=0x1a2;eip=0x0065f2; 	X(POP(bp));	// 15843                  pop     bp ;~ 01A2:65F2
cs=0x1a2;eip=0x0065f3; 	X(POP(dx));	// 15844                  pop     dx ;~ 01A2:65F3
cs=0x1a2;eip=0x0065f4; 	X(POP(cx));	// 15845                  pop     cx ;~ 01A2:65F4
cs=0x1a2;eip=0x0065f5; 	X(POP(bx));	// 15846                  pop     bx ;~ 01A2:65F5
cs=0x1a2;eip=0x0065f6; 	X(POP(ax));	// 15847                  pop     ax ;~ 01A2:65F6
cs=0x1a2;eip=0x0065f7; 	J(RETN(0));	// 15848                  retn ;~ 01A2:65F7
loc_165f8:
	// 5376 
cs=0x1a2;eip=0x0065f8; 	X(byte_1f85c = cl;);	// 15853                  mov     ds:byte_1F85C, cl ;~ 01A2:65F8
cs=0x1a2;eip=0x0065fc; 	X(byte_1f8c7 = 0;);	// 15854                  mov     ds:byte_1F8C7, 0 ;~ 01A2:65FC
loc_16601:
	// 5377 
cs=0x1a2;eip=0x006601; 	X(PUSH(cx));	// 15859                  push    cx ;~ 01A2:6601
cs=0x1a2;eip=0x006602; 	X(PUSH(bx));	// 15860                  push    bx ;~ 01A2:6602
cs=0x1a2;eip=0x006603; 	X(PUSH(ax));	// 15861                  push    ax ;~ 01A2:6603
cs=0x1a2;eip=0x006604; 	X(PUSH(si));	// 15862                  push    si ;~ 01A2:6604
cs=0x1a2;eip=0x006605; 	X(PUSH(di));	// 15863                  push    di ;~ 01A2:6605
cs=0x1a2;eip=0x006606; 	T(AND(di, 0x0FFFE));	// 15864                  and     di, 0FFFEh ;~ 01A2:6606
cs=0x1a2;eip=0x006609; 	T(XOR(ch, ch));	// 15865                  xor     ch, ch ;~ 01A2:6609
cs=0x1a2;eip=0x00660b; 	T(MOV(cl, *(raddr(ds,si))));	// 15866                  mov     cl, [si] ;~ 01A2:660B
cs=0x1a2;eip=0x00660d; 	T(ADD(si, 2));	// 15867                  add     si, 2 ;~ 01A2:660D
loc_16610:
	// 5378 
cs=0x1a2;eip=0x006610; 	T(LODSW);	// 15870                  lodsw ;~ 01A2:6610
cs=0x1a2;eip=0x006611; 	T(AND(ax, 0x0FFFE));	// 15871                  and     ax, 0FFFEh ;~ 01A2:6611
cs=0x1a2;eip=0x006614; 	T(bx = ax;);	// 15872                  mov     bx, ax ;~ 01A2:6614
cs=0x1a2;eip=0x006616; 	X(PUSH(si));	// 15873                  push    si ;~ 01A2:6616
cs=0x1a2;eip=0x006617; 	T(si = di;);	// 15874                  mov     si, di ;~ 01A2:6617
cs=0x1a2;eip=0x006619; 	X(PUSH(ax));	// 15875                  push    ax ;~ 01A2:6619
cs=0x1a2;eip=0x00661a; 	X(PUSH(dx));	// 15876                  push    dx ;~ 01A2:661A
cs=0x1a2;eip=0x00661b; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 15877                  mov     ax, [si+4] ;~ 01A2:661B
cs=0x1a2;eip=0x00661e; 	T(MOV(dx, *(dw*)(raddr(ds,bx+4))));	// 15878                  mov     dx, [bx+4] ;~ 01A2:661E
cs=0x1a2;eip=0x006621; 	J(CALL(sub_16441,0));	// 15879                  call    sub_16441 ;~ 01A2:6621
cs=0x1a2;eip=0x006624; 	X(POP(dx));	// 15880                  pop     dx ;~ 01A2:6624
cs=0x1a2;eip=0x006625; 	X(POP(ax));	// 15881                  pop     ax ;~ 01A2:6625
cs=0x1a2;eip=0x006626; 	J(JZ(loc_16646));	// 15882                  jz      short loc_16646 ;~ 01A2:6626
cs=0x1a2;eip=0x006628; 	X(PUSH(di));	// 15883                  push    di ;~ 01A2:6628
cs=0x1a2;eip=0x006629; 	X(PUSH(ax));	// 15884                  push    ax ;~ 01A2:6629
cs=0x1a2;eip=0x00662a; 	T(di = word_1f1f4;);	// 15885                  mov     di, word_1F1F4 ;~ 01A2:662A
cs=0x1a2;eip=0x00662e; 	X(MOV(*(dw*)(raddr(ds,di)), 9));	// 15886                  mov     word ptr [di], 9 ;~ 01A2:662E
cs=0x1a2;eip=0x006632; 	X(MOV(*(dw*)(raddr(ds,di+2)), si));	// 15887                  mov     [di+2], si ;~ 01A2:6632
cs=0x1a2;eip=0x006635; 	T(MOV(ax, *(dw*)(raddr(ds,bx+4))));	// 15888                  mov     ax, [bx+4] ;~ 01A2:6635
cs=0x1a2;eip=0x006638; 	X(MOV(*(dw*)(raddr(ds,di+4)), ax));	// 15889                  mov     [di+4], ax ;~ 01A2:6638
cs=0x1a2;eip=0x00663b; 	X(ADD(word_1f1f4, 6));	// 15890                  add     word_1F1F4, 6 ;~ 01A2:663B
cs=0x1a2;eip=0x006640; 	X(INC(word_1f396));	// 15891                  inc     ds:word_1F396 ;~ 01A2:6640
cs=0x1a2;eip=0x006644; 	X(POP(ax));	// 15892                  pop     ax ;~ 01A2:6644
cs=0x1a2;eip=0x006645; 	X(POP(di));	// 15893                  pop     di ;~ 01A2:6645
loc_16646:
	// 5379 
cs=0x1a2;eip=0x006646; 	X(PUSH(ax));	// 15896                  push    ax ;~ 01A2:6646
cs=0x1a2;eip=0x006647; 	X(PUSH(dx));	// 15897                  push    dx ;~ 01A2:6647
cs=0x1a2;eip=0x006648; 	T(MOV(ax, *(dw*)(raddr(ds,bx+4))));	// 15898                  mov     ax, [bx+4] ;~ 01A2:6648
cs=0x1a2;eip=0x00664b; 	T(MOV(dx, *(dw*)(raddr(ds,si+4))));	// 15899                  mov     dx, [si+4] ;~ 01A2:664B
cs=0x1a2;eip=0x00664e; 	J(CALL(sub_16441,0));	// 15900                  call    sub_16441 ;~ 01A2:664E
cs=0x1a2;eip=0x006651; 	X(POP(dx));	// 15901                  pop     dx ;~ 01A2:6651
cs=0x1a2;eip=0x006652; 	X(POP(ax));	// 15902                  pop     ax ;~ 01A2:6652
cs=0x1a2;eip=0x006653; 	J(JZ(loc_16673));	// 15903                  jz      short loc_16673 ;~ 01A2:6653
cs=0x1a2;eip=0x006655; 	X(PUSH(di));	// 15904                  push    di ;~ 01A2:6655
cs=0x1a2;eip=0x006656; 	X(PUSH(ax));	// 15905                  push    ax ;~ 01A2:6656
cs=0x1a2;eip=0x006657; 	T(di = word_1f1f4;);	// 15906                  mov     di, word_1F1F4 ;~ 01A2:6657
cs=0x1a2;eip=0x00665b; 	X(MOV(*(dw*)(raddr(ds,di)), 9));	// 15907                  mov     word ptr [di], 9 ;~ 01A2:665B
cs=0x1a2;eip=0x00665f; 	X(MOV(*(dw*)(raddr(ds,di+2)), bx));	// 15908                  mov     [di+2], bx ;~ 01A2:665F
cs=0x1a2;eip=0x006662; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 15909                  mov     ax, [si+4] ;~ 01A2:6662
cs=0x1a2;eip=0x006665; 	X(MOV(*(dw*)(raddr(ds,di+4)), ax));	// 15910                  mov     [di+4], ax ;~ 01A2:6665
cs=0x1a2;eip=0x006668; 	X(ADD(word_1f1f4, 6));	// 15911                  add     word_1F1F4, 6 ;~ 01A2:6668
cs=0x1a2;eip=0x00666d; 	X(INC(word_1f396));	// 15912                  inc     ds:word_1F396 ;~ 01A2:666D
cs=0x1a2;eip=0x006671; 	X(POP(ax));	// 15913                  pop     ax ;~ 01A2:6671
cs=0x1a2;eip=0x006672; 	X(POP(di));	// 15914                  pop     di ;~ 01A2:6672
loc_16673:
	// 5380 
cs=0x1a2;eip=0x006673; 	X(POP(si));	// 15917                  pop     si ;~ 01A2:6673
cs=0x1a2;eip=0x006674; 	J(LOOP(loc_16610));	// 15918                  loop    loc_16610 ;~ 01A2:6674
cs=0x1a2;eip=0x006676; 	X(PUSH(ax));	// 15919                  push    ax ;~ 01A2:6676
cs=0x1a2;eip=0x006677; 	T(ax = word_1f1f4;);	// 15920                  mov     ax, word_1F1F4 ;~ 01A2:6677
cs=0x1a2;eip=0x00667a; 	X(word_1f206 = ax;);	// 15921                  mov     word_1F206, ax ;~ 01A2:667A
cs=0x1a2;eip=0x00667d; 	T(ax = word_1f396;);	// 15922                  mov     ax, ds:word_1F396 ;~ 01A2:667D
cs=0x1a2;eip=0x006680; 	X(word_1f708 = ax;);	// 15923                  mov     ds:word_1F708, ax ;~ 01A2:6680
cs=0x1a2;eip=0x006683; 	X(POP(ax));	// 15924                  pop     ax ;~ 01A2:6683
cs=0x1a2;eip=0x006684; 	X(POP(di));	// 15925                  pop     di ;~ 01A2:6684
cs=0x1a2;eip=0x006685; 	X(POP(si));	// 15926                  pop     si ;~ 01A2:6685
cs=0x1a2;eip=0x006686; 	X(POP(ax));	// 15927                  pop     ax ;~ 01A2:6686
cs=0x1a2;eip=0x006687; 	X(POP(bx));	// 15928                  pop     bx ;~ 01A2:6687
cs=0x1a2;eip=0x006688; 	X(POP(cx));	// 15929                  pop     cx ;~ 01A2:6688
cs=0x1a2;eip=0x006689; 	T(bp = di;);	// 15930                  mov     bp, di ;~ 01A2:6689
cs=0x1a2;eip=0x00668b; 	T(MOV(bx, *(dw*)(raddr(ds,di+8))));	// 15931                  mov     bx, [di+8] ;~ 01A2:668B
cs=0x1a2;eip=0x00668e; 	T(cl = byte_1f846;);	// 15932                  mov     cl, ds:byte_1F846 ;~ 01A2:668E
cs=0x1a2;eip=0x006692; 	X(PUSH(cx));	// 15933                  push    cx ;~ 01A2:6692
cs=0x1a2;eip=0x006693; 	T(MOV(al, *(raddr(ds,bx+4))));	// 15934                  mov     al, [bx+4] ;~ 01A2:6693
cs=0x1a2;eip=0x006696; 	X(byte_1f846 = al;);	// 15935                  mov     ds:byte_1F846, al ;~ 01A2:6696
cs=0x1a2;eip=0x006699; 	T(MOV(cl, *(raddr(ds,si))));	// 15936                  mov     cl, [si] ;~ 01A2:6699
cs=0x1a2;eip=0x00669b; 	T(DEC(cl));	// 15937                  dec     cl ;~ 01A2:669B
cs=0x1a2;eip=0x00669d; 	T(ADD(si, 2));	// 15938                  add     si, 2 ;~ 01A2:669D
loc_166a0:
	// 5381 
cs=0x1a2;eip=0x0066a0; 	T(LODSW);	// 15941                  lodsw ;~ 01A2:66A0
cs=0x1a2;eip=0x0066a1; 	T(AND(ax, 0x0FFFE));	// 15942                  and     ax, 0FFFEh ;~ 01A2:66A1
cs=0x1a2;eip=0x0066a4; 	T(di = ax;);	// 15943                  mov     di, ax ;~ 01A2:66A4
cs=0x1a2;eip=0x0066a6; 	X(PUSH(cx));	// 15944                  push    cx ;~ 01A2:66A6
cs=0x1a2;eip=0x0066a7; 	X(PUSH(si));	// 15945                  push    si ;~ 01A2:66A7
cs=0x1a2;eip=0x0066a8; 	T(MOV(dl, *(raddr(ds,di))));	// 15946                  mov     dl, [di] ;~ 01A2:66A8
cs=0x1a2;eip=0x0066aa; 	T(MOV(dh, *(raddr(ds,di+1))));	// 15947                  mov     dh, [di+1] ;~ 01A2:66AA
cs=0x1a2;eip=0x0066ad; 	T(MOV(ch, *(raddr(ds,di+2))));	// 15948                  mov     ch, [di+2] ;~ 01A2:66AD
cs=0x1a2;eip=0x0066b0; 	T(ADD(dl, *(db*)(&off_1f8c8)));	// 15949                  add     dl, byte ptr ds:off_1F8C8 ;~ 01A2:66B0
cs=0x1a2;eip=0x0066b4; 	T(ADD(dh, *(db*)(((db*)&off_1f8c8)+1)));	// 15950                  add     dh, byte ptr ds:off_1F8C8+1 ;~ 01A2:66B4
cs=0x1a2;eip=0x0066b8; 	T(ADD(ch, byte_1f8c6));	// 15951                  add     ch, ds:byte_1F8C6 ;~ 01A2:66B8
cs=0x1a2;eip=0x0066bc; 	T(MOV(bx, *(dw*)(raddr(ds,di+8))));	// 15952                  mov     bx, [di+8] ;~ 01A2:66BC
cs=0x1a2;eip=0x0066bf; 	T(MOV(es, *(dw*)(raddr(ds,bx+6))));	// 15953                  mov     es, word ptr [bx+6] ;~ 01A2:66BF
cs=0x1a2;eip=0x0066c2; 	T(MOV(si, *(dw*)(raddr(ds,bx+8))));	// 15955                  mov     si, [bx+8] ;~ 01A2:66C2
cs=0x1a2;eip=0x0066c5; 	X(PUSH(di));	// 15956                  push    di ;~ 01A2:66C5
cs=0x1a2;eip=0x0066c6; 	T(XCHG(si, di));	// 15957                  xchg    si, di ;~ 01A2:66C6
cs=0x1a2;eip=0x0066c8; 	J(CALL(sub_11a6f,0));	// 15958                  call    sub_11A6F ;~ 01A2:66C8
cs=0x1a2;eip=0x0066cb; 	T(XCHG(si, di));	// 15959                  xchg    si, di ;~ 01A2:66CB
cs=0x1a2;eip=0x0066cd; 	X(POP(ax));	// 15960                  pop     ax ;~ 01A2:66CD
cs=0x1a2;eip=0x0066ce; 	J(JNZ(loc_166d3));	// 15961                  jnz     short loc_166D3 ;~ 01A2:66CE
cs=0x1a2;eip=0x0066d0; 	J(JMP(loc_167bd));	// 15963                  jmp     loc_167BD ;~ 01A2:66D0
loc_166d3:
	// 5382 
cs=0x1a2;eip=0x0066d3; 	T(CMP(byte_1f8c7, 0));	// 15967                  cmp     ds:byte_1F8C7, 0 ;~ 01A2:66D3
cs=0x1a2;eip=0x0066d8; 	J(JZ(loc_166e2));	// 15968                  jz      short loc_166E2 ;~ 01A2:66D8
cs=0x1a2;eip=0x0066da; 	T(CMP(*(raddr(ds,si)), 0));	// 15970                  cmp     byte ptr [si], 0 ;~ 01A2:66DA
cs=0x1a2;eip=0x0066dd; 	J(JNS(loc_166e2));	// 15971                  jns     short loc_166E2 ;~ 01A2:66DD
cs=0x1a2;eip=0x0066df; 	J(JMP(loc_167ca));	// 15972                  jmp     loc_167CA ;~ 01A2:66DF
loc_166e2:
	// 5383 
cs=0x1a2;eip=0x0066e2; 	T(CMP(*(raddr(ds,si)), 0));	// 15977                  cmp     byte ptr [si], 0 ;~ 01A2:66E2
cs=0x1a2;eip=0x0066e5; 	J(JZ(loc_16706));	// 15978                  jz      short loc_16706 ;~ 01A2:66E5
cs=0x1a2;eip=0x0066e7; 	J(JNS(loc_166eb));	// 15979                  jns     short loc_166EB ;~ 01A2:66E7
cs=0x1a2;eip=0x0066e9; 	J(JMP(loc_166f2));	// 15980                  jmp     short loc_166F2 ;~ 01A2:66E9
loc_166eb:
	// 5384 
cs=0x1a2;eip=0x0066eb; 	X(PUSH(ax));	// 15984                  push    ax ;~ 01A2:66EB
cs=0x1a2;eip=0x0066ec; 	J(CALL(sub_165d2,0));	// 15985                  call    sub_165D2 ;~ 01A2:66EC
cs=0x1a2;eip=0x0066ef; 	X(POP(ax));	// 15986                  pop     ax ;~ 01A2:66EF
cs=0x1a2;eip=0x0066f0; 	J(JNS(loc_16706));	// 15987                  jns     short loc_16706 ;~ 01A2:66F0
loc_166f2:
	// 5385 
cs=0x1a2;eip=0x0066f2; 	X(POP(si));	// 15990                  pop     si ;~ 01A2:66F2
cs=0x1a2;eip=0x0066f3; 	X(PUSH(si));	// 15991                  push    si ;~ 01A2:66F3
cs=0x1a2;eip=0x0066f4; 	T(MOV(ax, *(dw*)(raddr(ds,si-2))));	// 15992                  mov     ax, [si-2] ;~ 01A2:66F4
cs=0x1a2;eip=0x0066f7; 	T(TEST(al, 1));	// 15993                  test    al, 1 ;~ 01A2:66F7
cs=0x1a2;eip=0x0066f9; 	J(JNZ(loc_166fe));	// 15994                  jnz     short loc_166FE ;~ 01A2:66F9
cs=0x1a2;eip=0x0066fb; 	J(JMP(loc_167ca));	// 15995                  jmp     loc_167CA ;~ 01A2:66FB
loc_166fe:
	// 5386 
cs=0x1a2;eip=0x0066fe; 	T(si = bx;);	// 16000                  mov     si, bx ;~ 01A2:66FE
cs=0x1a2;eip=0x006700; 	J(CALL(sub_16bfc,0));	// 16001                  call    sub_16BFC ;~ 01A2:6700
cs=0x1a2;eip=0x006703; 	J(JMP(loc_167bd));	// 16002                  jmp     loc_167BD ;~ 01A2:6703
loc_16706:
	// 5387 
cs=0x1a2;eip=0x006706; 	T(MOV(es, *(dw*)(raddr(ds,bx+6))));	// 16007                  mov     es, word ptr [bx+6] ;~ 01A2:6706
cs=0x1a2;eip=0x006709; 	T(MOV(si, *(dw*)(raddr(ds,bx+8))));	// 16009                  mov     si, [bx+8] ;~ 01A2:6709
cs=0x1a2;eip=0x00670c; 	T(XOR(ah, ah));	// 16010                  xor     ah, ah ;~ 01A2:670C
cs=0x1a2;eip=0x00670e; 	T(MOV(al, *(raddr(es,si+0x0D))));	// 16011                  mov     al, es:[si+0Dh] ;~ 01A2:670E
cs=0x1a2;eip=0x006712; 	X(SUB(word_1f3ce, ax));	// 16012                  sub     ds:word_1F3CE, ax ;~ 01A2:6712
cs=0x1a2;eip=0x006716; 	J(JNS(loc_1671b));	// 16013                  jns     short loc_1671B ;~ 01A2:6716
cs=0x1a2;eip=0x006718; 	J(JMP(loc_167ca));	// 16014                  jmp     loc_167CA ;~ 01A2:6718
loc_1671b:
	// 5388 
cs=0x1a2;eip=0x00671b; 	T(bx = bp;);	// 16018                  mov     bx, bp ;~ 01A2:671B
cs=0x1a2;eip=0x00671d; 	X(PUSH(si));	// 16019                  push    si ;~ 01A2:671D
cs=0x1a2;eip=0x00671e; 	T(si = di;);	// 16020                  mov     si, di ;~ 01A2:671E
cs=0x1a2;eip=0x006720; 	X(PUSH(ax));	// 16021                  push    ax ;~ 01A2:6720
cs=0x1a2;eip=0x006721; 	X(PUSH(dx));	// 16022                  push    dx ;~ 01A2:6721
cs=0x1a2;eip=0x006722; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 16023                  mov     ax, [si+4] ;~ 01A2:6722
cs=0x1a2;eip=0x006725; 	T(MOV(dx, *(dw*)(raddr(ds,bx+4))));	// 16024                  mov     dx, [bx+4] ;~ 01A2:6725
cs=0x1a2;eip=0x006728; 	J(CALL(sub_16441,0));	// 16025                  call    sub_16441 ;~ 01A2:6728
cs=0x1a2;eip=0x00672b; 	X(POP(dx));	// 16026                  pop     dx ;~ 01A2:672B
cs=0x1a2;eip=0x00672c; 	X(POP(ax));	// 16027                  pop     ax ;~ 01A2:672C
cs=0x1a2;eip=0x00672d; 	J(JZ(loc_1674d));	// 16028                  jz      short loc_1674D ;~ 01A2:672D
cs=0x1a2;eip=0x00672f; 	X(PUSH(di));	// 16029                  push    di ;~ 01A2:672F
cs=0x1a2;eip=0x006730; 	X(PUSH(ax));	// 16030                  push    ax ;~ 01A2:6730
cs=0x1a2;eip=0x006731; 	T(di = word_1f1f4;);	// 16031                  mov     di, word_1F1F4 ;~ 01A2:6731
cs=0x1a2;eip=0x006735; 	X(MOV(*(dw*)(raddr(ds,di)), 9));	// 16032                  mov     word ptr [di], 9 ;~ 01A2:6735
cs=0x1a2;eip=0x006739; 	X(MOV(*(dw*)(raddr(ds,di+2)), si));	// 16033                  mov     [di+2], si ;~ 01A2:6739
cs=0x1a2;eip=0x00673c; 	T(MOV(ax, *(dw*)(raddr(ds,bx+4))));	// 16034                  mov     ax, [bx+4] ;~ 01A2:673C
cs=0x1a2;eip=0x00673f; 	X(MOV(*(dw*)(raddr(ds,di+4)), ax));	// 16035                  mov     [di+4], ax ;~ 01A2:673F
cs=0x1a2;eip=0x006742; 	X(ADD(word_1f1f4, 6));	// 16036                  add     word_1F1F4, 6 ;~ 01A2:6742
cs=0x1a2;eip=0x006747; 	X(INC(word_1f396));	// 16037                  inc     ds:word_1F396 ;~ 01A2:6747
cs=0x1a2;eip=0x00674b; 	X(POP(ax));	// 16038                  pop     ax ;~ 01A2:674B
cs=0x1a2;eip=0x00674c; 	X(POP(di));	// 16039                  pop     di ;~ 01A2:674C
loc_1674d:
	// 5389 
cs=0x1a2;eip=0x00674d; 	X(PUSH(ax));	// 16042                  push    ax ;~ 01A2:674D
cs=0x1a2;eip=0x00674e; 	X(PUSH(dx));	// 16043                  push    dx ;~ 01A2:674E
cs=0x1a2;eip=0x00674f; 	T(MOV(ax, *(dw*)(raddr(ds,bx+4))));	// 16044                  mov     ax, [bx+4] ;~ 01A2:674F
cs=0x1a2;eip=0x006752; 	T(MOV(dx, *(dw*)(raddr(ds,si+4))));	// 16045                  mov     dx, [si+4] ;~ 01A2:6752
cs=0x1a2;eip=0x006755; 	J(CALL(sub_16441,0));	// 16046                  call    sub_16441 ;~ 01A2:6755
cs=0x1a2;eip=0x006758; 	X(POP(dx));	// 16047                  pop     dx ;~ 01A2:6758
cs=0x1a2;eip=0x006759; 	X(POP(ax));	// 16048                  pop     ax ;~ 01A2:6759
cs=0x1a2;eip=0x00675a; 	J(JZ(loc_1677a));	// 16049                  jz      short loc_1677A ;~ 01A2:675A
cs=0x1a2;eip=0x00675c; 	X(PUSH(di));	// 16050                  push    di ;~ 01A2:675C
cs=0x1a2;eip=0x00675d; 	X(PUSH(ax));	// 16051                  push    ax ;~ 01A2:675D
cs=0x1a2;eip=0x00675e; 	T(di = word_1f1f4;);	// 16052                  mov     di, word_1F1F4 ;~ 01A2:675E
cs=0x1a2;eip=0x006762; 	X(MOV(*(dw*)(raddr(ds,di)), 9));	// 16053                  mov     word ptr [di], 9 ;~ 01A2:6762
cs=0x1a2;eip=0x006766; 	X(MOV(*(dw*)(raddr(ds,di+2)), bx));	// 16054                  mov     [di+2], bx ;~ 01A2:6766
cs=0x1a2;eip=0x006769; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 16055                  mov     ax, [si+4] ;~ 01A2:6769
cs=0x1a2;eip=0x00676c; 	X(MOV(*(dw*)(raddr(ds,di+4)), ax));	// 16056                  mov     [di+4], ax ;~ 01A2:676C
cs=0x1a2;eip=0x00676f; 	X(ADD(word_1f1f4, 6));	// 16057                  add     word_1F1F4, 6 ;~ 01A2:676F
cs=0x1a2;eip=0x006774; 	X(INC(word_1f396));	// 16058                  inc     ds:word_1F396 ;~ 01A2:6774
cs=0x1a2;eip=0x006778; 	X(POP(ax));	// 16059                  pop     ax ;~ 01A2:6778
cs=0x1a2;eip=0x006779; 	X(POP(di));	// 16060                  pop     di ;~ 01A2:6779
loc_1677a:
	// 5390 
cs=0x1a2;eip=0x00677a; 	X(POP(si));	// 16063                  pop     si ;~ 01A2:677A
cs=0x1a2;eip=0x00677b; 	T(TEST(*(raddr(ds,di+3)), 0x10));	// 16064                  test    byte ptr [di+3], 10h ;~ 01A2:677B
cs=0x1a2;eip=0x00677f; 	J(JZ(loc_16799));	// 16065                  jz      short loc_16799 ;~ 01A2:677F
cs=0x1a2;eip=0x006781; 	T(XOR(bh, bh));	// 16067                  xor     bh, bh ;~ 01A2:6781
cs=0x1a2;eip=0x006783; 	T(MOV(bl, *(raddr(ds,di+0x0D))));	// 16068                  mov     bl, [di+0Dh] ;~ 01A2:6783
cs=0x1a2;eip=0x006786; 	T(TEST(*(raddr(ds,bx+di+0x0D)), 4));	// 16069                  test    byte ptr [bx+di+0Dh], 4 ;~ 01A2:6786
cs=0x1a2;eip=0x00678a; 	J(JZ(loc_16793));	// 16070                  jz      short loc_16793 ;~ 01A2:678A
cs=0x1a2;eip=0x00678c; 	T(CMP(*(raddr(ds,bx+di)), 0));	// 16071                  cmp     byte ptr [bx+di], 0 ;~ 01A2:678C
cs=0x1a2;eip=0x00678f; 	J(JZ(loc_167ca));	// 16072                  jz      short loc_167CA ;~ 01A2:678F
cs=0x1a2;eip=0x006791; 	J(JMP(loc_16799));	// 16073                  jmp     short loc_16799 ;~ 01A2:6791
loc_16793:
	// 5391 
cs=0x1a2;eip=0x006793; 	T(TEST(*(raddr(ds,bx+di+0x0D)), 2));	// 16077                  test    byte ptr [bx+di+0Dh], 2 ;~ 01A2:6793
cs=0x1a2;eip=0x006797; 	J(JNZ(loc_167ca));	// 16078                  jnz     short loc_167CA ;~ 01A2:6797
loc_16799:
	// 5392 
cs=0x1a2;eip=0x006799; 	T(XOR(ch, ch));	// 16082                  xor     ch, ch ;~ 01A2:6799
cs=0x1a2;eip=0x00679b; 	T(si = word_1f1f0;);	// 16083                  mov     si, word_1F1F0 ;~ 01A2:679B
cs=0x1a2;eip=0x00679f; 	T(cl = byte_1f772;);	// 16084                  mov     cl, ds:byte_1F772 ;~ 01A2:679F
cs=0x1a2;eip=0x0067a3; 	T(OR(cl, cl));	// 16085                  or      cl, cl ;~ 01A2:67A3
cs=0x1a2;eip=0x0067a5; 	J(JZ(loc_167ae));	// 16086                  jz      short loc_167AE ;~ 01A2:67A5
loc_167a7:
	// 5393 
cs=0x1a2;eip=0x0067a7; 	T(LODSW);	// 16089                  lodsw ;~ 01A2:67A7
cs=0x1a2;eip=0x0067a8; 	T(CMP(ax, di));	// 16090                  cmp     ax, di ;~ 01A2:67A8
cs=0x1a2;eip=0x0067aa; 	J(JZ(loc_167bd));	// 16091                  jz      short loc_167BD ;~ 01A2:67AA
cs=0x1a2;eip=0x0067ac; 	J(LOOP(loc_167a7));	// 16092                  loop    loc_167A7 ;~ 01A2:67AC
loc_167ae:
	// 5394 
cs=0x1a2;eip=0x0067ae; 	T(si = word_1f1f2;);	// 16095                  mov     si, word_1F1F2 ;~ 01A2:67AE
cs=0x1a2;eip=0x0067b2; 	X(MOV(*(dw*)(raddr(ds,si)), di));	// 16096                  mov     [si], di ;~ 01A2:67B2
cs=0x1a2;eip=0x0067b4; 	X(INC(byte_1f772));	// 16097                  inc     ds:byte_1F772 ;~ 01A2:67B4
cs=0x1a2;eip=0x0067b8; 	X(ADD(word_1f1f2, 2));	// 16098                  add     word_1F1F2, 2 ;~ 01A2:67B8
loc_167bd:
	// 5395 
cs=0x1a2;eip=0x0067bd; 	X(POP(si));	// 16102                  pop     si ;~ 01A2:67BD
cs=0x1a2;eip=0x0067be; 	X(POP(cx));	// 16103                  pop     cx ;~ 01A2:67BE
cs=0x1a2;eip=0x0067bf; 	T(DEC(cl));	// 16104                  dec     cl ;~ 01A2:67BF
cs=0x1a2;eip=0x0067c1; 	J(JS(loc_167c6));	// 16105                  js      short loc_167C6 ;~ 01A2:67C1
cs=0x1a2;eip=0x0067c3; 	J(JMP(loc_166a0));	// 16106                  jmp     loc_166A0 ;~ 01A2:67C3
loc_167c6:
	// 5396 
cs=0x1a2;eip=0x0067c6; 	T(XOR(al, al));	// 16110                  xor     al, al ;~ 01A2:67C6
cs=0x1a2;eip=0x0067c8; 	J(JMP(loc_167ce));	// 16111                  jmp     short loc_167CE ;~ 01A2:67C8
loc_167ca:
	// 5397 
cs=0x1a2;eip=0x0067ca; 	X(POP(si));	// 16116                  pop     si ;~ 01A2:67CA
cs=0x1a2;eip=0x0067cb; 	X(POP(cx));	// 16117                  pop     cx ;~ 01A2:67CB
cs=0x1a2;eip=0x0067cc; 	T(al = 0x0FF;);	// 16118                  mov     al, 0FFh ;~ 01A2:67CC
loc_167ce:
	// 5398 
cs=0x1a2;eip=0x0067ce; 	X(POP(bx));	// 16121                  pop     bx ;~ 01A2:67CE
cs=0x1a2;eip=0x0067cf; 	X(byte_1f846 = bl;);	// 16122                  mov     ds:byte_1F846, bl ;~ 01A2:67CF
cs=0x1a2;eip=0x0067d3; 	T(OR(al, al));	// 16123                  or      al, al ;~ 01A2:67D3
cs=0x1a2;eip=0x0067d5; 	X(POP(ds));	// 16124                  pop     ds ;~ 01A2:67D5
cs=0x1a2;eip=0x0067d6; 	X(POP(es));	// 16125                  pop     es ;~ 01A2:67D6
cs=0x1a2;eip=0x0067d7; 	X(POP(di));	// 16127                  pop     di ;~ 01A2:67D7
cs=0x1a2;eip=0x0067d8; 	X(POP(si));	// 16128                  pop     si ;~ 01A2:67D8
cs=0x1a2;eip=0x0067d9; 	X(POP(bp));	// 16129                  pop     bp ;~ 01A2:67D9
cs=0x1a2;eip=0x0067da; 	X(POP(dx));	// 16130                  pop     dx ;~ 01A2:67DA
cs=0x1a2;eip=0x0067db; 	X(POP(cx));	// 16131                  pop     cx ;~ 01A2:67DB
cs=0x1a2;eip=0x0067dc; 	X(POP(bx));	// 16132                  pop     bx ;~ 01A2:67DC
cs=0x1a2;eip=0x0067dd; 	X(POP(ax));	// 16133                  pop     ax ;~ 01A2:67DD
cs=0x1a2;eip=0x0067de; 	J(RETN(0));	// 16134                  retn ;~ 01A2:67DE

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_165f8: 	goto loc_165f8;
        case m2c::kloc_16601: 	goto loc_16601;
        case m2c::kloc_16610: 	goto loc_16610;
        case m2c::kloc_16646: 	goto loc_16646;
        case m2c::kloc_16673: 	goto loc_16673;
        case m2c::kloc_166a0: 	goto loc_166a0;
        case m2c::kloc_166d3: 	goto loc_166d3;
        case m2c::kloc_166e2: 	goto loc_166e2;
        case m2c::kloc_166eb: 	goto loc_166eb;
        case m2c::kloc_166f2: 	goto loc_166f2;
        case m2c::kloc_166fe: 	goto loc_166fe;
        case m2c::kloc_16706: 	goto loc_16706;
        case m2c::kloc_1671b: 	goto loc_1671b;
        case m2c::kloc_1674d: 	goto loc_1674d;
        case m2c::kloc_1677a: 	goto loc_1677a;
        case m2c::kloc_16793: 	goto loc_16793;
        case m2c::kloc_16799: 	goto loc_16799;
        case m2c::kloc_167a7: 	goto loc_167a7;
        case m2c::kloc_167ae: 	goto loc_167ae;
        case m2c::kloc_167bd: 	goto loc_167bd;
        case m2c::kloc_167c6: 	goto loc_167c6;
        case m2c::kloc_167ca: 	goto loc_167ca;
        case m2c::kloc_167ce: 	goto loc_167ce;
        case m2c::ksub_165d2: 	goto sub_165d2;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_167df(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_167df:
    _begin:
cs=0x1a2;eip=0x0067df; 	X(PUSH(ax));	// 16143                  push    ax ;~ 01A2:67DF
cs=0x1a2;eip=0x0067e0; 	X(PUSH(bx));	// 16144                  push    bx ;~ 01A2:67E0
cs=0x1a2;eip=0x0067e1; 	X(PUSH(cx));	// 16145                  push    cx ;~ 01A2:67E1
cs=0x1a2;eip=0x0067e2; 	X(PUSH(dx));	// 16146                  push    dx ;~ 01A2:67E2
cs=0x1a2;eip=0x0067e3; 	X(PUSH(bp));	// 16147                  push    bp ;~ 01A2:67E3
cs=0x1a2;eip=0x0067e4; 	X(PUSH(si));	// 16148                  push    si ;~ 01A2:67E4
cs=0x1a2;eip=0x0067e5; 	X(PUSH(di));	// 16149                  push    di ;~ 01A2:67E5
cs=0x1a2;eip=0x0067e6; 	X(PUSH(es));	// 16150                  push    es ;~ 01A2:67E6
cs=0x1a2;eip=0x0067e7; 	X(PUSH(ds));	// 16151                  push    ds ;~ 01A2:67E7
cs=0x1a2;eip=0x0067e8; 	X(*(db*)(&off_1f8c8) = dl;);	// 16152                  mov     byte ptr ds:off_1F8C8, dl ;~ 01A2:67E8
cs=0x1a2;eip=0x0067ec; 	X(*(db*)(((db*)&off_1f8c8)+1) = dh;);	// 16153                  mov     byte ptr ds:off_1F8C8+1, dh ;~ 01A2:67EC
cs=0x1a2;eip=0x0067f0; 	X(byte_1f8c6 = ch;);	// 16154                  mov     ds:byte_1F8C6, ch ;~ 01A2:67F0
cs=0x1a2;eip=0x0067f4; 	T(XOR(ch, ch));	// 16155                  xor     ch, ch ;~ 01A2:67F4
cs=0x1a2;eip=0x0067f6; 	T(cl = byte_1f772;);	// 16156                  mov     cl, ds:byte_1F772 ;~ 01A2:67F6
cs=0x1a2;eip=0x0067fa; 	T(si = word_1f1f0;);	// 16157                  mov     si, word_1F1F0 ;~ 01A2:67FA
cs=0x1a2;eip=0x0067fe; 	T(OR(cl, cl));	// 16158                  or      cl, cl ;~ 01A2:67FE
cs=0x1a2;eip=0x006800; 	J(JNZ(loc_16805));	// 16159                  jnz     short loc_16805 ;~ 01A2:6800
cs=0x1a2;eip=0x006802; 	J(JMP(loc_1688c));	// 16160                  jmp     loc_1688C ;~ 01A2:6802
loc_16805:
	// 5399 
cs=0x1a2;eip=0x006805; 	T(LODSW);	// 16165                  lodsw ;~ 01A2:6805
cs=0x1a2;eip=0x006806; 	T(di = ax;);	// 16166                  mov     di, ax ;~ 01A2:6806
cs=0x1a2;eip=0x006808; 	T(MOV(bx, *(dw*)(raddr(ds,di+8))));	// 16167                  mov     bx, [di+8] ;~ 01A2:6808
cs=0x1a2;eip=0x00680b; 	T(TEST(*(raddr(ds,bx+0x12)), 0x40));	// 16168                  test    byte ptr [bx+12h], 40h ;~ 01A2:680B
cs=0x1a2;eip=0x00680f; 	J(JZ(loc_1682c));	// 16169                  jz      short loc_1682C ;~ 01A2:680F
cs=0x1a2;eip=0x006811; 	T(TEST(*(raddr(ds,bx+0x12)), 0x20));	// 16170                  test    byte ptr [bx+12h], 20h ;~ 01A2:6811
cs=0x1a2;eip=0x006815; 	X(PUSHF);	// 16171                  pushf ;~ 01A2:6815
cs=0x1a2;eip=0x006816; 	X(OR(*(raddr(ds,bx+0x12)), 0x20));	// 16172                  or      byte ptr [bx+12h], 20h ;~ 01A2:6816
cs=0x1a2;eip=0x00681a; 	X(POPF);	// 16173                  popf ;~ 01A2:681A
cs=0x1a2;eip=0x00681b; 	T(CMP(word_1f71c, 0));	// 16174                  cmp     ds:word_1F71C, 0 ;~ 01A2:681B
cs=0x1a2;eip=0x006820; 	J(JNZ(loc_1682c));	// 16175                  jnz     short loc_1682C ;~ 01A2:6820
cs=0x1a2;eip=0x006822; 	T(TEST(*(raddr(ds,bx+0x23)), 1));	// 16176                  test    byte ptr [bx+23h], 1 ;~ 01A2:6822
cs=0x1a2;eip=0x006826; 	X(PUSHF);	// 16177                  pushf ;~ 01A2:6826
cs=0x1a2;eip=0x006827; 	X(OR(*(raddr(ds,bx+0x23)), 1));	// 16178                  or      byte ptr [bx+23h], 1 ;~ 01A2:6827
cs=0x1a2;eip=0x00682b; 	X(POPF);	// 16179                  popf ;~ 01A2:682B
loc_1682c:
	// 5400 
cs=0x1a2;eip=0x00682c; 	T(TEST(*(raddr(ds,bx+0x12)), 8));	// 16183                  test    byte ptr [bx+12h], 8 ;~ 01A2:682C
cs=0x1a2;eip=0x006830; 	J(JZ(loc_1683c));	// 16184                  jz      short loc_1683C ;~ 01A2:6830
cs=0x1a2;eip=0x006832; 	T(TEST(*(raddr(ds,bx+0x12)), 0x20));	// 16185                  test    byte ptr [bx+12h], 20h ;~ 01A2:6832
cs=0x1a2;eip=0x006836; 	X(PUSHF);	// 16186                  pushf ;~ 01A2:6836
cs=0x1a2;eip=0x006837; 	X(OR(*(raddr(ds,bx+0x12)), 0x20));	// 16187                  or      byte ptr [bx+12h], 20h ;~ 01A2:6837
cs=0x1a2;eip=0x00683b; 	X(POPF);	// 16188                  popf ;~ 01A2:683B
loc_1683c:
	// 5401 
cs=0x1a2;eip=0x00683c; 	T(al = *(db*)(&off_1f8c8););	// 16191                  mov     al, byte ptr ds:off_1F8C8 ;~ 01A2:683C
cs=0x1a2;eip=0x00683f; 	X(ADD(*(raddr(ds,bx+2)), al));	// 16192                  add     [bx+2], al ;~ 01A2:683F
cs=0x1a2;eip=0x006842; 	X(ADD(*(raddr(ds,bx)), al));	// 16193                  add     [bx], al ;~ 01A2:6842
cs=0x1a2;eip=0x006844; 	X(ADD(*(raddr(ds,di)), al));	// 16194                  add     [di], al ;~ 01A2:6844
cs=0x1a2;eip=0x006846; 	T(al = *(db*)(((db*)&off_1f8c8)+1););	// 16195                  mov     al, byte ptr ds:off_1F8C8+1 ;~ 01A2:6846
cs=0x1a2;eip=0x006849; 	X(ADD(*(raddr(ds,di+1)), al));	// 16196                  add     [di+1], al ;~ 01A2:6849
cs=0x1a2;eip=0x00684c; 	X(ADD(*(raddr(ds,bx+1)), al));	// 16197                  add     [bx+1], al ;~ 01A2:684C
cs=0x1a2;eip=0x00684f; 	X(ADD(*(raddr(ds,bx+3)), al));	// 16198                  add     [bx+3], al ;~ 01A2:684F
cs=0x1a2;eip=0x006852; 	T(al = byte_1f8c6;);	// 16199                  mov     al, ds:byte_1F8C6 ;~ 01A2:6852
cs=0x1a2;eip=0x006855; 	X(ADD(*(raddr(ds,bx+4)), al));	// 16200                  add     [bx+4], al ;~ 01A2:6855
cs=0x1a2;eip=0x006858; 	X(ADD(*(raddr(ds,di+2)), al));	// 16201                  add     [di+2], al ;~ 01A2:6858
cs=0x1a2;eip=0x00685b; 	X(ADD(*(raddr(ds,bx+5)), al));	// 16202                  add     [bx+5], al ;~ 01A2:685B
cs=0x1a2;eip=0x00685e; 	T(CMP(byte_1f8c6, 0));	// 16203                  cmp     ds:byte_1F8C6, 0 ;~ 01A2:685E
cs=0x1a2;eip=0x006863; 	J(JZ(loc_16867));	// 16204                  jz      short loc_16867 ;~ 01A2:6863
cs=0x1a2;eip=0x006865; 	J(JNS(loc_1687e));	// 16205                  jns     short loc_1687E ;~ 01A2:6865
loc_16867:
	// 5402 
cs=0x1a2;eip=0x006867; 	T(CMP(*(raddr(ds,di+2)), 0));	// 16208                  cmp     byte ptr [di+2], 0 ;~ 01A2:6867
cs=0x1a2;eip=0x00686b; 	J(JZ(loc_1687e));	// 16209                  jz      short loc_1687E ;~ 01A2:686B
cs=0x1a2;eip=0x00686d; 	X(PUSH(si));	// 16210                  push    si ;~ 01A2:686D
cs=0x1a2;eip=0x00686e; 	T(si = bx;);	// 16211                  mov     si, bx ;~ 01A2:686E
cs=0x1a2;eip=0x006870; 	J(CALL(sub_16bfc,0));	// 16212                  call    sub_16BFC ;~ 01A2:6870
cs=0x1a2;eip=0x006873; 	X(POP(si));	// 16213                  pop     si ;~ 01A2:6873
cs=0x1a2;eip=0x006874; 	T(TEST(*(raddr(ds,bx+0x12)), 1));	// 16214                  test    byte ptr [bx+12h], 1 ;~ 01A2:6874
cs=0x1a2;eip=0x006878; 	X(PUSHF);	// 16215                  pushf ;~ 01A2:6878
cs=0x1a2;eip=0x006879; 	X(OR(*(raddr(ds,bx+0x12)), 1));	// 16216                  or      byte ptr [bx+12h], 1 ;~ 01A2:6879
cs=0x1a2;eip=0x00687d; 	X(POPF);	// 16217                  popf ;~ 01A2:687D
loc_1687e:
	// 5403 
cs=0x1a2;eip=0x00687e; 	X(PUSH(si));	// 16221                  push    si ;~ 01A2:687E
cs=0x1a2;eip=0x00687f; 	X(PUSH(cx));	// 16222                  push    cx ;~ 01A2:687F
cs=0x1a2;eip=0x006880; 	J(CALL(sub_1530e,0));	// 16223                  call    sub_1530E ;~ 01A2:6880
cs=0x1a2;eip=0x006883; 	X(POP(cx));	// 16224                  pop     cx ;~ 01A2:6883
cs=0x1a2;eip=0x006884; 	X(POP(si));	// 16225                  pop     si ;~ 01A2:6884
cs=0x1a2;eip=0x006885; 	J(LOOP(loc_16889));	// 16226                  loop    loc_16889 ;~ 01A2:6885
cs=0x1a2;eip=0x006887; 	J(JMP(loc_1688c));	// 16228                  jmp     short loc_1688C ;~ 01A2:6887
loc_16889:
	// 5404 
cs=0x1a2;eip=0x006889; 	J(JMP(loc_16805));	// 16232                  jmp     loc_16805 ;~ 01A2:6889
loc_1688c:
	// 5405 
cs=0x1a2;eip=0x00688c; 	X(POP(ds));	// 16237                  pop     ds ;~ 01A2:688C
cs=0x1a2;eip=0x00688d; 	X(POP(es));	// 16238                  pop     es ;~ 01A2:688D
cs=0x1a2;eip=0x00688e; 	X(POP(di));	// 16240                  pop     di ;~ 01A2:688E
cs=0x1a2;eip=0x00688f; 	X(POP(si));	// 16241                  pop     si ;~ 01A2:688F
cs=0x1a2;eip=0x006890; 	X(POP(bp));	// 16242                  pop     bp ;~ 01A2:6890
cs=0x1a2;eip=0x006891; 	X(POP(dx));	// 16243                  pop     dx ;~ 01A2:6891
cs=0x1a2;eip=0x006892; 	X(POP(cx));	// 16244                  pop     cx ;~ 01A2:6892
cs=0x1a2;eip=0x006893; 	X(POP(bx));	// 16245                  pop     bx ;~ 01A2:6893
cs=0x1a2;eip=0x006894; 	X(POP(ax));	// 16246                  pop     ax ;~ 01A2:6894
cs=0x1a2;eip=0x006895; 	J(RETN(0));	// 16247                  retn ;~ 01A2:6895

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_16805: 	goto loc_16805;
        case m2c::kloc_1682c: 	goto loc_1682c;
        case m2c::kloc_1683c: 	goto loc_1683c;
        case m2c::kloc_16867: 	goto loc_16867;
        case m2c::kloc_1687e: 	goto loc_1687e;
        case m2c::kloc_16889: 	goto loc_16889;
        case m2c::kloc_1688c: 	goto loc_1688c;
        case m2c::ksub_167df: 	goto sub_167df;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_16896(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_16896:
    _begin:
cs=0x1a2;eip=0x006896; 	T(dx = word_1f3ea;);	// 16255                  mov     dx, ds:word_1F3EA ;~ 01A2:6896
cs=0x1a2;eip=0x00689a; 	J({;});	// 16256                  jmp     short $+2 ;~ 01A2:689A
loc_1689c:
	// 5406 
cs=0x1a2;eip=0x00689c; 	J(CALL(sub_1407f,0));	// 16261                  call    sub_1407F ;~ 01A2:689C
cs=0x1a2;eip=0x00689f; 	X(word_1f6f0 = dx;);	// 16262                  mov     ds:word_1F6F0, dx ;~ 01A2:689F
cs=0x1a2;eip=0x0068a3; 	T(bx = di;);	// 16263                  mov     bx, di ;~ 01A2:68A3
cs=0x1a2;eip=0x0068a5; 	T(si = di;);	// 16264                  mov     si, di ;~ 01A2:68A5
cs=0x1a2;eip=0x0068a7; 	T(XOR(ah, ah));	// 16265                  xor     ah, ah ;~ 01A2:68A7
cs=0x1a2;eip=0x0068a9; 	T(MOV(al, *(raddr(ds,di+0x0C))));	// 16266                  mov     al, [di+0Ch] ;~ 01A2:68A9
cs=0x1a2;eip=0x0068ac; 	X(word_1f730 = bx;);	// 16267                  mov     ds:word_1F730, bx ;~ 01A2:68AC
cs=0x1a2;eip=0x0068b0; 	T(ADD(bx, ax));	// 16268                  add     bx, ax ;~ 01A2:68B0
cs=0x1a2;eip=0x0068b2; 	T(TEST(*(raddr(ds,bx+3)), 0x80));	// 16269                  test    byte ptr [bx+3], 80h ;~ 01A2:68B2
cs=0x1a2;eip=0x0068b6; 	J(JZ(loc_168bb));	// 16270                  jz      short loc_168BB ;~ 01A2:68B6
cs=0x1a2;eip=0x0068b8; 	J(JMP(loc_16974));	// 16271                  jmp     loc_16974 ;~ 01A2:68B8
loc_168bb:
	// 5407 
cs=0x1a2;eip=0x0068bb; 	T(MOV(dx, *(dw*)(raddr(ds,bx+4))));	// 16275                  mov     dx, [bx+4] ;~ 01A2:68BB
cs=0x1a2;eip=0x0068be; 	T(XCHG(dl, dh));	// 16276                  xchg    dl, dh ;~ 01A2:68BE
cs=0x1a2;eip=0x0068c0; 	X(word_1f6ee = dx;);	// 16277                  mov     ds:word_1F6EE, dx ;~ 01A2:68C0
cs=0x1a2;eip=0x0068c4; 	J(CALL(sub_1407f,0));	// 16278                  call    sub_1407F ;~ 01A2:68C4
cs=0x1a2;eip=0x0068c7; 	T(bp = di;);	// 16279                  mov     bp, di ;~ 01A2:68C7
cs=0x1a2;eip=0x0068c9; 	T(XOR(ah, ah));	// 16280                  xor     ah, ah ;~ 01A2:68C9
cs=0x1a2;eip=0x0068cb; 	T(MOV(al, *(raddr(ds,di+0x0C))));	// 16281                  mov     al, [di+0Ch] ;~ 01A2:68CB
cs=0x1a2;eip=0x0068ce; 	T(ADD(di, ax));	// 16282                  add     di, ax ;~ 01A2:68CE
cs=0x1a2;eip=0x0068d0; 	T(XOR(ah, ah));	// 16283                  xor     ah, ah ;~ 01A2:68D0
cs=0x1a2;eip=0x0068d2; 	T(MOV(al, *(raddr(ds,bx))));	// 16284                  mov     al, [bx] ;~ 01A2:68D2
cs=0x1a2;eip=0x0068d4; 	T(CMP(*(raddr(ds,bx+7)), 0));	// 16285                  cmp     byte ptr [bx+7], 0 ;~ 01A2:68D4
cs=0x1a2;eip=0x0068d8; 	J(JNZ(loc_168dd));	// 16286                  jnz     short loc_168DD ;~ 01A2:68D8
cs=0x1a2;eip=0x0068da; 	J(JMP(loc_1697e));	// 16287                  jmp     loc_1697E ;~ 01A2:68DA
loc_168dd:
	// 5408 
cs=0x1a2;eip=0x0068dd; 	X(PUSH(ax));	// 16291                  push    ax ;~ 01A2:68DD
cs=0x1a2;eip=0x0068de; 	X(PUSH(ax));	// 16292                  push    ax ;~ 01A2:68DE
cs=0x1a2;eip=0x0068df; 	T(ax = 6;);	// 16293                  mov     ax, 6 ;~ 01A2:68DF
cs=0x1a2;eip=0x0068e2; 	J(CALL(sub_1156c,0));	// 16294                  call    sub_1156C ;~ 01A2:68E2
cs=0x1a2;eip=0x0068e5; 	X(POP(ax));	// 16295                  pop     ax ;~ 01A2:68E5
cs=0x1a2;eip=0x0068e6; 	X(POP(ax));	// 16296                  pop     ax ;~ 01A2:68E6
cs=0x1a2;eip=0x0068e7; 	T(CMP(*(raddr(ds,bx+7)), 2));	// 16297                  cmp     byte ptr [bx+7], 2 ;~ 01A2:68E7
cs=0x1a2;eip=0x0068eb; 	J(JNZ(loc_168f0));	// 16298                  jnz     short loc_168F0 ;~ 01A2:68EB
cs=0x1a2;eip=0x0068ed; 	J(JMP(loc_169ab));	// 16299                  jmp     loc_169AB ;~ 01A2:68ED
loc_168f0:
	// 5409 
cs=0x1a2;eip=0x0068f0; 	T(dx = word_1f1ce;);	// 16303                  mov     dx, word_1F1CE ;~ 01A2:68F0
cs=0x1a2;eip=0x0068f4; 	X(PUSH(si));	// 16304                  push    si ;~ 01A2:68F4
cs=0x1a2;eip=0x0068f5; 	T(si = word_1f1f4;);	// 16305                  mov     si, word_1F1F4 ;~ 01A2:68F5
cs=0x1a2;eip=0x0068f9; 	X(MOV(*(dw*)(raddr(ds,si)), 0x4018));	// 16306                  mov     word ptr [si], 4018h ;~ 01A2:68F9
cs=0x1a2;eip=0x0068fd; 	T(ADD(si, 2));	// 16307                  add     si, 2 ;~ 01A2:68FD
cs=0x1a2;eip=0x006900; 	X(MOV(*(dw*)(raddr(ds,si)), dx));	// 16308                  mov     [si], dx ;~ 01A2:6900
cs=0x1a2;eip=0x006902; 	T(ADD(si, 2));	// 16309                  add     si, 2 ;~ 01A2:6902
cs=0x1a2;eip=0x006905; 	X(MOV(*(dw*)(raddr(ds,si)), ax));	// 16310                  mov     [si], ax ;~ 01A2:6905
cs=0x1a2;eip=0x006907; 	T(ADD(si, 2));	// 16311                  add     si, 2 ;~ 01A2:6907
cs=0x1a2;eip=0x00690a; 	X(word_1f1f4 = si;);	// 16312                  mov     word_1F1F4, si ;~ 01A2:690A
cs=0x1a2;eip=0x00690e; 	X(INC(word_1f396));	// 16313                  inc     ds:word_1F396 ;~ 01A2:690E
cs=0x1a2;eip=0x006912; 	X(POP(si));	// 16314                  pop     si ;~ 01A2:6912
cs=0x1a2;eip=0x006913; 	J(CALL(sub_134bf,0));	// 16315                  call    sub_134BF ;~ 01A2:6913
cs=0x1a2;eip=0x006916; 	X(byte_1f76c = 1;);	// 16316                  mov     ds:byte_1F76C, 1 ;~ 01A2:6916
loc_1691b:
	// 5410 
cs=0x1a2;eip=0x00691b; 	X(word_1f732 = es;);	// 16319                  mov     ds:word_1F732, es ;~ 01A2:691B
cs=0x1a2;eip=0x00691f; 	X(word_1f734 = dx;);	// 16320                  mov     ds:word_1F734, dx ;~ 01A2:691F
cs=0x1a2;eip=0x006923; 	T(dx = si;);	// 16321                  mov     dx, si ;~ 01A2:6923
cs=0x1a2;eip=0x006925; 	X(word_1f730 = si;);	// 16322                  mov     ds:word_1F730, si ;~ 01A2:6925
cs=0x1a2;eip=0x006929; 	X(PUSH(si));	// 16323                  push    si ;~ 01A2:6929
cs=0x1a2;eip=0x00692a; 	T(si = word_1f1f4;);	// 16324                  mov     si, word_1F1F4 ;~ 01A2:692A
cs=0x1a2;eip=0x00692e; 	X(MOV(*(dw*)(raddr(ds,si)), 0x19));	// 16325                  mov     word ptr [si], 19h ;~ 01A2:692E
cs=0x1a2;eip=0x006932; 	T(ADD(si, 2));	// 16326                  add     si, 2 ;~ 01A2:6932
cs=0x1a2;eip=0x006935; 	X(MOV(*(dw*)(raddr(ds,si)), dx));	// 16327                  mov     [si], dx ;~ 01A2:6935
cs=0x1a2;eip=0x006937; 	T(ADD(si, 2));	// 16328                  add     si, 2 ;~ 01A2:6937
cs=0x1a2;eip=0x00693a; 	T(ADD(si, 2));	// 16329                  add     si, 2 ;~ 01A2:693A
cs=0x1a2;eip=0x00693d; 	X(word_1f1f4 = si;);	// 16330                  mov     word_1F1F4, si ;~ 01A2:693D
cs=0x1a2;eip=0x006941; 	X(INC(word_1f396));	// 16331                  inc     ds:word_1F396 ;~ 01A2:6941
cs=0x1a2;eip=0x006945; 	X(POP(si));	// 16332                  pop     si ;~ 01A2:6945
cs=0x1a2;eip=0x006946; 	X(word_1f72c = bp;);	// 16333                  mov     ds:word_1F72C, bp ;~ 01A2:6946
cs=0x1a2;eip=0x00694a; 	X(word_1f72e = bx;);	// 16334                  mov     ds:word_1F72E, bx ;~ 01A2:694A
cs=0x1a2;eip=0x00694e; 	T(di = *(dw*)(&off_1f88a););	// 16335                  mov     di, word ptr ds:off_1F88A ;~ 01A2:694E
cs=0x1a2;eip=0x006952; 	X(PUSH(es));	// 16336                  push    es ;~ 01A2:6952
cs=0x1a2;eip=0x006953; 	T(es = *(dw*)(((db*)&off_1f88a)+2););	// 16337                  mov     es, word ptr ds:off_1F88A+2 ;~ 01A2:6953
cs=0x1a2;eip=0x006957; 	T(MOV(di, *(dw*)(raddr(es,di+4))));	// 16338                  mov     di, es:[di+4] ;~ 01A2:6957
cs=0x1a2;eip=0x00695b; 	T(dx = 2;);	// 16339                  mov     dx, 2 ;~ 01A2:695B
cs=0x1a2;eip=0x00695e; 	T(MUL1_2(dx));	// 16340                  mul     dx ;~ 01A2:695E
cs=0x1a2;eip=0x006960; 	X(PUSH(bx));	// 16341                  push    bx ;~ 01A2:6960
cs=0x1a2;eip=0x006961; 	T(bx = ax;);	// 16342                  mov     bx, ax ;~ 01A2:6961
cs=0x1a2;eip=0x006963; 	T(MOV(di, *(dw*)(raddr(es,bx+di))));	// 16343                  mov     di, es:[bx+di] ;~ 01A2:6963
cs=0x1a2;eip=0x006966; 	X(POP(bx));	// 16344                  pop     bx ;~ 01A2:6966
cs=0x1a2;eip=0x006967; 	X(POP(es));	// 16345                  pop     es ;~ 01A2:6967
cs=0x1a2;eip=0x006968; 	X(PUSH(bx));	// 16346                  push    bx ;~ 01A2:6968
cs=0x1a2;eip=0x006969; 	X(word_1f8fc = di;);	// 16347                  mov     ds:word_1F8FC, di ;~ 01A2:6969
cs=0x1a2;eip=0x00696d; 	J(CALL(__dispatch_call,off_1f8f8));	// 16348                  call    ds:off_1F8F8 ;~ 01A2:696D
cs=0x1a2;eip=0x006971; 	X(POP(bx));	// 16349                  pop     bx ;~ 01A2:6971
cs=0x1a2;eip=0x006972; 	J(JMP(loc_169a1));	// 16350                  jmp     short loc_169A1 ;~ 01A2:6972
loc_16974:
	// 5411 
cs=0x1a2;eip=0x006974; 	X(word_1f70a = 0x25;);	// 16354                  mov     ds:word_1F70A, 25h ; '%' ;~ 01A2:6974
cs=0x1a2;eip=0x00697a; 	J(CALL(sub_15c9c,0));	// 16355                  call    sub_15C9C ;~ 01A2:697A
cs=0x1a2;eip=0x00697d; 	J(RETN(0));	// 16356                  retn ;~ 01A2:697D
loc_1697e:
	// 5412 
cs=0x1a2;eip=0x00697e; 	X(PUSH(ax));	// 16360                  push    ax ;~ 01A2:697E
cs=0x1a2;eip=0x00697f; 	X(PUSH(ax));	// 16361                  push    ax ;~ 01A2:697F
cs=0x1a2;eip=0x006980; 	T(ax = 0x11;);	// 16362                  mov     ax, 11h ;~ 01A2:6980
cs=0x1a2;eip=0x006983; 	J(CALL(sub_1156c,0));	// 16363                  call    sub_1156C ;~ 01A2:6983
cs=0x1a2;eip=0x006986; 	X(POP(ax));	// 16364                  pop     ax ;~ 01A2:6986
cs=0x1a2;eip=0x006987; 	X(POP(ax));	// 16365                  pop     ax ;~ 01A2:6987
cs=0x1a2;eip=0x006988; 	T(OR(al, 0x80));	// 16366                  or      al, 80h ;~ 01A2:6988
cs=0x1a2;eip=0x00698a; 	X(MOV(*(raddr(ds,di)), al));	// 16367                  mov     [di], al ;~ 01A2:698A
cs=0x1a2;eip=0x00698c; 	T(MOV(al, *(raddr(ds,bx+1))));	// 16368                  mov     al, [bx+1] ;~ 01A2:698C
cs=0x1a2;eip=0x00698f; 	X(MOV(*(raddr(ds,di+1)), al));	// 16369                  mov     [di+1], al ;~ 01A2:698F
cs=0x1a2;eip=0x006992; 	T(MOV(al, *(raddr(ds,bx+8))));	// 16370                  mov     al, [bx+8] ;~ 01A2:6992
cs=0x1a2;eip=0x006995; 	X(MOV(*(raddr(ds,di+5)), al));	// 16371                  mov     [di+5], al ;~ 01A2:6995
cs=0x1a2;eip=0x006998; 	X(PUSH(bx));	// 16372                  push    bx ;~ 01A2:6998
cs=0x1a2;eip=0x006999; 	T(bx = di;);	// 16373                  mov     bx, di ;~ 01A2:6999
cs=0x1a2;eip=0x00699b; 	T(di = bp;);	// 16374                  mov     di, bp ;~ 01A2:699B
cs=0x1a2;eip=0x00699d; 	J(CALL(seg000_6a37_proc,m2c::kloc_16a37));	// 16375                  call    loc_16A37 ;~ 01A2:699D
cs=0x1a2;eip=0x0069a0; 	X(POP(bx));	// 16376                  pop     bx ;~ 01A2:69A0
loc_169a1:
	// 5413 
cs=0x1a2;eip=0x0069a1; 	T(MOV(al, *(raddr(ds,bx+6))));	// 16379                  mov     al, [bx+6] ;~ 01A2:69A1
cs=0x1a2;eip=0x0069a4; 	X(byte_1f799 = al;);	// 16380                  mov     ds:byte_1F799, al ;~ 01A2:69A4
cs=0x1a2;eip=0x0069a7; 	J(CALL(seg000_6a37_proc,m2c::kloc_16ac9));	// 16381                  call    loc_16AC9 ;~ 01A2:69A7
cs=0x1a2;eip=0x0069aa; 	J(RETN(0));	// 16382                  retn ;~ 01A2:69AA
loc_169ab:
	// 5414 
cs=0x1a2;eip=0x0069ab; 	T(CMP(byte_1f818, 0));	// 16386                  cmp     ds:byte_1F818, 0 ;~ 01A2:69AB
cs=0x1a2;eip=0x0069b0; 	J(JZ(loc_169c5));	// 16387                  jz      short loc_169C5 ;~ 01A2:69B0
cs=0x1a2;eip=0x0069b2; 	T(dx = *(dw*)(&unk_1f24e););	// 16388                  mov     dx, word ptr unk_1F24E ;~ 01A2:69B2
cs=0x1a2;eip=0x0069b6; 	T(es = *(dw*)(&unk_1f24c););	// 16389                  mov     es, word ptr unk_1F24C ;~ 01A2:69B6
cs=0x1a2;eip=0x0069ba; 	T(bp = *(dw*)(&unk_1f24a););	// 16390                  mov     bp, word ptr unk_1F24A ;~ 01A2:69BA
cs=0x1a2;eip=0x0069be; 	T(si = *(dw*)(&unk_1f250););	// 16391                  mov     si, word ptr unk_1F250 ;~ 01A2:69BE
cs=0x1a2;eip=0x0069c2; 	J(JMP(loc_1691b));	// 16392                  jmp     loc_1691B ;~ 01A2:69C2
loc_169c5:
	// 5415 
cs=0x1a2;eip=0x0069c5; 	X(word_1f70a = 0x29;);	// 16396                  mov     ds:word_1F70A, 29h ; ')' ;~ 01A2:69C5
cs=0x1a2;eip=0x0069cb; 	J(CALL(sub_15c9c,0));	// 16397                  call    sub_15C9C ;~ 01A2:69CB
cs=0x1a2;eip=0x0069ce; 	J(RETN(0));	// 16398                  retn ;~ 01A2:69CE

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1689c: 	goto loc_1689c;
        case m2c::kloc_168bb: 	goto loc_168bb;
        case m2c::kloc_168dd: 	goto loc_168dd;
        case m2c::kloc_168f0: 	goto loc_168f0;
        case m2c::kloc_1691b: 	goto loc_1691b;
        case m2c::kloc_16974: 	goto loc_16974;
        case m2c::kloc_1697e: 	goto loc_1697e;
        case m2c::kloc_169a1: 	goto loc_169a1;
        case m2c::kloc_169ab: 	goto loc_169ab;
        case m2c::kloc_169c5: 	goto loc_169c5;
        case m2c::ksub_16896: 	goto sub_16896;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_169cf(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_169cf:
    _begin:
cs=0x1a2;eip=0x0069cf; 	T(dx = word_1f3ea;);	// 16406                  mov     dx, ds:word_1F3EA ;~ 01A2:69CF
cs=0x1a2;eip=0x0069d3; 	J(CALL(sub_1407f,0));	// 16407                  call    sub_1407F ;~ 01A2:69D3
cs=0x1a2;eip=0x0069d6; 	T(XOR(ah, ah));	// 16408                  xor     ah, ah ;~ 01A2:69D6
cs=0x1a2;eip=0x0069d8; 	T(MOV(al, *(raddr(ds,di+0x0C))));	// 16409                  mov     al, [di+0Ch] ;~ 01A2:69D8
cs=0x1a2;eip=0x0069db; 	T(si = di;);	// 16410                  mov     si, di ;~ 01A2:69DB
cs=0x1a2;eip=0x0069dd; 	T(ADD(si, ax));	// 16411                  add     si, ax ;~ 01A2:69DD
cs=0x1a2;eip=0x0069df; 	T(bx = si;);	// 16412                  mov     bx, si ;~ 01A2:69DF
cs=0x1a2;eip=0x0069e1; 	T(MOV(al, *(raddr(ds,si+3))));	// 16413                  mov     al, [si+3] ;~ 01A2:69E1
cs=0x1a2;eip=0x0069e4; 	X(byte_1f799 = al;);	// 16414                  mov     ds:byte_1F799, al ;~ 01A2:69E4
cs=0x1a2;eip=0x0069e7; 	T(MOV(dx, *(dw*)(raddr(ds,si))));	// 16415                  mov     dx, [si] ;~ 01A2:69E7
cs=0x1a2;eip=0x0069e9; 	T(XCHG(dl, dh));	// 16416                  xchg    dl, dh ;~ 01A2:69E9
cs=0x1a2;eip=0x0069eb; 	T(CMP(*(raddr(ds,si+2)), 0));	// 16417                  cmp     byte ptr [si+2], 0 ;~ 01A2:69EB
cs=0x1a2;eip=0x0069ef; 	X(PUSH(di));	// 16418                  push    di ;~ 01A2:69EF
cs=0x1a2;eip=0x0069f0; 	J(JZ(loc_169fe));	// 16419                  jz      short loc_169FE ;~ 01A2:69F0
cs=0x1a2;eip=0x0069f2; 	X(PUSH(dx));	// 16420                  push    dx ;~ 01A2:69F2
cs=0x1a2;eip=0x0069f3; 	J(CALL(seg000_86b1_proc,m2c::kloc_186cb));	// 16421                  call    loc_186CB ;~ 01A2:69F3
cs=0x1a2;eip=0x0069f6; 	X(POP(dx));	// 16422                  pop     dx ;~ 01A2:69F6
cs=0x1a2;eip=0x0069f7; 	J(JNZ(loc_169fc));	// 16423                  jnz     short loc_169FC ;~ 01A2:69F7
cs=0x1a2;eip=0x0069f9; 	J(return seg000_6a37_proc(m2c::kloc_16abe, _state););	// 16424                  jmp     loc_16ABE ;~ 01A2:69F9
loc_169fc:
	// 5416 
cs=0x1a2;eip=0x0069fc; 	T(MOV(dx, *(dw*)(raddr(ds,di))));	// 16428                  mov     dx, [di] ;~ 01A2:69FC
loc_169fe:
	// 5417 
cs=0x1a2;eip=0x0069fe; 	X(PUSH(bx));	// 16431                  push    bx ;~ 01A2:69FE
cs=0x1a2;eip=0x0069ff; 	X(word_1f6f0 = dx;);	// 16432                  mov     ds:word_1F6F0, dx ;~ 01A2:69FF
cs=0x1a2;eip=0x006a03; 	X(word_1f6ee = dx;);	// 16433                  mov     ds:word_1F6EE, dx ;~ 01A2:6A03
cs=0x1a2;eip=0x006a07; 	J(CALL(sub_1407f,0));	// 16434                  call    sub_1407F ;~ 01A2:6A07
cs=0x1a2;eip=0x006a0a; 	X(PUSH(ax));	// 16435                  push    ax ;~ 01A2:6A0A
cs=0x1a2;eip=0x006a0b; 	T(ax = 0x14;);	// 16436                  mov     ax, 14h ;~ 01A2:6A0B
cs=0x1a2;eip=0x006a0e; 	J(CALL(sub_1156c,0));	// 16437                  call    sub_1156C ;~ 01A2:6A0E
cs=0x1a2;eip=0x006a11; 	X(POP(ax));	// 16438                  pop     ax ;~ 01A2:6A11
cs=0x1a2;eip=0x006a12; 	T(bx = di;);	// 16439                  mov     bx, di ;~ 01A2:6A12
cs=0x1a2;eip=0x006a14; 	T(bp = di;);	// 16440                  mov     bp, di ;~ 01A2:6A14
cs=0x1a2;eip=0x006a16; 	T(XOR(ah, ah));	// 16441                  xor     ah, ah ;~ 01A2:6A16
cs=0x1a2;eip=0x006a18; 	T(MOV(al, *(raddr(ds,di+0x0C))));	// 16442                  mov     al, [di+0Ch] ;~ 01A2:6A18
cs=0x1a2;eip=0x006a1b; 	T(ADD(bx, ax));	// 16443                  add     bx, ax ;~ 01A2:6A1B
cs=0x1a2;eip=0x006a1d; 	J(CALL(seg000_6a37_proc,m2c::kloc_16a37));	// 16444                  call    loc_16A37 ;~ 01A2:6A1D
cs=0x1a2;eip=0x006a20; 	J(CALL(seg000_6a37_proc,m2c::kloc_16ac9));	// 16446                  call    loc_16AC9 ;~ 01A2:6A20
cs=0x1a2;eip=0x006a23; 	X(POP(bx));	// 16447                  pop     bx ;~ 01A2:6A23
cs=0x1a2;eip=0x006a24; 	X(POP(di));	// 16448                  pop     di ;~ 01A2:6A24
cs=0x1a2;eip=0x006a25; 	J(JNZ(locret_16a36));	// 16449                  jnz     short locret_16A36 ;~ 01A2:6A25
cs=0x1a2;eip=0x006a27; 	T(TEST(*(raddr(ds,bx+4)), 1));	// 16450                  test    byte ptr [bx+4], 1 ;~ 01A2:6A27
cs=0x1a2;eip=0x006a2b; 	J(JZ(locret_16a36));	// 16451                  jz      short locret_16A36 ;~ 01A2:6A2B
cs=0x1a2;eip=0x006a2d; 	T(MOV(dx, *(dw*)(raddr(ds,di+4))));	// 16452                  mov     dx, [di+4] ;~ 01A2:6A2D
cs=0x1a2;eip=0x006a30; 	J(CALL(sub_13efd,0));	// 16453                  call    sub_13EFD ;~ 01A2:6A30
cs=0x1a2;eip=0x006a33; 	J(CALL(sub_162a9,0));	// 16454                  call    sub_162A9 ;~ 01A2:6A33
locret_16a36:
	// 5418 
cs=0x1a2;eip=0x006a36; 	J(RETN(0));	// 16458                  retn ;~ 01A2:6A36

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_169fc: 	goto loc_169fc;
        case m2c::kloc_169fe: 	goto loc_169fe;
        case m2c::klocret_16a36: 	goto locret_16a36;
        case m2c::ksub_169cf: 	goto sub_169cf;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_6a37_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_6a37_proc:
    _begin:
loc_16a37:
	// 5419 
cs=0x1a2;eip=0x006a37; 	T(ax = word_1f1cc;);	// 16465                  mov     ax, word_1F1CC ;~ 01A2:6A37
cs=0x1a2;eip=0x006a3a; 	X(word_1f20c = ax;);	// 16466                  mov     word_1F20C, ax ;~ 01A2:6A3A
cs=0x1a2;eip=0x006a3d; 	T(cl = byte_1f773;);	// 16467                  mov     cl, ds:byte_1F773 ;~ 01A2:6A3D
cs=0x1a2;eip=0x006a41; 	T(AND(cx, 0x0F));	// 16468                  and     cx, 0Fh ;~ 01A2:6A41
cs=0x1a2;eip=0x006a44; 	X(byte_1f842 = cl;);	// 16469                  mov     ds:byte_1F842, cl ;~ 01A2:6A44
cs=0x1a2;eip=0x006a48; 	T(CMP(*(raddr(ds,bx+4)), 0));	// 16470                  cmp     byte ptr [bx+4], 0 ;~ 01A2:6A48
cs=0x1a2;eip=0x006a4c; 	J(JNZ(loc_16a67));	// 16471                  jnz     short loc_16A67 ;~ 01A2:6A4C
cs=0x1a2;eip=0x006a4e; 	T(XOR(ah, ah));	// 16472                  xor     ah, ah ;~ 01A2:6A4E
cs=0x1a2;eip=0x006a50; 	T(MOV(al, *(raddr(ds,di+0x0D))));	// 16473                  mov     al, [di+0Dh] ;~ 01A2:6A50
cs=0x1a2;eip=0x006a53; 	T(ADD(di, ax));	// 16474                  add     di, ax ;~ 01A2:6A53
cs=0x1a2;eip=0x006a55; 	T(al = byte_1f842;);	// 16475                  mov     al, ds:byte_1F842 ;~ 01A2:6A55
cs=0x1a2;eip=0x006a58; 	T(SHL(al, 1));	// 16476                  shl     al, 1 ;~ 01A2:6A58
cs=0x1a2;eip=0x006a5a; 	T(si = 0x0FE1F;);	// 16477                  mov     si, 0FE1Fh ;~ 01A2:6A5A
cs=0x1a2;eip=0x006a5d; 	T(ADD(si, ax));	// 16478                  add     si, ax ;~ 01A2:6A5D
cs=0x1a2;eip=0x006a5f; 	T(LODSB);	// 16479                  lodsb ;~ 01A2:6A5F
cs=0x1a2;eip=0x006a60; 	X(MOV(*(raddr(ds,di+3)), al));	// 16480                  mov     [di+3], al ;~ 01A2:6A60
cs=0x1a2;eip=0x006a63; 	T(LODSB);	// 16481                  lodsb ;~ 01A2:6A63
cs=0x1a2;eip=0x006a64; 	X(MOV(*(raddr(ds,di+4)), al));	// 16482                  mov     [di+4], al ;~ 01A2:6A64
loc_16a67:
	// 5420 
cs=0x1a2;eip=0x006a67; 	T(MOV(al, *(raddr(ds,bx+3))));	// 16485                  mov     al, [bx+3] ;~ 01A2:6A67
cs=0x1a2;eip=0x006a6a; 	T(OR(al, al));	// 16486                  or      al, al ;~ 01A2:6A6A
cs=0x1a2;eip=0x006a6c; 	J(JZ(loc_16a9b));	// 16487                  jz      short loc_16A9B ;~ 01A2:6A6C
cs=0x1a2;eip=0x006a6f; 	T(STD);	// 16491                  std ;~ 01A2:6A6F
cs=0x1a2;eip=0x006a70; 	T(XOR(dh, dh));	// 16492                  xor     dh, dh ;~ 01A2:6A70
cs=0x1a2;eip=0x006a72; 	T(MOV(dl, *(raddr(ds,di+0x0E))));	// 16493                  mov     dl, [di+0Eh] ;~ 01A2:6A72
cs=0x1a2;eip=0x006a75; 	T(ADD(di, dx));	// 16494                  add     di, dx ;~ 01A2:6A75
cs=0x1a2;eip=0x006a77; 	T(si = 0x0FE14;);	// 16495                  mov     si, 0FE14h ;~ 01A2:6A77
cs=0x1a2;eip=0x006a7a; 	T(ADD(si, cx));	// 16496                  add     si, cx ;~ 01A2:6A7A
cs=0x1a2;eip=0x006a7c; 	T(CMP(al, 1));	// 16497                  cmp     al, 1 ;~ 01A2:6A7C
cs=0x1a2;eip=0x006a7e; 	J(JZ(loc_16a96));	// 16498                  jz      short loc_16A96 ;~ 01A2:6A7E
cs=0x1a2;eip=0x006a80; 	T(CMP(*(raddr(ds,bx+6)), 1));	// 16499                  cmp     byte ptr [bx+6], 1 ;~ 01A2:6A80
cs=0x1a2;eip=0x006a84; 	J(JNZ(loc_16a8a));	// 16500                  jnz     short loc_16A8A ;~ 01A2:6A84
cs=0x1a2;eip=0x006a86; 	T(XOR(dx, dx));	// 16501                  xor     dx, dx ;~ 01A2:6A86
cs=0x1a2;eip=0x006a88; 	J(JMP(loc_16a91));	// 16502                  jmp     short loc_16A91 ;~ 01A2:6A88
loc_16a8a:
	// 5421 
cs=0x1a2;eip=0x006a8a; 	T(INC(ax));	// 16506                  inc     ax ;~ 01A2:6A8A
cs=0x1a2;eip=0x006a8b; 	T(MOV(dl, *(raddr(ds,si))));	// 16507                  mov     dl, [si] ;~ 01A2:6A8B
cs=0x1a2;eip=0x006a8d; 	T(MUL1_2(dx));	// 16508                  mul     dx ;~ 01A2:6A8D
cs=0x1a2;eip=0x006a8f; 	T(dx = ax;);	// 16509                  mov     dx, ax ;~ 01A2:6A8F
loc_16a91:
	// 5422 
cs=0x1a2;eip=0x006a91; 	X(MOV(*(dw*)(raddr(ds,di+3)), dx));	// 16512                  mov     [di+3], dx ;~ 01A2:6A91
cs=0x1a2;eip=0x006a94; 	J(JMP(loc_16a9b));	// 16513                  jmp     short loc_16A9B ;~ 01A2:6A94
loc_16a96:
	// 5423 
cs=0x1a2;eip=0x006a96; 	T(MOV(al, *(raddr(ds,si))));	// 16517                  mov     al, [si] ;~ 01A2:6A96
cs=0x1a2;eip=0x006a98; 	X(MOV(*(raddr(ds,di+1)), al));	// 16518                  mov     [di+1], al ;~ 01A2:6A98
loc_16a9b:
	// 5424 
cs=0x1a2;eip=0x006a9b; 	X(PUSH(bx));	// 16521                  push    bx ;~ 01A2:6A9B
cs=0x1a2;eip=0x006a9c; 	X(PUSH(di));	// 16522                  push    di ;~ 01A2:6A9C
cs=0x1a2;eip=0x006a9d; 	X(PUSH(bp));	// 16523                  push    bp ;~ 01A2:6A9D
cs=0x1a2;eip=0x006a9e; 	T(di = 0x0FE0E;);	// 16524                  mov     di, 0FE0Eh ;~ 01A2:6A9E
cs=0x1a2;eip=0x006aa1; 	T(es = seg_1f8f4;);	// 16525                  mov     es, ds:seg_1F8F4 ;~ 01A2:6AA1
cs=0x1a2;eip=0x006aa5; 	T(ax = 0x0FFFF;);	// 16527                  mov     ax, 0FFFFh ;~ 01A2:6AA5
cs=0x1a2;eip=0x006aa8; 	X(STOSW);	// 16528                  stosw ;~ 01A2:6AA8
cs=0x1a2;eip=0x006aa9; 	T(ax = word_1f6ee;);	// 16529                  mov     ax, ds:word_1F6EE ;~ 01A2:6AA9
cs=0x1a2;eip=0x006aac; 	T(XCHG(al, ah));	// 16530                  xchg    al, ah ;~ 01A2:6AAC
cs=0x1a2;eip=0x006aae; 	X(STOSW);	// 16531                  stosw ;~ 01A2:6AAE
cs=0x1a2;eip=0x006aaf; 	T(al = byte_1f842;);	// 16532                  mov     al, ds:byte_1F842 ;~ 01A2:6AAF
cs=0x1a2;eip=0x006ab2; 	X(MOV(*(raddr(ds,di)), al));	// 16533                  mov     [di], al ;~ 01A2:6AB2
cs=0x1a2;eip=0x006ab4; 	T(si = 0x0FE0E;);	// 16534                  mov     si, 0FE0Eh ;~ 01A2:6AB4
cs=0x1a2;eip=0x006ab7; 	J(CALL(seg000_7d39_proc,m2c::kloc_17e1c));	// 16535                  call    loc_17E1C ;~ 01A2:6AB7
cs=0x1a2;eip=0x006aba; 	X(POP(bp));	// 16536                  pop     bp ;~ 01A2:6ABA
cs=0x1a2;eip=0x006abb; 	X(POP(di));	// 16537                  pop     di ;~ 01A2:6ABB
cs=0x1a2;eip=0x006abc; 	X(POP(bx));	// 16538                  pop     bx ;~ 01A2:6ABC
cs=0x1a2;eip=0x006abd; 	J(RETN(0));	// 16539                  retn ;~ 01A2:6ABD
loc_16abe:
	// 5425 
cs=0x1a2;eip=0x006abe; 	X(POP(di));	// 16543                  pop     di ;~ 01A2:6ABE
cs=0x1a2;eip=0x006abf; 	X(word_1f70a = 0x0E;);	// 16544                  mov     ds:word_1F70A, 0Eh ;~ 01A2:6ABF
cs=0x1a2;eip=0x006ac5; 	J(CALL(sub_15c9c,0));	// 16545                  call    sub_15C9C ;~ 01A2:6AC5
cs=0x1a2;eip=0x006ac8; 	J(RETN(0));	// 16546                  retn ;~ 01A2:6AC8
loc_16ac9:
	// 5426 
cs=0x1a2;eip=0x006ac9; 	T(CMP(*(raddr(ds,bx+2)), 0x0FF));	// 16550                  cmp     byte ptr [bx+2], 0FFh ;~ 01A2:6AC9
cs=0x1a2;eip=0x006acd; 	J(JZ(locret_16b01));	// 16551                  jz      short locret_16B01 ;~ 01A2:6ACD
cs=0x1a2;eip=0x006acf; 	X(DEC(*(raddr(ds,bx+2))));	// 16552                  dec     byte ptr [bx+2] ;~ 01A2:6ACF
cs=0x1a2;eip=0x006ad2; 	J(JNZ(locret_16b01));	// 16553                  jnz     short locret_16B01 ;~ 01A2:6AD2
cs=0x1a2;eip=0x006ad4; 	X(PUSH(ax));	// 16554                  push    ax ;~ 01A2:6AD4
cs=0x1a2;eip=0x006ad5; 	X(PUSH(bx));	// 16555                  push    bx ;~ 01A2:6AD5
cs=0x1a2;eip=0x006ad6; 	X(PUSH(cx));	// 16556                  push    cx ;~ 01A2:6AD6
cs=0x1a2;eip=0x006ad7; 	X(PUSH(dx));	// 16557                  push    dx ;~ 01A2:6AD7
cs=0x1a2;eip=0x006ad8; 	X(PUSH(bp));	// 16558                  push    bp ;~ 01A2:6AD8
cs=0x1a2;eip=0x006ad9; 	X(PUSH(si));	// 16559                  push    si ;~ 01A2:6AD9
cs=0x1a2;eip=0x006ada; 	X(PUSH(di));	// 16560                  push    di ;~ 01A2:6ADA
cs=0x1a2;eip=0x006adb; 	X(PUSH(es));	// 16561                  push    es ;~ 01A2:6ADB
cs=0x1a2;eip=0x006adc; 	X(PUSH(ds));	// 16562                  push    ds ;~ 01A2:6ADC
cs=0x1a2;eip=0x006add; 	T(dx = word_1f6f0;);	// 16563                  mov     dx, ds:word_1F6F0 ;~ 01A2:6ADD
cs=0x1a2;eip=0x006ae1; 	J(CALL(seg000_78d5_proc,m2c::kloc_178de));	// 16564                  call    loc_178DE ;~ 01A2:6AE1
cs=0x1a2;eip=0x006ae4; 	X(word_1f70a = 0x0F;);	// 16565                  mov     ds:word_1F70A, 0Fh ;~ 01A2:6AE4
cs=0x1a2;eip=0x006aea; 	J(CALL(sub_15c9c,0));	// 16566                  call    sub_15C9C ;~ 01A2:6AEA
cs=0x1a2;eip=0x006aed; 	T(CMP(dx, word_1f3ea));	// 16567                  cmp     dx, ds:word_1F3EA ;~ 01A2:6AED
cs=0x1a2;eip=0x006af1; 	J(JNZ(loc_16af6));	// 16568                  jnz     short loc_16AF6 ;~ 01A2:6AF1
cs=0x1a2;eip=0x006af3; 	J(CALL(sub_134bf,0));	// 16569                  call    sub_134BF ;~ 01A2:6AF3
loc_16af6:
	// 5427 
cs=0x1a2;eip=0x006af6; 	T(XOR(al, al));	// 16572                  xor     al, al ;~ 01A2:6AF6
cs=0x1a2;eip=0x006af8; 	X(POP(ds));	// 16573                  pop     ds ;~ 01A2:6AF8
cs=0x1a2;eip=0x006af9; 	X(POP(es));	// 16575                  pop     es ;~ 01A2:6AF9
cs=0x1a2;eip=0x006afa; 	X(POP(di));	// 16576                  pop     di ;~ 01A2:6AFA
cs=0x1a2;eip=0x006afb; 	X(POP(si));	// 16577                  pop     si ;~ 01A2:6AFB
cs=0x1a2;eip=0x006afc; 	X(POP(bp));	// 16578                  pop     bp ;~ 01A2:6AFC
cs=0x1a2;eip=0x006afd; 	X(POP(dx));	// 16579                  pop     dx ;~ 01A2:6AFD
cs=0x1a2;eip=0x006afe; 	X(POP(cx));	// 16580                  pop     cx ;~ 01A2:6AFE
cs=0x1a2;eip=0x006aff; 	X(POP(bx));	// 16581                  pop     bx ;~ 01A2:6AFF
cs=0x1a2;eip=0x006b00; 	X(POP(ax));	// 16582                  pop     ax ;~ 01A2:6B00
locret_16b01:
	// 5428 
cs=0x1a2;eip=0x006b01; 	J(RETN(0));	// 16586                  retn ;~ 01A2:6B01

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_16a37: 	goto loc_16a37;
        case m2c::kloc_16a67: 	goto loc_16a67;
        case m2c::kloc_16a8a: 	goto loc_16a8a;
        case m2c::kloc_16a91: 	goto loc_16a91;
        case m2c::kloc_16a96: 	goto loc_16a96;
        case m2c::kloc_16a9b: 	goto loc_16a9b;
        case m2c::kloc_16abe: 	goto loc_16abe;
        case m2c::kloc_16ac9: 	goto loc_16ac9;
        case m2c::kloc_16af6: 	goto loc_16af6;
        case m2c::klocret_16b01: 	goto locret_16b01;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_16b02(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_16b02:
    _begin:
cs=0x1a2;eip=0x006b02; 	X(PUSH(ax));	// 16592                  push    ax ;~ 01A2:6B02
cs=0x1a2;eip=0x006b03; 	X(PUSH(bx));	// 16593                  push    bx ;~ 01A2:6B03
cs=0x1a2;eip=0x006b04; 	X(PUSH(cx));	// 16594                  push    cx ;~ 01A2:6B04
cs=0x1a2;eip=0x006b05; 	X(PUSH(dx));	// 16595                  push    dx ;~ 01A2:6B05
cs=0x1a2;eip=0x006b06; 	X(PUSH(bp));	// 16596                  push    bp ;~ 01A2:6B06
cs=0x1a2;eip=0x006b07; 	X(PUSH(si));	// 16597                  push    si ;~ 01A2:6B07
cs=0x1a2;eip=0x006b08; 	X(PUSH(di));	// 16598                  push    di ;~ 01A2:6B08
cs=0x1a2;eip=0x006b09; 	X(PUSH(es));	// 16599                  push    es ;~ 01A2:6B09
cs=0x1a2;eip=0x006b0a; 	X(PUSH(ds));	// 16600                  push    ds ;~ 01A2:6B0A
cs=0x1a2;eip=0x006b0b; 	T(XCHG(si, di));	// 16601                  xchg    si, di ;~ 01A2:6B0B
cs=0x1a2;eip=0x006b0d; 	T(MOV(ah, *(raddr(ds,bp+0))));	// 16602                  mov     ah, ds:[bp+0] ;~ 01A2:6B0D
cs=0x1a2;eip=0x006b11; 	T(MOV(cl, *(raddr(ds,si))));	// 16603                  mov     cl, [si] ;~ 01A2:6B11
cs=0x1a2;eip=0x006b13; 	T(ADD(si, 2));	// 16604                  add     si, 2 ;~ 01A2:6B13
cs=0x1a2;eip=0x006b16; 	X(PUSH(si));	// 16605                  push    si ;~ 01A2:6B16
cs=0x1a2;eip=0x006b17; 	T(MOV(ch, *(raddr(ds,bx+2))));	// 16606                  mov     ch, [bx+2] ;~ 01A2:6B17
cs=0x1a2;eip=0x006b1a; 	T(OR(ch, ch));	// 16607                  or      ch, ch ;~ 01A2:6B1A
cs=0x1a2;eip=0x006b1c; 	J(JNZ(loc_16b21));	// 16608                  jnz     short loc_16B21 ;~ 01A2:6B1C
cs=0x1a2;eip=0x006b1e; 	J(JMP(loc_16be6));	// 16609                  jmp     loc_16BE6 ;~ 01A2:6B1E
loc_16b21:
	// 5429 
cs=0x1a2;eip=0x006b21; 	T(CMP(ah, 0x0FF));	// 16613                  cmp     ah, 0FFh ;~ 01A2:6B21
cs=0x1a2;eip=0x006b24; 	J(JZ(loc_16b29));	// 16614                  jz      short loc_16B29 ;~ 01A2:6B24
cs=0x1a2;eip=0x006b26; 	J(JMP(loc_16be6));	// 16615                  jmp     loc_16BE6 ;~ 01A2:6B26
loc_16b29:
	// 5430 
cs=0x1a2;eip=0x006b29; 	T(DEC(ch));	// 16619                  dec     ch ;~ 01A2:6B29
cs=0x1a2;eip=0x006b2b; 	J(JMP(loc_16be6));	// 16620                  jmp     loc_16BE6 ;~ 01A2:6B2B
loc_16b2e:
	// 5431 
cs=0x1a2;eip=0x006b2e; 	X(POP(si));	// 16624                  pop     si ;~ 01A2:6B2E
cs=0x1a2;eip=0x006b2f; 	T(LODSW);	// 16625                  lodsw ;~ 01A2:6B2F
cs=0x1a2;eip=0x006b30; 	X(PUSH(si));	// 16626                  push    si ;~ 01A2:6B30
cs=0x1a2;eip=0x006b31; 	T(si = ax;);	// 16627                  mov     si, ax ;~ 01A2:6B31
cs=0x1a2;eip=0x006b33; 	T(MOV(bp, *(dw*)(raddr(ds,si+8))));	// 16628                  mov     bp, [si+8] ;~ 01A2:6B33
cs=0x1a2;eip=0x006b36; 	T(CMP(ch, *(raddr(ds,bp+4))));	// 16629                  cmp     ch, ds:[bp+4] ;~ 01A2:6B36
cs=0x1a2;eip=0x006b3a; 	J(JNZ(loc_16b8c));	// 16630                  jnz     short loc_16B8C ;~ 01A2:6B3A
cs=0x1a2;eip=0x006b3c; 	T(TEST(*(raddr(ds,di+0x12)), 1));	// 16631                  test    byte ptr [di+12h], 1 ;~ 01A2:6B3C
cs=0x1a2;eip=0x006b40; 	J(JNZ(loc_16b8c));	// 16632                  jnz     short loc_16B8C ;~ 01A2:6B40
cs=0x1a2;eip=0x006b42; 	X(PUSH(bx));	// 16633                  push    bx ;~ 01A2:6B42
cs=0x1a2;eip=0x006b43; 	X(PUSH(es));	// 16634                  push    es ;~ 01A2:6B43
cs=0x1a2;eip=0x006b44; 	T(MOV(es, *(dw*)(raddr(ds,di+6))));	// 16635                  mov     es, word ptr [di+6] ;~ 01A2:6B44
cs=0x1a2;eip=0x006b47; 	T(MOV(bx, *(dw*)(raddr(ds,di+8))));	// 16636                  mov     bx, [di+8] ;~ 01A2:6B47
cs=0x1a2;eip=0x006b4a; 	T(XOR(ah, ah));	// 16637                  xor     ah, ah ;~ 01A2:6B4A
cs=0x1a2;eip=0x006b4c; 	T(MOV(al, *(raddr(es,bx+0x1D))));	// 16638                  mov     al, es:[bx+1Dh] ;~ 01A2:6B4C
cs=0x1a2;eip=0x006b50; 	T(bx = 0x0FEC6;);	// 16639                  mov     bx, 0FEC6h ;~ 01A2:6B50
cs=0x1a2;eip=0x006b53; 	T(ADD(bx, ax));	// 16640                  add     bx, ax ;~ 01A2:6B53
cs=0x1a2;eip=0x006b55; 	T(MOV(al, *(raddr(ds,bx))));	// 16641                  mov     al, [bx] ;~ 01A2:6B55
cs=0x1a2;eip=0x006b57; 	J(CALL(sub_1164e,0));	// 16642                  call    sub_1164E ;~ 01A2:6B57
cs=0x1a2;eip=0x006b5a; 	X(POP(es));	// 16643                  pop     es ;~ 01A2:6B5A
cs=0x1a2;eip=0x006b5b; 	X(POP(bx));	// 16644                  pop     bx ;~ 01A2:6B5B
cs=0x1a2;eip=0x006b5c; 	T(TEST(*(raddr(ds,di+0x12)), 1));	// 16645                  test    byte ptr [di+12h], 1 ;~ 01A2:6B5C
cs=0x1a2;eip=0x006b60; 	X(PUSHF);	// 16646                  pushf ;~ 01A2:6B60
cs=0x1a2;eip=0x006b61; 	X(OR(*(raddr(ds,di+0x12)), 1));	// 16647                  or      byte ptr [di+12h], 1 ;~ 01A2:6B61
cs=0x1a2;eip=0x006b65; 	X(POPF);	// 16648                  popf ;~ 01A2:6B65
cs=0x1a2;eip=0x006b66; 	X(PUSH(di));	// 16649                  push    di ;~ 01A2:6B66
cs=0x1a2;eip=0x006b67; 	T(di = si;);	// 16650                  mov     di, si ;~ 01A2:6B67
cs=0x1a2;eip=0x006b69; 	T(MOV(ax, *(dw*)(raddr(ds,di+4))));	// 16651                  mov     ax, [di+4] ;~ 01A2:6B69
cs=0x1a2;eip=0x006b6c; 	X(PUSH(si));	// 16652                  push    si ;~ 01A2:6B6C
cs=0x1a2;eip=0x006b6d; 	T(MOV(si, *(dw*)(raddr(ds,0x84))));	// 16653                  mov     si, ds:84h ;~ 01A2:6B6D
cs=0x1a2;eip=0x006b71; 	X(MOV(*(dw*)(raddr(ds,si)), 4));	// 16654                  mov     word ptr [si], 4 ;~ 01A2:6B71
cs=0x1a2;eip=0x006b75; 	T(ADD(si, 2));	// 16655                  add     si, 2 ;~ 01A2:6B75
cs=0x1a2;eip=0x006b78; 	X(MOV(*(dw*)(raddr(ds,si)), bx));	// 16656                  mov     [si], bx ;~ 01A2:6B78
cs=0x1a2;eip=0x006b7a; 	T(ADD(si, 2));	// 16657                  add     si, 2 ;~ 01A2:6B7A
cs=0x1a2;eip=0x006b7d; 	X(MOV(*(dw*)(raddr(ds,si)), ax));	// 16658                  mov     [si], ax ;~ 01A2:6B7D
cs=0x1a2;eip=0x006b7f; 	T(ADD(si, 2));	// 16659                  add     si, 2 ;~ 01A2:6B7F
cs=0x1a2;eip=0x006b82; 	X(MOV(*(dw*)(raddr(ds,0x84)), si));	// 16660                  mov     ds:84h, si ;~ 01A2:6B82
cs=0x1a2;eip=0x006b86; 	X(INC(*(dw*)(raddr(ds,0x226))));	// 16661                  inc     word ptr ds:226h ;~ 01A2:6B86
cs=0x1a2;eip=0x006b8a; 	X(POP(si));	// 16662                  pop     si ;~ 01A2:6B8A
cs=0x1a2;eip=0x006b8b; 	X(POP(di));	// 16663                  pop     di ;~ 01A2:6B8B
loc_16b8c:
	// 5432 
cs=0x1a2;eip=0x006b8c; 	X(PUSH(ax));	// 16667                  push    ax ;~ 01A2:6B8C
cs=0x1a2;eip=0x006b8d; 	X(PUSH(dx));	// 16668                  push    dx ;~ 01A2:6B8D
cs=0x1a2;eip=0x006b8e; 	T(MOV(ax, *(dw*)(raddr(ds,bx+4))));	// 16669                  mov     ax, [bx+4] ;~ 01A2:6B8E
cs=0x1a2;eip=0x006b91; 	T(MOV(dx, *(dw*)(raddr(ds,si+4))));	// 16670                  mov     dx, [si+4] ;~ 01A2:6B91
cs=0x1a2;eip=0x006b94; 	J(CALL(sub_16441,0));	// 16671                  call    sub_16441 ;~ 01A2:6B94
cs=0x1a2;eip=0x006b97; 	X(POP(dx));	// 16672                  pop     dx ;~ 01A2:6B97
cs=0x1a2;eip=0x006b98; 	X(POP(ax));	// 16673                  pop     ax ;~ 01A2:6B98
cs=0x1a2;eip=0x006b99; 	J(JZ(loc_16bb9));	// 16674                  jz      short loc_16BB9 ;~ 01A2:6B99
cs=0x1a2;eip=0x006b9b; 	X(PUSH(di));	// 16675                  push    di ;~ 01A2:6B9B
cs=0x1a2;eip=0x006b9c; 	X(PUSH(ax));	// 16676                  push    ax ;~ 01A2:6B9C
cs=0x1a2;eip=0x006b9d; 	T(MOV(di, *(dw*)(raddr(ds,0x84))));	// 16677                  mov     di, ds:84h ;~ 01A2:6B9D
cs=0x1a2;eip=0x006ba1; 	X(MOV(*(dw*)(raddr(ds,di)), 9));	// 16678                  mov     word ptr [di], 9 ;~ 01A2:6BA1
cs=0x1a2;eip=0x006ba5; 	X(MOV(*(dw*)(raddr(ds,di+2)), bx));	// 16679                  mov     [di+2], bx ;~ 01A2:6BA5
cs=0x1a2;eip=0x006ba8; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 16680                  mov     ax, [si+4] ;~ 01A2:6BA8
cs=0x1a2;eip=0x006bab; 	X(MOV(*(dw*)(raddr(ds,di+4)), ax));	// 16681                  mov     [di+4], ax ;~ 01A2:6BAB
cs=0x1a2;eip=0x006bae; 	X(ADD(*(dw*)(raddr(ds,0x84)), 6));	// 16682                  add     word ptr ds:84h, 6 ;~ 01A2:6BAE
cs=0x1a2;eip=0x006bb3; 	X(INC(*(dw*)(raddr(ds,0x226))));	// 16683                  inc     word ptr ds:226h ;~ 01A2:6BB3
cs=0x1a2;eip=0x006bb7; 	X(POP(ax));	// 16684                  pop     ax ;~ 01A2:6BB7
cs=0x1a2;eip=0x006bb8; 	X(POP(di));	// 16685                  pop     di ;~ 01A2:6BB8
loc_16bb9:
	// 5433 
cs=0x1a2;eip=0x006bb9; 	X(PUSH(ax));	// 16688                  push    ax ;~ 01A2:6BB9
cs=0x1a2;eip=0x006bba; 	X(PUSH(dx));	// 16689                  push    dx ;~ 01A2:6BBA
cs=0x1a2;eip=0x006bbb; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 16690                  mov     ax, [si+4] ;~ 01A2:6BBB
cs=0x1a2;eip=0x006bbe; 	T(MOV(dx, *(dw*)(raddr(ds,bx+4))));	// 16691                  mov     dx, [bx+4] ;~ 01A2:6BBE
cs=0x1a2;eip=0x006bc1; 	J(CALL(sub_16441,0));	// 16692                  call    sub_16441 ;~ 01A2:6BC1
cs=0x1a2;eip=0x006bc4; 	X(POP(dx));	// 16693                  pop     dx ;~ 01A2:6BC4
cs=0x1a2;eip=0x006bc5; 	X(POP(ax));	// 16694                  pop     ax ;~ 01A2:6BC5
cs=0x1a2;eip=0x006bc6; 	J(JZ(loc_16be6));	// 16695                  jz      short loc_16BE6 ;~ 01A2:6BC6
cs=0x1a2;eip=0x006bc8; 	X(PUSH(di));	// 16696                  push    di ;~ 01A2:6BC8
cs=0x1a2;eip=0x006bc9; 	X(PUSH(ax));	// 16697                  push    ax ;~ 01A2:6BC9
cs=0x1a2;eip=0x006bca; 	T(MOV(di, *(dw*)(raddr(ds,0x84))));	// 16698                  mov     di, ds:84h ;~ 01A2:6BCA
cs=0x1a2;eip=0x006bce; 	X(MOV(*(dw*)(raddr(ds,di)), 9));	// 16699                  mov     word ptr [di], 9 ;~ 01A2:6BCE
cs=0x1a2;eip=0x006bd2; 	X(MOV(*(dw*)(raddr(ds,di+2)), si));	// 16700                  mov     [di+2], si ;~ 01A2:6BD2
cs=0x1a2;eip=0x006bd5; 	T(MOV(ax, *(dw*)(raddr(ds,bx+4))));	// 16701                  mov     ax, [bx+4] ;~ 01A2:6BD5
cs=0x1a2;eip=0x006bd8; 	X(MOV(*(dw*)(raddr(ds,di+4)), ax));	// 16702                  mov     [di+4], ax ;~ 01A2:6BD8
cs=0x1a2;eip=0x006bdb; 	X(ADD(*(dw*)(raddr(ds,0x84)), 6));	// 16703                  add     word ptr ds:84h, 6 ;~ 01A2:6BDB
cs=0x1a2;eip=0x006be0; 	X(INC(*(dw*)(raddr(ds,0x226))));	// 16704                  inc     word ptr ds:226h ;~ 01A2:6BE0
cs=0x1a2;eip=0x006be4; 	X(POP(ax));	// 16705                  pop     ax ;~ 01A2:6BE4
cs=0x1a2;eip=0x006be5; 	X(POP(di));	// 16706                  pop     di ;~ 01A2:6BE5
loc_16be6:
	// 5434 
cs=0x1a2;eip=0x006be6; 	T(DEC(cl));	// 16710                  dec     cl ;~ 01A2:6BE6
cs=0x1a2;eip=0x006be8; 	J(JS(loc_16bed));	// 16711                  js      short loc_16BED ;~ 01A2:6BE8
cs=0x1a2;eip=0x006bea; 	J(JMP(loc_16b2e));	// 16712                  jmp     loc_16B2E ;~ 01A2:6BEA
loc_16bed:
	// 5435 
cs=0x1a2;eip=0x006bed; 	X(POP(si));	// 16716                  pop     si ;~ 01A2:6BED
cs=0x1a2;eip=0x006bee; 	X(POP(ds));	// 16717                  pop     ds ;~ 01A2:6BEE
cs=0x1a2;eip=0x006bef; 	X(POP(es));	// 16718                  pop     es ;~ 01A2:6BEF
cs=0x1a2;eip=0x006bf0; 	X(POP(di));	// 16719                  pop     di ;~ 01A2:6BF0
cs=0x1a2;eip=0x006bf1; 	X(POP(si));	// 16720                  pop     si ;~ 01A2:6BF1
cs=0x1a2;eip=0x006bf2; 	X(POP(bp));	// 16721                  pop     bp ;~ 01A2:6BF2
cs=0x1a2;eip=0x006bf3; 	X(POP(dx));	// 16722                  pop     dx ;~ 01A2:6BF3
cs=0x1a2;eip=0x006bf4; 	X(POP(cx));	// 16723                  pop     cx ;~ 01A2:6BF4
cs=0x1a2;eip=0x006bf5; 	X(POP(bx));	// 16724                  pop     bx ;~ 01A2:6BF5
cs=0x1a2;eip=0x006bf6; 	X(POP(ax));	// 16725                  pop     ax ;~ 01A2:6BF6
cs=0x1a2;eip=0x006bf7; 	T(CMP(*(raddr(ds,di+1)), 0));	// 16726                  cmp     byte ptr [di+1], 0 ;~ 01A2:6BF7
cs=0x1a2;eip=0x006bfb; 	J(RETN(0));	// 16727                  retn ;~ 01A2:6BFB

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_16b21: 	goto loc_16b21;
        case m2c::kloc_16b29: 	goto loc_16b29;
        case m2c::kloc_16b2e: 	goto loc_16b2e;
        case m2c::kloc_16b8c: 	goto loc_16b8c;
        case m2c::kloc_16bb9: 	goto loc_16bb9;
        case m2c::kloc_16be6: 	goto loc_16be6;
        case m2c::kloc_16bed: 	goto loc_16bed;
        case m2c::ksub_16b02: 	goto sub_16b02;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_16bfc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_16bfc:
    _begin:
cs=0x1a2;eip=0x006bfc; 	X(PUSH(es));	// 16736                  push    es ;~ 01A2:6BFC
cs=0x1a2;eip=0x006bfd; 	X(PUSH(di));	// 16737                  push    di ;~ 01A2:6BFD
cs=0x1a2;eip=0x006bfe; 	X(MOV(*(dw*)(raddr(ds,si+0x18)), 0x0FB8E));	// 16738                  mov     word ptr [si+18h], 0FB8Eh ;~ 01A2:6BFE
cs=0x1a2;eip=0x006c03; 	T(MOV(es, *(dw*)(raddr(ds,si+6))));	// 16739                  mov     es, word ptr [si+6] ;~ 01A2:6C03
cs=0x1a2;eip=0x006c06; 	T(MOV(di, *(dw*)(raddr(ds,si+8))));	// 16740                  mov     di, [si+8] ;~ 01A2:6C06
cs=0x1a2;eip=0x006c09; 	T(CMP(*(raddr(es,di+0x0D)), 0));	// 16741                  cmp     byte ptr es:[di+0Dh], 0 ;~ 01A2:6C09
cs=0x1a2;eip=0x006c0e; 	J(JZ(loc_16c25));	// 16742                  jz      short loc_16C25 ;~ 01A2:6C0E
cs=0x1a2;eip=0x006c10; 	T(MOV(di, *(dw*)(raddr(ds,si+0x0A))));	// 16743                  mov     di, [si+0Ah] ;~ 01A2:6C10
cs=0x1a2;eip=0x006c13; 	T(TEST(*(raddr(ds,di+0x0F)), 8));	// 16744                  test    byte ptr [di+0Fh], 8 ;~ 01A2:6C13
cs=0x1a2;eip=0x006c17; 	J(JNZ(loc_16c25));	// 16745                  jnz     short loc_16C25 ;~ 01A2:6C17
cs=0x1a2;eip=0x006c19; 	T(TEST(*(raddr(ds,di+0x0F)), 0x10));	// 16746                  test    byte ptr [di+0Fh], 10h ;~ 01A2:6C19
cs=0x1a2;eip=0x006c1d; 	J(JNZ(loc_16c32));	// 16747                  jnz     short loc_16C32 ;~ 01A2:6C1D
cs=0x1a2;eip=0x006c1f; 	T(TEST(*(raddr(ds,di+0x0F)), 4));	// 16748                  test    byte ptr [di+0Fh], 4 ;~ 01A2:6C1F
cs=0x1a2;eip=0x006c23; 	J(JZ(loc_16c2a));	// 16749                  jz      short loc_16C2A ;~ 01A2:6C23
loc_16c25:
	// 5436 
cs=0x1a2;eip=0x006c25; 	X(MOV(*(dw*)(raddr(ds,si+0x18)), 0));	// 16753                  mov     word ptr [si+18h], 0 ;~ 01A2:6C25
loc_16c2a:
	// 5437 
cs=0x1a2;eip=0x006c2a; 	X(MOV(*(dw*)(raddr(ds,si+0x1A)), 0));	// 16756                  mov     word ptr [si+1Ah], 0 ;~ 01A2:6C2A
cs=0x1a2;eip=0x006c2f; 	X(POP(di));	// 16757                  pop     di ;~ 01A2:6C2F
cs=0x1a2;eip=0x006c30; 	X(POP(es));	// 16758                  pop     es ;~ 01A2:6C30
cs=0x1a2;eip=0x006c31; 	J(RETN(0));	// 16759                  retn ;~ 01A2:6C31
loc_16c32:
	// 5438 
cs=0x1a2;eip=0x006c32; 	X(MOV(*(dw*)(raddr(ds,si+0x18)), 0x0FB9A));	// 16763                  mov     word ptr [si+18h], 0FB9Ah ;~ 01A2:6C32
cs=0x1a2;eip=0x006c37; 	X(MOV(*(dw*)(raddr(ds,si+0x1A)), 0));	// 16764                  mov     word ptr [si+1Ah], 0 ;~ 01A2:6C37
cs=0x1a2;eip=0x006c3c; 	X(POP(di));	// 16765                  pop     di ;~ 01A2:6C3C
cs=0x1a2;eip=0x006c3d; 	X(POP(es));	// 16766                  pop     es ;~ 01A2:6C3D
cs=0x1a2;eip=0x006c3e; 	J(RETN(0));	// 16767                  retn ;~ 01A2:6C3E

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_16c25: 	goto loc_16c25;
        case m2c::kloc_16c2a: 	goto loc_16c2a;
        case m2c::kloc_16c32: 	goto loc_16c32;
        case m2c::ksub_16bfc: 	goto sub_16bfc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_6c3f_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_6c3f_proc:
    _begin:
loc_16c3f:
	// 5439 
cs=0x1a2;eip=0x006c3f; 	X(PUSH(cx));	// 16773                  push    cx ;~ 01A2:6C3F
cs=0x1a2;eip=0x006c40; 	X(PUSH(ax));	// 16774                  push    ax ;~ 01A2:6C40
cs=0x1a2;eip=0x006c41; 	X(PUSH(si));	// 16775                  push    si ;~ 01A2:6C41
cs=0x1a2;eip=0x006c42; 	T(XOR(ch, ch));	// 16776                  xor     ch, ch ;~ 01A2:6C42
cs=0x1a2;eip=0x006c44; 	T(MOV(cl, *(raddr(ds,si))));	// 16777                  mov     cl, [si] ;~ 01A2:6C44
cs=0x1a2;eip=0x006c46; 	T(ADD(si, 2));	// 16778                  add     si, 2 ;~ 01A2:6C46
loc_16c49:
	// 5440 
cs=0x1a2;eip=0x006c49; 	T(LODSW);	// 16781                  lodsw ;~ 01A2:6C49
cs=0x1a2;eip=0x006c4a; 	T(CMP(ax, dx));	// 16782                  cmp     ax, dx ;~ 01A2:6C4A
cs=0x1a2;eip=0x006c4c; 	J(JZ(loc_16c50));	// 16783                  jz      short loc_16C50 ;~ 01A2:6C4C
cs=0x1a2;eip=0x006c4e; 	J(LOOP(loc_16c49));	// 16784                  loop    loc_16C49 ;~ 01A2:6C4E
loc_16c50:
	// 5441 
cs=0x1a2;eip=0x006c50; 	X(POP(si));	// 16787                  pop     si ;~ 01A2:6C50
cs=0x1a2;eip=0x006c51; 	X(POP(ax));	// 16788                  pop     ax ;~ 01A2:6C51
cs=0x1a2;eip=0x006c52; 	X(POP(cx));	// 16789                  pop     cx ;~ 01A2:6C52
cs=0x1a2;eip=0x006c53; 	J(RETN(0));	// 16790                  retn ;~ 01A2:6C53

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_16c49: 	goto loc_16c49;
        case m2c::kloc_16c50: 	goto loc_16c50;
        case m2c::kseg000_6c3f_proc: 	goto seg000_6c3f_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_16c72(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_16c72:
    _begin:
cs=0x1a2;eip=0x006c72; 	X(PUSH(bx));	// 16812                  push    bx ;~ 01A2:6C72
cs=0x1a2;eip=0x006c73; 	T(XCHG(bp, si));	// 16813                  xchg    bp, si ;~ 01A2:6C73
cs=0x1a2;eip=0x006c75; 	T(OR(ah, ah));	// 16814                  or      ah, ah ;~ 01A2:6C75
cs=0x1a2;eip=0x006c77; 	J(JNZ(loc_16c7c));	// 16815                  jnz     short loc_16C7C ;~ 01A2:6C77
cs=0x1a2;eip=0x006c79; 	J(JMP(loc_16d33));	// 16816                  jmp     loc_16D33 ;~ 01A2:6C79
loc_16c7c:
	// 5442 
cs=0x1a2;eip=0x006c7c; 	T(XOR(dl, dl));	// 16820                  xor     dl, dl ;~ 01A2:6C7C
cs=0x1a2;eip=0x006c7e; 	T(XOR(dh, dh));	// 16821                  xor     dh, dh ;~ 01A2:6C7E
cs=0x1a2;eip=0x006c80; 	T(XOR(ch, ch));	// 16822                  xor     ch, ch ;~ 01A2:6C80
cs=0x1a2;eip=0x006c82; 	T(OR(cl, cl));	// 16823                  or      cl, cl ;~ 01A2:6C82
cs=0x1a2;eip=0x006c84; 	J(JNS(loc_16c8a));	// 16824                  jns     short loc_16C8A ;~ 01A2:6C84
cs=0x1a2;eip=0x006c86; 	T(NEG(cl));	// 16825                  neg     cl ;~ 01A2:6C86
cs=0x1a2;eip=0x006c88; 	T(ch = cl;);	// 16826                  mov     ch, cl ;~ 01A2:6C88
loc_16c8a:
	// 5443 
cs=0x1a2;eip=0x006c8a; 	T(MOV(ch, *(raddr(ds,si+4))));	// 16829                  mov     ch, [si+4] ;~ 01A2:6C8A
cs=0x1a2;eip=0x006c8d; 	T(SUB(ch, *(raddr(ds,si+5))));	// 16830                  sub     ch, [si+5] ;~ 01A2:6C8D
cs=0x1a2;eip=0x006c90; 	T(CMP(cl, 3));	// 16831                  cmp     cl, 3 ;~ 01A2:6C90
cs=0x1a2;eip=0x006c93; 	J(JNC(loc_16ca5));	// 16832                  jnb     short loc_16CA5 ;~ 01A2:6C93
cs=0x1a2;eip=0x006c95; 	T(SHR(ch, 1));	// 16833                  shr     ch, 1 ;~ 01A2:6C95
cs=0x1a2;eip=0x006c97; 	T(DEC(cl));	// 16834                  dec     cl ;~ 01A2:6C97
cs=0x1a2;eip=0x006c99; 	J(JZ(loc_16ca5));	// 16835                  jz      short loc_16CA5 ;~ 01A2:6C99
cs=0x1a2;eip=0x006c9b; 	T(al = ch;);	// 16836                  mov     al, ch ;~ 01A2:6C9B
cs=0x1a2;eip=0x006c9d; 	T(SHR(ch, 1));	// 16837                  shr     ch, 1 ;~ 01A2:6C9D
cs=0x1a2;eip=0x006c9f; 	T(DEC(cl));	// 16838                  dec     cl ;~ 01A2:6C9F
cs=0x1a2;eip=0x006ca1; 	J(JZ(loc_16ca5));	// 16839                  jz      short loc_16CA5 ;~ 01A2:6CA1
cs=0x1a2;eip=0x006ca3; 	T(ADD(ch, al));	// 16840                  add     ch, al ;~ 01A2:6CA3
loc_16ca5:
	// 5444 
cs=0x1a2;eip=0x006ca5; 	T(ADD(ch, *(raddr(ds,si+5))));	// 16844                  add     ch, [si+5] ;~ 01A2:6CA5
cs=0x1a2;eip=0x006ca8; 	T(AND(ah, 0x0F));	// 16845                  and     ah, 0Fh ;~ 01A2:6CA8
cs=0x1a2;eip=0x006cab; 	T(bx = offset(seg000,off_16c54););	// 16846                  mov     bx, offset off_16C54 ;~ 01A2:6CAB
cs=0x1a2;eip=0x006cae; 	T(al = ah;);	// 16847                  mov     al, ah ;~ 01A2:6CAE
cs=0x1a2;eip=0x006cb0; 	T(XOR(ah, ah));	// 16848                  xor     ah, ah ;~ 01A2:6CB0
cs=0x1a2;eip=0x006cb2; 	T(SHL(ax, 1));	// 16849                  shl     ax, 1 ;~ 01A2:6CB2
cs=0x1a2;eip=0x006cb4; 	T(ADD(bx, ax));	// 16850                  add     bx, ax ;~ 01A2:6CB4
cs=0x1a2;eip=0x006cb6; 	T(MOV(bx, *(dw*)(raddr(cs,bx))));	// 16851                  mov     bx, cs:[bx] ;~ 01A2:6CB6
cs=0x1a2;eip=0x006cb9; __disp=bx;
	J(return __dispatch_call(__disp, _state););	// 16852                  jmp     bx ;~ 01A2:6CB9
loc_16cbb:
	// 5445 
cs=0x1a2;eip=0x006cbb; 	T(MOV(dh, *(raddr(ds,si+3))));	// 16856                  mov     dh, [si+3] ;~ 01A2:6CBB
cs=0x1a2;eip=0x006cbe; 	T(MOV(dl, *(raddr(ds,si))));	// 16857                  mov     dl, [si] ;~ 01A2:6CBE
cs=0x1a2;eip=0x006cc0; 	T(SUB(dh, 3));	// 16858                  sub     dh, 3 ;~ 01A2:6CC0
cs=0x1a2;eip=0x006cc3; 	J(JMP(loc_16d33));	// 16859                  jmp     short loc_16D33 ;~ 01A2:6CC3
loc_16cc5:
	// 5446 
cs=0x1a2;eip=0x006cc5; 	T(MOV(dh, *(raddr(ds,si+1))));	// 16863                  mov     dh, [si+1] ;~ 01A2:6CC5
cs=0x1a2;eip=0x006cc8; 	T(MOV(dl, *(raddr(ds,si))));	// 16864                  mov     dl, [si] ;~ 01A2:6CC8
cs=0x1a2;eip=0x006cca; 	T(ADD(dh, 2));	// 16865                  add     dh, 2 ;~ 01A2:6CCA
cs=0x1a2;eip=0x006ccd; 	T(ADD(dh, *(raddr(es,di+0x12))));	// 16866                  add     dh, es:[di+12h] ;~ 01A2:6CCD
cs=0x1a2;eip=0x006cd1; 	J(JMP(loc_16d33));	// 16867                  jmp     short loc_16D33 ;~ 01A2:6CD1
loc_16cd3:
	// 5447 
cs=0x1a2;eip=0x006cd3; 	T(MOV(dh, *(raddr(ds,si+1))));	// 16871                  mov     dh, [si+1] ;~ 01A2:6CD3
cs=0x1a2;eip=0x006cd6; 	T(MOV(dl, *(raddr(ds,si))));	// 16872                  mov     dl, [si] ;~ 01A2:6CD6
cs=0x1a2;eip=0x006cd8; 	T(ADD(dl, 2));	// 16873                  add     dl, 2 ;~ 01A2:6CD8
cs=0x1a2;eip=0x006cdb; 	T(ADD(dl, *(raddr(es,di+0x10))));	// 16874                  add     dl, es:[di+10h] ;~ 01A2:6CDB
cs=0x1a2;eip=0x006cdf; 	J(JMP(loc_16d33));	// 16875                  jmp     short loc_16D33 ;~ 01A2:6CDF
loc_16ce1:
	// 5448 
cs=0x1a2;eip=0x006ce1; 	T(MOV(dh, *(raddr(ds,si+1))));	// 16879                  mov     dh, [si+1] ;~ 01A2:6CE1
cs=0x1a2;eip=0x006ce4; 	T(MOV(dl, *(raddr(ds,si+2))));	// 16880                  mov     dl, [si+2] ;~ 01A2:6CE4
cs=0x1a2;eip=0x006ce7; 	T(SUB(dl, 3));	// 16881                  sub     dl, 3 ;~ 01A2:6CE7
cs=0x1a2;eip=0x006cea; 	J(JMP(loc_16d33));	// 16882                  jmp     short loc_16D33 ;~ 01A2:6CEA
loc_16cec:
	// 5449 
cs=0x1a2;eip=0x006cec; 	T(MOV(dh, *(raddr(ds,si+3))));	// 16886                  mov     dh, [si+3] ;~ 01A2:6CEC
cs=0x1a2;eip=0x006cef; 	T(MOV(dl, *(raddr(ds,si))));	// 16887                  mov     dl, [si] ;~ 01A2:6CEF
cs=0x1a2;eip=0x006cf1; 	T(DEC(dh));	// 16888                  dec     dh ;~ 01A2:6CF1
cs=0x1a2;eip=0x006cf3; 	T(INC(dl));	// 16889                  inc     dl ;~ 01A2:6CF3
cs=0x1a2;eip=0x006cf5; 	T(ADD(dl, *(raddr(es,di+0x10))));	// 16890                  add     dl, es:[di+10h] ;~ 01A2:6CF5
cs=0x1a2;eip=0x006cf9; 	J(JMP(loc_16d33));	// 16891                  jmp     short loc_16D33 ;~ 01A2:6CF9
loc_16cfb:
	// 5450 
cs=0x1a2;eip=0x006cfb; 	T(MOV(dh, *(raddr(ds,si+3))));	// 16895                  mov     dh, [si+3] ;~ 01A2:6CFB
cs=0x1a2;eip=0x006cfe; 	T(MOV(dl, *(raddr(ds,si+2))));	// 16896                  mov     dl, [si+2] ;~ 01A2:6CFE
cs=0x1a2;eip=0x006d01; 	T(SUB(dh, 2));	// 16897                  sub     dh, 2 ;~ 01A2:6D01
cs=0x1a2;eip=0x006d04; 	T(SUB(dl, 2));	// 16898                  sub     dl, 2 ;~ 01A2:6D04
cs=0x1a2;eip=0x006d07; 	J(JMP(loc_16d33));	// 16899                  jmp     short loc_16D33 ;~ 01A2:6D07
loc_16d09:
	// 5451 
cs=0x1a2;eip=0x006d09; 	T(MOV(dh, *(raddr(ds,si+1))));	// 16903                  mov     dh, [si+1] ;~ 01A2:6D09
cs=0x1a2;eip=0x006d0c; 	T(MOV(dl, *(raddr(ds,si+2))));	// 16904                  mov     dl, [si+2] ;~ 01A2:6D0C
cs=0x1a2;eip=0x006d0f; 	T(SUB(dl, 2));	// 16905                  sub     dl, 2 ;~ 01A2:6D0F
cs=0x1a2;eip=0x006d12; 	T(INC(dh));	// 16906                  inc     dh ;~ 01A2:6D12
cs=0x1a2;eip=0x006d14; 	T(ADD(dh, *(raddr(es,di+0x12))));	// 16907                  add     dh, es:[di+12h] ;~ 01A2:6D14
cs=0x1a2;eip=0x006d18; 	J(JMP(loc_16d33));	// 16908                  jmp     short loc_16D33 ;~ 01A2:6D18
loc_16d1a:
	// 5452 
cs=0x1a2;eip=0x006d1a; 	T(MOV(dh, *(raddr(ds,si+1))));	// 16912                  mov     dh, [si+1] ;~ 01A2:6D1A
cs=0x1a2;eip=0x006d1d; 	T(MOV(dl, *(raddr(ds,si))));	// 16913                  mov     dl, [si] ;~ 01A2:6D1D
cs=0x1a2;eip=0x006d1f; 	T(INC(dl));	// 16914                  inc     dl ;~ 01A2:6D1F
cs=0x1a2;eip=0x006d21; 	T(INC(dh));	// 16915                  inc     dh ;~ 01A2:6D21
cs=0x1a2;eip=0x006d23; 	T(ADD(dh, *(raddr(es,di+0x12))));	// 16916                  add     dh, es:[di+12h] ;~ 01A2:6D23
cs=0x1a2;eip=0x006d27; 	T(ADD(dl, *(raddr(es,di+0x10))));	// 16917                  add     dl, es:[di+10h] ;~ 01A2:6D27
cs=0x1a2;eip=0x006d2b; 	J(JMP(loc_16d33));	// 16918                  jmp     short loc_16D33 ;~ 01A2:6D2B
loc_16d2d:
	// 5453 
cs=0x1a2;eip=0x006d2d; 	T(dl = 0x0FF;);	// 16923                  mov     dl, 0FFh ;~ 01A2:6D2D
cs=0x1a2;eip=0x006d2f; 	T(OR(dl, dl));	// 16924                  or      dl, dl ;~ 01A2:6D2F
cs=0x1a2;eip=0x006d31; 	X(POP(bx));	// 16925                  pop     bx ;~ 01A2:6D31
cs=0x1a2;eip=0x006d32; 	J(RETN(0));	// 16926                  retn ;~ 01A2:6D32
loc_16d33:
	// 5454 
cs=0x1a2;eip=0x006d33; 	T(XCHG(bp, si));	// 16931                  xchg    bp, si ;~ 01A2:6D33
cs=0x1a2;eip=0x006d35; 	J(CALL(sub_116e0,0));	// 16932                  call    sub_116E0 ;~ 01A2:6D35
cs=0x1a2;eip=0x006d38; 	X(POP(bx));	// 16933                  pop     bx ;~ 01A2:6D38
cs=0x1a2;eip=0x006d39; 	J(RETN(0));	// 16934                  retn ;~ 01A2:6D39

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_16c7c: 	goto loc_16c7c;
        case m2c::kloc_16c8a: 	goto loc_16c8a;
        case m2c::kloc_16ca5: 	goto loc_16ca5;
        case m2c::kloc_16cbb: 	goto loc_16cbb;
        case m2c::kloc_16cc5: 	goto loc_16cc5;
        case m2c::kloc_16cd3: 	goto loc_16cd3;
        case m2c::kloc_16ce1: 	goto loc_16ce1;
        case m2c::kloc_16cec: 	goto loc_16cec;
        case m2c::kloc_16cfb: 	goto loc_16cfb;
        case m2c::kloc_16d09: 	goto loc_16d09;
        case m2c::kloc_16d1a: 	goto loc_16d1a;
        case m2c::kloc_16d2d: 	goto loc_16d2d;
        case m2c::kloc_16d33: 	goto loc_16d33;
        case m2c::ksub_16c72: 	goto sub_16c72;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group20(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group20:
    _begin:
sub_16d3a:
	// 16941 
cs=0x1a2;eip=0x006d3a; 	T(TEST(*(raddr(ds,si+0x12)), 0x10));	// 16943                  test    byte ptr [si+12h], 10h ;~ 01A2:6D3A
cs=0x1a2;eip=0x006d3e; 	X(PUSHF);	// 16944                  pushf ;~ 01A2:6D3E
seg000_6d3f_proc:
	// 16947 
cs=0x1a2;eip=0x006d3f; 	X(AND(*(raddr(ds,si+0x12)), 0x0EF));	// 16947                  and     byte ptr [si+12h], 0EFh ;~ 01A2:6D3F
cs=0x1a2;eip=0x006d43; 	X(POPF);	// 16948                  popf ;~ 01A2:6D43
cs=0x1a2;eip=0x006d44; 	T(bp = ax;);	// 16949                  mov     bp, ax ;~ 01A2:6D44
cs=0x1a2;eip=0x006d46; 	T(MOV(es, *(dw*)(raddr(ds,si+6))));	// 16950                  mov     es, word ptr [si+6] ;~ 01A2:6D46
cs=0x1a2;eip=0x006d49; 	T(MOV(di, *(dw*)(raddr(ds,si+8))));	// 16951                  mov     di, [si+8] ;~ 01A2:6D49
cs=0x1a2;eip=0x006d4c; 	T(MOV(bx, *(dw*)(raddr(ds,si+0x0A))));	// 16952                  mov     bx, [si+0Ah] ;~ 01A2:6D4C
cs=0x1a2;eip=0x006d4f; 	T(MOV(dl, *(raddr(ds,bx))));	// 16953                  mov     dl, [bx] ;~ 01A2:6D4F
cs=0x1a2;eip=0x006d51; 	T(MOV(dh, *(raddr(ds,bx+1))));	// 16954                  mov     dh, [bx+1] ;~ 01A2:6D51
cs=0x1a2;eip=0x006d54; 	T(MOV(ch, *(raddr(ds,bx+2))));	// 16955                  mov     ch, [bx+2] ;~ 01A2:6D54
cs=0x1a2;eip=0x006d57; 	T(ADD(ch, *(raddr(ds,bp+0))));	// 16956                  add     ch, ds:[bp+0] ;~ 01A2:6D57
cs=0x1a2;eip=0x006d5b; 	X(MOV(*(dw*)(raddr(ds,0x75C)), bp));	// 16957                  mov     ds:75Ch, bp ;~ 01A2:6D5B
cs=0x1a2;eip=0x006d5f; 	T(MOV(bp, *(dw*)(raddr(ds,si+0x1A))));	// 16958                  mov     bp, [si+1Ah] ;~ 01A2:6D5F
cs=0x1a2;eip=0x006d62; 	X(MOV(*(dw*)(raddr(ds,0x75E)), bp));	// 16959                  mov     ds:75Eh, bp ;~ 01A2:6D62
cs=0x1a2;eip=0x006d66; 	T(OR(bp, bp));	// 16960                  or      bp, bp ;~ 01A2:6D66
cs=0x1a2;eip=0x006d68; 	J(JZ(loc_16d81));	// 16961                  jz      short loc_16D81 ;~ 01A2:6D68
cs=0x1a2;eip=0x006d6a; 	T(ADD(dl, *(raddr(ds,bp+0))));	// 16962                  add     dl, ds:[bp+0] ;~ 01A2:6D6A
cs=0x1a2;eip=0x006d6e; 	T(ADD(dh, *(raddr(ds,bp+1))));	// 16963                  add     dh, ds:[bp+1] ;~ 01A2:6D6E
cs=0x1a2;eip=0x006d72; 	T(CMP(*(dw*)(raddr(ds,bp+0)), 0));	// 16964                  cmp     word ptr ds:[bp+0], 0 ;~ 01A2:6D72
cs=0x1a2;eip=0x006d77; 	J(JNZ(loc_16d81));	// 16965                  jnz     short loc_16D81 ;~ 01A2:6D77
cs=0x1a2;eip=0x006d79; 	T(ADD(dl, *(raddr(ds,bp+2))));	// 16966                  add     dl, ds:[bp+2] ;~ 01A2:6D79
cs=0x1a2;eip=0x006d7d; 	T(ADD(dh, *(raddr(ds,bp+3))));	// 16967                  add     dh, ds:[bp+3] ;~ 01A2:6D7D
loc_16d81:
	// 5455 
cs=0x1a2;eip=0x006d81; 	X(PUSH(si));	// 16971                  push    si ;~ 01A2:6D81
cs=0x1a2;eip=0x006d82; 	T(si = bx;);	// 16972                  mov     si, bx ;~ 01A2:6D82
cs=0x1a2;eip=0x006d84; 	J(CALL(sub_116e0,0));	// 16973                  call    sub_116E0 ;~ 01A2:6D84
cs=0x1a2;eip=0x006d87; 	X(POP(si));	// 16974                  pop     si ;~ 01A2:6D87
cs=0x1a2;eip=0x006d88; 	J(JNZ(loc_16d8d));	// 16975                  jnz     short loc_16D8D ;~ 01A2:6D88
cs=0x1a2;eip=0x006d8a; 	J(JMP(loc_16e85));	// 16976                  jmp     loc_16E85 ;~ 01A2:6D8A
loc_16d8d:
	// 5456 
cs=0x1a2;eip=0x006d8d; 	T(MOV(al, *(raddr(es,di+0x16))));	// 16980                  mov     al, es:[di+16h] ;~ 01A2:6D8D
cs=0x1a2;eip=0x006d91; 	T(CMP(al, 0x84));	// 16981                  cmp     al, 84h ;~ 01A2:6D91
cs=0x1a2;eip=0x006d93; 	J(JZ(loc_16d9b));	// 16982                  jz      short loc_16D9B ;~ 01A2:6D93
cs=0x1a2;eip=0x006d95; 	T(TEST(*(raddr(ds,si+0x12)), 0x40));	// 16983                  test    byte ptr [si+12h], 40h ;~ 01A2:6D95
cs=0x1a2;eip=0x006d99; 	J(JZ(loc_16da0));	// 16984                  jz      short loc_16DA0 ;~ 01A2:6D99
loc_16d9b:
	// 5457 
cs=0x1a2;eip=0x006d9b; 	T(al = 0x0FF;);	// 16987                  mov     al, 0FFh ;~ 01A2:6D9B
cs=0x1a2;eip=0x006d9d; 	T(OR(al, al));	// 16988                  or      al, al ;~ 01A2:6D9D
cs=0x1a2;eip=0x006d9f; 	J(RETN(0));	// 16989                  retn ;~ 01A2:6D9F
loc_16da0:
	// 5458 
cs=0x1a2;eip=0x006da0; 	T(MOV(di, *(dw*)(raddr(ds,0x3C))));	// 16993                  mov     di, ds:3Ch ;~ 01A2:6DA0
cs=0x1a2;eip=0x006da4; 	T(CMP(*(raddr(ds,di)), 0));	// 16994                  cmp     byte ptr [di], 0 ;~ 01A2:6DA4
cs=0x1a2;eip=0x006da7; 	J(JNS(loc_16dac));	// 16995                  jns     short loc_16DAC ;~ 01A2:6DA7
cs=0x1a2;eip=0x006da9; 	J(JMP(loc_16e5d));	// 16996                  jmp     loc_16E5D ;~ 01A2:6DA9
loc_16dac:
	// 5459 
cs=0x1a2;eip=0x006dac; 	X(PUSH(bp));	// 17000                  push    bp ;~ 01A2:6DAC
cs=0x1a2;eip=0x006dad; 	T(MOV(bp, *(dw*)(raddr(ds,0x75C))));	// 17001                  mov     bp, ds:75Ch ;~ 01A2:6DAD
cs=0x1a2;eip=0x006db1; 	J(CALL(sub_16b02,0));	// 17002                  call    sub_16B02 ;~ 01A2:6DB1
cs=0x1a2;eip=0x006db4; 	X(POP(bp));	// 17003                  pop     bp ;~ 01A2:6DB4
cs=0x1a2;eip=0x006db5; 	J(JNS(loc_16dba));	// 17004                  jns     short loc_16DBA ;~ 01A2:6DB5
cs=0x1a2;eip=0x006db7; 	J(JMP(loc_16e5d));	// 17005                  jmp     loc_16E5D ;~ 01A2:6DB7
loc_16dba:
	// 5460 
cs=0x1a2;eip=0x006dba; 	T(TEST(*(raddr(ds,si+0x12)), 0x10));	// 17009                  test    byte ptr [si+12h], 10h ;~ 01A2:6DBA
cs=0x1a2;eip=0x006dbe; 	X(PUSHF);	// 17010                  pushf ;~ 01A2:6DBE
cs=0x1a2;eip=0x006dbf; 	X(OR(*(raddr(ds,si+0x12)), 0x10));	// 17011                  or      byte ptr [si+12h], 10h ;~ 01A2:6DBF
cs=0x1a2;eip=0x006dc3; 	X(POPF);	// 17012                  popf ;~ 01A2:6DC3
cs=0x1a2;eip=0x006dc4; 	X(PUSH(ax));	// 17013                  push    ax ;~ 01A2:6DC4
cs=0x1a2;eip=0x006dc5; 	X(PUSH(bx));	// 17014                  push    bx ;~ 01A2:6DC5
cs=0x1a2;eip=0x006dc6; 	X(PUSH(cx));	// 17015                  push    cx ;~ 01A2:6DC6
cs=0x1a2;eip=0x006dc7; 	X(PUSH(dx));	// 17016                  push    dx ;~ 01A2:6DC7
cs=0x1a2;eip=0x006dc8; 	X(PUSH(bp));	// 17017                  push    bp ;~ 01A2:6DC8
cs=0x1a2;eip=0x006dc9; 	X(PUSH(si));	// 17018                  push    si ;~ 01A2:6DC9
cs=0x1a2;eip=0x006dca; 	X(PUSH(di));	// 17019                  push    di ;~ 01A2:6DCA
cs=0x1a2;eip=0x006dcb; 	X(PUSH(es));	// 17020                  push    es ;~ 01A2:6DCB
cs=0x1a2;eip=0x006dcc; 	X(PUSH(ds));	// 17021                  push    ds ;~ 01A2:6DCC
cs=0x1a2;eip=0x006dcd; 	T(XOR(dx, dx));	// 17022                  xor     dx, dx ;~ 01A2:6DCD
cs=0x1a2;eip=0x006dcf; 	X(MOV(*(dw*)(raddr(ds,0x75E)), bp));	// 17023                  mov     ds:75Eh, bp ;~ 01A2:6DCF
cs=0x1a2;eip=0x006dd3; 	T(OR(bp, bp));	// 17024                  or      bp, bp ;~ 01A2:6DD3
cs=0x1a2;eip=0x006dd5; 	J(JZ(loc_16ddf));	// 17025                  jz      short loc_16DDF ;~ 01A2:6DD5
cs=0x1a2;eip=0x006dd7; 	T(MOV(dl, *(raddr(ds,bp+0))));	// 17026                  mov     dl, ds:[bp+0] ;~ 01A2:6DD7
cs=0x1a2;eip=0x006ddb; 	T(MOV(dh, *(raddr(ds,bp+1))));	// 17027                  mov     dh, ds:[bp+1] ;~ 01A2:6DDB
loc_16ddf:
	// 5461 
cs=0x1a2;eip=0x006ddf; 	X(PUSH(di));	// 17030                  push    di ;~ 01A2:6DDF
cs=0x1a2;eip=0x006de0; 	X(PUSH(si));	// 17031                  push    si ;~ 01A2:6DE0
cs=0x1a2;eip=0x006de1; 	T(si = bx;);	// 17032                  mov     si, bx ;~ 01A2:6DE1
cs=0x1a2;eip=0x006de3; 	J(CALL(sub_11a49,0));	// 17033                  call    sub_11A49 ;~ 01A2:6DE3
cs=0x1a2;eip=0x006de6; 	J(CALL(sub_11c76,0));	// 17034                  call    sub_11C76 ;~ 01A2:6DE6
cs=0x1a2;eip=0x006de9; 	X(MOV(*(raddr(ds,0x602)), 0));	// 17035                  mov     byte ptr ds:602h, 0 ;~ 01A2:6DE9
cs=0x1a2;eip=0x006dee; 	T(MOV(ax, *(dw*)(raddr(ds,0x80))));	// 17036                  mov     ax, ds:80h ;~ 01A2:6DEE
cs=0x1a2;eip=0x006df1; 	X(MOV(*(dw*)(raddr(ds,0x82)), ax));	// 17037                  mov     ds:82h, ax ;~ 01A2:6DF1
cs=0x1a2;eip=0x006df4; 	T(MOV(ax, *(dw*)(raddr(ds,0x59C))));	// 17038                  mov     ax, ds:59Ch ;~ 01A2:6DF4
cs=0x1a2;eip=0x006df7; 	X(MOV(*(dw*)(raddr(ds,0x25E)), ax));	// 17039                  mov     ds:25Eh, ax ;~ 01A2:6DF7
cs=0x1a2;eip=0x006dfa; 	X(PUSH(ax));	// 17040                  push    ax ;~ 01A2:6DFA
cs=0x1a2;eip=0x006dfb; 	T(MOV(ax, *(dw*)(raddr(ds,0x84))));	// 17041                  mov     ax, ds:84h ;~ 01A2:6DFB
cs=0x1a2;eip=0x006dfe; 	X(MOV(*(dw*)(raddr(ds,0x96)), ax));	// 17042                  mov     ds:96h, ax ;~ 01A2:6DFE
cs=0x1a2;eip=0x006e01; 	T(MOV(ax, *(dw*)(raddr(ds,0x226))));	// 17043                  mov     ax, ds:226h ;~ 01A2:6E01
cs=0x1a2;eip=0x006e04; 	X(MOV(*(dw*)(raddr(ds,0x598)), ax));	// 17044                  mov     ds:598h, ax ;~ 01A2:6E04
cs=0x1a2;eip=0x006e07; 	X(POP(ax));	// 17045                  pop     ax ;~ 01A2:6E07
cs=0x1a2;eip=0x006e08; 	T(ch = dl;);	// 17046                  mov     ch, dl ;~ 01A2:6E08
cs=0x1a2;eip=0x006e0a; 	T(OR(ch, dh));	// 17047                  or      ch, dh ;~ 01A2:6E0A
cs=0x1a2;eip=0x006e0c; 	J(JZ(loc_16e44));	// 17048                  jz      short loc_16E44 ;~ 01A2:6E0C
cs=0x1a2;eip=0x006e0e; 	T(si = di;);	// 17049                  mov     si, di ;~ 01A2:6E0E
cs=0x1a2;eip=0x006e10; 	T(di = bx;);	// 17050                  mov     di, bx ;~ 01A2:6E10
cs=0x1a2;eip=0x006e12; 	T(XOR(ch, ch));	// 17051                  xor     ch, ch ;~ 01A2:6E12
cs=0x1a2;eip=0x006e14; 	J(CALL(sub_165a1,0));	// 17052                  call    sub_165A1 ;~ 01A2:6E14
cs=0x1a2;eip=0x006e17; 	X(POP(si));	// 17053                  pop     si ;~ 01A2:6E17
cs=0x1a2;eip=0x006e18; 	X(POP(di));	// 17054                  pop     di ;~ 01A2:6E18
cs=0x1a2;eip=0x006e19; 	J(JNZ(loc_16e46));	// 17055                  jnz     short loc_16E46 ;~ 01A2:6E19
cs=0x1a2;eip=0x006e1b; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x2E))));	// 17056                  mov     ax, [si+2Eh] ;~ 01A2:6E1B
cs=0x1a2;eip=0x006e1e; 	X(MOV(*(dw*)(raddr(ds,0x5AC)), ax));	// 17057                  mov     ds:5ACh, ax ;~ 01A2:6E1E
cs=0x1a2;eip=0x006e21; 	J(CALL(sub_167df,0));	// 17058                  call    sub_167DF ;~ 01A2:6E21
cs=0x1a2;eip=0x006e24; 	X(POP(ds));	// 17059                  pop     ds ;~ 01A2:6E24
cs=0x1a2;eip=0x006e25; 	X(POP(es));	// 17060                  pop     es ;~ 01A2:6E25
cs=0x1a2;eip=0x006e26; 	X(POP(di));	// 17061                  pop     di ;~ 01A2:6E26
cs=0x1a2;eip=0x006e27; 	X(POP(si));	// 17062                  pop     si ;~ 01A2:6E27
cs=0x1a2;eip=0x006e28; 	X(POP(bp));	// 17063                  pop     bp ;~ 01A2:6E28
cs=0x1a2;eip=0x006e29; 	X(POP(dx));	// 17064                  pop     dx ;~ 01A2:6E29
cs=0x1a2;eip=0x006e2a; 	X(POP(cx));	// 17065                  pop     cx ;~ 01A2:6E2A
cs=0x1a2;eip=0x006e2b; 	X(POP(bx));	// 17066                  pop     bx ;~ 01A2:6E2B
cs=0x1a2;eip=0x006e2c; 	X(POP(ax));	// 17067                  pop     ax ;~ 01A2:6E2C
cs=0x1a2;eip=0x006e2d; 	X(PUSH(bp));	// 17068                  push    bp ;~ 01A2:6E2D
cs=0x1a2;eip=0x006e2e; 	X(PUSH(di));	// 17069                  push    di ;~ 01A2:6E2E
cs=0x1a2;eip=0x006e2f; 	X(PUSH(si));	// 17070                  push    si ;~ 01A2:6E2F
cs=0x1a2;eip=0x006e30; 	X(PUSH(es));	// 17071                  push    es ;~ 01A2:6E30
cs=0x1a2;eip=0x006e31; 	T(MOV(es, *(dw*)(raddr(ds,si+6))));	// 17072                  mov     es, word ptr [si+6] ;~ 01A2:6E31
cs=0x1a2;eip=0x006e34; 	T(MOV(di, *(dw*)(raddr(ds,si+8))));	// 17073                  mov     di, [si+8] ;~ 01A2:6E34
cs=0x1a2;eip=0x006e37; 	T(si = bx;);	// 17074                  mov     si, bx ;~ 01A2:6E37
cs=0x1a2;eip=0x006e39; 	J(CALL(sub_116e0,0));	// 17075                  call    sub_116E0 ;~ 01A2:6E39
cs=0x1a2;eip=0x006e3c; 	X(POP(es));	// 17076                  pop     es ;~ 01A2:6E3C
cs=0x1a2;eip=0x006e3d; 	X(POP(si));	// 17077                  pop     si ;~ 01A2:6E3D
cs=0x1a2;eip=0x006e3e; 	X(POP(di));	// 17078                  pop     di ;~ 01A2:6E3E
cs=0x1a2;eip=0x006e3f; 	X(POP(bp));	// 17079                  pop     bp ;~ 01A2:6E3F
cs=0x1a2;eip=0x006e40; 	J(JZ(loc_16e85));	// 17080                  jz      short loc_16E85 ;~ 01A2:6E40
cs=0x1a2;eip=0x006e42; 	J(JMP(loc_16e5d));	// 17081                  jmp     short loc_16E5D ;~ 01A2:6E42
loc_16e44:
	// 5462 
cs=0x1a2;eip=0x006e44; 	X(POP(si));	// 17085                  pop     si ;~ 01A2:6E44
cs=0x1a2;eip=0x006e45; 	X(POP(di));	// 17086                  pop     di ;~ 01A2:6E45
loc_16e46:
	// 5463 
cs=0x1a2;eip=0x006e46; 	X(PUSH(ax));	// 17089                  push    ax ;~ 01A2:6E46
cs=0x1a2;eip=0x006e47; 	T(MOV(ax, *(dw*)(raddr(ds,0x96))));	// 17090                  mov     ax, ds:96h ;~ 01A2:6E47
cs=0x1a2;eip=0x006e4a; 	X(MOV(*(dw*)(raddr(ds,0x84)), ax));	// 17091                  mov     ds:84h, ax ;~ 01A2:6E4A
cs=0x1a2;eip=0x006e4d; 	T(MOV(ax, *(dw*)(raddr(ds,0x598))));	// 17092                  mov     ax, ds:598h ;~ 01A2:6E4D
cs=0x1a2;eip=0x006e50; 	X(MOV(*(dw*)(raddr(ds,0x226)), ax));	// 17093                  mov     ds:226h, ax ;~ 01A2:6E50
cs=0x1a2;eip=0x006e53; 	X(POP(ax));	// 17094                  pop     ax ;~ 01A2:6E53
cs=0x1a2;eip=0x006e54; 	X(POP(ds));	// 17095                  pop     ds ;~ 01A2:6E54
cs=0x1a2;eip=0x006e55; 	X(POP(es));	// 17096                  pop     es ;~ 01A2:6E55
cs=0x1a2;eip=0x006e56; 	X(POP(di));	// 17097                  pop     di ;~ 01A2:6E56
cs=0x1a2;eip=0x006e57; 	X(POP(si));	// 17098                  pop     si ;~ 01A2:6E57
cs=0x1a2;eip=0x006e58; 	X(POP(bp));	// 17099                  pop     bp ;~ 01A2:6E58
cs=0x1a2;eip=0x006e59; 	X(POP(dx));	// 17100                  pop     dx ;~ 01A2:6E59
cs=0x1a2;eip=0x006e5a; 	X(POP(cx));	// 17101                  pop     cx ;~ 01A2:6E5A
cs=0x1a2;eip=0x006e5b; 	X(POP(bx));	// 17102                  pop     bx ;~ 01A2:6E5B
cs=0x1a2;eip=0x006e5c; 	X(POP(ax));	// 17103                  pop     ax ;~ 01A2:6E5C
loc_16e5d:
	// 5464 
cs=0x1a2;eip=0x006e5d; 	T(MOV(es, *(dw*)(raddr(ds,si+6))));	// 17107                  mov     es, word ptr [si+6] ;~ 01A2:6E5D
cs=0x1a2;eip=0x006e60; 	T(MOV(di, *(dw*)(raddr(ds,si+8))));	// 17108                  mov     di, [si+8] ;~ 01A2:6E60
cs=0x1a2;eip=0x006e63; 	X(MOV(*(dw*)(raddr(ds,si+0x1A)), 0));	// 17109                  mov     word ptr [si+1Ah], 0 ;~ 01A2:6E63
cs=0x1a2;eip=0x006e68; 	T(ax = 0x0FB8E;);	// 17110                  mov     ax, 0FB8Eh ;~ 01A2:6E68
cs=0x1a2;eip=0x006e6b; 	T(CMP(ax, *(dw*)(raddr(ds,0x75C))));	// 17111                  cmp     ax, ds:75Ch ;~ 01A2:6E6B
cs=0x1a2;eip=0x006e6f; 	J(JZ(loc_16e74));	// 17112                  jz      short loc_16E74 ;~ 01A2:6E6F
cs=0x1a2;eip=0x006e71; 	J(JMP(sub_16d3a));	// 17113                  jmp     sub_16D3A ;~ 01A2:6E71
loc_16e74:
	// 5465 
cs=0x1a2;eip=0x006e74; 	T(TEST(*(raddr(ds,si+0x12)), 0x10));	// 17117                  test    byte ptr [si+12h], 10h ;~ 01A2:6E74
cs=0x1a2;eip=0x006e78; 	J(JZ(loc_16e7d));	// 17118                  jz      short loc_16E7D ;~ 01A2:6E78
cs=0x1a2;eip=0x006e7a; 	J(JMP(loc_16f53));	// 17119                  jmp     loc_16F53 ;~ 01A2:6E7A
loc_16e7d:
	// 5466 
cs=0x1a2;eip=0x006e7d; 	X(MOV(*(dw*)(raddr(ds,si+0x18)), 0));	// 17123                  mov     word ptr [si+18h], 0 ;~ 01A2:6E7D
cs=0x1a2;eip=0x006e82; 	J(JMP(loc_16f53));	// 17124                  jmp     loc_16F53 ;~ 01A2:6E82
loc_16e85:
	// 5467 
cs=0x1a2;eip=0x006e85; 	X(PUSH(si));	// 17129                  push    si ;~ 01A2:6E85
cs=0x1a2;eip=0x006e86; 	T(MOV(si, *(dw*)(raddr(ds,0x75C))));	// 17130                  mov     si, ds:75Ch ;~ 01A2:6E86
cs=0x1a2;eip=0x006e8a; 	T(LODSB);	// 17131                  lodsb ;~ 01A2:6E8A
cs=0x1a2;eip=0x006e8b; 	T(CMP(*(raddr(ds,si)), 0x50));	// 17132                  cmp     byte ptr [si], 50h ; 'P' ;~ 01A2:6E8B
cs=0x1a2;eip=0x006e8e; 	J(JNZ(loc_16e91));	// 17133                  jnz     short loc_16E91 ;~ 01A2:6E8E
cs=0x1a2;eip=0x006e90; 	T(DEC(si));	// 17134                  dec     si ;~ 01A2:6E90
loc_16e91:
	// 5468 
cs=0x1a2;eip=0x006e91; 	X(MOV(*(dw*)(raddr(ds,0x75C)), si));	// 17137                  mov     ds:75Ch, si ;~ 01A2:6E91
cs=0x1a2;eip=0x006e95; 	X(POP(si));	// 17138                  pop     si ;~ 01A2:6E95
cs=0x1a2;eip=0x006e96; 	X(ADD(*(raddr(ds,bx+2)), al));	// 17139                  add     [bx+2], al ;~ 01A2:6E96
cs=0x1a2;eip=0x006e99; 	J(JNZ(loc_16ef4));	// 17140                  jnz     short loc_16EF4 ;~ 01A2:6E99
cs=0x1a2;eip=0x006e9b; 	T(OR(al, al));	// 17141                  or      al, al ;~ 01A2:6E9B
cs=0x1a2;eip=0x006e9d; 	J(JNS(loc_16ef4));	// 17142                  jns     short loc_16EF4 ;~ 01A2:6E9D
cs=0x1a2;eip=0x006e9f; 	T(MOV(ah, *(raddr(es,di+0x16))));	// 17143                  mov     ah, es:[di+16h] ;~ 01A2:6E9F
cs=0x1a2;eip=0x006ea3; 	T(CMP(ah, 0x84));	// 17144                  cmp     ah, 84h ;~ 01A2:6EA3
cs=0x1a2;eip=0x006ea6; 	J(JZ(loc_16eae));	// 17145                  jz      short loc_16EAE ;~ 01A2:6EA6
cs=0x1a2;eip=0x006ea8; 	T(TEST(*(raddr(ds,si+0x12)), 8));	// 17146                  test    byte ptr [si+12h], 8 ;~ 01A2:6EA8
cs=0x1a2;eip=0x006eac; 	J(JZ(loc_16eb1));	// 17147                  jz      short loc_16EB1 ;~ 01A2:6EAC
loc_16eae:
	// 5469 
cs=0x1a2;eip=0x006eae; 	T(XOR(al, al));	// 17150                  xor     al, al ;~ 01A2:6EAE
cs=0x1a2;eip=0x006eb0; 	J(RETN(0));	// 17151                  retn ;~ 01A2:6EB0
loc_16eb1:
	// 5470 
cs=0x1a2;eip=0x006eb1; 	X(MOV(*(dw*)(raddr(ds,0x75C)), 0));	// 17155                  mov     word ptr ds:75Ch, 0 ;~ 01A2:6EB1
cs=0x1a2;eip=0x006eb7; 	T(TEST(*(raddr(ds,si+0x12)), 1));	// 17156                  test    byte ptr [si+12h], 1 ;~ 01A2:6EB7
cs=0x1a2;eip=0x006ebb; 	X(PUSH(si));	// 17157                  push    si ;~ 01A2:6EBB
cs=0x1a2;eip=0x006ebc; 	T(MOV(si, *(dw*)(raddr(ds,0x84))));	// 17158                  mov     si, ds:84h ;~ 01A2:6EBC
cs=0x1a2;eip=0x006ec0; 	X(MOV(*(dw*)(raddr(ds,si)), 0x0B));	// 17159                  mov     word ptr [si], 0Bh ;~ 01A2:6EC0
cs=0x1a2;eip=0x006ec4; 	T(ADD(si, 2));	// 17160                  add     si, 2 ;~ 01A2:6EC4
cs=0x1a2;eip=0x006ec7; 	X(MOV(*(dw*)(raddr(ds,si)), bx));	// 17161                  mov     [si], bx ;~ 01A2:6EC7
cs=0x1a2;eip=0x006ec9; 	T(ADD(si, 2));	// 17162                  add     si, 2 ;~ 01A2:6EC9
cs=0x1a2;eip=0x006ecc; 	T(ADD(si, 2));	// 17163                  add     si, 2 ;~ 01A2:6ECC
cs=0x1a2;eip=0x006ecf; 	X(MOV(*(dw*)(raddr(ds,0x84)), si));	// 17164                  mov     ds:84h, si ;~ 01A2:6ECF
cs=0x1a2;eip=0x006ed3; 	X(INC(*(dw*)(raddr(ds,0x226))));	// 17165                  inc     word ptr ds:226h ;~ 01A2:6ED3
cs=0x1a2;eip=0x006ed7; 	X(POP(si));	// 17166                  pop     si ;~ 01A2:6ED7
cs=0x1a2;eip=0x006ed8; 	X(PUSH(di));	// 17167                  push    di ;~ 01A2:6ED8
cs=0x1a2;eip=0x006ed9; 	X(PUSH(es));	// 17168                  push    es ;~ 01A2:6ED9
cs=0x1a2;eip=0x006eda; 	X(PUSH(ax));	// 17169                  push    ax ;~ 01A2:6EDA
cs=0x1a2;eip=0x006edb; 	T(MOV(es, *(dw*)(raddr(ds,si+6))));	// 17170                  mov     es, word ptr [si+6] ;~ 01A2:6EDB
cs=0x1a2;eip=0x006ede; 	T(MOV(di, *(dw*)(raddr(ds,si+8))));	// 17171                  mov     di, [si+8] ;~ 01A2:6EDE
cs=0x1a2;eip=0x006ee1; 	T(XOR(ah, ah));	// 17172                  xor     ah, ah ;~ 01A2:6EE1
cs=0x1a2;eip=0x006ee3; 	T(MOV(al, *(raddr(es,di+0x1D))));	// 17173                  mov     al, es:[di+1Dh] ;~ 01A2:6EE3
cs=0x1a2;eip=0x006ee7; 	T(di = 0x0FEC6;);	// 17174                  mov     di, 0FEC6h ;~ 01A2:6EE7
cs=0x1a2;eip=0x006eea; 	T(ADD(di, ax));	// 17175                  add     di, ax ;~ 01A2:6EEA
cs=0x1a2;eip=0x006eec; 	T(MOV(al, *(raddr(ds,di))));	// 17176                  mov     al, [di] ;~ 01A2:6EEC
cs=0x1a2;eip=0x006eee; 	J(CALL(sub_1164e,0));	// 17177                  call    sub_1164E ;~ 01A2:6EEE
cs=0x1a2;eip=0x006ef1; 	X(POP(ax));	// 17178                  pop     ax ;~ 01A2:6EF1
cs=0x1a2;eip=0x006ef2; 	X(POP(es));	// 17179                  pop     es ;~ 01A2:6EF2
cs=0x1a2;eip=0x006ef3; 	X(POP(di));	// 17180                  pop     di ;~ 01A2:6EF3
loc_16ef4:
	// 5471 
cs=0x1a2;eip=0x006ef4; 	X(ADD(*(raddr(ds,si+4)), al));	// 17184                  add     [si+4], al ;~ 01A2:6EF4
cs=0x1a2;eip=0x006ef7; 	X(ADD(*(raddr(ds,si+5)), al));	// 17185                  add     [si+5], al ;~ 01A2:6EF7
cs=0x1a2;eip=0x006efa; 	T(MOV(ax, *(dw*)(raddr(ds,0x75C))));	// 17186                  mov     ax, ds:75Ch ;~ 01A2:6EFA
cs=0x1a2;eip=0x006efd; 	X(MOV(*(dw*)(raddr(ds,si+0x18)), ax));	// 17187                  mov     [si+18h], ax ;~ 01A2:6EFD
cs=0x1a2;eip=0x006f00; 	T(OR(bp, bp));	// 17188                  or      bp, bp ;~ 01A2:6F00
cs=0x1a2;eip=0x006f02; 	J(JZ(loc_16f32));	// 17189                  jz      short loc_16F32 ;~ 01A2:6F02
cs=0x1a2;eip=0x006f04; 	X(MOV(*(dw*)(raddr(ds,si+0x1A)), bp));	// 17190                  mov     [si+1Ah], bp ;~ 01A2:6F04
cs=0x1a2;eip=0x006f07; 	X(ADD(*(dw*)(raddr(ds,si+0x1A)), 2));	// 17191                  add     word ptr [si+1Ah], 2 ;~ 01A2:6F07
cs=0x1a2;eip=0x006f0b; 	T(MOV(ax, *(dw*)(raddr(ds,bp+0))));	// 17192                  mov     ax, ds:[bp+0] ;~ 01A2:6F0B
cs=0x1a2;eip=0x006f0f; 	T(OR(ax, ax));	// 17193                  or      ax, ax ;~ 01A2:6F0F
cs=0x1a2;eip=0x006f11; 	J(JNZ(loc_16f19));	// 17194                  jnz     short loc_16F19 ;~ 01A2:6F11
cs=0x1a2;eip=0x006f13; 	X(MOV(*(dw*)(raddr(ds,si+0x1A)), bp));	// 17195                  mov     [si+1Ah], bp ;~ 01A2:6F13
cs=0x1a2;eip=0x006f16; 	T(ADD(bp, 2));	// 17196                  add     bp, 2 ;~ 01A2:6F16
loc_16f19:
	// 5472 
cs=0x1a2;eip=0x006f19; 	T(MOV(al, *(raddr(ds,bp+0))));	// 17199                  mov     al, ds:[bp+0] ;~ 01A2:6F19
cs=0x1a2;eip=0x006f1d; 	T(INC(bp));	// 17200                  inc     bp ;~ 01A2:6F1D
cs=0x1a2;eip=0x006f1e; 	X(ADD(*(raddr(ds,bx)), al));	// 17201                  add     [bx], al ;~ 01A2:6F1E
cs=0x1a2;eip=0x006f20; 	X(ADD(*(raddr(ds,si)), al));	// 17202                  add     [si], al ;~ 01A2:6F20
cs=0x1a2;eip=0x006f22; 	X(ADD(*(raddr(ds,si+2)), al));	// 17203                  add     [si+2], al ;~ 01A2:6F22
cs=0x1a2;eip=0x006f25; 	T(MOV(al, *(raddr(ds,bp+0))));	// 17204                  mov     al, ds:[bp+0] ;~ 01A2:6F25
cs=0x1a2;eip=0x006f29; 	X(ADD(*(raddr(ds,bx+1)), al));	// 17205                  add     [bx+1], al ;~ 01A2:6F29
cs=0x1a2;eip=0x006f2c; 	X(ADD(*(raddr(ds,si+1)), al));	// 17206                  add     [si+1], al ;~ 01A2:6F2C
cs=0x1a2;eip=0x006f2f; 	X(ADD(*(raddr(ds,si+3)), al));	// 17207                  add     [si+3], al ;~ 01A2:6F2F
loc_16f32:
	// 5473 
cs=0x1a2;eip=0x006f32; 	T(TEST(*(raddr(ds,si+0x12)), 1));	// 17210                  test    byte ptr [si+12h], 1 ;~ 01A2:6F32
cs=0x1a2;eip=0x006f36; 	X(PUSHF);	// 17211                  pushf ;~ 01A2:6F36
cs=0x1a2;eip=0x006f37; 	X(AND(*(raddr(ds,si+0x12)), 0x0FE));	// 17212                  and     byte ptr [si+12h], 0FEh ;~ 01A2:6F37
cs=0x1a2;eip=0x006f3b; 	X(POPF);	// 17213                  popf ;~ 01A2:6F3B
cs=0x1a2;eip=0x006f3c; 	X(PUSH(ax));	// 17214                  push    ax ;~ 01A2:6F3C
cs=0x1a2;eip=0x006f3d; 	X(PUSH(bx));	// 17215                  push    bx ;~ 01A2:6F3D
cs=0x1a2;eip=0x006f3e; 	X(PUSH(cx));	// 17216                  push    cx ;~ 01A2:6F3E
cs=0x1a2;eip=0x006f3f; 	X(PUSH(dx));	// 17217                  push    dx ;~ 01A2:6F3F
cs=0x1a2;eip=0x006f40; 	X(PUSH(bp));	// 17218                  push    bp ;~ 01A2:6F40
cs=0x1a2;eip=0x006f41; 	X(PUSH(si));	// 17219                  push    si ;~ 01A2:6F41
cs=0x1a2;eip=0x006f42; 	X(PUSH(di));	// 17220                  push    di ;~ 01A2:6F42
cs=0x1a2;eip=0x006f43; 	X(PUSH(es));	// 17221                  push    es ;~ 01A2:6F43
cs=0x1a2;eip=0x006f44; 	X(PUSH(ds));	// 17222                  push    ds ;~ 01A2:6F44
cs=0x1a2;eip=0x006f45; 	T(di = bx;);	// 17223                  mov     di, bx ;~ 01A2:6F45
cs=0x1a2;eip=0x006f47; 	J(CALL(sub_1530e,0));	// 17224                  call    sub_1530E ;~ 01A2:6F47
cs=0x1a2;eip=0x006f4a; 	X(POP(ds));	// 17225                  pop     ds ;~ 01A2:6F4A
cs=0x1a2;eip=0x006f4b; 	X(POP(es));	// 17226                  pop     es ;~ 01A2:6F4B
cs=0x1a2;eip=0x006f4c; 	X(POP(di));	// 17227                  pop     di ;~ 01A2:6F4C
cs=0x1a2;eip=0x006f4d; 	X(POP(si));	// 17228                  pop     si ;~ 01A2:6F4D
cs=0x1a2;eip=0x006f4e; 	X(POP(bp));	// 17229                  pop     bp ;~ 01A2:6F4E
cs=0x1a2;eip=0x006f4f; 	X(POP(dx));	// 17230                  pop     dx ;~ 01A2:6F4F
cs=0x1a2;eip=0x006f50; 	X(POP(cx));	// 17231                  pop     cx ;~ 01A2:6F50
cs=0x1a2;eip=0x006f51; 	X(POP(bx));	// 17232                  pop     bx ;~ 01A2:6F51
cs=0x1a2;eip=0x006f52; 	X(POP(ax));	// 17233                  pop     ax ;~ 01A2:6F52
loc_16f53:
	// 5474 
cs=0x1a2;eip=0x006f53; 	T(al = 1;);	// 17237                  mov     al, 1 ;~ 01A2:6F53
cs=0x1a2;eip=0x006f55; 	T(OR(al, al));	// 17238                  or      al, al ;~ 01A2:6F55
cs=0x1a2;eip=0x006f57; 	J(RETN(0));	// 17239                  retn ;~ 01A2:6F57
loc_16f62:
	// 5475 
cs=0x1a2;eip=0x006f62; 	T(bx = word_1f19a;);	// 17255                  mov     bx, word_1F19A ;~ 01A2:6F62
cs=0x1a2;eip=0x006f66; 	T(ax = word_1f394;);	// 17256                  mov     ax, ds:word_1F394 ;~ 01A2:6F66
cs=0x1a2;eip=0x006f69; 	T(DEC(ax));	// 17257                  dec     ax ;~ 01A2:6F69
cs=0x1a2;eip=0x006f6a; 	X(word_1f8d0 = ax;);	// 17258                  mov     ds:word_1F8D0, ax ;~ 01A2:6F6A
loc_16f6d:
	// 5476 
cs=0x1a2;eip=0x006f6d; 	X(*(dw*)(&unk_1f8d2) = bx;);	// 17261                  mov     word ptr ds:unk_1F8D2, bx ;~ 01A2:6F6D
cs=0x1a2;eip=0x006f71; 	T(CMP(*(dw*)(raddr(ds,bx)), 0));	// 17262                  cmp     word ptr [bx], 0 ;~ 01A2:6F71
cs=0x1a2;eip=0x006f74; 	J(JNS(loc_16f79));	// 17263                  jns     short loc_16F79 ;~ 01A2:6F74
cs=0x1a2;eip=0x006f76; 	J(JMP(loc_1758d));	// 17264                  jmp     loc_1758D ;~ 01A2:6F76
loc_16f79:
	// 5477 
cs=0x1a2;eip=0x006f79; 	T(TEST(*(raddr(ds,bx+0x23)), 1));	// 17268                  test    byte ptr [bx+23h], 1 ;~ 01A2:6F79
cs=0x1a2;eip=0x006f7d; 	X(PUSHF);	// 17269                  pushf ;~ 01A2:6F7D
cs=0x1a2;eip=0x006f7e; 	X(AND(*(raddr(ds,bx+0x23)), 0x0FE));	// 17270                  and     byte ptr [bx+23h], 0FEh ;~ 01A2:6F7E
cs=0x1a2;eip=0x006f82; 	X(POPF);	// 17271                  popf ;~ 01A2:6F82
cs=0x1a2;eip=0x006f83; 	J(JZ(loc_16f8e));	// 17272                  jz      short loc_16F8E ;~ 01A2:6F83
cs=0x1a2;eip=0x006f85; 	X(PUSH(dx));	// 17273                  push    dx ;~ 01A2:6F85
cs=0x1a2;eip=0x006f86; 	X(PUSH(cx));	// 17274                  push    cx ;~ 01A2:6F86
cs=0x1a2;eip=0x006f87; 	X(PUSH(bx));	// 17275                  push    bx ;~ 01A2:6F87
cs=0x1a2;eip=0x006f88; 	T(MOV(si, *(dw*)(raddr(ds,bx+0x0A))));	// 17276                  mov     si, [bx+0Ah] ;~ 01A2:6F88
cs=0x1a2;eip=0x006f8b; 	J(JMP(loc_172ec));	// 17277                  jmp     loc_172EC ;~ 01A2:6F8B
loc_16f8e:
	// 5478 
cs=0x1a2;eip=0x006f8e; 	T(TEST(*(raddr(ds,bx+0x12)), 0x20));	// 17281                  test    byte ptr [bx+12h], 20h ;~ 01A2:6F8E
cs=0x1a2;eip=0x006f92; 	X(PUSHF);	// 17282                  pushf ;~ 01A2:6F92
cs=0x1a2;eip=0x006f93; 	X(AND(*(raddr(ds,bx+0x12)), 0x0DF));	// 17283                  and     byte ptr [bx+12h], 0DFh ;~ 01A2:6F93
cs=0x1a2;eip=0x006f97; 	X(POPF);	// 17284                  popf ;~ 01A2:6F97
cs=0x1a2;eip=0x006f98; 	J(JZ(loc_16fa0));	// 17285                  jz      short loc_16FA0 ;~ 01A2:6F98
loc_16f9a:
	// 5479 
cs=0x1a2;eip=0x006f9a; 	X(PUSH(dx));	// 17288                  push    dx ;~ 01A2:6F9A
cs=0x1a2;eip=0x006f9b; 	X(PUSH(cx));	// 17289                  push    cx ;~ 01A2:6F9B
cs=0x1a2;eip=0x006f9c; 	X(PUSH(bx));	// 17290                  push    bx ;~ 01A2:6F9C
cs=0x1a2;eip=0x006f9d; 	J(JMP(loc_17403));	// 17291                  jmp     loc_17403 ;~ 01A2:6F9D
loc_16fa0:
	// 5480 
cs=0x1a2;eip=0x006fa0; 	T(TEST(*(raddr(ds,bx+0x27)), 1));	// 17295                  test    byte ptr [bx+27h], 1 ;~ 01A2:6FA0
cs=0x1a2;eip=0x006fa4; 	J(JNZ(loc_16fa9));	// 17296                  jnz     short loc_16FA9 ;~ 01A2:6FA4
cs=0x1a2;eip=0x006fa6; 	J(JMP(loc_1758d));	// 17297                  jmp     loc_1758D ;~ 01A2:6FA6
loc_16fa9:
	// 5481 
cs=0x1a2;eip=0x006fa9; 	T(TEST(*(raddr(ds,bx+0x27)), 0x20));	// 17301                  test    byte ptr [bx+27h], 20h ;~ 01A2:6FA9
cs=0x1a2;eip=0x006fad; 	J(JZ(loc_16fb2));	// 17302                  jz      short loc_16FB2 ;~ 01A2:6FAD
cs=0x1a2;eip=0x006faf; 	J(JMP(loc_1758d));	// 17303                  jmp     loc_1758D ;~ 01A2:6FAF
loc_16fb2:
	// 5482 
cs=0x1a2;eip=0x006fb2; 	T(MOV(si, *(dw*)(raddr(ds,bx+0x0A))));	// 17307                  mov     si, [bx+0Ah] ;~ 01A2:6FB2
cs=0x1a2;eip=0x006fb5; 	T(TEST(*(raddr(ds,si+3)), 0x10));	// 17308                  test    byte ptr [si+3], 10h ;~ 01A2:6FB5
cs=0x1a2;eip=0x006fb9; 	J(JNZ(loc_16fbe));	// 17309                  jnz     short loc_16FBE ;~ 01A2:6FB9
cs=0x1a2;eip=0x006fbb; 	J(JMP(loc_17547));	// 17310                  jmp     loc_17547 ;~ 01A2:6FBB
loc_16fbe:
	// 5483 
cs=0x1a2;eip=0x006fbe; 	T(di = si;);	// 17314                  mov     di, si ;~ 01A2:6FBE
cs=0x1a2;eip=0x006fc0; 	T(XOR(ah, ah));	// 17315                  xor     ah, ah ;~ 01A2:6FC0
cs=0x1a2;eip=0x006fc2; 	T(MOV(al, *(raddr(ds,si+0x0D))));	// 17316                  mov     al, [si+0Dh] ;~ 01A2:6FC2
cs=0x1a2;eip=0x006fc5; 	T(ADD(di, ax));	// 17317                  add     di, ax ;~ 01A2:6FC5
cs=0x1a2;eip=0x006fc7; 	T(MOV(al, *(raddr(ds,di+3))));	// 17318                  mov     al, [di+3] ;~ 01A2:6FC7
cs=0x1a2;eip=0x006fca; 	X(byte_1f83b = al;);	// 17319                  mov     ds:byte_1F83B, al ;~ 01A2:6FCA
cs=0x1a2;eip=0x006fcd; 	T(MOV(al, *(raddr(ds,di+4))));	// 17320                  mov     al, [di+4] ;~ 01A2:6FCD
cs=0x1a2;eip=0x006fd0; 	X(*(db*)(&off_1f83c) = al;);	// 17321                  mov     byte ptr ds:off_1F83C, al ;~ 01A2:6FD0
cs=0x1a2;eip=0x006fd3; 	T(MOV(al, *(raddr(ds,di+5))));	// 17322                  mov     al, [di+5] ;~ 01A2:6FD3
cs=0x1a2;eip=0x006fd6; 	X(*(db*)(((db*)&off_1f83c)+1) = al;);	// 17323                  mov     byte ptr ds:off_1F83C+1, al ;~ 01A2:6FD6
cs=0x1a2;eip=0x006fd9; 	T(MOV(al, *(raddr(ds,di))));	// 17324                  mov     al, [di] ;~ 01A2:6FD9
cs=0x1a2;eip=0x006fdb; 	T(OR(al, al));	// 17325                  or      al, al ;~ 01A2:6FDB
cs=0x1a2;eip=0x006fdd; 	J(JZ(loc_16ff8));	// 17326                  jz      short loc_16FF8 ;~ 01A2:6FDD
cs=0x1a2;eip=0x006fdf; 	T(CMP(al, 3));	// 17327                  cmp     al, 3 ;~ 01A2:6FDF
cs=0x1a2;eip=0x006fe1; 	J(JZ(loc_1703a));	// 17328                  jz      short loc_1703A ;~ 01A2:6FE1
cs=0x1a2;eip=0x006fe3; 	T(CMP(al, 2));	// 17329                  cmp     al, 2 ;~ 01A2:6FE3
cs=0x1a2;eip=0x006fe5; 	J(JZ(loc_16fea));	// 17330                  jz      short loc_16FEA ;~ 01A2:6FE5
cs=0x1a2;eip=0x006fe7; 	J(JMP(loc_17547));	// 17331                  jmp     loc_17547 ;~ 01A2:6FE7
loc_16fea:
	// 5484 
cs=0x1a2;eip=0x006fea; 	X(DEC(*(raddr(ds,di+2))));	// 17335                  dec     byte ptr [di+2] ;~ 01A2:6FEA
cs=0x1a2;eip=0x006fed; 	J(JZ(loc_16ff2));	// 17336                  jz      short loc_16FF2 ;~ 01A2:6FED
cs=0x1a2;eip=0x006fef; 	J(JMP(loc_17547));	// 17337                  jmp     loc_17547 ;~ 01A2:6FEF
loc_16ff2:
	// 5485 
cs=0x1a2;eip=0x006ff2; 	X(MOV(*(raddr(ds,di)), 0));	// 17341                  mov     byte ptr [di], 0 ;~ 01A2:6FF2
cs=0x1a2;eip=0x006ff5; 	J(JMP(loc_17149));	// 17342                  jmp     loc_17149 ;~ 01A2:6FF5
loc_16ff8:
	// 5486 
cs=0x1a2;eip=0x006ff8; 	T(MOV(al, *(raddr(ds,di+9))));	// 17347                  mov     al, [di+9] ;~ 01A2:6FF8
cs=0x1a2;eip=0x006ffb; 	T(OR(al, al));	// 17348                  or      al, al ;~ 01A2:6FFB
cs=0x1a2;eip=0x006ffd; 	J(JZ(loc_17015));	// 17349                  jz      short loc_17015 ;~ 01A2:6FFD
cs=0x1a2;eip=0x006fff; 	T(AND(al, 0x0F));	// 17350                  and     al, 0Fh ;~ 01A2:6FFF
cs=0x1a2;eip=0x007001; 	T(DEC(al));	// 17351                  dec     al ;~ 01A2:7001
cs=0x1a2;eip=0x007003; 	J(JS(loc_1700b));	// 17352                  js      short loc_1700B ;~ 01A2:7003
cs=0x1a2;eip=0x007005; 	X(DEC(*(raddr(ds,di+9))));	// 17353                  dec     byte ptr [di+9] ;~ 01A2:7005
cs=0x1a2;eip=0x007008; 	J(JMP(loc_17547));	// 17354                  jmp     loc_17547 ;~ 01A2:7008
loc_1700b:
	// 5487 
cs=0x1a2;eip=0x00700b; 	T(MOV(al, *(raddr(ds,di+9))));	// 17358                  mov     al, [di+9] ;~ 01A2:700B
cs=0x1a2;eip=0x00700e; 	T(cl = 4;);	// 17359                  mov     cl, 4 ;~ 01A2:700E
cs=0x1a2;eip=0x007010; 	T(SHR(al, cl));	// 17360                  shr     al, cl ;~ 01A2:7010
cs=0x1a2;eip=0x007012; 	X(OR(*(raddr(ds,di+9)), al));	// 17361                  or      [di+9], al ;~ 01A2:7012
loc_17015:
	// 5488 
cs=0x1a2;eip=0x007015; 	T(XOR(dx, dx));	// 17364                  xor     dx, dx ;~ 01A2:7015
cs=0x1a2;eip=0x007017; 	T(XOR(ch, ch));	// 17365                  xor     ch, ch ;~ 01A2:7017
cs=0x1a2;eip=0x007019; 	T(MOV(al, *(raddr(ds,di+3))));	// 17366                  mov     al, [di+3] ;~ 01A2:7019
cs=0x1a2;eip=0x00701c; 	T(OR(al, al));	// 17367                  or      al, al ;~ 01A2:701C
cs=0x1a2;eip=0x00701e; 	J(JZ(loc_17023));	// 17368                  jz      short loc_17023 ;~ 01A2:701E
cs=0x1a2;eip=0x007020; 	J(JMP(loc_170f4));	// 17369                  jmp     loc_170F4 ;~ 01A2:7020
loc_17023:
	// 5489 
cs=0x1a2;eip=0x007023; 	T(MOV(ah, *(raddr(ds,di+4))));	// 17373                  mov     ah, [di+4] ;~ 01A2:7023
cs=0x1a2;eip=0x007026; 	T(OR(ah, ah));	// 17374                  or      ah, ah ;~ 01A2:7026
cs=0x1a2;eip=0x007028; 	J(JZ(loc_1702d));	// 17375                  jz      short loc_1702D ;~ 01A2:7028
cs=0x1a2;eip=0x00702a; 	J(JMP(loc_17117));	// 17376                  jmp     loc_17117 ;~ 01A2:702A
loc_1702d:
	// 5490 
cs=0x1a2;eip=0x00702d; 	T(MOV(cl, *(raddr(ds,di+5))));	// 17380                  mov     cl, [di+5] ;~ 01A2:702D
cs=0x1a2;eip=0x007030; 	T(OR(cl, cl));	// 17381                  or      cl, cl ;~ 01A2:7030
cs=0x1a2;eip=0x007032; 	J(JNZ(loc_17037));	// 17382                  jnz     short loc_17037 ;~ 01A2:7032
cs=0x1a2;eip=0x007034; 	J(JMP(loc_17149));	// 17383                  jmp     loc_17149 ;~ 01A2:7034
loc_17037:
	// 5491 
cs=0x1a2;eip=0x007037; 	J(JMP(loc_17133));	// 17387                  jmp     loc_17133 ;~ 01A2:7037
loc_1703a:
	// 5492 
cs=0x1a2;eip=0x00703a; 	T(XOR(dx, dx));	// 17391                  xor     dx, dx ;~ 01A2:703A
cs=0x1a2;eip=0x00703c; 	T(XOR(ch, ch));	// 17392                  xor     ch, ch ;~ 01A2:703C
cs=0x1a2;eip=0x00703e; 	T(MOV(al, *(raddr(ds,di+9))));	// 17393                  mov     al, [di+9] ;~ 01A2:703E
cs=0x1a2;eip=0x007041; 	T(OR(al, al));	// 17394                  or      al, al ;~ 01A2:7041
cs=0x1a2;eip=0x007043; 	J(JZ(loc_17061));	// 17395                  jz      short loc_17061 ;~ 01A2:7043
cs=0x1a2;eip=0x007045; 	T(AND(al, 0x0F));	// 17396                  and     al, 0Fh ;~ 01A2:7045
cs=0x1a2;eip=0x007047; 	T(DEC(al));	// 17397                  dec     al ;~ 01A2:7047
cs=0x1a2;eip=0x007049; 	J(JS(loc_17057));	// 17398                  js      short loc_17057 ;~ 01A2:7049
cs=0x1a2;eip=0x00704b; 	X(DEC(*(raddr(ds,di+9))));	// 17399                  dec     byte ptr [di+9] ;~ 01A2:704B
cs=0x1a2;eip=0x00704e; 	T(TEST(*(raddr(ds,di+0x0D)), 1));	// 17400                  test    byte ptr [di+0Dh], 1 ;~ 01A2:704E
cs=0x1a2;eip=0x007052; 	J(JNZ(loc_17072));	// 17401                  jnz     short loc_17072 ;~ 01A2:7052
cs=0x1a2;eip=0x007054; 	J(JMP(loc_17547));	// 17402                  jmp     loc_17547 ;~ 01A2:7054
loc_17057:
	// 5493 
cs=0x1a2;eip=0x007057; 	T(MOV(al, *(raddr(ds,di+9))));	// 17406                  mov     al, [di+9] ;~ 01A2:7057
cs=0x1a2;eip=0x00705a; 	T(cl = 4;);	// 17407                  mov     cl, 4 ;~ 01A2:705A
cs=0x1a2;eip=0x00705c; 	T(SHR(al, cl));	// 17408                  shr     al, cl ;~ 01A2:705C
cs=0x1a2;eip=0x00705e; 	X(OR(*(raddr(ds,di+9)), al));	// 17409                  or      [di+9], al ;~ 01A2:705E
loc_17061:
	// 5494 
cs=0x1a2;eip=0x007061; 	T(TEST(*(raddr(ds,di+0x0D)), 1));	// 17412                  test    byte ptr [di+0Dh], 1 ;~ 01A2:7061
cs=0x1a2;eip=0x007065; 	J(JNZ(loc_17072));	// 17413                  jnz     short loc_17072 ;~ 01A2:7065
cs=0x1a2;eip=0x007067; 	T(TEST(*(raddr(ds,di+0x0D)), 0x40));	// 17414                  test    byte ptr [di+0Dh], 40h ;~ 01A2:7067
cs=0x1a2;eip=0x00706b; 	J(JZ(loc_17070));	// 17415                  jz      short loc_17070 ;~ 01A2:706B
cs=0x1a2;eip=0x00706d; 	J(JMP(loc_17547));	// 17416                  jmp     loc_17547 ;~ 01A2:706D
loc_17070:
	// 5495 
cs=0x1a2;eip=0x007070; 	J(JMP(loc_170dc));	// 17420                  jmp     short loc_170DC ;~ 01A2:7070
loc_17072:
	// 5496 
cs=0x1a2;eip=0x007072; 	T(MOV(dl, *(raddr(ds,di+0x0A))));	// 17425                  mov     dl, [di+0Ah] ;~ 01A2:7072
cs=0x1a2;eip=0x007075; 	T(MOV(dh, *(raddr(ds,di+0x0B))));	// 17426                  mov     dh, [di+0Bh] ;~ 01A2:7075
cs=0x1a2;eip=0x007078; 	T(MOV(ch, *(raddr(ds,di+0x0C))));	// 17427                  mov     ch, [di+0Ch] ;~ 01A2:7078
cs=0x1a2;eip=0x00707b; 	T(TEST(*(raddr(ds,di+0x0D)), 1));	// 17428                  test    byte ptr [di+0Dh], 1 ;~ 01A2:707B
cs=0x1a2;eip=0x00707f; 	X(PUSHF);	// 17429                  pushf ;~ 01A2:707F
cs=0x1a2;eip=0x007080; 	X(AND(*(raddr(ds,di+0x0D)), 0x0FE));	// 17430                  and     byte ptr [di+0Dh], 0FEh ;~ 01A2:7080
cs=0x1a2;eip=0x007084; 	X(POPF);	// 17431                  popf ;~ 01A2:7084
cs=0x1a2;eip=0x007085; 	T(XOR(al, al));	// 17432                  xor     al, al ;~ 01A2:7085
cs=0x1a2;eip=0x007087; 	T(CMP(*(raddr(ds,di+3)), 0));	// 17433                  cmp     byte ptr [di+3], 0 ;~ 01A2:7087
cs=0x1a2;eip=0x00708b; 	J(JZ(loc_1709f));	// 17434                  jz      short loc_1709F ;~ 01A2:708B
cs=0x1a2;eip=0x00708d; 	J(JS(loc_17097));	// 17435                  js      short loc_17097 ;~ 01A2:708D
cs=0x1a2;eip=0x00708f; 	X(DEC(*(raddr(ds,di+3))));	// 17436                  dec     byte ptr [di+3] ;~ 01A2:708F
cs=0x1a2;eip=0x007092; 	T(MOV(al, *(raddr(ds,di+6))));	// 17437                  mov     al, [di+6] ;~ 01A2:7092
cs=0x1a2;eip=0x007095; 	J(JMP(loc_1709f));	// 17438                  jmp     short loc_1709F ;~ 01A2:7095
loc_17097:
	// 5497 
cs=0x1a2;eip=0x007097; 	X(INC(*(raddr(ds,di+3))));	// 17442                  inc     byte ptr [di+3] ;~ 01A2:7097
cs=0x1a2;eip=0x00709a; 	T(MOV(al, *(raddr(ds,di+6))));	// 17443                  mov     al, [di+6] ;~ 01A2:709A
cs=0x1a2;eip=0x00709d; 	T(NEG(al));	// 17444                  neg     al ;~ 01A2:709D
loc_1709f:
	// 5498 
cs=0x1a2;eip=0x00709f; 	T(ADD(dl, al));	// 17448                  add     dl, al ;~ 01A2:709F
cs=0x1a2;eip=0x0070a1; 	T(XOR(al, al));	// 17449                  xor     al, al ;~ 01A2:70A1
cs=0x1a2;eip=0x0070a3; 	T(CMP(*(raddr(ds,di+4)), 0));	// 17450                  cmp     byte ptr [di+4], 0 ;~ 01A2:70A3
cs=0x1a2;eip=0x0070a7; 	J(JZ(loc_170bb));	// 17451                  jz      short loc_170BB ;~ 01A2:70A7
cs=0x1a2;eip=0x0070a9; 	J(JS(loc_170b3));	// 17452                  js      short loc_170B3 ;~ 01A2:70A9
cs=0x1a2;eip=0x0070ab; 	X(DEC(*(raddr(ds,di+4))));	// 17453                  dec     byte ptr [di+4] ;~ 01A2:70AB
cs=0x1a2;eip=0x0070ae; 	T(MOV(al, *(raddr(ds,di+7))));	// 17454                  mov     al, [di+7] ;~ 01A2:70AE
cs=0x1a2;eip=0x0070b1; 	J(JMP(loc_170bb));	// 17455                  jmp     short loc_170BB ;~ 01A2:70B1
loc_170b3:
	// 5499 
cs=0x1a2;eip=0x0070b3; 	X(INC(*(raddr(ds,di+4))));	// 17459                  inc     byte ptr [di+4] ;~ 01A2:70B3
cs=0x1a2;eip=0x0070b6; 	T(MOV(al, *(raddr(ds,di+7))));	// 17460                  mov     al, [di+7] ;~ 01A2:70B6
cs=0x1a2;eip=0x0070b9; 	T(NEG(al));	// 17461                  neg     al ;~ 01A2:70B9
loc_170bb:
	// 5500 
cs=0x1a2;eip=0x0070bb; 	T(ADD(dh, al));	// 17465                  add     dh, al ;~ 01A2:70BB
cs=0x1a2;eip=0x0070bd; 	T(XOR(al, al));	// 17466                  xor     al, al ;~ 01A2:70BD
cs=0x1a2;eip=0x0070bf; 	T(CMP(*(raddr(ds,di+5)), 0));	// 17467                  cmp     byte ptr [di+5], 0 ;~ 01A2:70BF
cs=0x1a2;eip=0x0070c3; 	J(JZ(loc_170d7));	// 17468                  jz      short loc_170D7 ;~ 01A2:70C3
cs=0x1a2;eip=0x0070c5; 	J(JS(loc_170cf));	// 17469                  js      short loc_170CF ;~ 01A2:70C5
cs=0x1a2;eip=0x0070c7; 	X(DEC(*(raddr(ds,di+5))));	// 17470                  dec     byte ptr [di+5] ;~ 01A2:70C7
cs=0x1a2;eip=0x0070ca; 	T(MOV(al, *(raddr(ds,di+8))));	// 17471                  mov     al, [di+8] ;~ 01A2:70CA
cs=0x1a2;eip=0x0070cd; 	J(JMP(loc_170d7));	// 17472                  jmp     short loc_170D7 ;~ 01A2:70CD
loc_170cf:
	// 5501 
cs=0x1a2;eip=0x0070cf; 	X(INC(*(raddr(ds,di+5))));	// 17476                  inc     byte ptr [di+5] ;~ 01A2:70CF
cs=0x1a2;eip=0x0070d2; 	T(MOV(al, *(raddr(ds,di+8))));	// 17477                  mov     al, [di+8] ;~ 01A2:70D2
cs=0x1a2;eip=0x0070d5; 	T(NEG(al));	// 17478                  neg     al ;~ 01A2:70D5
loc_170d7:
	// 5502 
cs=0x1a2;eip=0x0070d7; 	T(ADD(ch, al));	// 17482                  add     ch, al ;~ 01A2:70D7
cs=0x1a2;eip=0x0070d9; 	J(JMP(loc_171dd));	// 17483                  jmp     loc_171DD ;~ 01A2:70D9
loc_170dc:
	// 5503 
cs=0x1a2;eip=0x0070dc; 	T(MOV(al, *(raddr(ds,di+3))));	// 17487                  mov     al, [di+3] ;~ 01A2:70DC
cs=0x1a2;eip=0x0070df; 	T(OR(al, al));	// 17488                  or      al, al ;~ 01A2:70DF
cs=0x1a2;eip=0x0070e1; 	J(JNZ(loc_170f4));	// 17489                  jnz     short loc_170F4 ;~ 01A2:70E1
cs=0x1a2;eip=0x0070e3; 	T(MOV(ah, *(raddr(ds,di+4))));	// 17490                  mov     ah, [di+4] ;~ 01A2:70E3
cs=0x1a2;eip=0x0070e6; 	T(OR(ah, ah));	// 17491                  or      ah, ah ;~ 01A2:70E6
cs=0x1a2;eip=0x0070e8; 	J(JNZ(loc_17117));	// 17492                  jnz     short loc_17117 ;~ 01A2:70E8
cs=0x1a2;eip=0x0070ea; 	T(MOV(cl, *(raddr(ds,di+5))));	// 17493                  mov     cl, [di+5] ;~ 01A2:70EA
cs=0x1a2;eip=0x0070ed; 	T(OR(cl, cl));	// 17494                  or      cl, cl ;~ 01A2:70ED
cs=0x1a2;eip=0x0070ef; 	J(JNZ(loc_17133));	// 17495                  jnz     short loc_17133 ;~ 01A2:70EF
cs=0x1a2;eip=0x0070f1; 	J(JMP(loc_17547));	// 17496                  jmp     loc_17547 ;~ 01A2:70F1
loc_170f4:
	// 5504 
cs=0x1a2;eip=0x0070f4; 	J(JS(loc_170fe));	// 17501                  js      short loc_170FE ;~ 01A2:70F4
cs=0x1a2;eip=0x0070f6; 	X(DEC(*(raddr(ds,di+3))));	// 17502                  dec     byte ptr [di+3] ;~ 01A2:70F6
cs=0x1a2;eip=0x0070f9; 	T(MOV(dl, *(raddr(ds,di+6))));	// 17503                  mov     dl, [di+6] ;~ 01A2:70F9
cs=0x1a2;eip=0x0070fc; 	J(JMP(loc_17106));	// 17504                  jmp     short loc_17106 ;~ 01A2:70FC
loc_170fe:
	// 5505 
cs=0x1a2;eip=0x0070fe; 	X(INC(*(raddr(ds,di+3))));	// 17508                  inc     byte ptr [di+3] ;~ 01A2:70FE
cs=0x1a2;eip=0x007101; 	T(MOV(dl, *(raddr(ds,di+6))));	// 17509                  mov     dl, [di+6] ;~ 01A2:7101
cs=0x1a2;eip=0x007104; 	T(NEG(dl));	// 17510                  neg     dl ;~ 01A2:7104
loc_17106:
	// 5506 
cs=0x1a2;eip=0x007106; 	T(MOV(ah, *(raddr(ds,di+4))));	// 17513                  mov     ah, [di+4] ;~ 01A2:7106
cs=0x1a2;eip=0x007109; 	T(OR(ah, ah));	// 17514                  or      ah, ah ;~ 01A2:7109
cs=0x1a2;eip=0x00710b; 	J(JNZ(loc_17117));	// 17515                  jnz     short loc_17117 ;~ 01A2:710B
cs=0x1a2;eip=0x00710d; 	T(MOV(cl, *(raddr(ds,di+5))));	// 17516                  mov     cl, [di+5] ;~ 01A2:710D
cs=0x1a2;eip=0x007110; 	T(OR(cl, cl));	// 17517                  or      cl, cl ;~ 01A2:7110
cs=0x1a2;eip=0x007112; 	J(JNZ(loc_17133));	// 17518                  jnz     short loc_17133 ;~ 01A2:7112
cs=0x1a2;eip=0x007114; 	J(JMP(loc_171dd));	// 17519                  jmp     loc_171DD ;~ 01A2:7114
loc_17117:
	// 5507 
cs=0x1a2;eip=0x007117; 	J(JS(loc_17121));	// 17524                  js      short loc_17121 ;~ 01A2:7117
cs=0x1a2;eip=0x007119; 	X(DEC(*(raddr(ds,di+4))));	// 17525                  dec     byte ptr [di+4] ;~ 01A2:7119
cs=0x1a2;eip=0x00711c; 	T(MOV(dh, *(raddr(ds,di+7))));	// 17526                  mov     dh, [di+7] ;~ 01A2:711C
cs=0x1a2;eip=0x00711f; 	J(JMP(loc_17129));	// 17527                  jmp     short loc_17129 ;~ 01A2:711F
loc_17121:
	// 5508 
cs=0x1a2;eip=0x007121; 	X(INC(*(raddr(ds,di+4))));	// 17531                  inc     byte ptr [di+4] ;~ 01A2:7121
cs=0x1a2;eip=0x007124; 	T(MOV(dh, *(raddr(ds,di+7))));	// 17532                  mov     dh, [di+7] ;~ 01A2:7124
cs=0x1a2;eip=0x007127; 	T(NEG(dh));	// 17533                  neg     dh ;~ 01A2:7127
loc_17129:
	// 5509 
cs=0x1a2;eip=0x007129; 	T(MOV(cl, *(raddr(ds,di+5))));	// 17536                  mov     cl, [di+5] ;~ 01A2:7129
cs=0x1a2;eip=0x00712c; 	T(OR(cl, cl));	// 17537                  or      cl, cl ;~ 01A2:712C
cs=0x1a2;eip=0x00712e; 	J(JNZ(loc_17133));	// 17538                  jnz     short loc_17133 ;~ 01A2:712E
cs=0x1a2;eip=0x007130; 	J(JMP(loc_171dd));	// 17539                  jmp     loc_171DD ;~ 01A2:7130
loc_17133:
	// 5510 
cs=0x1a2;eip=0x007133; 	J(JS(loc_1713e));	// 17544                  js      short loc_1713E ;~ 01A2:7133
cs=0x1a2;eip=0x007135; 	X(DEC(*(raddr(ds,di+5))));	// 17545                  dec     byte ptr [di+5] ;~ 01A2:7135
cs=0x1a2;eip=0x007138; 	T(MOV(ch, *(raddr(ds,di+8))));	// 17546                  mov     ch, [di+8] ;~ 01A2:7138
cs=0x1a2;eip=0x00713b; 	J(JMP(loc_171dd));	// 17547                  jmp     loc_171DD ;~ 01A2:713B
loc_1713e:
	// 5511 
cs=0x1a2;eip=0x00713e; 	X(INC(*(raddr(ds,di+5))));	// 17551                  inc     byte ptr [di+5] ;~ 01A2:713E
cs=0x1a2;eip=0x007141; 	T(MOV(ch, *(raddr(ds,di+8))));	// 17552                  mov     ch, [di+8] ;~ 01A2:7141
cs=0x1a2;eip=0x007144; 	T(NEG(ch));	// 17553                  neg     ch ;~ 01A2:7144
cs=0x1a2;eip=0x007146; 	J(JMP(loc_171dd));	// 17554                  jmp     loc_171DD ;~ 01A2:7146
loc_17149:
	// 5512 
cs=0x1a2;eip=0x007149; 	T(XOR(ah, ah));	// 17559                  xor     ah, ah ;~ 01A2:7149
cs=0x1a2;eip=0x00714b; 	T(MOV(al, *(raddr(ds,di+1))));	// 17560                  mov     al, [di+1] ;~ 01A2:714B
cs=0x1a2;eip=0x00714e; 	T(bp = di;);	// 17561                  mov     bp, di ;~ 01A2:714E
cs=0x1a2;eip=0x007150; 	T(ADD(bp, ax));	// 17562                  add     bp, ax ;~ 01A2:7150
cs=0x1a2;eip=0x007152; 	T(ADD(bp, 0x0E));	// 17563                  add     bp, 0Eh ;~ 01A2:7152
cs=0x1a2;eip=0x007155; 	T(XOR(dh, dh));	// 17564                  xor     dh, dh ;~ 01A2:7155
cs=0x1a2;eip=0x007157; 	T(MOV(dl, *(raddr(ds,bp+0))));	// 17565                  mov     dl, ds:[bp+0] ;~ 01A2:7157
cs=0x1a2;eip=0x00715b; 	T(OR(dl, dl));	// 17566                  or      dl, dl ;~ 01A2:715B
cs=0x1a2;eip=0x00715d; 	J(JNZ(loc_1717c));	// 17567                  jnz     short loc_1717C ;~ 01A2:715D
cs=0x1a2;eip=0x00715f; 	T(ADD(al, 4));	// 17568                  add     al, 4 ;~ 01A2:715F
cs=0x1a2;eip=0x007161; 	X(MOV(*(raddr(ds,di+1)), al));	// 17569                  mov     [di+1], al ;~ 01A2:7161
cs=0x1a2;eip=0x007164; 	T(MOV(al, *(raddr(ds,bp+1))));	// 17570                  mov     al, ds:[bp+1] ;~ 01A2:7164
cs=0x1a2;eip=0x007168; 	X(MOV(*(raddr(ds,di+3)), al));	// 17571                  mov     [di+3], al ;~ 01A2:7168
cs=0x1a2;eip=0x00716b; 	T(MOV(al, *(raddr(ds,bp+2))));	// 17572                  mov     al, ds:[bp+2] ;~ 01A2:716B
cs=0x1a2;eip=0x00716f; 	X(MOV(*(raddr(ds,di+4)), al));	// 17573                  mov     [di+4], al ;~ 01A2:716F
cs=0x1a2;eip=0x007172; 	T(MOV(al, *(raddr(ds,bp+3))));	// 17574                  mov     al, ds:[bp+3] ;~ 01A2:7172
cs=0x1a2;eip=0x007176; 	X(MOV(*(raddr(ds,di+5)), al));	// 17575                  mov     [di+5], al ;~ 01A2:7176
cs=0x1a2;eip=0x007179; 	J(JMP(loc_16ff8));	// 17576                  jmp     loc_16FF8 ;~ 01A2:7179
loc_1717c:
	// 5513 
cs=0x1a2;eip=0x00717c; 	T(INC(bp));	// 17580                  inc     bp ;~ 01A2:717C
cs=0x1a2;eip=0x00717d; 	X(PUSH(bx));	// 17581                  push    bx ;~ 01A2:717D
cs=0x1a2;eip=0x00717e; 	T(bx = offset(seg000,byte_16f58););	// 17582                  mov     bx, offset byte_16F58 ;~ 01A2:717E
cs=0x1a2;eip=0x007181; 	T(ADD(dx, dx));	// 17583                  add     dx, dx ;~ 01A2:7181
cs=0x1a2;eip=0x007183; 	T(ADD(bx, dx));	// 17584                  add     bx, dx ;~ 01A2:7183
cs=0x1a2;eip=0x007185; 	T(MOV(dx, *(dw*)(raddr(cs,bx))));	// 17585                  mov     dx, cs:[bx] ;~ 01A2:7185
cs=0x1a2;eip=0x007188; 	X(POP(bx));	// 17586                  pop     bx ;~ 01A2:7188
cs=0x1a2;eip=0x007189; __disp=dx;
	J(return __dispatch_call(__disp, _state););	// 17587                  jmp     dx ;~ 01A2:7189
ret_1a2_718b:
	// 5514 
cs=0x1a2;eip=0x00718b; 	T(MOV(dl, *(raddr(ds,bp+0))));	// 17589                  mov     dl, ds:[bp+0] ;~ 01A2:718B
cs=0x1a2;eip=0x00718f; 	T(ADD(al, dl));	// 17590                  add     al, dl ;~ 01A2:718F
cs=0x1a2;eip=0x007191; 	X(MOV(*(raddr(ds,di+1)), al));	// 17591                  mov     [di+1], al ;~ 01A2:7191
cs=0x1a2;eip=0x007194; 	J(JMP(loc_17149));	// 17592                  jmp     short loc_17149 ;~ 01A2:7194
ret_1a2_7196:
	// 5515 
cs=0x1a2;eip=0x007196; 	T(MOV(dl, *(raddr(ds,bp+0))));	// 17594                  mov     dl, ds:[bp+0] ;~ 01A2:7196
cs=0x1a2;eip=0x00719a; 	X(MOV(*(raddr(ds,di+2)), dl));	// 17595                  mov     [di+2], dl ;~ 01A2:719A
cs=0x1a2;eip=0x00719d; 	X(MOV(*(raddr(ds,di)), 2));	// 17596                  mov     byte ptr [di], 2 ;~ 01A2:719D
cs=0x1a2;eip=0x0071a0; 	T(ADD(al, 2));	// 17597                  add     al, 2 ;~ 01A2:71A0
cs=0x1a2;eip=0x0071a2; 	X(MOV(*(raddr(ds,di+1)), al));	// 17598                  mov     [di+1], al ;~ 01A2:71A2
cs=0x1a2;eip=0x0071a5; 	J(JMP(loc_17547));	// 17599                  jmp     loc_17547 ;~ 01A2:71A5
ret_1a2_71a8:
	// 5516 
cs=0x1a2;eip=0x0071a8; 	X(MOV(*(raddr(ds,di)), 4));	// 17601                  mov     byte ptr [di], 4 ;~ 01A2:71A8
cs=0x1a2;eip=0x0071ab; 	J(JMP(loc_17547));	// 17602                  jmp     loc_17547 ;~ 01A2:71AB
ret_1a2_71ae:
	// 5517 
cs=0x1a2;eip=0x0071ae; 	T(XOR(dh, dh));	// 17604                  xor     dh, dh ;~ 01A2:71AE
cs=0x1a2;eip=0x0071b0; 	T(MOV(dl, *(raddr(ds,bp+0))));	// 17605                  mov     dl, ds:[bp+0] ;~ 01A2:71B0
cs=0x1a2;eip=0x0071b4; 	X(PUSH(si));	// 17606                  push    si ;~ 01A2:71B4
cs=0x1a2;eip=0x0071b5; 	T(si = word_1f1f4;);	// 17607                  mov     si, word_1F1F4 ;~ 01A2:71B5
cs=0x1a2;eip=0x0071b9; 	X(MOV(*(dw*)(raddr(ds,si)), 0x0C));	// 17608                  mov     word ptr [si], 0Ch ;~ 01A2:71B9
cs=0x1a2;eip=0x0071bd; 	T(ADD(si, 2));	// 17609                  add     si, 2 ;~ 01A2:71BD
cs=0x1a2;eip=0x0071c0; 	X(POP(*(dw*)(raddr(ds,si))));	// 17610                  pop     word ptr [si] ;~ 01A2:71C0
cs=0x1a2;eip=0x0071c2; 	X(PUSH(*(dw*)(raddr(ds,si))));	// 17611                  push    word ptr [si] ;~ 01A2:71C2
cs=0x1a2;eip=0x0071c4; 	T(ADD(si, 2));	// 17612                  add     si, 2 ;~ 01A2:71C4
cs=0x1a2;eip=0x0071c7; 	X(MOV(*(dw*)(raddr(ds,si)), dx));	// 17613                  mov     [si], dx ;~ 01A2:71C7
cs=0x1a2;eip=0x0071c9; 	T(ADD(si, 2));	// 17614                  add     si, 2 ;~ 01A2:71C9
cs=0x1a2;eip=0x0071cc; 	X(word_1f1f4 = si;);	// 17615                  mov     word_1F1F4, si ;~ 01A2:71CC
cs=0x1a2;eip=0x0071d0; 	X(INC(word_1f396));	// 17616                  inc     ds:word_1F396 ;~ 01A2:71D0
cs=0x1a2;eip=0x0071d4; 	X(POP(si));	// 17617                  pop     si ;~ 01A2:71D4
cs=0x1a2;eip=0x0071d5; 	T(ADD(al, 2));	// 17618                  add     al, 2 ;~ 01A2:71D5
cs=0x1a2;eip=0x0071d7; 	X(MOV(*(raddr(ds,di+1)), al));	// 17619                  mov     [di+1], al ;~ 01A2:71D7
cs=0x1a2;eip=0x0071da; 	J(JMP(loc_17547));	// 17620                  jmp     loc_17547 ;~ 01A2:71DA
loc_171dd:
	// 5518 
cs=0x1a2;eip=0x0071dd; 	T(MOV(bp, *(dw*)(raddr(ds,bx+8))));	// 17625                  mov     bp, [bx+8] ;~ 01A2:71DD
cs=0x1a2;eip=0x0071e0; 	T(MOV(es, *(dw*)(raddr(ds,bx+6))));	// 17626                  mov     es, word ptr [bx+6] ;~ 01A2:71E0
cs=0x1a2;eip=0x0071e3; 	T(CMP(*(raddr(es,bp+0x16)), 3));	// 17627                  cmp     byte ptr es:[bp+16h], 3 ;~ 01A2:71E3
cs=0x1a2;eip=0x0071e8; 	J(JNZ(loc_171f4));	// 17628                  jnz     short loc_171F4 ;~ 01A2:71E8
cs=0x1a2;eip=0x0071ea; 	T(CMP(byte_1f7bd, 0));	// 17629                  cmp     ds:byte_1F7BD, 0 ;~ 01A2:71EA
cs=0x1a2;eip=0x0071ef; 	J(JZ(loc_171f4));	// 17630                  jz      short loc_171F4 ;~ 01A2:71EF
cs=0x1a2;eip=0x0071f1; 	J(JMP(loc_174cb));	// 17631                  jmp     loc_174CB ;~ 01A2:71F1
loc_171f4:
	// 5519 
cs=0x1a2;eip=0x0071f4; 	X(PUSH(dx));	// 17636                  push    dx ;~ 01A2:71F4
cs=0x1a2;eip=0x0071f5; 	X(PUSH(cx));	// 17637                  push    cx ;~ 01A2:71F5
cs=0x1a2;eip=0x0071f6; 	T(ADD(dl, *(raddr(ds,si))));	// 17638                  add     dl, [si] ;~ 01A2:71F6
cs=0x1a2;eip=0x0071f8; 	T(ADD(dh, *(raddr(ds,si+1))));	// 17639                  add     dh, [si+1] ;~ 01A2:71F8
cs=0x1a2;eip=0x0071fb; 	T(ADD(ch, *(raddr(ds,si+2))));	// 17640                  add     ch, [si+2] ;~ 01A2:71FB
cs=0x1a2;eip=0x0071fe; 	T(TEST(*(raddr(es,bp+0x16)), 0x80));	// 17641                  test    byte ptr es:[bp+16h], 80h ;~ 01A2:71FE
cs=0x1a2;eip=0x007203; 	J(JNZ(loc_17208));	// 17642                  jnz     short loc_17208 ;~ 01A2:7203
cs=0x1a2;eip=0x007205; 	J(JMP(loc_1741e));	// 17643                  jmp     loc_1741E ;~ 01A2:7205
loc_17208:
	// 5520 
cs=0x1a2;eip=0x007208; 	X(PUSH(di));	// 17647                  push    di ;~ 01A2:7208
cs=0x1a2;eip=0x007209; 	T(di = bp;);	// 17648                  mov     di, bp ;~ 01A2:7209
cs=0x1a2;eip=0x00720b; 	J(CALL(sub_116e0,0));	// 17649                  call    sub_116E0 ;~ 01A2:720B
cs=0x1a2;eip=0x00720e; 	X(POP(di));	// 17650                  pop     di ;~ 01A2:720E
cs=0x1a2;eip=0x00720f; 	J(JNZ(loc_17214));	// 17651                  jnz     short loc_17214 ;~ 01A2:720F
cs=0x1a2;eip=0x007211; 	J(JMP(loc_174ed));	// 17652                  jmp     loc_174ED ;~ 01A2:7211
loc_17214:
	// 5521 
cs=0x1a2;eip=0x007214; 	T(cl = 1;);	// 17656                  mov     cl, 1 ;~ 01A2:7214
loc_17216:
	// 5522 
cs=0x1a2;eip=0x007216; 	X(PUSH(bx));	// 17659                  push    bx ;~ 01A2:7216
cs=0x1a2;eip=0x007217; 	T(bx = word_1f1ac;);	// 17660                  mov     bx, word_1F1AC ;~ 01A2:7217
cs=0x1a2;eip=0x00721b; 	T(CMP(*(raddr(ds,bx)), 0x0FE));	// 17661                  cmp     byte ptr [bx], 0FEh ;~ 01A2:721B
cs=0x1a2;eip=0x00721e; 	J(JNZ(loc_17223));	// 17662                  jnz     short loc_17223 ;~ 01A2:721E
cs=0x1a2;eip=0x007220; 	J(JMP(loc_1739d));	// 17663                  jmp     loc_1739D ;~ 01A2:7220
loc_17223:
	// 5523 
cs=0x1a2;eip=0x007223; 	T(CMP(*(raddr(ds,bx)), 0x0FF));	// 17667                  cmp     byte ptr [bx], 0FFh ;~ 01A2:7223
cs=0x1a2;eip=0x007226; 	J(JNZ(loc_1722b));	// 17668                  jnz     short loc_1722B ;~ 01A2:7226
cs=0x1a2;eip=0x007228; 	J(JMP(loc_17400));	// 17669                  jmp     loc_17400 ;~ 01A2:7228
loc_1722b:
	// 5524 
cs=0x1a2;eip=0x00722b; 	T(MOV(cl, *(raddr(ds,bx))));	// 17673                  mov     cl, [bx] ;~ 01A2:722B
cs=0x1a2;eip=0x00722d; 	T(DEC(cl));	// 17674                  dec     cl ;~ 01A2:722D
cs=0x1a2;eip=0x00722f; 	T(ADD(bx, 2));	// 17675                  add     bx, 2 ;~ 01A2:722F
cs=0x1a2;eip=0x007232; 	T(CMP(*(raddr(es,bp+0x16)), 0x81));	// 17676                  cmp     byte ptr es:[bp+16h], 81h ;~ 01A2:7232
cs=0x1a2;eip=0x007237; 	J(JNZ(loc_1723c));	// 17677                  jnz     short loc_1723C ;~ 01A2:7237
cs=0x1a2;eip=0x007239; 	J(JMP(loc_17327));	// 17678                  jmp     loc_17327 ;~ 01A2:7239
loc_1723c:
	// 5525 
cs=0x1a2;eip=0x00723c; 	T(CMP(*(raddr(es,bp+0x16)), 0x84));	// 17682                  cmp     byte ptr es:[bp+16h], 84h ;~ 01A2:723C
cs=0x1a2;eip=0x007241; 	J(JNZ(loc_17246));	// 17683                  jnz     short loc_17246 ;~ 01A2:7241
cs=0x1a2;eip=0x007243; 	J(JMP(loc_17327));	// 17684                  jmp     loc_17327 ;~ 01A2:7243
loc_17246:
	// 5526 
cs=0x1a2;eip=0x007246; 	T(CMP(*(raddr(es,bp+0x16)), 0x80));	// 17688                  cmp     byte ptr es:[bp+16h], 80h ;~ 01A2:7246
cs=0x1a2;eip=0x00724b; 	J(JNZ(loc_17250));	// 17689                  jnz     short loc_17250 ;~ 01A2:724B
cs=0x1a2;eip=0x00724d; 	J(JMP(loc_172d4));	// 17690                  jmp     loc_172D4 ;~ 01A2:724D
loc_17250:
	// 5527 
cs=0x1a2;eip=0x007250; 	T(MOV(ax, *(dw*)(raddr(ds,bx))));	// 17695                  mov     ax, [bx] ;~ 01A2:7250
cs=0x1a2;eip=0x007252; 	T(ADD(bx, 2));	// 17696                  add     bx, 2 ;~ 01A2:7252
cs=0x1a2;eip=0x007255; 	X(PUSH(bx));	// 17697                  push    bx ;~ 01A2:7255
cs=0x1a2;eip=0x007256; 	T(XOR(bh, bh));	// 17698                  xor     bh, bh ;~ 01A2:7256
cs=0x1a2;eip=0x007258; 	T(MOV(bl, *(raddr(ds,si+0x0C))));	// 17699                  mov     bl, [si+0Ch] ;~ 01A2:7258
cs=0x1a2;eip=0x00725b; 	T(CMP(*(raddr(ds,bx+si+5)), 7));	// 17700                  cmp     byte ptr [bx+si+5], 7 ;~ 01A2:725B
cs=0x1a2;eip=0x00725f; 	J(JZ(loc_172d0));	// 17701                  jz      short loc_172D0 ;~ 01A2:725F
cs=0x1a2;eip=0x007261; 	X(word_1f732 = ax;);	// 17702                  mov     ds:word_1F732, ax ;~ 01A2:7261
cs=0x1a2;eip=0x007264; 	X(word_1f72c = si;);	// 17703                  mov     ds:word_1F72C, si ;~ 01A2:7264
cs=0x1a2;eip=0x007268; 	X(word_1f72a = bx;);	// 17704                  mov     ds:word_1F72A, bx ;~ 01A2:7268
cs=0x1a2;eip=0x00726c; 	X(PUSH(dx));	// 17705                  push    dx ;~ 01A2:726C
cs=0x1a2;eip=0x00726d; 	T(dx = ax;);	// 17706                  mov     dx, ax ;~ 01A2:726D
cs=0x1a2;eip=0x00726f; 	T(XOR(ah, ah));	// 17707                  xor     ah, ah ;~ 01A2:726F
cs=0x1a2;eip=0x007271; 	T(MOV(al, *(raddr(ds,bx+si))));	// 17708                  mov     al, [bx+si] ;~ 01A2:7271
cs=0x1a2;eip=0x007273; 	T(TEST(al, 0x80));	// 17709                  test    al, 80h ;~ 01A2:7273
cs=0x1a2;eip=0x007275; 	X(PUSHF);	// 17710                  pushf ;~ 01A2:7275
cs=0x1a2;eip=0x007276; 	T(AND(al, 0x7F));	// 17711                  and     al, 7Fh ;~ 01A2:7276
cs=0x1a2;eip=0x007278; 	X(POPF);	// 17712                  popf ;~ 01A2:7278
cs=0x1a2;eip=0x007279; 	X(PUSH(si));	// 17713                  push    si ;~ 01A2:7279
cs=0x1a2;eip=0x00727a; 	T(si = word_1f1f4;);	// 17714                  mov     si, word_1F1F4 ;~ 01A2:727A
cs=0x1a2;eip=0x00727e; 	X(MOV(*(dw*)(raddr(ds,si)), 1));	// 17715                  mov     word ptr [si], 1 ;~ 01A2:727E
cs=0x1a2;eip=0x007282; 	T(ADD(si, 2));	// 17716                  add     si, 2 ;~ 01A2:7282
cs=0x1a2;eip=0x007285; 	X(MOV(*(dw*)(raddr(ds,si)), dx));	// 17717                  mov     [si], dx ;~ 01A2:7285
cs=0x1a2;eip=0x007287; 	T(ADD(si, 2));	// 17718                  add     si, 2 ;~ 01A2:7287
cs=0x1a2;eip=0x00728a; 	X(MOV(*(dw*)(raddr(ds,si)), ax));	// 17719                  mov     [si], ax ;~ 01A2:728A
cs=0x1a2;eip=0x00728c; 	T(ADD(si, 2));	// 17720                  add     si, 2 ;~ 01A2:728C
cs=0x1a2;eip=0x00728f; 	X(word_1f1f4 = si;);	// 17721                  mov     word_1F1F4, si ;~ 01A2:728F
cs=0x1a2;eip=0x007293; 	X(INC(word_1f396));	// 17722                  inc     ds:word_1F396 ;~ 01A2:7293
cs=0x1a2;eip=0x007297; 	X(POP(si));	// 17723                  pop     si ;~ 01A2:7297
cs=0x1a2;eip=0x007298; 	X(POP(dx));	// 17724                  pop     dx ;~ 01A2:7298
cs=0x1a2;eip=0x007299; 	X(PUSH(ax));	// 17725                  push    ax ;~ 01A2:7299
cs=0x1a2;eip=0x00729a; 	X(PUSH(bx));	// 17726                  push    bx ;~ 01A2:729A
cs=0x1a2;eip=0x00729b; 	X(PUSH(cx));	// 17727                  push    cx ;~ 01A2:729B
cs=0x1a2;eip=0x00729c; 	X(PUSH(dx));	// 17728                  push    dx ;~ 01A2:729C
cs=0x1a2;eip=0x00729d; 	X(PUSH(bp));	// 17729                  push    bp ;~ 01A2:729D
cs=0x1a2;eip=0x00729e; 	X(PUSH(si));	// 17730                  push    si ;~ 01A2:729E
cs=0x1a2;eip=0x00729f; 	X(PUSH(di));	// 17731                  push    di ;~ 01A2:729F
cs=0x1a2;eip=0x0072a0; 	X(PUSH(es));	// 17732                  push    es ;~ 01A2:72A0
cs=0x1a2;eip=0x0072a1; 	X(PUSH(ds));	// 17733                  push    ds ;~ 01A2:72A1
cs=0x1a2;eip=0x0072a2; 	T(bx = *(dw*)(&off_1f88a););	// 17734                  mov     bx, word ptr ds:off_1F88A ;~ 01A2:72A2
cs=0x1a2;eip=0x0072a6; 	T(es = *(dw*)(((db*)&off_1f88a)+2););	// 17735                  mov     es, word ptr ds:off_1F88A+2 ;~ 01A2:72A6
cs=0x1a2;eip=0x0072aa; 	T(MOV(bx, *(dw*)(raddr(es,bx+4))));	// 17736                  mov     bx, es:[bx+4] ;~ 01A2:72AA
cs=0x1a2;eip=0x0072ae; 	T(dx = 2;);	// 17737                  mov     dx, 2 ;~ 01A2:72AE
cs=0x1a2;eip=0x0072b1; 	T(MUL1_2(dx));	// 17738                  mul     dx ;~ 01A2:72B1
cs=0x1a2;eip=0x0072b3; 	T(ADD(bx, ax));	// 17739                  add     bx, ax ;~ 01A2:72B3
cs=0x1a2;eip=0x0072b5; 	T(MOV(ax, *(dw*)(raddr(es,bx))));	// 17740                  mov     ax, es:[bx] ;~ 01A2:72B5
cs=0x1a2;eip=0x0072b8; 	X(word_1f8fc = ax;);	// 17741                  mov     ds:word_1F8FC, ax ;~ 01A2:72B8
cs=0x1a2;eip=0x0072bb; 	J(CALL(__dispatch_call,off_1f8f8));	// 17742                  call    ds:off_1F8F8 ;~ 01A2:72BB
cs=0x1a2;eip=0x0072bf; 	X(POP(ds));	// 17743                  pop     ds ;~ 01A2:72BF
cs=0x1a2;eip=0x0072c0; 	X(POP(es));	// 17745                  pop     es ;~ 01A2:72C0
cs=0x1a2;eip=0x0072c1; 	X(POP(di));	// 17746                  pop     di ;~ 01A2:72C1
cs=0x1a2;eip=0x0072c2; 	X(POP(si));	// 17747                  pop     si ;~ 01A2:72C2
cs=0x1a2;eip=0x0072c3; 	X(POP(bp));	// 17748                  pop     bp ;~ 01A2:72C3
cs=0x1a2;eip=0x0072c4; 	X(POP(dx));	// 17749                  pop     dx ;~ 01A2:72C4
cs=0x1a2;eip=0x0072c5; 	X(POP(cx));	// 17750                  pop     cx ;~ 01A2:72C5
cs=0x1a2;eip=0x0072c6; 	X(POP(bx));	// 17751                  pop     bx ;~ 01A2:72C6
cs=0x1a2;eip=0x0072c7; 	X(POP(ax));	// 17752                  pop     ax ;~ 01A2:72C7
cs=0x1a2;eip=0x0072c8; 	X(POP(bx));	// 17753                  pop     bx ;~ 01A2:72C8
cs=0x1a2;eip=0x0072c9; 	T(DEC(cl));	// 17754                  dec     cl ;~ 01A2:72C9
cs=0x1a2;eip=0x0072cb; 	J(JNS(loc_17250));	// 17755                  jns     short loc_17250 ;~ 01A2:72CB
cs=0x1a2;eip=0x0072cd; 	J(JMP(loc_17403));	// 17756                  jmp     loc_17403 ;~ 01A2:72CD
loc_172d0:
	// 5528 
cs=0x1a2;eip=0x0072d0; 	X(POP(bx));	// 17760                  pop     bx ;~ 01A2:72D0
cs=0x1a2;eip=0x0072d1; 	J(JMP(loc_17403));	// 17761                  jmp     loc_17403 ;~ 01A2:72D1
loc_172d4:
	// 5529 
cs=0x1a2;eip=0x0072d4; 	T(MOV(ax, *(dw*)(raddr(ds,bx))));	// 17766                  mov     ax, [bx] ;~ 01A2:72D4
cs=0x1a2;eip=0x0072d6; 	T(ADD(bx, 2));	// 17767                  add     bx, 2 ;~ 01A2:72D6
cs=0x1a2;eip=0x0072d9; 	X(PUSH(bx));	// 17768                  push    bx ;~ 01A2:72D9
cs=0x1a2;eip=0x0072da; 	T(bx = ax;);	// 17769                  mov     bx, ax ;~ 01A2:72DA
cs=0x1a2;eip=0x0072dc; 	T(CMP(*(dw*)(raddr(ds,bx+4)), 0));	// 17770                  cmp     word ptr [bx+4], 0 ;~ 01A2:72DC
cs=0x1a2;eip=0x0072e0; 	X(POP(bx));	// 17771                  pop     bx ;~ 01A2:72E0
cs=0x1a2;eip=0x0072e1; 	J(JZ(loc_172ec));	// 17772                  jz      short loc_172EC ;~ 01A2:72E1
cs=0x1a2;eip=0x0072e3; 	T(DEC(cl));	// 17773                  dec     cl ;~ 01A2:72E3
cs=0x1a2;eip=0x0072e5; 	J(JNS(loc_172d4));	// 17774                  jns     short loc_172D4 ;~ 01A2:72E5
cs=0x1a2;eip=0x0072e7; 	J(JZ(loc_172ec));	// 17775                  jz      short loc_172EC ;~ 01A2:72E7
cs=0x1a2;eip=0x0072e9; 	J(JMP(loc_17403));	// 17776                  jmp     loc_17403 ;~ 01A2:72E9
loc_172ec:
	// 5530 
cs=0x1a2;eip=0x0072ec; 	T(XOR(ah, ah));	// 17781                  xor     ah, ah ;~ 01A2:72EC
cs=0x1a2;eip=0x0072ee; 	T(MOV(al, *(raddr(ds,si+0x0C))));	// 17782                  mov     al, [si+0Ch] ;~ 01A2:72EE
cs=0x1a2;eip=0x0072f1; 	T(ADD(si, ax));	// 17783                  add     si, ax ;~ 01A2:72F1
cs=0x1a2;eip=0x0072f3; 	T(MOV(al, *(raddr(ds,si+1))));	// 17784                  mov     al, [si+1] ;~ 01A2:72F3
cs=0x1a2;eip=0x0072f6; 	T(NEG(ax));	// 17785                  neg     ax ;~ 01A2:72F6
cs=0x1a2;eip=0x0072f8; 	T(CMP(*(raddr(ds,0x6AB)), 0));	// 17786                  cmp     byte ptr ds:6ABh, 0 ;~ 01A2:72F8
cs=0x1a2;eip=0x0072fd; 	J(JZ(loc_17321));	// 17787                  jz      short loc_17321 ;~ 01A2:72FD
cs=0x1a2;eip=0x0072ff; 	T(MOV(dl, *(raddr(ds,si+5))));	// 17788                  mov     dl, [si+5] ;~ 01A2:72FF
cs=0x1a2;eip=0x007302; 	T(OR(dl, dl));	// 17789                  or      dl, dl ;~ 01A2:7302
cs=0x1a2;eip=0x007304; 	J(JS(loc_17321));	// 17790                  js      short loc_17321 ;~ 01A2:7304
cs=0x1a2;eip=0x007306; 	X(PUSH(cx));	// 17791                  push    cx ;~ 01A2:7306
cs=0x1a2;eip=0x007307; 	T(cl = dl;);	// 17792                  mov     cl, dl ;~ 01A2:7307
cs=0x1a2;eip=0x007309; 	T(dl = 1;);	// 17793                  mov     dl, 1 ;~ 01A2:7309
cs=0x1a2;eip=0x00730b; 	T(OR(cl, cl));	// 17794                  or      cl, cl ;~ 01A2:730B
cs=0x1a2;eip=0x00730d; 	J(JZ(loc_17311));	// 17795                  jz      short loc_17311 ;~ 01A2:730D
cs=0x1a2;eip=0x00730f; 	T(SHL(dl, cl));	// 17796                  shl     dl, cl ;~ 01A2:730F
loc_17311:
	// 5531 
cs=0x1a2;eip=0x007311; 	X(POP(cx));	// 17799                  pop     cx ;~ 01A2:7311
cs=0x1a2;eip=0x007312; 	T(TEST(*(raddr(ds,0x6AB)), dl));	// 17800                  test    ds:6ABh, dl ;~ 01A2:7312
cs=0x1a2;eip=0x007316; 	J(JZ(loc_17321));	// 17801                  jz      short loc_17321 ;~ 01A2:7316
cs=0x1a2;eip=0x007318; 	T(SUB(al, *(raddr(ds,0x6AC))));	// 17802                  sub     al, ds:6ACh ;~ 01A2:7318
cs=0x1a2;eip=0x00731c; 	J(JNS(loc_17321));	// 17803                  jns     short loc_17321 ;~ 01A2:731C
cs=0x1a2;eip=0x00731e; 	J(JMP(loc_17403));	// 17804                  jmp     loc_17403 ;~ 01A2:731E
loc_17321:
	// 5532 
cs=0x1a2;eip=0x007321; 	J(CALL(sub_181c8,0));	// 17809                  call    sub_181C8 ;~ 01A2:7321
cs=0x1a2;eip=0x007324; 	J(JMP(loc_17403));	// 17810                  jmp     loc_17403 ;~ 01A2:7324
loc_17327:
	// 5533 
cs=0x1a2;eip=0x007327; 	X(PUSH(di));	// 17815                  push    di ;~ 01A2:7327
loc_17328:
	// 5534 
cs=0x1a2;eip=0x007328; 	T(MOV(di, *(dw*)(raddr(ds,bx))));	// 17818                  mov     di, [bx] ;~ 01A2:7328
cs=0x1a2;eip=0x00732a; 	T(ADD(bx, 2));	// 17819                  add     bx, 2 ;~ 01A2:732A
cs=0x1a2;eip=0x00732d; 	X(PUSH(di));	// 17820                  push    di ;~ 01A2:732D
cs=0x1a2;eip=0x00732e; 	T(MOV(di, *(dw*)(raddr(ds,di+8))));	// 17821                  mov     di, [di+8] ;~ 01A2:732E
cs=0x1a2;eip=0x007331; 	X(PUSH(es));	// 17822                  push    es ;~ 01A2:7331
cs=0x1a2;eip=0x007332; 	T(MOV(es, *(dw*)(raddr(ds,di+6))));	// 17823                  mov     es, word ptr [di+6] ;~ 01A2:7332
cs=0x1a2;eip=0x007335; 	T(MOV(di, *(dw*)(raddr(ds,di+8))));	// 17824                  mov     di, [di+8] ;~ 01A2:7335
cs=0x1a2;eip=0x007338; 	T(CMP(*(raddr(es,di+0x16)), 3));	// 17825                  cmp     byte ptr es:[di+16h], 3 ;~ 01A2:7338
cs=0x1a2;eip=0x00733d; 	X(POP(es));	// 17826                  pop     es ;~ 01A2:733D
cs=0x1a2;eip=0x00733e; 	X(POP(di));	// 17827                  pop     di ;~ 01A2:733E
cs=0x1a2;eip=0x00733f; 	J(JZ(loc_17349));	// 17828                  jz      short loc_17349 ;~ 01A2:733F
cs=0x1a2;eip=0x007341; 	T(DEC(cl));	// 17829                  dec     cl ;~ 01A2:7341
cs=0x1a2;eip=0x007343; 	J(JNS(loc_17328));	// 17830                  jns     short loc_17328 ;~ 01A2:7343
cs=0x1a2;eip=0x007345; 	X(POP(di));	// 17831                  pop     di ;~ 01A2:7345
cs=0x1a2;eip=0x007346; 	J(JMP(loc_17403));	// 17832                  jmp     loc_17403 ;~ 01A2:7346
loc_17349:
	// 5535 
cs=0x1a2;eip=0x007349; 	T(cx = di;);	// 17836                  mov     cx, di ;~ 01A2:7349
cs=0x1a2;eip=0x00734b; 	X(POP(di));	// 17837                  pop     di ;~ 01A2:734B
cs=0x1a2;eip=0x00734c; 	T(XOR(bh, bh));	// 17838                  xor     bh, bh ;~ 01A2:734C
cs=0x1a2;eip=0x00734e; 	T(MOV(bl, *(raddr(ds,si+0x0C))));	// 17839                  mov     bl, [si+0Ch] ;~ 01A2:734E
cs=0x1a2;eip=0x007351; 	T(MOV(dl, *(raddr(ds,bx+si+5))));	// 17840                  mov     dl, [bx+si+5] ;~ 01A2:7351
cs=0x1a2;eip=0x007354; 	T(MOV(al, *(raddr(ds,bx+si+1))));	// 17841                  mov     al, [bx+si+1] ;~ 01A2:7354
cs=0x1a2;eip=0x007357; 	X(PUSH(di));	// 17842                  push    di ;~ 01A2:7357
cs=0x1a2;eip=0x007358; 	T(di = cx;);	// 17843                  mov     di, cx ;~ 01A2:7358
cs=0x1a2;eip=0x00735a; 	T(MOV(bl, *(raddr(ds,di+0x0C))));	// 17844                  mov     bl, [di+0Ch] ;~ 01A2:735A
cs=0x1a2;eip=0x00735d; 	T(cl = dl;);	// 17845                  mov     cl, dl ;~ 01A2:735D
cs=0x1a2;eip=0x00735f; 	T(dl = 1;);	// 17846                  mov     dl, 1 ;~ 01A2:735F
cs=0x1a2;eip=0x007361; 	T(OR(cl, cl));	// 17847                  or      cl, cl ;~ 01A2:7361
cs=0x1a2;eip=0x007363; 	J(JZ(loc_17367));	// 17848                  jz      short loc_17367 ;~ 01A2:7363
cs=0x1a2;eip=0x007365; 	T(SHL(dl, cl));	// 17849                  shl     dl, cl ;~ 01A2:7365
loc_17367:
	// 5536 
cs=0x1a2;eip=0x007367; 	T(TEST(*(raddr(ds,bx+di+5)), dl));	// 17852                  test    [bx+di+5], dl ;~ 01A2:7367
cs=0x1a2;eip=0x00736a; 	J(JNZ(loc_17395));	// 17853                  jnz     short loc_17395 ;~ 01A2:736A
cs=0x1a2;eip=0x00736c; 	T(TEST(*(raddr(ds,bx+di+6)), 1));	// 17854                  test    byte ptr [bx+di+6], 1 ;~ 01A2:736C
cs=0x1a2;eip=0x007370; 	J(JNZ(loc_17395));	// 17855                  jnz     short loc_17395 ;~ 01A2:7370
cs=0x1a2;eip=0x007372; 	T(MOV(dh, *(raddr(ds,bx+di))));	// 17856                  mov     dh, [bx+di] ;~ 01A2:7372
cs=0x1a2;eip=0x007374; 	T(SUB(dh, al));	// 17857                  sub     dh, al ;~ 01A2:7374
cs=0x1a2;eip=0x007376; 	J(JG(loc_17398));	// 17858                  jg      short loc_17398 ;~ 01A2:7376
cs=0x1a2;eip=0x007378; 	X(PUSH(si));	// 17859                  push    si ;~ 01A2:7378
cs=0x1a2;eip=0x007379; 	T(MOV(si, *(dw*)(raddr(ds,0x84))));	// 17860                  mov     si, ds:84h ;~ 01A2:7379
cs=0x1a2;eip=0x00737d; 	X(MOV(*(dw*)(raddr(ds,si)), 0x17));	// 17861                  mov     word ptr [si], 17h ;~ 01A2:737D
cs=0x1a2;eip=0x007381; 	T(ADD(si, 2));	// 17862                  add     si, 2 ;~ 01A2:7381
cs=0x1a2;eip=0x007384; 	X(MOV(*(dw*)(raddr(ds,si)), di));	// 17863                  mov     [si], di ;~ 01A2:7384
cs=0x1a2;eip=0x007386; 	T(ADD(si, 2));	// 17864                  add     si, 2 ;~ 01A2:7386
cs=0x1a2;eip=0x007389; 	T(ADD(si, 2));	// 17865                  add     si, 2 ;~ 01A2:7389
cs=0x1a2;eip=0x00738c; 	X(MOV(*(dw*)(raddr(ds,0x84)), si));	// 17866                  mov     ds:84h, si ;~ 01A2:738C
cs=0x1a2;eip=0x007390; 	X(INC(*(dw*)(raddr(ds,0x226))));	// 17867                  inc     word ptr ds:226h ;~ 01A2:7390
cs=0x1a2;eip=0x007394; 	X(POP(si));	// 17868                  pop     si ;~ 01A2:7394
loc_17395:
	// 5537 
cs=0x1a2;eip=0x007395; 	X(POP(di));	// 17872                  pop     di ;~ 01A2:7395
cs=0x1a2;eip=0x007396; 	J(JMP(loc_17403));	// 17873                  jmp     short loc_17403 ;~ 01A2:7396
loc_17398:
	// 5538 
cs=0x1a2;eip=0x007398; 	X(MOV(*(raddr(ds,bx+di)), dh));	// 17877                  mov     [bx+di], dh ;~ 01A2:7398
cs=0x1a2;eip=0x00739a; 	X(POP(di));	// 17878                  pop     di ;~ 01A2:739A
cs=0x1a2;eip=0x00739b; 	J(JMP(loc_17403));	// 17879                  jmp     short loc_17403 ;~ 01A2:739B
loc_1739d:
	// 5539 
cs=0x1a2;eip=0x00739d; 	T(CMP(*(raddr(es,bp+0x16)), 0x82));	// 17883                  cmp     byte ptr es:[bp+16h], 82h ;~ 01A2:739D
cs=0x1a2;eip=0x0073a2; 	J(JNZ(loc_17403));	// 17884                  jnz     short loc_17403 ;~ 01A2:73A2
cs=0x1a2;eip=0x0073a4; 	X(PUSH(bx));	// 17885                  push    bx ;~ 01A2:73A4
cs=0x1a2;eip=0x0073a5; 	T(XOR(bh, bh));	// 17886                  xor     bh, bh ;~ 01A2:73A5
cs=0x1a2;eip=0x0073a7; 	T(MOV(bl, *(raddr(ds,si+0x0C))));	// 17887                  mov     bl, [si+0Ch] ;~ 01A2:73A7
cs=0x1a2;eip=0x0073aa; 	T(CMP(*(raddr(ds,bx+si+5)), 7));	// 17888                  cmp     byte ptr [bx+si+5], 7 ;~ 01A2:73AA
cs=0x1a2;eip=0x0073ae; 	J(JNZ(loc_173fd));	// 17889                  jnz     short loc_173FD ;~ 01A2:73AE
cs=0x1a2;eip=0x0073b0; 	T(XOR(ah, ah));	// 17890                  xor     ah, ah ;~ 01A2:73B0
cs=0x1a2;eip=0x0073b2; 	T(MOV(al, *(raddr(ds,bx+si))));	// 17891                  mov     al, [bx+si] ;~ 01A2:73B2
cs=0x1a2;eip=0x0073b4; 	T(TEST(al, 0x80));	// 17892                  test    al, 80h ;~ 01A2:73B4
cs=0x1a2;eip=0x0073b6; 	X(PUSHF);	// 17893                  pushf ;~ 01A2:73B6
cs=0x1a2;eip=0x0073b7; 	T(AND(al, 0x7F));	// 17894                  and     al, 7Fh ;~ 01A2:73B7
cs=0x1a2;eip=0x0073b9; 	X(POPF);	// 17895                  popf ;~ 01A2:73B9
cs=0x1a2;eip=0x0073ba; 	X(MOV(*(dw*)(raddr(ds,0x5BA)), bx));	// 17896                  mov     ds:5BAh, bx ;~ 01A2:73BA
cs=0x1a2;eip=0x0073be; 	X(POP(bx));	// 17897                  pop     bx ;~ 01A2:73BE
cs=0x1a2;eip=0x0073bf; 	X(PUSH(bx));	// 17898                  push    bx ;~ 01A2:73BF
cs=0x1a2;eip=0x0073c0; 	T(MOV(bx, *(dw*)(raddr(ds,bx+2))));	// 17899                  mov     bx, [bx+2] ;~ 01A2:73C0
cs=0x1a2;eip=0x0073c3; 	X(MOV(*(dw*)(raddr(ds,0x5C2)), bx));	// 17900                  mov     ds:5C2h, bx ;~ 01A2:73C3
cs=0x1a2;eip=0x0073c7; 	X(MOV(*(dw*)(raddr(ds,0x5BC)), si));	// 17901                  mov     ds:5BCh, si ;~ 01A2:73C7
cs=0x1a2;eip=0x0073cb; 	T(MOV(bx, *(dw*)(raddr(ds,0x71A))));	// 17902                  mov     bx, ds:71Ah ;~ 01A2:73CB
cs=0x1a2;eip=0x0073cf; 	T(MOV(es, *(dw*)(raddr(ds,0x71C))));	// 17903                  mov     es, word ptr ds:71Ch ;~ 01A2:73CF
cs=0x1a2;eip=0x0073d3; 	T(MOV(bx, *(dw*)(raddr(es,bx+4))));	// 17904                  mov     bx, es:[bx+4] ;~ 01A2:73D3
cs=0x1a2;eip=0x0073d7; 	T(dx = 2;);	// 17905                  mov     dx, 2 ;~ 01A2:73D7
cs=0x1a2;eip=0x0073da; 	T(MUL1_2(dx));	// 17906                  mul     dx ;~ 01A2:73DA
cs=0x1a2;eip=0x0073dc; 	T(ADD(bx, ax));	// 17907                  add     bx, ax ;~ 01A2:73DC
cs=0x1a2;eip=0x0073de; 	T(MOV(ax, *(dw*)(raddr(es,bx))));	// 17908                  mov     ax, es:[bx] ;~ 01A2:73DE
cs=0x1a2;eip=0x0073e1; 	X(PUSH(ax));	// 17909                  push    ax ;~ 01A2:73E1
cs=0x1a2;eip=0x0073e2; 	X(PUSH(bx));	// 17910                  push    bx ;~ 01A2:73E2
cs=0x1a2;eip=0x0073e3; 	X(PUSH(cx));	// 17911                  push    cx ;~ 01A2:73E3
cs=0x1a2;eip=0x0073e4; 	X(PUSH(dx));	// 17912                  push    dx ;~ 01A2:73E4
cs=0x1a2;eip=0x0073e5; 	X(PUSH(bp));	// 17913                  push    bp ;~ 01A2:73E5
cs=0x1a2;eip=0x0073e6; 	X(PUSH(si));	// 17914                  push    si ;~ 01A2:73E6
cs=0x1a2;eip=0x0073e7; 	X(PUSH(di));	// 17915                  push    di ;~ 01A2:73E7
cs=0x1a2;eip=0x0073e8; 	X(PUSH(es));	// 17916                  push    es ;~ 01A2:73E8
cs=0x1a2;eip=0x0073e9; 	X(PUSH(ds));	// 17917                  push    ds ;~ 01A2:73E9
cs=0x1a2;eip=0x0073ea; 	X(MOV(*(dw*)(raddr(ds,0x78C)), ax));	// 17918                  mov     ds:78Ch, ax ;~ 01A2:73EA
cs=0x1a2;eip=0x0073ed; 	J(CALLF(__dispatch_call,*(dd*)(raddr(ds,0x788))));	// 17919                  call    dword ptr ds:788h ;~ 01A2:73ED
cs=0x1a2;eip=0x0073f1; 	X(POP(ds));	// 17920                  pop     ds ;~ 01A2:73F1
cs=0x1a2;eip=0x0073f2; 	X(POP(es));	// 17921                  pop     es ;~ 01A2:73F2
cs=0x1a2;eip=0x0073f3; 	X(POP(di));	// 17922                  pop     di ;~ 01A2:73F3
cs=0x1a2;eip=0x0073f4; 	X(POP(si));	// 17923                  pop     si ;~ 01A2:73F4
cs=0x1a2;eip=0x0073f5; 	X(POP(bp));	// 17924                  pop     bp ;~ 01A2:73F5
cs=0x1a2;eip=0x0073f6; 	X(POP(dx));	// 17925                  pop     dx ;~ 01A2:73F6
cs=0x1a2;eip=0x0073f7; 	X(POP(cx));	// 17926                  pop     cx ;~ 01A2:73F7
cs=0x1a2;eip=0x0073f8; 	X(POP(bx));	// 17927                  pop     bx ;~ 01A2:73F8
cs=0x1a2;eip=0x0073f9; 	X(POP(ax));	// 17928                  pop     ax ;~ 01A2:73F9
cs=0x1a2;eip=0x0073fa; 	X(POP(bx));	// 17929                  pop     bx ;~ 01A2:73FA
cs=0x1a2;eip=0x0073fb; 	J(JMP(loc_17403));	// 17930                  jmp     short loc_17403 ;~ 01A2:73FB
loc_173fd:
	// 5540 
cs=0x1a2;eip=0x0073fd; 	X(POP(bx));	// 17934                  pop     bx ;~ 01A2:73FD
cs=0x1a2;eip=0x0073fe; 	J(JMP(loc_17403));	// 17935                  jmp     short loc_17403 ;~ 01A2:73FE
loc_17400:
	// 5541 
cs=0x1a2;eip=0x007400; 	J(JMP(loc_17403));	// 17939                  jmp     short loc_17403 ;~ 01A2:7400
loc_17403:
	// 5542 
cs=0x1a2;eip=0x007403; 	X(POP(bx));	// 17946                  pop     bx ;~ 01A2:7403
cs=0x1a2;eip=0x007404; 	T(MOV(dx, *(dw*)(raddr(ds,bx+0x2E))));	// 17947                  mov     dx, [bx+2Eh] ;~ 01A2:7404
cs=0x1a2;eip=0x007407; 	X(PUSH(dx));	// 17948                  push    dx ;~ 01A2:7407
cs=0x1a2;eip=0x007408; 	X(PUSH(bx));	// 17949                  push    bx ;~ 01A2:7408
cs=0x1a2;eip=0x007409; 	J(CALL(sub_13e6d,0));	// 17950                  call    sub_13E6D ;~ 01A2:7409
cs=0x1a2;eip=0x00740c; 	X(POP(bx));	// 17951                  pop     bx ;~ 01A2:740C
cs=0x1a2;eip=0x00740d; 	X(PUSH(di));	// 17952                  push    di ;~ 01A2:740D
cs=0x1a2;eip=0x00740e; 	T(MOV(di, *(dw*)(raddr(ds,bx+0x0A))));	// 17953                  mov     di, [bx+0Ah] ;~ 01A2:740E
cs=0x1a2;eip=0x007411; 	J(CALL(sub_15114,0));	// 17954                  call    sub_15114 ;~ 01A2:7411
cs=0x1a2;eip=0x007414; 	X(POP(di));	// 17955                  pop     di ;~ 01A2:7414
cs=0x1a2;eip=0x007415; 	X(POP(dx));	// 17956                  pop     dx ;~ 01A2:7415
cs=0x1a2;eip=0x007416; 	J(CALL(sub_162a9,0));	// 17957                  call    sub_162A9 ;~ 01A2:7416
cs=0x1a2;eip=0x007419; 	X(POP(cx));	// 17958                  pop     cx ;~ 01A2:7419
cs=0x1a2;eip=0x00741a; 	X(POP(dx));	// 17959                  pop     dx ;~ 01A2:741A
cs=0x1a2;eip=0x00741b; 	J(JMP(loc_1758d));	// 17960                  jmp     loc_1758D ;~ 01A2:741B
loc_1741e:
	// 5543 
cs=0x1a2;eip=0x00741e; 	X(PUSH(bx));	// 17964                  push    bx ;~ 01A2:741E
cs=0x1a2;eip=0x00741f; 	X(PUSH(di));	// 17965                  push    di ;~ 01A2:741F
cs=0x1a2;eip=0x007420; 	X(PUSH(si));	// 17966                  push    si ;~ 01A2:7420
cs=0x1a2;eip=0x007421; 	T(MOV(ax, *(dw*)(raddr(ds,bx+0x2E))));	// 17967                  mov     ax, [bx+2Eh] ;~ 01A2:7421
cs=0x1a2;eip=0x007424; 	X(MOV(*(dw*)(raddr(ds,0x5AC)), ax));	// 17968                  mov     ds:5ACh, ax ;~ 01A2:7424
cs=0x1a2;eip=0x007427; 	T(di = bp;);	// 17969                  mov     di, bp ;~ 01A2:7427
cs=0x1a2;eip=0x007429; 	J(CALL(sub_116d3,0));	// 17970                  call    sub_116D3 ;~ 01A2:7429
cs=0x1a2;eip=0x00742c; 	X(POP(si));	// 17971                  pop     si ;~ 01A2:742C
cs=0x1a2;eip=0x00742d; 	X(POP(di));	// 17972                  pop     di ;~ 01A2:742D
cs=0x1a2;eip=0x00742e; 	X(POP(bx));	// 17973                  pop     bx ;~ 01A2:742E
cs=0x1a2;eip=0x00742f; 	J(JNZ(loc_17434));	// 17974                  jnz     short loc_17434 ;~ 01A2:742F
cs=0x1a2;eip=0x007431; 	J(JMP(loc_174ed));	// 17975                  jmp     loc_174ED ;~ 01A2:7431
loc_17434:
	// 5544 
cs=0x1a2;eip=0x007434; 	X(POP(cx));	// 17979                  pop     cx ;~ 01A2:7434
cs=0x1a2;eip=0x007435; 	X(POP(dx));	// 17980                  pop     dx ;~ 01A2:7435
cs=0x1a2;eip=0x007436; 	J(JS(loc_1749a));	// 17981                  js      short loc_1749A ;~ 01A2:7436
cs=0x1a2;eip=0x007438; 	X(PUSH(bx));	// 17982                  push    bx ;~ 01A2:7438
cs=0x1a2;eip=0x007439; 	X(PUSH(dx));	// 17983                  push    dx ;~ 01A2:7439
cs=0x1a2;eip=0x00743a; 	X(PUSH(cx));	// 17984                  push    cx ;~ 01A2:743A
cs=0x1a2;eip=0x00743b; 	T(MOV(bx, *(dw*)(raddr(ds,0x3C))));	// 17985                  mov     bx, ds:3Ch ;~ 01A2:743B
cs=0x1a2;eip=0x00743f; 	T(CMP(*(raddr(ds,bx+1)), 0));	// 17986                  cmp     byte ptr [bx+1], 0 ;~ 01A2:743F
cs=0x1a2;eip=0x007443; 	J(JS(loc_17497));	// 17987                  js      short loc_17497 ;~ 01A2:7443
cs=0x1a2;eip=0x007445; 	X(PUSH(cx));	// 17988                  push    cx ;~ 01A2:7445
cs=0x1a2;eip=0x007446; 	X(PUSH(dx));	// 17989                  push    dx ;~ 01A2:7446
cs=0x1a2;eip=0x007447; 	J(CALL(sub_11a49,0));	// 17990                  call    sub_11A49 ;~ 01A2:7447
cs=0x1a2;eip=0x00744a; 	J(CALL(sub_11c76,0));	// 17991                  call    sub_11C76 ;~ 01A2:744A
cs=0x1a2;eip=0x00744d; 	X(POP(dx));	// 17992                  pop     dx ;~ 01A2:744D
cs=0x1a2;eip=0x00744e; 	X(POP(cx));	// 17993                  pop     cx ;~ 01A2:744E
cs=0x1a2;eip=0x00744f; 	X(MOV(*(raddr(ds,0x602)), 0));	// 17994                  mov     byte ptr ds:602h, 0 ;~ 01A2:744F
cs=0x1a2;eip=0x007454; 	T(MOV(ax, *(dw*)(raddr(ds,0x80))));	// 17995                  mov     ax, ds:80h ;~ 01A2:7454
cs=0x1a2;eip=0x007457; 	X(MOV(*(dw*)(raddr(ds,0x82)), ax));	// 17996                  mov     ds:82h, ax ;~ 01A2:7457
cs=0x1a2;eip=0x00745a; 	T(MOV(ax, *(dw*)(raddr(ds,0x59C))));	// 17997                  mov     ax, ds:59Ch ;~ 01A2:745A
cs=0x1a2;eip=0x00745d; 	X(MOV(*(dw*)(raddr(ds,0x25E)), ax));	// 17998                  mov     ds:25Eh, ax ;~ 01A2:745D
cs=0x1a2;eip=0x007460; 	T(OR(ch, ch));	// 17999                  or      ch, ch ;~ 01A2:7460
cs=0x1a2;eip=0x007462; 	J(JS(loc_17497));	// 18000                  js      short loc_17497 ;~ 01A2:7462
cs=0x1a2;eip=0x007464; 	X(PUSH(ax));	// 18001                  push    ax ;~ 01A2:7464
cs=0x1a2;eip=0x007465; 	T(MOV(ax, *(dw*)(raddr(ds,0x84))));	// 18002                  mov     ax, ds:84h ;~ 01A2:7465
cs=0x1a2;eip=0x007468; 	X(MOV(*(dw*)(raddr(ds,0x96)), ax));	// 18003                  mov     ds:96h, ax ;~ 01A2:7468
cs=0x1a2;eip=0x00746b; 	T(MOV(ax, *(dw*)(raddr(ds,0x226))));	// 18004                  mov     ax, ds:226h ;~ 01A2:746B
cs=0x1a2;eip=0x00746e; 	X(MOV(*(dw*)(raddr(ds,0x598)), ax));	// 18005                  mov     ds:598h, ax ;~ 01A2:746E
cs=0x1a2;eip=0x007471; 	X(POP(ax));	// 18006                  pop     ax ;~ 01A2:7471
cs=0x1a2;eip=0x007472; 	X(PUSH(si));	// 18007                  push    si ;~ 01A2:7472
cs=0x1a2;eip=0x007473; 	X(PUSH(di));	// 18008                  push    di ;~ 01A2:7473
cs=0x1a2;eip=0x007474; 	T(di = si;);	// 18009                  mov     di, si ;~ 01A2:7474
cs=0x1a2;eip=0x007476; 	T(si = bx;);	// 18010                  mov     si, bx ;~ 01A2:7476
cs=0x1a2;eip=0x007478; 	J(CALL(sub_165a1,0));	// 18011                  call    sub_165A1 ;~ 01A2:7478
cs=0x1a2;eip=0x00747b; 	X(POP(di));	// 18012                  pop     di ;~ 01A2:747B
cs=0x1a2;eip=0x00747c; 	X(POP(si));	// 18013                  pop     si ;~ 01A2:747C
cs=0x1a2;eip=0x00747d; 	J(JNZ(loc_17489));	// 18014                  jnz     short loc_17489 ;~ 01A2:747D
cs=0x1a2;eip=0x00747f; 	J(CALL(sub_167df,0));	// 18015                  call    sub_167DF ;~ 01A2:747F
cs=0x1a2;eip=0x007482; 	X(POP(cx));	// 18016                  pop     cx ;~ 01A2:7482
cs=0x1a2;eip=0x007483; 	X(POP(dx));	// 18017                  pop     dx ;~ 01A2:7483
cs=0x1a2;eip=0x007484; 	X(POP(bx));	// 18018                  pop     bx ;~ 01A2:7484
cs=0x1a2;eip=0x007485; 	X(PUSH(dx));	// 18019                  push    dx ;~ 01A2:7485
cs=0x1a2;eip=0x007486; 	X(PUSH(cx));	// 18020                  push    cx ;~ 01A2:7486
cs=0x1a2;eip=0x007487; 	J(JMP(loc_174ed));	// 18021                  jmp     short loc_174ED ;~ 01A2:7487
loc_17489:
	// 5545 
cs=0x1a2;eip=0x007489; 	X(PUSH(ax));	// 18025                  push    ax ;~ 01A2:7489
cs=0x1a2;eip=0x00748a; 	T(MOV(ax, *(dw*)(raddr(ds,0x96))));	// 18026                  mov     ax, ds:96h ;~ 01A2:748A
cs=0x1a2;eip=0x00748d; 	X(MOV(*(dw*)(raddr(ds,0x84)), ax));	// 18027                  mov     ds:84h, ax ;~ 01A2:748D
cs=0x1a2;eip=0x007490; 	T(MOV(ax, *(dw*)(raddr(ds,0x598))));	// 18028                  mov     ax, ds:598h ;~ 01A2:7490
cs=0x1a2;eip=0x007493; 	X(MOV(*(dw*)(raddr(ds,0x226)), ax));	// 18029                  mov     ds:226h, ax ;~ 01A2:7493
cs=0x1a2;eip=0x007496; 	X(POP(ax));	// 18030                  pop     ax ;~ 01A2:7496
loc_17497:
	// 5546 
cs=0x1a2;eip=0x007497; 	X(POP(cx));	// 18034                  pop     cx ;~ 01A2:7497
cs=0x1a2;eip=0x007498; 	X(POP(dx));	// 18035                  pop     dx ;~ 01A2:7498
cs=0x1a2;eip=0x007499; 	X(POP(bx));	// 18036                  pop     bx ;~ 01A2:7499
loc_1749a:
	// 5547 
cs=0x1a2;eip=0x00749a; 	X(PUSH(es));	// 18039                  push    es ;~ 01A2:749A
cs=0x1a2;eip=0x00749b; 	X(PUSH(di));	// 18040                  push    di ;~ 01A2:749B
cs=0x1a2;eip=0x00749c; 	T(MOV(es, *(dw*)(raddr(ds,si+6))));	// 18041                  mov     es, word ptr [si+6] ;~ 01A2:749C
cs=0x1a2;eip=0x00749f; 	T(MOV(di, *(dw*)(raddr(ds,si+8))));	// 18042                  mov     di, [si+8] ;~ 01A2:749F
cs=0x1a2;eip=0x0074a2; 	T(CMP(*(raddr(es,di+0x16)), 3));	// 18043                  cmp     byte ptr es:[di+16h], 3 ;~ 01A2:74A2
cs=0x1a2;eip=0x0074a7; 	X(POP(di));	// 18044                  pop     di ;~ 01A2:74A7
cs=0x1a2;eip=0x0074a8; 	X(POP(es));	// 18045                  pop     es ;~ 01A2:74A8
cs=0x1a2;eip=0x0074a9; 	J(JNZ(loc_174bf));	// 18046                  jnz     short loc_174BF ;~ 01A2:74A9
cs=0x1a2;eip=0x0074ab; 	T(TEST(*(raddr(ds,di+0x0D)), 8));	// 18047                  test    byte ptr [di+0Dh], 8 ;~ 01A2:74AB
cs=0x1a2;eip=0x0074af; 	X(PUSHF);	// 18048                  pushf ;~ 01A2:74AF
cs=0x1a2;eip=0x0074b0; 	X(OR(*(raddr(ds,di+0x0D)), 8));	// 18049                  or      byte ptr [di+0Dh], 8 ;~ 01A2:74B0
cs=0x1a2;eip=0x0074b4; 	X(POPF);	// 18050                  popf ;~ 01A2:74B4
cs=0x1a2;eip=0x0074b5; 	T(TEST(*(raddr(ds,di+0x0D)), 0x10));	// 18051                  test    byte ptr [di+0Dh], 10h ;~ 01A2:74B5
cs=0x1a2;eip=0x0074b9; 	X(PUSHF);	// 18052                  pushf ;~ 01A2:74B9
cs=0x1a2;eip=0x0074ba; 	X(OR(*(raddr(ds,di+0x0D)), 0x10));	// 18053                  or      byte ptr [di+0Dh], 10h ;~ 01A2:74BA
cs=0x1a2;eip=0x0074be; 	X(POPF);	// 18054                  popf ;~ 01A2:74BE
loc_174bf:
	// 5548 
cs=0x1a2;eip=0x0074bf; 	T(TEST(*(raddr(ds,di+0x0D)), 2));	// 18057                  test    byte ptr [di+0Dh], 2 ;~ 01A2:74BF
cs=0x1a2;eip=0x0074c3; 	J(JNZ(loc_174cb));	// 18058                  jnz     short loc_174CB ;~ 01A2:74C3
cs=0x1a2;eip=0x0074c5; 	T(TEST(*(raddr(ds,di+0x0D)), 4));	// 18059                  test    byte ptr [di+0Dh], 4 ;~ 01A2:74C5
cs=0x1a2;eip=0x0074c9; 	J(JZ(loc_174df));	// 18060                  jz      short loc_174DF ;~ 01A2:74C9
loc_174cb:
	// 5549 
cs=0x1a2;eip=0x0074cb; 	T(MOV(al, *(raddr(ds,0x6CB))));	// 18064                  mov     al, ds:6CBh ;~ 01A2:74CB
cs=0x1a2;eip=0x0074ce; 	X(MOV(*(raddr(ds,di+3)), al));	// 18065                  mov     [di+3], al ;~ 01A2:74CE
cs=0x1a2;eip=0x0074d1; 	T(MOV(al, *(raddr(ds,0x6CC))));	// 18066                  mov     al, ds:6CCh ;~ 01A2:74D1
cs=0x1a2;eip=0x0074d4; 	X(MOV(*(raddr(ds,di+4)), al));	// 18067                  mov     [di+4], al ;~ 01A2:74D4
cs=0x1a2;eip=0x0074d7; 	T(MOV(al, *(raddr(ds,0x6CD))));	// 18068                  mov     al, ds:6CDh ;~ 01A2:74D7
cs=0x1a2;eip=0x0074da; 	X(MOV(*(raddr(ds,di+5)), al));	// 18069                  mov     [di+5], al ;~ 01A2:74DA
cs=0x1a2;eip=0x0074dd; 	J(JMP(loc_17547));	// 18070                  jmp     short loc_17547 ;~ 01A2:74DD
loc_174df:
	// 5550 
cs=0x1a2;eip=0x0074df; 	X(MOV(*(raddr(ds,di+3)), 0));	// 18074                  mov     byte ptr [di+3], 0 ;~ 01A2:74DF
cs=0x1a2;eip=0x0074e3; 	X(MOV(*(raddr(ds,di+4)), 0));	// 18075                  mov     byte ptr [di+4], 0 ;~ 01A2:74E3
cs=0x1a2;eip=0x0074e7; 	X(MOV(*(raddr(ds,di+5)), 0));	// 18076                  mov     byte ptr [di+5], 0 ;~ 01A2:74E7
cs=0x1a2;eip=0x0074eb; 	J(JMP(loc_17547));	// 18077                  jmp     short loc_17547 ;~ 01A2:74EB
loc_174ed:
	// 5551 
cs=0x1a2;eip=0x0074ed; 	X(PUSH(es));	// 18082                  push    es ;~ 01A2:74ED
cs=0x1a2;eip=0x0074ee; 	X(PUSH(di));	// 18083                  push    di ;~ 01A2:74EE
cs=0x1a2;eip=0x0074ef; 	T(MOV(es, *(dw*)(raddr(ds,bx+6))));	// 18084                  mov     es, word ptr [bx+6] ;~ 01A2:74EF
cs=0x1a2;eip=0x0074f2; 	T(MOV(di, *(dw*)(raddr(ds,bx+8))));	// 18085                  mov     di, [bx+8] ;~ 01A2:74F2
cs=0x1a2;eip=0x0074f5; 	T(CMP(*(raddr(es,di+0x16)), 3));	// 18086                  cmp     byte ptr es:[di+16h], 3 ;~ 01A2:74F5
cs=0x1a2;eip=0x0074fa; 	X(POP(di));	// 18087                  pop     di ;~ 01A2:74FA
cs=0x1a2;eip=0x0074fb; 	X(POP(es));	// 18088                  pop     es ;~ 01A2:74FB
cs=0x1a2;eip=0x0074fc; 	J(JNZ(loc_17508));	// 18089                  jnz     short loc_17508 ;~ 01A2:74FC
cs=0x1a2;eip=0x0074fe; 	T(TEST(*(raddr(ds,di+0x0D)), 8));	// 18090                  test    byte ptr [di+0Dh], 8 ;~ 01A2:74FE
cs=0x1a2;eip=0x007502; 	X(PUSHF);	// 18091                  pushf ;~ 01A2:7502
cs=0x1a2;eip=0x007503; 	X(AND(*(raddr(ds,di+0x0D)), 0x0F7));	// 18092                  and     byte ptr [di+0Dh], 0F7h ;~ 01A2:7503
cs=0x1a2;eip=0x007507; 	X(POPF);	// 18093                  popf ;~ 01A2:7507
loc_17508:
	// 5552 
cs=0x1a2;eip=0x007508; 	X(POP(cx));	// 18096                  pop     cx ;~ 01A2:7508
cs=0x1a2;eip=0x007509; 	X(POP(dx));	// 18097                  pop     dx ;~ 01A2:7509
cs=0x1a2;eip=0x007523; 	T(OR(ch, ch));	// 18125                  or      ch, ch ;~ 01A2:7523
cs=0x1a2;eip=0x007525; 	J(JNZ(loc_1753e));	// 18126                  jnz     short loc_1753E ;~ 01A2:7525
cs=0x1a2;eip=0x007527; 	T(CMP(*(raddr(ds,si+2)), 0));	// 18127                  cmp     byte ptr [si+2], 0 ;~ 01A2:7527
cs=0x1a2;eip=0x00752b; 	J(JZ(loc_1753e));	// 18128                  jz      short loc_1753E ;~ 01A2:752B
cs=0x1a2;eip=0x00752d; 	X(PUSH(si));	// 18129                  push    si ;~ 01A2:752D
cs=0x1a2;eip=0x00752e; 	T(si = bx;);	// 18130                  mov     si, bx ;~ 01A2:752E
cs=0x1a2;eip=0x007530; 	J(CALL(sub_16bfc,0));	// 18131                  call    sub_16BFC ;~ 01A2:7530
cs=0x1a2;eip=0x007533; 	X(POP(si));	// 18132                  pop     si ;~ 01A2:7533
cs=0x1a2;eip=0x007534; 	T(TEST(*(raddr(ds,bx+0x12)), 1));	// 18133                  test    byte ptr [bx+12h], 1 ;~ 01A2:7534
cs=0x1a2;eip=0x007538; 	X(PUSHF);	// 18134                  pushf ;~ 01A2:7538
cs=0x1a2;eip=0x007539; 	X(OR(*(raddr(ds,bx+0x12)), 1));	// 18135                  or      byte ptr [bx+12h], 1 ;~ 01A2:7539
cs=0x1a2;eip=0x00753d; 	X(POPF);	// 18136                  popf ;~ 01A2:753D
loc_1753e:
	// 5553 
cs=0x1a2;eip=0x00753e; 	X(PUSH(di));	// 18140                  push    di ;~ 01A2:753E
cs=0x1a2;eip=0x00753f; 	T(di = si;);	// 18141                  mov     di, si ;~ 01A2:753F
cs=0x1a2;eip=0x007541; 	X(PUSH(bx));	// 18142                  push    bx ;~ 01A2:7541
cs=0x1a2;eip=0x007542; 	J(CALL(sub_1530e,0));	// 18143                  call    sub_1530E ;~ 01A2:7542
cs=0x1a2;eip=0x007545; 	X(POP(bx));	// 18144                  pop     bx ;~ 01A2:7545
cs=0x1a2;eip=0x007546; 	X(POP(di));	// 18145                  pop     di ;~ 01A2:7546
loc_17547:
	// 5554 
cs=0x1a2;eip=0x007547; 	T(MOV(ax, *(dw*)(raddr(ds,bx+0x18))));	// 18150                  mov     ax, [bx+18h] ;~ 01A2:7547
cs=0x1a2;eip=0x00754a; 	T(OR(ax, ax));	// 18151                  or      ax, ax ;~ 01A2:754A
cs=0x1a2;eip=0x00754c; 	J(JZ(loc_1757d));	// 18152                  jz      short loc_1757D ;~ 01A2:754C
cs=0x1a2;eip=0x00754e; 	X(PUSH(ax));	// 18153                  push    ax ;~ 01A2:754E
cs=0x1a2;eip=0x00754f; 	X(PUSH(bx));	// 18154                  push    bx ;~ 01A2:754F
cs=0x1a2;eip=0x007550; 	X(PUSH(cx));	// 18155                  push    cx ;~ 01A2:7550
cs=0x1a2;eip=0x007551; 	X(PUSH(dx));	// 18156                  push    dx ;~ 01A2:7551
cs=0x1a2;eip=0x007552; 	X(PUSH(bp));	// 18157                  push    bp ;~ 01A2:7552
cs=0x1a2;eip=0x007553; 	X(PUSH(si));	// 18158                  push    si ;~ 01A2:7553
cs=0x1a2;eip=0x007554; 	X(PUSH(di));	// 18159                  push    di ;~ 01A2:7554
cs=0x1a2;eip=0x007555; 	X(PUSH(es));	// 18160                  push    es ;~ 01A2:7555
cs=0x1a2;eip=0x007556; 	X(PUSH(ds));	// 18161                  push    ds ;~ 01A2:7556
cs=0x1a2;eip=0x007557; 	T(si = bx;);	// 18162                  mov     si, bx ;~ 01A2:7557
cs=0x1a2;eip=0x007559; 	J(CALL(sub_16d3a,0));	// 18163                  call    sub_16D3A ;~ 01A2:7559
cs=0x1a2;eip=0x00755c; 	X(POP(ds));	// 18164                  pop     ds ;~ 01A2:755C
cs=0x1a2;eip=0x00755d; 	X(POP(es));	// 18166                  pop     es ;~ 01A2:755D
cs=0x1a2;eip=0x00755e; 	X(POP(di));	// 18167                  pop     di ;~ 01A2:755E
cs=0x1a2;eip=0x00755f; 	X(POP(si));	// 18168                  pop     si ;~ 01A2:755F
cs=0x1a2;eip=0x007560; 	X(POP(bp));	// 18169                  pop     bp ;~ 01A2:7560
cs=0x1a2;eip=0x007561; 	X(POP(dx));	// 18170                  pop     dx ;~ 01A2:7561
cs=0x1a2;eip=0x007562; 	X(POP(cx));	// 18171                  pop     cx ;~ 01A2:7562
cs=0x1a2;eip=0x007563; 	X(POP(bx));	// 18172                  pop     bx ;~ 01A2:7563
cs=0x1a2;eip=0x007564; 	X(POP(ax));	// 18173                  pop     ax ;~ 01A2:7564
cs=0x1a2;eip=0x007565; 	J(JS(loc_1756f));	// 18174                  js      short loc_1756F ;~ 01A2:7565
cs=0x1a2;eip=0x007567; 	J(JNZ(loc_1757d));	// 18175                  jnz     short loc_1757D ;~ 01A2:7567
cs=0x1a2;eip=0x007569; 	X(PUSH(dx));	// 18176                  push    dx ;~ 01A2:7569
cs=0x1a2;eip=0x00756a; 	X(PUSH(cx));	// 18177                  push    cx ;~ 01A2:756A
cs=0x1a2;eip=0x00756b; 	X(PUSH(bx));	// 18178                  push    bx ;~ 01A2:756B
cs=0x1a2;eip=0x00756c; 	J(JMP(loc_17403));	// 18179                  jmp     loc_17403 ;~ 01A2:756C
loc_1756f:
	// 5555 
cs=0x1a2;eip=0x00756f; 	X(PUSH(dx));	// 18183                  push    dx ;~ 01A2:756F
cs=0x1a2;eip=0x007570; 	X(PUSH(cx));	// 18184                  push    cx ;~ 01A2:7570
cs=0x1a2;eip=0x007571; 	T(MOV(es, *(dw*)(raddr(ds,bx+6))));	// 18185                  mov     es, word ptr [bx+6] ;~ 01A2:7571
cs=0x1a2;eip=0x007574; 	T(MOV(bp, *(dw*)(raddr(ds,bx+8))));	// 18186                  mov     bp, [bx+8] ;~ 01A2:7574
cs=0x1a2;eip=0x007577; 	T(MOV(si, *(dw*)(raddr(ds,bx+0x0A))));	// 18187                  mov     si, [bx+0Ah] ;~ 01A2:7577
cs=0x1a2;eip=0x00757a; 	J(JMP(loc_17216));	// 18188                  jmp     loc_17216 ;~ 01A2:757A
loc_1757d:
	// 5556 
cs=0x1a2;eip=0x00757d; 	T(TEST(*(raddr(ds,bx+0x12)), 4));	// 18194                  test    byte ptr [bx+12h], 4 ;~ 01A2:757D
cs=0x1a2;eip=0x007581; 	J(JZ(loc_1758d));	// 18195                  jz      short loc_1758D ;~ 01A2:7581
cs=0x1a2;eip=0x007583; 	T(MOV(si, *(dw*)(raddr(ds,bx+0x0A))));	// 18196                  mov     si, [bx+0Ah] ;~ 01A2:7583
cs=0x1a2;eip=0x007586; 	X(PUSH(di));	// 18197                  push    di ;~ 01A2:7586
cs=0x1a2;eip=0x007587; 	T(di = si;);	// 18198                  mov     di, si ;~ 01A2:7587
cs=0x1a2;eip=0x007589; 	J(CALL(sub_1530e,0));	// 18199                  call    sub_1530E ;~ 01A2:7589
cs=0x1a2;eip=0x00758c; 	X(POP(di));	// 18200                  pop     di ;~ 01A2:758C
loc_1758d:
	// 5557 
cs=0x1a2;eip=0x00758d; 	T(bx = *(dw*)(&unk_1f8d2););	// 18204                  mov     bx, word ptr ds:unk_1F8D2 ;~ 01A2:758D
cs=0x1a2;eip=0x007591; 	T(MOV(ax, *(dw*)(raddr(ds,bx))));	// 18205                  mov     ax, [bx] ;~ 01A2:7591
cs=0x1a2;eip=0x007593; 	T(CMP(ax, 0x0FFFE));	// 18206                  cmp     ax, 0FFFEh ;~ 01A2:7593
cs=0x1a2;eip=0x007596; 	J(JZ(locret_175ae));	// 18207                  jz      short locret_175AE ;~ 01A2:7596
cs=0x1a2;eip=0x007598; 	T(TEST(*(raddr(ds,bx+0x12)), 2));	// 18208                  test    byte ptr [bx+12h], 2 ;~ 01A2:7598
cs=0x1a2;eip=0x00759c; 	X(PUSHF);	// 18209                  pushf ;~ 01A2:759C
cs=0x1a2;eip=0x00759d; 	X(AND(*(raddr(ds,bx+0x12)), 0x0FD));	// 18210                  and     byte ptr [bx+12h], 0FDh ;~ 01A2:759D
cs=0x1a2;eip=0x0075a1; 	X(POPF);	// 18211                  popf ;~ 01A2:75A1
cs=0x1a2;eip=0x0075a2; 	T(ADD(bx, 0x32));	// 18212                  add     bx, 32h ; '2' ;~ 01A2:75A2
cs=0x1a2;eip=0x0075a5; 	X(DEC(word_1f8d0));	// 18213                  dec     ds:word_1F8D0 ;~ 01A2:75A5
cs=0x1a2;eip=0x0075a9; 	J(JS(locret_175ae));	// 18214                  js      short locret_175AE ;~ 01A2:75A9
cs=0x1a2;eip=0x0075ab; 	J(JMP(loc_16f6d));	// 18215                  jmp     loc_16F6D ;~ 01A2:75AB
locret_175ae:
	// 5558 
cs=0x1a2;eip=0x0075ae; 	J(RETN(0));	// 18220                  retn ;~ 01A2:75AE

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_16d81: 	goto loc_16d81;
        case m2c::kloc_16d8d: 	goto loc_16d8d;
        case m2c::kloc_16d9b: 	goto loc_16d9b;
        case m2c::kloc_16da0: 	goto loc_16da0;
        case m2c::kloc_16dac: 	goto loc_16dac;
        case m2c::kloc_16dba: 	goto loc_16dba;
        case m2c::kloc_16ddf: 	goto loc_16ddf;
        case m2c::kloc_16e44: 	goto loc_16e44;
        case m2c::kloc_16e46: 	goto loc_16e46;
        case m2c::kloc_16e5d: 	goto loc_16e5d;
        case m2c::kloc_16e74: 	goto loc_16e74;
        case m2c::kloc_16e7d: 	goto loc_16e7d;
        case m2c::kloc_16e85: 	goto loc_16e85;
        case m2c::kloc_16e91: 	goto loc_16e91;
        case m2c::kloc_16eae: 	goto loc_16eae;
        case m2c::kloc_16eb1: 	goto loc_16eb1;
        case m2c::kloc_16ef4: 	goto loc_16ef4;
        case m2c::kloc_16f19: 	goto loc_16f19;
        case m2c::kloc_16f32: 	goto loc_16f32;
        case m2c::kloc_16f53: 	goto loc_16f53;
        case m2c::kloc_16f62: 	goto loc_16f62;
        case m2c::kloc_16f6d: 	goto loc_16f6d;
        case m2c::kloc_16f79: 	goto loc_16f79;
        case m2c::kloc_16f8e: 	goto loc_16f8e;
        case m2c::kloc_16f9a: 	goto loc_16f9a;
        case m2c::kloc_16fa0: 	goto loc_16fa0;
        case m2c::kloc_16fa9: 	goto loc_16fa9;
        case m2c::kloc_16fb2: 	goto loc_16fb2;
        case m2c::kloc_16fbe: 	goto loc_16fbe;
        case m2c::kloc_16fea: 	goto loc_16fea;
        case m2c::kloc_16ff2: 	goto loc_16ff2;
        case m2c::kloc_16ff8: 	goto loc_16ff8;
        case m2c::kloc_1700b: 	goto loc_1700b;
        case m2c::kloc_17015: 	goto loc_17015;
        case m2c::kloc_17023: 	goto loc_17023;
        case m2c::kloc_1702d: 	goto loc_1702d;
        case m2c::kloc_17037: 	goto loc_17037;
        case m2c::kloc_1703a: 	goto loc_1703a;
        case m2c::kloc_17057: 	goto loc_17057;
        case m2c::kloc_17061: 	goto loc_17061;
        case m2c::kloc_17070: 	goto loc_17070;
        case m2c::kloc_17072: 	goto loc_17072;
        case m2c::kloc_17097: 	goto loc_17097;
        case m2c::kloc_1709f: 	goto loc_1709f;
        case m2c::kloc_170b3: 	goto loc_170b3;
        case m2c::kloc_170bb: 	goto loc_170bb;
        case m2c::kloc_170cf: 	goto loc_170cf;
        case m2c::kloc_170d7: 	goto loc_170d7;
        case m2c::kloc_170dc: 	goto loc_170dc;
        case m2c::kloc_170f4: 	goto loc_170f4;
        case m2c::kloc_170fe: 	goto loc_170fe;
        case m2c::kloc_17106: 	goto loc_17106;
        case m2c::kloc_17117: 	goto loc_17117;
        case m2c::kloc_17121: 	goto loc_17121;
        case m2c::kloc_17129: 	goto loc_17129;
        case m2c::kloc_17133: 	goto loc_17133;
        case m2c::kloc_1713e: 	goto loc_1713e;
        case m2c::kloc_17149: 	goto loc_17149;
        case m2c::kloc_1717c: 	goto loc_1717c;
        case m2c::kloc_171dd: 	goto loc_171dd;
        case m2c::kloc_171f4: 	goto loc_171f4;
        case m2c::kloc_17208: 	goto loc_17208;
        case m2c::kloc_17214: 	goto loc_17214;
        case m2c::kloc_17216: 	goto loc_17216;
        case m2c::kloc_17223: 	goto loc_17223;
        case m2c::kloc_1722b: 	goto loc_1722b;
        case m2c::kloc_1723c: 	goto loc_1723c;
        case m2c::kloc_17246: 	goto loc_17246;
        case m2c::kloc_17250: 	goto loc_17250;
        case m2c::kloc_172d0: 	goto loc_172d0;
        case m2c::kloc_172d4: 	goto loc_172d4;
        case m2c::kloc_172ec: 	goto loc_172ec;
        case m2c::kloc_17311: 	goto loc_17311;
        case m2c::kloc_17321: 	goto loc_17321;
        case m2c::kloc_17327: 	goto loc_17327;
        case m2c::kloc_17328: 	goto loc_17328;
        case m2c::kloc_17349: 	goto loc_17349;
        case m2c::kloc_17367: 	goto loc_17367;
        case m2c::kloc_17395: 	goto loc_17395;
        case m2c::kloc_17398: 	goto loc_17398;
        case m2c::kloc_1739d: 	goto loc_1739d;
        case m2c::kloc_173fd: 	goto loc_173fd;
        case m2c::kloc_17400: 	goto loc_17400;
        case m2c::kloc_17403: 	goto loc_17403;
        case m2c::kloc_1741e: 	goto loc_1741e;
        case m2c::kloc_17434: 	goto loc_17434;
        case m2c::kloc_17489: 	goto loc_17489;
        case m2c::kloc_17497: 	goto loc_17497;
        case m2c::kloc_1749a: 	goto loc_1749a;
        case m2c::kloc_174bf: 	goto loc_174bf;
        case m2c::kloc_174cb: 	goto loc_174cb;
        case m2c::kloc_174df: 	goto loc_174df;
        case m2c::kloc_174ed: 	goto loc_174ed;
        case m2c::kloc_17508: 	goto loc_17508;
        case m2c::kloc_1753e: 	goto loc_1753e;
        case m2c::kloc_17547: 	goto loc_17547;
        case m2c::kloc_1756f: 	goto loc_1756f;
        case m2c::kloc_1757d: 	goto loc_1757d;
        case m2c::kloc_1758d: 	goto loc_1758d;
        case m2c::klocret_175ae: 	goto locret_175ae;
        case m2c::kret_1a2_718b: 	goto ret_1a2_718b;
        case m2c::kret_1a2_7196: 	goto ret_1a2_7196;
        case m2c::kret_1a2_71a8: 	goto ret_1a2_71a8;
        case m2c::kret_1a2_71ae: 	goto ret_1a2_71ae;
        case m2c::kseg000_6d3f_proc: 	goto seg000_6d3f_proc;
        case m2c::ksub_16d3a: 	goto sub_16d3a;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_175af(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_175af:
    _begin:
cs=0x1a2;eip=0x0075af; 	X(PUSH(dx));	// 18227                  push    dx ;~ 01A2:75AF
cs=0x1a2;eip=0x0075b0; 	T(bp = word_1f1d0;);	// 18228                  mov     bp, word_1F1D0 ;~ 01A2:75B0
cs=0x1a2;eip=0x0075b4; 	X(word_1f3ac = dx;);	// 18229                  mov     ds:word_1F3AC, dx ;~ 01A2:75B4
cs=0x1a2;eip=0x0075b8; 	T(SHL(dx, 1));	// 18230                  shl     dx, 1 ;~ 01A2:75B8
cs=0x1a2;eip=0x0075ba; 	T(ADD(bp, dx));	// 18231                  add     bp, dx ;~ 01A2:75BA
cs=0x1a2;eip=0x0075bc; 	T(MOV(dx, *(dw*)(raddr(ss,bp+0))));	// 18232                  mov     dx, [bp+0] ;~ 01A2:75BC
cs=0x1a2;eip=0x0075bf; 	T(bp = word_1f1d2;);	// 18233                  mov     bp, word_1F1D2 ;~ 01A2:75BF
cs=0x1a2;eip=0x0075c3; 	T(ADD(bp, dx));	// 18234                  add     bp, dx ;~ 01A2:75C3
cs=0x1a2;eip=0x0075c5; 	J(CALL(sub_175ca,0));	// 18235                  call    sub_175CA ;~ 01A2:75C5
cs=0x1a2;eip=0x0075c8; 	X(POP(dx));	// 18236                  pop     dx ;~ 01A2:75C8
cs=0x1a2;eip=0x0075c9; 	J(RETN(0));	// 18237                  retn ;~ 01A2:75C9

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_175af: 	goto sub_175af;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_175ca(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_175ca:
    _begin:
cs=0x1a2;eip=0x0075ca; 	X(PUSH(bx));	// 18245                  push    bx ;~ 01A2:75CA
cs=0x1a2;eip=0x0075cb; 	X(PUSH(cx));	// 18246                  push    cx ;~ 01A2:75CB
cs=0x1a2;eip=0x0075cc; 	X(PUSH(dx));	// 18247                  push    dx ;~ 01A2:75CC
cs=0x1a2;eip=0x0075cd; 	X(PUSH(ax));	// 18248                  push    ax ;~ 01A2:75CD
cs=0x1a2;eip=0x0075ce; 	X(PUSH(si));	// 18249                  push    si ;~ 01A2:75CE
cs=0x1a2;eip=0x0075cf; 	X(PUSH(es));	// 18250                  push    es ;~ 01A2:75CF
cs=0x1a2;eip=0x0075d0; 	T(es = seg_1f8f4;);	// 18251                  mov     es, ds:seg_1F8F4 ;~ 01A2:75D0
cs=0x1a2;eip=0x0075d4; 	T(di = 0x0A62;);	// 18253                  mov     di, 0A62h ;~ 01A2:75D4
cs=0x1a2;eip=0x0075d7; 	T(bx = 0x0F852;);	// 18254                  mov     bx, 0F852h ;~ 01A2:75D7
loc_175da:
	// 5559 
cs=0x1a2;eip=0x0075da; 	T(MOV(al, *(raddr(ss,bp+0))));	// 18257                  mov     al, [bp+0] ;~ 01A2:75DA
cs=0x1a2;eip=0x0075dd; 	T(SHR(al, 1));	// 18258                  shr     al, 1 ;~ 01A2:75DD
cs=0x1a2;eip=0x0075df; 	T(SHR(al, 1));	// 18259                  shr     al, 1 ;~ 01A2:75DF
cs=0x1a2;eip=0x0075e1; 	J(CALL(sub_1762b,0));	// 18260                  call    sub_1762B ;~ 01A2:75E1
cs=0x1a2;eip=0x0075e4; 	J(JZ(loc_17621));	// 18261                  jz      short loc_17621 ;~ 01A2:75E4
cs=0x1a2;eip=0x0075e6; 	T(MOV(al, *(raddr(ss,bp+0))));	// 18262                  mov     al, [bp+0] ;~ 01A2:75E6
cs=0x1a2;eip=0x0075e9; 	T(INC(bp));	// 18263                  inc     bp ;~ 01A2:75E9
cs=0x1a2;eip=0x0075ea; 	T(AND(al, 3));	// 18264                  and     al, 3 ;~ 01A2:75EA
cs=0x1a2;eip=0x0075ec; 	T(MOV(dl, *(raddr(ss,bp+0))));	// 18265                  mov     dl, [bp+0] ;~ 01A2:75EC
cs=0x1a2;eip=0x0075ef; 	T(cl = 4;);	// 18266                  mov     cl, 4 ;~ 01A2:75EF
cs=0x1a2;eip=0x0075f1; 	T(SHR(dl, cl));	// 18267                  shr     dl, cl ;~ 01A2:75F1
cs=0x1a2;eip=0x0075f3; 	T(SHL(al, cl));	// 18268                  shl     al, cl ;~ 01A2:75F3
cs=0x1a2;eip=0x0075f5; 	T(OR(al, dl));	// 18269                  or      al, dl ;~ 01A2:75F5
cs=0x1a2;eip=0x0075f7; 	J(CALL(sub_1762b,0));	// 18270                  call    sub_1762B ;~ 01A2:75F7
cs=0x1a2;eip=0x0075fa; 	J(JZ(loc_17621));	// 18271                  jz      short loc_17621 ;~ 01A2:75FA
cs=0x1a2;eip=0x0075fc; 	T(MOV(al, *(raddr(ss,bp+0))));	// 18272                  mov     al, [bp+0] ;~ 01A2:75FC
cs=0x1a2;eip=0x0075ff; 	T(INC(bp));	// 18273                  inc     bp ;~ 01A2:75FF
cs=0x1a2;eip=0x007600; 	T(AND(al, 0x0F));	// 18274                  and     al, 0Fh ;~ 01A2:7600
cs=0x1a2;eip=0x007602; 	T(cl = 2;);	// 18275                  mov     cl, 2 ;~ 01A2:7602
cs=0x1a2;eip=0x007604; 	T(SHL(al, cl));	// 18276                  shl     al, cl ;~ 01A2:7604
cs=0x1a2;eip=0x007606; 	T(MOV(dl, *(raddr(ss,bp+0))));	// 18277                  mov     dl, [bp+0] ;~ 01A2:7606
cs=0x1a2;eip=0x007609; 	T(AND(dx, 0x0C0));	// 18278                  and     dx, 0C0h ;~ 01A2:7609
cs=0x1a2;eip=0x00760d; 	T(SHL(dx, cl));	// 18279                  shl     dx, cl ;~ 01A2:760D
cs=0x1a2;eip=0x00760f; 	T(OR(al, dh));	// 18280                  or      al, dh ;~ 01A2:760F
cs=0x1a2;eip=0x007611; 	J(CALL(sub_1762b,0));	// 18281                  call    sub_1762B ;~ 01A2:7611
cs=0x1a2;eip=0x007614; 	J(JZ(loc_17621));	// 18282                  jz      short loc_17621 ;~ 01A2:7614
cs=0x1a2;eip=0x007616; 	T(MOV(al, *(raddr(ss,bp+0))));	// 18283                  mov     al, [bp+0] ;~ 01A2:7616
cs=0x1a2;eip=0x007619; 	T(INC(bp));	// 18284                  inc     bp ;~ 01A2:7619
cs=0x1a2;eip=0x00761a; 	T(AND(al, 0x3F));	// 18285                  and     al, 3Fh ;~ 01A2:761A
cs=0x1a2;eip=0x00761c; 	J(CALL(sub_1762b,0));	// 18286                  call    sub_1762B ;~ 01A2:761C
cs=0x1a2;eip=0x00761f; 	J(JNZ(loc_175da));	// 18287                  jnz     short loc_175DA ;~ 01A2:761F
loc_17621:
	// 5560 
cs=0x1a2;eip=0x007621; 	T(di = 0x0A62;);	// 18291                  mov     di, 0A62h ;~ 01A2:7621
cs=0x1a2;eip=0x007624; 	X(POP(es));	// 18292                  pop     es ;~ 01A2:7624
cs=0x1a2;eip=0x007625; 	X(POP(si));	// 18294                  pop     si ;~ 01A2:7625
cs=0x1a2;eip=0x007626; 	X(POP(ax));	// 18295                  pop     ax ;~ 01A2:7626
cs=0x1a2;eip=0x007627; 	X(POP(dx));	// 18296                  pop     dx ;~ 01A2:7627
cs=0x1a2;eip=0x007628; 	X(POP(cx));	// 18297                  pop     cx ;~ 01A2:7628
cs=0x1a2;eip=0x007629; 	X(POP(bx));	// 18298                  pop     bx ;~ 01A2:7629
cs=0x1a2;eip=0x00762a; 	J(RETN(0));	// 18299                  retn ;~ 01A2:762A

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_175da: 	goto loc_175da;
        case m2c::kloc_17621: 	goto loc_17621;
        case m2c::ksub_175ca: 	goto sub_175ca;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1762b(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1762b:
    _begin:
cs=0x1a2;eip=0x00762b; 	T(XLAT);	// 18309                  xlat ;~ 01A2:762B
cs=0x1a2;eip=0x00762c; 	T(CMP(al, 0x0FF));	// 18310                  cmp     al, 0FFh ;~ 01A2:762C
cs=0x1a2;eip=0x00762e; 	J(JZ(loc_17631));	// 18311                  jz      short loc_17631 ;~ 01A2:762E
cs=0x1a2;eip=0x007630; 	X(STOSB);	// 18312                  stosb ;~ 01A2:7630
loc_17631:
	// 5561 
cs=0x1a2;eip=0x007631; 	T(OR(al, al));	// 18315                  or      al, al ;~ 01A2:7631
cs=0x1a2;eip=0x007633; 	J(RETN(0));	// 18316                  retn ;~ 01A2:7633

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_17631: 	goto loc_17631;
        case m2c::ksub_1762b: 	goto sub_1762b;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_17634(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_17634:
    _begin:
cs=0x1a2;eip=0x007634; 	T(si = word_1f1ca;);	// 18325                  mov     si, word_1F1CA ;~ 01A2:7634
cs=0x1a2;eip=0x007638; 	T(CMP(word_1f396, 0));	// 18326                  cmp     ds:word_1F396, 0 ;~ 01A2:7638
cs=0x1a2;eip=0x00763d; 	J(JNZ(loc_17642));	// 18327                  jnz     short loc_17642 ;~ 01A2:763D
cs=0x1a2;eip=0x00763f; 	J(JMP(locret_176fb));	// 18328                  jmp     locret_176FB ;~ 01A2:763F
loc_17642:
	// 5562 
cs=0x1a2;eip=0x007642; 	T(LODSW);	// 18333                  lodsw ;~ 01A2:7642
cs=0x1a2;eip=0x007643; 	T(cx = ax;);	// 18334                  mov     cx, ax ;~ 01A2:7643
cs=0x1a2;eip=0x007645; 	T(LODSW);	// 18335                  lodsw ;~ 01A2:7645
cs=0x1a2;eip=0x007646; 	T(di = ax;);	// 18336                  mov     di, ax ;~ 01A2:7646
cs=0x1a2;eip=0x007648; 	T(LODSW);	// 18337                  lodsw ;~ 01A2:7648
cs=0x1a2;eip=0x007649; 	X(word_1f398 = ax;);	// 18338                  mov     ds:word_1F398, ax ;~ 01A2:7649
cs=0x1a2;eip=0x00764c; 	T(TEST(ch, 0x80));	// 18339                  test    ch, 80h ;~ 01A2:764C
cs=0x1a2;eip=0x00764f; 	X(PUSHF);	// 18340                  pushf ;~ 01A2:764F
cs=0x1a2;eip=0x007650; 	T(AND(ch, 0x7F));	// 18341                  and     ch, 7Fh ;~ 01A2:7650
cs=0x1a2;eip=0x007653; 	X(POPF);	// 18342                  popf ;~ 01A2:7653
cs=0x1a2;eip=0x007654; 	J(JZ(loc_1765a));	// 18343                  jz      short loc_1765A ;~ 01A2:7654
cs=0x1a2;eip=0x007656; 	T(LODSW);	// 18344                  lodsw ;~ 01A2:7656
cs=0x1a2;eip=0x007657; 	X(word_1f222 = ax;);	// 18345                  mov     word_1F222, ax ;~ 01A2:7657
loc_1765a:
	// 5563 
cs=0x1a2;eip=0x00765a; 	T(CMP(cl, 8));	// 18348                  cmp     cl, 8 ;~ 01A2:765A
cs=0x1a2;eip=0x00765d; 	J(JNZ(loc_17662));	// 18349                  jnz     short loc_17662 ;~ 01A2:765D
cs=0x1a2;eip=0x00765f; 	J(JMP(loc_17807));	// 18350                  jmp     loc_17807 ;~ 01A2:765F
loc_17662:
	// 5564 
cs=0x1a2;eip=0x007662; 	T(TEST(ch, 0x40));	// 18354                  test    ch, 40h ;~ 01A2:7662
cs=0x1a2;eip=0x007665; 	X(PUSHF);	// 18355                  pushf ;~ 01A2:7665
cs=0x1a2;eip=0x007666; 	T(AND(ch, 0x0BF));	// 18356                  and     ch, 0BFh ;~ 01A2:7666
cs=0x1a2;eip=0x007669; 	X(POPF);	// 18357                  popf ;~ 01A2:7669
cs=0x1a2;eip=0x00766a; 	J(JZ(loc_1767a));	// 18358                  jz      short loc_1767A ;~ 01A2:766A
cs=0x1a2;eip=0x00766c; 	T(MOV(al, *(raddr(ds,di+0x1F))));	// 18359                  mov     al, [di+1Fh] ;~ 01A2:766C
cs=0x1a2;eip=0x00766f; 	T(OR(al, al));	// 18360                  or      al, al ;~ 01A2:766F
cs=0x1a2;eip=0x007671; 	J(JZ(loc_176ec));	// 18361                  jz      short loc_176EC ;~ 01A2:7671
cs=0x1a2;eip=0x007673; 	T(bp = di;);	// 18363                  mov     bp, di ;~ 01A2:7673
cs=0x1a2;eip=0x007675; 	T(ADD(bp, 0x20));	// 18364                  add     bp, 20h ; ' ' ;~ 01A2:7675
cs=0x1a2;eip=0x007678; 	J(JMP(loc_17686));	// 18365                  jmp     short loc_17686 ;~ 01A2:7678
loc_1767a:
	// 5565 
cs=0x1a2;eip=0x00767a; 	T(MOV(al, *(raddr(ds,di+0x0B))));	// 18369                  mov     al, [di+0Bh] ;~ 01A2:767A
cs=0x1a2;eip=0x00767d; 	T(OR(al, al));	// 18370                  or      al, al ;~ 01A2:767D
cs=0x1a2;eip=0x00767f; 	J(JZ(loc_176ec));	// 18371                  jz      short loc_176EC ;~ 01A2:767F
cs=0x1a2;eip=0x007681; 	T(bp = di;);	// 18372                  mov     bp, di ;~ 01A2:7681
cs=0x1a2;eip=0x007683; 	T(ADD(bp, 0x10));	// 18373                  add     bp, 10h ;~ 01A2:7683
loc_17686:
	// 5566 
cs=0x1a2;eip=0x007686; 	X(word_1f20e = si;);	// 18376                  mov     word_1F20E, si ;~ 01A2:7686
cs=0x1a2;eip=0x00768a; 	X(byte_1f3a4 = al;);	// 18377                  mov     ds:byte_1F3A4, al ;~ 01A2:768A
loc_1768d:
	// 5567 
cs=0x1a2;eip=0x00768d; 	T(si = bp;);	// 18380                  mov     si, bp ;~ 01A2:768D
cs=0x1a2;eip=0x00768f; 	T(INC(si));	// 18381                  inc     si ;~ 01A2:768F
cs=0x1a2;eip=0x007690; 	T(LODSB);	// 18382                  lodsb ;~ 01A2:7690
cs=0x1a2;eip=0x007691; 	T(ah = al;);	// 18383                  mov     ah, al ;~ 01A2:7691
cs=0x1a2;eip=0x007693; 	T(TEST(ah, 0x80));	// 18384                  test    ah, 80h ;~ 01A2:7693
cs=0x1a2;eip=0x007696; 	X(PUSHF);	// 18385                  pushf ;~ 01A2:7696
cs=0x1a2;eip=0x007697; 	T(AND(ah, 0x7F));	// 18386                  and     ah, 7Fh ;~ 01A2:7697
cs=0x1a2;eip=0x00769a; 	X(POPF);	// 18387                  popf ;~ 01A2:769A
cs=0x1a2;eip=0x00769b; 	T(CMP(ah, cl));	// 18388                  cmp     ah, cl ;~ 01A2:769B
cs=0x1a2;eip=0x00769d; 	J(JNZ(loc_176da));	// 18389                  jnz     short loc_176DA ;~ 01A2:769D
cs=0x1a2;eip=0x00769f; 	T(bx = cx;);	// 18390                  mov     bx, cx ;~ 01A2:769F
cs=0x1a2;eip=0x0076a1; 	X(word_1f20c = di;);	// 18391                  mov     word_1F20C, di ;~ 01A2:76A1
cs=0x1a2;eip=0x0076a5; 	T(SHL(bx, 1));	// 18392                  shl     bx, 1 ;~ 01A2:76A5
cs=0x1a2;eip=0x0076a7; 	T(ADD(bx, offset(seg000,byte_176fc)));	// 18393                  add     bx, offset byte_176FC ;~ 01A2:76A7
cs=0x1a2;eip=0x0076ab; 	X(PUSH(ax));	// 18394                  push    ax ;~ 01A2:76AB
cs=0x1a2;eip=0x0076ac; 	J(CALL(__dispatch_call,*(dw*)(raddr(cs,bx))));	// 18395                  call    word ptr cs:[bx] ;~ 01A2:76AC
cs=0x1a2;eip=0x0076af; 	T(OR(al, al));	// 18396                  or      al, al ;~ 01A2:76AF
cs=0x1a2;eip=0x0076b1; 	X(POP(ax));	// 18397                  pop     ax ;~ 01A2:76B1
cs=0x1a2;eip=0x0076b2; 	J(JS(loc_176da));	// 18398                  js      short loc_176DA ;~ 01A2:76B2
cs=0x1a2;eip=0x0076b4; 	X(byte_1f775 = 0;);	// 18399                  mov     ds:byte_1F775, 0 ;~ 01A2:76B4
cs=0x1a2;eip=0x0076b9; 	T(TEST(al, 0x80));	// 18400                  test    al, 80h ;~ 01A2:76B9
cs=0x1a2;eip=0x0076bb; 	J(JNZ(loc_176c2));	// 18401                  jnz     short loc_176C2 ;~ 01A2:76BB
cs=0x1a2;eip=0x0076bd; 	X(MOV(*(raddr(ds,bp+1)), 0x0FF));	// 18402                  mov     byte ptr ds:[bp+1], 0FFh ;~ 01A2:76BD
loc_176c2:
	// 5568 
cs=0x1a2;eip=0x0076c2; 	T(LODSB);	// 18406                  lodsb ;~ 01A2:76C2
cs=0x1a2;eip=0x0076c3; 	T(CMP(al, 0x17));	// 18407                  cmp     al, 17h ;~ 01A2:76C3
cs=0x1a2;eip=0x0076c5; 	J(JZ(loc_176e8));	// 18408                  jz      short loc_176E8 ;~ 01A2:76C5
cs=0x1a2;eip=0x0076c7; 	X(PUSH(ax));	// 18409                  push    ax ;~ 01A2:76C7
cs=0x1a2;eip=0x0076c8; 	X(PUSH(bp));	// 18410                  push    bp ;~ 01A2:76C8
cs=0x1a2;eip=0x0076c9; 	T(bl = al;);	// 18411                  mov     bl, al ;~ 01A2:76C9
cs=0x1a2;eip=0x0076cb; 	T(XOR(bh, bh));	// 18412                  xor     bh, bh ;~ 01A2:76CB
cs=0x1a2;eip=0x0076cd; 	T(SHL(bx, 1));	// 18413                  shl     bx, 1 ;~ 01A2:76CD
cs=0x1a2;eip=0x0076cf; 	T(ADD(bx, offset(seg000,byte_17819)));	// 18414                  add     bx, offset byte_17819 ;~ 01A2:76CF
cs=0x1a2;eip=0x0076d3; 	J(CALL(__dispatch_call,*(dw*)(raddr(cs,bx))));	// 18415                  call    word ptr cs:[bx] ;~ 01A2:76D3
cs=0x1a2;eip=0x0076d6; 	X(POP(bp));	// 18416                  pop     bp ;~ 01A2:76D6
cs=0x1a2;eip=0x0076d7; 	X(POP(ax));	// 18417                  pop     ax ;~ 01A2:76D7
cs=0x1a2;eip=0x0076d8; 	J(JMP(loc_176c2));	// 18418                  jmp     short loc_176C2 ;~ 01A2:76D8
loc_176da:
	// 5569 
cs=0x1a2;eip=0x0076da; 	T(XOR(ah, ah));	// 18423                  xor     ah, ah ;~ 01A2:76DA
cs=0x1a2;eip=0x0076dc; 	T(MOV(al, *(raddr(ds,bp+0))));	// 18424                  mov     al, ds:[bp+0] ;~ 01A2:76DC
cs=0x1a2;eip=0x0076e0; 	T(ADD(bp, ax));	// 18425                  add     bp, ax ;~ 01A2:76E0
cs=0x1a2;eip=0x0076e2; 	X(DEC(byte_1f3a4));	// 18426                  dec     ds:byte_1F3A4 ;~ 01A2:76E2
cs=0x1a2;eip=0x0076e6; 	J(JNZ(loc_1768d));	// 18427                  jnz     short loc_1768D ;~ 01A2:76E6
loc_176e8:
	// 5570 
cs=0x1a2;eip=0x0076e8; 	T(si = word_1f20e;);	// 18430                  mov     si, word_1F20E ;~ 01A2:76E8
loc_176ec:
	// 5571 
cs=0x1a2;eip=0x0076ec; 	X(DEC(word_1f396));	// 18434                  dec     ds:word_1F396 ;~ 01A2:76EC
cs=0x1a2;eip=0x0076f0; 	J(JZ(loc_176f5));	// 18435                  jz      short loc_176F5 ;~ 01A2:76F0
cs=0x1a2;eip=0x0076f2; 	J(JMP(loc_17642));	// 18436                  jmp     loc_17642 ;~ 01A2:76F2
loc_176f5:
	// 5572 
cs=0x1a2;eip=0x0076f5; 	T(ax = word_1f1ca;);	// 18440                  mov     ax, word_1F1CA ;~ 01A2:76F5
cs=0x1a2;eip=0x0076f8; 	X(word_1f1f4 = ax;);	// 18441                  mov     word_1F1F4, ax ;~ 01A2:76F8
locret_176fb:
	// 5573 
cs=0x1a2;eip=0x0076fb; 	J(RETN(0));	// 18444                  retn ;~ 01A2:76FB
ret_1a2_779d:
	// 5574 
cs=0x1a2;eip=0x00779d; 	T(INC(bx));	// 18608                  inc     bx ;~ 01A2:779D
loc_1779f:
	// 5575 
cs=0x1a2;eip=0x00779f; 	T(XOR(al, al));	// 18611                  xor     al, al ;~ 01A2:779F
cs=0x1a2;eip=0x0077a1; 	J(RETN(0));	// 18612                  retn ;~ 01A2:77A1
ret_1a2_77a2:
	// 5576 
cs=0x1a2;eip=0x0077a2; 	X(PUSH(si));	// 18614                  push    si ;~ 01A2:77A2
cs=0x1a2;eip=0x0077a3; 	X(PUSH(di));	// 18615                  push    di ;~ 01A2:77A3
cs=0x1a2;eip=0x0077a4; 	T(XOR(ah, ah));	// 18616                  xor     ah, ah ;~ 01A2:77A4
cs=0x1a2;eip=0x0077a6; 	T(si = di;);	// 18617                  mov     si, di ;~ 01A2:77A6
cs=0x1a2;eip=0x0077a8; 	T(MOV(al, *(raddr(ds,di+0x0C))));	// 18618                  mov     al, [di+0Ch] ;~ 01A2:77A8
cs=0x1a2;eip=0x0077ab; 	T(ADD(di, ax));	// 18619                  add     di, ax ;~ 01A2:77AB
cs=0x1a2;eip=0x0077ad; 	T(MOV(al, *(raddr(ds,di+4))));	// 18620                  mov     al, [di+4] ;~ 01A2:77AD
cs=0x1a2;eip=0x0077b0; 	T(TEST(*(raddr(ds,di+6)), 4));	// 18621                  test    byte ptr [di+6], 4 ;~ 01A2:77B0
cs=0x1a2;eip=0x0077b4; 	J(JZ(loc_177b8));	// 18622                  jz      short loc_177B8 ;~ 01A2:77B4
cs=0x1a2;eip=0x0077b6; 	T(SHL(ax, 1));	// 18623                  shl     ax, 1 ;~ 01A2:77B6
loc_177b8:
	// 5577 
cs=0x1a2;eip=0x0077b8; 	X(ADD(word_1f3bc, ax));	// 18626                  add     ds:word_1F3BC, ax ;~ 01A2:77B8
cs=0x1a2;eip=0x0077bc; 	X(ADC(word_1f3bc, 0));	// 18627                  adc     ds:word_1F3BC, 0 ;~ 01A2:77BC
cs=0x1a2;eip=0x0077c1; 	T(TEST(*(raddr(ds,di+6)), 2));	// 18628                  test    byte ptr [di+6], 2 ;~ 01A2:77C1
cs=0x1a2;eip=0x0077c5; 	J(JNZ(loc_177e7));	// 18629                  jnz     short loc_177E7 ;~ 01A2:77C5
cs=0x1a2;eip=0x0077c7; 	T(MOV(si, *(dw*)(raddr(ds,si+8))));	// 18630                  mov     si, [si+8] ;~ 01A2:77C7
cs=0x1a2;eip=0x0077ca; 	T(MOV(al, *(raddr(ds,si+0x22))));	// 18631                  mov     al, [si+22h] ;~ 01A2:77CA
cs=0x1a2;eip=0x0077cd; 	T(CMP(al, 0x0FF));	// 18632                  cmp     al, 0FFh ;~ 01A2:77CD
cs=0x1a2;eip=0x0077cf; 	J(JZ(loc_177df));	// 18633                  jz      short loc_177DF ;~ 01A2:77CF
cs=0x1a2;eip=0x0077d1; 	J(CALL(sub_11613,0));	// 18634                  call    sub_11613 ;~ 01A2:77D1
cs=0x1a2;eip=0x0077d4; 	T(ax = seg_1149a;);	// 18635                  mov     ax, cs:seg_1149A ;~ 01A2:77D4
loc_177d8:
	// 5578 
cs=0x1a2;eip=0x0077d8; 	T(CMP(ax, seg_1149a));	// 18638                  cmp     ax, cs:seg_1149A ;~ 01A2:77D8
cs=0x1a2;eip=0x0077dd; 	J(JZ(loc_177d8));	// 18639                  jz      short loc_177D8 ;~ 01A2:77DD
loc_177df:
	// 5579 
cs=0x1a2;eip=0x0077df; 	X(PUSH(ax));	// 18642                  push    ax ;~ 01A2:77DF
cs=0x1a2;eip=0x0077e0; 	T(ax = 0x21;);	// 18643                  mov     ax, 21h ; '!' ;~ 01A2:77E0
cs=0x1a2;eip=0x0077e3; 	J(CALL(sub_1156c,0));	// 18644                  call    sub_1156C ;~ 01A2:77E3
cs=0x1a2;eip=0x0077e6; 	X(POP(ax));	// 18645                  pop     ax ;~ 01A2:77E6
loc_177e7:
	// 5580 
cs=0x1a2;eip=0x0077e7; 	X(POP(di));	// 18648                  pop     di ;~ 01A2:77E7
cs=0x1a2;eip=0x0077e8; 	X(POP(si));	// 18649                  pop     si ;~ 01A2:77E8
cs=0x1a2;eip=0x0077e9; 	T(XOR(al, al));	// 18650                  xor     al, al ;~ 01A2:77E9
cs=0x1a2;eip=0x0077eb; 	J(RETN(0));	// 18651                  retn ;~ 01A2:77EB
ret_1a2_77ec:
	// 5581 
cs=0x1a2;eip=0x0077ec; 	T(TEST(al, 0x80));	// 18653                  test    al, 80h ;~ 01A2:77EC
cs=0x1a2;eip=0x0077ee; 	J(JNZ(loc_177fa));	// 18654                  jnz     short loc_177FA ;~ 01A2:77EE
cs=0x1a2;eip=0x0077f0; 	T(TEST(*(raddr(ds,di+3)), 0x20));	// 18655                  test    byte ptr [di+3], 20h ;~ 01A2:77F0
cs=0x1a2;eip=0x0077f4; 	X(PUSHF);	// 18656                  pushf ;~ 01A2:77F4
cs=0x1a2;eip=0x0077f5; 	X(AND(*(raddr(ds,di+3)), 0x0DF));	// 18657                  and     byte ptr [di+3], 0DFh ;~ 01A2:77F5
cs=0x1a2;eip=0x0077f9; 	X(POPF);	// 18658                  popf ;~ 01A2:77F9
loc_177fa:
	// 5582 
cs=0x1a2;eip=0x0077fa; 	T(XOR(al, al));	// 18661                  xor     al, al ;~ 01A2:77FA
cs=0x1a2;eip=0x0077fc; 	J(RETN(0));	// 18662                  retn ;~ 01A2:77FC
ret_1a2_77fd:
	// 5583 
cs=0x1a2;eip=0x0077fd; 	T(LODSB);	// 18664                  lodsb ;~ 01A2:77FD
cs=0x1a2;eip=0x0077fe; 	T(CMP(al, *(db*)(&word_1f398)));	// 18665                  cmp     al, byte ptr ds:word_1F398 ;~ 01A2:77FE
cs=0x1a2;eip=0x007802; 	J(JZ(loc_1779f));	// 18666                  jz      short loc_1779F ;~ 01A2:7802
cs=0x1a2;eip=0x007804; 	T(al = 0x0FF;);	// 18667                  mov     al, 0FFh ;~ 01A2:7804
cs=0x1a2;eip=0x007806; 	J(RETN(0));	// 18668                  retn ;~ 01A2:7806
loc_17807:
	// 5584 
cs=0x1a2;eip=0x007807; 	J(CALL(sub_1d445,0));	// 18672                  call    sub_1D445 ;~ 01A2:7807
cs=0x1a2;eip=0x00780a; 	T(XCHG(si, di));	// 18673                  xchg    si, di ;~ 01A2:780A
cs=0x1a2;eip=0x00780c; 	T(cl = 0x0A;);	// 18674                  mov     cl, 0Ah ;~ 01A2:780C
cs=0x1a2;eip=0x00780e; 	J(CALL(sub_13543,0));	// 18675                  call    sub_13543 ;~ 01A2:780E
cs=0x1a2;eip=0x007811; 	T(XCHG(si, di));	// 18676                  xchg    si, di ;~ 01A2:7811
cs=0x1a2;eip=0x007813; 	J(CALL(sub_1d445,0));	// 18677                  call    sub_1D445 ;~ 01A2:7813
cs=0x1a2;eip=0x007816; 	J(JMP(loc_176ec));	// 18678                  jmp     loc_176EC ;~ 01A2:7816

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_17642: 	goto loc_17642;
        case m2c::kloc_1765a: 	goto loc_1765a;
        case m2c::kloc_17662: 	goto loc_17662;
        case m2c::kloc_1767a: 	goto loc_1767a;
        case m2c::kloc_17686: 	goto loc_17686;
        case m2c::kloc_1768d: 	goto loc_1768d;
        case m2c::kloc_176c2: 	goto loc_176c2;
        case m2c::kloc_176da: 	goto loc_176da;
        case m2c::kloc_176e8: 	goto loc_176e8;
        case m2c::kloc_176ec: 	goto loc_176ec;
        case m2c::kloc_176f5: 	goto loc_176f5;
        case m2c::kloc_1779f: 	goto loc_1779f;
        case m2c::kloc_177b8: 	goto loc_177b8;
        case m2c::kloc_177d8: 	goto loc_177d8;
        case m2c::kloc_177df: 	goto loc_177df;
        case m2c::kloc_177e7: 	goto loc_177e7;
        case m2c::kloc_177fa: 	goto loc_177fa;
        case m2c::kloc_17807: 	goto loc_17807;
        case m2c::klocret_176fb: 	goto locret_176fb;
        case m2c::kret_1a2_779d: 	goto ret_1a2_779d;
        case m2c::kret_1a2_77a2: 	goto ret_1a2_77a2;
        case m2c::kret_1a2_77ec: 	goto ret_1a2_77ec;
        case m2c::kret_1a2_77fd: 	goto ret_1a2_77fd;
        case m2c::ksub_17634: 	goto sub_17634;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_78d5_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_78d5_proc:
    _begin:
cs=0x1a2;eip=0x0078d5; 	X(PUSH(ax));	// 18872                  push    ax ;~ 01A2:78D5
cs=0x1a2;eip=0x0078d6; 	T(LODSW);	// 18873                  lodsw ;~ 01A2:78D6
cs=0x1a2;eip=0x0078d7; 	T(XCHG(al, ah));	// 18874                  xchg    al, ah ;~ 01A2:78D7
cs=0x1a2;eip=0x0078d9; 	T(dx = ax;);	// 18875                  mov     dx, ax ;~ 01A2:78D9
cs=0x1a2;eip=0x0078db; 	X(POP(ax));	// 18876                  pop     ax ;~ 01A2:78DB
cs=0x1a2;eip=0x0078dc; 	J({;});	// 18877                  jmp     short $+2 ;~ 01A2:78DC
loc_178de:
	// 5585 
cs=0x1a2;eip=0x0078de; 	J(CALL(sub_17d26,m2c::kloc_17d2d));	// 18882                  call    loc_17D2D ;~ 01A2:78DE
cs=0x1a2;eip=0x0078e1; 	J(JZ(locret_17902));	// 18883                  jz      short locret_17902 ;~ 01A2:78E1
cs=0x1a2;eip=0x0078e3; 	T(cx = dx;);	// 18884                  mov     cx, dx ;~ 01A2:78E3
cs=0x1a2;eip=0x0078e5; 	X(PUSH(si));	// 18885                  push    si ;~ 01A2:78E5
cs=0x1a2;eip=0x0078e6; 	J(CALL(sub_13f25,0));	// 18886                  call    sub_13F25 ;~ 01A2:78E6
cs=0x1a2;eip=0x0078e9; 	T(MOV(dx, *(dw*)(raddr(ds,di+6))));	// 18887                  mov     dx, [di+6] ;~ 01A2:78E9
cs=0x1a2;eip=0x0078ec; 	T(ax = 2;);	// 18888                  mov     ax, 2 ;~ 01A2:78EC
cs=0x1a2;eip=0x0078ef; 	J(CALL(sub_1410e,0));	// 18889                  call    sub_1410E ;~ 01A2:78EF
cs=0x1a2;eip=0x0078f2; 	T(CMP(*(raddr(es,di+0x16)), 3));	// 18890                  cmp     byte ptr es:[di+16h], 3 ;~ 01A2:78F2
cs=0x1a2;eip=0x0078f7; 	T(dx = cx;);	// 18891                  mov     dx, cx ;~ 01A2:78F7
cs=0x1a2;eip=0x0078f9; 	J(JNZ(loc_178fe));	// 18892                  jnz     short loc_178FE ;~ 01A2:78F9
cs=0x1a2;eip=0x0078fb; 	T(OR(dh, 0x80));	// 18893                  or      dh, 80h ;~ 01A2:78FB
loc_178fe:
	// 5586 
cs=0x1a2;eip=0x0078fe; 	J(CALL(sub_162a9,0));	// 18896                  call    sub_162A9 ;~ 01A2:78FE
cs=0x1a2;eip=0x007901; 	X(POP(si));	// 18897                  pop     si ;~ 01A2:7901
locret_17902:
	// 5587 
cs=0x1a2;eip=0x007902; 	J(RETN(0));	// 18900                  retn ;~ 01A2:7902
ret_1a2_7903:
	// 5588 
cs=0x1a2;eip=0x007903; 	X(PUSH(ax));	// 18902                  push    ax ;~ 01A2:7903
cs=0x1a2;eip=0x007904; 	T(LODSW);	// 18903                  lodsw ;~ 01A2:7904
cs=0x1a2;eip=0x007905; 	T(XCHG(al, ah));	// 18904                  xchg    al, ah ;~ 01A2:7905
cs=0x1a2;eip=0x007907; 	T(dx = ax;);	// 18905                  mov     dx, ax ;~ 01A2:7907
cs=0x1a2;eip=0x007909; 	X(POP(ax));	// 18906                  pop     ax ;~ 01A2:7909
cs=0x1a2;eip=0x00790a; 	X(PUSH(si));	// 18907                  push    si ;~ 01A2:790A
cs=0x1a2;eip=0x00790b; 	X(PUSH(bp));	// 18908                  push    bp ;~ 01A2:790B
cs=0x1a2;eip=0x00790c; 	J(CALL(sub_1407f,0));	// 18909                  call    sub_1407F ;~ 01A2:790C
cs=0x1a2;eip=0x00790f; 	J(JNZ(loc_17914));	// 18910                  jnz     short loc_17914 ;~ 01A2:790F
cs=0x1a2;eip=0x007911; 	J(JMP(loc_17997));	// 18911                  jmp     loc_17997 ;~ 01A2:7911
loc_17914:
	// 5589 
cs=0x1a2;eip=0x007914; 	T(si = di;);	// 18915                  mov     si, di ;~ 01A2:7914
cs=0x1a2;eip=0x007916; 	T(TEST(*(raddr(ds,si+3)), 0x80));	// 18916                  test    byte ptr [si+3], 80h ;~ 01A2:7916
cs=0x1a2;eip=0x00791a; 	X(PUSHF);	// 18917                  pushf ;~ 01A2:791A
cs=0x1a2;eip=0x00791b; 	X(AND(*(raddr(ds,si+3)), 0x7F));	// 18918                  and     byte ptr [si+3], 7Fh ;~ 01A2:791B
cs=0x1a2;eip=0x00791f; 	X(POPF);	// 18919                  popf ;~ 01A2:791F
cs=0x1a2;eip=0x007920; 	J(JZ(loc_17997));	// 18920                  jz      short loc_17997 ;~ 01A2:7920
cs=0x1a2;eip=0x007922; 	T(dx = word_1f3a2;);	// 18921                  mov     dx, ds:word_1F3A2 ;~ 01A2:7922
cs=0x1a2;eip=0x007926; 	T(CMP(dl, *(raddr(ds,si+0x0A))));	// 18922                  cmp     dl, [si+0Ah] ;~ 01A2:7926
cs=0x1a2;eip=0x007929; 	J(JZ(loc_17937));	// 18923                  jz      short loc_17937 ;~ 01A2:7929
cs=0x1a2;eip=0x00792b; 	T(TEST(*(raddr(ds,si+3)), 8));	// 18924                  test    byte ptr [si+3], 8 ;~ 01A2:792B
cs=0x1a2;eip=0x00792f; 	X(PUSHF);	// 18925                  pushf ;~ 01A2:792F
cs=0x1a2;eip=0x007930; 	X(OR(*(raddr(ds,si+3)), 8));	// 18926                  or      byte ptr [si+3], 8 ;~ 01A2:7930
cs=0x1a2;eip=0x007934; 	X(POPF);	// 18927                  popf ;~ 01A2:7934
cs=0x1a2;eip=0x007935; 	J(JMP(loc_17997));	// 18928                  jmp     short loc_17997 ;~ 01A2:7935
loc_17937:
	// 5590 
cs=0x1a2;eip=0x007937; 	T(MOV(dx, *(dw*)(raddr(ds,si+6))));	// 18932                  mov     dx, [si+6] ;~ 01A2:7937
cs=0x1a2;eip=0x00793a; 	T(ax = 2;);	// 18933                  mov     ax, 2 ;~ 01A2:793A
cs=0x1a2;eip=0x00793d; 	J(CALL(sub_1410e,0));	// 18934                  call    sub_1410E ;~ 01A2:793D
cs=0x1a2;eip=0x007940; 	T(TEST(*(raddr(ds,si+0x0F)), 0x20));	// 18935                  test    byte ptr [si+0Fh], 20h ;~ 01A2:7940
cs=0x1a2;eip=0x007944; 	J(JZ(loc_1795c));	// 18936                  jz      short loc_1795C ;~ 01A2:7944
cs=0x1a2;eip=0x007946; 	T(MOV(dl, *(raddr(ds,si))));	// 18937                  mov     dl, [si] ;~ 01A2:7946
cs=0x1a2;eip=0x007948; 	T(MOV(dh, *(raddr(ds,si+1))));	// 18938                  mov     dh, [si+1] ;~ 01A2:7948
cs=0x1a2;eip=0x00794b; 	T(MOV(ch, *(raddr(ds,si+2))));	// 18939                  mov     ch, [si+2] ;~ 01A2:794B
cs=0x1a2;eip=0x00794e; 	T(bp = 0x4F;);	// 18940                  mov     bp, 4Fh ; 'O' ;~ 01A2:794E
cs=0x1a2;eip=0x007951; 	X(PUSH(si));	// 18941                  push    si ;~ 01A2:7951
cs=0x1a2;eip=0x007952; 	X(PUSH(di));	// 18942                  push    di ;~ 01A2:7952
cs=0x1a2;eip=0x007953; 	J(CALL(sub_11cc1,0));	// 18943                  call    sub_11CC1 ;~ 01A2:7953
cs=0x1a2;eip=0x007956; 	X(POP(di));	// 18944                  pop     di ;~ 01A2:7956
cs=0x1a2;eip=0x007957; 	X(POP(si));	// 18945                  pop     si ;~ 01A2:7957
cs=0x1a2;eip=0x007958; 	J(JZ(loc_17997));	// 18946                  jz      short loc_17997 ;~ 01A2:7958
cs=0x1a2;eip=0x00795a; 	J(JMP(loc_17984));	// 18947                  jmp     short loc_17984 ;~ 01A2:795A
loc_1795c:
	// 5591 
cs=0x1a2;eip=0x00795c; 	T(MOV(dl, *(raddr(ds,si))));	// 18951                  mov     dl, [si] ;~ 01A2:795C
cs=0x1a2;eip=0x00795e; 	T(MOV(dh, *(raddr(ds,si+1))));	// 18952                  mov     dh, [si+1] ;~ 01A2:795E
cs=0x1a2;eip=0x007961; 	T(MOV(ch, *(raddr(ds,si+2))));	// 18953                  mov     ch, [si+2] ;~ 01A2:7961
cs=0x1a2;eip=0x007964; 	T(bp = 0x0F;);	// 18954                  mov     bp, 0Fh ;~ 01A2:7964
cs=0x1a2;eip=0x007967; 	X(PUSH(si));	// 18955                  push    si ;~ 01A2:7967
cs=0x1a2;eip=0x007968; 	X(PUSH(di));	// 18956                  push    di ;~ 01A2:7968
cs=0x1a2;eip=0x007969; 	J(CALL(sub_11cc1,0));	// 18957                  call    sub_11CC1 ;~ 01A2:7969
cs=0x1a2;eip=0x00796c; 	X(POP(di));	// 18958                  pop     di ;~ 01A2:796C
cs=0x1a2;eip=0x00796d; 	X(POP(si));	// 18959                  pop     si ;~ 01A2:796D
cs=0x1a2;eip=0x00796e; 	J(JNZ(loc_17984));	// 18960                  jnz     short loc_17984 ;~ 01A2:796E
cs=0x1a2;eip=0x007970; 	T(MOV(dl, *(raddr(ds,si))));	// 18961                  mov     dl, [si] ;~ 01A2:7970
cs=0x1a2;eip=0x007972; 	T(MOV(dh, *(raddr(ds,si+1))));	// 18962                  mov     dh, [si+1] ;~ 01A2:7972
cs=0x1a2;eip=0x007975; 	T(MOV(ch, *(raddr(ds,si+2))));	// 18963                  mov     ch, [si+2] ;~ 01A2:7975
cs=0x1a2;eip=0x007978; 	T(bp = 0x3F;);	// 18964                  mov     bp, 3Fh ; '?' ;~ 01A2:7978
cs=0x1a2;eip=0x00797b; 	X(PUSH(si));	// 18965                  push    si ;~ 01A2:797B
cs=0x1a2;eip=0x00797c; 	X(PUSH(di));	// 18966                  push    di ;~ 01A2:797C
cs=0x1a2;eip=0x00797d; 	J(CALL(sub_11cc1,0));	// 18967                  call    sub_11CC1 ;~ 01A2:797D
cs=0x1a2;eip=0x007980; 	X(POP(di));	// 18968                  pop     di ;~ 01A2:7980
cs=0x1a2;eip=0x007981; 	X(POP(si));	// 18969                  pop     si ;~ 01A2:7981
cs=0x1a2;eip=0x007982; 	J(JZ(loc_17997));	// 18970                  jz      short loc_17997 ;~ 01A2:7982
loc_17984:
	// 5592 
cs=0x1a2;eip=0x007984; 	X(MOV(*(raddr(ds,si)), dl));	// 18974                  mov     [si], dl ;~ 01A2:7984
cs=0x1a2;eip=0x007986; 	X(MOV(*(raddr(ds,si+1)), dh));	// 18975                  mov     [si+1], dh ;~ 01A2:7986
cs=0x1a2;eip=0x007989; 	X(MOV(*(raddr(ds,si+2)), ch));	// 18976                  mov     [si+2], ch ;~ 01A2:7989
cs=0x1a2;eip=0x00798c; 	X(PUSH(si));	// 18977                  push    si ;~ 01A2:798C
cs=0x1a2;eip=0x00798d; 	J(CALL(sub_151e2,0));	// 18978                  call    sub_151E2 ;~ 01A2:798D
cs=0x1a2;eip=0x007990; 	X(POP(si));	// 18979                  pop     si ;~ 01A2:7990
cs=0x1a2;eip=0x007991; 	T(MOV(si, *(dw*)(raddr(ds,si+8))));	// 18980                  mov     si, [si+8] ;~ 01A2:7991
cs=0x1a2;eip=0x007994; 	J(CALL(sub_16bfc,0));	// 18981                  call    sub_16BFC ;~ 01A2:7994
loc_17997:
	// 5593 
cs=0x1a2;eip=0x007997; 	X(POP(bp));	// 18985                  pop     bp ;~ 01A2:7997
cs=0x1a2;eip=0x007998; 	X(POP(si));	// 18986                  pop     si ;~ 01A2:7998
cs=0x1a2;eip=0x007999; 	J(RETN(0));	// 18987                  retn ;~ 01A2:7999
ret_1a2_799a:
	// 5594 
cs=0x1a2;eip=0x00799a; 	J(CALL(sub_17d26,0));	// 18989                  call    sub_17D26 ;~ 01A2:799A
cs=0x1a2;eip=0x00799d; 	J(JZ(locret_179b0));	// 18990                  jz      short locret_179B0 ;~ 01A2:799D
cs=0x1a2;eip=0x00799f; 	T(TEST(*(raddr(ds,di+3)), 0x80));	// 18991                  test    byte ptr [di+3], 80h ;~ 01A2:799F
cs=0x1a2;eip=0x0079a3; 	X(PUSHF);	// 18992                  pushf ;~ 01A2:79A3
cs=0x1a2;eip=0x0079a4; 	X(OR(*(raddr(ds,di+3)), 0x80));	// 18993                  or      byte ptr [di+3], 80h ;~ 01A2:79A4
cs=0x1a2;eip=0x0079a8; 	X(POPF);	// 18994                  popf ;~ 01A2:79A8
cs=0x1a2;eip=0x0079a9; 	J(JNZ(locret_179b0));	// 18995                  jnz     short locret_179B0 ;~ 01A2:79A9
cs=0x1a2;eip=0x0079ab; 	X(PUSH(si));	// 18996                  push    si ;~ 01A2:79AB
cs=0x1a2;eip=0x0079ac; 	J(CALL(sub_15108,0));	// 18997                  call    sub_15108 ;~ 01A2:79AC
cs=0x1a2;eip=0x0079af; 	X(POP(si));	// 18998                  pop     si ;~ 01A2:79AF
locret_179b0:
	// 5595 
cs=0x1a2;eip=0x0079b0; 	J(RETN(0));	// 19002                  retn ;~ 01A2:79B0
ret_1a2_79b1:
	// 5596 
cs=0x1a2;eip=0x0079b1; 	T(di = word_1f20c;);	// 19004                  mov     di, word_1F20C ;~ 01A2:79B1
cs=0x1a2;eip=0x0079b5; 	T(MOV(dx, *(dw*)(raddr(ds,di+4))));	// 19005                  mov     dx, [di+4] ;~ 01A2:79B5
cs=0x1a2;eip=0x0079b8; 	J(JMP(loc_178de));	// 19006                  jmp     loc_178DE ;~ 01A2:79B8
ret_1a2_79bb:
	// 5597 
cs=0x1a2;eip=0x0079bb; 	J(CALL(sub_17d26,0));	// 19008                  call    sub_17D26 ;~ 01A2:79BB
cs=0x1a2;eip=0x0079be; 	J(JZ(locret_179f2));	// 19009                  jz      short locret_179F2 ;~ 01A2:79BE
cs=0x1a2;eip=0x0079c0; 	J({;});	// 19010                  jmp     short $+2 ;~ 01A2:79C0
loc_179c2:
	// 5598 
cs=0x1a2;eip=0x0079c2; 	X(word_1f220 = di;);	// 19014                  mov     word_1F220, di ;~ 01A2:79C2
cs=0x1a2;eip=0x0079c6; 	T(XOR(ah, ah));	// 19015                  xor     ah, ah ;~ 01A2:79C6
cs=0x1a2;eip=0x0079c8; 	T(MOV(al, *(raddr(ds,di+0x0E))));	// 19016                  mov     al, [di+0Eh] ;~ 01A2:79C8
cs=0x1a2;eip=0x0079cb; 	T(ADD(di, ax));	// 19017                  add     di, ax ;~ 01A2:79CB
cs=0x1a2;eip=0x0079cd; 	T(MOV(al, *(raddr(ds,di))));	// 19018                  mov     al, [di] ;~ 01A2:79CD
cs=0x1a2;eip=0x0079cf; 	T(CMP(al, 0x0FF));	// 19019                  cmp     al, 0FFh ;~ 01A2:79CF
cs=0x1a2;eip=0x0079d1; 	J(JZ(locret_179f1));	// 19020                  jz      short locret_179F1 ;~ 01A2:79D1
cs=0x1a2;eip=0x0079d3; 	T(CMP(al, 0x0FE));	// 19021                  cmp     al, 0FEh ;~ 01A2:79D3
cs=0x1a2;eip=0x0079d5; 	J(JNZ(locret_179f1));	// 19022                  jnz     short locret_179F1 ;~ 01A2:79D5
cs=0x1a2;eip=0x0079d7; 	X(MOV(*(raddr(ds,di)), 0));	// 19023                  mov     byte ptr [di], 0 ;~ 01A2:79D7
cs=0x1a2;eip=0x0079da; 	X(INC(*(raddr(ds,di+3))));	// 19024                  inc     byte ptr [di+3] ;~ 01A2:79DA
cs=0x1a2;eip=0x0079dd; 	T(XOR(ah, ah));	// 19025                  xor     ah, ah ;~ 01A2:79DD
cs=0x1a2;eip=0x0079df; 	T(MOV(al, *(raddr(ds,di+3))));	// 19026                  mov     al, [di+3] ;~ 01A2:79DF
cs=0x1a2;eip=0x0079e2; 	T(SHL(ax, 1));	// 19027                  shl     ax, 1 ;~ 01A2:79E2
cs=0x1a2;eip=0x0079e4; 	T(di = word_1f220;);	// 19028                  mov     di, word_1F220 ;~ 01A2:79E4
cs=0x1a2;eip=0x0079e8; 	T(MOV(ax, *(dw*)(raddr(ds,di+8))));	// 19029                  mov     ax, [di+8] ;~ 01A2:79E8
cs=0x1a2;eip=0x0079eb; 	X(word_1f244 = ax;);	// 19030                  mov     word_1F244, ax ;~ 01A2:79EB
cs=0x1a2;eip=0x0079ee; 	J(CALL(sub_13db8,0));	// 19031                  call    sub_13DB8 ;~ 01A2:79EE
locret_179f1:
	// 5599 
cs=0x1a2;eip=0x0079f1; 	J(RETN(0));	// 19035                  retn ;~ 01A2:79F1
locret_179f2:
	// 5600 
cs=0x1a2;eip=0x0079f2; 	J(RETN(0));	// 19039                  retn ;~ 01A2:79F2
locret_179f3:
	// 5601 
cs=0x1a2;eip=0x0079f3; 	J(RETN(0));	// 19043                  retn ;~ 01A2:79F3
ret_1a2_79f4:
	// 5602 
cs=0x1a2;eip=0x0079f4; 	J(CALL(sub_17d26,0));	// 19045                  call    sub_17D26 ;~ 01A2:79F4
cs=0x1a2;eip=0x0079f7; 	J(JZ(locret_179f3));	// 19046                  jz      short locret_179F3 ;~ 01A2:79F7
cs=0x1a2;eip=0x0079f9; 	X(word_1f220 = di;);	// 19047                  mov     word_1F220, di ;~ 01A2:79F9
cs=0x1a2;eip=0x0079fd; 	T(XOR(ah, ah));	// 19048                  xor     ah, ah ;~ 01A2:79FD
cs=0x1a2;eip=0x0079ff; 	T(MOV(al, *(raddr(ds,di+0x0E))));	// 19049                  mov     al, [di+0Eh] ;~ 01A2:79FF
cs=0x1a2;eip=0x007a02; 	T(ADD(di, ax));	// 19050                  add     di, ax ;~ 01A2:7A02
cs=0x1a2;eip=0x007a04; 	X(MOV(*(raddr(ds,di)), 0x0FF));	// 19051                  mov     byte ptr [di], 0FFh ;~ 01A2:7A04
cs=0x1a2;eip=0x007a07; 	T(di = word_1f220;);	// 19052                  mov     di, word_1F220 ;~ 01A2:7A07
cs=0x1a2;eip=0x007a0b; 	T(MOV(ax, *(dw*)(raddr(ds,di+8))));	// 19053                  mov     ax, [di+8] ;~ 01A2:7A0B
cs=0x1a2;eip=0x007a0e; 	X(word_1f244 = ax;);	// 19054                  mov     word_1F244, ax ;~ 01A2:7A0E
cs=0x1a2;eip=0x007a11; 	J(CALL(sub_13d8e,0));	// 19055                  call    sub_13D8E ;~ 01A2:7A11
cs=0x1a2;eip=0x007a14; 	J(RETN(0));	// 19056                  retn ;~ 01A2:7A14
ret_1a2_7a15:
	// 5603 
cs=0x1a2;eip=0x007a15; 	T(LODSW);	// 19058                  lodsw ;~ 01A2:7A15
cs=0x1a2;eip=0x007a16; 	T(XCHG(al, ah));	// 19059                  xchg    al, ah ;~ 01A2:7A16
cs=0x1a2;eip=0x007a18; 	J(JMP(loc_17a1d));	// 19060                  jmp     short loc_17A1D ;~ 01A2:7A18
ret_1a2_7a1a:
	// 5604 
cs=0x1a2;eip=0x007a1a; 	T(XOR(ah, ah));	// 19062                  xor     ah, ah ;~ 01A2:7A1A
cs=0x1a2;eip=0x007a1c; 	T(LODSB);	// 19063                  lodsb ;~ 01A2:7A1C
loc_17a1d:
	// 5605 
cs=0x1a2;eip=0x007a1d; 	X(PUSH(ax));	// 19066                  push    ax ;~ 01A2:7A1D
cs=0x1a2;eip=0x007a1e; 	T(OR(ax, ax));	// 19067                  or      ax, ax ;~ 01A2:7A1E
cs=0x1a2;eip=0x007a20; 	J(JNS(loc_17a43));	// 19068                  jns     short loc_17A43 ;~ 01A2:7A20
cs=0x1a2;eip=0x007a22; 	X(PUSH(ax));	// 19069                  push    ax ;~ 01A2:7A22
cs=0x1a2;eip=0x007a23; 	T(ax = 0x24;);	// 19070                  mov     ax, 24h ; '$' ;~ 01A2:7A23
cs=0x1a2;eip=0x007a26; 	J(CALL(sub_1156c,0));	// 19071                  call    sub_1156C ;~ 01A2:7A26
cs=0x1a2;eip=0x007a29; 	X(POP(ax));	// 19072                  pop     ax ;~ 01A2:7A29
cs=0x1a2;eip=0x007a2a; 	X(POP(ax));	// 19073                  pop     ax ;~ 01A2:7A2A
cs=0x1a2;eip=0x007a2b; 	X(SUB(word_1f3bc, ax));	// 19074                  sub     ds:word_1F3BC, ax ;~ 01A2:7A2B
cs=0x1a2;eip=0x007a2f; 	X(SBB(word_1f3be, 0));	// 19075                  sbb     ds:word_1F3BE, 0 ;~ 01A2:7A2F
cs=0x1a2;eip=0x007a34; 	J(JNC(locret_17a42));	// 19076                  jnb     short locret_17A42 ;~ 01A2:7A34
cs=0x1a2;eip=0x007a36; 	X(word_1f3bc = 0;);	// 19077                  mov     ds:word_1F3BC, 0 ;~ 01A2:7A36
cs=0x1a2;eip=0x007a3c; 	X(word_1f3be = 0;);	// 19078                  mov     ds:word_1F3BE, 0 ;~ 01A2:7A3C
locret_17a42:
	// 5606 
cs=0x1a2;eip=0x007a42; 	J(RETN(0));	// 19081                  retn ;~ 01A2:7A42
loc_17a43:
	// 5607 
cs=0x1a2;eip=0x007a43; 	X(PUSH(ax));	// 19085                  push    ax ;~ 01A2:7A43
cs=0x1a2;eip=0x007a44; 	T(ax = 0x1A;);	// 19086                  mov     ax, 1Ah ;~ 01A2:7A44
cs=0x1a2;eip=0x007a47; 	J(CALL(sub_1156c,0));	// 19087                  call    sub_1156C ;~ 01A2:7A47
cs=0x1a2;eip=0x007a4a; 	X(POP(ax));	// 19088                  pop     ax ;~ 01A2:7A4A
cs=0x1a2;eip=0x007a4b; 	X(POP(ax));	// 19089                  pop     ax ;~ 01A2:7A4B
loc_17a4c:
	// 5608 
cs=0x1a2;eip=0x007a4c; 	X(ADD(word_1f3bc, ax));	// 19092                  add     ds:word_1F3BC, ax ;~ 01A2:7A4C
cs=0x1a2;eip=0x007a50; 	X(ADC(word_1f3be, 0));	// 19093                  adc     ds:word_1F3BE, 0 ;~ 01A2:7A50
cs=0x1a2;eip=0x007a55; 	J(RETN(0));	// 19094                  retn ;~ 01A2:7A55
ret_1a2_7a56:
	// 5609 
cs=0x1a2;eip=0x007a56; 	T(LODSW);	// 19096                  lodsw ;~ 01A2:7A56
cs=0x1a2;eip=0x007a57; 	T(XCHG(al, ah));	// 19097                  xchg    al, ah ;~ 01A2:7A57
cs=0x1a2;eip=0x007a59; 	J(JMP(loc_17a5e));	// 19098                  jmp     short loc_17A5E ;~ 01A2:7A59
ret_1a2_7a5b:
	// 5610 
cs=0x1a2;eip=0x007a5b; 	T(XOR(ah, ah));	// 19100                  xor     ah, ah ;~ 01A2:7A5B
cs=0x1a2;eip=0x007a5d; 	T(LODSB);	// 19101                  lodsb ;~ 01A2:7A5D
loc_17a5e:
	// 5611 
cs=0x1a2;eip=0x007a5e; 	X(ADD(word_1f3b8, ax));	// 19104                  add     ds:word_1F3B8, ax ;~ 01A2:7A5E
cs=0x1a2;eip=0x007a62; 	X(ADC(word_1f3ba, 0));	// 19105                  adc     ds:word_1F3BA, 0 ;~ 01A2:7A62
cs=0x1a2;eip=0x007a67; 	X(PUSH(ax));	// 19106                  push    ax ;~ 01A2:7A67
cs=0x1a2;eip=0x007a68; 	X(PUSH(ax));	// 19107                  push    ax ;~ 01A2:7A68
cs=0x1a2;eip=0x007a69; 	T(ax = 3;);	// 19108                  mov     ax, 3 ;~ 01A2:7A69
cs=0x1a2;eip=0x007a6c; 	J(CALL(sub_1156c,0));	// 19109                  call    sub_1156C ;~ 01A2:7A6C
cs=0x1a2;eip=0x007a6f; 	X(POP(ax));	// 19110                  pop     ax ;~ 01A2:7A6F
cs=0x1a2;eip=0x007a70; 	X(POP(ax));	// 19111                  pop     ax ;~ 01A2:7A70
cs=0x1a2;eip=0x007a71; 	T(SHR(ax, 1));	// 19112                  shr     ax, 1 ;~ 01A2:7A71
cs=0x1a2;eip=0x007a73; 	T(SHR(ax, 1));	// 19113                  shr     ax, 1 ;~ 01A2:7A73
cs=0x1a2;eip=0x007a75; 	J(JMP(loc_17a4c));	// 19114                  jmp     short loc_17A4C ;~ 01A2:7A75
ret_1a2_7a77:
	// 5612 
cs=0x1a2;eip=0x007a77; 	X(PUSH(ax));	// 19116                  push    ax ;~ 01A2:7A77
cs=0x1a2;eip=0x007a78; 	T(LODSW);	// 19117                  lodsw ;~ 01A2:7A78
cs=0x1a2;eip=0x007a79; 	T(XCHG(al, ah));	// 19118                  xchg    al, ah ;~ 01A2:7A79
cs=0x1a2;eip=0x007a7b; 	T(dx = ax;);	// 19119                  mov     dx, ax ;~ 01A2:7A7B
cs=0x1a2;eip=0x007a7d; 	X(POP(ax));	// 19120                  pop     ax ;~ 01A2:7A7D
cs=0x1a2;eip=0x007a7e; 	J(CALL(sub_15f18,0));	// 19121                  call    sub_15F18 ;~ 01A2:7A7E
cs=0x1a2;eip=0x007a81; 	J(RETN(0));	// 19122                  retn ;~ 01A2:7A81
ret_1a2_7a82:
	// 5613 
cs=0x1a2;eip=0x007a82; 	X(PUSH(ax));	// 19124                  push    ax ;~ 01A2:7A82
cs=0x1a2;eip=0x007a83; 	T(LODSW);	// 19125                  lodsw ;~ 01A2:7A83
cs=0x1a2;eip=0x007a84; 	T(XCHG(al, ah));	// 19126                  xchg    al, ah ;~ 01A2:7A84
cs=0x1a2;eip=0x007a86; 	T(dx = ax;);	// 19127                  mov     dx, ax ;~ 01A2:7A86
cs=0x1a2;eip=0x007a88; 	X(POP(ax));	// 19128                  pop     ax ;~ 01A2:7A88
cs=0x1a2;eip=0x007a89; 	T(OR(dx, dx));	// 19129                  or      dx, dx ;~ 01A2:7A89
cs=0x1a2;eip=0x007a8b; 	J(JNS(loc_17a94));	// 19130                  jns     short loc_17A94 ;~ 01A2:7A8B
cs=0x1a2;eip=0x007a8d; 	T(di = word_1f20c;);	// 19131                  mov     di, word_1F20C ;~ 01A2:7A8D
cs=0x1a2;eip=0x007a91; 	T(MOV(dx, *(dw*)(raddr(ds,di+4))));	// 19132                  mov     dx, [di+4] ;~ 01A2:7A91
loc_17a94:
	// 5614 
cs=0x1a2;eip=0x007a94; 	T(XOR(bh, bh));	// 19135                  xor     bh, bh ;~ 01A2:7A94
cs=0x1a2;eip=0x007a96; 	T(MOV(bl, *(raddr(ds,di+0x0C))));	// 19136                  mov     bl, [di+0Ch] ;~ 01A2:7A96
cs=0x1a2;eip=0x007a99; 	T(TEST(*(raddr(ds,bx+di+5)), 0x80));	// 19137                  test    byte ptr [bx+di+5], 80h ;~ 01A2:7A99
cs=0x1a2;eip=0x007a9d; 	J(JNZ(locret_17aa2));	// 19138                  jnz     short locret_17AA2 ;~ 01A2:7A9D
cs=0x1a2;eip=0x007a9f; 	J(CALL(sub_15f2f,0));	// 19139                  call    sub_15F2F ;~ 01A2:7A9F
locret_17aa2:
	// 5615 
cs=0x1a2;eip=0x007aa2; 	J(RETN(0));	// 19142                  retn ;~ 01A2:7AA2
ret_1a2_7aa3:
	// 5616 
cs=0x1a2;eip=0x007aa3; 	J(CALL(sub_17d26,0));	// 19144                  call    sub_17D26 ;~ 01A2:7AA3
cs=0x1a2;eip=0x007aa6; 	J(JZ(locret_17ac6));	// 19145                  jz      short locret_17AC6 ;~ 01A2:7AA6
cs=0x1a2;eip=0x007aa8; 	X(PUSH(si));	// 19146                  push    si ;~ 01A2:7AA8
cs=0x1a2;eip=0x007aa9; 	T(si = word_1f1f4;);	// 19147                  mov     si, word_1F1F4 ;~ 01A2:7AA9
cs=0x1a2;eip=0x007aad; 	X(MOV(*(dw*)(raddr(ds,si)), 0x17));	// 19148                  mov     word ptr [si], 17h ;~ 01A2:7AAD
cs=0x1a2;eip=0x007ab1; 	T(ADD(si, 2));	// 19149                  add     si, 2 ;~ 01A2:7AB1
cs=0x1a2;eip=0x007ab4; 	X(MOV(*(dw*)(raddr(ds,si)), di));	// 19150                  mov     [si], di ;~ 01A2:7AB4
cs=0x1a2;eip=0x007ab6; 	T(ADD(si, 2));	// 19151                  add     si, 2 ;~ 01A2:7AB6
cs=0x1a2;eip=0x007ab9; 	T(ADD(si, 2));	// 19152                  add     si, 2 ;~ 01A2:7AB9
cs=0x1a2;eip=0x007abc; 	X(word_1f1f4 = si;);	// 19153                  mov     word_1F1F4, si ;~ 01A2:7ABC
cs=0x1a2;eip=0x007ac0; 	X(INC(word_1f396));	// 19154                  inc     ds:word_1F396 ;~ 01A2:7AC0
cs=0x1a2;eip=0x007ac4; 	X(POP(si));	// 19155                  pop     si ;~ 01A2:7AC4
cs=0x1a2;eip=0x007ac5; 	J(RETN(0));	// 19156                  retn ;~ 01A2:7AC5
locret_17ac6:
	// 5617 
cs=0x1a2;eip=0x007ac6; 	J(RETN(0));	// 19160                  retn ;~ 01A2:7AC6
ret_1a2_7ac7:
	// 5618 
cs=0x1a2;eip=0x007ac7; 	J(CALL(sub_17d26,0));	// 19162                  call    sub_17D26 ;~ 01A2:7AC7
cs=0x1a2;eip=0x007aca; 	J(JZ(locret_17adc));	// 19163                  jz      short locret_17ADC ;~ 01A2:7ACA
cs=0x1a2;eip=0x007acc; 	T(XOR(bh, bh));	// 19164                  xor     bh, bh ;~ 01A2:7ACC
cs=0x1a2;eip=0x007ace; 	T(MOV(bl, *(raddr(ds,di+0x0C))));	// 19165                  mov     bl, [di+0Ch] ;~ 01A2:7ACE
cs=0x1a2;eip=0x007ad1; 	T(TEST(*(raddr(ds,bx+di+6)), 1));	// 19166                  test    byte ptr [bx+di+6], 1 ;~ 01A2:7AD1
cs=0x1a2;eip=0x007ad5; 	X(PUSHF);	// 19167                  pushf ;~ 01A2:7AD5
cs=0x1a2;eip=0x007ad6; 	X(AND(*(raddr(ds,bx+di+6)), 0x0FE));	// 19168                  and     byte ptr [bx+di+6], 0FEh ;~ 01A2:7AD6
cs=0x1a2;eip=0x007ada; 	X(POPF);	// 19169                  popf ;~ 01A2:7ADA
cs=0x1a2;eip=0x007adb; 	J(RETN(0));	// 19170                  retn ;~ 01A2:7ADB
locret_17adc:
	// 5619 
cs=0x1a2;eip=0x007adc; 	J(RETN(0));	// 19174                  retn ;~ 01A2:7ADC
locret_17add:
	// 5620 
cs=0x1a2;eip=0x007add; 	J(RETN(0));	// 19178                  retn ;~ 01A2:7ADD
locret_17ade:
	// 5621 
cs=0x1a2;eip=0x007ade; 	J(RETN(0));	// 19182                  retn ;~ 01A2:7ADE
ret_1a2_7adf:
	// 5622 
cs=0x1a2;eip=0x007adf; 	J(CALL(sub_17d26,0));	// 19184                  call    sub_17D26 ;~ 01A2:7ADF
cs=0x1a2;eip=0x007ae2; 	J(JZ(locret_17add));	// 19185                  jz      short locret_17ADD ;~ 01A2:7AE2
cs=0x1a2;eip=0x007ae4; 	T(XOR(bh, bh));	// 19186                  xor     bh, bh ;~ 01A2:7AE4
cs=0x1a2;eip=0x007ae6; 	T(MOV(bl, *(raddr(ds,di+0x0C))));	// 19187                  mov     bl, [di+0Ch] ;~ 01A2:7AE6
cs=0x1a2;eip=0x007ae9; 	T(TEST(*(raddr(ds,bx+di+5)), 0x80));	// 19188                  test    byte ptr [bx+di+5], 80h ;~ 01A2:7AE9
cs=0x1a2;eip=0x007aed; 	X(PUSHF);	// 19189                  pushf ;~ 01A2:7AED
cs=0x1a2;eip=0x007aee; 	X(AND(*(raddr(ds,bx+di+5)), 0x7F));	// 19190                  and     byte ptr [bx+di+5], 7Fh ;~ 01A2:7AEE
cs=0x1a2;eip=0x007af2; 	X(POPF);	// 19191                  popf ;~ 01A2:7AF2
cs=0x1a2;eip=0x007af3; 	J(CALL(sub_15f18,0));	// 19192                  call    sub_15F18 ;~ 01A2:7AF3
cs=0x1a2;eip=0x007af6; 	J(RETN(0));	// 19193                  retn ;~ 01A2:7AF6
ret_1a2_7af7:
	// 5623 
cs=0x1a2;eip=0x007af7; 	J(CALL(sub_17d26,0));	// 19195                  call    sub_17D26 ;~ 01A2:7AF7
cs=0x1a2;eip=0x007afa; 	J(JZ(locret_17ade));	// 19196                  jz      short locret_17ADE ;~ 01A2:7AFA
cs=0x1a2;eip=0x007afc; 	T(XOR(bh, bh));	// 19197                  xor     bh, bh ;~ 01A2:7AFC
cs=0x1a2;eip=0x007afe; 	T(MOV(bl, *(raddr(ds,di+0x0C))));	// 19198                  mov     bl, [di+0Ch] ;~ 01A2:7AFE
cs=0x1a2;eip=0x007b01; 	T(TEST(*(raddr(ds,bx+di+5)), 0x80));	// 19199                  test    byte ptr [bx+di+5], 80h ;~ 01A2:7B01
cs=0x1a2;eip=0x007b05; 	X(PUSHF);	// 19200                  pushf ;~ 01A2:7B05
cs=0x1a2;eip=0x007b06; 	X(OR(*(raddr(ds,bx+di+5)), 0x80));	// 19201                  or      byte ptr [bx+di+5], 80h ;~ 01A2:7B06
cs=0x1a2;eip=0x007b0a; 	X(POPF);	// 19202                  popf ;~ 01A2:7B0A
cs=0x1a2;eip=0x007b0b; 	J(CALL(sub_15f2f,0));	// 19203                  call    sub_15F2F ;~ 01A2:7B0B
cs=0x1a2;eip=0x007b0e; 	J(RETN(0));	// 19204                  retn ;~ 01A2:7B0E
ret_1a2_7b0f:
	// 5624 
cs=0x1a2;eip=0x007b0f; 	J(CALL(sub_115eb,0));	// 19206                  call    sub_115EB ;~ 01A2:7B0F
cs=0x1a2;eip=0x007b12; 	J(CALL(sub_18706,0));	// 19207                  call    sub_18706 ;~ 01A2:7B12
cs=0x1a2;eip=0x007b15; 	T(LODSB);	// 19208                  lodsb ;~ 01A2:7B15
cs=0x1a2;eip=0x007b16; 	T(CMP(al, 9));	// 19209                  cmp     al, 9 ;~ 01A2:7B16
cs=0x1a2;eip=0x007b18; 	J(JG(locret_17b32));	// 19210                  jg      short locret_17B32 ;~ 01A2:7B18
cs=0x1a2;eip=0x007b1a; 	T(INC(al));	// 19211                  inc     al ;~ 01A2:7B1A
cs=0x1a2;eip=0x007b1c; 	X(byte_1f878 = al;);	// 19212                  mov     ds:byte_1F878, al ;~ 01A2:7B1C
cs=0x1a2;eip=0x007b1f; 	X(byte_1f872 = 0x0FF;);	// 19213                  mov     ds:byte_1F872, 0FFh ;~ 01A2:7B1F
cs=0x1a2;eip=0x007b24; 	X(byte_1f879 = 1;);	// 19214                  mov     ds:byte_1F879, 1 ;~ 01A2:7B24
cs=0x1a2;eip=0x007b29; 	J(CALL(sub_162cb,0));	// 19215                  call    sub_162CB ;~ 01A2:7B29
cs=0x1a2;eip=0x007b2c; 	J(CALL(nullsub_6,0));	// 19216                  call    nullsub_6 ;~ 01A2:7B2C
cs=0x1a2;eip=0x007b2f; 	J(return start(m2c::kloc_10097, _state););	// 19217                  jmp     loc_10097 ;~ 01A2:7B2F
locret_17b32:
	// 5625 
cs=0x1a2;eip=0x007b32; 	J(RETN(0));	// 19221                  retn ;~ 01A2:7B32
ret_1a2_7b33:
	// 5626 
cs=0x1a2;eip=0x007b33; 	T(LODSW);	// 19223                  lodsw ;~ 01A2:7B33
cs=0x1a2;eip=0x007b34; 	T(XCHG(al, ah));	// 19224                  xchg    al, ah ;~ 01A2:7B34
cs=0x1a2;eip=0x007b36; 	J(RETN(0));	// 19225                  retn ;~ 01A2:7B36
ret_1a2_7b37:
	// 5627 
cs=0x1a2;eip=0x007b37; 	J(CALL(sub_17d26,0));	// 19227                  call    sub_17D26 ;~ 01A2:7B37
cs=0x1a2;eip=0x007b3a; 	J(JZ(locret_17b68));	// 19228                  jz      short locret_17B68 ;~ 01A2:7B3A
cs=0x1a2;eip=0x007b3c; 	T(XOR(ah, ah));	// 19229                  xor     ah, ah ;~ 01A2:7B3C
cs=0x1a2;eip=0x007b3e; 	T(MOV(al, *(raddr(ds,di+0x0C))));	// 19230                  mov     al, [di+0Ch] ;~ 01A2:7B3E
cs=0x1a2;eip=0x007b41; 	T(ADD(di, ax));	// 19231                  add     di, ax ;~ 01A2:7B41
cs=0x1a2;eip=0x007b43; 	T(TEST(*(raddr(ds,di+3)), 2));	// 19232                  test    byte ptr [di+3], 2 ;~ 01A2:7B43
cs=0x1a2;eip=0x007b47; 	J(JNZ(loc_17b5e));	// 19233                  jnz     short loc_17B5E ;~ 01A2:7B47
cs=0x1a2;eip=0x007b49; 	T(TEST(*(raddr(ds,di+3)), 1));	// 19234                  test    byte ptr [di+3], 1 ;~ 01A2:7B49
cs=0x1a2;eip=0x007b4d; 	X(PUSHF);	// 19235                  pushf ;~ 01A2:7B4D
cs=0x1a2;eip=0x007b4e; 	X(AND(*(raddr(ds,di+3)), 0x0FE));	// 19236                  and     byte ptr [di+3], 0FEh ;~ 01A2:7B4E
cs=0x1a2;eip=0x007b52; 	X(POPF);	// 19237                  popf ;~ 01A2:7B52
cs=0x1a2;eip=0x007b53; 	T(TEST(*(raddr(ds,di+3)), 0x80));	// 19238                  test    byte ptr [di+3], 80h ;~ 01A2:7B53
cs=0x1a2;eip=0x007b57; 	X(PUSHF);	// 19239                  pushf ;~ 01A2:7B57
cs=0x1a2;eip=0x007b58; 	X(AND(*(raddr(ds,di+3)), 0x7F));	// 19240                  and     byte ptr [di+3], 7Fh ;~ 01A2:7B58
cs=0x1a2;eip=0x007b5c; 	X(POPF);	// 19241                  popf ;~ 01A2:7B5C
cs=0x1a2;eip=0x007b5d; 	J(RETN(0));	// 19242                  retn ;~ 01A2:7B5D
loc_17b5e:
	// 5628 
cs=0x1a2;eip=0x007b5e; 	X(word_1f70a = 0x28;);	// 19246                  mov     ds:word_1F70A, 28h ; '(' ;~ 01A2:7B5E
cs=0x1a2;eip=0x007b64; 	J(CALL(sub_15c9c,0));	// 19247                  call    sub_15C9C ;~ 01A2:7B64
cs=0x1a2;eip=0x007b67; 	J(RETN(0));	// 19248                  retn ;~ 01A2:7B67
locret_17b68:
	// 5629 
cs=0x1a2;eip=0x007b68; 	J(RETN(0));	// 19252                  retn ;~ 01A2:7B68
ret_1a2_7b69:
	// 5630 
cs=0x1a2;eip=0x007b69; 	J(CALL(sub_17d26,0));	// 19254                  call    sub_17D26 ;~ 01A2:7B69
cs=0x1a2;eip=0x007b6c; 	J(JZ(locret_17b89));	// 19255                  jz      short locret_17B89 ;~ 01A2:7B6C
cs=0x1a2;eip=0x007b6e; 	T(TEST(*(raddr(ds,di+0x0F)), 4));	// 19256                  test    byte ptr [di+0Fh], 4 ;~ 01A2:7B6E
cs=0x1a2;eip=0x007b72; 	X(PUSHF);	// 19257                  pushf ;~ 01A2:7B72
cs=0x1a2;eip=0x007b73; 	X(OR(*(raddr(ds,di+0x0F)), 4));	// 19258                  or      byte ptr [di+0Fh], 4 ;~ 01A2:7B73
cs=0x1a2;eip=0x007b77; 	X(POPF);	// 19259                  popf ;~ 01A2:7B77
cs=0x1a2;eip=0x007b78; 	J(RETN(0));	// 19260                  retn ;~ 01A2:7B78
ret_1a2_7b79:
	// 5631 
cs=0x1a2;eip=0x007b79; 	J(CALL(sub_17d26,0));	// 19262                  call    sub_17D26 ;~ 01A2:7B79
cs=0x1a2;eip=0x007b7c; 	J(JZ(locret_17b8a));	// 19263                  jz      short locret_17B8A ;~ 01A2:7B7C
cs=0x1a2;eip=0x007b7e; 	T(TEST(*(raddr(ds,di+0x0F)), 4));	// 19264                  test    byte ptr [di+0Fh], 4 ;~ 01A2:7B7E
cs=0x1a2;eip=0x007b82; 	X(PUSHF);	// 19265                  pushf ;~ 01A2:7B82
cs=0x1a2;eip=0x007b83; 	X(AND(*(raddr(ds,di+0x0F)), 0x0FB));	// 19266                  and     byte ptr [di+0Fh], 0FBh ;~ 01A2:7B83
cs=0x1a2;eip=0x007b87; 	X(POPF);	// 19267                  popf ;~ 01A2:7B87
cs=0x1a2;eip=0x007b88; 	J(RETN(0));	// 19268                  retn ;~ 01A2:7B88
locret_17b89:
	// 5632 
cs=0x1a2;eip=0x007b89; 	J(RETN(0));	// 19272                  retn ;~ 01A2:7B89
locret_17b8a:
	// 5633 
cs=0x1a2;eip=0x007b8a; 	J(RETN(0));	// 19276                  retn ;~ 01A2:7B8A
ret_1a2_7b8b:
	// 5634 
cs=0x1a2;eip=0x007b8b; 	T(XOR(dh, dh));	// 19278                  xor     dh, dh ;~ 01A2:7B8B
cs=0x1a2;eip=0x007b8d; 	T(MOV(dl, *(raddr(ds,si))));	// 19279                  mov     dl, [si] ;~ 01A2:7B8D
cs=0x1a2;eip=0x007b8f; 	T(INC(si));	// 19280                  inc     si ;~ 01A2:7B8F
cs=0x1a2;eip=0x007b90; 	T(ax = 4;);	// 19281                  mov     ax, 4 ;~ 01A2:7B90
cs=0x1a2;eip=0x007b93; 	J(CALL(sub_1410e,0));	// 19282                  call    sub_1410E ;~ 01A2:7B93
cs=0x1a2;eip=0x007b96; 	T(CMP(*(dw*)(raddr(ds,di+2)), 0));	// 19283                  cmp     word ptr [di+2], 0 ;~ 01A2:7B96
cs=0x1a2;eip=0x007b9a; 	J(JZ(locret_17bbc));	// 19284                  jz      short locret_17BBC ;~ 01A2:7B9A
cs=0x1a2;eip=0x007b9c; 	X(MOV(*(dw*)(raddr(ds,di+2)), 0));	// 19285                  mov     word ptr [di+2], 0 ;~ 01A2:7B9C
loc_17ba1:
	// 5635 
cs=0x1a2;eip=0x007ba1; 	T(di = word_1f1ce;);	// 19288                  mov     di, word_1F1CE ;~ 01A2:7BA1
cs=0x1a2;eip=0x007ba5; 	T(ADD(di, 6));	// 19289                  add     di, 6 ;~ 01A2:7BA5
cs=0x1a2;eip=0x007ba8; 	T(cx = 7;);	// 19290                  mov     cx, 7 ;~ 01A2:7BA8
loc_17bab:
	// 5636 
cs=0x1a2;eip=0x007bab; 	T(CMP(*(dw*)(raddr(ds,di)), dx));	// 19293                  cmp     [di], dx ;~ 01A2:7BAB
cs=0x1a2;eip=0x007bad; 	J(JZ(loc_17bbd));	// 19294                  jz      short loc_17BBD ;~ 01A2:7BAD
cs=0x1a2;eip=0x007baf; 	T(ADD(di, 2));	// 19295                  add     di, 2 ;~ 01A2:7BAF
cs=0x1a2;eip=0x007bb2; 	J(LOOP(loc_17bab));	// 19296                  loop    loc_17BAB ;~ 01A2:7BB2
cs=0x1a2;eip=0x007bb4; 	X(PUSH(ax));	// 19297                  push    ax ;~ 01A2:7BB4
cs=0x1a2;eip=0x007bb5; 	T(ax = 0x2A;);	// 19298                  mov     ax, 2Ah ; '*' ;~ 01A2:7BB5
cs=0x1a2;eip=0x007bb8; 	J(CALL(sub_1156c,0));	// 19299                  call    sub_1156C ;~ 01A2:7BB8
cs=0x1a2;eip=0x007bbb; 	X(POP(ax));	// 19300                  pop     ax ;~ 01A2:7BBB
locret_17bbc:
	// 5637 
cs=0x1a2;eip=0x007bbc; 	J(RETN(0));	// 19304                  retn ;~ 01A2:7BBC
loc_17bbd:
	// 5638 
cs=0x1a2;eip=0x007bbd; 	X(PUSH(ax));	// 19308                  push    ax ;~ 01A2:7BBD
cs=0x1a2;eip=0x007bbe; 	T(ax = 0x12;);	// 19309                  mov     ax, 12h ;~ 01A2:7BBE
cs=0x1a2;eip=0x007bc1; 	J(CALL(sub_1156c,0));	// 19310                  call    sub_1156C ;~ 01A2:7BC1
cs=0x1a2;eip=0x007bc4; 	X(POP(ax));	// 19311                  pop     ax ;~ 01A2:7BC4
cs=0x1a2;eip=0x007bc5; 	J(RETN(0));	// 19312                  retn ;~ 01A2:7BC5
ret_1a2_7bc6:
	// 5639 
cs=0x1a2;eip=0x007bc6; 	T(XOR(dh, dh));	// 19314                  xor     dh, dh ;~ 01A2:7BC6
cs=0x1a2;eip=0x007bc8; 	T(MOV(dl, *(raddr(ds,si))));	// 19315                  mov     dl, [si] ;~ 01A2:7BC8
cs=0x1a2;eip=0x007bca; 	T(INC(si));	// 19316                  inc     si ;~ 01A2:7BCA
cs=0x1a2;eip=0x007bcb; 	T(ax = 4;);	// 19317                  mov     ax, 4 ;~ 01A2:7BCB
cs=0x1a2;eip=0x007bce; 	J(CALL(sub_1410e,0));	// 19318                  call    sub_1410E ;~ 01A2:7BCE
cs=0x1a2;eip=0x007bd1; 	T(LODSW);	// 19319                  lodsw ;~ 01A2:7BD1
cs=0x1a2;eip=0x007bd2; 	T(XCHG(al, ah));	// 19320                  xchg    al, ah ;~ 01A2:7BD2
cs=0x1a2;eip=0x007bd4; 	T(XCHG(al, ah));	// 19321                  xchg    al, ah ;~ 01A2:7BD4
cs=0x1a2;eip=0x007bd6; 	T(CMP(ax, *(dw*)(raddr(ds,di+2))));	// 19322                  cmp     ax, [di+2] ;~ 01A2:7BD6
cs=0x1a2;eip=0x007bd9; 	J(JZ(locret_17bbc));	// 19323                  jz      short locret_17BBC ;~ 01A2:7BD9
cs=0x1a2;eip=0x007bdb; 	X(MOV(*(dw*)(raddr(ds,di+2)), ax));	// 19324                  mov     [di+2], ax ;~ 01A2:7BDB
cs=0x1a2;eip=0x007bde; 	T(XCHG(al, ah));	// 19325                  xchg    al, ah ;~ 01A2:7BDE
cs=0x1a2;eip=0x007be0; 	J(JMP(loc_17ba1));	// 19326                  jmp     short loc_17BA1 ;~ 01A2:7BE0
locret_17be2:
	// 5640 
cs=0x1a2;eip=0x007be2; 	J(RETN(0));	// 19330                  retn ;~ 01A2:7BE2
ret_1a2_7be3:
	// 5641 
cs=0x1a2;eip=0x007be3; 	J(CALL(sub_17d26,0));	// 19332                  call    sub_17D26 ;~ 01A2:7BE3
cs=0x1a2;eip=0x007be6; 	J(JZ(locret_17be2));	// 19333                  jz      short locret_17BE2 ;~ 01A2:7BE6
cs=0x1a2;eip=0x007be8; 	T(XOR(ah, ah));	// 19334                  xor     ah, ah ;~ 01A2:7BE8
cs=0x1a2;eip=0x007bea; 	T(MOV(al, *(raddr(ds,di+0x0D))));	// 19335                  mov     al, [di+0Dh] ;~ 01A2:7BEA
cs=0x1a2;eip=0x007bed; 	T(ADD(di, ax));	// 19336                  add     di, ax ;~ 01A2:7BED
cs=0x1a2;eip=0x007bef; 	T(MOV(al, *(raddr(ds,di))));	// 19337                  mov     al, [di] ;~ 01A2:7BEF
cs=0x1a2;eip=0x007bf1; 	T(CMP(al, 4));	// 19338                  cmp     al, 4 ;~ 01A2:7BF1
cs=0x1a2;eip=0x007bf3; 	J(JNZ(loc_17bf8));	// 19339                  jnz     short loc_17BF8 ;~ 01A2:7BF3
cs=0x1a2;eip=0x007bf5; 	X(INC(*(raddr(ds,di+1))));	// 19340                  inc     byte ptr [di+1] ;~ 01A2:7BF5
loc_17bf8:
	// 5642 
cs=0x1a2;eip=0x007bf8; 	X(MOV(*(raddr(ds,di)), 0));	// 19343                  mov     byte ptr [di], 0 ;~ 01A2:7BF8
cs=0x1a2;eip=0x007bfb; 	J(RETN(0));	// 19344                  retn ;~ 01A2:7BFB
locret_17bfc:
	// 5643 
cs=0x1a2;eip=0x007bfc; 	J(RETN(0));	// 19348                  retn ;~ 01A2:7BFC
ret_1a2_7bfd:
	// 5644 
cs=0x1a2;eip=0x007bfd; 	J(CALL(sub_17d26,0));	// 19350                  call    sub_17D26 ;~ 01A2:7BFD
cs=0x1a2;eip=0x007c00; 	J(JZ(locret_17bfc));	// 19351                  jz      short locret_17BFC ;~ 01A2:7C00
cs=0x1a2;eip=0x007c02; 	T(XOR(bh, bh));	// 19352                  xor     bh, bh ;~ 01A2:7C02
cs=0x1a2;eip=0x007c04; 	T(MOV(bl, *(raddr(ds,di+0x0D))));	// 19353                  mov     bl, [di+0Dh] ;~ 01A2:7C04
cs=0x1a2;eip=0x007c07; 	X(MOV(*(raddr(ds,bx+di)), 1));	// 19354                  mov     byte ptr [bx+di], 1 ;~ 01A2:7C07
cs=0x1a2;eip=0x007c0a; 	J(RETN(0));	// 19355                  retn ;~ 01A2:7C0A
ret_1a2_7c0b:
	// 5645 
cs=0x1a2;eip=0x007c0b; 	T(XOR(ah, ah));	// 19357                  xor     ah, ah ;~ 01A2:7C0B
cs=0x1a2;eip=0x007c0d; 	T(LODSB);	// 19358                  lodsb ;~ 01A2:7C0D
cs=0x1a2;eip=0x007c0e; 	X(SUB(word_1f3b8, ax));	// 19359                  sub     ds:word_1F3B8, ax ;~ 01A2:7C0E
cs=0x1a2;eip=0x007c12; 	X(SBB(word_1f3ba, 0));	// 19360                  sbb     ds:word_1F3BA, 0 ;~ 01A2:7C12
cs=0x1a2;eip=0x007c17; 	X(PUSH(ax));	// 19361                  push    ax ;~ 01A2:7C17
cs=0x1a2;eip=0x007c18; 	T(ax = 4;);	// 19362                  mov     ax, 4 ;~ 01A2:7C18
cs=0x1a2;eip=0x007c1b; 	J(CALL(sub_1156c,0));	// 19363                  call    sub_1156C ;~ 01A2:7C1B
cs=0x1a2;eip=0x007c1e; 	X(POP(ax));	// 19364                  pop     ax ;~ 01A2:7C1E
cs=0x1a2;eip=0x007c1f; 	J(RETN(0));	// 19365                  retn ;~ 01A2:7C1F
ret_1a2_7c20:
	// 5646 
cs=0x1a2;eip=0x007c20; 	T(CMP(byte_1f775, 0));	// 19367                  cmp     ds:byte_1F775, 0 ;~ 01A2:7C20
cs=0x1a2;eip=0x007c25; 	J(JNZ(loc_17c70));	// 19368                  jnz     short loc_17C70 ;~ 01A2:7C25
cs=0x1a2;eip=0x007c27; 	J(JMP(loc_17c42));	// 19369                  jmp     short loc_17C42 ;~ 01A2:7C27
ret_1a2_7c29:
	// 5647 
cs=0x1a2;eip=0x007c29; 	T(LODSB);	// 19371                  lodsb ;~ 01A2:7C29
cs=0x1a2;eip=0x007c2a; 	T(CMP(al, byte_1f775));	// 19372                  cmp     al, ds:byte_1F775 ;~ 01A2:7C2A
cs=0x1a2;eip=0x007c2e; 	J(JNZ(loc_17c42));	// 19373                  jnz     short loc_17C42 ;~ 01A2:7C2E
cs=0x1a2;eip=0x007c30; 	J(JMP(loc_17c70));	// 19374                  jmp     short loc_17C70 ;~ 01A2:7C30
ret_1a2_7c32:
	// 5648 
cs=0x1a2;eip=0x007c32; 	T(LODSB);	// 19376                  lodsb ;~ 01A2:7C32
cs=0x1a2;eip=0x007c33; 	T(CMP(al, byte_1f775));	// 19377                  cmp     al, ds:byte_1F775 ;~ 01A2:7C33
cs=0x1a2;eip=0x007c37; 	J(JZ(loc_17c42));	// 19378                  jz      short loc_17C42 ;~ 01A2:7C37
cs=0x1a2;eip=0x007c39; 	J(JMP(loc_17c70));	// 19379                  jmp     short loc_17C70 ;~ 01A2:7C39
ret_1a2_7c3b:
	// 5649 
cs=0x1a2;eip=0x007c3b; 	T(CMP(byte_1f775, 0));	// 19381                  cmp     ds:byte_1F775, 0 ;~ 01A2:7C3B
cs=0x1a2;eip=0x007c40; 	J(JZ(loc_17c70));	// 19382                  jz      short loc_17C70 ;~ 01A2:7C40
loc_17c42:
	// 5650 
cs=0x1a2;eip=0x007c42; 	X(byte_1f775 = 0;);	// 19386                  mov     ds:byte_1F775, 0 ;~ 01A2:7C42
cs=0x1a2;eip=0x007c47; 	T(INC(si));	// 19387                  inc     si ;~ 01A2:7C47
loc_17c48:
	// 5651 
cs=0x1a2;eip=0x007c48; 	T(XOR(ah, ah));	// 19390                  xor     ah, ah ;~ 01A2:7C48
cs=0x1a2;eip=0x007c4a; 	T(LODSB);	// 19391                  lodsb ;~ 01A2:7C4A
cs=0x1a2;eip=0x007c4b; 	T(CMP(al, 0x16));	// 19392                  cmp     al, 16h ;~ 01A2:7C4B
cs=0x1a2;eip=0x007c4d; 	J(JZ(loc_17c62));	// 19393                  jz      short loc_17C62 ;~ 01A2:7C4D
cs=0x1a2;eip=0x007c4f; 	X(PUSH(ax));	// 19394                  push    ax ;~ 01A2:7C4F
cs=0x1a2;eip=0x007c50; 	X(PUSH(bp));	// 19395                  push    bp ;~ 01A2:7C50
cs=0x1a2;eip=0x007c51; 	T(bl = al;);	// 19396                  mov     bl, al ;~ 01A2:7C51
cs=0x1a2;eip=0x007c53; 	T(XOR(bh, bh));	// 19397                  xor     bh, bh ;~ 01A2:7C53
cs=0x1a2;eip=0x007c55; 	T(SHL(bx, 1));	// 19398                  shl     bx, 1 ;~ 01A2:7C55
cs=0x1a2;eip=0x007c57; 	T(ADD(bx, offset(seg000,byte_17819)));	// 19399                  add     bx, offset byte_17819 ;~ 01A2:7C57
cs=0x1a2;eip=0x007c5b; 	J(CALL(__dispatch_call,*(dw*)(raddr(cs,bx))));	// 19400                  call    word ptr cs:[bx] ;~ 01A2:7C5B
cs=0x1a2;eip=0x007c5e; 	X(POP(bp));	// 19401                  pop     bp ;~ 01A2:7C5E
cs=0x1a2;eip=0x007c5f; 	X(POP(ax));	// 19402                  pop     ax ;~ 01A2:7C5F
cs=0x1a2;eip=0x007c60; 	J(JMP(loc_17c48));	// 19403                  jmp     short loc_17C48 ;~ 01A2:7C60
loc_17c62:
	// 5652 
cs=0x1a2;eip=0x007c62; 	T(CMP(*(raddr(ds,si)), 0x0F));	// 19407                  cmp     byte ptr [si], 0Fh ;~ 01A2:7C62
cs=0x1a2;eip=0x007c65; 	J(JNZ(locret_17c9d));	// 19408                  jnz     short locret_17C9D ;~ 01A2:7C65
cs=0x1a2;eip=0x007c67; 	T(INC(si));	// 19409                  inc     si ;~ 01A2:7C67
cs=0x1a2;eip=0x007c68; 	T(XOR(ah, ah));	// 19410                  xor     ah, ah ;~ 01A2:7C68
cs=0x1a2;eip=0x007c6a; 	T(MOV(al, *(raddr(ds,si))));	// 19411                  mov     al, [si] ;~ 01A2:7C6A
cs=0x1a2;eip=0x007c6c; 	T(ADD(si, ax));	// 19412                  add     si, ax ;~ 01A2:7C6C
cs=0x1a2;eip=0x007c6e; 	J(JMP(locret_17c9d));	// 19413                  jmp     short locret_17C9D ;~ 01A2:7C6E
loc_17c70:
	// 5653 
cs=0x1a2;eip=0x007c70; 	X(byte_1f775 = 0;);	// 19418                  mov     ds:byte_1F775, 0 ;~ 01A2:7C70
cs=0x1a2;eip=0x007c75; 	T(XOR(ah, ah));	// 19419                  xor     ah, ah ;~ 01A2:7C75
cs=0x1a2;eip=0x007c77; 	T(MOV(al, *(raddr(ds,si))));	// 19420                  mov     al, [si] ;~ 01A2:7C77
cs=0x1a2;eip=0x007c79; 	T(ADD(si, ax));	// 19421                  add     si, ax ;~ 01A2:7C79
cs=0x1a2;eip=0x007c7b; 	T(CMP(*(raddr(ds,si)), 0x0F));	// 19422                  cmp     byte ptr [si], 0Fh ;~ 01A2:7C7B
cs=0x1a2;eip=0x007c7e; 	J(JNZ(locret_17c9d));	// 19423                  jnz     short locret_17C9D ;~ 01A2:7C7E
cs=0x1a2;eip=0x007c80; 	T(ADD(si, 2));	// 19424                  add     si, 2 ;~ 01A2:7C80
loc_17c83:
	// 5654 
cs=0x1a2;eip=0x007c83; 	T(XOR(ah, ah));	// 19427                  xor     ah, ah ;~ 01A2:7C83
cs=0x1a2;eip=0x007c85; 	T(LODSB);	// 19428                  lodsb ;~ 01A2:7C85
cs=0x1a2;eip=0x007c86; 	T(CMP(al, 0x16));	// 19429                  cmp     al, 16h ;~ 01A2:7C86
cs=0x1a2;eip=0x007c88; 	J(JZ(locret_17c9d));	// 19430                  jz      short locret_17C9D ;~ 01A2:7C88
cs=0x1a2;eip=0x007c8a; 	X(PUSH(ax));	// 19431                  push    ax ;~ 01A2:7C8A
cs=0x1a2;eip=0x007c8b; 	X(PUSH(bp));	// 19432                  push    bp ;~ 01A2:7C8B
cs=0x1a2;eip=0x007c8c; 	T(bl = al;);	// 19433                  mov     bl, al ;~ 01A2:7C8C
cs=0x1a2;eip=0x007c8e; 	T(XOR(bh, bh));	// 19434                  xor     bh, bh ;~ 01A2:7C8E
cs=0x1a2;eip=0x007c90; 	T(SHL(bx, 1));	// 19435                  shl     bx, 1 ;~ 01A2:7C90
cs=0x1a2;eip=0x007c92; 	T(ADD(bx, offset(seg000,byte_17819)));	// 19436                  add     bx, offset byte_17819 ;~ 01A2:7C92
cs=0x1a2;eip=0x007c96; 	J(CALL(__dispatch_call,*(dw*)(raddr(cs,bx))));	// 19437                  call    word ptr cs:[bx] ;~ 01A2:7C96
cs=0x1a2;eip=0x007c99; 	X(POP(bp));	// 19438                  pop     bp ;~ 01A2:7C99
cs=0x1a2;eip=0x007c9a; 	X(POP(ax));	// 19439                  pop     ax ;~ 01A2:7C9A
cs=0x1a2;eip=0x007c9b; 	J(JMP(loc_17c83));	// 19440                  jmp     short loc_17C83 ;~ 01A2:7C9B
locret_17c9d:
	// 5655 
cs=0x1a2;eip=0x007c9d; 	J(RETN(0));	// 19445                  retn ;~ 01A2:7C9D
locret_17c9e:
	// 5656 
cs=0x1a2;eip=0x007c9e; 	J(RETN(0));	// 19450                  retn ;~ 01A2:7C9E
ret_1a2_7c9f:
	// 5657 
cs=0x1a2;eip=0x007c9f; 	J(CALL(sub_17d26,0));	// 19452                  call    sub_17D26 ;~ 01A2:7C9F
cs=0x1a2;eip=0x007ca2; 	J(JZ(locret_17c9e));	// 19453                  jz      short locret_17C9E ;~ 01A2:7CA2
cs=0x1a2;eip=0x007ca4; 	T(TEST(*(raddr(ds,di+3)), 1));	// 19454                  test    byte ptr [di+3], 1 ;~ 01A2:7CA4
cs=0x1a2;eip=0x007ca8; 	J(JZ(loc_17caf));	// 19455                  jz      short loc_17CAF ;~ 01A2:7CA8
loc_17caa:
	// 5658 
cs=0x1a2;eip=0x007caa; 	X(INC(byte_1f775));	// 19459                  inc     ds:byte_1F775 ;~ 01A2:7CAA
cs=0x1a2;eip=0x007cae; 	J(RETN(0));	// 19460                  retn ;~ 01A2:7CAE
loc_17caf:
	// 5659 
cs=0x1a2;eip=0x007caf; 	X(byte_1f775 = 0;);	// 19464                  mov     ds:byte_1F775, 0 ;~ 01A2:7CAF
cs=0x1a2;eip=0x007cb4; 	J(RETN(0));	// 19465                  retn ;~ 01A2:7CB4
ret_1a2_7cb5:
	// 5660 
cs=0x1a2;eip=0x007cb5; 	J(CALL(sub_17d26,0));	// 19467                  call    sub_17D26 ;~ 01A2:7CB5
cs=0x1a2;eip=0x007cb8; 	J(JZ(locret_17c9e));	// 19468                  jz      short locret_17C9E ;~ 01A2:7CB8
cs=0x1a2;eip=0x007cba; 	T(TEST(*(raddr(ds,di+3)), 1));	// 19469                  test    byte ptr [di+3], 1 ;~ 01A2:7CBA
cs=0x1a2;eip=0x007cbe; 	X(PUSHF);	// 19470                  pushf ;~ 01A2:7CBE
cs=0x1a2;eip=0x007cbf; 	X(OR(*(raddr(ds,di+3)), 1));	// 19471                  or      byte ptr [di+3], 1 ;~ 01A2:7CBF
cs=0x1a2;eip=0x007cc3; 	X(POPF);	// 19472                  popf ;~ 01A2:7CC3
cs=0x1a2;eip=0x007cc4; 	J(RETN(0));	// 19473                  retn ;~ 01A2:7CC4
ret_1a2_7cc5:
	// 5661 
cs=0x1a2;eip=0x007cc5; 	J(CALL(sub_17d26,0));	// 19475                  call    sub_17D26 ;~ 01A2:7CC5
cs=0x1a2;eip=0x007cc8; 	J(JZ(locret_17c9e));	// 19476                  jz      short locret_17C9E ;~ 01A2:7CC8
cs=0x1a2;eip=0x007cca; 	T(TEST(*(raddr(ds,di+3)), 1));	// 19477                  test    byte ptr [di+3], 1 ;~ 01A2:7CCA
cs=0x1a2;eip=0x007cce; 	X(PUSHF);	// 19478                  pushf ;~ 01A2:7CCE
cs=0x1a2;eip=0x007ccf; 	X(AND(*(raddr(ds,di+3)), 0x0FE));	// 19479                  and     byte ptr [di+3], 0FEh ;~ 01A2:7CCF
cs=0x1a2;eip=0x007cd3; 	X(POPF);	// 19480                  popf ;~ 01A2:7CD3
cs=0x1a2;eip=0x007cd4; 	J(RETN(0));	// 19481                  retn ;~ 01A2:7CD4
ret_1a2_7cd5:
	// 5662 
cs=0x1a2;eip=0x007cd5; 	J(CALL(sub_17d26,0));	// 19483                  call    sub_17D26 ;~ 01A2:7CD5
cs=0x1a2;eip=0x007cd8; 	J(JZ(locret_17c9e));	// 19484                  jz      short locret_17C9E ;~ 01A2:7CD8
cs=0x1a2;eip=0x007cda; 	T(TEST(*(raddr(ds,di+3)), 2));	// 19485                  test    byte ptr [di+3], 2 ;~ 01A2:7CDA
cs=0x1a2;eip=0x007cde; 	J(JNZ(loc_17caa));	// 19486                  jnz     short loc_17CAA ;~ 01A2:7CDE
cs=0x1a2;eip=0x007ce0; 	X(byte_1f775 = 0;);	// 19487                  mov     ds:byte_1F775, 0 ;~ 01A2:7CE0
cs=0x1a2;eip=0x007ce5; 	J(RETN(0));	// 19488                  retn ;~ 01A2:7CE5
ret_1a2_7ce6:
	// 5663 
cs=0x1a2;eip=0x007ce6; 	J(CALL(sub_17d26,0));	// 19490                  call    sub_17D26 ;~ 01A2:7CE6
cs=0x1a2;eip=0x007ce9; 	J(JZ(locret_17c9e));	// 19491                  jz      short locret_17C9E ;~ 01A2:7CE9
cs=0x1a2;eip=0x007ceb; 	T(TEST(*(raddr(ds,di+3)), 2));	// 19492                  test    byte ptr [di+3], 2 ;~ 01A2:7CEB
cs=0x1a2;eip=0x007cef; 	X(PUSHF);	// 19493                  pushf ;~ 01A2:7CEF
cs=0x1a2;eip=0x007cf0; 	X(OR(*(raddr(ds,di+3)), 2));	// 19494                  or      byte ptr [di+3], 2 ;~ 01A2:7CF0
cs=0x1a2;eip=0x007cf4; 	X(POPF);	// 19495                  popf ;~ 01A2:7CF4
cs=0x1a2;eip=0x007cf5; 	J(RETN(0));	// 19496                  retn ;~ 01A2:7CF5
ret_1a2_7cf6:
	// 5664 
cs=0x1a2;eip=0x007cf6; 	J(CALL(sub_17d26,0));	// 19498                  call    sub_17D26 ;~ 01A2:7CF6
cs=0x1a2;eip=0x007cf9; 	J(JZ(locret_17c9e));	// 19499                  jz      short locret_17C9E ;~ 01A2:7CF9
cs=0x1a2;eip=0x007cfb; 	T(TEST(*(raddr(ds,di+3)), 2));	// 19500                  test    byte ptr [di+3], 2 ;~ 01A2:7CFB
cs=0x1a2;eip=0x007cff; 	X(PUSHF);	// 19501                  pushf ;~ 01A2:7CFF
cs=0x1a2;eip=0x007d00; 	X(AND(*(raddr(ds,di+3)), 0x0FD));	// 19502                  and     byte ptr [di+3], 0FDh ;~ 01A2:7D00
cs=0x1a2;eip=0x007d04; 	X(POPF);	// 19503                  popf ;~ 01A2:7D04
cs=0x1a2;eip=0x007d05; 	J(RETN(0));	// 19504                  retn ;~ 01A2:7D05
ret_1a2_7d06:
	// 5665 
cs=0x1a2;eip=0x007d06; 	J(CALL(sub_17d26,0));	// 19506                  call    sub_17D26 ;~ 01A2:7D06
cs=0x1a2;eip=0x007d09; 	J(JZ(locret_17c9e));	// 19507                  jz      short locret_17C9E ;~ 01A2:7D09
cs=0x1a2;eip=0x007d0b; 	T(TEST(*(raddr(ds,di+3)), 1));	// 19508                  test    byte ptr [di+3], 1 ;~ 01A2:7D0B
cs=0x1a2;eip=0x007d0f; 	X(PUSHF);	// 19509                  pushf ;~ 01A2:7D0F
cs=0x1a2;eip=0x007d10; 	X(XOR(*(raddr(ds,di+3)), 1));	// 19510                  xor     byte ptr [di+3], 1 ;~ 01A2:7D10
cs=0x1a2;eip=0x007d14; 	X(POPF);	// 19511                  popf ;~ 01A2:7D14
cs=0x1a2;eip=0x007d15; 	J(RETN(0));	// 19512                  retn ;~ 01A2:7D15
ret_1a2_7d16:
	// 5666 
cs=0x1a2;eip=0x007d16; 	J(CALL(sub_17d26,0));	// 19514                  call    sub_17D26 ;~ 01A2:7D16
cs=0x1a2;eip=0x007d19; 	J(JZ(locret_17c9e));	// 19515                  jz      short locret_17C9E ;~ 01A2:7D19
cs=0x1a2;eip=0x007d1b; 	T(TEST(*(raddr(ds,di+3)), 2));	// 19516                  test    byte ptr [di+3], 2 ;~ 01A2:7D1B
cs=0x1a2;eip=0x007d1f; 	X(PUSHF);	// 19517                  pushf ;~ 01A2:7D1F
cs=0x1a2;eip=0x007d20; 	X(XOR(*(raddr(ds,di+3)), 2));	// 19518                  xor     byte ptr [di+3], 2 ;~ 01A2:7D20
cs=0x1a2;eip=0x007d24; 	X(POPF);	// 19519                  popf ;~ 01A2:7D24
cs=0x1a2;eip=0x007d25; 	J(RETN(0));	// 19520                  retn ;~ 01A2:7D25

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_178de: 	goto loc_178de;
        case m2c::kloc_178fe: 	goto loc_178fe;
        case m2c::kloc_17914: 	goto loc_17914;
        case m2c::kloc_17937: 	goto loc_17937;
        case m2c::kloc_1795c: 	goto loc_1795c;
        case m2c::kloc_17984: 	goto loc_17984;
        case m2c::kloc_17997: 	goto loc_17997;
        case m2c::kloc_179c2: 	goto loc_179c2;
        case m2c::kloc_17a1d: 	goto loc_17a1d;
        case m2c::kloc_17a43: 	goto loc_17a43;
        case m2c::kloc_17a4c: 	goto loc_17a4c;
        case m2c::kloc_17a5e: 	goto loc_17a5e;
        case m2c::kloc_17a94: 	goto loc_17a94;
        case m2c::kloc_17b5e: 	goto loc_17b5e;
        case m2c::kloc_17ba1: 	goto loc_17ba1;
        case m2c::kloc_17bab: 	goto loc_17bab;
        case m2c::kloc_17bbd: 	goto loc_17bbd;
        case m2c::kloc_17bf8: 	goto loc_17bf8;
        case m2c::kloc_17c42: 	goto loc_17c42;
        case m2c::kloc_17c48: 	goto loc_17c48;
        case m2c::kloc_17c62: 	goto loc_17c62;
        case m2c::kloc_17c70: 	goto loc_17c70;
        case m2c::kloc_17c83: 	goto loc_17c83;
        case m2c::kloc_17caa: 	goto loc_17caa;
        case m2c::kloc_17caf: 	goto loc_17caf;
        case m2c::klocret_17902: 	goto locret_17902;
        case m2c::klocret_179b0: 	goto locret_179b0;
        case m2c::klocret_179f1: 	goto locret_179f1;
        case m2c::klocret_179f2: 	goto locret_179f2;
        case m2c::klocret_179f3: 	goto locret_179f3;
        case m2c::klocret_17a42: 	goto locret_17a42;
        case m2c::klocret_17aa2: 	goto locret_17aa2;
        case m2c::klocret_17ac6: 	goto locret_17ac6;
        case m2c::klocret_17adc: 	goto locret_17adc;
        case m2c::klocret_17add: 	goto locret_17add;
        case m2c::klocret_17ade: 	goto locret_17ade;
        case m2c::klocret_17b32: 	goto locret_17b32;
        case m2c::klocret_17b68: 	goto locret_17b68;
        case m2c::klocret_17b89: 	goto locret_17b89;
        case m2c::klocret_17b8a: 	goto locret_17b8a;
        case m2c::klocret_17bbc: 	goto locret_17bbc;
        case m2c::klocret_17be2: 	goto locret_17be2;
        case m2c::klocret_17bfc: 	goto locret_17bfc;
        case m2c::klocret_17c9d: 	goto locret_17c9d;
        case m2c::klocret_17c9e: 	goto locret_17c9e;
        case m2c::kret_1a2_7903: 	goto ret_1a2_7903;
        case m2c::kret_1a2_799a: 	goto ret_1a2_799a;
        case m2c::kret_1a2_79b1: 	goto ret_1a2_79b1;
        case m2c::kret_1a2_79bb: 	goto ret_1a2_79bb;
        case m2c::kret_1a2_79f4: 	goto ret_1a2_79f4;
        case m2c::kret_1a2_7a15: 	goto ret_1a2_7a15;
        case m2c::kret_1a2_7a1a: 	goto ret_1a2_7a1a;
        case m2c::kret_1a2_7a56: 	goto ret_1a2_7a56;
        case m2c::kret_1a2_7a5b: 	goto ret_1a2_7a5b;
        case m2c::kret_1a2_7a77: 	goto ret_1a2_7a77;
        case m2c::kret_1a2_7a82: 	goto ret_1a2_7a82;
        case m2c::kret_1a2_7aa3: 	goto ret_1a2_7aa3;
        case m2c::kret_1a2_7ac7: 	goto ret_1a2_7ac7;
        case m2c::kret_1a2_7adf: 	goto ret_1a2_7adf;
        case m2c::kret_1a2_7af7: 	goto ret_1a2_7af7;
        case m2c::kret_1a2_7b0f: 	goto ret_1a2_7b0f;
        case m2c::kret_1a2_7b33: 	goto ret_1a2_7b33;
        case m2c::kret_1a2_7b37: 	goto ret_1a2_7b37;
        case m2c::kret_1a2_7b69: 	goto ret_1a2_7b69;
        case m2c::kret_1a2_7b79: 	goto ret_1a2_7b79;
        case m2c::kret_1a2_7b8b: 	goto ret_1a2_7b8b;
        case m2c::kret_1a2_7bc6: 	goto ret_1a2_7bc6;
        case m2c::kret_1a2_7be3: 	goto ret_1a2_7be3;
        case m2c::kret_1a2_7bfd: 	goto ret_1a2_7bfd;
        case m2c::kret_1a2_7c0b: 	goto ret_1a2_7c0b;
        case m2c::kret_1a2_7c20: 	goto ret_1a2_7c20;
        case m2c::kret_1a2_7c29: 	goto ret_1a2_7c29;
        case m2c::kret_1a2_7c32: 	goto ret_1a2_7c32;
        case m2c::kret_1a2_7c3b: 	goto ret_1a2_7c3b;
        case m2c::kret_1a2_7c9f: 	goto ret_1a2_7c9f;
        case m2c::kret_1a2_7cb5: 	goto ret_1a2_7cb5;
        case m2c::kret_1a2_7cc5: 	goto ret_1a2_7cc5;
        case m2c::kret_1a2_7cd5: 	goto ret_1a2_7cd5;
        case m2c::kret_1a2_7ce6: 	goto ret_1a2_7ce6;
        case m2c::kret_1a2_7cf6: 	goto ret_1a2_7cf6;
        case m2c::kret_1a2_7d06: 	goto ret_1a2_7d06;
        case m2c::kret_1a2_7d16: 	goto ret_1a2_7d16;
        case m2c::kseg000_78d5_proc: 	goto seg000_78d5_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_17d26(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_17d26:
    _begin:
cs=0x1a2;eip=0x007d26; 	X(PUSH(ax));	// 19527                  push    ax ;~ 01A2:7D26
cs=0x1a2;eip=0x007d27; 	T(LODSW);	// 19528                  lodsw ;~ 01A2:7D27
cs=0x1a2;eip=0x007d28; 	T(XCHG(al, ah));	// 19529                  xchg    al, ah ;~ 01A2:7D28
cs=0x1a2;eip=0x007d2a; 	T(dx = ax;);	// 19530                  mov     dx, ax ;~ 01A2:7D2A
cs=0x1a2;eip=0x007d2c; 	X(POP(ax));	// 19531                  pop     ax ;~ 01A2:7D2C
loc_17d2d:
	// 5667 
cs=0x1a2;eip=0x007d2d; 	J(CALL(sub_1407f,0));	// 19534                  call    sub_1407F ;~ 01A2:7D2D
cs=0x1a2;eip=0x007d30; 	J(JZ(locret_17d38));	// 19535                  jz      short locret_17D38 ;~ 01A2:7D30
cs=0x1a2;eip=0x007d32; 	T(MOV(dx, *(dw*)(raddr(ds,di+4))));	// 19536                  mov     dx, [di+4] ;~ 01A2:7D32
cs=0x1a2;eip=0x007d35; 	T(OR(dx, dx));	// 19537                  or      dx, dx ;~ 01A2:7D35
cs=0x1a2;eip=0x007d37; 	J(RETN(0));	// 19538                  retn ;~ 01A2:7D37
locret_17d38:
	// 5668 
cs=0x1a2;eip=0x007d38; 	J(RETN(0));	// 19542                  retn ;~ 01A2:7D38

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_17d2d: 	goto loc_17d2d;
        case m2c::klocret_17d38: 	goto locret_17d38;
        case m2c::ksub_17d26: 	goto sub_17d26;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_7d39_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_7d39_proc:
    _begin:
cs=0x1a2;eip=0x007d39; 	X(MOV(*(raddr(ds,bp+1)), 0x0FF));	// 19546                  mov     byte ptr ds:[bp+1], 0FFh ;~ 01A2:7D39
cs=0x1a2;eip=0x007d3e; 	J(RETN(0));	// 19547                  retn ;~ 01A2:7D3E
ret_1a2_7d3f:
	// 5669 
cs=0x1a2;eip=0x007d3f; 	T(di = word_1f20c;);	// 19549                  mov     di, word_1F20C ;~ 01A2:7D3F
cs=0x1a2;eip=0x007d43; 	T(TEST(*(raddr(ds,di+3)), 1));	// 19550                  test    byte ptr [di+3], 1 ;~ 01A2:7D43
cs=0x1a2;eip=0x007d47; 	J(JZ(loc_17d4c));	// 19551                  jz      short loc_17D4C ;~ 01A2:7D47
cs=0x1a2;eip=0x007d49; 	J(return seg000_78d5_proc(m2c::kloc_17caa, _state););	// 19552                  jmp     loc_17CAA ;~ 01A2:7D49
loc_17d4c:
	// 5670 
cs=0x1a2;eip=0x007d4c; 	X(byte_1f775 = 0;);	// 19556                  mov     ds:byte_1F775, 0 ;~ 01A2:7D4C
cs=0x1a2;eip=0x007d51; 	J(RETN(0));	// 19557                  retn ;~ 01A2:7D51
ret_1a2_7d52:
	// 5671 
cs=0x1a2;eip=0x007d52; 	T(di = word_1f20c;);	// 19559                  mov     di, word_1F20C ;~ 01A2:7D52
cs=0x1a2;eip=0x007d56; 	T(TEST(*(raddr(ds,di+3)), 1));	// 19560                  test    byte ptr [di+3], 1 ;~ 01A2:7D56
cs=0x1a2;eip=0x007d5a; 	X(PUSHF);	// 19561                  pushf ;~ 01A2:7D5A
cs=0x1a2;eip=0x007d5b; 	X(AND(*(raddr(ds,di+3)), 0x0FE));	// 19562                  and     byte ptr [di+3], 0FEh ;~ 01A2:7D5B
cs=0x1a2;eip=0x007d5f; 	X(POPF);	// 19563                  popf ;~ 01A2:7D5F
cs=0x1a2;eip=0x007d60; 	J(RETN(0));	// 19564                  retn ;~ 01A2:7D60
ret_1a2_7d61:
	// 5672 
cs=0x1a2;eip=0x007d61; 	T(di = word_1f20c;);	// 19566                  mov     di, word_1F20C ;~ 01A2:7D61
cs=0x1a2;eip=0x007d65; 	T(TEST(*(raddr(ds,di+3)), 1));	// 19567                  test    byte ptr [di+3], 1 ;~ 01A2:7D65
cs=0x1a2;eip=0x007d69; 	X(PUSHF);	// 19568                  pushf ;~ 01A2:7D69
cs=0x1a2;eip=0x007d6a; 	X(OR(*(raddr(ds,di+3)), 1));	// 19569                  or      byte ptr [di+3], 1 ;~ 01A2:7D6A
cs=0x1a2;eip=0x007d6e; 	X(POPF);	// 19570                  popf ;~ 01A2:7D6E
cs=0x1a2;eip=0x007d6f; 	J(RETN(0));	// 19571                  retn ;~ 01A2:7D6F
ret_1a2_7d70:
	// 5673 
cs=0x1a2;eip=0x007d70; 	T(di = word_1f20c;);	// 19573                  mov     di, word_1F20C ;~ 01A2:7D70
cs=0x1a2;eip=0x007d74; 	T(TEST(*(raddr(ds,di+3)), 1));	// 19574                  test    byte ptr [di+3], 1 ;~ 01A2:7D74
cs=0x1a2;eip=0x007d78; 	X(PUSHF);	// 19575                  pushf ;~ 01A2:7D78
cs=0x1a2;eip=0x007d79; 	X(XOR(*(raddr(ds,di+3)), 1));	// 19576                  xor     byte ptr [di+3], 1 ;~ 01A2:7D79
cs=0x1a2;eip=0x007d7d; 	X(POPF);	// 19577                  popf ;~ 01A2:7D7D
cs=0x1a2;eip=0x007d7e; 	J(RETN(0));	// 19578                  retn ;~ 01A2:7D7E
ret_1a2_7d7f:
	// 5674 
cs=0x1a2;eip=0x007d7f; 	T(LODSB);	// 19580                  lodsb ;~ 01A2:7D7F
cs=0x1a2;eip=0x007d80; 	T(CMP(al, byte_1f850));	// 19581                  cmp     al, ds:byte_1F850 ;~ 01A2:7D80
cs=0x1a2;eip=0x007d84; 	J(JNZ(loc_17db0));	// 19582                  jnz     short loc_17DB0 ;~ 01A2:7D84
cs=0x1a2;eip=0x007d86; 	J(JMP(loc_17d94));	// 19583                  jmp     short loc_17D94 ;~ 01A2:7D86
ret_1a2_7d88:
	// 5675 
cs=0x1a2;eip=0x007d88; 	X(PUSH(ax));	// 19585                  push    ax ;~ 01A2:7D88
cs=0x1a2;eip=0x007d89; 	T(LODSW);	// 19586                  lodsw ;~ 01A2:7D89
cs=0x1a2;eip=0x007d8a; 	T(XCHG(al, ah));	// 19587                  xchg    al, ah ;~ 01A2:7D8A
cs=0x1a2;eip=0x007d8c; 	T(cx = ax;);	// 19588                  mov     cx, ax ;~ 01A2:7D8C
cs=0x1a2;eip=0x007d8e; 	X(POP(ax));	// 19589                  pop     ax ;~ 01A2:7D8E
cs=0x1a2;eip=0x007d8f; 	J(CALL(sub_186d1,0));	// 19590                  call    sub_186D1 ;~ 01A2:7D8F
cs=0x1a2;eip=0x007d92; 	J(JZ(loc_17db0));	// 19591                  jz      short loc_17DB0 ;~ 01A2:7D92
loc_17d94:
	// 5676 
cs=0x1a2;eip=0x007d94; 	J(return seg000_78d5_proc(m2c::kloc_17caa, _state););	// 19594                  jmp     loc_17CAA ;~ 01A2:7D94
ret_1a2_7d97:
	// 5677 
cs=0x1a2;eip=0x007d97; 	J(CALL(sub_17d26,0));	// 19596                  call    sub_17D26 ;~ 01A2:7D97
cs=0x1a2;eip=0x007d9a; 	T(MOV(dl, *(raddr(ds,si))));	// 19597                  mov     dl, [si] ;~ 01A2:7D9A
cs=0x1a2;eip=0x007d9c; 	T(INC(si));	// 19598                  inc     si ;~ 01A2:7D9C
cs=0x1a2;eip=0x007d9d; 	T(XOR(dh, dh));	// 19599                  xor     dh, dh ;~ 01A2:7D9D
cs=0x1a2;eip=0x007d9f; 	T(CMP(dl, 0x0FE));	// 19600                  cmp     dl, 0FEh ;~ 01A2:7D9F
cs=0x1a2;eip=0x007da2; 	J(JNZ(loc_17da8));	// 19601                  jnz     short loc_17DA8 ;~ 01A2:7DA2
cs=0x1a2;eip=0x007da4; 	T(dx = word_1f3a2;);	// 19602                  mov     dx, ds:word_1F3A2 ;~ 01A2:7DA4
loc_17da8:
	// 5678 
cs=0x1a2;eip=0x007da8; 	T(CMP(dl, *(raddr(ds,di+0x0A))));	// 19605                  cmp     dl, [di+0Ah] ;~ 01A2:7DA8
cs=0x1a2;eip=0x007dab; 	J(JNZ(loc_17db0));	// 19606                  jnz     short loc_17DB0 ;~ 01A2:7DAB
cs=0x1a2;eip=0x007dad; 	J(return seg000_78d5_proc(m2c::kloc_17caa, _state););	// 19607                  jmp     loc_17CAA ;~ 01A2:7DAD
loc_17db0:
	// 5679 
cs=0x1a2;eip=0x007db0; 	X(byte_1f775 = 0;);	// 19612                  mov     ds:byte_1F775, 0 ;~ 01A2:7DB0
cs=0x1a2;eip=0x007db5; 	J(RETN(0));	// 19613                  retn ;~ 01A2:7DB5
ret_1a2_7db6:
	// 5680 
cs=0x1a2;eip=0x007db6; 	X(PUSH(ax));	// 19615                  push    ax ;~ 01A2:7DB6
cs=0x1a2;eip=0x007db7; 	T(al = byte_70d0f;);	// 19616                  mov     al, ss:byte_70D0F ;~ 01A2:7DB7
cs=0x1a2;eip=0x007dbb; 	T(CMP(al, 0x44));	// 19617                  cmp     al, 44h ; 'D' ;~ 01A2:7DBB
cs=0x1a2;eip=0x007dbd; 	X(POP(ax));	// 19618                  pop     ax ;~ 01A2:7DBD
cs=0x1a2;eip=0x007dbe; 	J(JZ(loc_17ddc));	// 19619                  jz      short loc_17DDC ;~ 01A2:7DBE
cs=0x1a2;eip=0x007dc0; 	T(ADD(si, 2));	// 19620                  add     si, 2 ;~ 01A2:7DC0
cs=0x1a2;eip=0x007dc3; 	T(dx = word_1f398;);	// 19621                  mov     dx, ds:word_1F398 ;~ 01A2:7DC3
cs=0x1a2;eip=0x007dc7; 	J(CALL(sub_1407f,0));	// 19622                  call    sub_1407F ;~ 01A2:7DC7
cs=0x1a2;eip=0x007dca; 	T(ax = word_1f20c;);	// 19623                  mov     ax, word_1F20C ;~ 01A2:7DCA
cs=0x1a2;eip=0x007dcd; 	X(word_1f20c = di;);	// 19624                  mov     word_1F20C, di ;~ 01A2:7DCD
cs=0x1a2;eip=0x007dd1; 	X(PUSH(si));	// 19625                  push    si ;~ 01A2:7DD1
cs=0x1a2;eip=0x007dd2; 	T(si = ax;);	// 19626                  mov     si, ax ;~ 01A2:7DD2
cs=0x1a2;eip=0x007dd4; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 19627                  mov     ax, [si+4] ;~ 01A2:7DD4
cs=0x1a2;eip=0x007dd7; 	X(word_1f398 = ax;);	// 19628                  mov     ds:word_1F398, ax ;~ 01A2:7DD7
cs=0x1a2;eip=0x007dda; 	X(POP(si));	// 19629                  pop     si ;~ 01A2:7DDA
cs=0x1a2;eip=0x007ddb; 	J(RETN(0));	// 19630                  retn ;~ 01A2:7DDB
loc_17ddc:
	// 5681 
cs=0x1a2;eip=0x007ddc; 	J(CALL(sub_17d26,0));	// 19634                  call    sub_17D26 ;~ 01A2:7DDC
cs=0x1a2;eip=0x007ddf; 	J({;});	// 19635                  jmp     short $+2 ;~ 01A2:7DDF
loc_17de1:
	// 5682 
cs=0x1a2;eip=0x007de1; 	T(XOR(ah, ah));	// 19639                  xor     ah, ah ;~ 01A2:7DE1
cs=0x1a2;eip=0x007de3; 	T(al = byte_1f81d;);	// 19640                  mov     al, ds:byte_1F81D ;~ 01A2:7DE3
cs=0x1a2;eip=0x007de6; 	T(CMP(ax, word_1f710));	// 19641                  cmp     ax, ds:word_1F710 ;~ 01A2:7DE6
cs=0x1a2;eip=0x007dea; 	J(JZ(locret_17e1b));	// 19642                  jz      short locret_17E1B ;~ 01A2:7DEA
cs=0x1a2;eip=0x007dec; 	X(PUSH(di));	// 19643                  push    di ;~ 01A2:7DEC
cs=0x1a2;eip=0x007ded; 	X(PUSH(dx));	// 19644                  push    dx ;~ 01A2:7DED
cs=0x1a2;eip=0x007dee; 	J(CALL(sub_13e6d,0));	// 19645                  call    sub_13E6D ;~ 01A2:7DEE
cs=0x1a2;eip=0x007df1; 	X(POP(dx));	// 19646                  pop     dx ;~ 01A2:7DF1
cs=0x1a2;eip=0x007df2; 	X(POP(di));	// 19647                  pop     di ;~ 01A2:7DF2
cs=0x1a2;eip=0x007df3; 	J(JS(locret_17e1a));	// 19648                  js      short locret_17E1A ;~ 01A2:7DF3
cs=0x1a2;eip=0x007df5; 	X(PUSH(di));	// 19649                  push    di ;~ 01A2:7DF5
cs=0x1a2;eip=0x007df6; 	J(CALL(sub_13f35,0));	// 19650                  call    sub_13F35 ;~ 01A2:7DF6
cs=0x1a2;eip=0x007df9; 	X(POP(di));	// 19651                  pop     di ;~ 01A2:7DF9
cs=0x1a2;eip=0x007dfa; 	X(PUSH(si));	// 19652                  push    si ;~ 01A2:7DFA
cs=0x1a2;eip=0x007dfb; 	T(si = word_1f1f4;);	// 19653                  mov     si, word_1F1F4 ;~ 01A2:7DFB
cs=0x1a2;eip=0x007dff; 	X(MOV(*(dw*)(raddr(ds,si)), 0));	// 19654                  mov     word ptr [si], 0 ;~ 01A2:7DFF
cs=0x1a2;eip=0x007e03; 	T(ADD(si, 2));	// 19655                  add     si, 2 ;~ 01A2:7E03
cs=0x1a2;eip=0x007e06; 	X(MOV(*(dw*)(raddr(ds,si)), di));	// 19656                  mov     [si], di ;~ 01A2:7E06
cs=0x1a2;eip=0x007e08; 	T(ADD(si, 2));	// 19657                  add     si, 2 ;~ 01A2:7E08
cs=0x1a2;eip=0x007e0b; 	T(ADD(si, 2));	// 19658                  add     si, 2 ;~ 01A2:7E0B
cs=0x1a2;eip=0x007e0e; 	X(word_1f1f4 = si;);	// 19659                  mov     word_1F1F4, si ;~ 01A2:7E0E
cs=0x1a2;eip=0x007e12; 	X(INC(word_1f396));	// 19660                  inc     ds:word_1F396 ;~ 01A2:7E12
cs=0x1a2;eip=0x007e16; 	X(POP(si));	// 19661                  pop     si ;~ 01A2:7E16
cs=0x1a2;eip=0x007e17; 	J(CALL(sub_15108,0));	// 19662                  call    sub_15108 ;~ 01A2:7E17
locret_17e1a:
	// 5683 
cs=0x1a2;eip=0x007e1a; 	J(RETN(0));	// 19665                  retn ;~ 01A2:7E1A
locret_17e1b:
	// 5684 
cs=0x1a2;eip=0x007e1b; 	J(RETN(0));	// 19669                  retn ;~ 01A2:7E1B
loc_17e1c:
	// 5685 
cs=0x1a2;eip=0x007e1c; 	J(CALL(sub_17d26,0));	// 19673                  call    sub_17D26 ;~ 01A2:7E1C
cs=0x1a2;eip=0x007e1f; 	X(PUSH(di));	// 19674                  push    di ;~ 01A2:7E1F
cs=0x1a2;eip=0x007e20; 	J(CALL(sub_17eee,0));	// 19675                  call    sub_17EEE ;~ 01A2:7E20
cs=0x1a2;eip=0x007e23; 	T(MOV(ah, *(raddr(ds,bx))));	// 19676                  mov     ah, [bx] ;~ 01A2:7E23
cs=0x1a2;eip=0x007e25; 	T(INC(bx));	// 19677                  inc     bx ;~ 01A2:7E25
cs=0x1a2;eip=0x007e26; 	T(TEST(*(raddr(es,di+0x16)), 0x80));	// 19678                  test    byte ptr es:[di+16h], 80h ;~ 01A2:7E26
cs=0x1a2;eip=0x007e2b; 	J(JZ(loc_17e5f));	// 19679                  jz      short loc_17E5F ;~ 01A2:7E2B
cs=0x1a2;eip=0x007e2d; 	T(dx = si;);	// 19680                  mov     dx, si ;~ 01A2:7E2D
cs=0x1a2;eip=0x007e2f; 	X(POP(si));	// 19681                  pop     si ;~ 01A2:7E2F
cs=0x1a2;eip=0x007e30; 	X(PUSH(dx));	// 19682                  push    dx ;~ 01A2:7E30
cs=0x1a2;eip=0x007e31; 	T(MOV(dl, *(raddr(ds,si))));	// 19683                  mov     dl, [si] ;~ 01A2:7E31
cs=0x1a2;eip=0x007e33; 	T(MOV(dh, *(raddr(ds,si+1))));	// 19684                  mov     dh, [si+1] ;~ 01A2:7E33
cs=0x1a2;eip=0x007e36; 	T(MOV(ch, *(raddr(ds,si+2))));	// 19685                  mov     ch, [si+2] ;~ 01A2:7E36
cs=0x1a2;eip=0x007e39; 	X(PUSH(ax));	// 19686                  push    ax ;~ 01A2:7E39
cs=0x1a2;eip=0x007e3a; 	X(PUSH(bx));	// 19687                  push    bx ;~ 01A2:7E3A
cs=0x1a2;eip=0x007e3b; 	X(PUSH(bp));	// 19688                  push    bp ;~ 01A2:7E3B
cs=0x1a2;eip=0x007e3c; 	T(XOR(cl, cl));	// 19689                  xor     cl, cl ;~ 01A2:7E3C
cs=0x1a2;eip=0x007e3e; 	T(CMP(byte_1f848, 0));	// 19690                  cmp     ds:byte_1F848, 0 ;~ 01A2:7E3E
cs=0x1a2;eip=0x007e43; 	J(JZ(loc_17e53));	// 19691                  jz      short loc_17E53 ;~ 01A2:7E43
cs=0x1a2;eip=0x007e45; 	T(dl = byte_1f848;);	// 19692                  mov     dl, ds:byte_1F848 ;~ 01A2:7E45
cs=0x1a2;eip=0x007e49; 	T(dh = byte_1f849;);	// 19693                  mov     dh, ds:byte_1F849 ;~ 01A2:7E49
cs=0x1a2;eip=0x007e4d; 	T(ch = byte_1f84a;);	// 19694                  mov     ch, ds:byte_1F84A ;~ 01A2:7E4D
cs=0x1a2;eip=0x007e51; 	T(XOR(ah, ah));	// 19695                  xor     ah, ah ;~ 01A2:7E51
loc_17e53:
	// 5686 
cs=0x1a2;eip=0x007e53; 	T(MOV(bp, *(dw*)(raddr(ds,si+8))));	// 19698                  mov     bp, [si+8] ;~ 01A2:7E53
cs=0x1a2;eip=0x007e56; 	J(CALL(sub_16c72,0));	// 19699                  call    sub_16C72 ;~ 01A2:7E56
cs=0x1a2;eip=0x007e59; 	X(POP(bp));	// 19700                  pop     bp ;~ 01A2:7E59
cs=0x1a2;eip=0x007e5a; 	X(POP(bx));	// 19701                  pop     bx ;~ 01A2:7E5A
cs=0x1a2;eip=0x007e5b; 	X(POP(ax));	// 19702                  pop     ax ;~ 01A2:7E5B
cs=0x1a2;eip=0x007e5c; 	X(POP(si));	// 19703                  pop     si ;~ 01A2:7E5C
cs=0x1a2;eip=0x007e5d; 	J(JMP(loc_17ea9));	// 19704                  jmp     short loc_17EA9 ;~ 01A2:7E5D
loc_17e5f:
	// 5687 
cs=0x1a2;eip=0x007e5f; 	T(si = 0x0FB46;);	// 19708                  mov     si, 0FB46h ;~ 01A2:7E5F
cs=0x1a2;eip=0x007e62; 	X(PUSH(bx));	// 19709                  push    bx ;~ 01A2:7E62
cs=0x1a2;eip=0x007e63; 	T(XOR(bh, bh));	// 19710                  xor     bh, bh ;~ 01A2:7E63
cs=0x1a2;eip=0x007e65; 	T(bl = ah;);	// 19711                  mov     bl, ah ;~ 01A2:7E65
cs=0x1a2;eip=0x007e67; 	T(MOV(ah, *(raddr(ds,bx+si))));	// 19712                  mov     ah, [bx+si] ;~ 01A2:7E67
cs=0x1a2;eip=0x007e69; 	X(POP(bx));	// 19713                  pop     bx ;~ 01A2:7E69
cs=0x1a2;eip=0x007e6a; 	X(POP(si));	// 19714                  pop     si ;~ 01A2:7E6A
cs=0x1a2;eip=0x007e6b; 	T(CMP(*(raddr(ds,si+0x0A)), 0));	// 19715                  cmp     byte ptr [si+0Ah], 0 ;~ 01A2:7E6B
cs=0x1a2;eip=0x007e6f; 	J(JNS(loc_17e75));	// 19716                  jns     short loc_17E75 ;~ 01A2:7E6F
cs=0x1a2;eip=0x007e71; 	T(si = word_1f1cc;);	// 19717                  mov     si, word_1F1CC ;~ 01A2:7E71
loc_17e75:
	// 5688 
cs=0x1a2;eip=0x007e75; 	T(MOV(dl, *(raddr(ds,si))));	// 19720                  mov     dl, [si] ;~ 01A2:7E75
cs=0x1a2;eip=0x007e77; 	T(MOV(dh, *(raddr(ds,si+1))));	// 19721                  mov     dh, [si+1] ;~ 01A2:7E77
cs=0x1a2;eip=0x007e7a; 	T(MOV(ch, *(raddr(ds,si+2))));	// 19722                  mov     ch, [si+2] ;~ 01A2:7E7A
cs=0x1a2;eip=0x007e7d; 	J(JMP(loc_17ea9));	// 19723                  jmp     short loc_17EA9 ;~ 01A2:7E7D
ret_1a2_7e7f:
	// 5689 
cs=0x1a2;eip=0x007e7f; 	J(CALL(sub_17d26,0));	// 19725                  call    sub_17D26 ;~ 01A2:7E7F
cs=0x1a2;eip=0x007e82; 	X(PUSH(di));	// 19726                  push    di ;~ 01A2:7E82
cs=0x1a2;eip=0x007e83; 	J(CALL(sub_17eee,0));	// 19727                  call    sub_17EEE ;~ 01A2:7E83
cs=0x1a2;eip=0x007e86; 	X(POP(si));	// 19728                  pop     si ;~ 01A2:7E86
cs=0x1a2;eip=0x007e87; 	T(MOV(dl, *(raddr(ds,bx))));	// 19729                  mov     dl, [bx] ;~ 01A2:7E87
cs=0x1a2;eip=0x007e89; 	T(MOV(dh, *(raddr(ds,bx+1))));	// 19730                  mov     dh, [bx+1] ;~ 01A2:7E89
cs=0x1a2;eip=0x007e8c; 	T(ADD(dl, *(raddr(ds,si))));	// 19731                  add     dl, [si] ;~ 01A2:7E8C
cs=0x1a2;eip=0x007e8e; 	T(ADD(dh, *(raddr(ds,si+1))));	// 19732                  add     dh, [si+1] ;~ 01A2:7E8E
cs=0x1a2;eip=0x007e91; 	T(MOV(ch, *(raddr(ds,bx+2))));	// 19733                  mov     ch, [bx+2] ;~ 01A2:7E91
cs=0x1a2;eip=0x007e94; 	T(ADD(bx, 3));	// 19734                  add     bx, 3 ;~ 01A2:7E94
cs=0x1a2;eip=0x007e97; 	J(JMP(loc_17ea9));	// 19735                  jmp     short loc_17EA9 ;~ 01A2:7E97
ret_1a2_7e99:
	// 5690 
cs=0x1a2;eip=0x007e99; 	J(CALL(sub_17eee,0));	// 19737                  call    sub_17EEE ;~ 01A2:7E99
cs=0x1a2;eip=0x007e9c; 	T(ah = 0x0F;);	// 19738                  mov     ah, 0Fh ;~ 01A2:7E9C
cs=0x1a2;eip=0x007e9e; 	T(MOV(dl, *(raddr(ds,bx))));	// 19739                  mov     dl, [bx] ;~ 01A2:7E9E
cs=0x1a2;eip=0x007ea0; 	T(MOV(dh, *(raddr(ds,bx+1))));	// 19740                  mov     dh, [bx+1] ;~ 01A2:7EA0
cs=0x1a2;eip=0x007ea3; 	T(MOV(ch, *(raddr(ds,bx+2))));	// 19741                  mov     ch, [bx+2] ;~ 01A2:7EA3
cs=0x1a2;eip=0x007ea6; 	T(ADD(bx, 3));	// 19742                  add     bx, 3 ;~ 01A2:7EA6
loc_17ea9:
	// 5691 
cs=0x1a2;eip=0x007ea9; 	T(MOV(al, *(raddr(ds,bx))));	// 19746                  mov     al, [bx] ;~ 01A2:7EA9
cs=0x1a2;eip=0x007eab; 	T(INC(bx));	// 19747                  inc     bx ;~ 01A2:7EAB
cs=0x1a2;eip=0x007eac; 	X(PUSH(bx));	// 19748                  push    bx ;~ 01A2:7EAC
cs=0x1a2;eip=0x007ead; 	T(bx = 0x346;);	// 19749                  mov     bx, 346h ;~ 01A2:7EAD
cs=0x1a2;eip=0x007eb0; 	X(PUSH(ax));	// 19750                  push    ax ;~ 01A2:7EB0
cs=0x1a2;eip=0x007eb1; 	X(PUSH(di));	// 19751                  push    di ;~ 01A2:7EB1
cs=0x1a2;eip=0x007eb2; 	T(MOV(ax, *(dw*)(raddr(ds,bx))));	// 19752                  mov     ax, [bx] ;~ 01A2:7EB2
cs=0x1a2;eip=0x007eb4; 	X(INC(*(dw*)(raddr(ds,bx))));	// 19753                  inc     word ptr [bx] ;~ 01A2:7EB4
cs=0x1a2;eip=0x007eb6; 	T(ADD(bx, 2));	// 19754                  add     bx, 2 ;~ 01A2:7EB6
cs=0x1a2;eip=0x007eb9; 	T(SHL(ax, 1));	// 19755                  shl     ax, 1 ;~ 01A2:7EB9
cs=0x1a2;eip=0x007ebb; 	T(di = ax;);	// 19756                  mov     di, ax ;~ 01A2:7EBB
cs=0x1a2;eip=0x007ebd; 	T(SHL(ax, 1));	// 19757                  shl     ax, 1 ;~ 01A2:7EBD
cs=0x1a2;eip=0x007ebf; 	T(SHL(ax, 1));	// 19758                  shl     ax, 1 ;~ 01A2:7EBF
cs=0x1a2;eip=0x007ec1; 	T(SHL(ax, 1));	// 19759                  shl     ax, 1 ;~ 01A2:7EC1
cs=0x1a2;eip=0x007ec3; 	T(ADD(bx, ax));	// 19760                  add     bx, ax ;~ 01A2:7EC3
cs=0x1a2;eip=0x007ec5; 	T(SUB(bx, di));	// 19761                  sub     bx, di ;~ 01A2:7EC5
cs=0x1a2;eip=0x007ec7; 	T(ax = word_1f8dc;);	// 19762                  mov     ax, ds:word_1F8DC ;~ 01A2:7EC7
cs=0x1a2;eip=0x007eca; 	X(MOV(*(dw*)(raddr(ds,bx)), ax));	// 19763                  mov     [bx], ax ;~ 01A2:7ECA
cs=0x1a2;eip=0x007ecc; 	T(ax = *(dw*)(((db*)&off_1f8c8)+2););	// 19764                  mov     ax, word ptr ds:off_1F8C8+2 ;~ 01A2:7ECC
cs=0x1a2;eip=0x007ecf; 	X(MOV(*(dw*)(raddr(ds,bx+2)), ax));	// 19765                  mov     [bx+2], ax ;~ 01A2:7ECF
cs=0x1a2;eip=0x007ed2; 	X(POP(di));	// 19766                  pop     di ;~ 01A2:7ED2
cs=0x1a2;eip=0x007ed3; 	X(POP(ax));	// 19767                  pop     ax ;~ 01A2:7ED3
cs=0x1a2;eip=0x007ed4; 	X(MOV(*(raddr(ds,bx+4)), dl));	// 19768                  mov     [bx+4], dl ;~ 01A2:7ED4
cs=0x1a2;eip=0x007ed7; 	X(MOV(*(raddr(ds,bx+5)), dh));	// 19769                  mov     [bx+5], dh ;~ 01A2:7ED7
cs=0x1a2;eip=0x007eda; 	X(MOV(*(raddr(ds,bx+6)), ch));	// 19770                  mov     [bx+6], ch ;~ 01A2:7EDA
cs=0x1a2;eip=0x007edd; 	X(MOV(*(raddr(ds,bx+7)), al));	// 19771                  mov     [bx+7], al ;~ 01A2:7EDD
cs=0x1a2;eip=0x007ee0; 	T(al = ah;);	// 19772                  mov     al, ah ;~ 01A2:7EE0
cs=0x1a2;eip=0x007ee2; 	T(CBW);	// 19773                  cbw ;~ 01A2:7EE2
cs=0x1a2;eip=0x007ee3; 	X(MOV(*(dw*)(raddr(ds,bx+8)), ax));	// 19774                  mov     [bx+8], ax ;~ 01A2:7EE3
cs=0x1a2;eip=0x007ee6; 	X(MOV(*(dw*)(raddr(ds,bx+0x0A)), es));	// 19775                  mov     word ptr [bx+0Ah], es ;~ 01A2:7EE6
cs=0x1a2;eip=0x007ee9; 	X(MOV(*(dw*)(raddr(ds,bx+0x0C)), di));	// 19776                  mov     [bx+0Ch], di ;~ 01A2:7EE9
cs=0x1a2;eip=0x007eec; 	X(POP(si));	// 19777                  pop     si ;~ 01A2:7EEC
cs=0x1a2;eip=0x007eed; 	J(RETN(0));	// 19778                  retn ;~ 01A2:7EED

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_17d4c: 	goto loc_17d4c;
        case m2c::kloc_17d94: 	goto loc_17d94;
        case m2c::kloc_17da8: 	goto loc_17da8;
        case m2c::kloc_17db0: 	goto loc_17db0;
        case m2c::kloc_17ddc: 	goto loc_17ddc;
        case m2c::kloc_17de1: 	goto loc_17de1;
        case m2c::kloc_17e1c: 	goto loc_17e1c;
        case m2c::kloc_17e53: 	goto loc_17e53;
        case m2c::kloc_17e5f: 	goto loc_17e5f;
        case m2c::kloc_17e75: 	goto loc_17e75;
        case m2c::kloc_17ea9: 	goto loc_17ea9;
        case m2c::klocret_17e1a: 	goto locret_17e1a;
        case m2c::klocret_17e1b: 	goto locret_17e1b;
        case m2c::kret_1a2_7d3f: 	goto ret_1a2_7d3f;
        case m2c::kret_1a2_7d52: 	goto ret_1a2_7d52;
        case m2c::kret_1a2_7d61: 	goto ret_1a2_7d61;
        case m2c::kret_1a2_7d70: 	goto ret_1a2_7d70;
        case m2c::kret_1a2_7d7f: 	goto ret_1a2_7d7f;
        case m2c::kret_1a2_7d88: 	goto ret_1a2_7d88;
        case m2c::kret_1a2_7d97: 	goto ret_1a2_7d97;
        case m2c::kret_1a2_7db6: 	goto ret_1a2_7db6;
        case m2c::kret_1a2_7e7f: 	goto ret_1a2_7e7f;
        case m2c::kret_1a2_7e99: 	goto ret_1a2_7e99;
        case m2c::kseg000_7d39_proc: 	goto seg000_7d39_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_17eee(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_17eee:
    _begin:
cs=0x1a2;eip=0x007eee; 	X(PUSH(ax));	// 19785                  push    ax ;~ 01A2:7EEE
cs=0x1a2;eip=0x007eef; 	T(LODSW);	// 19786                  lodsw ;~ 01A2:7EEF
cs=0x1a2;eip=0x007ef0; 	T(XCHG(al, ah));	// 19787                  xchg    al, ah ;~ 01A2:7EF0
cs=0x1a2;eip=0x007ef2; 	T(dx = ax;);	// 19788                  mov     dx, ax ;~ 01A2:7EF2
cs=0x1a2;eip=0x007ef4; 	X(POP(ax));	// 19789                  pop     ax ;~ 01A2:7EF4
cs=0x1a2;eip=0x007ef5; 	T(OR(dx, dx));	// 19790                  or      dx, dx ;~ 01A2:7EF5
cs=0x1a2;eip=0x007ef7; 	J(JNS(loc_17f00));	// 19791                  jns     short loc_17F00 ;~ 01A2:7EF7
cs=0x1a2;eip=0x007ef9; 	T(di = word_1f20c;);	// 19792                  mov     di, word_1F20C ;~ 01A2:7EF9
cs=0x1a2;eip=0x007efd; 	T(MOV(dx, *(dw*)(raddr(ds,di+4))));	// 19793                  mov     dx, [di+4] ;~ 01A2:7EFD
loc_17f00:
	// 5692 
cs=0x1a2;eip=0x007f00; 	X(PUSH(dx));	// 19796                  push    dx ;~ 01A2:7F00
cs=0x1a2;eip=0x007f01; 	T(al = 6;);	// 19797                  mov     al, 6 ;~ 01A2:7F01
cs=0x1a2;eip=0x007f03; 	J(CALL(sub_1413d,0));	// 19798                  call    sub_1413D ;~ 01A2:7F03
cs=0x1a2;eip=0x007f06; 	X(word_1f8dc = ax;);	// 19799                  mov     ds:word_1F8DC, ax ;~ 01A2:7F06
cs=0x1a2;eip=0x007f09; 	T(cx = ax;);	// 19800                  mov     cx, ax ;~ 01A2:7F09
cs=0x1a2;eip=0x007f0b; 	T(al = 9;);	// 19801                  mov     al, 9 ;~ 01A2:7F0B
cs=0x1a2;eip=0x007f0d; 	T(dx = 0x0FFFF;);	// 19802                  mov     dx, 0FFFFh ;~ 01A2:7F0D
cs=0x1a2;eip=0x007f10; 	J(CALL(sub_142a5,0));	// 19803                  call    sub_142A5 ;~ 01A2:7F10
cs=0x1a2;eip=0x007f13; 	X(word_1f6f4 = ax;);	// 19804                  mov     ds:word_1F6F4, ax ;~ 01A2:7F13
cs=0x1a2;eip=0x007f16; 	X(POP(dx));	// 19805                  pop     dx ;~ 01A2:7F16
cs=0x1a2;eip=0x007f17; 	X(PUSH(ax));	// 19806                  push    ax ;~ 01A2:7F17
cs=0x1a2;eip=0x007f18; 	J(CALL(sub_1407f,0));	// 19807                  call    sub_1407F ;~ 01A2:7F18
cs=0x1a2;eip=0x007f1b; 	X(PUSH(si));	// 19808                  push    si ;~ 01A2:7F1B
cs=0x1a2;eip=0x007f1c; 	T(si = *(dw*)(&off_1f194););	// 19809                  mov     si, word ptr off_1F194 ;~ 01A2:7F1C
cs=0x1a2;eip=0x007f20; 	T(es = seg_1f8f4;);	// 19810                  mov     es, ds:seg_1F8F4 ;~ 01A2:7F20
cs=0x1a2;eip=0x007f24; 	X(PUSH(si));	// 19812                  push    si ;~ 01A2:7F24
cs=0x1a2;eip=0x007f25; 	X(PUSH(di));	// 19813                  push    di ;~ 01A2:7F25
cs=0x1a2;eip=0x007f26; 	T(XCHG(si, di));	// 19814                  xchg    si, di ;~ 01A2:7F26
	// 19815                  rep movsb ;~ 01A2:7F28
cs=0x1a2;eip=0x007f28; 	X(	REP MOVSB);	// 19815                  rep movsb ;~ 01A2:7F28
cs=0x1a2;eip=0x007f2a; 	X(POP(di));	// 19816                  pop     di ;~ 01A2:7F2A
cs=0x1a2;eip=0x007f2b; 	X(POP(si));	// 19817                  pop     si ;~ 01A2:7F2B
cs=0x1a2;eip=0x007f2c; 	T(MOV(dx, *(dw*)(raddr(ds,si+6))));	// 19818                  mov     dx, [si+6] ;~ 01A2:7F2C
cs=0x1a2;eip=0x007f2f; 	T(ax = 2;);	// 19819                  mov     ax, 2 ;~ 01A2:7F2F
cs=0x1a2;eip=0x007f32; 	J(CALL(sub_1410e,0));	// 19820                  call    sub_1410E ;~ 01A2:7F32
cs=0x1a2;eip=0x007f35; 	X(POP(bx));	// 19821                  pop     bx ;~ 01A2:7F35
cs=0x1a2;eip=0x007f36; 	X(POP(ax));	// 19822                  pop     ax ;~ 01A2:7F36
cs=0x1a2;eip=0x007f37; 	X(*(dw*)(((db*)&off_1f8c8)+2) = si;);	// 19823                  mov     word ptr ds:off_1F8C8+2, si ;~ 01A2:7F37
cs=0x1a2;eip=0x007f3b; 	J(RETN(0));	// 19824                  retn ;~ 01A2:7F3B

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_17f00: 	goto loc_17f00;
        case m2c::ksub_17eee: 	goto sub_17eee;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_7f3c_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_7f3c_proc:
    _begin:
cs=0x1a2;eip=0x007f3c; 	T(di = word_1f1cc;);	// 19828                  mov     di, word_1F1CC ;~ 01A2:7F3C
cs=0x1a2;eip=0x007f40; 	X(MOV(*(raddr(ds,di)), 0));	// 19829                  mov     byte ptr [di], 0 ;~ 01A2:7F40
cs=0x1a2;eip=0x007f43; 	X(MOV(*(raddr(ds,di+2)), 0));	// 19830                  mov     byte ptr [di+2], 0 ;~ 01A2:7F43
cs=0x1a2;eip=0x007f47; 	X(MOV(*(raddr(ds,di+1)), 0));	// 19831                  mov     byte ptr [di+1], 0 ;~ 01A2:7F47
cs=0x1a2;eip=0x007f4b; 	T(bx = di;);	// 19832                  mov     bx, di ;~ 01A2:7F4B
cs=0x1a2;eip=0x007f4d; 	T(XOR(dh, dh));	// 19833                  xor     dh, dh ;~ 01A2:7F4D
cs=0x1a2;eip=0x007f4f; 	T(MOV(dl, *(raddr(ds,si))));	// 19834                  mov     dl, [si] ;~ 01A2:7F4F
cs=0x1a2;eip=0x007f51; 	T(INC(si));	// 19835                  inc     si ;~ 01A2:7F51
cs=0x1a2;eip=0x007f52; 	X(word_1f3a2 = dx;);	// 19836                  mov     ds:word_1F3A2, dx ;~ 01A2:7F52
cs=0x1a2;eip=0x007f56; 	X(PUSH(si));	// 19837                  push    si ;~ 01A2:7F56
cs=0x1a2;eip=0x007f57; 	T(ax = 3;);	// 19838                  mov     ax, 3 ;~ 01A2:7F57
cs=0x1a2;eip=0x007f5a; 	J(CALL(sub_1410e,0));	// 19839                  call    sub_1410E ;~ 01A2:7F5A
cs=0x1a2;eip=0x007f5d; 	X(POP(si));	// 19840                  pop     si ;~ 01A2:7F5D
cs=0x1a2;eip=0x007f5e; 	T(XOR(ah, ah));	// 19841                  xor     ah, ah ;~ 01A2:7F5E
cs=0x1a2;eip=0x007f60; 	T(LODSB);	// 19842                  lodsb ;~ 01A2:7F60
cs=0x1a2;eip=0x007f61; 	T(ADD(al, *(raddr(ds,di+1))));	// 19843                  add     al, [di+1] ;~ 01A2:7F61
cs=0x1a2;eip=0x007f64; 	X(word_1f702 = ax;);	// 19844                  mov     ds:word_1F702, ax ;~ 01A2:7F64
cs=0x1a2;eip=0x007f67; 	T(LODSB);	// 19845                  lodsb ;~ 01A2:7F67
cs=0x1a2;eip=0x007f68; 	T(ADD(al, *(raddr(ds,di+3))));	// 19846                  add     al, [di+3] ;~ 01A2:7F68
cs=0x1a2;eip=0x007f6b; 	X(word_1f704 = ax;);	// 19847                  mov     ds:word_1F704, ax ;~ 01A2:7F6B
cs=0x1a2;eip=0x007f6e; 	T(LODSB);	// 19848                  lodsb ;~ 01A2:7F6E
cs=0x1a2;eip=0x007f6f; 	X(word_1f706 = ax;);	// 19849                  mov     ds:word_1F706, ax ;~ 01A2:7F6F
cs=0x1a2;eip=0x007f72; 	T(MOV(al, *(raddr(ds,di+0x1E))));	// 19850                  mov     al, [di+1Eh] ;~ 01A2:7F72
cs=0x1a2;eip=0x007f75; 	X(MOV(*(raddr(ds,bx+2)), al));	// 19851                  mov     [bx+2], al ;~ 01A2:7F75
cs=0x1a2;eip=0x007f78; 	J(CALL(sub_115eb,0));	// 19852                  call    sub_115EB ;~ 01A2:7F78
cs=0x1a2;eip=0x007f7b; 	X(PUSH(si));	// 19853                  push    si ;~ 01A2:7F7B
cs=0x1a2;eip=0x007f7c; 	J(CALL(sub_1da60,0));	// 19854                  call    sub_1DA60 ;~ 01A2:7F7C
cs=0x1a2;eip=0x007f7f; 	J(JZ(loc_17ffc));	// 19855                  jz      short loc_17FFC ;~ 01A2:7F7F
loc_17f81:
	// 5693 
cs=0x1a2;eip=0x007f81; 	T(si = word_1f1cc;);	// 19858                  mov     si, word_1F1CC ;~ 01A2:7F81
cs=0x1a2;eip=0x007f85; 	T(es = *(dw*)(((db*)&off_1f194)+2););	// 19859                  mov     es, word ptr off_1F194+2 ;~ 01A2:7F85
cs=0x1a2;eip=0x007f89; 	T(di = word_1f198;);	// 19860                  mov     di, word_1F198 ;~ 01A2:7F89
cs=0x1a2;eip=0x007f8d; 	T(MOV(dl, *(raddr(ds,si))));	// 19861                  mov     dl, [si] ;~ 01A2:7F8D
cs=0x1a2;eip=0x007f8f; 	T(MOV(dh, *(raddr(ds,si+1))));	// 19862                  mov     dh, [si+1] ;~ 01A2:7F8F
cs=0x1a2;eip=0x007f92; 	T(MOV(ch, *(raddr(ds,si+2))));	// 19863                  mov     ch, [si+2] ;~ 01A2:7F92
cs=0x1a2;eip=0x007f95; 	T(bp = 0x3F;);	// 19864                  mov     bp, 3Fh ; '?' ;~ 01A2:7F95
cs=0x1a2;eip=0x007f98; 	J(CALL(sub_11cc1,0));	// 19865                  call    sub_11CC1 ;~ 01A2:7F98
cs=0x1a2;eip=0x007f9b; 	J(JNZ(loc_17fb0));	// 19866                  jnz     short loc_17FB0 ;~ 01A2:7F9B
cs=0x1a2;eip=0x007f9d; 	T(si = word_1f1cc;);	// 19867                  mov     si, word_1F1CC ;~ 01A2:7F9D
cs=0x1a2;eip=0x007fa1; 	T(MOV(al, *(raddr(ds,si+2))));	// 19868                  mov     al, [si+2] ;~ 01A2:7FA1
cs=0x1a2;eip=0x007fa4; 	T(INC(al));	// 19869                  inc     al ;~ 01A2:7FA4
cs=0x1a2;eip=0x007fa6; 	X(MOV(*(raddr(ds,si+2)), al));	// 19870                  mov     [si+2], al ;~ 01A2:7FA6
cs=0x1a2;eip=0x007fa9; 	T(CMP(al, 0x2C));	// 19871                  cmp     al, 2Ch ; ',' ;~ 01A2:7FA9
cs=0x1a2;eip=0x007fab; 	J(JNZ(loc_17f81));	// 19872                  jnz     short loc_17F81 ;~ 01A2:7FAB
cs=0x1a2;eip=0x007fad; 	J(return _group21(m2c::kloc_18206, _state););	// 19873                  jmp     loc_18206 ;~ 01A2:7FAD
loc_17fb0:
	// 5694 
cs=0x1a2;eip=0x007fb0; 	T(si = word_1f1cc;);	// 19877                  mov     si, word_1F1CC ;~ 01A2:7FB0
cs=0x1a2;eip=0x007fb4; 	X(PUSH(dx));	// 19878                  push    dx ;~ 01A2:7FB4
cs=0x1a2;eip=0x007fb5; 	X(PUSH(cx));	// 19879                  push    cx ;~ 01A2:7FB5
cs=0x1a2;eip=0x007fb6; 	T(dx = word_1f3a2;);	// 19880                  mov     dx, ds:word_1F3A2 ;~ 01A2:7FB6
cs=0x1a2;eip=0x007fba; 	T(ax = 3;);	// 19881                  mov     ax, 3 ;~ 01A2:7FBA
cs=0x1a2;eip=0x007fbd; 	J(CALL(sub_1410e,0));	// 19882                  call    sub_1410E ;~ 01A2:7FBD
cs=0x1a2;eip=0x007fc0; 	X(POP(cx));	// 19883                  pop     cx ;~ 01A2:7FC0
cs=0x1a2;eip=0x007fc1; 	X(POP(dx));	// 19884                  pop     dx ;~ 01A2:7FC1
cs=0x1a2;eip=0x007fc2; 	T(bx = di;);	// 19885                  mov     bx, di ;~ 01A2:7FC2
cs=0x1a2;eip=0x007fc4; 	T(XOR(ah, ah));	// 19886                  xor     ah, ah ;~ 01A2:7FC4
cs=0x1a2;eip=0x007fc6; 	T(al = dl;);	// 19887                  mov     al, dl ;~ 01A2:7FC6
cs=0x1a2;eip=0x007fc8; 	T(AND(dl, 7));	// 19888                  and     dl, 7 ;~ 01A2:7FC8
cs=0x1a2;eip=0x007fcb; 	X(MOV(*(raddr(ds,si)), dl));	// 19889                  mov     [si], dl ;~ 01A2:7FCB
cs=0x1a2;eip=0x007fcd; 	T(cl = 3;);	// 19890                  mov     cl, 3 ;~ 01A2:7FCD
cs=0x1a2;eip=0x007fcf; 	T(SHR(al, cl));	// 19891                  shr     al, cl ;~ 01A2:7FCF
cs=0x1a2;eip=0x007fd1; 	T(ADD(al, *(raddr(ds,bx+1))));	// 19892                  add     al, [bx+1] ;~ 01A2:7FD1
cs=0x1a2;eip=0x007fd4; 	X(word_1f702 = ax;);	// 19893                  mov     ds:word_1F702, ax ;~ 01A2:7FD4
cs=0x1a2;eip=0x007fd7; 	T(al = dh;);	// 19894                  mov     al, dh ;~ 01A2:7FD7
cs=0x1a2;eip=0x007fd9; 	T(AND(dh, 7));	// 19895                  and     dh, 7 ;~ 01A2:7FD9
cs=0x1a2;eip=0x007fdc; 	X(MOV(*(raddr(ds,si+1)), dh));	// 19896                  mov     [si+1], dh ;~ 01A2:7FDC
cs=0x1a2;eip=0x007fdf; 	T(SHR(al, cl));	// 19897                  shr     al, cl ;~ 01A2:7FDF
cs=0x1a2;eip=0x007fe1; 	T(ADD(al, *(raddr(ds,bx+3))));	// 19898                  add     al, [bx+3] ;~ 01A2:7FE1
cs=0x1a2;eip=0x007fe4; 	X(word_1f704 = ax;);	// 19899                  mov     ds:word_1F704, ax ;~ 01A2:7FE4
cs=0x1a2;eip=0x007fe7; 	T(al = ch;);	// 19900                  mov     al, ch ;~ 01A2:7FE7
cs=0x1a2;eip=0x007fe9; 	T(AND(ch, 7));	// 19901                  and     ch, 7 ;~ 01A2:7FE9
cs=0x1a2;eip=0x007fec; 	T(ADD(ch, *(raddr(ds,bx+0x1E))));	// 19902                  add     ch, [bx+1Eh] ;~ 01A2:7FEC
cs=0x1a2;eip=0x007fef; 	X(MOV(*(raddr(ds,si+2)), ch));	// 19903                  mov     [si+2], ch ;~ 01A2:7FEF
cs=0x1a2;eip=0x007ff2; 	T(INC(cl));	// 19904                  inc     cl ;~ 01A2:7FF2
cs=0x1a2;eip=0x007ff4; 	T(SHR(al, cl));	// 19905                  shr     al, cl ;~ 01A2:7FF4
cs=0x1a2;eip=0x007ff6; 	X(word_1f706 = ax;);	// 19906                  mov     ds:word_1F706, ax ;~ 01A2:7FF6
cs=0x1a2;eip=0x007ff9; 	J(CALL(sub_1da60,0));	// 19907                  call    sub_1DA60 ;~ 01A2:7FF9
loc_17ffc:
	// 5695 
cs=0x1a2;eip=0x007ffc; 	X(byte_1f780 = 1;);	// 19910                  mov     ds:byte_1F780, 1 ;~ 01A2:7FFC
cs=0x1a2;eip=0x008001; 	X(POP(si));	// 19911                  pop     si ;~ 01A2:8001
cs=0x1a2;eip=0x008002; 	J(RETN(0));	// 19912                  retn ;~ 01A2:8002
ret_1a2_8003:
	// 5696 
cs=0x1a2;eip=0x008003; 	J(CALL(sub_17d26,0));	// 19914                  call    sub_17D26 ;~ 01A2:8003
cs=0x1a2;eip=0x008006; 	T(bx = di;);	// 19915                  mov     bx, di ;~ 01A2:8006
cs=0x1a2;eip=0x008008; 	J(CALL(sub_17d26,0));	// 19916                  call    sub_17D26 ;~ 01A2:8008
cs=0x1a2;eip=0x00800b; 	T(bp = dx;);	// 19917                  mov     bp, dx ;~ 01A2:800B
cs=0x1a2;eip=0x00800d; 	T(MOV(ah, *(raddr(ds,bx+0x0A))));	// 19918                  mov     ah, [bx+0Ah] ;~ 01A2:800D
cs=0x1a2;eip=0x008010; 	T(OR(ah, ah));	// 19919                  or      ah, ah ;~ 01A2:8010
cs=0x1a2;eip=0x008012; 	J(JNS(loc_1801a));	// 19920                  jns     short loc_1801A ;~ 01A2:8012
cs=0x1a2;eip=0x008014; 	T(ah = 0x0FE;);	// 19921                  mov     ah, 0FEh ;~ 01A2:8014
cs=0x1a2;eip=0x008016; 	T(bx = word_1f1cc;);	// 19922                  mov     bx, word_1F1CC ;~ 01A2:8016
loc_1801a:
	// 5697 
cs=0x1a2;eip=0x00801a; 	T(MOV(dl, *(raddr(ds,bx))));	// 19925                  mov     dl, [bx] ;~ 01A2:801A
cs=0x1a2;eip=0x00801c; 	T(MOV(dh, *(raddr(ds,bx+1))));	// 19926                  mov     dh, [bx+1] ;~ 01A2:801C
cs=0x1a2;eip=0x00801f; 	T(MOV(ch, *(raddr(ds,bx+2))));	// 19927                  mov     ch, [bx+2] ;~ 01A2:801F
cs=0x1a2;eip=0x008022; 	J(JMP(loc_18035));	// 19928                  jmp     short loc_18035 ;~ 01A2:8022
loc_18024:
	// 5698 
cs=0x1a2;eip=0x008024; 	J(CALL(sub_17d26,0));	// 19932                  call    sub_17D26 ;~ 01A2:8024
cs=0x1a2;eip=0x008027; 	T(bp = dx;);	// 19933                  mov     bp, dx ;~ 01A2:8027
cs=0x1a2;eip=0x008029; 	T(MOV(ah, *(raddr(ds,si))));	// 19934                  mov     ah, [si] ;~ 01A2:8029
cs=0x1a2;eip=0x00802b; 	T(INC(si));	// 19935                  inc     si ;~ 01A2:802B
cs=0x1a2;eip=0x00802c; 	T(MOV(dl, *(raddr(ds,si))));	// 19936                  mov     dl, [si] ;~ 01A2:802C
cs=0x1a2;eip=0x00802e; 	T(INC(si));	// 19937                  inc     si ;~ 01A2:802E
cs=0x1a2;eip=0x00802f; 	T(MOV(dh, *(raddr(ds,si))));	// 19938                  mov     dh, [si] ;~ 01A2:802F
cs=0x1a2;eip=0x008031; 	T(INC(si));	// 19939                  inc     si ;~ 01A2:8031
cs=0x1a2;eip=0x008032; 	T(MOV(ch, *(raddr(ds,si))));	// 19940                  mov     ch, [si] ;~ 01A2:8032
cs=0x1a2;eip=0x008034; 	T(INC(si));	// 19941                  inc     si ;~ 01A2:8034
loc_18035:
	// 5699 
cs=0x1a2;eip=0x008035; 	X(word_1f8da = bp;);	// 19944                  mov     ds:word_1F8DA, bp ;~ 01A2:8035
cs=0x1a2;eip=0x008039; 	X(PUSH(dx));	// 19945                  push    dx ;~ 01A2:8039
cs=0x1a2;eip=0x00803a; 	X(PUSH(cx));	// 19946                  push    cx ;~ 01A2:803A
cs=0x1a2;eip=0x00803b; 	X(PUSH(ax));	// 19947                  push    ax ;~ 01A2:803B
cs=0x1a2;eip=0x00803c; 	X(PUSH(si));	// 19948                  push    si ;~ 01A2:803C
cs=0x1a2;eip=0x00803d; 	T(bx = di;);	// 19949                  mov     bx, di ;~ 01A2:803D
cs=0x1a2;eip=0x00803f; 	T(dx = bp;);	// 19950                  mov     dx, bp ;~ 01A2:803F
cs=0x1a2;eip=0x008041; 	J(CALL(sub_13f25,0));	// 19951                  call    sub_13F25 ;~ 01A2:8041
cs=0x1a2;eip=0x008044; 	T(bp = 0x0F;);	// 19952                  mov     bp, 0Fh ;~ 01A2:8044
cs=0x1a2;eip=0x008047; 	T(MOV(dx, *(dw*)(raddr(ds,di+6))));	// 19953                  mov     dx, [di+6] ;~ 01A2:8047
cs=0x1a2;eip=0x00804a; 	T(ax = 2;);	// 19954                  mov     ax, 2 ;~ 01A2:804A
cs=0x1a2;eip=0x00804d; 	J(CALL(sub_1410e,0));	// 19955                  call    sub_1410E ;~ 01A2:804D
cs=0x1a2;eip=0x008050; 	X(POP(si));	// 19956                  pop     si ;~ 01A2:8050
cs=0x1a2;eip=0x008051; 	X(POP(ax));	// 19957                  pop     ax ;~ 01A2:8051
cs=0x1a2;eip=0x008052; 	X(POP(cx));	// 19958                  pop     cx ;~ 01A2:8052
cs=0x1a2;eip=0x008053; 	X(POP(dx));	// 19959                  pop     dx ;~ 01A2:8053
cs=0x1a2;eip=0x008054; 	X(PUSH(si));	// 19960                  push    si ;~ 01A2:8054
cs=0x1a2;eip=0x008055; 	T(si = bx;);	// 19961                  mov     si, bx ;~ 01A2:8055
cs=0x1a2;eip=0x008057; 	X(PUSH(ax));	// 19962                  push    ax ;~ 01A2:8057
cs=0x1a2;eip=0x008058; 	X(PUSH(si));	// 19963                  push    si ;~ 01A2:8058
cs=0x1a2;eip=0x008059; 	X(PUSH(di));	// 19964                  push    di ;~ 01A2:8059
cs=0x1a2;eip=0x00805a; 	T(CMP(ah, 0x0FE));	// 19965                  cmp     ah, 0FEh ;~ 01A2:805A
cs=0x1a2;eip=0x00805d; 	J(JNZ(loc_18065));	// 19966                  jnz     short loc_18065 ;~ 01A2:805D
cs=0x1a2;eip=0x00805f; 	T(ah = *(db*)(&word_1f3a2););	// 19967                  mov     ah, byte ptr ds:word_1F3A2 ;~ 01A2:805F
cs=0x1a2;eip=0x008063; 	J(JMP(loc_1807f));	// 19968                  jmp     short loc_1807F ;~ 01A2:8063
loc_18065:
	// 5700 
cs=0x1a2;eip=0x008065; 	T(CMP(ah, *(db*)(&word_1f3a2)));	// 19972                  cmp     ah, byte ptr ds:word_1F3A2 ;~ 01A2:8065
cs=0x1a2;eip=0x008069; 	J(JZ(loc_1807f));	// 19973                  jz      short loc_1807F ;~ 01A2:8069
cs=0x1a2;eip=0x00806b; 	X(MOV(*(raddr(ds,si)), dl));	// 19974                  mov     [si], dl ;~ 01A2:806B
cs=0x1a2;eip=0x00806d; 	X(MOV(*(raddr(ds,si+1)), dh));	// 19975                  mov     [si+1], dh ;~ 01A2:806D
cs=0x1a2;eip=0x008070; 	X(MOV(*(raddr(ds,si+2)), ch));	// 19976                  mov     [si+2], ch ;~ 01A2:8070
cs=0x1a2;eip=0x008073; 	T(TEST(*(raddr(ds,si+3)), 8));	// 19977                  test    byte ptr [si+3], 8 ;~ 01A2:8073
cs=0x1a2;eip=0x008077; 	X(PUSHF);	// 19978                  pushf ;~ 01A2:8077
cs=0x1a2;eip=0x008078; 	X(OR(*(raddr(ds,si+3)), 8));	// 19979                  or      byte ptr [si+3], 8 ;~ 01A2:8078
cs=0x1a2;eip=0x00807c; 	X(POPF);	// 19980                  popf ;~ 01A2:807C
cs=0x1a2;eip=0x00807d; 	J(JMP(loc_1808e));	// 19981                  jmp     short loc_1808E ;~ 01A2:807D
loc_1807f:
	// 5701 
cs=0x1a2;eip=0x00807f; 	T(bp = 0x3F;);	// 19986                  mov     bp, 3Fh ; '?' ;~ 01A2:807F
cs=0x1a2;eip=0x008082; 	X(PUSH(ax));	// 19987                  push    ax ;~ 01A2:8082
cs=0x1a2;eip=0x008083; 	J(CALL(sub_11cc1,0));	// 19988                  call    sub_11CC1 ;~ 01A2:8083
cs=0x1a2;eip=0x008086; 	X(POP(ax));	// 19989                  pop     ax ;~ 01A2:8086
cs=0x1a2;eip=0x008087; 	J(JNZ(loc_1808e));	// 19990                  jnz     short loc_1808E ;~ 01A2:8087
cs=0x1a2;eip=0x008089; 	X(POP(di));	// 19991                  pop     di ;~ 01A2:8089
cs=0x1a2;eip=0x00808a; 	X(POP(si));	// 19992                  pop     si ;~ 01A2:808A
cs=0x1a2;eip=0x00808b; 	X(POP(ax));	// 19993                  pop     ax ;~ 01A2:808B
cs=0x1a2;eip=0x00808c; 	J(JMP(loc_180a0));	// 19994                  jmp     short loc_180A0 ;~ 01A2:808C
loc_1808e:
	// 5702 
cs=0x1a2;eip=0x00808e; 	T(cl = ah;);	// 19999                  mov     cl, ah ;~ 01A2:808E
cs=0x1a2;eip=0x008090; 	T(ax = word_1f8da;);	// 20000                  mov     ax, ds:word_1F8DA ;~ 01A2:8090
cs=0x1a2;eip=0x008093; 	J(CALL(sub_13de2,0));	// 20001                  call    sub_13DE2 ;~ 01A2:8093
cs=0x1a2;eip=0x008096; 	X(POP(di));	// 20002                  pop     di ;~ 01A2:8096
cs=0x1a2;eip=0x008097; 	X(POP(si));	// 20003                  pop     si ;~ 01A2:8097
cs=0x1a2;eip=0x008098; 	X(POP(ax));	// 20004                  pop     ax ;~ 01A2:8098
cs=0x1a2;eip=0x008099; 	J(JS(loc_180a0));	// 20005                  js      short loc_180A0 ;~ 01A2:8099
cs=0x1a2;eip=0x00809b; 	J(CALL(sub_151d8,0));	// 20006                  call    sub_151D8 ;~ 01A2:809B
cs=0x1a2;eip=0x00809e; 	X(POP(si));	// 20007                  pop     si ;~ 01A2:809E
cs=0x1a2;eip=0x00809f; 	J(RETN(0));	// 20008                  retn ;~ 01A2:809F
loc_180a0:
	// 5703 
cs=0x1a2;eip=0x0080a0; 	T(MOV(dx, *(dw*)(raddr(ds,si+4))));	// 20013                  mov     dx, [si+4] ;~ 01A2:80A0
cs=0x1a2;eip=0x0080a3; 	J(CALL(sub_13f25,0));	// 20014                  call    sub_13F25 ;~ 01A2:80A3
cs=0x1a2;eip=0x0080a6; 	J(CALL(sub_150d7,0));	// 20015                  call    sub_150D7 ;~ 01A2:80A6
cs=0x1a2;eip=0x0080a9; 	X(POP(si));	// 20016                  pop     si ;~ 01A2:80A9
cs=0x1a2;eip=0x0080aa; 	J(RETN(0));	// 20017                  retn ;~ 01A2:80AA
ret_1a2_80ab:
	// 5704 
cs=0x1a2;eip=0x0080ab; 	X(PUSH(ax));	// 20019                  push    ax ;~ 01A2:80AB
cs=0x1a2;eip=0x0080ac; 	T(LODSW);	// 20020                  lodsw ;~ 01A2:80AC
cs=0x1a2;eip=0x0080ad; 	T(XCHG(al, ah));	// 20021                  xchg    al, ah ;~ 01A2:80AD
cs=0x1a2;eip=0x0080af; 	T(bx = ax;);	// 20022                  mov     bx, ax ;~ 01A2:80AF
cs=0x1a2;eip=0x0080b1; 	X(POP(ax));	// 20023                  pop     ax ;~ 01A2:80B1
cs=0x1a2;eip=0x0080b2; 	T(TEST(bh, 0x80));	// 20024                  test    bh, 80h ;~ 01A2:80B2
cs=0x1a2;eip=0x0080b5; 	X(PUSHF);	// 20025                  pushf ;~ 01A2:80B5
cs=0x1a2;eip=0x0080b6; 	T(AND(bh, 0x7F));	// 20026                  and     bh, 7Fh ;~ 01A2:80B6
cs=0x1a2;eip=0x0080b9; 	X(POPF);	// 20027                  popf ;~ 01A2:80B9
cs=0x1a2;eip=0x0080ba; 	J(JNZ(loc_180c5));	// 20028                  jnz     short loc_180C5 ;~ 01A2:80BA
cs=0x1a2;eip=0x0080bc; 	T(LODSW);	// 20029                  lodsw ;~ 01A2:80BC
cs=0x1a2;eip=0x0080bd; 	T(XCHG(al, ah));	// 20030                  xchg    al, ah ;~ 01A2:80BD
cs=0x1a2;eip=0x0080bf; 	J(CALL(sub_180cc,0));	// 20031                  call    sub_180CC ;~ 01A2:80BF
cs=0x1a2;eip=0x0080c2; 	X(MOV(*(dw*)(raddr(ds,bx)), ax));	// 20032                  mov     [bx], ax ;~ 01A2:80C2
cs=0x1a2;eip=0x0080c4; 	J(RETN(0));	// 20033                  retn ;~ 01A2:80C4
loc_180c5:
	// 5705 
cs=0x1a2;eip=0x0080c5; 	T(LODSB);	// 20037                  lodsb ;~ 01A2:80C5
cs=0x1a2;eip=0x0080c6; 	J(CALL(sub_180cc,0));	// 20038                  call    sub_180CC ;~ 01A2:80C6
cs=0x1a2;eip=0x0080c9; 	X(MOV(*(raddr(ds,bx)), al));	// 20039                  mov     [bx], al ;~ 01A2:80C9
cs=0x1a2;eip=0x0080cb; 	J(RETN(0));	// 20040                  retn ;~ 01A2:80CB

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_17f81: 	goto loc_17f81;
        case m2c::kloc_17fb0: 	goto loc_17fb0;
        case m2c::kloc_17ffc: 	goto loc_17ffc;
        case m2c::kloc_1801a: 	goto loc_1801a;
        case m2c::kloc_18024: 	goto loc_18024;
        case m2c::kloc_18035: 	goto loc_18035;
        case m2c::kloc_18065: 	goto loc_18065;
        case m2c::kloc_1807f: 	goto loc_1807f;
        case m2c::kloc_1808e: 	goto loc_1808e;
        case m2c::kloc_180a0: 	goto loc_180a0;
        case m2c::kloc_180c5: 	goto loc_180c5;
        case m2c::kret_1a2_8003: 	goto ret_1a2_8003;
        case m2c::kret_1a2_80ab: 	goto ret_1a2_80ab;
        case m2c::kseg000_7f3c_proc: 	goto seg000_7f3c_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_180cc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_180cc:
    _begin:
cs=0x1a2;eip=0x0080cc; 	T(CMP(bx, 0x48E));	// 20047                  cmp     bx, 48Eh ;~ 01A2:80CC
cs=0x1a2;eip=0x0080d0; 	J(JZ(loc_180e1));	// 20048                  jz      short loc_180E1 ;~ 01A2:80D0
cs=0x1a2;eip=0x0080d2; 	T(CMP(bx, 0x864));	// 20049                  cmp     bx, 864h ;~ 01A2:80D2
cs=0x1a2;eip=0x0080d6; 	J(JZ(loc_180dd));	// 20050                  jz      short loc_180DD ;~ 01A2:80D6
cs=0x1a2;eip=0x0080d8; 	T(bx = 0x23A;);	// 20051                  mov     bx, 23Ah ;~ 01A2:80D8
cs=0x1a2;eip=0x0080db; 	J(JMP(locret_180e0));	// 20052                  jmp     short locret_180E0 ;~ 01A2:80DB
loc_180dd:
	// 5706 
cs=0x1a2;eip=0x0080dd; 	T(bx = 0x5A0;);	// 20056                  mov     bx, 5A0h ;~ 01A2:80DD
locret_180e0:
	// 5707 
cs=0x1a2;eip=0x0080e0; 	J(RETN(0));	// 20059                  retn ;~ 01A2:80E0
loc_180e1:
	// 5708 
cs=0x1a2;eip=0x0080e1; 	T(bx = 0x232;);	// 20063                  mov     bx, 232h ;~ 01A2:80E1
cs=0x1a2;eip=0x0080e4; 	J(RETN(0));	// 20064                  retn ;~ 01A2:80E4

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_180dd: 	goto loc_180dd;
        case m2c::kloc_180e1: 	goto loc_180e1;
        case m2c::klocret_180e0: 	goto locret_180e0;
        case m2c::ksub_180cc: 	goto sub_180cc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group21(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group21:
    _begin:
seg000_80e5_proc:
	// 20068 
cs=0x1a2;eip=0x0080e5; 	X(PUSH(ax));	// 20068                  push    ax ;~ 01A2:80E5
cs=0x1a2;eip=0x0080e6; 	T(LODSW);	// 20069                  lodsw ;~ 01A2:80E6
cs=0x1a2;eip=0x0080e7; 	T(XCHG(al, ah));	// 20070                  xchg    al, ah ;~ 01A2:80E7
cs=0x1a2;eip=0x0080e9; 	T(bx = ax;);	// 20071                  mov     bx, ax ;~ 01A2:80E9
cs=0x1a2;eip=0x0080eb; 	X(POP(ax));	// 20072                  pop     ax ;~ 01A2:80EB
cs=0x1a2;eip=0x0080ec; 	T(TEST(bh, 0x80));	// 20073                  test    bh, 80h ;~ 01A2:80EC
cs=0x1a2;eip=0x0080ef; 	X(PUSHF);	// 20074                  pushf ;~ 01A2:80EF
cs=0x1a2;eip=0x0080f0; 	T(AND(bh, 0x7F));	// 20075                  and     bh, 7Fh ;~ 01A2:80F0
cs=0x1a2;eip=0x0080f3; 	X(POPF);	// 20076                  popf ;~ 01A2:80F3
cs=0x1a2;eip=0x0080f4; 	J(JNZ(loc_180ff));	// 20077                  jnz     short loc_180FF ;~ 01A2:80F4
cs=0x1a2;eip=0x0080f6; 	T(LODSW);	// 20078                  lodsw ;~ 01A2:80F6
cs=0x1a2;eip=0x0080f7; 	T(XCHG(al, ah));	// 20079                  xchg    al, ah ;~ 01A2:80F7
cs=0x1a2;eip=0x0080f9; 	J(CALL(sub_180cc,0));	// 20080                  call    sub_180CC ;~ 01A2:80F9
cs=0x1a2;eip=0x0080fc; 	X(ADD(*(dw*)(raddr(ds,bx)), ax));	// 20081                  add     [bx], ax ;~ 01A2:80FC
cs=0x1a2;eip=0x0080fe; 	J(RETN(0));	// 20082                  retn ;~ 01A2:80FE
loc_180ff:
	// 5709 
cs=0x1a2;eip=0x0080ff; 	T(LODSB);	// 20086                  lodsb ;~ 01A2:80FF
cs=0x1a2;eip=0x008100; 	J(CALL(sub_180cc,0));	// 20087                  call    sub_180CC ;~ 01A2:8100
cs=0x1a2;eip=0x008103; 	X(ADD(*(raddr(ds,bx)), al));	// 20088                  add     [bx], al ;~ 01A2:8103
cs=0x1a2;eip=0x008105; 	J(RETN(0));	// 20089                  retn ;~ 01A2:8105
ret_1a2_8106:
	// 5710 
cs=0x1a2;eip=0x008106; 	T(XOR(ax, ax));	// 20091                  xor     ax, ax ;~ 01A2:8106
cs=0x1a2;eip=0x008108; 	T(XOR(cx, cx));	// 20092                  xor     cx, cx ;~ 01A2:8108
cs=0x1a2;eip=0x00810a; 	X(PUSH(ax));	// 20093                  push    ax ;~ 01A2:810A
cs=0x1a2;eip=0x00810b; 	T(LODSW);	// 20094                  lodsw ;~ 01A2:810B
cs=0x1a2;eip=0x00810c; 	T(XCHG(al, ah));	// 20095                  xchg    al, ah ;~ 01A2:810C
cs=0x1a2;eip=0x00810e; 	T(bx = ax;);	// 20096                  mov     bx, ax ;~ 01A2:810E
cs=0x1a2;eip=0x008110; 	X(POP(ax));	// 20097                  pop     ax ;~ 01A2:8110
cs=0x1a2;eip=0x008111; 	T(TEST(bh, 0x80));	// 20098                  test    bh, 80h ;~ 01A2:8111
cs=0x1a2;eip=0x008114; 	X(PUSHF);	// 20099                  pushf ;~ 01A2:8114
cs=0x1a2;eip=0x008115; 	T(AND(bh, 0x7F));	// 20100                  and     bh, 7Fh ;~ 01A2:8115
cs=0x1a2;eip=0x008118; 	X(POPF);	// 20101                  popf ;~ 01A2:8118
cs=0x1a2;eip=0x008119; 	J(JNZ(loc_18125));	// 20102                  jnz     short loc_18125 ;~ 01A2:8119
cs=0x1a2;eip=0x00811b; 	T(LODSW);	// 20103                  lodsw ;~ 01A2:811B
cs=0x1a2;eip=0x00811c; 	T(XCHG(al, ah));	// 20104                  xchg    al, ah ;~ 01A2:811C
cs=0x1a2;eip=0x00811e; 	J(CALL(sub_180cc,0));	// 20105                  call    sub_180CC ;~ 01A2:811E
cs=0x1a2;eip=0x008121; 	T(MOV(cx, *(dw*)(raddr(ds,bx))));	// 20106                  mov     cx, [bx] ;~ 01A2:8121
cs=0x1a2;eip=0x008123; 	J(JMP(loc_1812b));	// 20107                  jmp     short loc_1812B ;~ 01A2:8123
loc_18125:
	// 5711 
cs=0x1a2;eip=0x008125; 	T(LODSB);	// 20111                  lodsb ;~ 01A2:8125
cs=0x1a2;eip=0x008126; 	J(CALL(sub_180cc,0));	// 20112                  call    sub_180CC ;~ 01A2:8126
cs=0x1a2;eip=0x008129; 	T(MOV(cl, *(raddr(ds,bx))));	// 20113                  mov     cl, [bx] ;~ 01A2:8129
loc_1812b:
	// 5712 
cs=0x1a2;eip=0x00812b; 	T(MOV(dl, *(raddr(ds,si))));	// 20116                  mov     dl, [si] ;~ 01A2:812B
cs=0x1a2;eip=0x00812d; 	T(INC(si));	// 20117                  inc     si ;~ 01A2:812D
cs=0x1a2;eip=0x00812e; 	J(JMP(loc_1815c));	// 20118                  jmp     short loc_1815C ;~ 01A2:812E
ret_1a2_8130:
	// 5713 
cs=0x1a2;eip=0x008130; 	T(XOR(ah, ah));	// 20120                  xor     ah, ah ;~ 01A2:8130
cs=0x1a2;eip=0x008132; 	T(LODSB);	// 20121                  lodsb ;~ 01A2:8132
cs=0x1a2;eip=0x008133; 	T(di = 0x611;);	// 20122                  mov     di, 611h ;~ 01A2:8133
cs=0x1a2;eip=0x008136; 	T(ADD(di, ax));	// 20123                  add     di, ax ;~ 01A2:8136
cs=0x1a2;eip=0x008138; 	T(LODSB);	// 20124                  lodsb ;~ 01A2:8138
cs=0x1a2;eip=0x008139; 	X(MOV(*(raddr(ds,di)), al));	// 20125                  mov     [di], al ;~ 01A2:8139
cs=0x1a2;eip=0x00813b; 	J(RETN(0));	// 20126                  retn ;~ 01A2:813B
ret_1a2_813c:
	// 5714 
cs=0x1a2;eip=0x00813c; 	T(XOR(ah, ah));	// 20128                  xor     ah, ah ;~ 01A2:813C
cs=0x1a2;eip=0x00813e; 	T(LODSB);	// 20129                  lodsb ;~ 01A2:813E
cs=0x1a2;eip=0x00813f; 	T(di = 0x611;);	// 20130                  mov     di, 611h ;~ 01A2:813F
cs=0x1a2;eip=0x008142; 	T(ADD(di, ax));	// 20131                  add     di, ax ;~ 01A2:8142
cs=0x1a2;eip=0x008144; 	T(LODSB);	// 20132                  lodsb ;~ 01A2:8144
cs=0x1a2;eip=0x008145; 	X(ADD(*(raddr(ds,di)), al));	// 20133                  add     [di], al ;~ 01A2:8145
cs=0x1a2;eip=0x008147; 	J(RETN(0));	// 20134                  retn ;~ 01A2:8147
ret_1a2_8148:
	// 5715 
cs=0x1a2;eip=0x008148; 	T(XOR(ax, ax));	// 20136                  xor     ax, ax ;~ 01A2:8148
cs=0x1a2;eip=0x00814a; 	T(XOR(cx, cx));	// 20137                  xor     cx, cx ;~ 01A2:814A
cs=0x1a2;eip=0x00814c; 	T(XOR(bh, bh));	// 20138                  xor     bh, bh ;~ 01A2:814C
cs=0x1a2;eip=0x00814e; 	T(MOV(bl, *(raddr(ds,si))));	// 20139                  mov     bl, [si] ;~ 01A2:814E
cs=0x1a2;eip=0x008150; 	T(INC(si));	// 20140                  inc     si ;~ 01A2:8150
cs=0x1a2;eip=0x008151; 	T(di = 0x611;);	// 20141                  mov     di, 611h ;~ 01A2:8151
cs=0x1a2;eip=0x008154; 	T(ADD(di, bx));	// 20142                  add     di, bx ;~ 01A2:8154
cs=0x1a2;eip=0x008156; 	T(MOV(cl, *(raddr(ds,di))));	// 20143                  mov     cl, [di] ;~ 01A2:8156
cs=0x1a2;eip=0x008158; 	T(MOV(dl, *(raddr(ds,si))));	// 20144                  mov     dl, [si] ;~ 01A2:8158
cs=0x1a2;eip=0x00815a; 	T(INC(si));	// 20145                  inc     si ;~ 01A2:815A
cs=0x1a2;eip=0x00815b; 	T(LODSB);	// 20146                  lodsb ;~ 01A2:815B
loc_1815c:
	// 5716 
cs=0x1a2;eip=0x00815c; 	T(OR(dl, dl));	// 20149                  or      dl, dl ;~ 01A2:815C
cs=0x1a2;eip=0x00815e; 	J(JZ(loc_1816f));	// 20150                  jz      short loc_1816F ;~ 01A2:815E
cs=0x1a2;eip=0x008160; 	T(DEC(dl));	// 20151                  dec     dl ;~ 01A2:8160
cs=0x1a2;eip=0x008162; 	J(JZ(loc_18175));	// 20152                  jz      short loc_18175 ;~ 01A2:8162
cs=0x1a2;eip=0x008164; 	T(DEC(dl));	// 20153                  dec     dl ;~ 01A2:8164
cs=0x1a2;eip=0x008166; 	J(JZ(loc_1817b));	// 20154                  jz      short loc_1817B ;~ 01A2:8166
cs=0x1a2;eip=0x008168; 	T(CMP(cx, ax));	// 20155                  cmp     cx, ax ;~ 01A2:8168
cs=0x1a2;eip=0x00816a; 	J(JZ(loc_1817f));	// 20156                  jz      short loc_1817F ;~ 01A2:816A
loc_1816c:
	// 5717 
cs=0x1a2;eip=0x00816c; 	J(return seg000_78d5_proc(m2c::kloc_17caa, _state););	// 20160                  jmp     loc_17CAA ;~ 01A2:816C
loc_1816f:
	// 5718 
cs=0x1a2;eip=0x00816f; 	T(CMP(cx, ax));	// 20164                  cmp     cx, ax ;~ 01A2:816F
cs=0x1a2;eip=0x008171; 	J(JG(loc_1816c));	// 20165                  jg      short loc_1816C ;~ 01A2:8171
cs=0x1a2;eip=0x008173; 	J(JMP(loc_1817f));	// 20166                  jmp     short loc_1817F ;~ 01A2:8173
loc_18175:
	// 5719 
cs=0x1a2;eip=0x008175; 	T(CMP(cx, ax));	// 20170                  cmp     cx, ax ;~ 01A2:8175
cs=0x1a2;eip=0x008177; 	J(JL(loc_1816c));	// 20171                  jl      short loc_1816C ;~ 01A2:8177
cs=0x1a2;eip=0x008179; 	J(JMP(loc_1817f));	// 20172                  jmp     short loc_1817F ;~ 01A2:8179
loc_1817b:
	// 5720 
cs=0x1a2;eip=0x00817b; 	T(CMP(cx, ax));	// 20176                  cmp     cx, ax ;~ 01A2:817B
cs=0x1a2;eip=0x00817d; 	J(JZ(loc_1816c));	// 20177                  jz      short loc_1816C ;~ 01A2:817D
loc_1817f:
	// 5721 
cs=0x1a2;eip=0x00817f; 	X(byte_1f775 = 0;);	// 20181                  mov     ds:byte_1F775, 0 ;~ 01A2:817F
cs=0x1a2;eip=0x008184; 	J(RETN(0));	// 20182                  retn ;~ 01A2:8184
ret_1a2_8185:
	// 5722 
cs=0x1a2;eip=0x008185; 	T(XOR(ah, ah));	// 20184                  xor     ah, ah ;~ 01A2:8185
cs=0x1a2;eip=0x008187; 	T(LODSB);	// 20185                  lodsb ;~ 01A2:8187
cs=0x1a2;eip=0x008188; 	T(di = 0x611;);	// 20186                  mov     di, 611h ;~ 01A2:8188
cs=0x1a2;eip=0x00818b; 	T(ADD(di, ax));	// 20187                  add     di, ax ;~ 01A2:818B
cs=0x1a2;eip=0x00818d; 	T(MOV(al, *(raddr(ds,di))));	// 20188                  mov     al, [di] ;~ 01A2:818D
cs=0x1a2;eip=0x00818f; 	X(byte_1f874 = al;);	// 20189                  mov     ds:byte_1F874, al ;~ 01A2:818F
cs=0x1a2;eip=0x008192; 	J(RETN(0));	// 20190                  retn ;~ 01A2:8192
ret_1a2_8193:
	// 5723 
cs=0x1a2;eip=0x008193; 	T(XOR(ah, ah));	// 20192                  xor     ah, ah ;~ 01A2:8193
cs=0x1a2;eip=0x008195; 	T(LODSB);	// 20193                  lodsb ;~ 01A2:8195
cs=0x1a2;eip=0x008196; 	T(dx = word_1f1ce;);	// 20194                  mov     dx, word_1F1CE ;~ 01A2:8196
cs=0x1a2;eip=0x00819a; 	X(PUSH(si));	// 20195                  push    si ;~ 01A2:819A
cs=0x1a2;eip=0x00819b; 	T(si = word_1f1f4;);	// 20196                  mov     si, word_1F1F4 ;~ 01A2:819B
cs=0x1a2;eip=0x00819f; 	X(MOV(*(dw*)(raddr(ds,si)), 0x4013));	// 20197                  mov     word ptr [si], 4013h ;~ 01A2:819F
cs=0x1a2;eip=0x0081a3; 	T(ADD(si, 2));	// 20198                  add     si, 2 ;~ 01A2:81A3
cs=0x1a2;eip=0x0081a6; 	X(MOV(*(dw*)(raddr(ds,si)), dx));	// 20199                  mov     [si], dx ;~ 01A2:81A6
cs=0x1a2;eip=0x0081a8; 	T(ADD(si, 2));	// 20200                  add     si, 2 ;~ 01A2:81A8
cs=0x1a2;eip=0x0081ab; 	X(MOV(*(dw*)(raddr(ds,si)), ax));	// 20201                  mov     [si], ax ;~ 01A2:81AB
cs=0x1a2;eip=0x0081ad; 	T(ADD(si, 2));	// 20202                  add     si, 2 ;~ 01A2:81AD
cs=0x1a2;eip=0x0081b0; 	X(word_1f1f4 = si;);	// 20203                  mov     word_1F1F4, si ;~ 01A2:81B0
cs=0x1a2;eip=0x0081b4; 	X(INC(word_1f396));	// 20204                  inc     ds:word_1F396 ;~ 01A2:81B4
cs=0x1a2;eip=0x0081b8; 	X(POP(si));	// 20205                  pop     si ;~ 01A2:81B8
cs=0x1a2;eip=0x0081b9; 	J(RETN(0));	// 20206                  retn ;~ 01A2:81B9
ret_1a2_81ba:
	// 5724 
cs=0x1a2;eip=0x0081ba; 	T(LODSB);	// 20208                  lodsb ;~ 01A2:81BA
cs=0x1a2;eip=0x0081bb; 	X(byte_1f835 = al;);	// 20209                  mov     ds:byte_1F835, al ;~ 01A2:81BB
cs=0x1a2;eip=0x0081be; 	T(LODSB);	// 20210                  lodsb ;~ 01A2:81BE
cs=0x1a2;eip=0x0081bf; 	X(*(db*)(((db*)&off_1f831)+3) = al;);	// 20211                  mov     byte ptr ds:off_1F831+3, al ;~ 01A2:81BF
cs=0x1a2;eip=0x0081c2; 	J(RETN(0));	// 20212                  retn ;~ 01A2:81C2
ret_1a2_81c3:
	// 5725 
cs=0x1a2;eip=0x0081c3; 	T(LODSW);	// 20214                  lodsw ;~ 01A2:81C3
cs=0x1a2;eip=0x0081c4; 	T(XCHG(al, ah));	// 20215                  xchg    al, ah ;~ 01A2:81C4
cs=0x1a2;eip=0x0081c6; 	J({;});	// 20216                  jmp     short $+2 ;~ 01A2:81C6
sub_181c8:
	// 20221 
cs=0x1a2;eip=0x0081c8; 	T(CMP(byte_1f7c2, 0));	// 20223                  cmp     ds:byte_1F7C2, 0 ;~ 01A2:81C8
cs=0x1a2;eip=0x0081cd; 	J(JNZ(locret_18205));	// 20224                  jnz     short locret_18205 ;~ 01A2:81CD
cs=0x1a2;eip=0x0081cf; 	T(dx = word_1f3aa;);	// 20225                  mov     dx, ds:word_1F3AA ;~ 01A2:81CF
cs=0x1a2;eip=0x0081d3; 	X(PUSH(ax));	// 20226                  push    ax ;~ 01A2:81D3
cs=0x1a2;eip=0x0081d4; 	T(OR(ax, ax));	// 20227                  or      ax, ax ;~ 01A2:81D4
cs=0x1a2;eip=0x0081d6; 	J(JNS(loc_181e2));	// 20228                  jns     short loc_181E2 ;~ 01A2:81D6
cs=0x1a2;eip=0x0081d8; 	X(PUSH(ax));	// 20229                  push    ax ;~ 01A2:81D8
cs=0x1a2;eip=0x0081d9; 	T(ax = 0x1B;);	// 20230                  mov     ax, 1Bh ;~ 01A2:81D9
cs=0x1a2;eip=0x0081dc; 	J(CALL(sub_1156c,0));	// 20231                  call    sub_1156C ;~ 01A2:81DC
cs=0x1a2;eip=0x0081df; 	X(POP(ax));	// 20232                  pop     ax ;~ 01A2:81DF
cs=0x1a2;eip=0x0081e0; 	J(JMP(loc_181ea));	// 20233                  jmp     short loc_181EA ;~ 01A2:81E0
loc_181e2:
	// 5726 
cs=0x1a2;eip=0x0081e2; 	X(PUSH(ax));	// 20237                  push    ax ;~ 01A2:81E2
cs=0x1a2;eip=0x0081e3; 	T(ax = 0x19;);	// 20238                  mov     ax, 19h ;~ 01A2:81E3
cs=0x1a2;eip=0x0081e6; 	J(CALL(sub_1156c,0));	// 20239                  call    sub_1156C ;~ 01A2:81E6
cs=0x1a2;eip=0x0081e9; 	X(POP(ax));	// 20240                  pop     ax ;~ 01A2:81E9
loc_181ea:
	// 5727 
cs=0x1a2;eip=0x0081ea; 	X(POP(ax));	// 20243                  pop     ax ;~ 01A2:81EA
cs=0x1a2;eip=0x0081eb; 	T(ADD(dx, ax));	// 20244                  add     dx, ax ;~ 01A2:81EB
cs=0x1a2;eip=0x0081ed; 	J(JS(loc_18206));	// 20245                  js      short loc_18206 ;~ 01A2:81ED
cs=0x1a2;eip=0x0081ef; 	J(JZ(loc_18206));	// 20246                  jz      short loc_18206 ;~ 01A2:81EF
cs=0x1a2;eip=0x0081f1; 	T(ax = word_1f870;);	// 20247                  mov     ax, ds:word_1F870 ;~ 01A2:81F1
cs=0x1a2;eip=0x0081f4; 	T(CMP(dx, ax));	// 20248                  cmp     dx, ax ;~ 01A2:81F4
cs=0x1a2;eip=0x0081f6; 	J(JLE(loc_181fc));	// 20249                  jle     short loc_181FC ;~ 01A2:81F6
cs=0x1a2;eip=0x0081f8; 	T(dx = word_1f870;);	// 20250                  mov     dx, ds:word_1F870 ;~ 01A2:81F8
loc_181fc:
	// 5728 
cs=0x1a2;eip=0x0081fc; 	X(word_1f3aa = dx;);	// 20253                  mov     ds:word_1F3AA, dx ;~ 01A2:81FC
cs=0x1a2;eip=0x008200; 	X(byte_1f76f = 1;);	// 20254                  mov     ds:byte_1F76F, 1 ;~ 01A2:8200
locret_18205:
	// 5729 
cs=0x1a2;eip=0x008205; 	J(RETN(0));	// 20257                  retn ;~ 01A2:8205
loc_18206:
	// 5730 
cs=0x1a2;eip=0x008206; 	X(PUSH(ax));	// 20262                  push    ax ;~ 01A2:8206
cs=0x1a2;eip=0x008207; 	T(ax = 0x1C;);	// 20263                  mov     ax, 1Ch ;~ 01A2:8207
cs=0x1a2;eip=0x00820a; 	J(CALL(sub_1156c,0));	// 20264                  call    sub_1156C ;~ 01A2:820A
cs=0x1a2;eip=0x00820d; 	X(POP(ax));	// 20265                  pop     ax ;~ 01A2:820D
cs=0x1a2;eip=0x00820e; 	J(CALL(sub_1d445,0));	// 20266                  call    sub_1D445 ;~ 01A2:820E
cs=0x1a2;eip=0x008211; 	X(word_1f3aa = 0;);	// 20267                  mov     ds:word_1F3AA, 0 ;~ 01A2:8211
cs=0x1a2;eip=0x008217; 	T(CMP(byte_1f76d, 0));	// 20268                  cmp     ds:byte_1F76D, 0 ;~ 01A2:8217
cs=0x1a2;eip=0x00821c; 	J(JNZ(loc_18227));	// 20269                  jnz     short loc_18227 ;~ 01A2:821C
cs=0x1a2;eip=0x00821e; 	J(CALL(sub_1d8c3,0));	// 20270                  call    sub_1D8C3 ;~ 01A2:821E
cs=0x1a2;eip=0x008221; 	J(CALL(sub_1d445,0));	// 20271                  call    sub_1D445 ;~ 01A2:8221
cs=0x1a2;eip=0x008224; 	J(CALL(sub_1d8c3,0));	// 20272                  call    sub_1D8C3 ;~ 01A2:8224
loc_18227:
	// 5731 
cs=0x1a2;eip=0x008227; 	J(CALL(sub_19d8e,0));	// 20275                  call    sub_19D8E ;~ 01A2:8227
cs=0x1a2;eip=0x00822a; 	T(ax = 0x400;);	// 20276                  mov     ax, 400h ;~ 01A2:822A
cs=0x1a2;eip=0x00822d; 	X(word_1f72c = ax;);	// 20277                  mov     ds:word_1F72C, ax ;~ 01A2:822D
loc_18230:
	// 5732 
cs=0x1a2;eip=0x008230; 	X(DEC(word_1f72c));	// 20280                  dec     ds:word_1F72C ;~ 01A2:8230
cs=0x1a2;eip=0x008234; 	J(JZ(loc_18240));	// 20281                  jz      short loc_18240 ;~ 01A2:8234
cs=0x1a2;eip=0x008236; 	J(CALL(sub_11043,0));	// 20282                  call    sub_11043 ;~ 01A2:8236
cs=0x1a2;eip=0x008239; 	T(CMP(byte_1f885, 0));	// 20283                  cmp     ds:byte_1F885, 0 ;~ 01A2:8239
cs=0x1a2;eip=0x00823e; 	J(JZ(loc_18230));	// 20284                  jz      short loc_18230 ;~ 01A2:823E
loc_18240:
	// 5733 
cs=0x1a2;eip=0x008240; 	J(CALL(nullsub_6,0));	// 20287                  call    nullsub_6 ;~ 01A2:8240
cs=0x1a2;eip=0x008243; 	J(CALL(sub_115eb,0));	// 20288                  call    sub_115EB ;~ 01A2:8243
cs=0x1a2;eip=0x008246; 	J(CALL(sub_1c75a,0));	// 20289                  call    sub_1C75A ;~ 01A2:8246
cs=0x1a2;eip=0x008249; 	J(return start(m2c::kloc_10071, _state););	// 20290                  jmp     loc_10071 ;~ 01A2:8249

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_180ff: 	goto loc_180ff;
        case m2c::kloc_18125: 	goto loc_18125;
        case m2c::kloc_1812b: 	goto loc_1812b;
        case m2c::kloc_1815c: 	goto loc_1815c;
        case m2c::kloc_1816c: 	goto loc_1816c;
        case m2c::kloc_1816f: 	goto loc_1816f;
        case m2c::kloc_18175: 	goto loc_18175;
        case m2c::kloc_1817b: 	goto loc_1817b;
        case m2c::kloc_1817f: 	goto loc_1817f;
        case m2c::kloc_181e2: 	goto loc_181e2;
        case m2c::kloc_181ea: 	goto loc_181ea;
        case m2c::kloc_181fc: 	goto loc_181fc;
        case m2c::kloc_18206: 	goto loc_18206;
        case m2c::kloc_18227: 	goto loc_18227;
        case m2c::kloc_18230: 	goto loc_18230;
        case m2c::kloc_18240: 	goto loc_18240;
        case m2c::klocret_18205: 	goto locret_18205;
        case m2c::kret_1a2_8106: 	goto ret_1a2_8106;
        case m2c::kret_1a2_8130: 	goto ret_1a2_8130;
        case m2c::kret_1a2_813c: 	goto ret_1a2_813c;
        case m2c::kret_1a2_8148: 	goto ret_1a2_8148;
        case m2c::kret_1a2_8185: 	goto ret_1a2_8185;
        case m2c::kret_1a2_8193: 	goto ret_1a2_8193;
        case m2c::kret_1a2_81ba: 	goto ret_1a2_81ba;
        case m2c::kret_1a2_81c3: 	goto ret_1a2_81c3;
        case m2c::kseg000_80e5_proc: 	goto seg000_80e5_proc;
        case m2c::ksub_181c8: 	goto sub_181c8;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group22(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group22:
    _begin:
seg000_824c_proc:
	// 20294 
cs=0x1a2;eip=0x00824c; 	J(CALL(sub_17d26,0));	// 20294                  call    sub_17D26 ;~ 01A2:824C
cs=0x1a2;eip=0x00824f; 	J(JNZ(loc_18257));	// 20295                  jnz     short loc_18257 ;~ 01A2:824F
loc_18251:
	// 5734 
cs=0x1a2;eip=0x008251; 	X(byte_1f775 = 0;);	// 20298                  mov     ds:byte_1F775, 0 ;~ 01A2:8251
cs=0x1a2;eip=0x008256; 	J(RETN(0));	// 20299                  retn ;~ 01A2:8256
loc_18257:
	// 5735 
cs=0x1a2;eip=0x008257; 	J(return seg000_78d5_proc(m2c::kloc_17caa, _state););	// 20304                  jmp     loc_17CAA ;~ 01A2:8257
ret_1a2_825a:
	// 5736 
cs=0x1a2;eip=0x00825a; 	T(MOV(cl, *(raddr(ds,si))));	// 20306                  mov     cl, [si] ;~ 01A2:825A
cs=0x1a2;eip=0x00825c; 	T(INC(si));	// 20307                  inc     si ;~ 01A2:825C
cs=0x1a2;eip=0x00825d; 	T(dl = 1;);	// 20308                  mov     dl, 1 ;~ 01A2:825D
cs=0x1a2;eip=0x00825f; 	T(OR(cl, cl));	// 20309                  or      cl, cl ;~ 01A2:825F
cs=0x1a2;eip=0x008261; 	J(JZ(loc_18265));	// 20310                  jz      short loc_18265 ;~ 01A2:8261
cs=0x1a2;eip=0x008263; 	T(SHL(dl, cl));	// 20311                  shl     dl, cl ;~ 01A2:8263
loc_18265:
	// 5737 
cs=0x1a2;eip=0x008265; 	T(TEST(byte_1f81b, dl));	// 20314                  test    ds:byte_1F81B, dl ;~ 01A2:8265
cs=0x1a2;eip=0x008269; 	J(JNZ(loc_18257));	// 20315                  jnz     short loc_18257 ;~ 01A2:8269
cs=0x1a2;eip=0x00826b; 	J(JMP(loc_18251));	// 20316                  jmp     short loc_18251 ;~ 01A2:826B
ret_1a2_826d:
	// 5738 
cs=0x1a2;eip=0x00826d; 	T(XOR(bh, bh));	// 20318                  xor     bh, bh ;~ 01A2:826D
cs=0x1a2;eip=0x00826f; 	T(MOV(bl, *(raddr(ds,si))));	// 20319                  mov     bl, [si] ;~ 01A2:826F
cs=0x1a2;eip=0x008271; 	T(INC(si));	// 20320                  inc     si ;~ 01A2:8271
cs=0x1a2;eip=0x008272; 	T(LODSB);	// 20321                  lodsb ;~ 01A2:8272
cs=0x1a2;eip=0x008273; 	J({;});	// 20322                  jmp     short $+2 ;~ 01A2:8273
sub_18275:
	// 20327 
cs=0x1a2;eip=0x008275; 	T(di = 0x62B;);	// 20329                  mov     di, 62Bh ;~ 01A2:8275
cs=0x1a2;eip=0x008278; 	T(CMP(*(raddr(ds,bx+di)), 0));	// 20330                  cmp     byte ptr [bx+di], 0 ;~ 01A2:8278
cs=0x1a2;eip=0x00827b; 	J(JNZ(loc_1828e));	// 20331                  jnz     short loc_1828E ;~ 01A2:827B
cs=0x1a2;eip=0x00827d; 	X(INC(byte_1f79a));	// 20332                  inc     ds:byte_1F79A ;~ 01A2:827D
cs=0x1a2;eip=0x008281; 	X(PUSH(di));	// 20333                  push    di ;~ 01A2:8281
cs=0x1a2;eip=0x008282; 	T(di = 0x692;);	// 20334                  mov     di, 692h ;~ 01A2:8282
loc_18285:
	// 5739 
cs=0x1a2;eip=0x008285; 	T(INC(di));	// 20337                  inc     di ;~ 01A2:8285
cs=0x1a2;eip=0x008286; 	T(CMP(*(raddr(ds,di)), 0));	// 20338                  cmp     byte ptr [di], 0 ;~ 01A2:8286
cs=0x1a2;eip=0x008289; 	J(JNS(loc_18285));	// 20339                  jns     short loc_18285 ;~ 01A2:8289
cs=0x1a2;eip=0x00828b; 	X(MOV(*(raddr(ds,di)), bl));	// 20340                  mov     [di], bl ;~ 01A2:828B
cs=0x1a2;eip=0x00828d; 	X(POP(di));	// 20341                  pop     di ;~ 01A2:828D
loc_1828e:
	// 5740 
cs=0x1a2;eip=0x00828e; 	X(MOV(*(raddr(ds,bx+di)), al));	// 20344                  mov     [bx+di], al ;~ 01A2:828E
cs=0x1a2;eip=0x008290; 	X(MOV(*(raddr(ds,bx+di+0x34)), al));	// 20345                  mov     [bx+di+34h], al ;~ 01A2:8290
cs=0x1a2;eip=0x008293; 	J(RETN(0));	// 20346                  retn ;~ 01A2:8293

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_18251: 	goto loc_18251;
        case m2c::kloc_18257: 	goto loc_18257;
        case m2c::kloc_18265: 	goto loc_18265;
        case m2c::kloc_18285: 	goto loc_18285;
        case m2c::kloc_1828e: 	goto loc_1828e;
        case m2c::kret_1a2_825a: 	goto ret_1a2_825a;
        case m2c::kret_1a2_826d: 	goto ret_1a2_826d;
        case m2c::kseg000_824c_proc: 	goto seg000_824c_proc;
        case m2c::ksub_18275: 	goto sub_18275;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_8294_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_8294_proc:
    _begin:
cs=0x1a2;eip=0x008294; 	J(CALL(sub_17d26,0));	// 20350                  call    sub_17D26 ;~ 01A2:8294
cs=0x1a2;eip=0x008297; 	T(LODSB);	// 20351                  lodsb ;~ 01A2:8297
cs=0x1a2;eip=0x008298; 	T(CMP(al, *(raddr(ds,di+0x0A))));	// 20352                  cmp     al, [di+0Ah] ;~ 01A2:8298
cs=0x1a2;eip=0x00829b; 	J(JNZ(loc_182eb));	// 20353                  jnz     short loc_182EB ;~ 01A2:829B
cs=0x1a2;eip=0x00829d; 	T(MOV(dl, *(raddr(ds,di))));	// 20354                  mov     dl, [di] ;~ 01A2:829D
cs=0x1a2;eip=0x00829f; 	T(CMP(dl, *(raddr(ds,si))));	// 20355                  cmp     dl, [si] ;~ 01A2:829F
cs=0x1a2;eip=0x0082a1; 	J(JL(loc_182eb));	// 20356                  jl      short loc_182EB ;~ 01A2:82A1
cs=0x1a2;eip=0x0082a3; 	T(MOV(dh, *(raddr(ds,di+1))));	// 20357                  mov     dh, [di+1] ;~ 01A2:82A3
cs=0x1a2;eip=0x0082a6; 	T(CMP(dh, *(raddr(ds,si+2))));	// 20358                  cmp     dh, [si+2] ;~ 01A2:82A6
cs=0x1a2;eip=0x0082a9; 	J(JL(loc_182eb));	// 20359                  jl      short loc_182EB ;~ 01A2:82A9
cs=0x1a2;eip=0x0082ab; 	T(MOV(ch, *(raddr(ds,di+2))));	// 20360                  mov     ch, [di+2] ;~ 01A2:82AB
cs=0x1a2;eip=0x0082ae; 	T(CMP(ch, *(raddr(ds,si+5))));	// 20361                  cmp     ch, [si+5] ;~ 01A2:82AE
cs=0x1a2;eip=0x0082b1; 	J(JG(loc_182eb));	// 20362                  jg      short loc_182EB ;~ 01A2:82B1
cs=0x1a2;eip=0x0082b3; 	X(PUSH(dx));	// 20363                  push    dx ;~ 01A2:82B3
cs=0x1a2;eip=0x0082b4; 	T(MOV(dx, *(dw*)(raddr(ds,di+6))));	// 20364                  mov     dx, [di+6] ;~ 01A2:82B4
cs=0x1a2;eip=0x0082b7; 	T(bx = di;);	// 20365                  mov     bx, di ;~ 01A2:82B7
cs=0x1a2;eip=0x0082b9; 	T(ax = 2;);	// 20366                  mov     ax, 2 ;~ 01A2:82B9
cs=0x1a2;eip=0x0082bc; 	J(CALL(sub_1410e,0));	// 20367                  call    sub_1410E ;~ 01A2:82BC
cs=0x1a2;eip=0x0082bf; 	X(POP(dx));	// 20368                  pop     dx ;~ 01A2:82BF
cs=0x1a2;eip=0x0082c0; 	T(XOR(ax, ax));	// 20369                  xor     ax, ax ;~ 01A2:82C0
cs=0x1a2;eip=0x0082c2; 	T(ADD(ax, *(dw*)(raddr(es,di+0x10))));	// 20370                  add     ax, es:[di+10h] ;~ 01A2:82C2
cs=0x1a2;eip=0x0082c6; 	T(SUB(dl, al));	// 20371                  sub     dl, al ;~ 01A2:82C6
cs=0x1a2;eip=0x0082c8; 	T(XOR(ax, ax));	// 20372                  xor     ax, ax ;~ 01A2:82C8
cs=0x1a2;eip=0x0082ca; 	T(ADD(ax, *(dw*)(raddr(es,di+0x12))));	// 20373                  add     ax, es:[di+12h] ;~ 01A2:82CA
cs=0x1a2;eip=0x0082ce; 	T(SUB(dh, al));	// 20374                  sub     dh, al ;~ 01A2:82CE
cs=0x1a2;eip=0x0082d0; 	T(MOV(ax, *(dw*)(raddr(es,di+0x14))));	// 20375                  mov     ax, es:[di+14h] ;~ 01A2:82D0
cs=0x1a2;eip=0x0082d4; 	T(ADD(ch, al));	// 20376                  add     ch, al ;~ 01A2:82D4
cs=0x1a2;eip=0x0082d6; 	T(CMP(dl, *(raddr(ds,si+1))));	// 20377                  cmp     dl, [si+1] ;~ 01A2:82D6
cs=0x1a2;eip=0x0082d9; 	J(JGE(loc_182eb));	// 20378                  jge     short loc_182EB ;~ 01A2:82D9
cs=0x1a2;eip=0x0082db; 	T(CMP(dh, *(raddr(ds,si+3))));	// 20379                  cmp     dh, [si+3] ;~ 01A2:82DB
cs=0x1a2;eip=0x0082de; 	J(JGE(loc_182eb));	// 20380                  jge     short loc_182EB ;~ 01A2:82DE
cs=0x1a2;eip=0x0082e0; 	T(CMP(ch, *(raddr(ds,si+4))));	// 20381                  cmp     ch, [si+4] ;~ 01A2:82E0
cs=0x1a2;eip=0x0082e3; 	J(JL(loc_182eb));	// 20382                  jl      short loc_182EB ;~ 01A2:82E3
cs=0x1a2;eip=0x0082e5; 	T(ADD(si, 6));	// 20383                  add     si, 6 ;~ 01A2:82E5
loc_182e8:
	// 5741 
cs=0x1a2;eip=0x0082e8; 	J(return seg000_78d5_proc(m2c::kloc_17caa, _state););	// 20387                  jmp     loc_17CAA ;~ 01A2:82E8
loc_182eb:
	// 5742 
cs=0x1a2;eip=0x0082eb; 	T(ADD(si, 6));	// 20392                  add     si, 6 ;~ 01A2:82EB
loc_182ee:
	// 5743 
cs=0x1a2;eip=0x0082ee; 	X(byte_1f775 = 0;);	// 20396                  mov     ds:byte_1F775, 0 ;~ 01A2:82EE
cs=0x1a2;eip=0x0082f3; 	J(RETN(0));	// 20397                  retn ;~ 01A2:82F3
ret_1a2_82f4:
	// 5744 
cs=0x1a2;eip=0x0082f4; 	T(LODSW);	// 20399                  lodsw ;~ 01A2:82F4
cs=0x1a2;eip=0x0082f5; 	T(XCHG(al, ah));	// 20400                  xchg    al, ah ;~ 01A2:82F5
cs=0x1a2;eip=0x0082f7; 	T(CMP(ax, word_1f3ea));	// 20401                  cmp     ax, ds:word_1F3EA ;~ 01A2:82F7
cs=0x1a2;eip=0x0082fb; 	J(JNZ(loc_182ee));	// 20402                  jnz     short loc_182EE ;~ 01A2:82FB
cs=0x1a2;eip=0x0082fd; 	J(JMP(loc_182e8));	// 20403                  jmp     short loc_182E8 ;~ 01A2:82FD
ret_1a2_82ff:
	// 5745 
cs=0x1a2;eip=0x0082ff; 	T(XOR(dh, dh));	// 20405                  xor     dh, dh ;~ 01A2:82FF
cs=0x1a2;eip=0x008301; 	T(MOV(dl, *(raddr(ds,si))));	// 20406                  mov     dl, [si] ;~ 01A2:8301
cs=0x1a2;eip=0x008303; 	T(INC(si));	// 20407                  inc     si ;~ 01A2:8303
cs=0x1a2;eip=0x008304; 	T(ax = 4;);	// 20408                  mov     ax, 4 ;~ 01A2:8304
cs=0x1a2;eip=0x008307; 	J(CALL(sub_1410e,0));	// 20409                  call    sub_1410E ;~ 01A2:8307
cs=0x1a2;eip=0x00830a; 	T(CMP(*(dw*)(raddr(ds,di+2)), 0));	// 20410                  cmp     word ptr [di+2], 0 ;~ 01A2:830A
cs=0x1a2;eip=0x00830e; 	J(JZ(loc_182ee));	// 20411                  jz      short loc_182EE ;~ 01A2:830E
cs=0x1a2;eip=0x008310; 	J(JMP(loc_182e8));	// 20412                  jmp     short loc_182E8 ;~ 01A2:8310
ret_1a2_8312:
	// 5746 
cs=0x1a2;eip=0x008312; 	T(LODSW);	// 20414                  lodsw ;~ 01A2:8312
cs=0x1a2;eip=0x008313; 	T(XCHG(al, ah));	// 20415                  xchg    al, ah ;~ 01A2:8313
cs=0x1a2;eip=0x008315; 	X(PUSH(ax));	// 20416                  push    ax ;~ 01A2:8315
cs=0x1a2;eip=0x008316; 	T(LODSW);	// 20417                  lodsw ;~ 01A2:8316
cs=0x1a2;eip=0x008317; 	T(XCHG(al, ah));	// 20418                  xchg    al, ah ;~ 01A2:8317
cs=0x1a2;eip=0x008319; 	T(dx = ax;);	// 20419                  mov     dx, ax ;~ 01A2:8319
cs=0x1a2;eip=0x00831b; 	X(POP(ax));	// 20420                  pop     ax ;~ 01A2:831B
cs=0x1a2;eip=0x00831c; 	J(CALL(sub_1d445,0));	// 20421                  call    sub_1D445 ;~ 01A2:831C
cs=0x1a2;eip=0x00831f; 	J(CALL(sub_15cdc,0));	// 20422                  call    sub_15CDC ;~ 01A2:831F
cs=0x1a2;eip=0x008322; 	T(LAHF);	// 20423                  lahf ;~ 01A2:8322
cs=0x1a2;eip=0x008323; 	X(PUSH(ax));	// 20424                  push    ax ;~ 01A2:8323
cs=0x1a2;eip=0x008324; 	J(CALL(sub_1d445,0));	// 20425                  call    sub_1D445 ;~ 01A2:8324
cs=0x1a2;eip=0x008327; 	X(POP(ax));	// 20426                  pop     ax ;~ 01A2:8327
cs=0x1a2;eip=0x008328; 	T(SAHF);	// 20427                  sahf ;~ 01A2:8328
cs=0x1a2;eip=0x008329; 	J(JZ(loc_182e8));	// 20428                  jz      short loc_182E8 ;~ 01A2:8329
cs=0x1a2;eip=0x00832b; 	J(JNS(loc_182ee));	// 20429                  jns     short loc_182EE ;~ 01A2:832B
cs=0x1a2;eip=0x00832d; 	J(JMP(loc_182ee));	// 20430                  jmp     short loc_182EE ;~ 01A2:832D
ret_1a2_832f:
	// 5747 
cs=0x1a2;eip=0x00832f; 	J(CALL(sub_17d26,0));	// 20432                  call    sub_17D26 ;~ 01A2:832F
cs=0x1a2;eip=0x008332; 	T(LODSB);	// 20433                  lodsb ;~ 01A2:8332
cs=0x1a2;eip=0x008333; 	T(XOR(dh, dh));	// 20434                  xor     dh, dh ;~ 01A2:8333
cs=0x1a2;eip=0x008335; 	T(MOV(dl, *(raddr(ds,di+0x0C))));	// 20435                  mov     dl, [di+0Ch] ;~ 01A2:8335
cs=0x1a2;eip=0x008338; 	T(ADD(di, dx));	// 20436                  add     di, dx ;~ 01A2:8338
cs=0x1a2;eip=0x00833a; 	T(MOV(dl, *(raddr(ds,di+1))));	// 20437                  mov     dl, [di+1] ;~ 01A2:833A
cs=0x1a2;eip=0x00833d; 	T(CBW);	// 20438                  cbw ;~ 01A2:833D
cs=0x1a2;eip=0x00833e; 	T(ADD(dx, ax));	// 20439                  add     dx, ax ;~ 01A2:833E
cs=0x1a2;eip=0x008340; 	J(JS(loc_1834d));	// 20440                  js      short loc_1834D ;~ 01A2:8340
cs=0x1a2;eip=0x008342; 	T(CMP(dx, 0x0F5));	// 20441                  cmp     dx, 0F5h ;~ 01A2:8342
cs=0x1a2;eip=0x008346; 	J(JLE(loc_1834f));	// 20442                  jle     short loc_1834F ;~ 01A2:8346
cs=0x1a2;eip=0x008348; 	T(dx = 0x0F5;);	// 20443                  mov     dx, 0F5h ;~ 01A2:8348
cs=0x1a2;eip=0x00834b; 	J(JMP(loc_1834f));	// 20444                  jmp     short loc_1834F ;~ 01A2:834B
loc_1834d:
	// 5748 
cs=0x1a2;eip=0x00834d; 	T(XOR(dx, dx));	// 20448                  xor     dx, dx ;~ 01A2:834D
loc_1834f:
	// 5749 
cs=0x1a2;eip=0x00834f; 	X(MOV(*(raddr(ds,di+1)), dl));	// 20452                  mov     [di+1], dl ;~ 01A2:834F
cs=0x1a2;eip=0x008352; 	J(RETN(0));	// 20453                  retn ;~ 01A2:8352
ret_1a2_8353:
	// 5750 
cs=0x1a2;eip=0x008353; 	J(CALL(sub_17d26,0));	// 20455                  call    sub_17D26 ;~ 01A2:8353
cs=0x1a2;eip=0x008356; 	T(cx = dx;);	// 20456                  mov     cx, dx ;~ 01A2:8356
cs=0x1a2;eip=0x008358; 	T(MOV(dl, *(raddr(ds,si))));	// 20457                  mov     dl, [si] ;~ 01A2:8358
cs=0x1a2;eip=0x00835a; 	T(INC(si));	// 20458                  inc     si ;~ 01A2:835A
cs=0x1a2;eip=0x00835b; 	T(XOR(bh, bh));	// 20459                  xor     bh, bh ;~ 01A2:835B
cs=0x1a2;eip=0x00835d; 	T(MOV(bl, *(raddr(ds,di+0x0C))));	// 20460                  mov     bl, [di+0Ch] ;~ 01A2:835D
cs=0x1a2;eip=0x008360; 	T(MOV(bl, *(raddr(ds,bx+di+1))));	// 20461                  mov     bl, [bx+di+1] ;~ 01A2:8360
cs=0x1a2;eip=0x008363; 	X(PUSH(si));	// 20462                  push    si ;~ 01A2:8363
cs=0x1a2;eip=0x008364; 	T(si = word_1f1f6;);	// 20463                  mov     si, word_1F1F6 ;~ 01A2:8364
cs=0x1a2;eip=0x008368; 	X(MOV(*(dw*)(raddr(ds,si)), bx));	// 20464                  mov     [si], bx ;~ 01A2:8368
cs=0x1a2;eip=0x00836a; 	T(INC(si));	// 20465                  inc     si ;~ 01A2:836A
cs=0x1a2;eip=0x00836b; 	X(MOV(*(dw*)(raddr(ds,si)), dx));	// 20466                  mov     [si], dx ;~ 01A2:836B
cs=0x1a2;eip=0x00836d; 	T(INC(si));	// 20467                  inc     si ;~ 01A2:836D
cs=0x1a2;eip=0x00836e; 	X(MOV(*(dw*)(raddr(ds,si)), cx));	// 20468                  mov     [si], cx ;~ 01A2:836E
cs=0x1a2;eip=0x008370; 	T(ADD(si, 2));	// 20469                  add     si, 2 ;~ 01A2:8370
cs=0x1a2;eip=0x008373; 	X(word_1f1f6 = si;);	// 20470                  mov     word_1F1F6, si ;~ 01A2:8373
cs=0x1a2;eip=0x008377; 	X(INC(word_1f3ec));	// 20471                  inc     ds:word_1F3EC ;~ 01A2:8377
cs=0x1a2;eip=0x00837b; 	X(POP(si));	// 20472                  pop     si ;~ 01A2:837B
cs=0x1a2;eip=0x00837c; 	J(RETN(0));	// 20473                  retn ;~ 01A2:837C
ret_1a2_837d:
	// 5751 
cs=0x1a2;eip=0x00837d; 	J(CALL(sub_17d26,0));	// 20475                  call    sub_17D26 ;~ 01A2:837D
cs=0x1a2;eip=0x008380; 	J(JZ(locret_1838c));	// 20476                  jz      short locret_1838C ;~ 01A2:8380
cs=0x1a2;eip=0x008382; 	T(TEST(*(raddr(ds,di+0x0F)), 0x40));	// 20477                  test    byte ptr [di+0Fh], 40h ;~ 01A2:8382
cs=0x1a2;eip=0x008386; 	X(PUSHF);	// 20478                  pushf ;~ 01A2:8386
cs=0x1a2;eip=0x008387; 	X(AND(*(raddr(ds,di+0x0F)), 0x0BF));	// 20479                  and     byte ptr [di+0Fh], 0BFh ;~ 01A2:8387
cs=0x1a2;eip=0x00838b; 	X(POPF);	// 20480                  popf ;~ 01A2:838B
locret_1838c:
	// 5752 
cs=0x1a2;eip=0x00838c; 	J(RETN(0));	// 20483                  retn ;~ 01A2:838C
ret_1a2_838d:
	// 5753 
cs=0x1a2;eip=0x00838d; 	J(CALL(sub_17d26,0));	// 20485                  call    sub_17D26 ;~ 01A2:838D
cs=0x1a2;eip=0x008390; 	J(JZ(locret_1839c));	// 20486                  jz      short locret_1839C ;~ 01A2:8390
cs=0x1a2;eip=0x008392; 	T(TEST(*(raddr(ds,di+0x0F)), 0x40));	// 20487                  test    byte ptr [di+0Fh], 40h ;~ 01A2:8392
cs=0x1a2;eip=0x008396; 	X(PUSHF);	// 20488                  pushf ;~ 01A2:8396
cs=0x1a2;eip=0x008397; 	X(OR(*(raddr(ds,di+0x0F)), 0x40));	// 20489                  or      byte ptr [di+0Fh], 40h ;~ 01A2:8397
cs=0x1a2;eip=0x00839b; 	X(POPF);	// 20490                  popf ;~ 01A2:839B
locret_1839c:
	// 5754 
cs=0x1a2;eip=0x00839c; 	J(RETN(0));	// 20493                  retn ;~ 01A2:839C
ret_1a2_839d:
	// 5755 
cs=0x1a2;eip=0x00839d; 	J(CALL(sub_17d26,0));	// 20495                  call    sub_17D26 ;~ 01A2:839D
cs=0x1a2;eip=0x0083a0; 	J(JZ(loc_183b6));	// 20496                  jz      short loc_183B6 ;~ 01A2:83A0
cs=0x1a2;eip=0x0083a2; 	T(XOR(ah, ah));	// 20497                  xor     ah, ah ;~ 01A2:83A2
cs=0x1a2;eip=0x0083a4; 	T(MOV(al, *(raddr(ds,di+0x0D))));	// 20498                  mov     al, [di+0Dh] ;~ 01A2:83A4
cs=0x1a2;eip=0x0083a7; 	T(ADD(di, ax));	// 20499                  add     di, ax ;~ 01A2:83A7
cs=0x1a2;eip=0x0083a9; 	T(LODSB);	// 20500                  lodsb ;~ 01A2:83A9
cs=0x1a2;eip=0x0083aa; 	X(MOV(*(raddr(ds,di+3)), al));	// 20501                  mov     [di+3], al ;~ 01A2:83AA
cs=0x1a2;eip=0x0083ad; 	T(LODSB);	// 20502                  lodsb ;~ 01A2:83AD
cs=0x1a2;eip=0x0083ae; 	X(MOV(*(raddr(ds,di+4)), al));	// 20503                  mov     [di+4], al ;~ 01A2:83AE
cs=0x1a2;eip=0x0083b1; 	T(LODSB);	// 20504                  lodsb ;~ 01A2:83B1
cs=0x1a2;eip=0x0083b2; 	X(MOV(*(raddr(ds,di+5)), al));	// 20505                  mov     [di+5], al ;~ 01A2:83B2
cs=0x1a2;eip=0x0083b5; 	J(RETN(0));	// 20506                  retn ;~ 01A2:83B5
loc_183b6:
	// 5756 
cs=0x1a2;eip=0x0083b6; 	T(ADD(si, 3));	// 20510                  add     si, 3 ;~ 01A2:83B6
cs=0x1a2;eip=0x0083b9; 	J(RETN(0));	// 20511                  retn ;~ 01A2:83B9
ret_1a2_83ba:
	// 5757 
cs=0x1a2;eip=0x0083ba; 	T(XOR(ah, ah));	// 20513                  xor     ah, ah ;~ 01A2:83BA
cs=0x1a2;eip=0x0083bc; 	T(LODSB);	// 20514                  lodsb ;~ 01A2:83BC
cs=0x1a2;eip=0x0083bd; 	J(CALL(sub_1164e,0));	// 20515                  call    sub_1164E ;~ 01A2:83BD
cs=0x1a2;eip=0x0083c0; 	J(RETN(0));	// 20516                  retn ;~ 01A2:83C0
ret_1a2_83c1:
	// 5758 
cs=0x1a2;eip=0x0083c1; 	J(RETN(0));	// 20518                  retn ;~ 01A2:83C1
ret_1a2_83c2:
	// 5759 
cs=0x1a2;eip=0x0083c2; 	T(XOR(ah, ah));	// 20520                  xor     ah, ah ;~ 01A2:83C2
cs=0x1a2;eip=0x0083c4; 	T(LODSB);	// 20521                  lodsb ;~ 01A2:83C4
cs=0x1a2;eip=0x0083c5; 	J(CALL(sub_11613,0));	// 20522                  call    sub_11613 ;~ 01A2:83C5
cs=0x1a2;eip=0x0083c8; 	J(RETN(0));	// 20523                  retn ;~ 01A2:83C8
ret_1a2_83c9:
	// 5760 
cs=0x1a2;eip=0x0083c9; 	J(CALL(sub_17d26,0));	// 20525                  call    sub_17D26 ;~ 01A2:83C9
cs=0x1a2;eip=0x0083cc; 	J(JZ(locret_183d8));	// 20526                  jz      short locret_183D8 ;~ 01A2:83CC
cs=0x1a2;eip=0x0083ce; 	T(XOR(bh, bh));	// 20527                  xor     bh, bh ;~ 01A2:83CE
cs=0x1a2;eip=0x0083d0; 	T(MOV(bl, *(raddr(ds,di+0x0C))));	// 20528                  mov     bl, [di+0Ch] ;~ 01A2:83D0
cs=0x1a2;eip=0x0083d3; 	X(MOV(*(dw*)(raddr(ds,bx+di+2)), 0));	// 20529                  mov     word ptr [bx+di+2], 0 ;~ 01A2:83D3
locret_183d8:
	// 5761 
cs=0x1a2;eip=0x0083d8; 	J(RETN(0));	// 20532                  retn ;~ 01A2:83D8
ret_1a2_83d9:
	// 5762 
cs=0x1a2;eip=0x0083d9; 	J(CALL(sub_17d26,0));	// 20534                  call    sub_17D26 ;~ 01A2:83D9
cs=0x1a2;eip=0x0083dc; 	J(JZ(locret_183e7));	// 20535                  jz      short locret_183E7 ;~ 01A2:83DC
cs=0x1a2;eip=0x0083de; 	T(XOR(bh, bh));	// 20536                  xor     bh, bh ;~ 01A2:83DE
cs=0x1a2;eip=0x0083e0; 	T(MOV(bl, *(raddr(ds,di+0x0C))));	// 20537                  mov     bl, [di+0Ch] ;~ 01A2:83E0
cs=0x1a2;eip=0x0083e3; 	X(MOV(*(raddr(ds,bx+di+5)), 0));	// 20538                  mov     byte ptr [bx+di+5], 0 ;~ 01A2:83E3
locret_183e7:
	// 5763 
cs=0x1a2;eip=0x0083e7; 	J(RETN(0));	// 20541                  retn ;~ 01A2:83E7
ret_1a2_83e8:
	// 5764 
cs=0x1a2;eip=0x0083e8; 	T(XOR(ah, ah));	// 20543                  xor     ah, ah ;~ 01A2:83E8
cs=0x1a2;eip=0x0083ea; 	T(XOR(dh, dh));	// 20544                  xor     dh, dh ;~ 01A2:83EA
cs=0x1a2;eip=0x0083ec; 	T(LODSB);	// 20545                  lodsb ;~ 01A2:83EC
cs=0x1a2;eip=0x0083ed; 	T(MOV(dl, *(raddr(ds,si))));	// 20546                  mov     dl, [si] ;~ 01A2:83ED
cs=0x1a2;eip=0x0083ef; 	T(INC(si));	// 20547                  inc     si ;~ 01A2:83EF
cs=0x1a2;eip=0x0083f0; 	J(CALL(sub_18840,0));	// 20548                  call    sub_18840 ;~ 01A2:83F0
cs=0x1a2;eip=0x0083f3; 	X(byte_1f874 = al;);	// 20550                  mov     ds:byte_1F874, al ;~ 01A2:83F3
cs=0x1a2;eip=0x0083f6; 	J(RETN(0));	// 20551                  retn ;~ 01A2:83F6
ret_1a2_83f7:
	// 5765 
cs=0x1a2;eip=0x0083f7; 	T(LODSB);	// 20553                  lodsb ;~ 01A2:83F7
cs=0x1a2;eip=0x0083f8; 	T(CMP(al, byte_1f874));	// 20554                  cmp     al, ds:byte_1F874 ;~ 01A2:83F8
cs=0x1a2;eip=0x0083fc; 	J(JNZ(loc_18401));	// 20555                  jnz     short loc_18401 ;~ 01A2:83FC
cs=0x1a2;eip=0x0083fe; 	J(JMP(loc_182e8));	// 20556                  jmp     loc_182E8 ;~ 01A2:83FE
loc_18401:
	// 5766 
cs=0x1a2;eip=0x008401; 	J(JMP(loc_182ee));	// 20560                  jmp     loc_182EE ;~ 01A2:8401
ret_1a2_8404:
	// 5767 
cs=0x1a2;eip=0x008404; 	T(XOR(ch, ch));	// 20562                  xor     ch, ch ;~ 01A2:8404
cs=0x1a2;eip=0x008406; 	T(MOV(cl, *(raddr(ds,si))));	// 20563                  mov     cl, [si] ;~ 01A2:8406
cs=0x1a2;eip=0x008408; 	T(INC(si));	// 20564                  inc     si ;~ 01A2:8408
cs=0x1a2;eip=0x008409; 	T(al = 8;);	// 20565                  mov     al, 8 ;~ 01A2:8409
cs=0x1a2;eip=0x00840b; 	T(XOR(dx, dx));	// 20566                  xor     dx, dx ;~ 01A2:840B
loc_1840d:
	// 5768 
cs=0x1a2;eip=0x00840d; 	J(CALL(sub_1415c,0));	// 20570                  call    sub_1415C ;~ 01A2:840D
cs=0x1a2;eip=0x008410; 	T(OR(dx, dx));	// 20571                  or      dx, dx ;~ 01A2:8410
cs=0x1a2;eip=0x008412; 	J(JS(locret_18428));	// 20572                  js      short locret_18428 ;~ 01A2:8412
cs=0x1a2;eip=0x008414; 	T(INC(dx));	// 20573                  inc     dx ;~ 01A2:8414
cs=0x1a2;eip=0x008415; 	T(CMP(cx, *(dw*)(raddr(ds,di+2))));	// 20574                  cmp     cx, [di+2] ;~ 01A2:8415
cs=0x1a2;eip=0x008418; 	J(JNZ(loc_1840d));	// 20575                  jnz     short loc_1840D ;~ 01A2:8418
cs=0x1a2;eip=0x00841a; 	X(PUSH(ax));	// 20576                  push    ax ;~ 01A2:841A
cs=0x1a2;eip=0x00841b; 	X(PUSH(dx));	// 20577                  push    dx ;~ 01A2:841B
cs=0x1a2;eip=0x00841c; 	X(PUSH(cx));	// 20578                  push    cx ;~ 01A2:841C
cs=0x1a2;eip=0x00841d; 	T(MOV(dx, *(dw*)(raddr(ds,di))));	// 20579                  mov     dx, [di] ;~ 01A2:841D
cs=0x1a2;eip=0x00841f; 	J(CALL(sub_13efd,0));	// 20580                  call    sub_13EFD ;~ 01A2:841F
cs=0x1a2;eip=0x008422; 	X(POP(cx));	// 20581                  pop     cx ;~ 01A2:8422
cs=0x1a2;eip=0x008423; 	X(POP(dx));	// 20582                  pop     dx ;~ 01A2:8423
cs=0x1a2;eip=0x008424; 	X(POP(ax));	// 20583                  pop     ax ;~ 01A2:8424
cs=0x1a2;eip=0x008425; 	T(DEC(dx));	// 20584                  dec     dx ;~ 01A2:8425
cs=0x1a2;eip=0x008426; 	J(JMP(loc_1840d));	// 20585                  jmp     short loc_1840D ;~ 01A2:8426
locret_18428:
	// 5769 
cs=0x1a2;eip=0x008428; 	J(RETN(0));	// 20589                  retn ;~ 01A2:8428
ret_1a2_8429:
	// 5770 
cs=0x1a2;eip=0x008429; 	T(MOV(dl, *(raddr(ds,si))));	// 20591                  mov     dl, [si] ;~ 01A2:8429
cs=0x1a2;eip=0x00842b; 	T(INC(si));	// 20592                  inc     si ;~ 01A2:842B
cs=0x1a2;eip=0x00842c; 	J(RETN(0));	// 20593                  retn ;~ 01A2:842C
ret_1a2_842d:
	// 5771 
cs=0x1a2;eip=0x00842d; 	T(LODSB);	// 20595                  lodsb ;~ 01A2:842D
cs=0x1a2;eip=0x00842e; 	X(byte_1f819 = al;);	// 20596                  mov     ds:byte_1F819, al ;~ 01A2:842E
cs=0x1a2;eip=0x008431; 	T(LODSB);	// 20597                  lodsb ;~ 01A2:8431
cs=0x1a2;eip=0x008432; 	T(XOR(bx, bx));	// 20598                  xor     bx, bx ;~ 01A2:8432
cs=0x1a2;eip=0x008434; 	J(CALL(sub_18275,0));	// 20599                  call    sub_18275 ;~ 01A2:8434
cs=0x1a2;eip=0x008437; 	T(bx = 1;);	// 20600                  mov     bx, 1 ;~ 01A2:8437
cs=0x1a2;eip=0x00843a; 	T(LODSB);	// 20601                  lodsb ;~ 01A2:843A
cs=0x1a2;eip=0x00843b; 	J(CALL(sub_18275,0));	// 20602                  call    sub_18275 ;~ 01A2:843B
cs=0x1a2;eip=0x00843e; 	X(word_1f70a = 0x1E;);	// 20603                  mov     ds:word_1F70A, 1Eh ;~ 01A2:843E
cs=0x1a2;eip=0x008444; 	J(CALL(sub_15c9c,0));	// 20604                  call    sub_15C9C ;~ 01A2:8444
cs=0x1a2;eip=0x008447; 	J(RETN(0));	// 20605                  retn ;~ 01A2:8447
ret_1a2_8448:
	// 5772 
cs=0x1a2;eip=0x008448; 	T(di = word_1f20c;);	// 20607                  mov     di, word_1F20C ;~ 01A2:8448
cs=0x1a2;eip=0x00844c; 	T(MOV(dl, *(raddr(ds,di+6))));	// 20608                  mov     dl, [di+6] ;~ 01A2:844C
cs=0x1a2;eip=0x00844f; 	T(LODSB);	// 20609                  lodsb ;~ 01A2:844F
cs=0x1a2;eip=0x008450; 	T(CMP(al, dl));	// 20610                  cmp     al, dl ;~ 01A2:8450
cs=0x1a2;eip=0x008452; 	J(JZ(loc_18457));	// 20611                  jz      short loc_18457 ;~ 01A2:8452
cs=0x1a2;eip=0x008454; 	J(JMP(loc_182ee));	// 20612                  jmp     loc_182EE ;~ 01A2:8454
loc_18457:
	// 5773 
cs=0x1a2;eip=0x008457; 	J(return seg000_78d5_proc(m2c::kloc_17caa, _state););	// 20616                  jmp     loc_17CAA ;~ 01A2:8457
ret_1a2_845a:
	// 5774 
cs=0x1a2;eip=0x00845a; 	J(CALL(sub_17d26,0));	// 20618                  call    sub_17D26 ;~ 01A2:845A
cs=0x1a2;eip=0x00845d; 	J(JZ(locret_18468));	// 20619                  jz      short locret_18468 ;~ 01A2:845D
cs=0x1a2;eip=0x00845f; 	T(XOR(bh, bh));	// 20620                  xor     bh, bh ;~ 01A2:845F
cs=0x1a2;eip=0x008461; 	T(MOV(bl, *(raddr(ds,di+0x0C))));	// 20621                  mov     bl, [di+0Ch] ;~ 01A2:8461
cs=0x1a2;eip=0x008464; 	X(MOV(*(dw*)(raddr(ds,bx+di)), 0));	// 20622                  mov     word ptr [bx+di], 0 ;~ 01A2:8464
locret_18468:
	// 5775 
cs=0x1a2;eip=0x008468; 	J(RETN(0));	// 20625                  retn ;~ 01A2:8468
ret_1a2_8469:
	// 5776 
cs=0x1a2;eip=0x008469; 	J(CALL(sub_17d26,0));	// 20627                  call    sub_17D26 ;~ 01A2:8469
cs=0x1a2;eip=0x00846c; 	J(JZ(locret_1847f));	// 20628                  jz      short locret_1847F ;~ 01A2:846C
cs=0x1a2;eip=0x00846e; 	T(XOR(bh, bh));	// 20629                  xor     bh, bh ;~ 01A2:846E
cs=0x1a2;eip=0x008470; 	T(MOV(bl, *(raddr(ds,di+0x0C))));	// 20630                  mov     bl, [di+0Ch] ;~ 01A2:8470
cs=0x1a2;eip=0x008473; 	T(ADD(di, bx));	// 20631                  add     di, bx ;~ 01A2:8473
cs=0x1a2;eip=0x008475; 	T(TEST(*(raddr(ds,di+3)), 4));	// 20632                  test    byte ptr [di+3], 4 ;~ 01A2:8475
cs=0x1a2;eip=0x008479; 	X(PUSHF);	// 20633                  pushf ;~ 01A2:8479
cs=0x1a2;eip=0x00847a; 	X(OR(*(raddr(ds,di+3)), 4));	// 20634                  or      byte ptr [di+3], 4 ;~ 01A2:847A
cs=0x1a2;eip=0x00847e; 	X(POPF);	// 20635                  popf ;~ 01A2:847E
locret_1847f:
	// 5777 
cs=0x1a2;eip=0x00847f; 	J(RETN(0));	// 20638                  retn ;~ 01A2:847F
ret_1a2_8480:
	// 5778 
cs=0x1a2;eip=0x008480; 	X(PUSH(ax));	// 20640                  push    ax ;~ 01A2:8480
cs=0x1a2;eip=0x008481; 	T(LODSW);	// 20641                  lodsw ;~ 01A2:8481
cs=0x1a2;eip=0x008482; 	T(XCHG(al, ah));	// 20642                  xchg    al, ah ;~ 01A2:8482
cs=0x1a2;eip=0x008484; 	T(dx = ax;);	// 20643                  mov     dx, ax ;~ 01A2:8484
cs=0x1a2;eip=0x008486; 	X(POP(ax));	// 20644                  pop     ax ;~ 01A2:8486
cs=0x1a2;eip=0x008487; 	X(PUSH(si));	// 20645                  push    si ;~ 01A2:8487
cs=0x1a2;eip=0x008488; 	J(CALL(sub_175af,0));	// 20646                  call    sub_175AF ;~ 01A2:8488
cs=0x1a2;eip=0x00848b; 	T(si = 0x7C4;);	// 20647                  mov     si, 7C4h ;~ 01A2:848B
cs=0x1a2;eip=0x00848e; 	X(PUSH(si));	// 20648                  push    si ;~ 01A2:848E
cs=0x1a2;eip=0x00848f; 	J(CALL(sub_19c97,0));	// 20649                  call    sub_19C97 ;~ 01A2:848F
cs=0x1a2;eip=0x008492; 	X(MOV(*(dw*)(raddr(ds,si)), 0x2020));	// 20650                  mov     word ptr [si], 2020h ;~ 01A2:8492
cs=0x1a2;eip=0x008496; 	T(ADD(si, 2));	// 20651                  add     si, 2 ;~ 01A2:8496
cs=0x1a2;eip=0x008499; 	T(di = word_1f20c;);	// 20652                  mov     di, word_1F20C ;~ 01A2:8499
cs=0x1a2;eip=0x00849d; 	T(bx = di;);	// 20653                  mov     bx, di ;~ 01A2:849D
cs=0x1a2;eip=0x00849f; 	T(XOR(ah, ah));	// 20654                  xor     ah, ah ;~ 01A2:849F
cs=0x1a2;eip=0x0084a1; 	T(MOV(al, *(raddr(ds,di+0x0C))));	// 20655                  mov     al, [di+0Ch] ;~ 01A2:84A1
cs=0x1a2;eip=0x0084a4; 	T(ADD(bx, ax));	// 20656                  add     bx, ax ;~ 01A2:84A4
cs=0x1a2;eip=0x0084a6; 	T(MOV(dx, *(dw*)(raddr(ds,di+6))));	// 20657                  mov     dx, [di+6] ;~ 01A2:84A6
cs=0x1a2;eip=0x0084a9; 	T(ax = 2;);	// 20658                  mov     ax, 2 ;~ 01A2:84A9
cs=0x1a2;eip=0x0084ac; 	J(CALL(sub_1410e,0));	// 20659                  call    sub_1410E ;~ 01A2:84AC
cs=0x1a2;eip=0x0084af; 	T(bp = di;);	// 20660                  mov     bp, di ;~ 01A2:84AF
cs=0x1a2;eip=0x0084b1; 	T(di = bx;);	// 20661                  mov     di, bx ;~ 01A2:84B1
cs=0x1a2;eip=0x0084b3; 	J(CALL(sub_184d9,0));	// 20662                  call    sub_184D9 ;~ 01A2:84B3
cs=0x1a2;eip=0x0084b6; 	J(JNZ(loc_184bc));	// 20663                  jnz     short loc_184BC ;~ 01A2:84B6
cs=0x1a2;eip=0x0084b8; 	X(MOV(*(raddr(ds,si-1)), 0));	// 20664                  mov     byte ptr [si-1], 0 ;~ 01A2:84B8
loc_184bc:
	// 5779 
cs=0x1a2;eip=0x0084bc; 	T(si = word_1f20c;);	// 20667                  mov     si, word_1F20C ;~ 01A2:84BC
cs=0x1a2;eip=0x0084c0; 	T(MOV(dx, *(dw*)(raddr(ds,si+4))));	// 20668                  mov     dx, [si+4] ;~ 01A2:84C0
cs=0x1a2;eip=0x0084c3; 	T(ADD(dx, 0x3E8));	// 20669                  add     dx, 3E8h ;~ 01A2:84C3
cs=0x1a2;eip=0x0084c7; 	X(ADD(word_1f3ac, dx));	// 20670                  add     ds:word_1F3AC, dx ;~ 01A2:84C7
cs=0x1a2;eip=0x0084cb; 	X(POP(si));	// 20671                  pop     si ;~ 01A2:84CB
cs=0x1a2;eip=0x0084cc; 	J(CALL(sub_1d445,0));	// 20672                  call    sub_1D445 ;~ 01A2:84CC
cs=0x1a2;eip=0x0084cf; 	T(cl = 0x0C;);	// 20673                  mov     cl, 0Ch ;~ 01A2:84CF
cs=0x1a2;eip=0x0084d1; 	J(CALL(sub_13555,0));	// 20674                  call    sub_13555 ;~ 01A2:84D1
cs=0x1a2;eip=0x0084d4; 	J(CALL(sub_1d445,0));	// 20675                  call    sub_1D445 ;~ 01A2:84D4
cs=0x1a2;eip=0x0084d7; 	X(POP(si));	// 20676                  pop     si ;~ 01A2:84D7
cs=0x1a2;eip=0x0084d8; 	J(RETN(0));	// 20677                  retn ;~ 01A2:84D8

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_182e8: 	goto loc_182e8;
        case m2c::kloc_182eb: 	goto loc_182eb;
        case m2c::kloc_182ee: 	goto loc_182ee;
        case m2c::kloc_1834d: 	goto loc_1834d;
        case m2c::kloc_1834f: 	goto loc_1834f;
        case m2c::kloc_183b6: 	goto loc_183b6;
        case m2c::kloc_18401: 	goto loc_18401;
        case m2c::kloc_1840d: 	goto loc_1840d;
        case m2c::kloc_18457: 	goto loc_18457;
        case m2c::kloc_184bc: 	goto loc_184bc;
        case m2c::klocret_1838c: 	goto locret_1838c;
        case m2c::klocret_1839c: 	goto locret_1839c;
        case m2c::klocret_183d8: 	goto locret_183d8;
        case m2c::klocret_183e7: 	goto locret_183e7;
        case m2c::klocret_18428: 	goto locret_18428;
        case m2c::klocret_18468: 	goto locret_18468;
        case m2c::klocret_1847f: 	goto locret_1847f;
        case m2c::kret_1a2_82f4: 	goto ret_1a2_82f4;
        case m2c::kret_1a2_82ff: 	goto ret_1a2_82ff;
        case m2c::kret_1a2_8312: 	goto ret_1a2_8312;
        case m2c::kret_1a2_832f: 	goto ret_1a2_832f;
        case m2c::kret_1a2_8353: 	goto ret_1a2_8353;
        case m2c::kret_1a2_837d: 	goto ret_1a2_837d;
        case m2c::kret_1a2_838d: 	goto ret_1a2_838d;
        case m2c::kret_1a2_839d: 	goto ret_1a2_839d;
        case m2c::kret_1a2_83ba: 	goto ret_1a2_83ba;
        case m2c::kret_1a2_83c1: 	goto ret_1a2_83c1;
        case m2c::kret_1a2_83c2: 	goto ret_1a2_83c2;
        case m2c::kret_1a2_83c9: 	goto ret_1a2_83c9;
        case m2c::kret_1a2_83d9: 	goto ret_1a2_83d9;
        case m2c::kret_1a2_83e8: 	goto ret_1a2_83e8;
        case m2c::kret_1a2_83f7: 	goto ret_1a2_83f7;
        case m2c::kret_1a2_8404: 	goto ret_1a2_8404;
        case m2c::kret_1a2_8429: 	goto ret_1a2_8429;
        case m2c::kret_1a2_842d: 	goto ret_1a2_842d;
        case m2c::kret_1a2_8448: 	goto ret_1a2_8448;
        case m2c::kret_1a2_845a: 	goto ret_1a2_845a;
        case m2c::kret_1a2_8469: 	goto ret_1a2_8469;
        case m2c::kret_1a2_8480: 	goto ret_1a2_8480;
        case m2c::kseg000_8294_proc: 	goto seg000_8294_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group23(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group23:
    _begin:
sub_184d9:
	// 20682 
cs=0x1a2;eip=0x0084d9; 	T(bx = di;);	// 20687                  mov     bx, di ;~ 01A2:84D9
cs=0x1a2;eip=0x0084db; 	T(MOV(al, *(raddr(es,bp+0x16))));	// 20688                  mov     al, es:[bp+16h] ;~ 01A2:84DB
cs=0x1a2;eip=0x0084df; 	T(CMP(al, 1));	// 20689                  cmp     al, 1 ;~ 01A2:84DF
cs=0x1a2;eip=0x0084e1; 	J(JNZ(loc_1853b));	// 20690                  jnz     short loc_1853B ;~ 01A2:84E1
cs=0x1a2;eip=0x0084e3; 	T(CMP(byte_1f87b, 1));	// 20691                  cmp     ds:byte_1F87B, 1 ;~ 01A2:84E3
cs=0x1a2;eip=0x0084e8; 	J(JNZ(loc_18505));	// 20692                  jnz     short loc_18505 ;~ 01A2:84E8
cs=0x1a2;eip=0x0084ea; 	X(byte_1f768 = 9;);	// 20693                  mov     ds:byte_1F768, 9 ;~ 01A2:84EA
cs=0x1a2;eip=0x0084ef; 	J(CALL(sub_19cab,0));	// 20694                  call    sub_19CAB ;~ 01A2:84EF
cs=0x1a2;eip=0x0084f2; 	J(CALL(sub_18665,0));	// 20695                  call    sub_18665 ;~ 01A2:84F2
cs=0x1a2;eip=0x0084f5; 	J(CALL(sub_19c97,0));	// 20696                  call    sub_19C97 ;~ 01A2:84F5
cs=0x1a2;eip=0x0084f8; 	X(MOV(*(dw*)(raddr(ds,si)), 0x2020));	// 20697                  mov     word ptr [si], 2020h ;~ 01A2:84F8
cs=0x1a2;eip=0x0084fc; 	X(MOV(*(raddr(ds,si+2)), 0x2E));	// 20698                  mov     byte ptr [si+2], 2Eh ; '.' ;~ 01A2:84FC
cs=0x1a2;eip=0x008500; 	T(ADD(si, 3));	// 20699                  add     si, 3 ;~ 01A2:8500
cs=0x1a2;eip=0x008503; 	J(JMP(loc_18519));	// 20700                  jmp     short loc_18519 ;~ 01A2:8503
loc_18505:
	// 5780 
cs=0x1a2;eip=0x008505; 	T(ax = 5;);	// 20704                  mov     ax, 5 ;~ 01A2:8505
cs=0x1a2;eip=0x008508; 	J(CALL(sub_19cbc,0));	// 20705                  call    sub_19CBC ;~ 01A2:8508
cs=0x1a2;eip=0x00850b; 	J(CALL(sub_18665,0));	// 20706                  call    sub_18665 ;~ 01A2:850B
cs=0x1a2;eip=0x00850e; 	J(CALL(sub_19c97,0));	// 20707                  call    sub_19C97 ;~ 01A2:850E
cs=0x1a2;eip=0x008511; 	X(byte_1f768 = 9;);	// 20708                  mov     ds:byte_1F768, 9 ;~ 01A2:8511
cs=0x1a2;eip=0x008516; 	J(CALL(sub_19cab,0));	// 20709                  call    sub_19CAB ;~ 01A2:8516
loc_18519:
	// 5781 
cs=0x1a2;eip=0x008519; 	T(XOR(dh, dh));	// 20712                  xor     dh, dh ;~ 01A2:8519
cs=0x1a2;eip=0x00851b; 	T(MOV(dl, *(raddr(ds,bx+2))));	// 20713                  mov     dl, [bx+2] ;~ 01A2:851B
cs=0x1a2;eip=0x00851e; 	J(CALL(sub_1852b,0));	// 20714                  call    sub_1852B ;~ 01A2:851E
cs=0x1a2;eip=0x008521; 	J(CALL(sub_19cab,0));	// 20715                  call    sub_19CAB ;~ 01A2:8521
cs=0x1a2;eip=0x008524; 	T(XOR(dh, dh));	// 20716                  xor     dh, dh ;~ 01A2:8524
cs=0x1a2;eip=0x008526; 	T(MOV(dl, *(raddr(ds,bx+1))));	// 20717                  mov     dl, [bx+1] ;~ 01A2:8526
cs=0x1a2;eip=0x008529; 	J(JMP(loc_1857f));	// 20718                  jmp     short loc_1857F ;~ 01A2:8529
seg000_853b_proc:
	// 20740 
loc_1853b:
	// 5782 
cs=0x1a2;eip=0x00853b; 	T(CMP(al, 2));	// 20741                  cmp     al, 2 ;~ 01A2:853B
cs=0x1a2;eip=0x00853d; 	J(JNZ(loc_1859b));	// 20742                  jnz     short loc_1859B ;~ 01A2:853D
cs=0x1a2;eip=0x00853f; 	T(CMP(byte_1f87b, 1));	// 20743                  cmp     ds:byte_1F87B, 1 ;~ 01A2:853F
cs=0x1a2;eip=0x008544; 	J(JNZ(loc_1855d));	// 20744                  jnz     short loc_1855D ;~ 01A2:8544
cs=0x1a2;eip=0x008546; 	X(byte_1f768 = 0x0B;);	// 20745                  mov     ds:byte_1F768, 0Bh ;~ 01A2:8546
cs=0x1a2;eip=0x00854b; 	J(CALL(sub_19cab,0));	// 20746                  call    sub_19CAB ;~ 01A2:854B
cs=0x1a2;eip=0x00854e; 	J(CALL(sub_18692,0));	// 20747                  call    sub_18692 ;~ 01A2:854E
cs=0x1a2;eip=0x008551; 	J(CALL(sub_19c97,0));	// 20748                  call    sub_19C97 ;~ 01A2:8551
cs=0x1a2;eip=0x008554; 	X(MOV(*(dw*)(raddr(ds,si)), 0x2020));	// 20749                  mov     word ptr [si], 2020h ;~ 01A2:8554
cs=0x1a2;eip=0x008558; 	T(ADD(si, 2));	// 20750                  add     si, 2 ;~ 01A2:8558
cs=0x1a2;eip=0x00855b; 	J(JMP(loc_18571));	// 20751                  jmp     short loc_18571 ;~ 01A2:855B
loc_1855d:
	// 5783 
cs=0x1a2;eip=0x00855d; 	T(ax = 5;);	// 20755                  mov     ax, 5 ;~ 01A2:855D
cs=0x1a2;eip=0x008560; 	J(CALL(sub_19cbc,0));	// 20756                  call    sub_19CBC ;~ 01A2:8560
cs=0x1a2;eip=0x008563; 	J(CALL(sub_18692,0));	// 20757                  call    sub_18692 ;~ 01A2:8563
cs=0x1a2;eip=0x008566; 	J(CALL(sub_19c97,0));	// 20758                  call    sub_19C97 ;~ 01A2:8566
cs=0x1a2;eip=0x008569; 	X(byte_1f768 = 0x0B;);	// 20759                  mov     ds:byte_1F768, 0Bh ;~ 01A2:8569
cs=0x1a2;eip=0x00856e; 	J(CALL(sub_19cab,0));	// 20760                  call    sub_19CAB ;~ 01A2:856E
loc_18571:
	// 5784 
cs=0x1a2;eip=0x008571; 	T(XOR(dh, dh));	// 20763                  xor     dh, dh ;~ 01A2:8571
cs=0x1a2;eip=0x008573; 	T(MOV(dl, *(raddr(ds,bx+2))));	// 20764                  mov     dl, [bx+2] ;~ 01A2:8573
cs=0x1a2;eip=0x008576; 	J(CALL(sub_1852b,0));	// 20765                  call    sub_1852B ;~ 01A2:8576
cs=0x1a2;eip=0x008579; 	J(CALL(sub_19cab,0));	// 20766                  call    sub_19CAB ;~ 01A2:8579
cs=0x1a2;eip=0x00857c; 	T(MOV(dl, *(raddr(ds,bx+1))));	// 20767                  mov     dl, [bx+1] ;~ 01A2:857C
loc_1857f:
	// 5785 
cs=0x1a2;eip=0x00857f; 	J(CALL(sub_1852b,0));	// 20770                  call    sub_1852B ;~ 01A2:857F
cs=0x1a2;eip=0x008582; 	T(TEST(*(raddr(ds,bx+3)), 4));	// 20771                  test    byte ptr [bx+3], 4 ;~ 01A2:8582
cs=0x1a2;eip=0x008586; 	J(JNZ(loc_1858b));	// 20772                  jnz     short loc_1858B ;~ 01A2:8586
cs=0x1a2;eip=0x008588; 	J(JMP(loc_18651));	// 20773                  jmp     loc_18651 ;~ 01A2:8588
loc_1858b:
	// 5786 
cs=0x1a2;eip=0x00858b; 	X(MOV(*(dw*)(raddr(ds,si)), 0x2020));	// 20777                  mov     word ptr [si], 2020h ;~ 01A2:858B
cs=0x1a2;eip=0x00858f; 	T(ADD(si, 2));	// 20778                  add     si, 2 ;~ 01A2:858F
cs=0x1a2;eip=0x008592; 	T(ax = 0x22;);	// 20779                  mov     ax, 22h ; '"' ;~ 01A2:8592
cs=0x1a2;eip=0x008595; 	J(CALL(sub_19cbc,0));	// 20780                  call    sub_19CBC ;~ 01A2:8595
cs=0x1a2;eip=0x008598; 	J(JMP(loc_18651));	// 20781                  jmp     loc_18651 ;~ 01A2:8598
loc_1859b:
	// 5787 
cs=0x1a2;eip=0x00859b; 	T(TEST(al, 0x80));	// 20785                  test    al, 80h ;~ 01A2:859B
cs=0x1a2;eip=0x00859d; 	J(JZ(loc_185cb));	// 20786                  jz      short loc_185CB ;~ 01A2:859D
loc_1859f:
	// 5788 
cs=0x1a2;eip=0x00859f; 	T(ax = 0x10;);	// 20789                  mov     ax, 10h ;~ 01A2:859F
cs=0x1a2;eip=0x0085a2; 	J(CALL(sub_19cbc,0));	// 20790                  call    sub_19CBC ;~ 01A2:85A2
cs=0x1a2;eip=0x0085a5; 	T(XOR(dh, dh));	// 20791                  xor     dh, dh ;~ 01A2:85A5
cs=0x1a2;eip=0x0085a7; 	T(MOV(dl, *(raddr(ds,bx+2))));	// 20792                  mov     dl, [bx+2] ;~ 01A2:85A7
cs=0x1a2;eip=0x0085aa; 	T(CMP(dl, 0x0FF));	// 20793                  cmp     dl, 0FFh ;~ 01A2:85AA
cs=0x1a2;eip=0x0085ad; 	J(JZ(loc_185b4));	// 20794                  jz      short loc_185B4 ;~ 01A2:85AD
cs=0x1a2;eip=0x0085af; 	J(CALL(sub_1852b,0));	// 20795                  call    sub_1852B ;~ 01A2:85AF
cs=0x1a2;eip=0x0085b2; 	J(JMP(loc_185ba));	// 20796                  jmp     short loc_185BA ;~ 01A2:85B2
loc_185b4:
	// 5789 
cs=0x1a2;eip=0x0085b4; 	T(ax = 0x12;);	// 20800                  mov     ax, 12h ;~ 01A2:85B4
cs=0x1a2;eip=0x0085b7; 	J(CALL(sub_19cbc,0));	// 20801                  call    sub_19CBC ;~ 01A2:85B7
loc_185ba:
	// 5790 
cs=0x1a2;eip=0x0085ba; 	T(ax = 0x11;);	// 20804                  mov     ax, 11h ;~ 01A2:85BA
cs=0x1a2;eip=0x0085bd; 	J(CALL(sub_19cbc,0));	// 20805                  call    sub_19CBC ;~ 01A2:85BD
cs=0x1a2;eip=0x0085c0; 	T(XOR(dh, dh));	// 20806                  xor     dh, dh ;~ 01A2:85C0
cs=0x1a2;eip=0x0085c2; 	T(MOV(dl, *(raddr(ds,bx+1))));	// 20807                  mov     dl, [bx+1] ;~ 01A2:85C2
cs=0x1a2;eip=0x0085c5; 	J(CALL(sub_1852b,0));	// 20808                  call    sub_1852B ;~ 01A2:85C5
cs=0x1a2;eip=0x0085c8; 	J(JMP(loc_18651));	// 20809                  jmp     loc_18651 ;~ 01A2:85C8
loc_185cb:
	// 5791 
cs=0x1a2;eip=0x0085cb; 	T(CMP(al, 4));	// 20813                  cmp     al, 4 ;~ 01A2:85CB
cs=0x1a2;eip=0x0085cd; 	J(JNZ(loc_18615));	// 20814                  jnz     short loc_18615 ;~ 01A2:85CD
cs=0x1a2;eip=0x0085cf; 	T(CMP(*(raddr(ds,bx+2)), 0));	// 20815                  cmp     byte ptr [bx+2], 0 ;~ 01A2:85CF
cs=0x1a2;eip=0x0085d3; 	J(JZ(loc_185f6));	// 20816                  jz      short loc_185F6 ;~ 01A2:85D3
cs=0x1a2;eip=0x0085d5; 	X(byte_1f768 = 0x13;);	// 20817                  mov     ds:byte_1F768, 13h ;~ 01A2:85D5
cs=0x1a2;eip=0x0085da; 	J(CALL(sub_19cab,0));	// 20818                  call    sub_19CAB ;~ 01A2:85DA
cs=0x1a2;eip=0x0085dd; 	T(MOV(dx, *(dw*)(raddr(ds,bx))));	// 20819                  mov     dx, [bx] ;~ 01A2:85DD
cs=0x1a2;eip=0x0085df; 	T(XCHG(dl, dh));	// 20820                  xchg    dl, dh ;~ 01A2:85DF
cs=0x1a2;eip=0x0085e1; 	T(ax = 2;);	// 20821                  mov     ax, 2 ;~ 01A2:85E1
cs=0x1a2;eip=0x0085e4; 	J(CALL(sub_1410e,0));	// 20822                  call    sub_1410E ;~ 01A2:85E4
cs=0x1a2;eip=0x0085e7; 	T(MOV(dx, *(dw*)(raddr(es,di+0x0A))));	// 20823                  mov     dx, es:[di+0Ah] ;~ 01A2:85E7
cs=0x1a2;eip=0x0085eb; 	J(CALL(sub_175af,0));	// 20824                  call    sub_175AF ;~ 01A2:85EB
cs=0x1a2;eip=0x0085ee; 	J(CALL(sub_19c97,0));	// 20825                  call    sub_19C97 ;~ 01A2:85EE
cs=0x1a2;eip=0x0085f1; 	J(CALL(sub_19cab,0));	// 20826                  call    sub_19CAB ;~ 01A2:85F1
cs=0x1a2;eip=0x0085f4; 	J(JMP(loc_18651));	// 20827                  jmp     short loc_18651 ;~ 01A2:85F4
loc_185f6:
	// 5792 
cs=0x1a2;eip=0x0085f6; 	T(ax = 0x15;);	// 20831                  mov     ax, 15h ;~ 01A2:85F6
cs=0x1a2;eip=0x0085f9; 	J(CALL(sub_19cbc,0));	// 20832                  call    sub_19CBC ;~ 01A2:85F9
cs=0x1a2;eip=0x0085fc; 	X(MOV(*(raddr(ds,si)), 0x20));	// 20833                  mov     byte ptr [si], 20h ; ' ' ;~ 01A2:85FC
cs=0x1a2;eip=0x0085ff; 	T(INC(si));	// 20834                  inc     si ;~ 01A2:85FF
cs=0x1a2;eip=0x008600; 	T(MOV(dx, *(dw*)(raddr(ds,bx))));	// 20835                  mov     dx, [bx] ;~ 01A2:8600
cs=0x1a2;eip=0x008602; 	T(XCHG(dl, dh));	// 20836                  xchg    dl, dh ;~ 01A2:8602
cs=0x1a2;eip=0x008604; 	T(ax = 6;);	// 20837                  mov     ax, 6 ;~ 01A2:8604
cs=0x1a2;eip=0x008607; 	J(CALL(sub_1410e,0));	// 20838                  call    sub_1410E ;~ 01A2:8607
cs=0x1a2;eip=0x00860a; 	T(XOR(ah, ah));	// 20839                  xor     ah, ah ;~ 01A2:860A
cs=0x1a2;eip=0x00860c; 	T(MOV(al, *(raddr(ds,di+0x0C))));	// 20840                  mov     al, [di+0Ch] ;~ 01A2:860C
cs=0x1a2;eip=0x00860f; 	T(bx = di;);	// 20841                  mov     bx, di ;~ 01A2:860F
cs=0x1a2;eip=0x008611; 	T(ADD(bx, ax));	// 20842                  add     bx, ax ;~ 01A2:8611
cs=0x1a2;eip=0x008613; 	J(JMP(loc_1859f));	// 20843                  jmp     short loc_1859F ;~ 01A2:8613
loc_18615:
	// 5793 
cs=0x1a2;eip=0x008615; 	T(CMP(al, 8));	// 20847                  cmp     al, 8 ;~ 01A2:8615
cs=0x1a2;eip=0x008617; 	J(JNZ(loc_18656));	// 20848                  jnz     short loc_18656 ;~ 01A2:8617
cs=0x1a2;eip=0x008619; 	T(TEST(*(raddr(ds,bx+4)), 1));	// 20849                  test    byte ptr [bx+4], 1 ;~ 01A2:8619
cs=0x1a2;eip=0x00861d; 	J(JZ(loc_18627));	// 20850                  jz      short loc_18627 ;~ 01A2:861D
cs=0x1a2;eip=0x00861f; 	T(ax = 0x16;);	// 20851                  mov     ax, 16h ;~ 01A2:861F
cs=0x1a2;eip=0x008622; 	J(CALL(sub_19cbc,0));	// 20852                  call    sub_19CBC ;~ 01A2:8622
cs=0x1a2;eip=0x008625; 	J(JMP(loc_1863e));	// 20853                  jmp     short loc_1863E ;~ 01A2:8625
loc_18627:
	// 5794 
cs=0x1a2;eip=0x008627; 	T(ax = 0x17;);	// 20857                  mov     ax, 17h ;~ 01A2:8627
cs=0x1a2;eip=0x00862a; 	J(CALL(sub_19cbc,0));	// 20858                  call    sub_19CBC ;~ 01A2:862A
cs=0x1a2;eip=0x00862d; 	T(CMP(*(dw*)(raddr(ds,bx+2)), 0));	// 20859                  cmp     word ptr [bx+2], 0 ;~ 01A2:862D
cs=0x1a2;eip=0x008631; 	J(JNZ(loc_18638));	// 20860                  jnz     short loc_18638 ;~ 01A2:8631
cs=0x1a2;eip=0x008633; 	T(ax = 0x19;);	// 20861                  mov     ax, 19h ;~ 01A2:8633
cs=0x1a2;eip=0x008636; 	J(JMP(loc_1863b));	// 20862                  jmp     short loc_1863B ;~ 01A2:8636
loc_18638:
	// 5795 
cs=0x1a2;eip=0x008638; 	T(ax = 0x18;);	// 20866                  mov     ax, 18h ;~ 01A2:8638
loc_1863b:
	// 5796 
cs=0x1a2;eip=0x00863b; 	J(CALL(sub_19cbc,0));	// 20869                  call    sub_19CBC ;~ 01A2:863B
loc_1863e:
	// 5797 
cs=0x1a2;eip=0x00863e; 	T(CMP(*(raddr(ds,bx+5)), 0));	// 20872                  cmp     byte ptr [bx+5], 0 ;~ 01A2:863E
cs=0x1a2;eip=0x008642; 	J(JZ(loc_18651));	// 20873                  jz      short loc_18651 ;~ 01A2:8642
cs=0x1a2;eip=0x008644; 	X(MOV(*(raddr(ds,si)), 0x20));	// 20874                  mov     byte ptr [si], 20h ; ' ' ;~ 01A2:8644
cs=0x1a2;eip=0x008647; 	T(INC(si));	// 20875                  inc     si ;~ 01A2:8647
cs=0x1a2;eip=0x008648; 	T(ax = 0x33;);	// 20876                  mov     ax, 33h ; '3' ;~ 01A2:8648
cs=0x1a2;eip=0x00864b; 	J(CALL(sub_19cbc,0));	// 20877                  call    sub_19CBC ;~ 01A2:864B
cs=0x1a2;eip=0x00864e; 	J(JMP(loc_18651));	// 20878                  jmp     short loc_18651 ;~ 01A2:864E
loc_18651:
	// 5798 
cs=0x1a2;eip=0x008651; 	T(ax = 1;);	// 20887                  mov     ax, 1 ;~ 01A2:8651
cs=0x1a2;eip=0x008654; 	J(JMP(loc_18658));	// 20888                  jmp     short loc_18658 ;~ 01A2:8654
loc_18656:
	// 5799 
cs=0x1a2;eip=0x008656; 	T(XOR(ax, ax));	// 20892                  xor     ax, ax ;~ 01A2:8656
loc_18658:
	// 5800 
cs=0x1a2;eip=0x008658; 	X(MOV(*(raddr(ds,si)), 0));	// 20895                  mov     byte ptr [si], 0 ;~ 01A2:8658
cs=0x1a2;eip=0x00865b; 	T(OR(ax, ax));	// 20896                  or      ax, ax ;~ 01A2:865B
cs=0x1a2;eip=0x00865d; 	J(RETN(0));	// 20897                  retn ;~ 01A2:865D
loc_1865e:
	// 5801 
cs=0x1a2;eip=0x00865e; 	T(XOR(ah, ah));	// 20902                  xor     ah, ah ;~ 01A2:865E
cs=0x1a2;eip=0x008660; 	T(MOV(al, *(raddr(ds,bx+0x0C))));	// 20903                  mov     al, [bx+0Ch] ;~ 01A2:8660
cs=0x1a2;eip=0x008663; 	T(ADD(bx, ax));	// 20904                  add     bx, ax ;~ 01A2:8663
sub_18665:
	// 20909 
cs=0x1a2;eip=0x008665; 	T(TEST(*(raddr(ds,bx+3)), 1));	// 20911                  test    byte ptr [bx+3], 1 ;~ 01A2:8665
cs=0x1a2;eip=0x008669; 	J(JNZ(loc_18684));	// 20912                  jnz     short loc_18684 ;~ 01A2:8669
cs=0x1a2;eip=0x00866b; 	T(XOR(ah, ah));	// 20913                  xor     ah, ah ;~ 01A2:866B
cs=0x1a2;eip=0x00866d; 	T(MOV(al, *(raddr(ds,bx))));	// 20914                  mov     al, [bx] ;~ 01A2:866D
cs=0x1a2;eip=0x00866f; 	X(PUSH(si));	// 20915                  push    si ;~ 01A2:866F
cs=0x1a2;eip=0x008670; 	T(si = word_1f1b4;);	// 20916                  mov     si, word_1F1B4 ;~ 01A2:8670
cs=0x1a2;eip=0x008674; 	T(dx = 8;);	// 20917                  mov     dx, 8 ;~ 01A2:8674
cs=0x1a2;eip=0x008677; 	T(MUL1_2(dx));	// 20918                  mul     dx ;~ 01A2:8677
cs=0x1a2;eip=0x008679; 	T(ADD(si, ax));	// 20919                  add     si, ax ;~ 01A2:8679
cs=0x1a2;eip=0x00867b; 	T(MOV(dx, *(dw*)(raddr(ds,si))));	// 20920                  mov     dx, [si] ;~ 01A2:867B
cs=0x1a2;eip=0x00867d; 	T(XCHG(dl, dh));	// 20921                  xchg    dl, dh ;~ 01A2:867D
cs=0x1a2;eip=0x00867f; 	X(POP(si));	// 20922                  pop     si ;~ 01A2:867F
cs=0x1a2;eip=0x008680; 	J(CALL(sub_175af,0));	// 20923                  call    sub_175AF ;~ 01A2:8680
cs=0x1a2;eip=0x008683; 	J(RETN(0));	// 20924                  retn ;~ 01A2:8683
loc_18684:
	// 5802 
cs=0x1a2;eip=0x008684; 	T(dx = 0x27;);	// 20929                  mov     dx, 27h ; ''' ;~ 01A2:8684
cs=0x1a2;eip=0x008687; 	J(CALL(sub_175af,0));	// 20930                  call    sub_175AF ;~ 01A2:8687
cs=0x1a2;eip=0x00868a; 	J(RETN(0));	// 20931                  retn ;~ 01A2:868A
sub_18692:
	// 20944 
cs=0x1a2;eip=0x008692; 	T(TEST(*(raddr(ds,bx+3)), 1));	// 20946                  test    byte ptr [bx+3], 1 ;~ 01A2:8692
cs=0x1a2;eip=0x008696; 	J(JNZ(loc_18684));	// 20947                  jnz     short loc_18684 ;~ 01A2:8696
cs=0x1a2;eip=0x008698; 	T(XOR(ah, ah));	// 20948                  xor     ah, ah ;~ 01A2:8698
cs=0x1a2;eip=0x00869a; 	T(MOV(al, *(raddr(ds,bx))));	// 20949                  mov     al, [bx] ;~ 01A2:869A
cs=0x1a2;eip=0x00869c; 	X(PUSH(si));	// 20950                  push    si ;~ 01A2:869C
cs=0x1a2;eip=0x00869d; 	T(si = word_1f1b6;);	// 20951                  mov     si, word_1F1B6 ;~ 01A2:869D
cs=0x1a2;eip=0x0086a1; 	T(dx = 8;);	// 20952                  mov     dx, 8 ;~ 01A2:86A1
cs=0x1a2;eip=0x0086a4; 	T(MUL1_2(dx));	// 20953                  mul     dx ;~ 01A2:86A4
cs=0x1a2;eip=0x0086a6; 	T(ADD(si, ax));	// 20954                  add     si, ax ;~ 01A2:86A6
cs=0x1a2;eip=0x0086a8; 	T(MOV(dx, *(dw*)(raddr(ds,si))));	// 20955                  mov     dx, [si] ;~ 01A2:86A8
cs=0x1a2;eip=0x0086aa; 	T(XCHG(dl, dh));	// 20956                  xchg    dl, dh ;~ 01A2:86AA
cs=0x1a2;eip=0x0086ac; 	X(POP(si));	// 20957                  pop     si ;~ 01A2:86AC
cs=0x1a2;eip=0x0086ad; 	J(CALL(sub_175af,0));	// 20958                  call    sub_175AF ;~ 01A2:86AD
cs=0x1a2;eip=0x0086b0; 	J(RETN(0));	// 20959                  retn ;~ 01A2:86B0

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_18505: 	goto loc_18505;
        case m2c::kloc_18519: 	goto loc_18519;
        case m2c::kloc_1855d: 	goto loc_1855d;
        case m2c::kloc_18571: 	goto loc_18571;
        case m2c::kloc_1857f: 	goto loc_1857f;
        case m2c::kloc_1858b: 	goto loc_1858b;
        case m2c::kloc_1859b: 	goto loc_1859b;
        case m2c::kloc_1859f: 	goto loc_1859f;
        case m2c::kloc_185b4: 	goto loc_185b4;
        case m2c::kloc_185ba: 	goto loc_185ba;
        case m2c::kloc_185cb: 	goto loc_185cb;
        case m2c::kloc_185f6: 	goto loc_185f6;
        case m2c::kloc_18615: 	goto loc_18615;
        case m2c::kloc_18627: 	goto loc_18627;
        case m2c::kloc_18638: 	goto loc_18638;
        case m2c::kloc_1863b: 	goto loc_1863b;
        case m2c::kloc_1863e: 	goto loc_1863e;
        case m2c::kloc_18651: 	goto loc_18651;
        case m2c::kloc_18656: 	goto loc_18656;
        case m2c::kloc_18658: 	goto loc_18658;
        case m2c::kloc_1865e: 	goto loc_1865e;
        case m2c::kloc_18684: 	goto loc_18684;
        case m2c::kseg000_853b_proc: 	goto seg000_853b_proc;
        case m2c::ksub_184d9: 	goto sub_184d9;
        case m2c::ksub_18665: 	goto sub_18665;
        case m2c::ksub_18692: 	goto sub_18692;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1852b(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1852b:
    _begin:
cs=0x1a2;eip=0x00852b; 	X(PUSH(si));	// 20727                  push    si ;~ 01A2:852B
cs=0x1a2;eip=0x00852c; 	T(cl = 0x0FF;);	// 20728                  mov     cl, 0FFh ;~ 01A2:852C
cs=0x1a2;eip=0x00852e; 	T(si = 0x0B90;);	// 20729                  mov     si, 0B90h ;~ 01A2:852E
cs=0x1a2;eip=0x008531; 	J(CALL(sub_19ba0,m2c::kloc_19bb7));	// 20730                  call    loc_19BB7 ;~ 01A2:8531
cs=0x1a2;eip=0x008534; 	T(di = si;);	// 20731                  mov     di, si ;~ 01A2:8534
cs=0x1a2;eip=0x008536; 	X(POP(si));	// 20732                  pop     si ;~ 01A2:8536
cs=0x1a2;eip=0x008537; 	J(CALL(sub_19c97,0));	// 20733                  call    sub_19C97 ;~ 01A2:8537
cs=0x1a2;eip=0x00853a; 	J(RETN(0));	// 20734                  retn ;~ 01A2:853A

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1852b: 	goto sub_1852b;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group24(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group24:
    _begin:
seg000_868b_proc:
	// 20936 
loc_1868b:
	// 5803 
cs=0x1a2;eip=0x00868b; 	T(XOR(ah, ah));	// 20937                  xor     ah, ah ;~ 01A2:868B
cs=0x1a2;eip=0x00868d; 	T(MOV(al, *(raddr(ds,bx+0x0C))));	// 20938                  mov     al, [bx+0Ch] ;~ 01A2:868D
cs=0x1a2;eip=0x008690; 	T(ADD(bx, ax));	// 20939                  add     bx, ax ;~ 01A2:8690

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kseg000_868b_proc: 	goto seg000_868b_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_86b1_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_86b1_proc:
    _begin:
cs=0x1a2;eip=0x0086b1; 	X(PUSH(ax));	// 20963                  push    ax ;~ 01A2:86B1
cs=0x1a2;eip=0x0086b2; 	T(LODSW);	// 20964                  lodsw ;~ 01A2:86B2
cs=0x1a2;eip=0x0086b3; 	T(XCHG(al, ah));	// 20965                  xchg    al, ah ;~ 01A2:86B3
cs=0x1a2;eip=0x0086b5; 	T(dx = ax;);	// 20966                  mov     dx, ax ;~ 01A2:86B5
cs=0x1a2;eip=0x0086b7; 	X(POP(ax));	// 20967                  pop     ax ;~ 01A2:86B7
cs=0x1a2;eip=0x0086b8; 	J(CALL(sub_175af,0));	// 20968                  call    sub_175AF ;~ 01A2:86B8
cs=0x1a2;eip=0x0086bb; 	X(PUSH(si));	// 20969                  push    si ;~ 01A2:86BB
cs=0x1a2;eip=0x0086bc; 	T(si = di;);	// 20970                  mov     si, di ;~ 01A2:86BC
cs=0x1a2;eip=0x0086be; 	J(CALL(sub_1d445,0));	// 20971                  call    sub_1D445 ;~ 01A2:86BE
cs=0x1a2;eip=0x0086c1; 	T(cl = 0x0C;);	// 20972                  mov     cl, 0Ch ;~ 01A2:86C1
cs=0x1a2;eip=0x0086c3; 	J(CALL(sub_13555,0));	// 20973                  call    sub_13555 ;~ 01A2:86C3
cs=0x1a2;eip=0x0086c6; 	J(CALL(sub_1d445,0));	// 20974                  call    sub_1D445 ;~ 01A2:86C6
cs=0x1a2;eip=0x0086c9; 	X(POP(si));	// 20975                  pop     si ;~ 01A2:86C9
cs=0x1a2;eip=0x0086ca; 	J(RETN(0));	// 20976                  retn ;~ 01A2:86CA
loc_186cb:
	// 5804 
cs=0x1a2;eip=0x0086cb; 	X(PUSH(bx));	// 20980                  push    bx ;~ 01A2:86CB
cs=0x1a2;eip=0x0086cc; 	T(bx = 2;);	// 20981                  mov     bx, 2 ;~ 01A2:86CC
cs=0x1a2;eip=0x0086cf; 	J(return sub_186d1(m2c::kloc_186d5, _state););	// 20982                  jmp     short loc_186D5 ;~ 01A2:86CF

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_186cb: 	goto loc_186cb;
        case m2c::kseg000_86b1_proc: 	goto seg000_86b1_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_186d1(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_186d1:
    _begin:
cs=0x1a2;eip=0x0086d1; 	X(PUSH(bx));	// 20988                  push    bx ;~ 01A2:86D1
cs=0x1a2;eip=0x0086d2; 	T(bx = 0;);	// 20989                  mov     bx, 0 ;~ 01A2:86D2
loc_186d5:
	// 5805 
cs=0x1a2;eip=0x0086d5; 	T(al = 8;);	// 20992                  mov     al, 8 ;~ 01A2:86D5
cs=0x1a2;eip=0x0086d7; 	T(dx = 0x0FFFF;);	// 20993                  mov     dx, 0FFFFh ;~ 01A2:86D7
loc_186da:
	// 5806 
cs=0x1a2;eip=0x0086da; 	T(INC(dx));	// 20996                  inc     dx ;~ 01A2:86DA
cs=0x1a2;eip=0x0086db; 	J(CALL(sub_1415c,0));	// 20997                  call    sub_1415C ;~ 01A2:86DB
cs=0x1a2;eip=0x0086de; 	T(OR(dx, dx));	// 20998                  or      dx, dx ;~ 01A2:86DE
cs=0x1a2;eip=0x0086e0; 	J(JS(loc_186ed));	// 20999                  js      short loc_186ED ;~ 01A2:86E0
cs=0x1a2;eip=0x0086e2; 	T(CMP(cx, *(dw*)(raddr(ds,bx+di))));	// 21000                  cmp     cx, [bx+di] ;~ 01A2:86E2
cs=0x1a2;eip=0x0086e4; 	J(JNZ(loc_186da));	// 21001                  jnz     short loc_186DA ;~ 01A2:86E4
cs=0x1a2;eip=0x0086e6; 	X(POP(bx));	// 21002                  pop     bx ;~ 01A2:86E6
cs=0x1a2;eip=0x0086e7; 	T(ax = 1;);	// 21003                  mov     ax, 1 ;~ 01A2:86E7
loc_186ea:
	// 5807 
cs=0x1a2;eip=0x0086ea; 	T(OR(ax, ax));	// 21006                  or      ax, ax ;~ 01A2:86EA
cs=0x1a2;eip=0x0086ec; 	J(RETN(0));	// 21007                  retn ;~ 01A2:86EC
loc_186ed:
	// 5808 
cs=0x1a2;eip=0x0086ed; 	X(POP(bx));	// 21011                  pop     bx ;~ 01A2:86ED
cs=0x1a2;eip=0x0086ee; 	T(XOR(ax, ax));	// 21012                  xor     ax, ax ;~ 01A2:86EE
cs=0x1a2;eip=0x0086f0; 	J(JMP(loc_186ea));	// 21013                  jmp     short loc_186EA ;~ 01A2:86F0

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_186d5: 	goto loc_186d5;
        case m2c::kloc_186da: 	goto loc_186da;
        case m2c::kloc_186ea: 	goto loc_186ea;
        case m2c::kloc_186ed: 	goto loc_186ed;
        case m2c::ksub_186d1: 	goto sub_186d1;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_186f2(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_186f2:
    _begin:
cs=0x1a2;eip=0x0086f2; 	X(PUSH(ax));	// 21021                  push    ax ;~ 01A2:86F2
cs=0x1a2;eip=0x0086f3; 	X(PUSH(bx));	// 21022                  push    bx ;~ 01A2:86F3
cs=0x1a2;eip=0x0086f4; 	T(ax = *(dw*)(((db*)&seg_1f171)+1););	// 21023                  mov     ax, seg_1F171+1 ;~ 01A2:86F4
cs=0x1a2;eip=0x0086f7; 	T(bx = *(dw*)(&unk_1f170););	// 21024                  mov     bx, word ptr unk_1F170 ;~ 01A2:86F7
cs=0x1a2;eip=0x0086fb; 	T(XCHG(ax, bx));	// 21025                  xchg    ax, bx ;~ 01A2:86FB
cs=0x1a2;eip=0x0086fc; 	X(*(dw*)(((db*)&seg_1f171)+1) = ax;);	// 21026                  mov     seg_1F171+1, ax ;~ 01A2:86FC
cs=0x1a2;eip=0x0086ff; 	X(*(dw*)(&unk_1f170) = bx;);	// 21027                  mov     word ptr unk_1F170, bx ;~ 01A2:86FF
cs=0x1a2;eip=0x008703; 	X(POP(bx));	// 21028                  pop     bx ;~ 01A2:8703
cs=0x1a2;eip=0x008704; 	X(POP(ax));	// 21029                  pop     ax ;~ 01A2:8704
cs=0x1a2;eip=0x008705; 	J(RETN(0));	// 21030                  retn ;~ 01A2:8705

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_186f2: 	goto sub_186f2;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_18706(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_18706:
    _begin:
cs=0x1a2;eip=0x008706; 	X(PUSH(dx));	// 21039                  push    dx ;~ 01A2:8706
cs=0x1a2;eip=0x008707; 	X(PUSH(ax));	// 21040                  push    ax ;~ 01A2:8707
cs=0x1a2;eip=0x008708; 	T(dx = 0x3DA;);	// 21041                  mov     dx, 3DAh ;~ 01A2:8708
cs=0x1a2;eip=0x00870b; 	S(IN(al, dx));	// 21042                  in      al, dx          ; Video status bits: ;~ 01A2:870B
cs=0x1a2;eip=0x00870c; 	T(TEST(al, 8));	// 21047                  test    al, 8 ;~ 01A2:870C
cs=0x1a2;eip=0x00870e; 	S(IN(al, dx));	// 21048                  in      al, dx          ; Video status bits: ;~ 01A2:870E
cs=0x1a2;eip=0x00870f; 	T(TEST(al, 8));	// 21053                  test    al, 8 ;~ 01A2:870F
cs=0x1a2;eip=0x008711; 	X(POP(ax));	// 21054                  pop     ax ;~ 01A2:8711
cs=0x1a2;eip=0x008712; 	X(POP(dx));	// 21055                  pop     dx ;~ 01A2:8712
cs=0x1a2;eip=0x008713; 	J(RETN(0));	// 21056                  retn ;~ 01A2:8713

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_18706: 	goto sub_18706;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_18714(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_18714:
    _begin:
cs=0x1a2;eip=0x008714; 	X(PUSH(ax));	// 21065                  push    ax ;~ 01A2:8714
cs=0x1a2;eip=0x008715; 	X(PUSH(bx));	// 21066                  push    bx ;~ 01A2:8715
cs=0x1a2;eip=0x008716; 	X(PUSH(cx));	// 21067                  push    cx ;~ 01A2:8716
cs=0x1a2;eip=0x008717; 	X(PUSH(dx));	// 21068                  push    dx ;~ 01A2:8717
cs=0x1a2;eip=0x008718; 	X(PUSH(bp));	// 21069                  push    bp ;~ 01A2:8718
cs=0x1a2;eip=0x008719; 	X(PUSH(si));	// 21070                  push    si ;~ 01A2:8719
cs=0x1a2;eip=0x00871a; 	X(PUSH(di));	// 21071                  push    di ;~ 01A2:871A
cs=0x1a2;eip=0x00871b; 	X(PUSH(es));	// 21072                  push    es ;~ 01A2:871B
cs=0x1a2;eip=0x00871c; 	X(PUSH(ds));	// 21073                  push    ds ;~ 01A2:871C
cs=0x1a2;eip=0x00871d; 	T(cl = dh;);	// 21074                  mov     cl, dh ;~ 01A2:871D
cs=0x1a2;eip=0x00871f; 	T(dx = ax;);	// 21075                  mov     dx, ax ;~ 01A2:871F
cs=0x1a2;eip=0x008721; 	X(PUSH(dx));	// 21076                  push    dx ;~ 01A2:8721
cs=0x1a2;eip=0x008722; 	J(CALL(sub_19c41,0));	// 21077                  call    sub_19C41 ;~ 01A2:8722
cs=0x1a2;eip=0x008725; 	T(ax = dx;);	// 21078                  mov     ax, dx ;~ 01A2:8725
cs=0x1a2;eip=0x008727; 	T(dx = 6;);	// 21079                  mov     dx, 6 ;~ 01A2:8727
cs=0x1a2;eip=0x00872a; 	T(MUL1_2(dx));	// 21080                  mul     dx ;~ 01A2:872A
cs=0x1a2;eip=0x00872c; 	T(SUB(ch, al));	// 21081                  sub     ch, al ;~ 01A2:872C
cs=0x1a2;eip=0x00872e; 	X(POP(dx));	// 21082                  pop     dx ;~ 01A2:872E
cs=0x1a2;eip=0x00872f; 	T(SHR(ch, 1));	// 21083                  shr     ch, 1 ;~ 01A2:872F
cs=0x1a2;eip=0x008731; 	T(ADD(dl, ch));	// 21084                  add     dl, ch ;~ 01A2:8731
cs=0x1a2;eip=0x008733; 	T(ADC(dh, 0));	// 21085                  adc     dh, 0 ;~ 01A2:8733
cs=0x1a2;eip=0x008736; 	J(return sub_18738(m2c::kloc_18783, _state););	// 21086                  jmp     short loc_18783 ;~ 01A2:8736

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_18714: 	goto sub_18714;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_18738(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_18738:
    _begin:
cs=0x1a2;eip=0x008738; 	X(PUSH(ax));	// 21095                  push    ax ;~ 01A2:8738
cs=0x1a2;eip=0x008739; 	X(PUSH(bx));	// 21096                  push    bx ;~ 01A2:8739
cs=0x1a2;eip=0x00873a; 	X(PUSH(cx));	// 21097                  push    cx ;~ 01A2:873A
cs=0x1a2;eip=0x00873b; 	X(PUSH(dx));	// 21098                  push    dx ;~ 01A2:873B
cs=0x1a2;eip=0x00873c; 	X(PUSH(bp));	// 21099                  push    bp ;~ 01A2:873C
cs=0x1a2;eip=0x00873d; 	X(PUSH(si));	// 21100                  push    si ;~ 01A2:873D
cs=0x1a2;eip=0x00873e; 	X(PUSH(di));	// 21101                  push    di ;~ 01A2:873E
cs=0x1a2;eip=0x00873f; 	X(PUSH(es));	// 21102                  push    es ;~ 01A2:873F
cs=0x1a2;eip=0x008740; 	X(PUSH(ds));	// 21103                  push    ds ;~ 01A2:8740
cs=0x1a2;eip=0x008741; 	T(cl = dh;);	// 21104                  mov     cl, dh ;~ 01A2:8741
cs=0x1a2;eip=0x008743; 	T(dx = ax;);	// 21105                  mov     dx, ax ;~ 01A2:8743
cs=0x1a2;eip=0x008745; 	X(PUSH(dx));	// 21106                  push    dx ;~ 01A2:8745
cs=0x1a2;eip=0x008746; 	J(CALL(sub_19c41,0));	// 21107                  call    sub_19C41 ;~ 01A2:8746
cs=0x1a2;eip=0x008749; 	T(ax = dx;);	// 21108                  mov     ax, dx ;~ 01A2:8749
cs=0x1a2;eip=0x00874b; 	T(dx = 7;);	// 21109                  mov     dx, 7 ;~ 01A2:874B
cs=0x1a2;eip=0x00874e; 	T(MUL1_2(dx));	// 21110                  mul     dx ;~ 01A2:874E
cs=0x1a2;eip=0x008750; 	T(SUB(ch, al));	// 21111                  sub     ch, al ;~ 01A2:8750
cs=0x1a2;eip=0x008752; 	X(POP(dx));	// 21112                  pop     dx ;~ 01A2:8752
cs=0x1a2;eip=0x008753; 	T(SHR(ch, 1));	// 21113                  shr     ch, 1 ;~ 01A2:8753
cs=0x1a2;eip=0x008755; 	T(ADD(dl, ch));	// 21114                  add     dl, ch ;~ 01A2:8755
cs=0x1a2;eip=0x008757; 	T(ADC(dh, 0));	// 21115                  adc     dh, 0 ;~ 01A2:8757
cs=0x1a2;eip=0x00875a; 	X(word_1f3c4 = 6;);	// 21116                  mov     ds:word_1F3C4, 6 ;~ 01A2:875A
cs=0x1a2;eip=0x008760; 	X(word_1f3c6 = 6;);	// 21117                  mov     ds:word_1F3C6, 6 ;~ 01A2:8760
cs=0x1a2;eip=0x008766; 	T(si = word_1f218;);	// 21118                  mov     si, word_1F218 ;~ 01A2:8766
cs=0x1a2;eip=0x00876a; 	X(word_1f1ee = si;);	// 21119                  mov     word_1F1EE, si ;~ 01A2:876A
cs=0x1a2;eip=0x00876e; 	X(word_1f3c8 = 1;);	// 21120                  mov     ds:word_1F3C8, 1 ;~ 01A2:876E
cs=0x1a2;eip=0x008774; 	J(JMP(loc_187ac));	// 21121                  jmp     short loc_187AC ;~ 01A2:8774
loc_18776:
	// 5809 
cs=0x1a2;eip=0x008776; 	X(PUSH(ax));	// 21126                  push    ax ;~ 01A2:8776
cs=0x1a2;eip=0x008777; 	X(PUSH(bx));	// 21127                  push    bx ;~ 01A2:8777
cs=0x1a2;eip=0x008778; 	X(PUSH(cx));	// 21128                  push    cx ;~ 01A2:8778
cs=0x1a2;eip=0x008779; 	X(PUSH(dx));	// 21129                  push    dx ;~ 01A2:8779
cs=0x1a2;eip=0x00877a; 	X(PUSH(bp));	// 21130                  push    bp ;~ 01A2:877A
cs=0x1a2;eip=0x00877b; 	X(PUSH(si));	// 21131                  push    si ;~ 01A2:877B
cs=0x1a2;eip=0x00877c; 	X(PUSH(di));	// 21132                  push    di ;~ 01A2:877C
cs=0x1a2;eip=0x00877d; 	X(PUSH(es));	// 21133                  push    es ;~ 01A2:877D
cs=0x1a2;eip=0x00877e; 	X(PUSH(ds));	// 21134                  push    ds ;~ 01A2:877E
cs=0x1a2;eip=0x00877f; 	T(cl = dh;);	// 21135                  mov     cl, dh ;~ 01A2:877F
cs=0x1a2;eip=0x008781; 	T(dx = ax;);	// 21136                  mov     dx, ax ;~ 01A2:8781
loc_18783:
	// 5810 
cs=0x1a2;eip=0x008783; 	X(word_1f3c4 = 5;);	// 21139                  mov     ds:word_1F3C4, 5 ;~ 01A2:8783
cs=0x1a2;eip=0x008789; 	X(word_1f3c6 = 5;);	// 21140                  mov     ds:word_1F3C6, 5 ;~ 01A2:8789
cs=0x1a2;eip=0x00878f; 	T(si = word_1f216;);	// 21141                  mov     si, word_1F216 ;~ 01A2:878F
cs=0x1a2;eip=0x008793; 	X(word_1f1ee = si;);	// 21142                  mov     word_1F1EE, si ;~ 01A2:8793
cs=0x1a2;eip=0x008797; 	X(word_1f3c8 = 1;);	// 21143                  mov     ds:word_1F3C8, 1 ;~ 01A2:8797
cs=0x1a2;eip=0x00879d; 	J(JMP(loc_187ac));	// 21144                  jmp     short loc_187AC ;~ 01A2:879D
ret_1a2_879f:
	// 5811 
cs=0x1a2;eip=0x00879f; 	X(PUSH(ax));	// 21146                  push    ax ;~ 01A2:879F
cs=0x1a2;eip=0x0087a0; 	X(PUSH(bx));	// 21147                  push    bx ;~ 01A2:87A0
cs=0x1a2;eip=0x0087a1; 	X(PUSH(cx));	// 21148                  push    cx ;~ 01A2:87A1
cs=0x1a2;eip=0x0087a2; 	X(PUSH(dx));	// 21149                  push    dx ;~ 01A2:87A2
cs=0x1a2;eip=0x0087a3; 	X(PUSH(bp));	// 21150                  push    bp ;~ 01A2:87A3
cs=0x1a2;eip=0x0087a4; 	X(PUSH(si));	// 21151                  push    si ;~ 01A2:87A4
cs=0x1a2;eip=0x0087a5; 	X(PUSH(di));	// 21152                  push    di ;~ 01A2:87A5
cs=0x1a2;eip=0x0087a6; 	X(PUSH(es));	// 21153                  push    es ;~ 01A2:87A6
cs=0x1a2;eip=0x0087a7; 	X(PUSH(ds));	// 21154                  push    ds ;~ 01A2:87A7
cs=0x1a2;eip=0x0087a8; 	T(cl = dh;);	// 21155                  mov     cl, dh ;~ 01A2:87A8
cs=0x1a2;eip=0x0087aa; 	T(dx = ax;);	// 21156                  mov     dx, ax ;~ 01A2:87AA
loc_187ac:
	// 5812 
cs=0x1a2;eip=0x0087ac; 	X(INC(word_1f3c6));	// 21160                  inc     ds:word_1F3C6 ;~ 01A2:87AC
cs=0x1a2;eip=0x0087b0; 	T(si = di;);	// 21161                  mov     si, di ;~ 01A2:87B0
cs=0x1a2;eip=0x0087b2; 	T(bp = dx;);	// 21162                  mov     bp, dx ;~ 01A2:87B2
loc_187b4:
	// 5813 
cs=0x1a2;eip=0x0087b4; 	T(LODSB);	// 21166                  lodsb ;~ 01A2:87B4
cs=0x1a2;eip=0x0087b5; 	T(OR(al, al));	// 21167                  or      al, al ;~ 01A2:87B5
cs=0x1a2;eip=0x0087b7; 	J(JZ(loc_18831));	// 21168                  jz      short loc_18831 ;~ 01A2:87B7
cs=0x1a2;eip=0x0087b9; 	T(CMP(al, 0x20));	// 21169                  cmp     al, 20h ; ' ' ;~ 01A2:87B9
cs=0x1a2;eip=0x0087bb; 	J(JZ(loc_1882b));	// 21170                  jz      short loc_1882B ;~ 01A2:87BB
cs=0x1a2;eip=0x0087bd; 	J(JGE(loc_187e1));	// 21171                  jge     short loc_187E1 ;~ 01A2:87BD
cs=0x1a2;eip=0x0087bf; 	T(CMP(al, 1));	// 21172                  cmp     al, 1 ;~ 01A2:87BF
cs=0x1a2;eip=0x0087c1; 	J(JNZ(loc_187d1));	// 21173                  jnz     short loc_187D1 ;~ 01A2:87C1
cs=0x1a2;eip=0x0087c3; 	T(LODSB);	// 21174                  lodsb ;~ 01A2:87C3
cs=0x1a2;eip=0x0087c4; 	T(dh = al;);	// 21175                  mov     dh, al ;~ 01A2:87C4
cs=0x1a2;eip=0x0087c6; 	T(LODSB);	// 21176                  lodsb ;~ 01A2:87C6
cs=0x1a2;eip=0x0087c7; 	T(dl = al;);	// 21177                  mov     dl, al ;~ 01A2:87C7
cs=0x1a2;eip=0x0087c9; 	T(LODSB);	// 21178                  lodsb ;~ 01A2:87C9
cs=0x1a2;eip=0x0087ca; 	T(LODSB);	// 21179                  lodsb ;~ 01A2:87CA
cs=0x1a2;eip=0x0087cb; 	T(cl = al;);	// 21180                  mov     cl, al ;~ 01A2:87CB
cs=0x1a2;eip=0x0087cd; 	T(bp = dx;);	// 21181                  mov     bp, dx ;~ 01A2:87CD
cs=0x1a2;eip=0x0087cf; 	J(JMP(loc_187b4));	// 21182                  jmp     short loc_187B4 ;~ 01A2:87CF
loc_187d1:
	// 5814 
cs=0x1a2;eip=0x0087d1; 	T(CMP(al, 0x0D));	// 21186                  cmp     al, 0Dh ;~ 01A2:87D1
cs=0x1a2;eip=0x0087d3; 	J(JNZ(loc_187e1));	// 21187                  jnz     short loc_187E1 ;~ 01A2:87D3
cs=0x1a2;eip=0x0087d5; 	T(dx = bp;);	// 21188                  mov     dx, bp ;~ 01A2:87D5
cs=0x1a2;eip=0x0087d7; 	T(ADD(cx, word_1f3c4));	// 21189                  add     cx, ds:word_1F3C4 ;~ 01A2:87D7
cs=0x1a2;eip=0x0087db; 	T(ADD(cx, word_1f3c8));	// 21190                  add     cx, ds:word_1F3C8 ;~ 01A2:87DB
cs=0x1a2;eip=0x0087df; 	J(JMP(loc_187b4));	// 21191                  jmp     short loc_187B4 ;~ 01A2:87DF
loc_187e1:
	// 5815 
cs=0x1a2;eip=0x0087e1; 	T(CMP(byte_1f829, 0));	// 21196                  cmp     ds:byte_1F829, 0 ;~ 01A2:87E1
cs=0x1a2;eip=0x0087e6; 	J(JNZ(loc_187ee));	// 21197                  jnz     short loc_187EE ;~ 01A2:87E6
cs=0x1a2;eip=0x0087e8; 	J(JMP(loc_187ee));	// 21198                  jmp     short loc_187EE ;~ 01A2:87E8
ret_1a2_87ea:
	// 5816 
cs=0x1a2;eip=0x0087ea; 	T(CMP(al, 0x20));	// 21200                  cmp     al, 20h ; ' ' ;~ 01A2:87EA
cs=0x1a2;eip=0x0087ec; 	J({;});	// 21201                  jz      short $+2 ;~ 01A2:87EC
loc_187ee:
	// 5817 
cs=0x1a2;eip=0x0087ee; 	T(CMP(al, 0x41));	// 21205                  cmp     al, 41h ; 'A' ;~ 01A2:87EE
cs=0x1a2;eip=0x0087f0; 	J(JGE(loc_187fa));	// 21206                  jge     short loc_187FA ;~ 01A2:87F0
cs=0x1a2;eip=0x0087f2; 	T(bx = 0x0FA40;);	// 21207                  mov     bx, 0FA40h ;~ 01A2:87F2
cs=0x1a2;eip=0x0087f5; 	T(SUB(al, 0x21));	// 21208                  sub     al, 21h ; '!' ;~ 01A2:87F5
cs=0x1a2;eip=0x0087f7; 	T(XLAT);	// 21209                  xlat ;~ 01A2:87F7
cs=0x1a2;eip=0x0087f8; 	J(JMP(loc_187fc));	// 21210                  jmp     short loc_187FC ;~ 01A2:87F8
loc_187fa:
	// 5818 
cs=0x1a2;eip=0x0087fa; 	T(SUB(al, 0x41));	// 21214                  sub     al, 41h ; 'A' ;~ 01A2:87FA
loc_187fc:
	// 5819 
cs=0x1a2;eip=0x0087fc; 	X(PUSH(cx));	// 21217                  push    cx ;~ 01A2:87FC
cs=0x1a2;eip=0x0087fd; 	X(PUSH(dx));	// 21218                  push    dx ;~ 01A2:87FD
cs=0x1a2;eip=0x0087fe; 	X(PUSH(si));	// 21219                  push    si ;~ 01A2:87FE
cs=0x1a2;eip=0x0087ff; 	X(PUSH(dx));	// 21220                  push    dx ;~ 01A2:87FF
cs=0x1a2;eip=0x008800; 	X(PUSH(cx));	// 21221                  push    cx ;~ 01A2:8800
cs=0x1a2;eip=0x008801; 	T(bl = al;);	// 21222                  mov     bl, al ;~ 01A2:8801
cs=0x1a2;eip=0x008803; 	T(XOR(bh, bh));	// 21223                  xor     bh, bh ;~ 01A2:8803
cs=0x1a2;eip=0x008805; 	T(ax = word_1f3c4;);	// 21224                  mov     ax, ds:word_1F3C4 ;~ 01A2:8805
cs=0x1a2;eip=0x008808; 	T(dx = 4;);	// 21225                  mov     dx, 4 ;~ 01A2:8808
cs=0x1a2;eip=0x00880b; 	T(MUL1_2(dx));	// 21226                  mul     dx ;~ 01A2:880B
cs=0x1a2;eip=0x00880d; 	T(MUL1_2(bx));	// 21227                  mul     bx ;~ 01A2:880D
cs=0x1a2;eip=0x00880f; 	T(ADD(ax, word_1f1ee));	// 21228                  add     ax, word_1F1EE ;~ 01A2:880F
cs=0x1a2;eip=0x008813; 	T(si = ax;);	// 21229                  mov     si, ax ;~ 01A2:8813
cs=0x1a2;eip=0x008815; 	T(cx = seg_1f8b6;);	// 21230                  mov     cx, ds:seg_1F8B6 ;~ 01A2:8815
cs=0x1a2;eip=0x008819; 	X(*(dw*)(((db*)&off_1f8c8)+2) = cx;);	// 21231                  mov     word ptr ds:off_1F8C8+2, cx ;~ 01A2:8819
cs=0x1a2;eip=0x00881d; 	T(cx = word_1f3c4;);	// 21232                  mov     cx, ds:word_1F3C4 ;~ 01A2:881D
cs=0x1a2;eip=0x008821; 	X(POP(dx));	// 21233                  pop     dx ;~ 01A2:8821
cs=0x1a2;eip=0x008822; 	X(POP(ax));	// 21234                  pop     ax ;~ 01A2:8822
cs=0x1a2;eip=0x008823; 	T(XOR(dh, dh));	// 21235                  xor     dh, dh ;~ 01A2:8823
cs=0x1a2;eip=0x008825; 	J(CALL(sub_18b9b,0));	// 21236                  call    sub_18B9B ;~ 01A2:8825
cs=0x1a2;eip=0x008828; 	X(POP(si));	// 21237                  pop     si ;~ 01A2:8828
cs=0x1a2;eip=0x008829; 	X(POP(dx));	// 21238                  pop     dx ;~ 01A2:8829
cs=0x1a2;eip=0x00882a; 	X(POP(cx));	// 21239                  pop     cx ;~ 01A2:882A
loc_1882b:
	// 5820 
cs=0x1a2;eip=0x00882b; 	T(ADD(dx, word_1f3c6));	// 21242                  add     dx, ds:word_1F3C6 ;~ 01A2:882B
cs=0x1a2;eip=0x00882f; 	J(JMP(loc_187b4));	// 21243                  jmp     short loc_187B4 ;~ 01A2:882F
loc_18831:
	// 5821 
cs=0x1a2;eip=0x008831; 	X(byte_1f829 = 0;);	// 21247                  mov     ds:byte_1F829, 0 ;~ 01A2:8831
cs=0x1a2;eip=0x008836; 	X(POP(ds));	// 21248                  pop     ds ;~ 01A2:8836
cs=0x1a2;eip=0x008837; 	X(POP(es));	// 21249                  pop     es ;~ 01A2:8837
cs=0x1a2;eip=0x008838; 	X(POP(di));	// 21251                  pop     di ;~ 01A2:8838
cs=0x1a2;eip=0x008839; 	X(POP(si));	// 21252                  pop     si ;~ 01A2:8839
cs=0x1a2;eip=0x00883a; 	X(POP(bp));	// 21253                  pop     bp ;~ 01A2:883A
cs=0x1a2;eip=0x00883b; 	X(POP(dx));	// 21254                  pop     dx ;~ 01A2:883B
cs=0x1a2;eip=0x00883c; 	X(POP(cx));	// 21255                  pop     cx ;~ 01A2:883C
cs=0x1a2;eip=0x00883d; 	X(POP(bx));	// 21256                  pop     bx ;~ 01A2:883D
cs=0x1a2;eip=0x00883e; 	X(POP(ax));	// 21257                  pop     ax ;~ 01A2:883E
cs=0x1a2;eip=0x00883f; 	J(RETN(0));	// 21258                  retn ;~ 01A2:883F

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_18776: 	goto loc_18776;
        case m2c::kloc_18783: 	goto loc_18783;
        case m2c::kloc_187ac: 	goto loc_187ac;
        case m2c::kloc_187b4: 	goto loc_187b4;
        case m2c::kloc_187d1: 	goto loc_187d1;
        case m2c::kloc_187e1: 	goto loc_187e1;
        case m2c::kloc_187ee: 	goto loc_187ee;
        case m2c::kloc_187fa: 	goto loc_187fa;
        case m2c::kloc_187fc: 	goto loc_187fc;
        case m2c::kloc_1882b: 	goto loc_1882b;
        case m2c::kloc_18831: 	goto loc_18831;
        case m2c::kret_1a2_879f: 	goto ret_1a2_879f;
        case m2c::kret_1a2_87ea: 	goto ret_1a2_87ea;
        case m2c::ksub_18738: 	goto sub_18738;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group25(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group25:
    _begin:
sub_18840:
	// 21266 
cs=0x1a2;eip=0x008840; 	T(CMP(byte_1f8e2, 0));	// 21268                  cmp     ds:byte_1F8E2, 0 ;~ 01A2:8840
cs=0x1a2;eip=0x008845; 	J(JNZ(loc_18853));	// 21269                  jnz     short loc_18853 ;~ 01A2:8845
cs=0x1a2;eip=0x008847; 	X(byte_1f8e2 = 1;);	// 21271                  mov     ds:byte_1F8E2, 1 ;~ 01A2:8847
cs=0x1a2;eip=0x00884c; 	X(PUSH(ax));	// 21272                  push    ax ;~ 01A2:884C
cs=0x1a2;eip=0x00884d; 	X(PUSH(dx));	// 21273                  push    dx ;~ 01A2:884D
cs=0x1a2;eip=0x00884e; 	J(CALL(sub_1df7c,0));	// 21274                  call    sub_1DF7C ;~ 01A2:884E
cs=0x1a2;eip=0x008851; 	X(POP(dx));	// 21275                  pop     dx ;~ 01A2:8851
cs=0x1a2;eip=0x008852; 	X(POP(ax));	// 21276                  pop     ax ;~ 01A2:8852
loc_18853:
	// 5822 
cs=0x1a2;eip=0x008853; 	T(cx = ax;);	// 21279                  mov     cx, ax ;~ 01A2:8853
cs=0x1a2;eip=0x008855; 	T(bx = dx;);	// 21280                  mov     bx, dx ;~ 01A2:8855
cs=0x1a2;eip=0x008857; 	T(SUB(bx, ax));	// 21281                  sub     bx, ax ;~ 01A2:8857
cs=0x1a2;eip=0x008859; 	X(PUSH(bx));	// 21282                  push    bx ;~ 01A2:8859
cs=0x1a2;eip=0x00885a; 	X(PUSH(cx));	// 21283                  push    cx ;~ 01A2:885A
cs=0x1a2;eip=0x00885b; 	T(INC(bx));	// 21284                  inc     bx ;~ 01A2:885B
cs=0x1a2;eip=0x00885c; 	J(CALL(sub_1df94,0));	// 21285                  call    sub_1DF94 ;~ 01A2:885C
seg000_885f_proc:
	// 21289 
cs=0x1a2;eip=0x00885f; 	X(POP(cx));	// 21289                  pop     cx ;~ 01A2:885F
cs=0x1a2;eip=0x008860; 	X(POP(bx));	// 21290                  pop     bx ;~ 01A2:8860
cs=0x1a2;eip=0x008861; 	T(OR(cx, cx));	// 21291                  or      cx, cx ;~ 01A2:8861
cs=0x1a2;eip=0x008863; 	J(JZ(locret_18867));	// 21292                  jz      short locret_18867 ;~ 01A2:8863
cs=0x1a2;eip=0x008865; 	T(ADD(ax, cx));	// 21293                  add     ax, cx ;~ 01A2:8865
locret_18867:
	// 5823 
cs=0x1a2;eip=0x008867; 	J(RETN(0));	// 21296                  retn ;~ 01A2:8867

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_18853: 	goto loc_18853;
        case m2c::klocret_18867: 	goto locret_18867;
        case m2c::kseg000_885f_proc: 	goto seg000_885f_proc;
        case m2c::ksub_18840: 	goto sub_18840;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group26(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group26:
    _begin:
sub_18868:
	// 21302 
cs=0x1a2;eip=0x008868; 	T(CMP(byte_1f8e2, 0));	// 21304                  cmp     ds:byte_1F8E2, 0 ;~ 01A2:8868
cs=0x1a2;eip=0x00886d; 	J(JNZ(loc_18877));	// 21305                  jnz     short loc_18877 ;~ 01A2:886D
cs=0x1a2;eip=0x00886f; 	X(byte_1f8e2 = 1;);	// 21306                  mov     ds:byte_1F8E2, 1 ;~ 01A2:886F
cs=0x1a2;eip=0x008874; 	J(CALL(sub_1df7c,0));	// 21307                  call    sub_1DF7C ;~ 01A2:8874
loc_18877:
	// 5824 
cs=0x1a2;eip=0x008877; 	J(CALL(sub_1dfa3,0));	// 21310                  call    sub_1DFA3 ;~ 01A2:8877
seg000_887a_proc:
	// 21314 
cs=0x1a2;eip=0x00887a; 	J(RETN(0));	// 21314                  retn ;~ 01A2:887A

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_18877: 	goto loc_18877;
        case m2c::kseg000_887a_proc: 	goto seg000_887a_proc;
        case m2c::ksub_18868: 	goto sub_18868;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1887b(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1887b:
    _begin:
cs=0x1a2;eip=0x00887b; 	J(CALL(sub_1d445,0));	// 21321                  call    sub_1D445 ;~ 01A2:887B
cs=0x1a2;eip=0x00887e; 	J(CALL(sub_1d4a0,0));	// 21322                  call    sub_1D4A0 ;~ 01A2:887E
cs=0x1a2;eip=0x008881; 	J(CALL(sub_1d445,0));	// 21323                  call    sub_1D445 ;~ 01A2:8881
cs=0x1a2;eip=0x008884; 	J(CALL(sub_1d4a0,0));	// 21324                  call    sub_1D4A0 ;~ 01A2:8884
cs=0x1a2;eip=0x008887; 	J(RETN(0));	// 21326                  retn ;~ 01A2:8887

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1887b: 	goto sub_1887b;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_18888(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_18888:
    _begin:
cs=0x1a2;eip=0x008888; 	X(PUSH(*(dw*)(((db*)&seg_1f171)+1)));	// 21336                  push    seg_1F171+1 ;~ 01A2:8888
cs=0x1a2;eip=0x00888c; 	T(ax = word_1f18a;);	// 21337                  mov     ax, word_1F18A ;~ 01A2:888C
cs=0x1a2;eip=0x00888f; 	X(*(dw*)(((db*)&seg_1f171)+1) = ax;);	// 21338                  mov     seg_1F171+1, ax ;~ 01A2:888F
cs=0x1a2;eip=0x008892; 	J(CALL(sub_1d4a0,0));	// 21339                  call    sub_1D4A0 ;~ 01A2:8892
cs=0x1a2;eip=0x008895; 	T(ax = word_1f18c;);	// 21341                  mov     ax, word_1F18C ;~ 01A2:8895
cs=0x1a2;eip=0x008898; 	X(*(dw*)(((db*)&seg_1f171)+1) = ax;);	// 21342                  mov     seg_1F171+1, ax ;~ 01A2:8898
cs=0x1a2;eip=0x00889b; 	J(CALL(sub_1d4a0,0));	// 21343                  call    sub_1D4A0 ;~ 01A2:889B
cs=0x1a2;eip=0x00889e; 	T(ax = word_1f91e;);	// 21345                  mov     ax, ds:word_1F91E ;~ 01A2:889E
cs=0x1a2;eip=0x0088a1; 	X(*(dw*)(((db*)&seg_1f171)+1) = ax;);	// 21346                  mov     seg_1F171+1, ax ;~ 01A2:88A1
cs=0x1a2;eip=0x0088a4; 	J(CALL(sub_1d4a0,0));	// 21347                  call    sub_1D4A0 ;~ 01A2:88A4
cs=0x1a2;eip=0x0088a7; 	X(POP(*(dw*)(((db*)&seg_1f171)+1)));	// 21349                  pop     seg_1F171+1 ;~ 01A2:88A7
cs=0x1a2;eip=0x0088ab; 	J(RETN(0));	// 21350                  retn ;~ 01A2:88AB

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_18888: 	goto sub_18888;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_188ac(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_188ac:
    _begin:
cs=0x1a2;eip=0x0088ac; 	X(PUSH(*(dw*)(&unk_1f170)));	// 21359                  push    word ptr unk_1F170 ;~ 01A2:88AC
cs=0x1a2;eip=0x0088b0; 	T(ax = *(dw*)(((db*)&seg_1f171)+1););	// 21360                  mov     ax, seg_1F171+1 ;~ 01A2:88B0
cs=0x1a2;eip=0x0088b3; 	X(*(dw*)(&unk_1f170) = ax;);	// 21361                  mov     word ptr unk_1F170, ax ;~ 01A2:88B3
cs=0x1a2;eip=0x0088b6; 	X(PUSH(ax));	// 21362                  push    ax ;~ 01A2:88B6
cs=0x1a2;eip=0x0088b7; 	X(*(dw*)(((db*)&seg_1f171)+1) = 0x0A600;);	// 21363                  mov     seg_1F171+1, 0A600h ;~ 01A2:88B7
cs=0x1a2;eip=0x0088bd; 	J(CALL(sub_1d7cc,0));	// 21364                  call    sub_1D7CC ;~ 01A2:88BD
cs=0x1a2;eip=0x0088c0; 	X(POP(*(dw*)(((db*)&seg_1f171)+1)));	// 21366                  pop     seg_1F171+1 ;~ 01A2:88C0
cs=0x1a2;eip=0x0088c4; 	X(POP(*(dw*)(&unk_1f170)));	// 21367                  pop     word ptr unk_1F170 ;~ 01A2:88C4
cs=0x1a2;eip=0x0088c8; 	J(RETN(0));	// 21368                  retn ;~ 01A2:88C8

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_188ac: 	goto sub_188ac;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_188c9(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_188c9:
    _begin:
cs=0x1a2;eip=0x0088c9; 	X(PUSH(*(dw*)(&unk_1f170)));	// 21377                  push    word ptr unk_1F170 ;~ 01A2:88C9
cs=0x1a2;eip=0x0088cd; 	T(ax = 0x0A600;);	// 21378                  mov     ax, 0A600h ;~ 01A2:88CD
cs=0x1a2;eip=0x0088d0; 	X(*(dw*)(&unk_1f170) = ax;);	// 21379                  mov     word ptr unk_1F170, ax ;~ 01A2:88D0
cs=0x1a2;eip=0x0088d3; 	J(CALL(sub_1d7cc,0));	// 21380                  call    sub_1D7CC ;~ 01A2:88D3
cs=0x1a2;eip=0x0088d6; 	X(POP(*(dw*)(&unk_1f170)));	// 21381                  pop     word ptr unk_1F170 ;~ 01A2:88D6
cs=0x1a2;eip=0x0088da; 	J(RETN(0));	// 21382                  retn ;~ 01A2:88DA

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_188c9: 	goto sub_188c9;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_188db(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_188db:
    _begin:
cs=0x1a2;eip=0x0088db; 	X(PUSH(*(dw*)(&unk_1f170)));	// 21390                  push    word ptr unk_1F170 ;~ 01A2:88DB
cs=0x1a2;eip=0x0088df; 	T(ax = *(dw*)(((db*)&seg_1f171)+1););	// 21391                  mov     ax, seg_1F171+1 ;~ 01A2:88DF
cs=0x1a2;eip=0x0088e2; 	X(*(dw*)(&unk_1f170) = ax;);	// 21392                  mov     word ptr unk_1F170, ax ;~ 01A2:88E2
cs=0x1a2;eip=0x0088e5; 	X(PUSH(ax));	// 21393                  push    ax ;~ 01A2:88E5
cs=0x1a2;eip=0x0088e6; 	X(*(dw*)(((db*)&seg_1f171)+1) = 0x0A800;);	// 21394                  mov     seg_1F171+1, 0A800h ;~ 01A2:88E6
cs=0x1a2;eip=0x0088ec; 	J(CALL(sub_1d7cc,0));	// 21395                  call    sub_1D7CC ;~ 01A2:88EC
cs=0x1a2;eip=0x0088ef; 	X(POP(*(dw*)(((db*)&seg_1f171)+1)));	// 21396                  pop     seg_1F171+1 ;~ 01A2:88EF
cs=0x1a2;eip=0x0088f3; 	X(POP(*(dw*)(&unk_1f170)));	// 21397                  pop     word ptr unk_1F170 ;~ 01A2:88F3
cs=0x1a2;eip=0x0088f7; 	J(RETN(0));	// 21398                  retn ;~ 01A2:88F7

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_188db: 	goto sub_188db;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_188f8(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_188f8:
    _begin:
cs=0x1a2;eip=0x0088f8; 	X(PUSH(*(dw*)(&unk_1f170)));	// 21407                  push    word ptr unk_1F170 ;~ 01A2:88F8
cs=0x1a2;eip=0x0088fc; 	X(*(dw*)(&unk_1f170) = 0x0A800;);	// 21408                  mov     word ptr unk_1F170, 0A800h ;~ 01A2:88FC
cs=0x1a2;eip=0x008902; 	J(CALL(sub_1d7cc,m2c::kloc_1d7d5));	// 21409                  call    loc_1D7D5 ;~ 01A2:8902
cs=0x1a2;eip=0x008905; 	X(POP(*(dw*)(&unk_1f170)));	// 21410                  pop     word ptr unk_1F170 ;~ 01A2:8905
cs=0x1a2;eip=0x008909; 	J(RETN(0));	// 21411                  retn ;~ 01A2:8909

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_188f8: 	goto sub_188f8;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_890a_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_890a_proc:
    _begin:
cs=0x1a2;eip=0x00890a; 	X(PUSH(ax));	// 21415                  push    ax ;~ 01A2:890A
cs=0x1a2;eip=0x00890b; 	X(PUSH(bx));	// 21416                  push    bx ;~ 01A2:890B
cs=0x1a2;eip=0x00890c; 	X(PUSH(cx));	// 21417                  push    cx ;~ 01A2:890C
cs=0x1a2;eip=0x00890d; 	X(PUSH(dx));	// 21418                  push    dx ;~ 01A2:890D
cs=0x1a2;eip=0x00890e; 	X(PUSH(bp));	// 21419                  push    bp ;~ 01A2:890E
cs=0x1a2;eip=0x00890f; 	X(PUSH(si));	// 21420                  push    si ;~ 01A2:890F
cs=0x1a2;eip=0x008910; 	X(PUSH(di));	// 21421                  push    di ;~ 01A2:8910
cs=0x1a2;eip=0x008911; 	X(PUSH(es));	// 21422                  push    es ;~ 01A2:8911
cs=0x1a2;eip=0x008912; 	X(PUSH(ds));	// 21423                  push    ds ;~ 01A2:8912
cs=0x1a2;eip=0x008913; 	J(CALL(sub_1d445,0));	// 21424                  call    sub_1D445 ;~ 01A2:8913
cs=0x1a2;eip=0x008916; 	J(CALL(sub_188db,0));	// 21425                  call    sub_188DB ;~ 01A2:8916
cs=0x1a2;eip=0x008919; 	J(CALL(sub_1d445,0));	// 21426                  call    sub_1D445 ;~ 01A2:8919
cs=0x1a2;eip=0x00891c; 	T(XOR(si, si));	// 21427                  xor     si, si ;~ 01A2:891C
cs=0x1a2;eip=0x00891e; 	T(XOR(di, di));	// 21428                  xor     di, di ;~ 01A2:891E
cs=0x1a2;eip=0x008920; 	T(cx = 0x1F40;);	// 21429                  mov     cx, 1F40h ;~ 01A2:8920
cs=0x1a2;eip=0x008923; 	J(CALL(sub_188f8,0));	// 21430                  call    sub_188F8 ;~ 01A2:8923
cs=0x1a2;eip=0x008926; 	T(bp = 0x4052;);	// 21431                  mov     bp, 4052h ;~ 01A2:8926
loc_18929:
	// 5825 
cs=0x1a2;eip=0x008929; 	T(MOV(si, *(dw*)(raddr(ss,bp+0))));	// 21434                  mov     si, [bp+0] ;~ 01A2:8929
cs=0x1a2;eip=0x00892c; 	T(ADD(bp, 2));	// 21435                  add     bp, 2 ;~ 01A2:892C
cs=0x1a2;eip=0x00892f; 	T(OR(si, si));	// 21436                  or      si, si ;~ 01A2:892F
cs=0x1a2;eip=0x008931; 	J(JZ(loc_1896f));	// 21437                  jz      short loc_1896F ;~ 01A2:8931
cs=0x1a2;eip=0x008933; 	J(JS(loc_18944));	// 21438                  js      short loc_18944 ;~ 01A2:8933
cs=0x1a2;eip=0x008935; 	J(CALL(sub_1d4a0,0));	// 21439                  call    sub_1D4A0 ;~ 01A2:8935
cs=0x1a2;eip=0x008938; 	T(cx = 0x1F40;);	// 21440                  mov     cx, 1F40h ;~ 01A2:8938
cs=0x1a2;eip=0x00893b; 	T(XOR(di, di));	// 21441                  xor     di, di ;~ 01A2:893B
cs=0x1a2;eip=0x00893d; 	T(SUB(cx, si));	// 21442                  sub     cx, si ;~ 01A2:893D
cs=0x1a2;eip=0x00893f; 	J(CALL(sub_188f8,0));	// 21443                  call    sub_188F8 ;~ 01A2:893F
cs=0x1a2;eip=0x008942; 	J(JMP(loc_18955));	// 21444                  jmp     short loc_18955 ;~ 01A2:8942
loc_18944:
	// 5826 
cs=0x1a2;eip=0x008944; 	T(NEG(si));	// 21448                  neg     si ;~ 01A2:8944
cs=0x1a2;eip=0x008946; 	X(PUSH(si));	// 21449                  push    si ;~ 01A2:8946
cs=0x1a2;eip=0x008947; 	J(CALL(sub_1d4a0,0));	// 21450                  call    sub_1D4A0 ;~ 01A2:8947
cs=0x1a2;eip=0x00894a; 	X(POP(di));	// 21451                  pop     di ;~ 01A2:894A
cs=0x1a2;eip=0x00894b; 	T(cx = 0x1F40;);	// 21452                  mov     cx, 1F40h ;~ 01A2:894B
cs=0x1a2;eip=0x00894e; 	T(SUB(cx, di));	// 21453                  sub     cx, di ;~ 01A2:894E
cs=0x1a2;eip=0x008950; 	T(XOR(si, si));	// 21454                  xor     si, si ;~ 01A2:8950
cs=0x1a2;eip=0x008952; 	J(CALL(sub_188f8,0));	// 21455                  call    sub_188F8 ;~ 01A2:8952
loc_18955:
	// 5827 
cs=0x1a2;eip=0x008955; 	J(CALL(sub_1897f,0));	// 21458                  call    sub_1897F ;~ 01A2:8955
cs=0x1a2;eip=0x008958; 	J(CALL(sub_1d448,0));	// 21459                  call    sub_1D448 ;~ 01A2:8958
cs=0x1a2;eip=0x00895b; 	J(CALL(sub_1897f,0));	// 21460                  call    sub_1897F ;~ 01A2:895B
cs=0x1a2;eip=0x00895e; 	J(CALL(sub_1d445,0));	// 21461                  call    sub_1D445 ;~ 01A2:895E
cs=0x1a2;eip=0x008961; 	J(CALL(sub_1897f,0));	// 21462                  call    sub_1897F ;~ 01A2:8961
cs=0x1a2;eip=0x008964; 	J(CALL(sub_1d448,0));	// 21463                  call    sub_1D448 ;~ 01A2:8964
cs=0x1a2;eip=0x008967; 	J(CALL(sub_1897f,0));	// 21464                  call    sub_1897F ;~ 01A2:8967
cs=0x1a2;eip=0x00896a; 	J(CALL(sub_1d445,0));	// 21465                  call    sub_1D445 ;~ 01A2:896A
cs=0x1a2;eip=0x00896d; 	J(JMP(loc_18929));	// 21466                  jmp     short loc_18929 ;~ 01A2:896D
loc_1896f:
	// 5828 
cs=0x1a2;eip=0x00896f; 	J(CALL(sub_188c9,0));	// 21470                  call    sub_188C9 ;~ 01A2:896F
cs=0x1a2;eip=0x008972; 	J(CALL(sub_134bf,0));	// 21471                  call    sub_134BF ;~ 01A2:8972
cs=0x1a2;eip=0x008975; 	X(POP(ds));	// 21472                  pop     ds ;~ 01A2:8975
cs=0x1a2;eip=0x008976; 	X(POP(es));	// 21474                  pop     es ;~ 01A2:8976
cs=0x1a2;eip=0x008977; 	X(POP(di));	// 21476                  pop     di ;~ 01A2:8977
cs=0x1a2;eip=0x008978; 	X(POP(si));	// 21477                  pop     si ;~ 01A2:8978
cs=0x1a2;eip=0x008979; 	X(POP(bp));	// 21478                  pop     bp ;~ 01A2:8979
cs=0x1a2;eip=0x00897a; 	X(POP(dx));	// 21479                  pop     dx ;~ 01A2:897A
cs=0x1a2;eip=0x00897b; 	X(POP(cx));	// 21480                  pop     cx ;~ 01A2:897B
cs=0x1a2;eip=0x00897c; 	X(POP(bx));	// 21481                  pop     bx ;~ 01A2:897C
cs=0x1a2;eip=0x00897d; 	X(POP(ax));	// 21482                  pop     ax ;~ 01A2:897D
cs=0x1a2;eip=0x00897e; 	J(RETN(0));	// 21483                  retn ;~ 01A2:897E

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_18929: 	goto loc_18929;
        case m2c::kloc_18944: 	goto loc_18944;
        case m2c::kloc_18955: 	goto loc_18955;
        case m2c::kloc_1896f: 	goto loc_1896f;
        case m2c::kseg000_890a_proc: 	goto seg000_890a_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1897f(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1897f:
    _begin:
cs=0x1a2;eip=0x00897f; 	X(PUSH(dx));	// 21490                  push    dx ;~ 01A2:897F
cs=0x1a2;eip=0x008980; 	X(PUSH(ax));	// 21491                  push    ax ;~ 01A2:8980
cs=0x1a2;eip=0x008981; 	T(dx = 0x3DA;);	// 21492                  mov     dx, 3DAh ;~ 01A2:8981
loc_18984:
	// 5829 
cs=0x1a2;eip=0x008984; 	S(IN(al, dx));	// 21495                  in      al, dx          ; Video status bits: ;~ 01A2:8984
cs=0x1a2;eip=0x008985; 	T(TEST(al, 8));	// 21500                  test    al, 8 ;~ 01A2:8985
cs=0x1a2;eip=0x008987; 	J(JZ(loc_18984));	// 21501                  jz      short loc_18984 ;~ 01A2:8987
loc_18989:
	// 5830 
cs=0x1a2;eip=0x008989; 	S(IN(al, dx));	// 21504                  in      al, dx          ; Video status bits: ;~ 01A2:8989
cs=0x1a2;eip=0x00898a; 	T(TEST(al, 8));	// 21509                  test    al, 8 ;~ 01A2:898A
cs=0x1a2;eip=0x00898c; 	J(JNZ(loc_18989));	// 21510                  jnz     short loc_18989 ;~ 01A2:898C
cs=0x1a2;eip=0x00898e; 	X(POP(ax));	// 21511                  pop     ax ;~ 01A2:898E
cs=0x1a2;eip=0x00898f; 	X(POP(dx));	// 21512                  pop     dx ;~ 01A2:898F
cs=0x1a2;eip=0x008990; 	J(RETN(0));	// 21513                  retn ;~ 01A2:8990

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_18984: 	goto loc_18984;
        case m2c::kloc_18989: 	goto loc_18989;
        case m2c::ksub_1897f: 	goto sub_1897f;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_8991_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_8991_proc:
    _begin:
loc_18991:
	// 5831 
cs=0x1a2;eip=0x008991; 	X(PUSH(ax));	// 21519                  push    ax ;~ 01A2:8991
cs=0x1a2;eip=0x008992; 	X(PUSH(bx));	// 21520                  push    bx ;~ 01A2:8992
cs=0x1a2;eip=0x008993; 	X(PUSH(cx));	// 21521                  push    cx ;~ 01A2:8993
cs=0x1a2;eip=0x008994; 	X(PUSH(dx));	// 21522                  push    dx ;~ 01A2:8994
cs=0x1a2;eip=0x008995; 	X(PUSH(bp));	// 21523                  push    bp ;~ 01A2:8995
cs=0x1a2;eip=0x008996; 	X(PUSH(si));	// 21524                  push    si ;~ 01A2:8996
cs=0x1a2;eip=0x008997; 	X(PUSH(di));	// 21525                  push    di ;~ 01A2:8997
cs=0x1a2;eip=0x008998; 	X(PUSH(es));	// 21526                  push    es ;~ 01A2:8998
cs=0x1a2;eip=0x008999; 	X(PUSH(ds));	// 21527                  push    ds ;~ 01A2:8999
cs=0x1a2;eip=0x00899a; 	T(XOR(dh, dh));	// 21528                  xor     dh, dh ;~ 01A2:899A
cs=0x1a2;eip=0x00899c; 	J(return sub_1899e(m2c::kloc_189a9, _state););	// 21529                  jmp     short loc_189A9 ;~ 01A2:899C

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_18991: 	goto loc_18991;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1899e(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1899e:
    _begin:
cs=0x1a2;eip=0x00899e; 	X(PUSH(ax));	// 21537                  push    ax ;~ 01A2:899E
cs=0x1a2;eip=0x00899f; 	X(PUSH(bx));	// 21538                  push    bx ;~ 01A2:899F
cs=0x1a2;eip=0x0089a0; 	X(PUSH(cx));	// 21539                  push    cx ;~ 01A2:89A0
cs=0x1a2;eip=0x0089a1; 	X(PUSH(dx));	// 21540                  push    dx ;~ 01A2:89A1
cs=0x1a2;eip=0x0089a2; 	X(PUSH(bp));	// 21541                  push    bp ;~ 01A2:89A2
cs=0x1a2;eip=0x0089a3; 	X(PUSH(si));	// 21542                  push    si ;~ 01A2:89A3
cs=0x1a2;eip=0x0089a4; 	X(PUSH(di));	// 21543                  push    di ;~ 01A2:89A4
cs=0x1a2;eip=0x0089a5; 	X(PUSH(es));	// 21544                  push    es ;~ 01A2:89A5
cs=0x1a2;eip=0x0089a6; 	X(PUSH(ds));	// 21545                  push    ds ;~ 01A2:89A6
cs=0x1a2;eip=0x0089a7; 	T(dh = 1;);	// 21546                  mov     dh, 1 ;~ 01A2:89A7
loc_189a9:
	// 5832 
cs=0x1a2;eip=0x0089a9; 	T(si = word_1f246;);	// 21549                  mov     si, word_1F246 ;~ 01A2:89A9
cs=0x1a2;eip=0x0089ad; 	T(di = 0x0FDCC;);	// 21550                  mov     di, 0FDCCh ;~ 01A2:89AD
cs=0x1a2;eip=0x0089b0; 	T(XOR(bl, bl));	// 21551                  xor     bl, bl ;~ 01A2:89B0
cs=0x1a2;eip=0x0089b2; 	T(dl = byte_1f796;);	// 21552                  mov     dl, ds:byte_1F796 ;~ 01A2:89B2
cs=0x1a2;eip=0x0089b6; 	T(OR(dl, dl));	// 21553                  or      dl, dl ;~ 01A2:89B6
cs=0x1a2;eip=0x0089b8; 	J(JZ(loc_189f4));	// 21554                  jz      short loc_189F4 ;~ 01A2:89B8
cs=0x1a2;eip=0x0089ba; 	T(CMP(dl, 6));	// 21555                  cmp     dl, 6 ;~ 01A2:89BA
cs=0x1a2;eip=0x0089bd; 	J(JLE(loc_189c1));	// 21556                  jle     short loc_189C1 ;~ 01A2:89BD
cs=0x1a2;eip=0x0089bf; 	T(dl = 6;);	// 21557                  mov     dl, 6 ;~ 01A2:89BF
loc_189c1:
	// 5833 
cs=0x1a2;eip=0x0089c1; 	T(DEC(dl));	// 21560                  dec     dl ;~ 01A2:89C1
loc_189c3:
	// 5834 
cs=0x1a2;eip=0x0089c3; 	T(LODSB);	// 21564                  lodsb ;~ 01A2:89C3
cs=0x1a2;eip=0x0089c4; 	T(OR(al, al));	// 21565                  or      al, al ;~ 01A2:89C4
cs=0x1a2;eip=0x0089c6; 	J(JS(loc_18a44));	// 21566                  js      short loc_18A44 ;~ 01A2:89C6
cs=0x1a2;eip=0x0089c8; 	T(INC(di));	// 21567                  inc     di ;~ 01A2:89C8
cs=0x1a2;eip=0x0089c9; 	T(CMP(al, *(raddr(ds,di-1))));	// 21568                  cmp     al, [di-1] ;~ 01A2:89C9
cs=0x1a2;eip=0x0089cc; 	J(JNZ(loc_189d5));	// 21569                  jnz     short loc_189D5 ;~ 01A2:89CC
cs=0x1a2;eip=0x0089ce; 	T(CMP(byte_1f76e, 0));	// 21570                  cmp     ds:byte_1F76E, 0 ;~ 01A2:89CE
cs=0x1a2;eip=0x0089d3; 	J(JZ(loc_189ee));	// 21571                  jz      short loc_189EE ;~ 01A2:89D3
loc_189d5:
	// 5835 
cs=0x1a2;eip=0x0089d5; 	X(OR(byte_1f740, 0x80));	// 21574                  or      ds:byte_1F740, 80h ;~ 01A2:89D5
cs=0x1a2;eip=0x0089da; 	X(MOV(*(raddr(ds,di-1)), al));	// 21575                  mov     [di-1], al ;~ 01A2:89DA
cs=0x1a2;eip=0x0089dd; 	T(OR(dh, dh));	// 21576                  or      dh, dh ;~ 01A2:89DD
cs=0x1a2;eip=0x0089df; 	J(JZ(loc_189ee));	// 21577                  jz      short loc_189EE ;~ 01A2:89DF
cs=0x1a2;eip=0x0089e1; 	T(CMP(byte_1f76b, 0));	// 21578                  cmp     ds:byte_1F76B, 0 ;~ 01A2:89E1
cs=0x1a2;eip=0x0089e6; 	J(JZ(loc_189eb));	// 21579                  jz      short loc_189EB ;~ 01A2:89E6
cs=0x1a2;eip=0x0089e8; 	J(CALL(sub_1d9c3,0));	// 21580                  call    sub_1D9C3 ;~ 01A2:89E8
loc_189eb:
	// 5836 
cs=0x1a2;eip=0x0089eb; 	J(CALL(sub_18a4a,0));	// 21583                  call    sub_18A4A ;~ 01A2:89EB
loc_189ee:
	// 5837 
cs=0x1a2;eip=0x0089ee; 	T(INC(bl));	// 21587                  inc     bl ;~ 01A2:89EE
cs=0x1a2;eip=0x0089f0; 	T(DEC(dl));	// 21588                  dec     dl ;~ 01A2:89F0
cs=0x1a2;eip=0x0089f2; 	J(JNS(loc_189c3));	// 21589                  jns     short loc_189C3 ;~ 01A2:89F2
loc_189f4:
	// 5838 
cs=0x1a2;eip=0x0089f4; 	T(dl = 6;);	// 21592                  mov     dl, 6 ;~ 01A2:89F4
cs=0x1a2;eip=0x0089f6; 	T(SUB(dl, byte_1f796));	// 21593                  sub     dl, ds:byte_1F796 ;~ 01A2:89F6
cs=0x1a2;eip=0x0089fa; 	J(JLE(loc_18a2c));	// 21594                  jle     short loc_18A2C ;~ 01A2:89FA
cs=0x1a2;eip=0x0089fc; 	T(DEC(dl));	// 21595                  dec     dl ;~ 01A2:89FC
loc_189fe:
	// 5839 
cs=0x1a2;eip=0x0089fe; 	T(al = 0;);	// 21598                  mov     al, 0 ;~ 01A2:89FE
cs=0x1a2;eip=0x008a00; 	T(INC(di));	// 21599                  inc     di ;~ 01A2:8A00
cs=0x1a2;eip=0x008a01; 	T(CMP(al, *(raddr(ds,di-1))));	// 21600                  cmp     al, [di-1] ;~ 01A2:8A01
cs=0x1a2;eip=0x008a04; 	J(JNZ(loc_18a0d));	// 21601                  jnz     short loc_18A0D ;~ 01A2:8A04
cs=0x1a2;eip=0x008a06; 	T(CMP(byte_1f76e, 0));	// 21602                  cmp     ds:byte_1F76E, 0 ;~ 01A2:8A06
cs=0x1a2;eip=0x008a0b; 	J(JZ(loc_18a26));	// 21603                  jz      short loc_18A26 ;~ 01A2:8A0B
loc_18a0d:
	// 5840 
cs=0x1a2;eip=0x008a0d; 	X(MOV(*(raddr(ds,di-1)), al));	// 21607                  mov     [di-1], al ;~ 01A2:8A0D
cs=0x1a2;eip=0x008a10; 	T(OR(dh, dh));	// 21608                  or      dh, dh ;~ 01A2:8A10
cs=0x1a2;eip=0x008a12; 	J(JZ(loc_18a26));	// 21609                  jz      short loc_18A26 ;~ 01A2:8A12
cs=0x1a2;eip=0x008a14; 	T(CMP(byte_1f76b, 0));	// 21610                  cmp     ds:byte_1F76B, 0 ;~ 01A2:8A14
cs=0x1a2;eip=0x008a19; 	J(JZ(loc_18a1e));	// 21611                  jz      short loc_18A1E ;~ 01A2:8A19
cs=0x1a2;eip=0x008a1b; 	J(CALL(sub_1d9c3,0));	// 21612                  call    sub_1D9C3 ;~ 01A2:8A1B
loc_18a1e:
	// 5841 
cs=0x1a2;eip=0x008a1e; 	J(CALL(sub_18a4a,0));	// 21615                  call    sub_18A4A ;~ 01A2:8A1E
cs=0x1a2;eip=0x008a21; 	X(OR(byte_1f740, 0x80));	// 21616                  or      ds:byte_1F740, 80h ;~ 01A2:8A21
loc_18a26:
	// 5842 
cs=0x1a2;eip=0x008a26; 	T(INC(bl));	// 21620                  inc     bl ;~ 01A2:8A26
cs=0x1a2;eip=0x008a28; 	T(DEC(dl));	// 21621                  dec     dl ;~ 01A2:8A28
cs=0x1a2;eip=0x008a2a; 	J(JNS(loc_189fe));	// 21622                  jns     short loc_189FE ;~ 01A2:8A2A
loc_18a2c:
	// 5843 
cs=0x1a2;eip=0x008a2c; 	T(OR(dh, dh));	// 21625                  or      dh, dh ;~ 01A2:8A2C
cs=0x1a2;eip=0x008a2e; 	J(JZ(loc_18a3a));	// 21626                  jz      short loc_18A3A ;~ 01A2:8A2E
cs=0x1a2;eip=0x008a30; 	T(al = byte_1f76e;);	// 21627                  mov     al, ds:byte_1F76E ;~ 01A2:8A30
cs=0x1a2;eip=0x008a33; 	T(DEC(al));	// 21628                  dec     al ;~ 01A2:8A33
cs=0x1a2;eip=0x008a35; 	J(JS(loc_18a3a));	// 21629                  js      short loc_18A3A ;~ 01A2:8A35
cs=0x1a2;eip=0x008a37; 	X(byte_1f76e = al;);	// 21630                  mov     ds:byte_1F76E, al ;~ 01A2:8A37
loc_18a3a:
	// 5844 
cs=0x1a2;eip=0x008a3a; 	X(POP(ds));	// 21634                  pop     ds ;~ 01A2:8A3A
cs=0x1a2;eip=0x008a3b; 	X(POP(es));	// 21635                  pop     es ;~ 01A2:8A3B
cs=0x1a2;eip=0x008a3c; 	X(POP(di));	// 21637                  pop     di ;~ 01A2:8A3C
cs=0x1a2;eip=0x008a3d; 	X(POP(si));	// 21638                  pop     si ;~ 01A2:8A3D
cs=0x1a2;eip=0x008a3e; 	X(POP(bp));	// 21639                  pop     bp ;~ 01A2:8A3E
cs=0x1a2;eip=0x008a3f; 	X(POP(dx));	// 21640                  pop     dx ;~ 01A2:8A3F
cs=0x1a2;eip=0x008a40; 	X(POP(cx));	// 21641                  pop     cx ;~ 01A2:8A40
cs=0x1a2;eip=0x008a41; 	X(POP(bx));	// 21642                  pop     bx ;~ 01A2:8A41
cs=0x1a2;eip=0x008a42; 	X(POP(ax));	// 21643                  pop     ax ;~ 01A2:8A42
cs=0x1a2;eip=0x008a43; 	J(RETN(0));	// 21644                  retn ;~ 01A2:8A43
loc_18a44:
	// 5845 
cs=0x1a2;eip=0x008a44; 	T(si = 0x0FDC2;);	// 21648                  mov     si, 0FDC2h ;~ 01A2:8A44
cs=0x1a2;eip=0x008a47; 	J(JMP(loc_189c3));	// 21649                  jmp     loc_189C3 ;~ 01A2:8A47

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_189a9: 	goto loc_189a9;
        case m2c::kloc_189c1: 	goto loc_189c1;
        case m2c::kloc_189c3: 	goto loc_189c3;
        case m2c::kloc_189d5: 	goto loc_189d5;
        case m2c::kloc_189eb: 	goto loc_189eb;
        case m2c::kloc_189ee: 	goto loc_189ee;
        case m2c::kloc_189f4: 	goto loc_189f4;
        case m2c::kloc_189fe: 	goto loc_189fe;
        case m2c::kloc_18a0d: 	goto loc_18a0d;
        case m2c::kloc_18a1e: 	goto loc_18a1e;
        case m2c::kloc_18a26: 	goto loc_18a26;
        case m2c::kloc_18a2c: 	goto loc_18a2c;
        case m2c::kloc_18a3a: 	goto loc_18a3a;
        case m2c::kloc_18a44: 	goto loc_18a44;
        case m2c::ksub_1899e: 	goto sub_1899e;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_18a4a(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_18a4a:
    _begin:
cs=0x1a2;eip=0x008a4a; 	X(PUSH(ax));	// 21658                  push    ax ;~ 01A2:8A4A
cs=0x1a2;eip=0x008a4b; 	X(PUSH(bx));	// 21659                  push    bx ;~ 01A2:8A4B
cs=0x1a2;eip=0x008a4c; 	X(PUSH(cx));	// 21660                  push    cx ;~ 01A2:8A4C
cs=0x1a2;eip=0x008a4d; 	X(PUSH(dx));	// 21661                  push    dx ;~ 01A2:8A4D
cs=0x1a2;eip=0x008a4e; 	X(PUSH(bp));	// 21662                  push    bp ;~ 01A2:8A4E
cs=0x1a2;eip=0x008a4f; 	X(PUSH(si));	// 21663                  push    si ;~ 01A2:8A4F
cs=0x1a2;eip=0x008a50; 	X(PUSH(di));	// 21664                  push    di ;~ 01A2:8A50
cs=0x1a2;eip=0x008a51; 	X(PUSH(es));	// 21665                  push    es ;~ 01A2:8A51
cs=0x1a2;eip=0x008a52; 	X(PUSH(ds));	// 21666                  push    ds ;~ 01A2:8A52
cs=0x1a2;eip=0x008a53; 	T(XOR(ah, ah));	// 21667                  xor     ah, ah ;~ 01A2:8A53
cs=0x1a2;eip=0x008a55; 	T(XOR(bh, bh));	// 21668                  xor     bh, bh ;~ 01A2:8A55
cs=0x1a2;eip=0x008a57; 	T(SHL(bx, 1));	// 21669                  shl     bx, 1 ;~ 01A2:8A57
cs=0x1a2;eip=0x008a59; 	T(SHL(bx, 1));	// 21670                  shl     bx, 1 ;~ 01A2:8A59
cs=0x1a2;eip=0x008a5b; 	T(SHL(bx, 1));	// 21671                  shl     bx, 1 ;~ 01A2:8A5B
cs=0x1a2;eip=0x008a5d; 	T(ADD(bx, 0x0FD8A));	// 21672                  add     bx, 0FD8Ah ;~ 01A2:8A5D
cs=0x1a2;eip=0x008a61; 	T(si = word_1f204;);	// 21673                  mov     si, word_1F204 ;~ 01A2:8A61
cs=0x1a2;eip=0x008a65; 	T(dl = 0x8C;);	// 21674                  mov     dl, 8Ch ;~ 01A2:8A65
cs=0x1a2;eip=0x008a67; 	T(MUL1_1(dl));	// 21675                  mul     dl ;~ 01A2:8A67
cs=0x1a2;eip=0x008a69; 	T(ADD(si, ax));	// 21676                  add     si, ax ;~ 01A2:8A69
cs=0x1a2;eip=0x008a6b; 	T(ax = seg_1f8b6;);	// 21677                  mov     ax, ds:seg_1F8B6 ;~ 01A2:8A6B
cs=0x1a2;eip=0x008a6e; 	X(*(dw*)(((db*)&off_1f8c8)+2) = ax;);	// 21678                  mov     word ptr ds:off_1F8C8+2, ax ;~ 01A2:8A6E
cs=0x1a2;eip=0x008a71; 	T(MOV(ax, *(dw*)(raddr(ds,bx))));	// 21679                  mov     ax, [bx] ;~ 01A2:8A71
cs=0x1a2;eip=0x008a73; 	T(MOV(dx, *(dw*)(raddr(ds,bx+2))));	// 21680                  mov     dx, [bx+2] ;~ 01A2:8A73
cs=0x1a2;eip=0x008a76; 	T(cl = 1;);	// 21681                  mov     cl, 1 ;~ 01A2:8A76
cs=0x1a2;eip=0x008a78; 	T(ch = 0x0E;);	// 21682                  mov     ch, 0Eh ;~ 01A2:8A78
cs=0x1a2;eip=0x008a7a; 	J(CALL(sub_18e26,0));	// 21683                  call    sub_18E26 ;~ 01A2:8A7A
cs=0x1a2;eip=0x008a7d; 	X(POP(ds));	// 21684                  pop     ds ;~ 01A2:8A7D
cs=0x1a2;eip=0x008a7e; 	X(POP(es));	// 21685                  pop     es ;~ 01A2:8A7E
cs=0x1a2;eip=0x008a7f; 	X(POP(di));	// 21686                  pop     di ;~ 01A2:8A7F
cs=0x1a2;eip=0x008a80; 	X(POP(si));	// 21687                  pop     si ;~ 01A2:8A80
cs=0x1a2;eip=0x008a81; 	X(POP(bp));	// 21688                  pop     bp ;~ 01A2:8A81
cs=0x1a2;eip=0x008a82; 	X(POP(dx));	// 21689                  pop     dx ;~ 01A2:8A82
cs=0x1a2;eip=0x008a83; 	X(POP(cx));	// 21690                  pop     cx ;~ 01A2:8A83
cs=0x1a2;eip=0x008a84; 	X(POP(bx));	// 21691                  pop     bx ;~ 01A2:8A84
cs=0x1a2;eip=0x008a85; 	X(POP(ax));	// 21692                  pop     ax ;~ 01A2:8A85
cs=0x1a2;eip=0x008a86; 	J(RETN(0));	// 21693                  retn ;~ 01A2:8A86

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_18a4a: 	goto sub_18a4a;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_18a87(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_18a87:
    _begin:
cs=0x1a2;eip=0x008a87; 	X(PUSH(ax));	// 21702                  push    ax ;~ 01A2:8A87
cs=0x1a2;eip=0x008a88; 	X(PUSH(bx));	// 21703                  push    bx ;~ 01A2:8A88
cs=0x1a2;eip=0x008a89; 	X(PUSH(cx));	// 21704                  push    cx ;~ 01A2:8A89
cs=0x1a2;eip=0x008a8a; 	X(PUSH(dx));	// 21705                  push    dx ;~ 01A2:8A8A
cs=0x1a2;eip=0x008a8b; 	X(PUSH(bp));	// 21706                  push    bp ;~ 01A2:8A8B
cs=0x1a2;eip=0x008a8c; 	X(PUSH(si));	// 21707                  push    si ;~ 01A2:8A8C
cs=0x1a2;eip=0x008a8d; 	X(PUSH(di));	// 21708                  push    di ;~ 01A2:8A8D
cs=0x1a2;eip=0x008a8e; 	X(PUSH(es));	// 21709                  push    es ;~ 01A2:8A8E
cs=0x1a2;eip=0x008a8f; 	X(PUSH(ds));	// 21710                  push    ds ;~ 01A2:8A8F
cs=0x1a2;eip=0x008a90; 	T(bx = seg_1f8b6;);	// 21711                  mov     bx, ds:seg_1F8B6 ;~ 01A2:8A90
cs=0x1a2;eip=0x008a94; 	X(*(dw*)(((db*)&off_1f8c8)+2) = bx;);	// 21712                  mov     word ptr ds:off_1F8C8+2, bx ;~ 01A2:8A94
cs=0x1a2;eip=0x008a98; 	X(word_1f3de = ax;);	// 21713                  mov     ds:word_1F3DE, ax ;~ 01A2:8A98
cs=0x1a2;eip=0x008a9b; 	T(XOR(bh, bh));	// 21714                  xor     bh, bh ;~ 01A2:8A9B
cs=0x1a2;eip=0x008a9d; 	T(bl = dl;);	// 21715                  mov     bl, dl ;~ 01A2:8A9D
cs=0x1a2;eip=0x008a9f; 	X(word_1f3e0 = bx;);	// 21716                  mov     ds:word_1F3E0, bx ;~ 01A2:8A9F
cs=0x1a2;eip=0x008aa3; 	X(word_1f3e2 = ax;);	// 21717                  mov     ds:word_1F3E2, ax ;~ 01A2:8AA3
cs=0x1a2;eip=0x008aa6; 	X(byte_1f82a = cl;);	// 21718                  mov     ds:byte_1F82A, cl ;~ 01A2:8AA6
cs=0x1a2;eip=0x008aaa; 	X(byte_1f82b = dh;);	// 21719                  mov     ds:byte_1F82B, dh ;~ 01A2:8AAA
cs=0x1a2;eip=0x008aae; 	T(CMP(byte_1f797, 0));	// 21720                  cmp     ds:byte_1F797, 0 ;~ 01A2:8AAE
cs=0x1a2;eip=0x008ab3; 	J(JZ(loc_18adb));	// 21721                  jz      short loc_18ADB ;~ 01A2:8AB3
cs=0x1a2;eip=0x008ab5; 	X(word_1f6ea = cx;);	// 21722                  mov     ds:word_1F6EA, cx ;~ 01A2:8AB5
cs=0x1a2;eip=0x008ab9; 	T(bl = dh;);	// 21723                  mov     bl, dh ;~ 01A2:8AB9
cs=0x1a2;eip=0x008abb; 	X(word_1f6ec = bx;);	// 21724                  mov     ds:word_1F6EC, bx ;~ 01A2:8ABB
cs=0x1a2;eip=0x008abf; 	T(SHR(ax, 1));	// 21725                  shr     ax, 1 ;~ 01A2:8ABF
cs=0x1a2;eip=0x008ac1; 	T(SHR(ax, 1));	// 21726                  shr     ax, 1 ;~ 01A2:8AC1
cs=0x1a2;eip=0x008ac3; 	T(SHR(ax, 1));	// 21727                  shr     ax, 1 ;~ 01A2:8AC3
cs=0x1a2;eip=0x008ac5; 	T(AND(ax, 0x0FFFE));	// 21728                  and     ax, 0FFFEh ;~ 01A2:8AC5
cs=0x1a2;eip=0x008ac8; 	T(bl = dl;);	// 21729                  mov     bl, dl ;~ 01A2:8AC8
cs=0x1a2;eip=0x008aca; 	T(SHL(bx, 1));	// 21730                  shl     bx, 1 ;~ 01A2:8ACA
cs=0x1a2;eip=0x008acc; 	T(SHL(bx, 1));	// 21731                  shl     bx, 1 ;~ 01A2:8ACC
cs=0x1a2;eip=0x008ace; 	T(SHL(bx, 1));	// 21732                  shl     bx, 1 ;~ 01A2:8ACE
cs=0x1a2;eip=0x008ad0; 	T(ADD(ax, bx));	// 21733                  add     ax, bx ;~ 01A2:8AD0
cs=0x1a2;eip=0x008ad2; 	T(SHL(bx, 1));	// 21734                  shl     bx, 1 ;~ 01A2:8AD2
cs=0x1a2;eip=0x008ad4; 	T(SHL(bx, 1));	// 21735                  shl     bx, 1 ;~ 01A2:8AD4
cs=0x1a2;eip=0x008ad6; 	T(ADD(ax, bx));	// 21736                  add     ax, bx ;~ 01A2:8AD6
cs=0x1a2;eip=0x008ad8; 	X(word_1f6e8 = ax;);	// 21737                  mov     ds:word_1F6E8, ax ;~ 01A2:8AD8
loc_18adb:
	// 5846 
cs=0x1a2;eip=0x008adb; 	T(si = 0x0FA1A;);	// 21740                  mov     si, 0FA1Ah ;~ 01A2:8ADB
cs=0x1a2;eip=0x008ade; 	J(CALL(sub_18b47,0));	// 21741                  call    sub_18B47 ;~ 01A2:8ADE
cs=0x1a2;eip=0x008ae1; 	J(CALL(sub_18b47,0));	// 21742                  call    sub_18B47 ;~ 01A2:8AE1
cs=0x1a2;eip=0x008ae4; 	T(CMP(byte_1f82b, 0));	// 21743                  cmp     ds:byte_1F82B, 0 ;~ 01A2:8AE4
cs=0x1a2;eip=0x008ae9; 	J(JZ(loc_18b34));	// 21744                  jz      short loc_18B34 ;~ 01A2:8AE9
loc_18aeb:
	// 5847 
cs=0x1a2;eip=0x008aeb; 	T(XOR(ax, ax));	// 21747                  xor     ax, ax ;~ 01A2:8AEB
cs=0x1a2;eip=0x008aed; 	T(dx = 7;);	// 21748                  mov     dx, 7 ;~ 01A2:8AED
cs=0x1a2;eip=0x008af0; 	J(CALL(sub_18840,0));	// 21749                  call    sub_18840 ;~ 01A2:8AF0
cs=0x1a2;eip=0x008af3; 	T(bp = ax;);	// 21751                  mov     bp, ax ;~ 01A2:8AF3
cs=0x1a2;eip=0x008af5; 	T(MOV(al, *(raddr(ds,bp+si))));	// 21752                  mov     al, ds:[bp+si] ;~ 01A2:8AF5
cs=0x1a2;eip=0x008af8; 	J(CALL(sub_18b6b,0));	// 21753                  call    sub_18B6B ;~ 01A2:8AF8
cs=0x1a2;eip=0x008afb; 	T(ADD(si, 8));	// 21754                  add     si, 8 ;~ 01A2:8AFB
cs=0x1a2;eip=0x008afe; 	T(al = byte_1f82a;);	// 21755                  mov     al, ds:byte_1F82A ;~ 01A2:8AFE
cs=0x1a2;eip=0x008b01; 	X(byte_1f82c = al;);	// 21756                  mov     ds:byte_1F82C, al ;~ 01A2:8B01
loc_18b04:
	// 5848 
cs=0x1a2;eip=0x008b04; 	T(ax = 0x0D;);	// 21759                  mov     ax, 0Dh ;~ 01A2:8B04
cs=0x1a2;eip=0x008b07; 	J(CALL(sub_18b6f,0));	// 21760                  call    sub_18B6F ;~ 01A2:8B07
cs=0x1a2;eip=0x008b0a; 	X(DEC(byte_1f82c));	// 21761                  dec     ds:byte_1F82C ;~ 01A2:8B0A
cs=0x1a2;eip=0x008b0e; 	J(JNZ(loc_18b04));	// 21762                  jnz     short loc_18B04 ;~ 01A2:8B0E
cs=0x1a2;eip=0x008b10; 	T(XOR(ax, ax));	// 21763                  xor     ax, ax ;~ 01A2:8B10
cs=0x1a2;eip=0x008b12; 	T(dx = 7;);	// 21764                  mov     dx, 7 ;~ 01A2:8B12
cs=0x1a2;eip=0x008b15; 	J(CALL(sub_18840,0));	// 21765                  call    sub_18840 ;~ 01A2:8B15
cs=0x1a2;eip=0x008b18; 	T(bp = ax;);	// 21767                  mov     bp, ax ;~ 01A2:8B18
cs=0x1a2;eip=0x008b1a; 	T(MOV(al, *(raddr(ds,bp+si))));	// 21768                  mov     al, ds:[bp+si] ;~ 01A2:8B1A
cs=0x1a2;eip=0x008b1d; 	J(CALL(sub_18b6b,0));	// 21769                  call    sub_18B6B ;~ 01A2:8B1D
cs=0x1a2;eip=0x008b20; 	T(SUB(si, 8));	// 21770                  sub     si, 8 ;~ 01A2:8B20
cs=0x1a2;eip=0x008b23; 	X(ADD(word_1f3e0, 8));	// 21771                  add     ds:word_1F3E0, 8 ;~ 01A2:8B23
cs=0x1a2;eip=0x008b28; 	T(ax = word_1f3e2;);	// 21772                  mov     ax, ds:word_1F3E2 ;~ 01A2:8B28
cs=0x1a2;eip=0x008b2b; 	X(word_1f3de = ax;);	// 21773                  mov     ds:word_1F3DE, ax ;~ 01A2:8B2B
cs=0x1a2;eip=0x008b2e; 	X(DEC(byte_1f82b));	// 21774                  dec     ds:byte_1F82B ;~ 01A2:8B2E
cs=0x1a2;eip=0x008b32; 	J(JNZ(loc_18aeb));	// 21775                  jnz     short loc_18AEB ;~ 01A2:8B32
loc_18b34:
	// 5849 
cs=0x1a2;eip=0x008b34; 	T(ADD(si, 0x10));	// 21778                  add     si, 10h ;~ 01A2:8B34
cs=0x1a2;eip=0x008b37; 	J(CALL(sub_18b47,0));	// 21779                  call    sub_18B47 ;~ 01A2:8B37
cs=0x1a2;eip=0x008b3a; 	J(CALL(sub_18b47,0));	// 21780                  call    sub_18B47 ;~ 01A2:8B3A
cs=0x1a2;eip=0x008b3d; 	X(POP(ds));	// 21781                  pop     ds ;~ 01A2:8B3D
cs=0x1a2;eip=0x008b3e; 	X(POP(es));	// 21782                  pop     es ;~ 01A2:8B3E
cs=0x1a2;eip=0x008b3f; 	X(POP(di));	// 21783                  pop     di ;~ 01A2:8B3F
cs=0x1a2;eip=0x008b40; 	X(POP(si));	// 21784                  pop     si ;~ 01A2:8B40
cs=0x1a2;eip=0x008b41; 	X(POP(bp));	// 21785                  pop     bp ;~ 01A2:8B41
cs=0x1a2;eip=0x008b42; 	X(POP(dx));	// 21786                  pop     dx ;~ 01A2:8B42
cs=0x1a2;eip=0x008b43; 	X(POP(cx));	// 21787                  pop     cx ;~ 01A2:8B43
cs=0x1a2;eip=0x008b44; 	X(POP(bx));	// 21788                  pop     bx ;~ 01A2:8B44
cs=0x1a2;eip=0x008b45; 	X(POP(ax));	// 21789                  pop     ax ;~ 01A2:8B45
cs=0x1a2;eip=0x008b46; 	J(RETN(0));	// 21790                  retn ;~ 01A2:8B46

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_18adb: 	goto loc_18adb;
        case m2c::kloc_18aeb: 	goto loc_18aeb;
        case m2c::kloc_18b04: 	goto loc_18b04;
        case m2c::kloc_18b34: 	goto loc_18b34;
        case m2c::ksub_18a87: 	goto sub_18a87;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_18b47(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_18b47:
    _begin:
cs=0x1a2;eip=0x008b47; 	T(al = byte_1f82a;);	// 21799                  mov     al, ds:byte_1F82A ;~ 01A2:8B47
cs=0x1a2;eip=0x008b4a; 	X(byte_1f82c = al;);	// 21800                  mov     ds:byte_1F82C, al ;~ 01A2:8B4A
cs=0x1a2;eip=0x008b4d; 	T(LODSB);	// 21801                  lodsb ;~ 01A2:8B4D
cs=0x1a2;eip=0x008b4e; 	J(CALL(sub_18b6b,0));	// 21802                  call    sub_18B6B ;~ 01A2:8B4E
cs=0x1a2;eip=0x008b51; 	T(LODSB);	// 21803                  lodsb ;~ 01A2:8B51
loc_18b52:
	// 5850 
cs=0x1a2;eip=0x008b52; 	J(CALL(sub_18b6f,0));	// 21806                  call    sub_18B6F ;~ 01A2:8B52
cs=0x1a2;eip=0x008b55; 	X(DEC(byte_1f82c));	// 21807                  dec     ds:byte_1F82C ;~ 01A2:8B55
cs=0x1a2;eip=0x008b59; 	J(JNZ(loc_18b52));	// 21808                  jnz     short loc_18B52 ;~ 01A2:8B59
cs=0x1a2;eip=0x008b5b; 	T(LODSB);	// 21809                  lodsb ;~ 01A2:8B5B
cs=0x1a2;eip=0x008b5c; 	J(CALL(sub_18b6b,0));	// 21810                  call    sub_18B6B ;~ 01A2:8B5C
cs=0x1a2;eip=0x008b5f; 	X(ADD(word_1f3e0, 8));	// 21811                  add     ds:word_1F3E0, 8 ;~ 01A2:8B5F
cs=0x1a2;eip=0x008b64; 	T(ax = word_1f3e2;);	// 21812                  mov     ax, ds:word_1F3E2 ;~ 01A2:8B64
cs=0x1a2;eip=0x008b67; 	X(word_1f3de = ax;);	// 21813                  mov     ds:word_1F3DE, ax ;~ 01A2:8B67
cs=0x1a2;eip=0x008b6a; 	J(RETN(0));	// 21814                  retn ;~ 01A2:8B6A

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_18b52: 	goto loc_18b52;
        case m2c::ksub_18b47: 	goto sub_18b47;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_18b6b(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_18b6b:
    _begin:
cs=0x1a2;eip=0x008b6b; 	T(XOR(dl, dl));	// 21823                  xor     dl, dl ;~ 01A2:8B6B
cs=0x1a2;eip=0x008b6d; 	J(return sub_18b6f(m2c::kloc_18b71, _state););	// 21824                  jmp     short loc_18B71 ;~ 01A2:8B6D

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_18b6b: 	goto sub_18b6b;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_18b6f(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_18b6f:
    _begin:
cs=0x1a2;eip=0x008b6f; 	T(XOR(dl, dl));	// 21833                  xor     dl, dl ;~ 01A2:8B6F
loc_18b71:
	// 5851 
cs=0x1a2;eip=0x008b71; 	X(PUSH(si));	// 21836                  push    si ;~ 01A2:8B71
cs=0x1a2;eip=0x008b72; 	X(PUSH(ax));	// 21837                  push    ax ;~ 01A2:8B72
cs=0x1a2;eip=0x008b73; 	T(CBW);	// 21838                  cbw ;~ 01A2:8B73
cs=0x1a2;eip=0x008b74; 	T(cl = 8;);	// 21839                  mov     cl, 8 ;~ 01A2:8B74
cs=0x1a2;eip=0x008b76; 	T(si = word_1f214;);	// 21840                  mov     si, word_1F214 ;~ 01A2:8B76
cs=0x1a2;eip=0x008b7a; 	T(bl = 0x20;);	// 21841                  mov     bl, 20h ; ' ' ;~ 01A2:8B7A
cs=0x1a2;eip=0x008b7c; 	T(MUL1_1(bl));	// 21842                  mul     bl ;~ 01A2:8B7C
cs=0x1a2;eip=0x008b7e; 	T(ADD(si, ax));	// 21843                  add     si, ax ;~ 01A2:8B7E
cs=0x1a2;eip=0x008b80; 	T(OR(dl, dl));	// 21844                  or      dl, dl ;~ 01A2:8B80
cs=0x1a2;eip=0x008b82; 	T(ax = word_1f3de;);	// 21845                  mov     ax, ds:word_1F3DE ;~ 01A2:8B82
cs=0x1a2;eip=0x008b85; 	T(dx = word_1f3e0;);	// 21846                  mov     dx, ds:word_1F3E0 ;~ 01A2:8B85
cs=0x1a2;eip=0x008b89; 	J(JZ(loc_18b90));	// 21847                  jz      short loc_18B90 ;~ 01A2:8B89
cs=0x1a2;eip=0x008b8b; 	J(CALL(sub_18b9b,0));	// 21848                  call    sub_18B9B ;~ 01A2:8B8B
cs=0x1a2;eip=0x008b8e; 	J(JMP(loc_18b93));	// 21849                  jmp     short loc_18B93 ;~ 01A2:8B8E
loc_18b90:
	// 5852 
cs=0x1a2;eip=0x008b90; 	J(CALL(sub_18d08,0));	// 21853                  call    sub_18D08 ;~ 01A2:8B90
loc_18b93:
	// 5853 
cs=0x1a2;eip=0x008b93; 	X(ADD(word_1f3de, 8));	// 21856                  add     ds:word_1F3DE, 8 ;~ 01A2:8B93
cs=0x1a2;eip=0x008b98; 	X(POP(ax));	// 21857                  pop     ax ;~ 01A2:8B98
cs=0x1a2;eip=0x008b99; 	X(POP(si));	// 21858                  pop     si ;~ 01A2:8B99
cs=0x1a2;eip=0x008b9a; 	J(RETN(0));	// 21859                  retn ;~ 01A2:8B9A

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_18b71: 	goto loc_18b71;
        case m2c::kloc_18b90: 	goto loc_18b90;
        case m2c::kloc_18b93: 	goto loc_18b93;
        case m2c::ksub_18b6f: 	goto sub_18b6f;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_18b9b(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_18b9b:
    _begin:
cs=0x1a2;eip=0x008b9b; 	X(PUSH(ax));	// 21868                  push    ax ;~ 01A2:8B9B
cs=0x1a2;eip=0x008b9c; 	X(PUSH(bx));	// 21869                  push    bx ;~ 01A2:8B9C
cs=0x1a2;eip=0x008b9d; 	X(PUSH(cx));	// 21870                  push    cx ;~ 01A2:8B9D
cs=0x1a2;eip=0x008b9e; 	X(PUSH(dx));	// 21871                  push    dx ;~ 01A2:8B9E
cs=0x1a2;eip=0x008b9f; 	X(PUSH(bp));	// 21872                  push    bp ;~ 01A2:8B9F
cs=0x1a2;eip=0x008ba0; 	X(PUSH(si));	// 21873                  push    si ;~ 01A2:8BA0
cs=0x1a2;eip=0x008ba1; 	X(PUSH(di));	// 21874                  push    di ;~ 01A2:8BA1
cs=0x1a2;eip=0x008ba2; 	X(PUSH(es));	// 21875                  push    es ;~ 01A2:8BA2
cs=0x1a2;eip=0x008ba3; 	X(PUSH(ds));	// 21876                  push    ds ;~ 01A2:8BA3
cs=0x1a2;eip=0x008ba4; 	X(byte_1f8c5 = cl;);	// 21877                  mov     ds:byte_1F8C5, cl ;~ 01A2:8BA4
cs=0x1a2;eip=0x008ba8; 	T(cl = al;);	// 21878                  mov     cl, al ;~ 01A2:8BA8
cs=0x1a2;eip=0x008baa; 	T(AND(cl, 7));	// 21879                  and     cl, 7 ;~ 01A2:8BAA
cs=0x1a2;eip=0x008bad; 	T(di = dx;);	// 21880                  mov     di, dx ;~ 01A2:8BAD
cs=0x1a2;eip=0x008baf; 	T(SHL(di, 1));	// 21881                  shl     di, 1 ;~ 01A2:8BAF
cs=0x1a2;eip=0x008bb1; 	T(MOV(di, *(dw*)(raddr(ss,di+0))));	// 21882                  mov     di, ss:[di+0] ;~ 01A2:8BB1
cs=0x1a2;eip=0x008bb6; 	T(SHR(ax, 1));	// 21883                  shr     ax, 1 ;~ 01A2:8BB6
cs=0x1a2;eip=0x008bb8; 	T(SHR(ax, 1));	// 21884                  shr     ax, 1 ;~ 01A2:8BB8
cs=0x1a2;eip=0x008bba; 	T(SHR(ax, 1));	// 21885                  shr     ax, 1 ;~ 01A2:8BBA
cs=0x1a2;eip=0x008bbc; 	T(ADD(di, ax));	// 21886                  add     di, ax ;~ 01A2:8BBC
cs=0x1a2;eip=0x008bbe; 	T(es = seg_1f8f4;);	// 21887                  mov     es, ds:seg_1F8F4 ;~ 01A2:8BBE
cs=0x1a2;eip=0x008bc2; 	T(AND(cl, 7));	// 21889                  and     cl, 7 ;~ 01A2:8BC2
cs=0x1a2;eip=0x008bc5; 	J(JNZ(loc_18bca));	// 21890                  jnz     short loc_18BCA ;~ 01A2:8BC5
cs=0x1a2;eip=0x008bc7; 	J(JMP(loc_18c7e));	// 21891                  jmp     loc_18C7E ;~ 01A2:8BC7
loc_18bca:
	// 5854 
cs=0x1a2;eip=0x008bca; 	T(dx = 0x3C4;);	// 21896                  mov     dx, 3C4h ;~ 01A2:8BCA
cs=0x1a2;eip=0x008bcd; 	T(ax = 0x0F02;);	// 21897                  mov     ax, 0F02h ;~ 01A2:8BCD
cs=0x1a2;eip=0x008bd0; 	S(OUT(dx, ax));	// 21898                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:8BD0
cs=0x1a2;eip=0x008bd1; 	T(dx = 0x3CE;);	// 21900                  mov     dx, 3CEh ;~ 01A2:8BD1
cs=0x1a2;eip=0x008bd4; 	T(ax = 0x805;);	// 21901                  mov     ax, 805h ;~ 01A2:8BD4
cs=0x1a2;eip=0x008bd7; 	S(OUT(dx, ax));	// 21902                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8BD7
cs=0x1a2;eip=0x008bd8; 	T(ax = 0x803;);	// 21904                  mov     ax, 803h ;~ 01A2:8BD8
cs=0x1a2;eip=0x008bdb; 	S(OUT(dx, ax));	// 21905                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8BDB
cs=0x1a2;eip=0x008bdc; 	T(ax = 7;);	// 21907                  mov     ax, 7 ;~ 01A2:8BDC
cs=0x1a2;eip=0x008bdf; 	S(OUT(dx, ax));	// 21908                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8BDF
cs=0x1a2;eip=0x008be0; 	T(ds = *(dw*)(((db*)&off_1f8c8)+2););	// 21911                  mov     ds, word ptr es:off_1F8C8+2 ;~ 01A2:8BE0
cs=0x1a2;eip=0x008be5; 	T(LODSW);	// 21913                  lodsw ;~ 01A2:8BE5
cs=0x1a2;eip=0x008be6; 	T(bp = ax;);	// 21914                  mov     bp, ax ;~ 01A2:8BE6
cs=0x1a2;eip=0x008be8; 	T(LODSW);	// 21915                  lodsw ;~ 01A2:8BE8
cs=0x1a2;eip=0x008be9; 	T(bx = ax;);	// 21916                  mov     bx, ax ;~ 01A2:8BE9
cs=0x1a2;eip=0x008beb; 	T(OR(ax, bp));	// 21917                  or      ax, bp ;~ 01A2:8BEB
cs=0x1a2;eip=0x008bed; 	T(OR(ah, al));	// 21918                  or      ah, al ;~ 01A2:8BED
cs=0x1a2;eip=0x008bef; 	T(XOR(al, al));	// 21919                  xor     al, al ;~ 01A2:8BEF
cs=0x1a2;eip=0x008bf1; 	T(SHR(ax, cl));	// 21920                  shr     ax, cl ;~ 01A2:8BF1
cs=0x1a2;eip=0x008bf3; 	T(NOT(ax));	// 21921                  not     ax ;~ 01A2:8BF3
cs=0x1a2;eip=0x008bf5; 	T(ds = *(dw*)(((db*)&seg_1f171)+1););	// 21922                  mov     ds, es:seg_1F171+1 ;~ 01A2:8BF5
cs=0x1a2;eip=0x008bfa; 	X(AND(*(raddr(ds,di)), ah));	// 21924                  and     [di], ah ;~ 01A2:8BFA
cs=0x1a2;eip=0x008bfc; 	X(AND(*(raddr(ds,di+1)), al));	// 21925                  and     [di+1], al ;~ 01A2:8BFC
cs=0x1a2;eip=0x008bff; 	T(dx = 0x3C4;);	// 21926                  mov     dx, 3C4h ;~ 01A2:8BFF
cs=0x1a2;eip=0x008c02; 	T(ax = 0x202;);	// 21927                  mov     ax, 202h ;~ 01A2:8C02
cs=0x1a2;eip=0x008c05; 	S(OUT(dx, ax));	// 21928                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:8C05
cs=0x1a2;eip=0x008c06; 	T(dx = 0x3CE;);	// 21930                  mov     dx, 3CEh ;~ 01A2:8C06
cs=0x1a2;eip=0x008c09; 	T(ax = 5;);	// 21931                  mov     ax, 5 ;~ 01A2:8C09
cs=0x1a2;eip=0x008c0c; 	S(OUT(dx, ax));	// 21932                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8C0C
cs=0x1a2;eip=0x008c0d; 	T(ax = 3;);	// 21939                  mov     ax, 3 ;~ 01A2:8C0D
cs=0x1a2;eip=0x008c10; 	S(OUT(dx, ax));	// 21940                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8C10
cs=0x1a2;eip=0x008c11; 	T(ax = 0x104;);	// 21945                  mov     ax, 104h ;~ 01A2:8C11
cs=0x1a2;eip=0x008c14; 	S(OUT(dx, ax));	// 21946                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8C14
cs=0x1a2;eip=0x008c15; 	T(ax = bp;);	// 21948                  mov     ax, bp ;~ 01A2:8C15
cs=0x1a2;eip=0x008c17; 	T(ch = al;);	// 21949                  mov     ch, al ;~ 01A2:8C17
cs=0x1a2;eip=0x008c19; 	T(XOR(al, al));	// 21950                  xor     al, al ;~ 01A2:8C19
cs=0x1a2;eip=0x008c1b; 	T(SHR(ax, cl));	// 21951                  shr     ax, cl ;~ 01A2:8C1B
cs=0x1a2;eip=0x008c1d; 	T(XCHG(al, ah));	// 21952                  xchg    al, ah ;~ 01A2:8C1D
cs=0x1a2;eip=0x008c1f; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 21953                  or      [di], ax ;~ 01A2:8C1F
cs=0x1a2;eip=0x008c21; 	T(dx = 0x3CE;);	// 21954                  mov     dx, 3CEh ;~ 01A2:8C21
cs=0x1a2;eip=0x008c24; 	T(ax = 4;);	// 21955                  mov     ax, 4 ;~ 01A2:8C24
cs=0x1a2;eip=0x008c27; 	S(OUT(dx, ax));	// 21956                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8C27
cs=0x1a2;eip=0x008c28; 	T(dx = 0x3C4;);	// 21959                  mov     dx, 3C4h ;~ 01A2:8C28
cs=0x1a2;eip=0x008c2b; 	T(ax = 0x102;);	// 21960                  mov     ax, 102h ;~ 01A2:8C2B
cs=0x1a2;eip=0x008c2e; 	S(OUT(dx, ax));	// 21961                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:8C2E
cs=0x1a2;eip=0x008c2f; 	T(ah = ch;);	// 21963                  mov     ah, ch ;~ 01A2:8C2F
cs=0x1a2;eip=0x008c31; 	T(XOR(al, al));	// 21964                  xor     al, al ;~ 01A2:8C31
cs=0x1a2;eip=0x008c33; 	T(SHR(ax, cl));	// 21965                  shr     ax, cl ;~ 01A2:8C33
cs=0x1a2;eip=0x008c35; 	T(XCHG(al, ah));	// 21966                  xchg    al, ah ;~ 01A2:8C35
cs=0x1a2;eip=0x008c37; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 21967                  or      [di], ax ;~ 01A2:8C37
cs=0x1a2;eip=0x008c39; 	T(dx = 0x3CE;);	// 21968                  mov     dx, 3CEh ;~ 01A2:8C39
cs=0x1a2;eip=0x008c3c; 	T(ax = 0x204;);	// 21969                  mov     ax, 204h ;~ 01A2:8C3C
cs=0x1a2;eip=0x008c3f; 	S(OUT(dx, ax));	// 21970                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8C3F
cs=0x1a2;eip=0x008c40; 	T(dx = 0x3C4;);	// 21972                  mov     dx, 3C4h ;~ 01A2:8C40
cs=0x1a2;eip=0x008c43; 	T(ax = 0x402;);	// 21973                  mov     ax, 402h ;~ 01A2:8C43
cs=0x1a2;eip=0x008c46; 	S(OUT(dx, ax));	// 21974                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:8C46
cs=0x1a2;eip=0x008c47; 	T(ah = bl;);	// 21976                  mov     ah, bl ;~ 01A2:8C47
cs=0x1a2;eip=0x008c49; 	T(XOR(al, al));	// 21977                  xor     al, al ;~ 01A2:8C49
cs=0x1a2;eip=0x008c4b; 	T(SHR(ax, cl));	// 21978                  shr     ax, cl ;~ 01A2:8C4B
cs=0x1a2;eip=0x008c4d; 	T(XCHG(al, ah));	// 21979                  xchg    al, ah ;~ 01A2:8C4D
cs=0x1a2;eip=0x008c4f; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 21980                  or      [di], ax ;~ 01A2:8C4F
cs=0x1a2;eip=0x008c51; 	T(dx = 0x3CE;);	// 21981                  mov     dx, 3CEh ;~ 01A2:8C51
cs=0x1a2;eip=0x008c54; 	T(ax = 0x304;);	// 21982                  mov     ax, 304h ;~ 01A2:8C54
cs=0x1a2;eip=0x008c57; 	S(OUT(dx, ax));	// 21983                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8C57
cs=0x1a2;eip=0x008c58; 	T(dx = 0x3C4;);	// 21985                  mov     dx, 3C4h ;~ 01A2:8C58
cs=0x1a2;eip=0x008c5b; 	T(ax = 0x802;);	// 21986                  mov     ax, 802h ;~ 01A2:8C5B
cs=0x1a2;eip=0x008c5e; 	S(OUT(dx, ax));	// 21987                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:8C5E
cs=0x1a2;eip=0x008c5f; 	T(XOR(bl, bl));	// 21989                  xor     bl, bl ;~ 01A2:8C5F
cs=0x1a2;eip=0x008c61; 	T(SHR(bx, cl));	// 21990                  shr     bx, cl ;~ 01A2:8C61
cs=0x1a2;eip=0x008c63; 	T(XCHG(bl, bh));	// 21991                  xchg    bl, bh ;~ 01A2:8C63
cs=0x1a2;eip=0x008c65; 	X(OR(*(dw*)(raddr(ds,di)), bx));	// 21992                  or      [di], bx ;~ 01A2:8C65
cs=0x1a2;eip=0x008c67; 	T(ADD(di, 0x28));	// 21993                  add     di, 28h ; '(' ;~ 01A2:8C67
cs=0x1a2;eip=0x008c6a; 	X(DEC(byte_1f8c5));	// 21994                  dec     es:byte_1F8C5 ;~ 01A2:8C6A
cs=0x1a2;eip=0x008c6f; 	J(JZ(loc_18c74));	// 21995                  jz      short loc_18C74 ;~ 01A2:8C6F
cs=0x1a2;eip=0x008c71; 	J(JMP(loc_18bca));	// 21996                  jmp     loc_18BCA ;~ 01A2:8C71
loc_18c74:
	// 5855 
cs=0x1a2;eip=0x008c74; 	X(POP(ds));	// 22000                  pop     ds ;~ 01A2:8C74
cs=0x1a2;eip=0x008c75; 	X(POP(es));	// 22002                  pop     es ;~ 01A2:8C75
cs=0x1a2;eip=0x008c76; 	X(POP(di));	// 22004                  pop     di ;~ 01A2:8C76
cs=0x1a2;eip=0x008c77; 	X(POP(si));	// 22005                  pop     si ;~ 01A2:8C77
cs=0x1a2;eip=0x008c78; 	X(POP(bp));	// 22006                  pop     bp ;~ 01A2:8C78
cs=0x1a2;eip=0x008c79; 	X(POP(dx));	// 22007                  pop     dx ;~ 01A2:8C79
cs=0x1a2;eip=0x008c7a; 	X(POP(cx));	// 22008                  pop     cx ;~ 01A2:8C7A
cs=0x1a2;eip=0x008c7b; 	X(POP(bx));	// 22009                  pop     bx ;~ 01A2:8C7B
cs=0x1a2;eip=0x008c7c; 	X(POP(ax));	// 22010                  pop     ax ;~ 01A2:8C7C
cs=0x1a2;eip=0x008c7d; 	J(RETN(0));	// 22011                  retn ;~ 01A2:8C7D
loc_18c7e:
	// 5856 
cs=0x1a2;eip=0x008c7e; 	T(dx = 0x3C4;);	// 22017                  mov     dx, 3C4h ;~ 01A2:8C7E
cs=0x1a2;eip=0x008c81; 	T(ax = 0x0F02;);	// 22018                  mov     ax, 0F02h ;~ 01A2:8C81
cs=0x1a2;eip=0x008c84; 	S(OUT(dx, ax));	// 22019                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:8C84
cs=0x1a2;eip=0x008c85; 	T(dx = 0x3CE;);	// 22021                  mov     dx, 3CEh ;~ 01A2:8C85
cs=0x1a2;eip=0x008c88; 	T(ax = 0x805;);	// 22022                  mov     ax, 805h ;~ 01A2:8C88
cs=0x1a2;eip=0x008c8b; 	S(OUT(dx, ax));	// 22023                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8C8B
cs=0x1a2;eip=0x008c8c; 	T(ax = 0x803;);	// 22025                  mov     ax, 803h ;~ 01A2:8C8C
cs=0x1a2;eip=0x008c8f; 	S(OUT(dx, ax));	// 22026                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8C8F
cs=0x1a2;eip=0x008c90; 	T(ax = 7;);	// 22028                  mov     ax, 7 ;~ 01A2:8C90
cs=0x1a2;eip=0x008c93; 	S(OUT(dx, ax));	// 22029                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8C93
cs=0x1a2;eip=0x008c94; 	T(ds = *(dw*)(((db*)&off_1f8c8)+2););	// 22032                  mov     ds, word ptr es:off_1F8C8+2 ;~ 01A2:8C94
cs=0x1a2;eip=0x008c99; 	T(LODSW);	// 22034                  lodsw ;~ 01A2:8C99
cs=0x1a2;eip=0x008c9a; 	T(cx = ax;);	// 22035                  mov     cx, ax ;~ 01A2:8C9A
cs=0x1a2;eip=0x008c9c; 	T(LODSW);	// 22036                  lodsw ;~ 01A2:8C9C
cs=0x1a2;eip=0x008c9d; 	T(bx = ax;);	// 22037                  mov     bx, ax ;~ 01A2:8C9D
cs=0x1a2;eip=0x008c9f; 	T(OR(ax, cx));	// 22038                  or      ax, cx ;~ 01A2:8C9F
cs=0x1a2;eip=0x008ca1; 	T(OR(al, ah));	// 22039                  or      al, ah ;~ 01A2:8CA1
cs=0x1a2;eip=0x008ca3; 	T(NOT(ax));	// 22040                  not     ax ;~ 01A2:8CA3
cs=0x1a2;eip=0x008ca5; 	T(ds = *(dw*)(((db*)&seg_1f171)+1););	// 22041                  mov     ds, es:seg_1F171+1 ;~ 01A2:8CA5
cs=0x1a2;eip=0x008caa; 	X(AND(*(raddr(ds,di)), al));	// 22043                  and     [di], al ;~ 01A2:8CAA
cs=0x1a2;eip=0x008cac; 	T(dx = 0x3C4;);	// 22044                  mov     dx, 3C4h ;~ 01A2:8CAC
cs=0x1a2;eip=0x008caf; 	T(ax = 0x102;);	// 22045                  mov     ax, 102h ;~ 01A2:8CAF
cs=0x1a2;eip=0x008cb2; 	S(OUT(dx, ax));	// 22046                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:8CB2
cs=0x1a2;eip=0x008cb3; 	T(dx = 0x3CE;);	// 22048                  mov     dx, 3CEh ;~ 01A2:8CB3
cs=0x1a2;eip=0x008cb6; 	T(ax = 5;);	// 22049                  mov     ax, 5 ;~ 01A2:8CB6
cs=0x1a2;eip=0x008cb9; 	S(OUT(dx, ax));	// 22050                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8CB9
cs=0x1a2;eip=0x008cba; 	T(ax = 3;);	// 22057                  mov     ax, 3 ;~ 01A2:8CBA
cs=0x1a2;eip=0x008cbd; 	S(OUT(dx, ax));	// 22058                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8CBD
cs=0x1a2;eip=0x008cbe; 	T(ax = 4;);	// 22063                  mov     ax, 4 ;~ 01A2:8CBE
cs=0x1a2;eip=0x008cc1; 	S(OUT(dx, ax));	// 22064                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8CC1
cs=0x1a2;eip=0x008cc2; 	X(OR(*(raddr(ds,di)), cl));	// 22067                  or      [di], cl ;~ 01A2:8CC2
cs=0x1a2;eip=0x008cc4; 	T(dx = 0x3CE;);	// 22068                  mov     dx, 3CEh ;~ 01A2:8CC4
cs=0x1a2;eip=0x008cc7; 	T(ax = 0x104;);	// 22069                  mov     ax, 104h ;~ 01A2:8CC7
cs=0x1a2;eip=0x008cca; 	S(OUT(dx, ax));	// 22070                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8CCA
cs=0x1a2;eip=0x008ccb; 	T(dx = 0x3C4;);	// 22072                  mov     dx, 3C4h ;~ 01A2:8CCB
cs=0x1a2;eip=0x008cce; 	T(ax = 0x202;);	// 22073                  mov     ax, 202h ;~ 01A2:8CCE
cs=0x1a2;eip=0x008cd1; 	S(OUT(dx, ax));	// 22074                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:8CD1
cs=0x1a2;eip=0x008cd2; 	X(OR(*(raddr(ds,di)), ch));	// 22076                  or      [di], ch ;~ 01A2:8CD2
cs=0x1a2;eip=0x008cd4; 	T(dx = 0x3CE;);	// 22077                  mov     dx, 3CEh ;~ 01A2:8CD4
cs=0x1a2;eip=0x008cd7; 	T(ax = 0x204;);	// 22078                  mov     ax, 204h ;~ 01A2:8CD7
cs=0x1a2;eip=0x008cda; 	S(OUT(dx, ax));	// 22079                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8CDA
cs=0x1a2;eip=0x008cdb; 	T(dx = 0x3C4;);	// 22081                  mov     dx, 3C4h ;~ 01A2:8CDB
cs=0x1a2;eip=0x008cde; 	T(ax = 0x402;);	// 22082                  mov     ax, 402h ;~ 01A2:8CDE
cs=0x1a2;eip=0x008ce1; 	S(OUT(dx, ax));	// 22083                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:8CE1
cs=0x1a2;eip=0x008ce2; 	X(OR(*(raddr(ds,di)), bl));	// 22085                  or      [di], bl ;~ 01A2:8CE2
cs=0x1a2;eip=0x008ce4; 	T(dx = 0x3CE;);	// 22086                  mov     dx, 3CEh ;~ 01A2:8CE4
cs=0x1a2;eip=0x008ce7; 	T(ax = 0x304;);	// 22087                  mov     ax, 304h ;~ 01A2:8CE7
cs=0x1a2;eip=0x008cea; 	S(OUT(dx, ax));	// 22088                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8CEA
cs=0x1a2;eip=0x008ceb; 	T(dx = 0x3C4;);	// 22090                  mov     dx, 3C4h ;~ 01A2:8CEB
cs=0x1a2;eip=0x008cee; 	T(ax = 0x802;);	// 22091                  mov     ax, 802h ;~ 01A2:8CEE
cs=0x1a2;eip=0x008cf1; 	S(OUT(dx, ax));	// 22092                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:8CF1
cs=0x1a2;eip=0x008cf2; 	X(OR(*(raddr(ds,di)), bh));	// 22094                  or      [di], bh ;~ 01A2:8CF2
cs=0x1a2;eip=0x008cf4; 	T(ADD(di, 0x28));	// 22095                  add     di, 28h ; '(' ;~ 01A2:8CF4
cs=0x1a2;eip=0x008cf7; 	X(DEC(byte_1f8c5));	// 22096                  dec     es:byte_1F8C5 ;~ 01A2:8CF7
cs=0x1a2;eip=0x008cfc; 	J(JNZ(loc_18c7e));	// 22097                  jnz     short loc_18C7E ;~ 01A2:8CFC
cs=0x1a2;eip=0x008cfe; 	X(POP(ds));	// 22098                  pop     ds ;~ 01A2:8CFE
cs=0x1a2;eip=0x008cff; 	X(POP(es));	// 22100                  pop     es ;~ 01A2:8CFF
cs=0x1a2;eip=0x008d00; 	X(POP(di));	// 22102                  pop     di ;~ 01A2:8D00
cs=0x1a2;eip=0x008d01; 	X(POP(si));	// 22103                  pop     si ;~ 01A2:8D01
cs=0x1a2;eip=0x008d02; 	X(POP(bp));	// 22104                  pop     bp ;~ 01A2:8D02
cs=0x1a2;eip=0x008d03; 	X(POP(dx));	// 22105                  pop     dx ;~ 01A2:8D03
cs=0x1a2;eip=0x008d04; 	X(POP(cx));	// 22106                  pop     cx ;~ 01A2:8D04
cs=0x1a2;eip=0x008d05; 	X(POP(bx));	// 22107                  pop     bx ;~ 01A2:8D05
cs=0x1a2;eip=0x008d06; 	X(POP(ax));	// 22108                  pop     ax ;~ 01A2:8D06
cs=0x1a2;eip=0x008d07; 	J(RETN(0));	// 22109                  retn ;~ 01A2:8D07

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_18bca: 	goto loc_18bca;
        case m2c::kloc_18c74: 	goto loc_18c74;
        case m2c::kloc_18c7e: 	goto loc_18c7e;
        case m2c::ksub_18b9b: 	goto sub_18b9b;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_18d08(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_18d08:
    _begin:
cs=0x1a2;eip=0x008d08; 	X(byte_1f8c5 = cl;);	// 22117                  mov     ds:byte_1F8C5, cl ;~ 01A2:8D08
cs=0x1a2;eip=0x008d0c; 	X(PUSH(ax));	// 22118                  push    ax ;~ 01A2:8D0C
cs=0x1a2;eip=0x008d0d; 	X(PUSH(bx));	// 22119                  push    bx ;~ 01A2:8D0D
cs=0x1a2;eip=0x008d0e; 	X(PUSH(cx));	// 22120                  push    cx ;~ 01A2:8D0E
cs=0x1a2;eip=0x008d0f; 	X(PUSH(dx));	// 22121                  push    dx ;~ 01A2:8D0F
cs=0x1a2;eip=0x008d10; 	X(PUSH(bp));	// 22122                  push    bp ;~ 01A2:8D10
cs=0x1a2;eip=0x008d11; 	X(PUSH(si));	// 22123                  push    si ;~ 01A2:8D11
cs=0x1a2;eip=0x008d12; 	X(PUSH(di));	// 22124                  push    di ;~ 01A2:8D12
cs=0x1a2;eip=0x008d13; 	X(PUSH(es));	// 22125                  push    es ;~ 01A2:8D13
cs=0x1a2;eip=0x008d14; 	X(PUSH(ds));	// 22126                  push    ds ;~ 01A2:8D14
cs=0x1a2;eip=0x008d15; 	T(di = dx;);	// 22127                  mov     di, dx ;~ 01A2:8D15
cs=0x1a2;eip=0x008d17; 	T(SHL(di, 1));	// 22128                  shl     di, 1 ;~ 01A2:8D17
cs=0x1a2;eip=0x008d19; 	T(MOV(di, *(dw*)(raddr(ss,di+0))));	// 22129                  mov     di, ss:[di+0] ;~ 01A2:8D19
cs=0x1a2;eip=0x008d1e; 	T(SHR(ax, 1));	// 22130                  shr     ax, 1 ;~ 01A2:8D1E
cs=0x1a2;eip=0x008d20; 	T(SHR(ax, 1));	// 22131                  shr     ax, 1 ;~ 01A2:8D20
cs=0x1a2;eip=0x008d22; 	T(SHR(ax, 1));	// 22132                  shr     ax, 1 ;~ 01A2:8D22
cs=0x1a2;eip=0x008d24; 	T(ADD(di, ax));	// 22133                  add     di, ax ;~ 01A2:8D24
cs=0x1a2;eip=0x008d26; 	T(cl = dl;);	// 22134                  mov     cl, dl ;~ 01A2:8D26
cs=0x1a2;eip=0x008d28; 	T(es = seg_1f8f4;);	// 22135                  mov     es, ds:seg_1F8F4 ;~ 01A2:8D28
loc_18d2c:
	// 5857 
cs=0x1a2;eip=0x008d2c; 	T(dx = 0x3CE;);	// 22139                  mov     dx, 3CEh ;~ 01A2:8D2C
cs=0x1a2;eip=0x008d2f; 	T(ax = 7;);	// 22140                  mov     ax, 7 ;~ 01A2:8D2F
cs=0x1a2;eip=0x008d32; 	S(OUT(dx, ax));	// 22141                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8D32
cs=0x1a2;eip=0x008d33; 	T(ds = *(dw*)(((db*)&off_1f8c8)+2););	// 22144                  mov     ds, word ptr es:off_1F8C8+2 ;~ 01A2:8D33
cs=0x1a2;eip=0x008d38; 	T(LODSW);	// 22146                  lodsw ;~ 01A2:8D38
cs=0x1a2;eip=0x008d39; 	T(cx = ax;);	// 22147                  mov     cx, ax ;~ 01A2:8D39
cs=0x1a2;eip=0x008d3b; 	T(LODSW);	// 22148                  lodsw ;~ 01A2:8D3B
cs=0x1a2;eip=0x008d3c; 	T(bx = ax;);	// 22149                  mov     bx, ax ;~ 01A2:8D3C
cs=0x1a2;eip=0x008d3e; 	T(ds = *(dw*)(((db*)&seg_1f171)+1););	// 22150                  mov     ds, es:seg_1F171+1 ;~ 01A2:8D3E
cs=0x1a2;eip=0x008d43; 	T(dx = 0x3C4;);	// 22152                  mov     dx, 3C4h ;~ 01A2:8D43
cs=0x1a2;eip=0x008d46; 	T(ax = 0x202;);	// 22153                  mov     ax, 202h ;~ 01A2:8D46
cs=0x1a2;eip=0x008d49; 	S(OUT(dx, ax));	// 22154                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:8D49
cs=0x1a2;eip=0x008d4a; 	T(dx = 0x3CE;);	// 22156                  mov     dx, 3CEh ;~ 01A2:8D4A
cs=0x1a2;eip=0x008d4d; 	T(ax = 5;);	// 22157                  mov     ax, 5 ;~ 01A2:8D4D
cs=0x1a2;eip=0x008d50; 	S(OUT(dx, ax));	// 22158                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8D50
cs=0x1a2;eip=0x008d51; 	T(ax = 3;);	// 22165                  mov     ax, 3 ;~ 01A2:8D51
cs=0x1a2;eip=0x008d54; 	S(OUT(dx, ax));	// 22166                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8D54
cs=0x1a2;eip=0x008d55; 	X(MOV(*(raddr(ds,di)), ch));	// 22171                  mov     [di], ch ;~ 01A2:8D55
cs=0x1a2;eip=0x008d57; 	T(dx = 0x3C4;);	// 22172                  mov     dx, 3C4h ;~ 01A2:8D57
cs=0x1a2;eip=0x008d5a; 	T(ax = 0x102;);	// 22173                  mov     ax, 102h ;~ 01A2:8D5A
cs=0x1a2;eip=0x008d5d; 	S(OUT(dx, ax));	// 22174                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:8D5D
cs=0x1a2;eip=0x008d5e; 	X(MOV(*(raddr(ds,di)), cl));	// 22176                  mov     [di], cl ;~ 01A2:8D5E
cs=0x1a2;eip=0x008d60; 	T(dx = 0x3C4;);	// 22177                  mov     dx, 3C4h ;~ 01A2:8D60
cs=0x1a2;eip=0x008d63; 	T(ax = 0x402;);	// 22178                  mov     ax, 402h ;~ 01A2:8D63
cs=0x1a2;eip=0x008d66; 	S(OUT(dx, ax));	// 22179                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:8D66
cs=0x1a2;eip=0x008d67; 	X(MOV(*(raddr(ds,di)), bl));	// 22181                  mov     [di], bl ;~ 01A2:8D67
cs=0x1a2;eip=0x008d69; 	T(dx = 0x3C4;);	// 22182                  mov     dx, 3C4h ;~ 01A2:8D69
cs=0x1a2;eip=0x008d6c; 	T(ax = 0x802;);	// 22183                  mov     ax, 802h ;~ 01A2:8D6C
cs=0x1a2;eip=0x008d6f; 	S(OUT(dx, ax));	// 22184                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:8D6F
cs=0x1a2;eip=0x008d70; 	X(MOV(*(raddr(ds,di)), bh));	// 22186                  mov     [di], bh ;~ 01A2:8D70
cs=0x1a2;eip=0x008d72; 	T(ADD(di, 0x28));	// 22187                  add     di, 28h ; '(' ;~ 01A2:8D72
cs=0x1a2;eip=0x008d75; 	X(DEC(byte_1f8c5));	// 22188                  dec     es:byte_1F8C5 ;~ 01A2:8D75
cs=0x1a2;eip=0x008d7a; 	J(JNZ(loc_18d2c));	// 22189                  jnz     short loc_18D2C ;~ 01A2:8D7A
cs=0x1a2;eip=0x008d7c; 	X(POP(ds));	// 22190                  pop     ds ;~ 01A2:8D7C
cs=0x1a2;eip=0x008d7d; 	X(POP(es));	// 22192                  pop     es ;~ 01A2:8D7D
cs=0x1a2;eip=0x008d7e; 	X(POP(di));	// 22194                  pop     di ;~ 01A2:8D7E
cs=0x1a2;eip=0x008d7f; 	X(POP(si));	// 22195                  pop     si ;~ 01A2:8D7F
cs=0x1a2;eip=0x008d80; 	X(POP(bp));	// 22196                  pop     bp ;~ 01A2:8D80
cs=0x1a2;eip=0x008d81; 	X(POP(dx));	// 22197                  pop     dx ;~ 01A2:8D81
cs=0x1a2;eip=0x008d82; 	X(POP(cx));	// 22198                  pop     cx ;~ 01A2:8D82
cs=0x1a2;eip=0x008d83; 	X(POP(bx));	// 22199                  pop     bx ;~ 01A2:8D83
cs=0x1a2;eip=0x008d84; 	X(POP(ax));	// 22200                  pop     ax ;~ 01A2:8D84
cs=0x1a2;eip=0x008d85; 	J(RETN(0));	// 22201                  retn ;~ 01A2:8D85

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_18d2c: 	goto loc_18d2c;
        case m2c::ksub_18d08: 	goto sub_18d08;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_18d86(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_18d86:
    _begin:
cs=0x1a2;eip=0x008d86; 	X(PUSH(ax));	// 22211                  push    ax ;~ 01A2:8D86
cs=0x1a2;eip=0x008d87; 	X(PUSH(bx));	// 22212                  push    bx ;~ 01A2:8D87
cs=0x1a2;eip=0x008d88; 	X(PUSH(cx));	// 22213                  push    cx ;~ 01A2:8D88
cs=0x1a2;eip=0x008d89; 	X(PUSH(dx));	// 22214                  push    dx ;~ 01A2:8D89
cs=0x1a2;eip=0x008d8a; 	X(PUSH(bp));	// 22215                  push    bp ;~ 01A2:8D8A
cs=0x1a2;eip=0x008d8b; 	X(PUSH(si));	// 22216                  push    si ;~ 01A2:8D8B
cs=0x1a2;eip=0x008d8c; 	X(PUSH(di));	// 22217                  push    di ;~ 01A2:8D8C
cs=0x1a2;eip=0x008d8d; 	X(PUSH(es));	// 22218                  push    es ;~ 01A2:8D8D
cs=0x1a2;eip=0x008d8e; 	X(PUSH(ds));	// 22219                  push    ds ;~ 01A2:8D8E
cs=0x1a2;eip=0x008d8f; 	X(PUSH(dx));	// 22220                  push    dx ;~ 01A2:8D8F
cs=0x1a2;eip=0x008d90; 	T(dx = 0x3C4;);	// 22221                  mov     dx, 3C4h ;~ 01A2:8D90
cs=0x1a2;eip=0x008d93; 	T(ax = 0x402;);	// 22222                  mov     ax, 402h ;~ 01A2:8D93
cs=0x1a2;eip=0x008d96; 	S(OUT(dx, ax));	// 22223                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:8D96
cs=0x1a2;eip=0x008d97; 	T(dx = 0x3CE;);	// 22225                  mov     dx, 3CEh ;~ 01A2:8D97
cs=0x1a2;eip=0x008d9a; 	T(ax = 5;);	// 22226                  mov     ax, 5 ;~ 01A2:8D9A
cs=0x1a2;eip=0x008d9d; 	S(OUT(dx, ax));	// 22227                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8D9D
cs=0x1a2;eip=0x008d9e; 	T(ax = 0x204;);	// 22234                  mov     ax, 204h ;~ 01A2:8D9E
cs=0x1a2;eip=0x008da1; 	S(OUT(dx, ax));	// 22235                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8DA1
cs=0x1a2;eip=0x008da2; 	T(ax = 3;);	// 22237                  mov     ax, 3 ;~ 01A2:8DA2
cs=0x1a2;eip=0x008da5; 	S(OUT(dx, ax));	// 22238                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8DA5
cs=0x1a2;eip=0x008da6; 	T(ax = 2;);	// 22243                  mov     ax, 2 ;~ 01A2:8DA6
cs=0x1a2;eip=0x008da9; 	S(OUT(dx, ax));	// 22244                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8DA9
cs=0x1a2;eip=0x008daa; 	T(ax = 7;);	// 22247                  mov     ax, 7 ;~ 01A2:8DAA
cs=0x1a2;eip=0x008dad; 	S(OUT(dx, ax));	// 22248                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8DAD
cs=0x1a2;eip=0x008dae; 	X(POP(dx));	// 22251                  pop     dx ;~ 01A2:8DAE
cs=0x1a2;eip=0x008daf; 	T(SHL(dx, 1));	// 22252                  shl     dx, 1 ;~ 01A2:8DAF
cs=0x1a2;eip=0x008db1; 	T(cx = es;);	// 22253                  mov     cx, es ;~ 01A2:8DB1
cs=0x1a2;eip=0x008db3; 	T(ax = 0x0AA00;);	// 22254                  mov     ax, 0AA00h ;~ 01A2:8DB3
cs=0x1a2;eip=0x008db6; 	T(es = ax;);	// 22255                  mov     es, ax ;~ 01A2:8DB6
cs=0x1a2;eip=0x008db8; 	T(bp = dx;);	// 22257                  mov     bp, dx ;~ 01A2:8DB8
cs=0x1a2;eip=0x008dba; 	T(MOV(ax, *(dw*)(raddr(es,bp+0))));	// 22258                  mov     ax, es:[bp+0] ;~ 01A2:8DBA
cs=0x1a2;eip=0x008dbe; 	T(CMP(ah, 6));	// 22259                  cmp     ah, 6 ;~ 01A2:8DBE
cs=0x1a2;eip=0x008dc1; 	J(JC(loc_18dd6));	// 22260                  jb      short loc_18DD6 ;~ 01A2:8DC1
cs=0x1a2;eip=0x008dc3; 	X(PUSH(ax));	// 22261                  push    ax ;~ 01A2:8DC3
cs=0x1a2;eip=0x008dc4; 	T(dx = 0x3C4;);	// 22262                  mov     dx, 3C4h ;~ 01A2:8DC4
cs=0x1a2;eip=0x008dc7; 	T(ax = 0x802;);	// 22263                  mov     ax, 802h ;~ 01A2:8DC7
cs=0x1a2;eip=0x008dca; 	S(OUT(dx, ax));	// 22264                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:8DCA
cs=0x1a2;eip=0x008dcb; 	T(dx = 0x3CE;);	// 22266                  mov     dx, 3CEh ;~ 01A2:8DCB
cs=0x1a2;eip=0x008dce; 	T(ax = 0x304;);	// 22267                  mov     ax, 304h ;~ 01A2:8DCE
cs=0x1a2;eip=0x008dd1; 	S(OUT(dx, ax));	// 22268                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8DD1
cs=0x1a2;eip=0x008dd2; 	X(POP(ax));	// 22270                  pop     ax ;~ 01A2:8DD2
cs=0x1a2;eip=0x008dd3; 	T(SUB(ah, 6));	// 22271                  sub     ah, 6 ;~ 01A2:8DD3
loc_18dd6:
	// 5858 
cs=0x1a2;eip=0x008dd6; 	T(ADD(ax, 6));	// 22274                  add     ax, 6 ;~ 01A2:8DD6
cs=0x1a2;eip=0x008dd9; 	T(ADD(ax, 0x0AA00));	// 22275                  add     ax, 0AA00h ;~ 01A2:8DD9
cs=0x1a2;eip=0x008ddc; 	T(XOR(bp, bp));	// 22276                  xor     bp, bp ;~ 01A2:8DDC
cs=0x1a2;eip=0x008dde; 	T(es = ax;);	// 22277                  mov     es, ax ;~ 01A2:8DDE
cs=0x1a2;eip=0x008de0; 	T(ADD(bl, *(raddr(ds,bx+0x0E))));	// 22279                  add     bl, [bx+0Eh] ;~ 01A2:8DE0
cs=0x1a2;eip=0x008de3; 	T(ADC(bh, 0));	// 22280                  adc     bh, 0 ;~ 01A2:8DE3
cs=0x1a2;eip=0x008de6; 	T(MOV(ax, *(dw*)(raddr(es,bp+0))));	// 22281                  mov     ax, es:[bp+0] ;~ 01A2:8DE6
cs=0x1a2;eip=0x008dea; 	X(MOV(*(dw*)(raddr(ds,bx+4)), ax));	// 22282                  mov     [bx+4], ax ;~ 01A2:8DEA
cs=0x1a2;eip=0x008ded; 	T(MOV(ax, *(dw*)(raddr(es,bp+2))));	// 22283                  mov     ax, es:[bp+2] ;~ 01A2:8DED
cs=0x1a2;eip=0x008df1; 	X(MOV(*(dw*)(raddr(ds,bx+6)), ax));	// 22284                  mov     [bx+6], ax ;~ 01A2:8DF1
cs=0x1a2;eip=0x008df4; 	T(ADD(bp, 4));	// 22285                  add     bp, 4 ;~ 01A2:8DF4
cs=0x1a2;eip=0x008df7; 	T(MOV(ax, *(dw*)(raddr(es,bp+0))));	// 22286                  mov     ax, es:[bp+0] ;~ 01A2:8DF7
cs=0x1a2;eip=0x008dfb; 	T(MOV(dx, *(dw*)(raddr(es,bp+2))));	// 22287                  mov     dx, es:[bp+2] ;~ 01A2:8DFB
cs=0x1a2;eip=0x008dff; 	T(MUL1_2(dx));	// 22288                  mul     dx ;~ 01A2:8DFF
cs=0x1a2;eip=0x008e01; 	T(SHL(ax, 1));	// 22289                  shl     ax, 1 ;~ 01A2:8E01
cs=0x1a2;eip=0x008e03; 	T(dx = ax;);	// 22290                  mov     dx, ax ;~ 01A2:8E03
cs=0x1a2;eip=0x008e05; 	T(SHL(ax, 1));	// 22291                  shl     ax, 1 ;~ 01A2:8E05
cs=0x1a2;eip=0x008e07; 	T(SHL(ax, 1));	// 22292                  shl     ax, 1 ;~ 01A2:8E07
cs=0x1a2;eip=0x008e09; 	T(ADD(ax, dx));	// 22293                  add     ax, dx ;~ 01A2:8E09
cs=0x1a2;eip=0x008e0b; 	T(ADD(ax, 4));	// 22294                  add     ax, 4 ;~ 01A2:8E0B
cs=0x1a2;eip=0x008e0e; 	T(dx = es;);	// 22295                  mov     dx, es ;~ 01A2:8E0E
cs=0x1a2;eip=0x008e10; 	T(ds = dx;);	// 22296                  mov     ds, dx ;~ 01A2:8E10
cs=0x1a2;eip=0x008e12; 	T(es = cx;);	// 22298                  mov     es, cx ;~ 01A2:8E12
cs=0x1a2;eip=0x008e14; 	T(di = bp;);	// 22300                  mov     di, bp ;~ 01A2:8E14
cs=0x1a2;eip=0x008e16; 	T(XCHG(di, si));	// 22301                  xchg    di, si ;~ 01A2:8E16
cs=0x1a2;eip=0x008e18; 	T(cx = ax;);	// 22302                  mov     cx, ax ;~ 01A2:8E18
	// 22303                  rep movsw ;~ 01A2:8E1A
cs=0x1a2;eip=0x008e1a; 	X(	REP MOVSW);	// 22303                  rep movsw ;~ 01A2:8E1A
cs=0x1a2;eip=0x008e1c; 	X(POP(ds));	// 22304                  pop     ds ;~ 01A2:8E1C
cs=0x1a2;eip=0x008e1d; 	X(POP(es));	// 22306                  pop     es ;~ 01A2:8E1D
cs=0x1a2;eip=0x008e1e; 	X(POP(di));	// 22307                  pop     di ;~ 01A2:8E1E
cs=0x1a2;eip=0x008e1f; 	X(POP(si));	// 22308                  pop     si ;~ 01A2:8E1F
cs=0x1a2;eip=0x008e20; 	X(POP(bp));	// 22309                  pop     bp ;~ 01A2:8E20
cs=0x1a2;eip=0x008e21; 	X(POP(dx));	// 22310                  pop     dx ;~ 01A2:8E21
cs=0x1a2;eip=0x008e22; 	X(POP(cx));	// 22311                  pop     cx ;~ 01A2:8E22
cs=0x1a2;eip=0x008e23; 	X(POP(bx));	// 22312                  pop     bx ;~ 01A2:8E23
cs=0x1a2;eip=0x008e24; 	X(POP(ax));	// 22313                  pop     ax ;~ 01A2:8E24
cs=0x1a2;eip=0x008e25; 	J(RETN(0));	// 22314                  retn ;~ 01A2:8E25

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_18dd6: 	goto loc_18dd6;
        case m2c::ksub_18d86: 	goto sub_18d86;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group27(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group27:
    _begin:
sub_18e26:
	// 22321 
cs=0x1a2;eip=0x008e26; 	X(PUSH(ax));	// 22323                  push    ax ;~ 01A2:8E26
cs=0x1a2;eip=0x008e27; 	X(PUSH(bx));	// 22324                  push    bx ;~ 01A2:8E27
cs=0x1a2;eip=0x008e28; 	X(PUSH(cx));	// 22325                  push    cx ;~ 01A2:8E28
cs=0x1a2;eip=0x008e29; 	X(PUSH(dx));	// 22326                  push    dx ;~ 01A2:8E29
cs=0x1a2;eip=0x008e2a; 	X(PUSH(bp));	// 22327                  push    bp ;~ 01A2:8E2A
cs=0x1a2;eip=0x008e2b; 	X(PUSH(si));	// 22328                  push    si ;~ 01A2:8E2B
cs=0x1a2;eip=0x008e2c; 	X(PUSH(di));	// 22329                  push    di ;~ 01A2:8E2C
cs=0x1a2;eip=0x008e2d; 	X(PUSH(es));	// 22330                  push    es ;~ 01A2:8E2D
cs=0x1a2;eip=0x008e2e; 	X(PUSH(ds));	// 22331                  push    ds ;~ 01A2:8E2E
cs=0x1a2;eip=0x008e2f; 	X(PUSH(ax));	// 22332                  push    ax ;~ 01A2:8E2F
cs=0x1a2;eip=0x008e30; 	X(*(dw*)(&unk_6fb96) = 0;);	// 22333                  mov     word ptr ss:unk_6FB96, 0 ;~ 01A2:8E30
cs=0x1a2;eip=0x008e37; 	T(di = dx;);	// 22334                  mov     di, dx ;~ 01A2:8E37
cs=0x1a2;eip=0x008e39; 	T(SHL(di, 1));	// 22335                  shl     di, 1 ;~ 01A2:8E39
cs=0x1a2;eip=0x008e3b; 	T(MOV(di, *(dw*)(raddr(ss,di+0))));	// 22336                  mov     di, ss:[di+0] ;~ 01A2:8E3B
cs=0x1a2;eip=0x008e40; 	T(SHR(ax, 1));	// 22337                  shr     ax, 1 ;~ 01A2:8E40
cs=0x1a2;eip=0x008e42; 	T(SHR(ax, 1));	// 22338                  shr     ax, 1 ;~ 01A2:8E42
cs=0x1a2;eip=0x008e44; 	T(SHR(ax, 1));	// 22339                  shr     ax, 1 ;~ 01A2:8E44
cs=0x1a2;eip=0x008e46; 	T(ADD(di, ax));	// 22340                  add     di, ax ;~ 01A2:8E46
cs=0x1a2;eip=0x008e48; 	X(POP(ax));	// 22341                  pop     ax ;~ 01A2:8E48
cs=0x1a2;eip=0x008e49; 	T(dl = cl;);	// 22342                  mov     dl, cl ;~ 01A2:8E49
cs=0x1a2;eip=0x008e4b; 	T(cl = al;);	// 22343                  mov     cl, al ;~ 01A2:8E4B
cs=0x1a2;eip=0x008e4d; 	T(AND(cl, 7));	// 22344                  and     cl, 7 ;~ 01A2:8E4D
cs=0x1a2;eip=0x008e50; 	J(CALL(sub_18e71,0));	// 22345                  call    sub_18E71 ;~ 01A2:8E50
cs=0x1a2;eip=0x008e53; 	X(POP(ds));	// 22347                  pop     ds ;~ 01A2:8E53
cs=0x1a2;eip=0x008e54; 	X(POP(es));	// 22348                  pop     es ;~ 01A2:8E54
cs=0x1a2;eip=0x008e55; 	X(POP(di));	// 22350                  pop     di ;~ 01A2:8E55
cs=0x1a2;eip=0x008e56; 	X(POP(si));	// 22351                  pop     si ;~ 01A2:8E56
cs=0x1a2;eip=0x008e57; 	X(POP(bp));	// 22352                  pop     bp ;~ 01A2:8E57
cs=0x1a2;eip=0x008e58; 	X(POP(dx));	// 22353                  pop     dx ;~ 01A2:8E58
cs=0x1a2;eip=0x008e59; 	X(POP(cx));	// 22354                  pop     cx ;~ 01A2:8E59
cs=0x1a2;eip=0x008e5a; 	X(POP(bx));	// 22355                  pop     bx ;~ 01A2:8E5A
loc_18e5b:
	// 5859 
cs=0x1a2;eip=0x008e5b; 	X(POP(ax));	// 22358                  pop     ax ;~ 01A2:8E5B
cs=0x1a2;eip=0x008e5c; 	J(RETN(0));	// 22359                  retn ;~ 01A2:8E5C
sub_18e71:
	// 22369 
cs=0x1a2;eip=0x008e71; 	T(al = dl;);	// 22371                  mov     al, dl ;~ 01A2:8E71
cs=0x1a2;eip=0x008e73; 	T(XOR(ah, ah));	// 22372                  xor     ah, ah ;~ 01A2:8E73
cs=0x1a2;eip=0x008e75; 	T(SHL(ax, 1));	// 22373                  shl     ax, 1 ;~ 01A2:8E75
cs=0x1a2;eip=0x008e77; 	T(bx = m2c::kloc_18e5b;);	// 22374                  mov     bx, offset loc_18E5B ;~ 01A2:8E77
cs=0x1a2;eip=0x008e7a; 	T(ADD(bx, ax));	// 22375                  add     bx, ax ;~ 01A2:8E7A
cs=0x1a2;eip=0x008e7c; 	T(MOV(ax, *(dw*)(raddr(cs,bx))));	// 22376                  mov     ax, cs:[bx] ;~ 01A2:8E7C
cs=0x1a2;eip=0x008e7f; __disp=ax;
	J(return __dispatch_call(__disp, _state););	// 22377                  jmp     ax ;~ 01A2:8E7F

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_18e5b: 	goto loc_18e5b;
        case m2c::ksub_18e26: 	goto sub_18e26;
        case m2c::ksub_18e71: 	goto sub_18e71;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_18e81(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_18e81:
    _begin:
cs=0x1a2;eip=0x008e81; 	X(PUSH(ds));	// 22385                  push    ds ;~ 01A2:8E81
cs=0x1a2;eip=0x008e82; 	T(es = *(dw*)(((db*)&off_1f8c8)+2););	// 22386                  mov     es, word ptr ds:off_1F8C8+2 ;~ 01A2:8E82
cs=0x1a2;eip=0x008e86; 	T(ds = *(dw*)(((db*)&seg_1f171)+1););	// 22387                  mov     ds, seg_1F171+1 ;~ 01A2:8E86
cs=0x1a2;eip=0x008e8a; 	T(TEST(cl, 8));	// 22389                  test    cl, 8 ;~ 01A2:8E8A
cs=0x1a2;eip=0x008e8d; 	J(JZ(loc_18e90));	// 22390                  jz      short loc_18E90 ;~ 01A2:8E8D
cs=0x1a2;eip=0x008e8f; 	T(INC(di));	// 22391                  inc     di ;~ 01A2:8E8F
loc_18e90:
	// 5860 
cs=0x1a2;eip=0x008e90; 	T(AND(cl, 7));	// 22394                  and     cl, 7 ;~ 01A2:8E90
cs=0x1a2;eip=0x008e93; 	J(JNZ(loc_18e98));	// 22395                  jnz     short loc_18E98 ;~ 01A2:8E93
cs=0x1a2;eip=0x008e95; 	J(JMP(loc_18fb5));	// 22397                  jmp     loc_18FB5 ;~ 01A2:8E95
loc_18e98:
	// 5861 
cs=0x1a2;eip=0x008e98; 	T(dx = 0x3C4;);	// 22401                  mov     dx, 3C4h ;~ 01A2:8E98
cs=0x1a2;eip=0x008e9b; 	T(ax = 0x0F02;);	// 22402                  mov     ax, 0F02h ;~ 01A2:8E9B
cs=0x1a2;eip=0x008e9e; 	S(OUT(dx, ax));	// 22403                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:8E9E
cs=0x1a2;eip=0x008e9f; 	T(dx = 0x3CE;);	// 22405                  mov     dx, 3CEh ;~ 01A2:8E9F
cs=0x1a2;eip=0x008ea2; 	T(ax = 0x805;);	// 22406                  mov     ax, 805h ;~ 01A2:8EA2
cs=0x1a2;eip=0x008ea5; 	S(OUT(dx, ax));	// 22407                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8EA5
cs=0x1a2;eip=0x008ea6; 	T(ax = 0x803;);	// 22409                  mov     ax, 803h ;~ 01A2:8EA6
cs=0x1a2;eip=0x008ea9; 	S(OUT(dx, ax));	// 22410                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8EA9
cs=0x1a2;eip=0x008eaa; 	T(ax = 7;);	// 22412                  mov     ax, 7 ;~ 01A2:8EAA
cs=0x1a2;eip=0x008ead; 	S(OUT(dx, ax));	// 22413                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8EAD
cs=0x1a2;eip=0x008eae; 	T(bp = di;);	// 22416                  mov     bp, di ;~ 01A2:8EAE
cs=0x1a2;eip=0x008eb0; 	T(bx = 0x0FF00;);	// 22417                  mov     bx, 0FF00h ;~ 01A2:8EB0
cs=0x1a2;eip=0x008eb3; 	T(SHR(bx, cl));	// 22418                  shr     bx, cl ;~ 01A2:8EB3
cs=0x1a2;eip=0x008eb5; 	T(dh = ch;);	// 22419                  mov     dh, ch ;~ 01A2:8EB5
loc_18eb7:
	// 5862 
cs=0x1a2;eip=0x008eb7; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22422                  lods    word ptr es:[si] ;~ 01A2:8EB7
cs=0x1a2;eip=0x008eb9; 	T(ROR(ax, cl));	// 22423                  ror     ax, cl ;~ 01A2:8EB9
cs=0x1a2;eip=0x008ebb; 	T(dl = al;);	// 22424                  mov     dl, al ;~ 01A2:8EBB
cs=0x1a2;eip=0x008ebd; 	T(AND(al, bh));	// 22425                  and     al, bh ;~ 01A2:8EBD
cs=0x1a2;eip=0x008ebf; 	T(AND(dl, bl));	// 22426                  and     dl, bl ;~ 01A2:8EBF
cs=0x1a2;eip=0x008ec1; 	T(NOT(ax));	// 22427                  not     ax ;~ 01A2:8EC1
cs=0x1a2;eip=0x008ec3; 	X(AND(*(raddr(ds,di)), al));	// 22428                  and     [di], al ;~ 01A2:8EC3
cs=0x1a2;eip=0x008ec5; 	X(AND(*(raddr(ds,di+1)), ah));	// 22429                  and     [di+1], ah ;~ 01A2:8EC5
cs=0x1a2;eip=0x008ec8; 	T(NOT(dl));	// 22430                  not     dl ;~ 01A2:8EC8
cs=0x1a2;eip=0x008eca; 	X(AND(*(raddr(ds,di+2)), dl));	// 22431                  and     [di+2], dl ;~ 01A2:8ECA
cs=0x1a2;eip=0x008ecd; 	T(ADD(di, 0x28));	// 22432                  add     di, 28h ; '(' ;~ 01A2:8ECD
cs=0x1a2;eip=0x008ed0; 	T(DEC(dh));	// 22433                  dec     dh ;~ 01A2:8ED0
cs=0x1a2;eip=0x008ed2; 	J(JNZ(loc_18eb7));	// 22434                  jnz     short loc_18EB7 ;~ 01A2:8ED2
cs=0x1a2;eip=0x008ed4; 	T(di = bp;);	// 22435                  mov     di, bp ;~ 01A2:8ED4
cs=0x1a2;eip=0x008ed6; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 22436                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:8ED6
cs=0x1a2;eip=0x008edb; 	T(dx = 0x3C4;);	// 22437                  mov     dx, 3C4h ;~ 01A2:8EDB
cs=0x1a2;eip=0x008ede; 	T(ax = 0x102;);	// 22438                  mov     ax, 102h ;~ 01A2:8EDE
cs=0x1a2;eip=0x008ee1; 	S(OUT(dx, ax));	// 22439                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:8EE1
cs=0x1a2;eip=0x008ee2; 	T(dx = 0x3CE;);	// 22441                  mov     dx, 3CEh ;~ 01A2:8EE2
cs=0x1a2;eip=0x008ee5; 	T(ax = 5;);	// 22442                  mov     ax, 5 ;~ 01A2:8EE5
cs=0x1a2;eip=0x008ee8; 	S(OUT(dx, ax));	// 22443                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8EE8
cs=0x1a2;eip=0x008ee9; 	T(ax = 3;);	// 22450                  mov     ax, 3 ;~ 01A2:8EE9
cs=0x1a2;eip=0x008eec; 	S(OUT(dx, ax));	// 22451                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8EEC
cs=0x1a2;eip=0x008eed; 	T(ax = 4;);	// 22456                  mov     ax, 4 ;~ 01A2:8EED
cs=0x1a2;eip=0x008ef0; 	S(OUT(dx, ax));	// 22457                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8EF0
cs=0x1a2;eip=0x008ef1; 	T(bp = di;);	// 22460                  mov     bp, di ;~ 01A2:8EF1
cs=0x1a2;eip=0x008ef3; 	T(bx = 0x0FF00;);	// 22461                  mov     bx, 0FF00h ;~ 01A2:8EF3
cs=0x1a2;eip=0x008ef6; 	T(SHR(bx, cl));	// 22462                  shr     bx, cl ;~ 01A2:8EF6
cs=0x1a2;eip=0x008ef8; 	T(dh = ch;);	// 22463                  mov     dh, ch ;~ 01A2:8EF8
loc_18efa:
	// 5863 
cs=0x1a2;eip=0x008efa; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22466                  lods    word ptr es:[si] ;~ 01A2:8EFA
cs=0x1a2;eip=0x008efc; 	T(ROR(ax, cl));	// 22467                  ror     ax, cl ;~ 01A2:8EFC
cs=0x1a2;eip=0x008efe; 	T(dl = al;);	// 22468                  mov     dl, al ;~ 01A2:8EFE
cs=0x1a2;eip=0x008f00; 	T(AND(al, bh));	// 22469                  and     al, bh ;~ 01A2:8F00
cs=0x1a2;eip=0x008f02; 	T(AND(dl, bl));	// 22470                  and     dl, bl ;~ 01A2:8F02
cs=0x1a2;eip=0x008f04; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 22471                  or      [di], ax ;~ 01A2:8F04
cs=0x1a2;eip=0x008f06; 	X(OR(*(raddr(ds,di+2)), dl));	// 22472                  or      [di+2], dl ;~ 01A2:8F06
cs=0x1a2;eip=0x008f09; 	T(ADD(di, 0x28));	// 22473                  add     di, 28h ; '(' ;~ 01A2:8F09
cs=0x1a2;eip=0x008f0c; 	T(DEC(dh));	// 22474                  dec     dh ;~ 01A2:8F0C
cs=0x1a2;eip=0x008f0e; 	J(JNZ(loc_18efa));	// 22475                  jnz     short loc_18EFA ;~ 01A2:8F0E
cs=0x1a2;eip=0x008f10; 	T(di = bp;);	// 22476                  mov     di, bp ;~ 01A2:8F10
cs=0x1a2;eip=0x008f12; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 22477                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:8F12
cs=0x1a2;eip=0x008f17; 	T(dx = 0x3CE;);	// 22478                  mov     dx, 3CEh ;~ 01A2:8F17
cs=0x1a2;eip=0x008f1a; 	T(ax = 0x104;);	// 22479                  mov     ax, 104h ;~ 01A2:8F1A
cs=0x1a2;eip=0x008f1d; 	S(OUT(dx, ax));	// 22480                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8F1D
cs=0x1a2;eip=0x008f1e; 	T(dx = 0x3C4;);	// 22482                  mov     dx, 3C4h ;~ 01A2:8F1E
cs=0x1a2;eip=0x008f21; 	T(ax = 0x202;);	// 22483                  mov     ax, 202h ;~ 01A2:8F21
cs=0x1a2;eip=0x008f24; 	S(OUT(dx, ax));	// 22484                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:8F24
cs=0x1a2;eip=0x008f25; 	T(bp = di;);	// 22486                  mov     bp, di ;~ 01A2:8F25
cs=0x1a2;eip=0x008f27; 	T(bx = 0x0FF00;);	// 22487                  mov     bx, 0FF00h ;~ 01A2:8F27
cs=0x1a2;eip=0x008f2a; 	T(SHR(bx, cl));	// 22488                  shr     bx, cl ;~ 01A2:8F2A
cs=0x1a2;eip=0x008f2c; 	T(dh = ch;);	// 22489                  mov     dh, ch ;~ 01A2:8F2C
loc_18f2e:
	// 5864 
cs=0x1a2;eip=0x008f2e; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22492                  lods    word ptr es:[si] ;~ 01A2:8F2E
cs=0x1a2;eip=0x008f30; 	T(ROR(ax, cl));	// 22493                  ror     ax, cl ;~ 01A2:8F30
cs=0x1a2;eip=0x008f32; 	T(dl = al;);	// 22494                  mov     dl, al ;~ 01A2:8F32
cs=0x1a2;eip=0x008f34; 	T(AND(al, bh));	// 22495                  and     al, bh ;~ 01A2:8F34
cs=0x1a2;eip=0x008f36; 	T(AND(dl, bl));	// 22496                  and     dl, bl ;~ 01A2:8F36
cs=0x1a2;eip=0x008f38; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 22497                  or      [di], ax ;~ 01A2:8F38
cs=0x1a2;eip=0x008f3a; 	X(OR(*(raddr(ds,di+2)), dl));	// 22498                  or      [di+2], dl ;~ 01A2:8F3A
cs=0x1a2;eip=0x008f3d; 	T(ADD(di, 0x28));	// 22499                  add     di, 28h ; '(' ;~ 01A2:8F3D
cs=0x1a2;eip=0x008f40; 	T(DEC(dh));	// 22500                  dec     dh ;~ 01A2:8F40
cs=0x1a2;eip=0x008f42; 	J(JNZ(loc_18f2e));	// 22501                  jnz     short loc_18F2E ;~ 01A2:8F42
cs=0x1a2;eip=0x008f44; 	T(di = bp;);	// 22502                  mov     di, bp ;~ 01A2:8F44
cs=0x1a2;eip=0x008f46; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 22503                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:8F46
cs=0x1a2;eip=0x008f4b; 	T(dx = 0x3CE;);	// 22504                  mov     dx, 3CEh ;~ 01A2:8F4B
cs=0x1a2;eip=0x008f4e; 	T(ax = 0x204;);	// 22505                  mov     ax, 204h ;~ 01A2:8F4E
cs=0x1a2;eip=0x008f51; 	S(OUT(dx, ax));	// 22506                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8F51
cs=0x1a2;eip=0x008f52; 	T(dx = 0x3C4;);	// 22508                  mov     dx, 3C4h ;~ 01A2:8F52
cs=0x1a2;eip=0x008f55; 	T(ax = 0x402;);	// 22509                  mov     ax, 402h ;~ 01A2:8F55
cs=0x1a2;eip=0x008f58; 	S(OUT(dx, ax));	// 22510                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:8F58
cs=0x1a2;eip=0x008f59; 	T(bp = di;);	// 22512                  mov     bp, di ;~ 01A2:8F59
cs=0x1a2;eip=0x008f5b; 	T(bx = 0x0FF00;);	// 22513                  mov     bx, 0FF00h ;~ 01A2:8F5B
cs=0x1a2;eip=0x008f5e; 	T(SHR(bx, cl));	// 22514                  shr     bx, cl ;~ 01A2:8F5E
cs=0x1a2;eip=0x008f60; 	T(dh = ch;);	// 22515                  mov     dh, ch ;~ 01A2:8F60
loc_18f62:
	// 5865 
cs=0x1a2;eip=0x008f62; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22518                  lods    word ptr es:[si] ;~ 01A2:8F62
cs=0x1a2;eip=0x008f64; 	T(ROR(ax, cl));	// 22519                  ror     ax, cl ;~ 01A2:8F64
cs=0x1a2;eip=0x008f66; 	T(dl = al;);	// 22520                  mov     dl, al ;~ 01A2:8F66
cs=0x1a2;eip=0x008f68; 	T(AND(al, bh));	// 22521                  and     al, bh ;~ 01A2:8F68
cs=0x1a2;eip=0x008f6a; 	T(AND(dl, bl));	// 22522                  and     dl, bl ;~ 01A2:8F6A
cs=0x1a2;eip=0x008f6c; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 22523                  or      [di], ax ;~ 01A2:8F6C
cs=0x1a2;eip=0x008f6e; 	X(OR(*(raddr(ds,di+2)), dl));	// 22524                  or      [di+2], dl ;~ 01A2:8F6E
cs=0x1a2;eip=0x008f71; 	T(ADD(di, 0x28));	// 22525                  add     di, 28h ; '(' ;~ 01A2:8F71
cs=0x1a2;eip=0x008f74; 	T(DEC(dh));	// 22526                  dec     dh ;~ 01A2:8F74
cs=0x1a2;eip=0x008f76; 	J(JNZ(loc_18f62));	// 22527                  jnz     short loc_18F62 ;~ 01A2:8F76
cs=0x1a2;eip=0x008f78; 	T(di = bp;);	// 22528                  mov     di, bp ;~ 01A2:8F78
cs=0x1a2;eip=0x008f7a; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 22529                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:8F7A
cs=0x1a2;eip=0x008f7f; 	T(dx = 0x3CE;);	// 22530                  mov     dx, 3CEh ;~ 01A2:8F7F
cs=0x1a2;eip=0x008f82; 	T(ax = 0x304;);	// 22531                  mov     ax, 304h ;~ 01A2:8F82
cs=0x1a2;eip=0x008f85; 	S(OUT(dx, ax));	// 22532                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8F85
cs=0x1a2;eip=0x008f86; 	T(dx = 0x3C4;);	// 22534                  mov     dx, 3C4h ;~ 01A2:8F86
cs=0x1a2;eip=0x008f89; 	T(ax = 0x802;);	// 22535                  mov     ax, 802h ;~ 01A2:8F89
cs=0x1a2;eip=0x008f8c; 	S(OUT(dx, ax));	// 22536                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:8F8C
cs=0x1a2;eip=0x008f8d; 	T(bp = di;);	// 22538                  mov     bp, di ;~ 01A2:8F8D
cs=0x1a2;eip=0x008f8f; 	T(bx = 0x0FF00;);	// 22539                  mov     bx, 0FF00h ;~ 01A2:8F8F
cs=0x1a2;eip=0x008f92; 	T(SHR(bx, cl));	// 22540                  shr     bx, cl ;~ 01A2:8F92
cs=0x1a2;eip=0x008f94; 	T(dh = ch;);	// 22541                  mov     dh, ch ;~ 01A2:8F94
loc_18f96:
	// 5866 
cs=0x1a2;eip=0x008f96; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22544                  lods    word ptr es:[si] ;~ 01A2:8F96
cs=0x1a2;eip=0x008f98; 	T(ROR(ax, cl));	// 22545                  ror     ax, cl ;~ 01A2:8F98
cs=0x1a2;eip=0x008f9a; 	T(dl = al;);	// 22546                  mov     dl, al ;~ 01A2:8F9A
cs=0x1a2;eip=0x008f9c; 	T(AND(al, bh));	// 22547                  and     al, bh ;~ 01A2:8F9C
cs=0x1a2;eip=0x008f9e; 	T(AND(dl, bl));	// 22548                  and     dl, bl ;~ 01A2:8F9E
cs=0x1a2;eip=0x008fa0; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 22549                  or      [di], ax ;~ 01A2:8FA0
cs=0x1a2;eip=0x008fa2; 	X(OR(*(raddr(ds,di+2)), dl));	// 22550                  or      [di+2], dl ;~ 01A2:8FA2
cs=0x1a2;eip=0x008fa5; 	T(ADD(di, 0x28));	// 22551                  add     di, 28h ; '(' ;~ 01A2:8FA5
cs=0x1a2;eip=0x008fa8; 	T(DEC(dh));	// 22552                  dec     dh ;~ 01A2:8FA8
cs=0x1a2;eip=0x008faa; 	J(JNZ(loc_18f96));	// 22553                  jnz     short loc_18F96 ;~ 01A2:8FAA
cs=0x1a2;eip=0x008fac; 	T(di = bp;);	// 22554                  mov     di, bp ;~ 01A2:8FAC
cs=0x1a2;eip=0x008fae; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 22555                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:8FAE
cs=0x1a2;eip=0x008fb3; 	X(POP(ds));	// 22556                  pop     ds ;~ 01A2:8FB3
cs=0x1a2;eip=0x008fb4; 	J(RETN(0));	// 22558                  retn ;~ 01A2:8FB4
loc_18fb5:
	// 5867 
cs=0x1a2;eip=0x008fb5; 	T(dx = 0x3C4;);	// 22563                  mov     dx, 3C4h ;~ 01A2:8FB5
cs=0x1a2;eip=0x008fb8; 	T(ax = 0x0F02;);	// 22564                  mov     ax, 0F02h ;~ 01A2:8FB8
cs=0x1a2;eip=0x008fbb; 	S(OUT(dx, ax));	// 22565                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:8FBB
cs=0x1a2;eip=0x008fbc; 	T(dx = 0x3CE;);	// 22567                  mov     dx, 3CEh ;~ 01A2:8FBC
cs=0x1a2;eip=0x008fbf; 	T(ax = 0x805;);	// 22568                  mov     ax, 805h ;~ 01A2:8FBF
cs=0x1a2;eip=0x008fc2; 	S(OUT(dx, ax));	// 22569                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8FC2
cs=0x1a2;eip=0x008fc3; 	T(ax = 0x803;);	// 22571                  mov     ax, 803h ;~ 01A2:8FC3
cs=0x1a2;eip=0x008fc6; 	S(OUT(dx, ax));	// 22572                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8FC6
cs=0x1a2;eip=0x008fc7; 	T(ax = 7;);	// 22574                  mov     ax, 7 ;~ 01A2:8FC7
cs=0x1a2;eip=0x008fca; 	S(OUT(dx, ax));	// 22575                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8FCA
cs=0x1a2;eip=0x008fcb; 	T(bp = di;);	// 22578                  mov     bp, di ;~ 01A2:8FCB
cs=0x1a2;eip=0x008fcd; 	T(cl = ch;);	// 22579                  mov     cl, ch ;~ 01A2:8FCD
loc_18fcf:
	// 5868 
cs=0x1a2;eip=0x008fcf; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22582                  lods    word ptr es:[si] ;~ 01A2:8FCF
cs=0x1a2;eip=0x008fd1; 	T(NOT(ax));	// 22583                  not     ax ;~ 01A2:8FD1
cs=0x1a2;eip=0x008fd3; 	X(AND(*(raddr(ds,di)), al));	// 22584                  and     [di], al ;~ 01A2:8FD3
cs=0x1a2;eip=0x008fd5; 	X(AND(*(raddr(ds,di+1)), ah));	// 22585                  and     [di+1], ah ;~ 01A2:8FD5
cs=0x1a2;eip=0x008fd8; 	T(ADD(di, 0x28));	// 22586                  add     di, 28h ; '(' ;~ 01A2:8FD8
cs=0x1a2;eip=0x008fdb; 	T(DEC(cl));	// 22587                  dec     cl ;~ 01A2:8FDB
cs=0x1a2;eip=0x008fdd; 	J(JNZ(loc_18fcf));	// 22588                  jnz     short loc_18FCF ;~ 01A2:8FDD
cs=0x1a2;eip=0x008fdf; 	T(di = bp;);	// 22589                  mov     di, bp ;~ 01A2:8FDF
cs=0x1a2;eip=0x008fe1; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 22590                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:8FE1
cs=0x1a2;eip=0x008fe6; 	T(dx = 0x3C4;);	// 22591                  mov     dx, 3C4h ;~ 01A2:8FE6
cs=0x1a2;eip=0x008fe9; 	T(ax = 0x102;);	// 22592                  mov     ax, 102h ;~ 01A2:8FE9
cs=0x1a2;eip=0x008fec; 	S(OUT(dx, ax));	// 22593                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:8FEC
cs=0x1a2;eip=0x008fed; 	T(dx = 0x3CE;);	// 22595                  mov     dx, 3CEh ;~ 01A2:8FED
cs=0x1a2;eip=0x008ff0; 	T(ax = 5;);	// 22596                  mov     ax, 5 ;~ 01A2:8FF0
cs=0x1a2;eip=0x008ff3; 	S(OUT(dx, ax));	// 22597                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8FF3
cs=0x1a2;eip=0x008ff4; 	T(ax = 3;);	// 22604                  mov     ax, 3 ;~ 01A2:8FF4
cs=0x1a2;eip=0x008ff7; 	S(OUT(dx, ax));	// 22605                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8FF7
cs=0x1a2;eip=0x008ff8; 	T(ax = 4;);	// 22610                  mov     ax, 4 ;~ 01A2:8FF8
cs=0x1a2;eip=0x008ffb; 	S(OUT(dx, ax));	// 22611                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:8FFB
cs=0x1a2;eip=0x008ffc; 	T(bp = di;);	// 22614                  mov     bp, di ;~ 01A2:8FFC
cs=0x1a2;eip=0x008ffe; 	T(cl = ch;);	// 22615                  mov     cl, ch ;~ 01A2:8FFE
loc_19000:
	// 5869 
cs=0x1a2;eip=0x009000; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22618                  lods    word ptr es:[si] ;~ 01A2:9000
cs=0x1a2;eip=0x009002; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 22619                  or      [di], ax ;~ 01A2:9002
cs=0x1a2;eip=0x009004; 	T(ADD(di, 0x28));	// 22620                  add     di, 28h ; '(' ;~ 01A2:9004
cs=0x1a2;eip=0x009007; 	T(DEC(cl));	// 22621                  dec     cl ;~ 01A2:9007
cs=0x1a2;eip=0x009009; 	J(JNZ(loc_19000));	// 22622                  jnz     short loc_19000 ;~ 01A2:9009
cs=0x1a2;eip=0x00900b; 	T(di = bp;);	// 22623                  mov     di, bp ;~ 01A2:900B
cs=0x1a2;eip=0x00900d; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 22624                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:900D
cs=0x1a2;eip=0x009012; 	T(dx = 0x3CE;);	// 22625                  mov     dx, 3CEh ;~ 01A2:9012
cs=0x1a2;eip=0x009015; 	T(ax = 0x104;);	// 22626                  mov     ax, 104h ;~ 01A2:9015
cs=0x1a2;eip=0x009018; 	S(OUT(dx, ax));	// 22627                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9018
cs=0x1a2;eip=0x009019; 	T(dx = 0x3C4;);	// 22629                  mov     dx, 3C4h ;~ 01A2:9019
cs=0x1a2;eip=0x00901c; 	T(ax = 0x202;);	// 22630                  mov     ax, 202h ;~ 01A2:901C
cs=0x1a2;eip=0x00901f; 	S(OUT(dx, ax));	// 22631                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:901F
cs=0x1a2;eip=0x009020; 	T(bp = di;);	// 22633                  mov     bp, di ;~ 01A2:9020
cs=0x1a2;eip=0x009022; 	T(cl = ch;);	// 22634                  mov     cl, ch ;~ 01A2:9022
loc_19024:
	// 5870 
cs=0x1a2;eip=0x009024; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22637                  lods    word ptr es:[si] ;~ 01A2:9024
cs=0x1a2;eip=0x009026; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 22638                  or      [di], ax ;~ 01A2:9026
cs=0x1a2;eip=0x009028; 	T(ADD(di, 0x28));	// 22639                  add     di, 28h ; '(' ;~ 01A2:9028
cs=0x1a2;eip=0x00902b; 	T(DEC(cl));	// 22640                  dec     cl ;~ 01A2:902B
cs=0x1a2;eip=0x00902d; 	J(JNZ(loc_19024));	// 22641                  jnz     short loc_19024 ;~ 01A2:902D
cs=0x1a2;eip=0x00902f; 	T(di = bp;);	// 22642                  mov     di, bp ;~ 01A2:902F
cs=0x1a2;eip=0x009031; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 22643                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:9031
cs=0x1a2;eip=0x009036; 	T(dx = 0x3CE;);	// 22644                  mov     dx, 3CEh ;~ 01A2:9036
cs=0x1a2;eip=0x009039; 	T(ax = 0x204;);	// 22645                  mov     ax, 204h ;~ 01A2:9039
cs=0x1a2;eip=0x00903c; 	S(OUT(dx, ax));	// 22646                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:903C
cs=0x1a2;eip=0x00903d; 	T(dx = 0x3C4;);	// 22648                  mov     dx, 3C4h ;~ 01A2:903D
cs=0x1a2;eip=0x009040; 	T(ax = 0x402;);	// 22649                  mov     ax, 402h ;~ 01A2:9040
cs=0x1a2;eip=0x009043; 	S(OUT(dx, ax));	// 22650                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:9043
cs=0x1a2;eip=0x009044; 	T(bp = di;);	// 22652                  mov     bp, di ;~ 01A2:9044
cs=0x1a2;eip=0x009046; 	T(cl = ch;);	// 22653                  mov     cl, ch ;~ 01A2:9046
loc_19048:
	// 5871 
cs=0x1a2;eip=0x009048; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22656                  lods    word ptr es:[si] ;~ 01A2:9048
cs=0x1a2;eip=0x00904a; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 22657                  or      [di], ax ;~ 01A2:904A
cs=0x1a2;eip=0x00904c; 	T(ADD(di, 0x28));	// 22658                  add     di, 28h ; '(' ;~ 01A2:904C
cs=0x1a2;eip=0x00904f; 	T(DEC(cl));	// 22659                  dec     cl ;~ 01A2:904F
cs=0x1a2;eip=0x009051; 	J(JNZ(loc_19048));	// 22660                  jnz     short loc_19048 ;~ 01A2:9051
cs=0x1a2;eip=0x009053; 	T(di = bp;);	// 22661                  mov     di, bp ;~ 01A2:9053
cs=0x1a2;eip=0x009055; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 22662                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:9055
cs=0x1a2;eip=0x00905a; 	T(dx = 0x3CE;);	// 22663                  mov     dx, 3CEh ;~ 01A2:905A
cs=0x1a2;eip=0x00905d; 	T(ax = 0x304;);	// 22664                  mov     ax, 304h ;~ 01A2:905D
cs=0x1a2;eip=0x009060; 	S(OUT(dx, ax));	// 22665                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9060
cs=0x1a2;eip=0x009061; 	T(dx = 0x3C4;);	// 22667                  mov     dx, 3C4h ;~ 01A2:9061
cs=0x1a2;eip=0x009064; 	T(ax = 0x802;);	// 22668                  mov     ax, 802h ;~ 01A2:9064
cs=0x1a2;eip=0x009067; 	S(OUT(dx, ax));	// 22669                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:9067
cs=0x1a2;eip=0x009068; 	T(bp = di;);	// 22671                  mov     bp, di ;~ 01A2:9068
cs=0x1a2;eip=0x00906a; 	T(cl = ch;);	// 22672                  mov     cl, ch ;~ 01A2:906A
loc_1906c:
	// 5872 
cs=0x1a2;eip=0x00906c; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22675                  lods    word ptr es:[si] ;~ 01A2:906C
cs=0x1a2;eip=0x00906e; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 22676                  or      [di], ax ;~ 01A2:906E
cs=0x1a2;eip=0x009070; 	T(ADD(di, 0x28));	// 22677                  add     di, 28h ; '(' ;~ 01A2:9070
cs=0x1a2;eip=0x009073; 	T(DEC(cl));	// 22678                  dec     cl ;~ 01A2:9073
cs=0x1a2;eip=0x009075; 	J(JNZ(loc_1906c));	// 22679                  jnz     short loc_1906C ;~ 01A2:9075
cs=0x1a2;eip=0x009077; 	T(di = bp;);	// 22680                  mov     di, bp ;~ 01A2:9077
cs=0x1a2;eip=0x009079; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 22681                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:9079
cs=0x1a2;eip=0x00907e; 	X(POP(ds));	// 22682                  pop     ds ;~ 01A2:907E
cs=0x1a2;eip=0x00907f; 	J(RETN(0));	// 22684                  retn ;~ 01A2:907F

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_18e90: 	goto loc_18e90;
        case m2c::kloc_18e98: 	goto loc_18e98;
        case m2c::kloc_18eb7: 	goto loc_18eb7;
        case m2c::kloc_18efa: 	goto loc_18efa;
        case m2c::kloc_18f2e: 	goto loc_18f2e;
        case m2c::kloc_18f62: 	goto loc_18f62;
        case m2c::kloc_18f96: 	goto loc_18f96;
        case m2c::kloc_18fb5: 	goto loc_18fb5;
        case m2c::kloc_18fcf: 	goto loc_18fcf;
        case m2c::kloc_19000: 	goto loc_19000;
        case m2c::kloc_19024: 	goto loc_19024;
        case m2c::kloc_19048: 	goto loc_19048;
        case m2c::kloc_1906c: 	goto loc_1906c;
        case m2c::ksub_18e81: 	goto sub_18e81;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_19080(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_19080:
    _begin:
cs=0x1a2;eip=0x009080; 	X(PUSH(ds));	// 22693                  push    ds ;~ 01A2:9080
cs=0x1a2;eip=0x009081; 	T(es = *(dw*)(((db*)&off_1f8c8)+2););	// 22694                  mov     es, word ptr ds:off_1F8C8+2 ;~ 01A2:9081
cs=0x1a2;eip=0x009085; 	T(ds = *(dw*)(((db*)&seg_1f171)+1););	// 22695                  mov     ds, seg_1F171+1 ;~ 01A2:9085
cs=0x1a2;eip=0x009089; 	T(TEST(cl, 8));	// 22697                  test    cl, 8 ;~ 01A2:9089
cs=0x1a2;eip=0x00908c; 	J(JZ(loc_1908f));	// 22698                  jz      short loc_1908F ;~ 01A2:908C
cs=0x1a2;eip=0x00908e; 	T(INC(di));	// 22699                  inc     di ;~ 01A2:908E
loc_1908f:
	// 5873 
cs=0x1a2;eip=0x00908f; 	T(AND(cl, 7));	// 22702                  and     cl, 7 ;~ 01A2:908F
cs=0x1a2;eip=0x009092; 	J(JNZ(loc_19097));	// 22703                  jnz     short loc_19097 ;~ 01A2:9092
cs=0x1a2;eip=0x009094; 	J(JMP(loc_1920e));	// 22704                  jmp     loc_1920E ;~ 01A2:9094
loc_19097:
	// 5874 
cs=0x1a2;eip=0x009097; 	T(dx = 0x3C4;);	// 22708                  mov     dx, 3C4h ;~ 01A2:9097
cs=0x1a2;eip=0x00909a; 	T(ax = 0x0F02;);	// 22709                  mov     ax, 0F02h ;~ 01A2:909A
cs=0x1a2;eip=0x00909d; 	S(OUT(dx, ax));	// 22710                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:909D
cs=0x1a2;eip=0x00909e; 	T(dx = 0x3CE;);	// 22712                  mov     dx, 3CEh ;~ 01A2:909E
cs=0x1a2;eip=0x0090a1; 	T(ax = 0x805;);	// 22713                  mov     ax, 805h ;~ 01A2:90A1
cs=0x1a2;eip=0x0090a4; 	S(OUT(dx, ax));	// 22714                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:90A4
cs=0x1a2;eip=0x0090a5; 	T(ax = 0x803;);	// 22716                  mov     ax, 803h ;~ 01A2:90A5
cs=0x1a2;eip=0x0090a8; 	S(OUT(dx, ax));	// 22717                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:90A8
cs=0x1a2;eip=0x0090a9; 	T(ax = 7;);	// 22719                  mov     ax, 7 ;~ 01A2:90A9
cs=0x1a2;eip=0x0090ac; 	S(OUT(dx, ax));	// 22720                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:90AC
cs=0x1a2;eip=0x0090ad; 	X(PUSH(cx));	// 22723                  push    cx ;~ 01A2:90AD
cs=0x1a2;eip=0x0090ae; 	T(bp = di;);	// 22724                  mov     bp, di ;~ 01A2:90AE
cs=0x1a2;eip=0x0090b0; 	T(bx = 0x0FF00;);	// 22725                  mov     bx, 0FF00h ;~ 01A2:90B0
cs=0x1a2;eip=0x0090b3; 	T(SHR(bx, cl));	// 22726                  shr     bx, cl ;~ 01A2:90B3
loc_190b5:
	// 5875 
cs=0x1a2;eip=0x0090b5; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22729                  lods    word ptr es:[si] ;~ 01A2:90B5
cs=0x1a2;eip=0x0090b7; 	T(ROR(ax, cl));	// 22730                  ror     ax, cl ;~ 01A2:90B7
cs=0x1a2;eip=0x0090b9; 	T(dl = al;);	// 22731                  mov     dl, al ;~ 01A2:90B9
cs=0x1a2;eip=0x0090bb; 	T(AND(al, bh));	// 22732                  and     al, bh ;~ 01A2:90BB
cs=0x1a2;eip=0x0090bd; 	T(AND(dl, bl));	// 22733                  and     dl, bl ;~ 01A2:90BD
cs=0x1a2;eip=0x0090bf; 	T(NOT(ax));	// 22734                  not     ax ;~ 01A2:90BF
cs=0x1a2;eip=0x0090c1; 	X(AND(*(raddr(ds,di)), al));	// 22735                  and     [di], al ;~ 01A2:90C1
cs=0x1a2;eip=0x0090c3; 	X(AND(*(raddr(ds,di+1)), ah));	// 22736                  and     [di+1], ah ;~ 01A2:90C3
cs=0x1a2;eip=0x0090c6; 	T(ADD(di, 2));	// 22737                  add     di, 2 ;~ 01A2:90C6
cs=0x1a2;eip=0x0090c9; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22738                  lods    word ptr es:[si] ;~ 01A2:90C9
cs=0x1a2;eip=0x0090cb; 	T(ROR(ax, cl));	// 22739                  ror     ax, cl ;~ 01A2:90CB
cs=0x1a2;eip=0x0090cd; 	T(dh = al;);	// 22740                  mov     dh, al ;~ 01A2:90CD
cs=0x1a2;eip=0x0090cf; 	T(AND(al, bh));	// 22741                  and     al, bh ;~ 01A2:90CF
cs=0x1a2;eip=0x0090d1; 	T(AND(dh, bl));	// 22742                  and     dh, bl ;~ 01A2:90D1
cs=0x1a2;eip=0x0090d3; 	T(OR(al, dl));	// 22743                  or      al, dl ;~ 01A2:90D3
cs=0x1a2;eip=0x0090d5; 	T(NOT(ax));	// 22744                  not     ax ;~ 01A2:90D5
cs=0x1a2;eip=0x0090d7; 	X(AND(*(raddr(ds,di)), al));	// 22745                  and     [di], al ;~ 01A2:90D7
cs=0x1a2;eip=0x0090d9; 	X(AND(*(raddr(ds,di+1)), ah));	// 22746                  and     [di+1], ah ;~ 01A2:90D9
cs=0x1a2;eip=0x0090dc; 	T(NOT(dh));	// 22747                  not     dh ;~ 01A2:90DC
cs=0x1a2;eip=0x0090de; 	X(AND(*(raddr(ds,di+2)), dh));	// 22748                  and     [di+2], dh ;~ 01A2:90DE
cs=0x1a2;eip=0x0090e1; 	T(ADD(di, 0x26));	// 22749                  add     di, 26h ; '&' ;~ 01A2:90E1
cs=0x1a2;eip=0x0090e4; 	T(DEC(ch));	// 22750                  dec     ch ;~ 01A2:90E4
cs=0x1a2;eip=0x0090e6; 	J(JNZ(loc_190b5));	// 22751                  jnz     short loc_190B5 ;~ 01A2:90E6
cs=0x1a2;eip=0x0090e8; 	X(POP(cx));	// 22752                  pop     cx ;~ 01A2:90E8
cs=0x1a2;eip=0x0090e9; 	T(di = bp;);	// 22753                  mov     di, bp ;~ 01A2:90E9
cs=0x1a2;eip=0x0090eb; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 22754                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:90EB
cs=0x1a2;eip=0x0090f0; 	T(dx = 0x3C4;);	// 22755                  mov     dx, 3C4h ;~ 01A2:90F0
cs=0x1a2;eip=0x0090f3; 	T(ax = 0x102;);	// 22756                  mov     ax, 102h ;~ 01A2:90F3
cs=0x1a2;eip=0x0090f6; 	S(OUT(dx, ax));	// 22757                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:90F6
cs=0x1a2;eip=0x0090f7; 	T(dx = 0x3CE;);	// 22759                  mov     dx, 3CEh ;~ 01A2:90F7
cs=0x1a2;eip=0x0090fa; 	T(ax = 5;);	// 22760                  mov     ax, 5 ;~ 01A2:90FA
cs=0x1a2;eip=0x0090fd; 	S(OUT(dx, ax));	// 22761                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:90FD
cs=0x1a2;eip=0x0090fe; 	T(ax = 3;);	// 22768                  mov     ax, 3 ;~ 01A2:90FE
cs=0x1a2;eip=0x009101; 	S(OUT(dx, ax));	// 22769                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9101
cs=0x1a2;eip=0x009102; 	T(ax = 4;);	// 22774                  mov     ax, 4 ;~ 01A2:9102
cs=0x1a2;eip=0x009105; 	S(OUT(dx, ax));	// 22775                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9105
cs=0x1a2;eip=0x009106; 	X(PUSH(cx));	// 22778                  push    cx ;~ 01A2:9106
cs=0x1a2;eip=0x009107; 	T(bp = di;);	// 22779                  mov     bp, di ;~ 01A2:9107
cs=0x1a2;eip=0x009109; 	T(bx = 0x0FF00;);	// 22780                  mov     bx, 0FF00h ;~ 01A2:9109
cs=0x1a2;eip=0x00910c; 	T(SHR(bx, cl));	// 22781                  shr     bx, cl ;~ 01A2:910C
loc_1910e:
	// 5876 
cs=0x1a2;eip=0x00910e; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22784                  lods    word ptr es:[si] ;~ 01A2:910E
cs=0x1a2;eip=0x009110; 	T(ROR(ax, cl));	// 22785                  ror     ax, cl ;~ 01A2:9110
cs=0x1a2;eip=0x009112; 	T(dl = al;);	// 22786                  mov     dl, al ;~ 01A2:9112
cs=0x1a2;eip=0x009114; 	T(AND(al, bh));	// 22787                  and     al, bh ;~ 01A2:9114
cs=0x1a2;eip=0x009116; 	T(AND(dl, bl));	// 22788                  and     dl, bl ;~ 01A2:9116
cs=0x1a2;eip=0x009118; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 22789                  or      [di], ax ;~ 01A2:9118
cs=0x1a2;eip=0x00911a; 	T(ADD(di, 2));	// 22790                  add     di, 2 ;~ 01A2:911A
cs=0x1a2;eip=0x00911d; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22791                  lods    word ptr es:[si] ;~ 01A2:911D
cs=0x1a2;eip=0x00911f; 	T(ROR(ax, cl));	// 22792                  ror     ax, cl ;~ 01A2:911F
cs=0x1a2;eip=0x009121; 	T(dh = al;);	// 22793                  mov     dh, al ;~ 01A2:9121
cs=0x1a2;eip=0x009123; 	T(AND(al, bh));	// 22794                  and     al, bh ;~ 01A2:9123
cs=0x1a2;eip=0x009125; 	T(AND(dh, bl));	// 22795                  and     dh, bl ;~ 01A2:9125
cs=0x1a2;eip=0x009127; 	T(OR(al, dl));	// 22796                  or      al, dl ;~ 01A2:9127
cs=0x1a2;eip=0x009129; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 22797                  or      [di], ax ;~ 01A2:9129
cs=0x1a2;eip=0x00912b; 	X(OR(*(raddr(ds,di+2)), dh));	// 22798                  or      [di+2], dh ;~ 01A2:912B
cs=0x1a2;eip=0x00912e; 	T(ADD(di, 0x26));	// 22799                  add     di, 26h ; '&' ;~ 01A2:912E
cs=0x1a2;eip=0x009131; 	T(DEC(ch));	// 22800                  dec     ch ;~ 01A2:9131
cs=0x1a2;eip=0x009133; 	J(JNZ(loc_1910e));	// 22801                  jnz     short loc_1910E ;~ 01A2:9133
cs=0x1a2;eip=0x009135; 	X(POP(cx));	// 22802                  pop     cx ;~ 01A2:9135
cs=0x1a2;eip=0x009136; 	T(di = bp;);	// 22803                  mov     di, bp ;~ 01A2:9136
cs=0x1a2;eip=0x009138; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 22804                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:9138
cs=0x1a2;eip=0x00913d; 	T(dx = 0x3CE;);	// 22805                  mov     dx, 3CEh ;~ 01A2:913D
cs=0x1a2;eip=0x009140; 	T(ax = 0x104;);	// 22806                  mov     ax, 104h ;~ 01A2:9140
cs=0x1a2;eip=0x009143; 	S(OUT(dx, ax));	// 22807                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9143
cs=0x1a2;eip=0x009144; 	T(dx = 0x3C4;);	// 22809                  mov     dx, 3C4h ;~ 01A2:9144
cs=0x1a2;eip=0x009147; 	T(ax = 0x202;);	// 22810                  mov     ax, 202h ;~ 01A2:9147
cs=0x1a2;eip=0x00914a; 	S(OUT(dx, ax));	// 22811                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:914A
cs=0x1a2;eip=0x00914b; 	X(PUSH(cx));	// 22813                  push    cx ;~ 01A2:914B
cs=0x1a2;eip=0x00914c; 	T(bp = di;);	// 22814                  mov     bp, di ;~ 01A2:914C
cs=0x1a2;eip=0x00914e; 	T(bx = 0x0FF00;);	// 22815                  mov     bx, 0FF00h ;~ 01A2:914E
cs=0x1a2;eip=0x009151; 	T(SHR(bx, cl));	// 22816                  shr     bx, cl ;~ 01A2:9151
loc_19153:
	// 5877 
cs=0x1a2;eip=0x009153; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22819                  lods    word ptr es:[si] ;~ 01A2:9153
cs=0x1a2;eip=0x009155; 	T(ROR(ax, cl));	// 22820                  ror     ax, cl ;~ 01A2:9155
cs=0x1a2;eip=0x009157; 	T(dl = al;);	// 22821                  mov     dl, al ;~ 01A2:9157
cs=0x1a2;eip=0x009159; 	T(AND(al, bh));	// 22822                  and     al, bh ;~ 01A2:9159
cs=0x1a2;eip=0x00915b; 	T(AND(dl, bl));	// 22823                  and     dl, bl ;~ 01A2:915B
cs=0x1a2;eip=0x00915d; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 22824                  or      [di], ax ;~ 01A2:915D
cs=0x1a2;eip=0x00915f; 	T(ADD(di, 2));	// 22825                  add     di, 2 ;~ 01A2:915F
cs=0x1a2;eip=0x009162; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22826                  lods    word ptr es:[si] ;~ 01A2:9162
cs=0x1a2;eip=0x009164; 	T(ROR(ax, cl));	// 22827                  ror     ax, cl ;~ 01A2:9164
cs=0x1a2;eip=0x009166; 	T(dh = al;);	// 22828                  mov     dh, al ;~ 01A2:9166
cs=0x1a2;eip=0x009168; 	T(AND(al, bh));	// 22829                  and     al, bh ;~ 01A2:9168
cs=0x1a2;eip=0x00916a; 	T(AND(dh, bl));	// 22830                  and     dh, bl ;~ 01A2:916A
cs=0x1a2;eip=0x00916c; 	T(OR(al, dl));	// 22831                  or      al, dl ;~ 01A2:916C
cs=0x1a2;eip=0x00916e; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 22832                  or      [di], ax ;~ 01A2:916E
cs=0x1a2;eip=0x009170; 	X(OR(*(raddr(ds,di+2)), dh));	// 22833                  or      [di+2], dh ;~ 01A2:9170
cs=0x1a2;eip=0x009173; 	T(ADD(di, 0x26));	// 22834                  add     di, 26h ; '&' ;~ 01A2:9173
cs=0x1a2;eip=0x009176; 	T(DEC(ch));	// 22835                  dec     ch ;~ 01A2:9176
cs=0x1a2;eip=0x009178; 	J(JNZ(loc_19153));	// 22836                  jnz     short loc_19153 ;~ 01A2:9178
cs=0x1a2;eip=0x00917a; 	X(POP(cx));	// 22837                  pop     cx ;~ 01A2:917A
cs=0x1a2;eip=0x00917b; 	T(di = bp;);	// 22838                  mov     di, bp ;~ 01A2:917B
cs=0x1a2;eip=0x00917d; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 22839                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:917D
cs=0x1a2;eip=0x009182; 	T(dx = 0x3CE;);	// 22840                  mov     dx, 3CEh ;~ 01A2:9182
cs=0x1a2;eip=0x009185; 	T(ax = 0x204;);	// 22841                  mov     ax, 204h ;~ 01A2:9185
cs=0x1a2;eip=0x009188; 	S(OUT(dx, ax));	// 22842                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9188
cs=0x1a2;eip=0x009189; 	T(dx = 0x3C4;);	// 22844                  mov     dx, 3C4h ;~ 01A2:9189
cs=0x1a2;eip=0x00918c; 	T(ax = 0x402;);	// 22845                  mov     ax, 402h ;~ 01A2:918C
cs=0x1a2;eip=0x00918f; 	S(OUT(dx, ax));	// 22846                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:918F
cs=0x1a2;eip=0x009190; 	X(PUSH(cx));	// 22848                  push    cx ;~ 01A2:9190
cs=0x1a2;eip=0x009191; 	T(bp = di;);	// 22849                  mov     bp, di ;~ 01A2:9191
cs=0x1a2;eip=0x009193; 	T(bx = 0x0FF00;);	// 22850                  mov     bx, 0FF00h ;~ 01A2:9193
cs=0x1a2;eip=0x009196; 	T(SHR(bx, cl));	// 22851                  shr     bx, cl ;~ 01A2:9196
loc_19198:
	// 5878 
cs=0x1a2;eip=0x009198; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22854                  lods    word ptr es:[si] ;~ 01A2:9198
cs=0x1a2;eip=0x00919a; 	T(ROR(ax, cl));	// 22855                  ror     ax, cl ;~ 01A2:919A
cs=0x1a2;eip=0x00919c; 	T(dl = al;);	// 22856                  mov     dl, al ;~ 01A2:919C
cs=0x1a2;eip=0x00919e; 	T(AND(al, bh));	// 22857                  and     al, bh ;~ 01A2:919E
cs=0x1a2;eip=0x0091a0; 	T(AND(dl, bl));	// 22858                  and     dl, bl ;~ 01A2:91A0
cs=0x1a2;eip=0x0091a2; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 22859                  or      [di], ax ;~ 01A2:91A2
cs=0x1a2;eip=0x0091a4; 	T(ADD(di, 2));	// 22860                  add     di, 2 ;~ 01A2:91A4
cs=0x1a2;eip=0x0091a7; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22861                  lods    word ptr es:[si] ;~ 01A2:91A7
cs=0x1a2;eip=0x0091a9; 	T(ROR(ax, cl));	// 22862                  ror     ax, cl ;~ 01A2:91A9
cs=0x1a2;eip=0x0091ab; 	T(dh = al;);	// 22863                  mov     dh, al ;~ 01A2:91AB
cs=0x1a2;eip=0x0091ad; 	T(AND(al, bh));	// 22864                  and     al, bh ;~ 01A2:91AD
cs=0x1a2;eip=0x0091af; 	T(AND(dh, bl));	// 22865                  and     dh, bl ;~ 01A2:91AF
cs=0x1a2;eip=0x0091b1; 	T(OR(al, dl));	// 22866                  or      al, dl ;~ 01A2:91B1
cs=0x1a2;eip=0x0091b3; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 22867                  or      [di], ax ;~ 01A2:91B3
cs=0x1a2;eip=0x0091b5; 	X(OR(*(raddr(ds,di+2)), dh));	// 22868                  or      [di+2], dh ;~ 01A2:91B5
cs=0x1a2;eip=0x0091b8; 	T(ADD(di, 0x26));	// 22869                  add     di, 26h ; '&' ;~ 01A2:91B8
cs=0x1a2;eip=0x0091bb; 	T(DEC(ch));	// 22870                  dec     ch ;~ 01A2:91BB
cs=0x1a2;eip=0x0091bd; 	J(JNZ(loc_19198));	// 22871                  jnz     short loc_19198 ;~ 01A2:91BD
cs=0x1a2;eip=0x0091bf; 	X(POP(cx));	// 22872                  pop     cx ;~ 01A2:91BF
cs=0x1a2;eip=0x0091c0; 	T(di = bp;);	// 22873                  mov     di, bp ;~ 01A2:91C0
cs=0x1a2;eip=0x0091c2; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 22874                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:91C2
cs=0x1a2;eip=0x0091c7; 	T(dx = 0x3CE;);	// 22875                  mov     dx, 3CEh ;~ 01A2:91C7
cs=0x1a2;eip=0x0091ca; 	T(ax = 0x304;);	// 22876                  mov     ax, 304h ;~ 01A2:91CA
cs=0x1a2;eip=0x0091cd; 	S(OUT(dx, ax));	// 22877                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:91CD
cs=0x1a2;eip=0x0091ce; 	T(dx = 0x3C4;);	// 22879                  mov     dx, 3C4h ;~ 01A2:91CE
cs=0x1a2;eip=0x0091d1; 	T(ax = 0x802;);	// 22880                  mov     ax, 802h ;~ 01A2:91D1
cs=0x1a2;eip=0x0091d4; 	S(OUT(dx, ax));	// 22881                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:91D4
cs=0x1a2;eip=0x0091d5; 	X(PUSH(cx));	// 22883                  push    cx ;~ 01A2:91D5
cs=0x1a2;eip=0x0091d6; 	T(bp = di;);	// 22884                  mov     bp, di ;~ 01A2:91D6
cs=0x1a2;eip=0x0091d8; 	T(bx = 0x0FF00;);	// 22885                  mov     bx, 0FF00h ;~ 01A2:91D8
cs=0x1a2;eip=0x0091db; 	T(SHR(bx, cl));	// 22886                  shr     bx, cl ;~ 01A2:91DB
loc_191dd:
	// 5879 
cs=0x1a2;eip=0x0091dd; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22889                  lods    word ptr es:[si] ;~ 01A2:91DD
cs=0x1a2;eip=0x0091df; 	T(ROR(ax, cl));	// 22890                  ror     ax, cl ;~ 01A2:91DF
cs=0x1a2;eip=0x0091e1; 	T(dl = al;);	// 22891                  mov     dl, al ;~ 01A2:91E1
cs=0x1a2;eip=0x0091e3; 	T(AND(al, bh));	// 22892                  and     al, bh ;~ 01A2:91E3
cs=0x1a2;eip=0x0091e5; 	T(AND(dl, bl));	// 22893                  and     dl, bl ;~ 01A2:91E5
cs=0x1a2;eip=0x0091e7; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 22894                  or      [di], ax ;~ 01A2:91E7
cs=0x1a2;eip=0x0091e9; 	T(ADD(di, 2));	// 22895                  add     di, 2 ;~ 01A2:91E9
cs=0x1a2;eip=0x0091ec; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22896                  lods    word ptr es:[si] ;~ 01A2:91EC
cs=0x1a2;eip=0x0091ee; 	T(ROR(ax, cl));	// 22897                  ror     ax, cl ;~ 01A2:91EE
cs=0x1a2;eip=0x0091f0; 	T(dh = al;);	// 22898                  mov     dh, al ;~ 01A2:91F0
cs=0x1a2;eip=0x0091f2; 	T(AND(al, bh));	// 22899                  and     al, bh ;~ 01A2:91F2
cs=0x1a2;eip=0x0091f4; 	T(AND(dh, bl));	// 22900                  and     dh, bl ;~ 01A2:91F4
cs=0x1a2;eip=0x0091f6; 	T(OR(al, dl));	// 22901                  or      al, dl ;~ 01A2:91F6
cs=0x1a2;eip=0x0091f8; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 22902                  or      [di], ax ;~ 01A2:91F8
cs=0x1a2;eip=0x0091fa; 	X(OR(*(raddr(ds,di+2)), dh));	// 22903                  or      [di+2], dh ;~ 01A2:91FA
cs=0x1a2;eip=0x0091fd; 	T(ADD(di, 0x26));	// 22904                  add     di, 26h ; '&' ;~ 01A2:91FD
cs=0x1a2;eip=0x009200; 	T(DEC(ch));	// 22905                  dec     ch ;~ 01A2:9200
cs=0x1a2;eip=0x009202; 	J(JNZ(loc_191dd));	// 22906                  jnz     short loc_191DD ;~ 01A2:9202
cs=0x1a2;eip=0x009204; 	X(POP(cx));	// 22907                  pop     cx ;~ 01A2:9204
cs=0x1a2;eip=0x009205; 	T(di = bp;);	// 22908                  mov     di, bp ;~ 01A2:9205
cs=0x1a2;eip=0x009207; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 22909                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:9207
cs=0x1a2;eip=0x00920c; 	X(POP(ds));	// 22910                  pop     ds ;~ 01A2:920C
cs=0x1a2;eip=0x00920d; 	J(RETN(0));	// 22912                  retn ;~ 01A2:920D
loc_1920e:
	// 5880 
cs=0x1a2;eip=0x00920e; 	T(dx = 0x3C4;);	// 22916                  mov     dx, 3C4h ;~ 01A2:920E
cs=0x1a2;eip=0x009211; 	T(ax = 0x0F02;);	// 22917                  mov     ax, 0F02h ;~ 01A2:9211
cs=0x1a2;eip=0x009214; 	S(OUT(dx, ax));	// 22918                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:9214
cs=0x1a2;eip=0x009215; 	T(dx = 0x3CE;);	// 22920                  mov     dx, 3CEh ;~ 01A2:9215
cs=0x1a2;eip=0x009218; 	T(ax = 0x805;);	// 22921                  mov     ax, 805h ;~ 01A2:9218
cs=0x1a2;eip=0x00921b; 	S(OUT(dx, ax));	// 22922                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:921B
cs=0x1a2;eip=0x00921c; 	T(ax = 0x803;);	// 22924                  mov     ax, 803h ;~ 01A2:921C
cs=0x1a2;eip=0x00921f; 	S(OUT(dx, ax));	// 22925                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:921F
cs=0x1a2;eip=0x009220; 	T(ax = 7;);	// 22927                  mov     ax, 7 ;~ 01A2:9220
cs=0x1a2;eip=0x009223; 	S(OUT(dx, ax));	// 22928                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9223
cs=0x1a2;eip=0x009224; 	T(bp = di;);	// 22931                  mov     bp, di ;~ 01A2:9224
cs=0x1a2;eip=0x009226; 	T(dl = ch;);	// 22932                  mov     dl, ch ;~ 01A2:9226
loc_19228:
	// 5881 
cs=0x1a2;eip=0x009228; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22935                  lods    word ptr es:[si] ;~ 01A2:9228
cs=0x1a2;eip=0x00922a; 	T(NOT(ax));	// 22936                  not     ax ;~ 01A2:922A
cs=0x1a2;eip=0x00922c; 	X(AND(*(raddr(ds,di)), al));	// 22937                  and     [di], al ;~ 01A2:922C
cs=0x1a2;eip=0x00922e; 	X(AND(*(raddr(ds,di+1)), ah));	// 22938                  and     [di+1], ah ;~ 01A2:922E
cs=0x1a2;eip=0x009231; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22939                  lods    word ptr es:[si] ;~ 01A2:9231
cs=0x1a2;eip=0x009233; 	T(NOT(ax));	// 22940                  not     ax ;~ 01A2:9233
cs=0x1a2;eip=0x009235; 	X(AND(*(raddr(ds,di+2)), al));	// 22941                  and     [di+2], al ;~ 01A2:9235
cs=0x1a2;eip=0x009238; 	X(AND(*(raddr(ds,di+3)), ah));	// 22942                  and     [di+3], ah ;~ 01A2:9238
cs=0x1a2;eip=0x00923b; 	T(ADD(di, 0x28));	// 22943                  add     di, 28h ; '(' ;~ 01A2:923B
cs=0x1a2;eip=0x00923e; 	T(DEC(dl));	// 22944                  dec     dl ;~ 01A2:923E
cs=0x1a2;eip=0x009240; 	J(JNZ(loc_19228));	// 22945                  jnz     short loc_19228 ;~ 01A2:9240
cs=0x1a2;eip=0x009242; 	T(di = bp;);	// 22946                  mov     di, bp ;~ 01A2:9242
cs=0x1a2;eip=0x009244; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 22947                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:9244
cs=0x1a2;eip=0x009249; 	T(dx = 0x3C4;);	// 22948                  mov     dx, 3C4h ;~ 01A2:9249
cs=0x1a2;eip=0x00924c; 	T(ax = 0x102;);	// 22949                  mov     ax, 102h ;~ 01A2:924C
cs=0x1a2;eip=0x00924f; 	S(OUT(dx, ax));	// 22950                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:924F
cs=0x1a2;eip=0x009250; 	T(dx = 0x3CE;);	// 22952                  mov     dx, 3CEh ;~ 01A2:9250
cs=0x1a2;eip=0x009253; 	T(ax = 5;);	// 22953                  mov     ax, 5 ;~ 01A2:9253
cs=0x1a2;eip=0x009256; 	S(OUT(dx, ax));	// 22954                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9256
cs=0x1a2;eip=0x009257; 	T(ax = 3;);	// 22961                  mov     ax, 3 ;~ 01A2:9257
cs=0x1a2;eip=0x00925a; 	S(OUT(dx, ax));	// 22962                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:925A
cs=0x1a2;eip=0x00925b; 	T(ax = 4;);	// 22967                  mov     ax, 4 ;~ 01A2:925B
cs=0x1a2;eip=0x00925e; 	S(OUT(dx, ax));	// 22968                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:925E
cs=0x1a2;eip=0x00925f; 	T(bp = di;);	// 22971                  mov     bp, di ;~ 01A2:925F
cs=0x1a2;eip=0x009261; 	T(bl = ch;);	// 22972                  mov     bl, ch ;~ 01A2:9261
loc_19263:
	// 5882 
cs=0x1a2;eip=0x009263; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22975                  lods    word ptr es:[si] ;~ 01A2:9263
cs=0x1a2;eip=0x009265; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 22976                  or      [di], ax ;~ 01A2:9265
cs=0x1a2;eip=0x009267; 	T(ADD(di, 2));	// 22977                  add     di, 2 ;~ 01A2:9267
cs=0x1a2;eip=0x00926a; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22978                  lods    word ptr es:[si] ;~ 01A2:926A
cs=0x1a2;eip=0x00926c; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 22979                  or      [di], ax ;~ 01A2:926C
cs=0x1a2;eip=0x00926e; 	T(ADD(di, 0x26));	// 22980                  add     di, 26h ; '&' ;~ 01A2:926E
cs=0x1a2;eip=0x009271; 	T(DEC(bl));	// 22981                  dec     bl ;~ 01A2:9271
cs=0x1a2;eip=0x009273; 	J(JNZ(loc_19263));	// 22982                  jnz     short loc_19263 ;~ 01A2:9273
cs=0x1a2;eip=0x009275; 	T(di = bp;);	// 22983                  mov     di, bp ;~ 01A2:9275
cs=0x1a2;eip=0x009277; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 22984                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:9277
cs=0x1a2;eip=0x00927c; 	T(dx = 0x3CE;);	// 22985                  mov     dx, 3CEh ;~ 01A2:927C
cs=0x1a2;eip=0x00927f; 	T(ax = 0x104;);	// 22986                  mov     ax, 104h ;~ 01A2:927F
cs=0x1a2;eip=0x009282; 	S(OUT(dx, ax));	// 22987                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9282
cs=0x1a2;eip=0x009283; 	T(dx = 0x3C4;);	// 22989                  mov     dx, 3C4h ;~ 01A2:9283
cs=0x1a2;eip=0x009286; 	T(ax = 0x202;);	// 22990                  mov     ax, 202h ;~ 01A2:9286
cs=0x1a2;eip=0x009289; 	S(OUT(dx, ax));	// 22991                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:9289
cs=0x1a2;eip=0x00928a; 	T(bp = di;);	// 22993                  mov     bp, di ;~ 01A2:928A
cs=0x1a2;eip=0x00928c; 	T(bl = ch;);	// 22994                  mov     bl, ch ;~ 01A2:928C
loc_1928e:
	// 5883 
cs=0x1a2;eip=0x00928e; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 22997                  lods    word ptr es:[si] ;~ 01A2:928E
cs=0x1a2;eip=0x009290; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 22998                  or      [di], ax ;~ 01A2:9290
cs=0x1a2;eip=0x009292; 	T(ADD(di, 2));	// 22999                  add     di, 2 ;~ 01A2:9292
cs=0x1a2;eip=0x009295; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23000                  lods    word ptr es:[si] ;~ 01A2:9295
cs=0x1a2;eip=0x009297; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23001                  or      [di], ax ;~ 01A2:9297
cs=0x1a2;eip=0x009299; 	T(ADD(di, 0x26));	// 23002                  add     di, 26h ; '&' ;~ 01A2:9299
cs=0x1a2;eip=0x00929c; 	T(DEC(bl));	// 23003                  dec     bl ;~ 01A2:929C
cs=0x1a2;eip=0x00929e; 	J(JNZ(loc_1928e));	// 23004                  jnz     short loc_1928E ;~ 01A2:929E
cs=0x1a2;eip=0x0092a0; 	T(di = bp;);	// 23005                  mov     di, bp ;~ 01A2:92A0
cs=0x1a2;eip=0x0092a2; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 23006                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:92A2
cs=0x1a2;eip=0x0092a7; 	T(dx = 0x3CE;);	// 23007                  mov     dx, 3CEh ;~ 01A2:92A7
cs=0x1a2;eip=0x0092aa; 	T(ax = 0x204;);	// 23008                  mov     ax, 204h ;~ 01A2:92AA
cs=0x1a2;eip=0x0092ad; 	S(OUT(dx, ax));	// 23009                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:92AD
cs=0x1a2;eip=0x0092ae; 	T(dx = 0x3C4;);	// 23011                  mov     dx, 3C4h ;~ 01A2:92AE
cs=0x1a2;eip=0x0092b1; 	T(ax = 0x402;);	// 23012                  mov     ax, 402h ;~ 01A2:92B1
cs=0x1a2;eip=0x0092b4; 	S(OUT(dx, ax));	// 23013                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:92B4
cs=0x1a2;eip=0x0092b5; 	T(bp = di;);	// 23015                  mov     bp, di ;~ 01A2:92B5
cs=0x1a2;eip=0x0092b7; 	T(bl = ch;);	// 23016                  mov     bl, ch ;~ 01A2:92B7
loc_192b9:
	// 5884 
cs=0x1a2;eip=0x0092b9; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23019                  lods    word ptr es:[si] ;~ 01A2:92B9
cs=0x1a2;eip=0x0092bb; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23020                  or      [di], ax ;~ 01A2:92BB
cs=0x1a2;eip=0x0092bd; 	T(ADD(di, 2));	// 23021                  add     di, 2 ;~ 01A2:92BD
cs=0x1a2;eip=0x0092c0; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23022                  lods    word ptr es:[si] ;~ 01A2:92C0
cs=0x1a2;eip=0x0092c2; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23023                  or      [di], ax ;~ 01A2:92C2
cs=0x1a2;eip=0x0092c4; 	T(ADD(di, 0x26));	// 23024                  add     di, 26h ; '&' ;~ 01A2:92C4
cs=0x1a2;eip=0x0092c7; 	T(DEC(bl));	// 23025                  dec     bl ;~ 01A2:92C7
cs=0x1a2;eip=0x0092c9; 	J(JNZ(loc_192b9));	// 23026                  jnz     short loc_192B9 ;~ 01A2:92C9
cs=0x1a2;eip=0x0092cb; 	T(di = bp;);	// 23027                  mov     di, bp ;~ 01A2:92CB
cs=0x1a2;eip=0x0092cd; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 23028                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:92CD
cs=0x1a2;eip=0x0092d2; 	T(dx = 0x3CE;);	// 23029                  mov     dx, 3CEh ;~ 01A2:92D2
cs=0x1a2;eip=0x0092d5; 	T(ax = 0x304;);	// 23030                  mov     ax, 304h ;~ 01A2:92D5
cs=0x1a2;eip=0x0092d8; 	S(OUT(dx, ax));	// 23031                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:92D8
cs=0x1a2;eip=0x0092d9; 	T(dx = 0x3C4;);	// 23033                  mov     dx, 3C4h ;~ 01A2:92D9
cs=0x1a2;eip=0x0092dc; 	T(ax = 0x802;);	// 23034                  mov     ax, 802h ;~ 01A2:92DC
cs=0x1a2;eip=0x0092df; 	S(OUT(dx, ax));	// 23035                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:92DF
cs=0x1a2;eip=0x0092e0; 	T(bp = di;);	// 23037                  mov     bp, di ;~ 01A2:92E0
cs=0x1a2;eip=0x0092e2; 	T(bl = ch;);	// 23038                  mov     bl, ch ;~ 01A2:92E2
loc_192e4:
	// 5885 
cs=0x1a2;eip=0x0092e4; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23041                  lods    word ptr es:[si] ;~ 01A2:92E4
cs=0x1a2;eip=0x0092e6; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23042                  or      [di], ax ;~ 01A2:92E6
cs=0x1a2;eip=0x0092e8; 	T(ADD(di, 2));	// 23043                  add     di, 2 ;~ 01A2:92E8
cs=0x1a2;eip=0x0092eb; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23044                  lods    word ptr es:[si] ;~ 01A2:92EB
cs=0x1a2;eip=0x0092ed; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23045                  or      [di], ax ;~ 01A2:92ED
cs=0x1a2;eip=0x0092ef; 	T(ADD(di, 0x26));	// 23046                  add     di, 26h ; '&' ;~ 01A2:92EF
cs=0x1a2;eip=0x0092f2; 	T(DEC(bl));	// 23047                  dec     bl ;~ 01A2:92F2
cs=0x1a2;eip=0x0092f4; 	J(JNZ(loc_192e4));	// 23048                  jnz     short loc_192E4 ;~ 01A2:92F4
cs=0x1a2;eip=0x0092f6; 	T(di = bp;);	// 23049                  mov     di, bp ;~ 01A2:92F6
cs=0x1a2;eip=0x0092f8; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 23050                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:92F8
cs=0x1a2;eip=0x0092fd; 	X(POP(ds));	// 23051                  pop     ds ;~ 01A2:92FD
cs=0x1a2;eip=0x0092fe; 	J(RETN(0));	// 23052                  retn ;~ 01A2:92FE

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1908f: 	goto loc_1908f;
        case m2c::kloc_19097: 	goto loc_19097;
        case m2c::kloc_190b5: 	goto loc_190b5;
        case m2c::kloc_1910e: 	goto loc_1910e;
        case m2c::kloc_19153: 	goto loc_19153;
        case m2c::kloc_19198: 	goto loc_19198;
        case m2c::kloc_191dd: 	goto loc_191dd;
        case m2c::kloc_1920e: 	goto loc_1920e;
        case m2c::kloc_19228: 	goto loc_19228;
        case m2c::kloc_19263: 	goto loc_19263;
        case m2c::kloc_1928e: 	goto loc_1928e;
        case m2c::kloc_192b9: 	goto loc_192b9;
        case m2c::kloc_192e4: 	goto loc_192e4;
        case m2c::ksub_19080: 	goto sub_19080;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_192ff(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_192ff:
    _begin:
cs=0x1a2;eip=0x0092ff; 	X(PUSH(ds));	// 23061                  push    ds ;~ 01A2:92FF
cs=0x1a2;eip=0x009300; 	T(es = *(dw*)(((db*)&off_1f8c8)+2););	// 23062                  mov     es, word ptr ds:off_1F8C8+2 ;~ 01A2:9300
cs=0x1a2;eip=0x009304; 	T(ds = *(dw*)(((db*)&seg_1f171)+1););	// 23064                  mov     ds, seg_1F171+1 ;~ 01A2:9304
cs=0x1a2;eip=0x009308; 	T(TEST(cl, 8));	// 23066                  test    cl, 8 ;~ 01A2:9308
cs=0x1a2;eip=0x00930b; 	J(JZ(loc_1930e));	// 23067                  jz      short loc_1930E ;~ 01A2:930B
cs=0x1a2;eip=0x00930d; 	T(INC(di));	// 23068                  inc     di ;~ 01A2:930D
loc_1930e:
	// 5886 
cs=0x1a2;eip=0x00930e; 	T(AND(cl, 7));	// 23071                  and     cl, 7 ;~ 01A2:930E
cs=0x1a2;eip=0x009311; 	J(JNZ(loc_19316));	// 23072                  jnz     short loc_19316 ;~ 01A2:9311
cs=0x1a2;eip=0x009313; 	J(JMP(loc_194e7));	// 23073                  jmp     loc_194E7 ;~ 01A2:9313
loc_19316:
	// 5887 
cs=0x1a2;eip=0x009316; 	T(dx = 0x3C4;);	// 23077                  mov     dx, 3C4h ;~ 01A2:9316
cs=0x1a2;eip=0x009319; 	T(ax = 0x0F02;);	// 23078                  mov     ax, 0F02h ;~ 01A2:9319
cs=0x1a2;eip=0x00931c; 	S(OUT(dx, ax));	// 23079                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:931C
cs=0x1a2;eip=0x00931d; 	T(dx = 0x3CE;);	// 23081                  mov     dx, 3CEh ;~ 01A2:931D
cs=0x1a2;eip=0x009320; 	T(ax = 0x805;);	// 23082                  mov     ax, 805h ;~ 01A2:9320
cs=0x1a2;eip=0x009323; 	S(OUT(dx, ax));	// 23083                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9323
cs=0x1a2;eip=0x009324; 	T(ax = 0x803;);	// 23085                  mov     ax, 803h ;~ 01A2:9324
cs=0x1a2;eip=0x009327; 	S(OUT(dx, ax));	// 23086                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9327
cs=0x1a2;eip=0x009328; 	T(ax = 7;);	// 23088                  mov     ax, 7 ;~ 01A2:9328
cs=0x1a2;eip=0x00932b; 	S(OUT(dx, ax));	// 23089                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:932B
cs=0x1a2;eip=0x00932c; 	X(PUSH(cx));	// 23092                  push    cx ;~ 01A2:932C
cs=0x1a2;eip=0x00932d; 	T(bp = di;);	// 23093                  mov     bp, di ;~ 01A2:932D
cs=0x1a2;eip=0x00932f; 	T(bx = 0x0FF00;);	// 23094                  mov     bx, 0FF00h ;~ 01A2:932F
cs=0x1a2;eip=0x009332; 	T(SHR(bx, cl));	// 23095                  shr     bx, cl ;~ 01A2:9332
loc_19334:
	// 5888 
cs=0x1a2;eip=0x009334; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23098                  lods    word ptr es:[si] ;~ 01A2:9334
cs=0x1a2;eip=0x009336; 	T(ROR(ax, cl));	// 23099                  ror     ax, cl ;~ 01A2:9336
cs=0x1a2;eip=0x009338; 	T(dl = al;);	// 23100                  mov     dl, al ;~ 01A2:9338
cs=0x1a2;eip=0x00933a; 	T(AND(al, bh));	// 23101                  and     al, bh ;~ 01A2:933A
cs=0x1a2;eip=0x00933c; 	T(AND(dl, bl));	// 23102                  and     dl, bl ;~ 01A2:933C
cs=0x1a2;eip=0x00933e; 	T(NOT(ax));	// 23103                  not     ax ;~ 01A2:933E
cs=0x1a2;eip=0x009340; 	X(AND(*(raddr(ds,di)), al));	// 23104                  and     [di], al ;~ 01A2:9340
cs=0x1a2;eip=0x009342; 	X(AND(*(raddr(ds,di+1)), ah));	// 23105                  and     [di+1], ah ;~ 01A2:9342
cs=0x1a2;eip=0x009345; 	T(ADD(di, 2));	// 23106                  add     di, 2 ;~ 01A2:9345
cs=0x1a2;eip=0x009348; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23107                  lods    word ptr es:[si] ;~ 01A2:9348
cs=0x1a2;eip=0x00934a; 	T(ROR(ax, cl));	// 23108                  ror     ax, cl ;~ 01A2:934A
cs=0x1a2;eip=0x00934c; 	T(dh = al;);	// 23109                  mov     dh, al ;~ 01A2:934C
cs=0x1a2;eip=0x00934e; 	T(AND(al, bh));	// 23110                  and     al, bh ;~ 01A2:934E
cs=0x1a2;eip=0x009350; 	T(AND(dh, bl));	// 23111                  and     dh, bl ;~ 01A2:9350
cs=0x1a2;eip=0x009352; 	T(OR(al, dl));	// 23112                  or      al, dl ;~ 01A2:9352
cs=0x1a2;eip=0x009354; 	T(NOT(ax));	// 23113                  not     ax ;~ 01A2:9354
cs=0x1a2;eip=0x009356; 	X(AND(*(raddr(ds,di)), al));	// 23114                  and     [di], al ;~ 01A2:9356
cs=0x1a2;eip=0x009358; 	X(AND(*(raddr(ds,di+1)), ah));	// 23115                  and     [di+1], ah ;~ 01A2:9358
cs=0x1a2;eip=0x00935b; 	T(ADD(di, 2));	// 23116                  add     di, 2 ;~ 01A2:935B
cs=0x1a2;eip=0x00935e; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23117                  lods    word ptr es:[si] ;~ 01A2:935E
cs=0x1a2;eip=0x009360; 	T(ROR(ax, cl));	// 23118                  ror     ax, cl ;~ 01A2:9360
cs=0x1a2;eip=0x009362; 	T(dl = al;);	// 23119                  mov     dl, al ;~ 01A2:9362
cs=0x1a2;eip=0x009364; 	T(AND(al, bh));	// 23120                  and     al, bh ;~ 01A2:9364
cs=0x1a2;eip=0x009366; 	T(AND(dl, bl));	// 23121                  and     dl, bl ;~ 01A2:9366
cs=0x1a2;eip=0x009368; 	T(OR(al, dh));	// 23122                  or      al, dh ;~ 01A2:9368
cs=0x1a2;eip=0x00936a; 	T(NOT(ax));	// 23123                  not     ax ;~ 01A2:936A
cs=0x1a2;eip=0x00936c; 	X(AND(*(raddr(ds,di)), al));	// 23124                  and     [di], al ;~ 01A2:936C
cs=0x1a2;eip=0x00936e; 	X(AND(*(raddr(ds,di+1)), ah));	// 23125                  and     [di+1], ah ;~ 01A2:936E
cs=0x1a2;eip=0x009371; 	T(NOT(dl));	// 23126                  not     dl ;~ 01A2:9371
cs=0x1a2;eip=0x009373; 	X(AND(*(raddr(ds,di+2)), dl));	// 23127                  and     [di+2], dl ;~ 01A2:9373
cs=0x1a2;eip=0x009376; 	T(ADD(di, 0x24));	// 23128                  add     di, 24h ; '$' ;~ 01A2:9376
cs=0x1a2;eip=0x009379; 	T(DEC(ch));	// 23129                  dec     ch ;~ 01A2:9379
cs=0x1a2;eip=0x00937b; 	J(JNZ(loc_19334));	// 23130                  jnz     short loc_19334 ;~ 01A2:937B
cs=0x1a2;eip=0x00937d; 	X(POP(cx));	// 23131                  pop     cx ;~ 01A2:937D
cs=0x1a2;eip=0x00937e; 	T(di = bp;);	// 23132                  mov     di, bp ;~ 01A2:937E
cs=0x1a2;eip=0x009380; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 23133                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:9380
cs=0x1a2;eip=0x009385; 	T(dx = 0x3C4;);	// 23134                  mov     dx, 3C4h ;~ 01A2:9385
cs=0x1a2;eip=0x009388; 	T(ax = 0x102;);	// 23135                  mov     ax, 102h ;~ 01A2:9388
cs=0x1a2;eip=0x00938b; 	S(OUT(dx, ax));	// 23136                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:938B
cs=0x1a2;eip=0x00938c; 	T(dx = 0x3CE;);	// 23138                  mov     dx, 3CEh ;~ 01A2:938C
cs=0x1a2;eip=0x00938f; 	T(ax = 5;);	// 23139                  mov     ax, 5 ;~ 01A2:938F
cs=0x1a2;eip=0x009392; 	S(OUT(dx, ax));	// 23140                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9392
cs=0x1a2;eip=0x009393; 	T(ax = 3;);	// 23147                  mov     ax, 3 ;~ 01A2:9393
cs=0x1a2;eip=0x009396; 	S(OUT(dx, ax));	// 23148                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9396
cs=0x1a2;eip=0x009397; 	T(ax = 4;);	// 23153                  mov     ax, 4 ;~ 01A2:9397
cs=0x1a2;eip=0x00939a; 	S(OUT(dx, ax));	// 23154                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:939A
cs=0x1a2;eip=0x00939b; 	X(PUSH(cx));	// 23157                  push    cx ;~ 01A2:939B
cs=0x1a2;eip=0x00939c; 	T(bp = di;);	// 23158                  mov     bp, di ;~ 01A2:939C
cs=0x1a2;eip=0x00939e; 	T(bx = 0x0FF00;);	// 23159                  mov     bx, 0FF00h ;~ 01A2:939E
cs=0x1a2;eip=0x0093a1; 	T(SHR(bx, cl));	// 23160                  shr     bx, cl ;~ 01A2:93A1
loc_193a3:
	// 5889 
cs=0x1a2;eip=0x0093a3; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23163                  lods    word ptr es:[si] ;~ 01A2:93A3
cs=0x1a2;eip=0x0093a5; 	T(ROR(ax, cl));	// 23164                  ror     ax, cl ;~ 01A2:93A5
cs=0x1a2;eip=0x0093a7; 	T(dl = al;);	// 23165                  mov     dl, al ;~ 01A2:93A7
cs=0x1a2;eip=0x0093a9; 	T(AND(al, bh));	// 23166                  and     al, bh ;~ 01A2:93A9
cs=0x1a2;eip=0x0093ab; 	T(AND(dl, bl));	// 23167                  and     dl, bl ;~ 01A2:93AB
cs=0x1a2;eip=0x0093ad; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23168                  or      [di], ax ;~ 01A2:93AD
cs=0x1a2;eip=0x0093af; 	T(ADD(di, 2));	// 23169                  add     di, 2 ;~ 01A2:93AF
cs=0x1a2;eip=0x0093b2; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23170                  lods    word ptr es:[si] ;~ 01A2:93B2
cs=0x1a2;eip=0x0093b4; 	T(ROR(ax, cl));	// 23171                  ror     ax, cl ;~ 01A2:93B4
cs=0x1a2;eip=0x0093b6; 	T(dh = al;);	// 23172                  mov     dh, al ;~ 01A2:93B6
cs=0x1a2;eip=0x0093b8; 	T(AND(al, bh));	// 23173                  and     al, bh ;~ 01A2:93B8
cs=0x1a2;eip=0x0093ba; 	T(AND(dh, bl));	// 23174                  and     dh, bl ;~ 01A2:93BA
cs=0x1a2;eip=0x0093bc; 	T(OR(al, dl));	// 23175                  or      al, dl ;~ 01A2:93BC
cs=0x1a2;eip=0x0093be; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23176                  or      [di], ax ;~ 01A2:93BE
cs=0x1a2;eip=0x0093c0; 	T(ADD(di, 2));	// 23177                  add     di, 2 ;~ 01A2:93C0
cs=0x1a2;eip=0x0093c3; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23178                  lods    word ptr es:[si] ;~ 01A2:93C3
cs=0x1a2;eip=0x0093c5; 	T(ROR(ax, cl));	// 23179                  ror     ax, cl ;~ 01A2:93C5
cs=0x1a2;eip=0x0093c7; 	T(dl = al;);	// 23180                  mov     dl, al ;~ 01A2:93C7
cs=0x1a2;eip=0x0093c9; 	T(AND(al, bh));	// 23181                  and     al, bh ;~ 01A2:93C9
cs=0x1a2;eip=0x0093cb; 	T(AND(dl, bl));	// 23182                  and     dl, bl ;~ 01A2:93CB
cs=0x1a2;eip=0x0093cd; 	T(OR(al, dh));	// 23183                  or      al, dh ;~ 01A2:93CD
cs=0x1a2;eip=0x0093cf; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23184                  or      [di], ax ;~ 01A2:93CF
cs=0x1a2;eip=0x0093d1; 	X(OR(*(raddr(ds,di+2)), dl));	// 23185                  or      [di+2], dl ;~ 01A2:93D1
cs=0x1a2;eip=0x0093d4; 	T(ADD(di, 0x24));	// 23186                  add     di, 24h ; '$' ;~ 01A2:93D4
cs=0x1a2;eip=0x0093d7; 	T(DEC(ch));	// 23187                  dec     ch ;~ 01A2:93D7
cs=0x1a2;eip=0x0093d9; 	J(JNZ(loc_193a3));	// 23188                  jnz     short loc_193A3 ;~ 01A2:93D9
cs=0x1a2;eip=0x0093db; 	X(POP(cx));	// 23189                  pop     cx ;~ 01A2:93DB
cs=0x1a2;eip=0x0093dc; 	T(di = bp;);	// 23190                  mov     di, bp ;~ 01A2:93DC
cs=0x1a2;eip=0x0093de; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 23191                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:93DE
cs=0x1a2;eip=0x0093e3; 	T(dx = 0x3CE;);	// 23192                  mov     dx, 3CEh ;~ 01A2:93E3
cs=0x1a2;eip=0x0093e6; 	T(ax = 0x104;);	// 23193                  mov     ax, 104h ;~ 01A2:93E6
cs=0x1a2;eip=0x0093e9; 	S(OUT(dx, ax));	// 23194                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:93E9
cs=0x1a2;eip=0x0093ea; 	T(dx = 0x3C4;);	// 23196                  mov     dx, 3C4h ;~ 01A2:93EA
cs=0x1a2;eip=0x0093ed; 	T(ax = 0x202;);	// 23197                  mov     ax, 202h ;~ 01A2:93ED
cs=0x1a2;eip=0x0093f0; 	S(OUT(dx, ax));	// 23198                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:93F0
cs=0x1a2;eip=0x0093f1; 	X(PUSH(cx));	// 23200                  push    cx ;~ 01A2:93F1
cs=0x1a2;eip=0x0093f2; 	T(bp = di;);	// 23201                  mov     bp, di ;~ 01A2:93F2
cs=0x1a2;eip=0x0093f4; 	T(bx = 0x0FF00;);	// 23202                  mov     bx, 0FF00h ;~ 01A2:93F4
cs=0x1a2;eip=0x0093f7; 	T(SHR(bx, cl));	// 23203                  shr     bx, cl ;~ 01A2:93F7
loc_193f9:
	// 5890 
cs=0x1a2;eip=0x0093f9; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23206                  lods    word ptr es:[si] ;~ 01A2:93F9
cs=0x1a2;eip=0x0093fb; 	T(ROR(ax, cl));	// 23207                  ror     ax, cl ;~ 01A2:93FB
cs=0x1a2;eip=0x0093fd; 	T(dl = al;);	// 23208                  mov     dl, al ;~ 01A2:93FD
cs=0x1a2;eip=0x0093ff; 	T(AND(al, bh));	// 23209                  and     al, bh ;~ 01A2:93FF
cs=0x1a2;eip=0x009401; 	T(AND(dl, bl));	// 23210                  and     dl, bl ;~ 01A2:9401
cs=0x1a2;eip=0x009403; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23211                  or      [di], ax ;~ 01A2:9403
cs=0x1a2;eip=0x009405; 	T(ADD(di, 2));	// 23212                  add     di, 2 ;~ 01A2:9405
cs=0x1a2;eip=0x009408; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23213                  lods    word ptr es:[si] ;~ 01A2:9408
cs=0x1a2;eip=0x00940a; 	T(ROR(ax, cl));	// 23214                  ror     ax, cl ;~ 01A2:940A
cs=0x1a2;eip=0x00940c; 	T(dh = al;);	// 23215                  mov     dh, al ;~ 01A2:940C
cs=0x1a2;eip=0x00940e; 	T(AND(al, bh));	// 23216                  and     al, bh ;~ 01A2:940E
cs=0x1a2;eip=0x009410; 	T(AND(dh, bl));	// 23217                  and     dh, bl ;~ 01A2:9410
cs=0x1a2;eip=0x009412; 	T(OR(al, dl));	// 23218                  or      al, dl ;~ 01A2:9412
cs=0x1a2;eip=0x009414; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23219                  or      [di], ax ;~ 01A2:9414
cs=0x1a2;eip=0x009416; 	T(ADD(di, 2));	// 23220                  add     di, 2 ;~ 01A2:9416
cs=0x1a2;eip=0x009419; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23221                  lods    word ptr es:[si] ;~ 01A2:9419
cs=0x1a2;eip=0x00941b; 	T(ROR(ax, cl));	// 23222                  ror     ax, cl ;~ 01A2:941B
cs=0x1a2;eip=0x00941d; 	T(dl = al;);	// 23223                  mov     dl, al ;~ 01A2:941D
cs=0x1a2;eip=0x00941f; 	T(AND(al, bh));	// 23224                  and     al, bh ;~ 01A2:941F
cs=0x1a2;eip=0x009421; 	T(AND(dl, bl));	// 23225                  and     dl, bl ;~ 01A2:9421
cs=0x1a2;eip=0x009423; 	T(OR(al, dh));	// 23226                  or      al, dh ;~ 01A2:9423
cs=0x1a2;eip=0x009425; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23227                  or      [di], ax ;~ 01A2:9425
cs=0x1a2;eip=0x009427; 	X(OR(*(raddr(ds,di+2)), dl));	// 23228                  or      [di+2], dl ;~ 01A2:9427
cs=0x1a2;eip=0x00942a; 	T(ADD(di, 0x24));	// 23229                  add     di, 24h ; '$' ;~ 01A2:942A
cs=0x1a2;eip=0x00942d; 	T(DEC(ch));	// 23230                  dec     ch ;~ 01A2:942D
cs=0x1a2;eip=0x00942f; 	J(JNZ(loc_193f9));	// 23231                  jnz     short loc_193F9 ;~ 01A2:942F
cs=0x1a2;eip=0x009431; 	X(POP(cx));	// 23232                  pop     cx ;~ 01A2:9431
cs=0x1a2;eip=0x009432; 	T(di = bp;);	// 23233                  mov     di, bp ;~ 01A2:9432
cs=0x1a2;eip=0x009434; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 23234                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:9434
cs=0x1a2;eip=0x009439; 	T(dx = 0x3CE;);	// 23235                  mov     dx, 3CEh ;~ 01A2:9439
cs=0x1a2;eip=0x00943c; 	T(ax = 0x204;);	// 23236                  mov     ax, 204h ;~ 01A2:943C
cs=0x1a2;eip=0x00943f; 	S(OUT(dx, ax));	// 23237                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:943F
cs=0x1a2;eip=0x009440; 	T(dx = 0x3C4;);	// 23239                  mov     dx, 3C4h ;~ 01A2:9440
cs=0x1a2;eip=0x009443; 	T(ax = 0x402;);	// 23240                  mov     ax, 402h ;~ 01A2:9443
cs=0x1a2;eip=0x009446; 	S(OUT(dx, ax));	// 23241                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:9446
cs=0x1a2;eip=0x009447; 	X(PUSH(cx));	// 23243                  push    cx ;~ 01A2:9447
cs=0x1a2;eip=0x009448; 	T(bp = di;);	// 23244                  mov     bp, di ;~ 01A2:9448
cs=0x1a2;eip=0x00944a; 	T(bx = 0x0FF00;);	// 23245                  mov     bx, 0FF00h ;~ 01A2:944A
cs=0x1a2;eip=0x00944d; 	T(SHR(bx, cl));	// 23246                  shr     bx, cl ;~ 01A2:944D
loc_1944f:
	// 5891 
cs=0x1a2;eip=0x00944f; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23249                  lods    word ptr es:[si] ;~ 01A2:944F
cs=0x1a2;eip=0x009451; 	T(ROR(ax, cl));	// 23250                  ror     ax, cl ;~ 01A2:9451
cs=0x1a2;eip=0x009453; 	T(dl = al;);	// 23251                  mov     dl, al ;~ 01A2:9453
cs=0x1a2;eip=0x009455; 	T(AND(al, bh));	// 23252                  and     al, bh ;~ 01A2:9455
cs=0x1a2;eip=0x009457; 	T(AND(dl, bl));	// 23253                  and     dl, bl ;~ 01A2:9457
cs=0x1a2;eip=0x009459; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23254                  or      [di], ax ;~ 01A2:9459
cs=0x1a2;eip=0x00945b; 	T(ADD(di, 2));	// 23255                  add     di, 2 ;~ 01A2:945B
cs=0x1a2;eip=0x00945e; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23256                  lods    word ptr es:[si] ;~ 01A2:945E
cs=0x1a2;eip=0x009460; 	T(ROR(ax, cl));	// 23257                  ror     ax, cl ;~ 01A2:9460
cs=0x1a2;eip=0x009462; 	T(dh = al;);	// 23258                  mov     dh, al ;~ 01A2:9462
cs=0x1a2;eip=0x009464; 	T(AND(al, bh));	// 23259                  and     al, bh ;~ 01A2:9464
cs=0x1a2;eip=0x009466; 	T(AND(dh, bl));	// 23260                  and     dh, bl ;~ 01A2:9466
cs=0x1a2;eip=0x009468; 	T(OR(al, dl));	// 23261                  or      al, dl ;~ 01A2:9468
cs=0x1a2;eip=0x00946a; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23262                  or      [di], ax ;~ 01A2:946A
cs=0x1a2;eip=0x00946c; 	T(ADD(di, 2));	// 23263                  add     di, 2 ;~ 01A2:946C
cs=0x1a2;eip=0x00946f; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23264                  lods    word ptr es:[si] ;~ 01A2:946F
cs=0x1a2;eip=0x009471; 	T(ROR(ax, cl));	// 23265                  ror     ax, cl ;~ 01A2:9471
cs=0x1a2;eip=0x009473; 	T(dl = al;);	// 23266                  mov     dl, al ;~ 01A2:9473
cs=0x1a2;eip=0x009475; 	T(AND(al, bh));	// 23267                  and     al, bh ;~ 01A2:9475
cs=0x1a2;eip=0x009477; 	T(AND(dl, bl));	// 23268                  and     dl, bl ;~ 01A2:9477
cs=0x1a2;eip=0x009479; 	T(OR(al, dh));	// 23269                  or      al, dh ;~ 01A2:9479
cs=0x1a2;eip=0x00947b; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23270                  or      [di], ax ;~ 01A2:947B
cs=0x1a2;eip=0x00947d; 	X(OR(*(raddr(ds,di+2)), dl));	// 23271                  or      [di+2], dl ;~ 01A2:947D
cs=0x1a2;eip=0x009480; 	T(ADD(di, 0x24));	// 23272                  add     di, 24h ; '$' ;~ 01A2:9480
cs=0x1a2;eip=0x009483; 	T(DEC(ch));	// 23273                  dec     ch ;~ 01A2:9483
cs=0x1a2;eip=0x009485; 	J(JNZ(loc_1944f));	// 23274                  jnz     short loc_1944F ;~ 01A2:9485
cs=0x1a2;eip=0x009487; 	X(POP(cx));	// 23275                  pop     cx ;~ 01A2:9487
cs=0x1a2;eip=0x009488; 	T(di = bp;);	// 23276                  mov     di, bp ;~ 01A2:9488
cs=0x1a2;eip=0x00948a; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 23277                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:948A
cs=0x1a2;eip=0x00948f; 	T(dx = 0x3CE;);	// 23278                  mov     dx, 3CEh ;~ 01A2:948F
cs=0x1a2;eip=0x009492; 	T(ax = 0x304;);	// 23279                  mov     ax, 304h ;~ 01A2:9492
cs=0x1a2;eip=0x009495; 	S(OUT(dx, ax));	// 23280                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9495
cs=0x1a2;eip=0x009496; 	T(dx = 0x3C4;);	// 23282                  mov     dx, 3C4h ;~ 01A2:9496
cs=0x1a2;eip=0x009499; 	T(ax = 0x802;);	// 23283                  mov     ax, 802h ;~ 01A2:9499
cs=0x1a2;eip=0x00949c; 	S(OUT(dx, ax));	// 23284                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:949C
cs=0x1a2;eip=0x00949d; 	X(PUSH(cx));	// 23286                  push    cx ;~ 01A2:949D
cs=0x1a2;eip=0x00949e; 	T(bp = di;);	// 23287                  mov     bp, di ;~ 01A2:949E
cs=0x1a2;eip=0x0094a0; 	T(bx = 0x0FF00;);	// 23288                  mov     bx, 0FF00h ;~ 01A2:94A0
cs=0x1a2;eip=0x0094a3; 	T(SHR(bx, cl));	// 23289                  shr     bx, cl ;~ 01A2:94A3
loc_194a5:
	// 5892 
cs=0x1a2;eip=0x0094a5; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23292                  lods    word ptr es:[si] ;~ 01A2:94A5
cs=0x1a2;eip=0x0094a7; 	T(ROR(ax, cl));	// 23293                  ror     ax, cl ;~ 01A2:94A7
cs=0x1a2;eip=0x0094a9; 	T(dl = al;);	// 23294                  mov     dl, al ;~ 01A2:94A9
cs=0x1a2;eip=0x0094ab; 	T(AND(al, bh));	// 23295                  and     al, bh ;~ 01A2:94AB
cs=0x1a2;eip=0x0094ad; 	T(AND(dl, bl));	// 23296                  and     dl, bl ;~ 01A2:94AD
cs=0x1a2;eip=0x0094af; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23297                  or      [di], ax ;~ 01A2:94AF
cs=0x1a2;eip=0x0094b1; 	T(ADD(di, 2));	// 23298                  add     di, 2 ;~ 01A2:94B1
cs=0x1a2;eip=0x0094b4; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23299                  lods    word ptr es:[si] ;~ 01A2:94B4
cs=0x1a2;eip=0x0094b6; 	T(ROR(ax, cl));	// 23300                  ror     ax, cl ;~ 01A2:94B6
cs=0x1a2;eip=0x0094b8; 	T(dh = al;);	// 23301                  mov     dh, al ;~ 01A2:94B8
cs=0x1a2;eip=0x0094ba; 	T(AND(al, bh));	// 23302                  and     al, bh ;~ 01A2:94BA
cs=0x1a2;eip=0x0094bc; 	T(AND(dh, bl));	// 23303                  and     dh, bl ;~ 01A2:94BC
cs=0x1a2;eip=0x0094be; 	T(OR(al, dl));	// 23304                  or      al, dl ;~ 01A2:94BE
cs=0x1a2;eip=0x0094c0; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23305                  or      [di], ax ;~ 01A2:94C0
cs=0x1a2;eip=0x0094c2; 	T(ADD(di, 2));	// 23306                  add     di, 2 ;~ 01A2:94C2
cs=0x1a2;eip=0x0094c5; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23307                  lods    word ptr es:[si] ;~ 01A2:94C5
cs=0x1a2;eip=0x0094c7; 	T(ROR(ax, cl));	// 23308                  ror     ax, cl ;~ 01A2:94C7
cs=0x1a2;eip=0x0094c9; 	T(dl = al;);	// 23309                  mov     dl, al ;~ 01A2:94C9
cs=0x1a2;eip=0x0094cb; 	T(AND(al, bh));	// 23310                  and     al, bh ;~ 01A2:94CB
cs=0x1a2;eip=0x0094cd; 	T(AND(dl, bl));	// 23311                  and     dl, bl ;~ 01A2:94CD
cs=0x1a2;eip=0x0094cf; 	T(OR(al, dh));	// 23312                  or      al, dh ;~ 01A2:94CF
cs=0x1a2;eip=0x0094d1; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23313                  or      [di], ax ;~ 01A2:94D1
cs=0x1a2;eip=0x0094d3; 	X(OR(*(raddr(ds,di+2)), dl));	// 23314                  or      [di+2], dl ;~ 01A2:94D3
cs=0x1a2;eip=0x0094d6; 	T(ADD(di, 0x24));	// 23315                  add     di, 24h ; '$' ;~ 01A2:94D6
cs=0x1a2;eip=0x0094d9; 	T(DEC(ch));	// 23316                  dec     ch ;~ 01A2:94D9
cs=0x1a2;eip=0x0094db; 	J(JNZ(loc_194a5));	// 23317                  jnz     short loc_194A5 ;~ 01A2:94DB
cs=0x1a2;eip=0x0094dd; 	X(POP(cx));	// 23318                  pop     cx ;~ 01A2:94DD
cs=0x1a2;eip=0x0094de; 	T(di = bp;);	// 23319                  mov     di, bp ;~ 01A2:94DE
cs=0x1a2;eip=0x0094e0; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 23320                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:94E0
cs=0x1a2;eip=0x0094e5; 	X(POP(ds));	// 23321                  pop     ds ;~ 01A2:94E5
cs=0x1a2;eip=0x0094e6; 	J(RETN(0));	// 23323                  retn ;~ 01A2:94E6
loc_194e7:
	// 5893 
cs=0x1a2;eip=0x0094e7; 	T(dx = 0x3C4;);	// 23328                  mov     dx, 3C4h ;~ 01A2:94E7
cs=0x1a2;eip=0x0094ea; 	T(ax = 0x0F02;);	// 23329                  mov     ax, 0F02h ;~ 01A2:94EA
cs=0x1a2;eip=0x0094ed; 	S(OUT(dx, ax));	// 23330                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:94ED
cs=0x1a2;eip=0x0094ee; 	T(dx = 0x3CE;);	// 23332                  mov     dx, 3CEh ;~ 01A2:94EE
cs=0x1a2;eip=0x0094f1; 	T(ax = 0x805;);	// 23333                  mov     ax, 805h ;~ 01A2:94F1
cs=0x1a2;eip=0x0094f4; 	S(OUT(dx, ax));	// 23334                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:94F4
cs=0x1a2;eip=0x0094f5; 	T(ax = 0x803;);	// 23336                  mov     ax, 803h ;~ 01A2:94F5
cs=0x1a2;eip=0x0094f8; 	S(OUT(dx, ax));	// 23337                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:94F8
cs=0x1a2;eip=0x0094f9; 	T(ax = 7;);	// 23339                  mov     ax, 7 ;~ 01A2:94F9
cs=0x1a2;eip=0x0094fc; 	S(OUT(dx, ax));	// 23340                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:94FC
cs=0x1a2;eip=0x0094fd; 	T(bp = di;);	// 23343                  mov     bp, di ;~ 01A2:94FD
cs=0x1a2;eip=0x0094ff; 	T(cl = ch;);	// 23344                  mov     cl, ch ;~ 01A2:94FF
loc_19501:
	// 5894 
cs=0x1a2;eip=0x009501; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23347                  lods    word ptr es:[si] ;~ 01A2:9501
cs=0x1a2;eip=0x009503; 	T(NOT(ax));	// 23348                  not     ax ;~ 01A2:9503
cs=0x1a2;eip=0x009505; 	X(AND(*(raddr(ds,di)), al));	// 23349                  and     [di], al ;~ 01A2:9505
cs=0x1a2;eip=0x009507; 	X(AND(*(raddr(ds,di+1)), ah));	// 23350                  and     [di+1], ah ;~ 01A2:9507
cs=0x1a2;eip=0x00950a; 	T(ADD(di, 2));	// 23351                  add     di, 2 ;~ 01A2:950A
cs=0x1a2;eip=0x00950d; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23352                  lods    word ptr es:[si] ;~ 01A2:950D
cs=0x1a2;eip=0x00950f; 	T(NOT(ax));	// 23353                  not     ax ;~ 01A2:950F
cs=0x1a2;eip=0x009511; 	X(AND(*(raddr(ds,di)), al));	// 23354                  and     [di], al ;~ 01A2:9511
cs=0x1a2;eip=0x009513; 	X(AND(*(raddr(ds,di+1)), ah));	// 23355                  and     [di+1], ah ;~ 01A2:9513
cs=0x1a2;eip=0x009516; 	T(ADD(di, 2));	// 23356                  add     di, 2 ;~ 01A2:9516
cs=0x1a2;eip=0x009519; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23357                  lods    word ptr es:[si] ;~ 01A2:9519
cs=0x1a2;eip=0x00951b; 	T(NOT(ax));	// 23358                  not     ax ;~ 01A2:951B
cs=0x1a2;eip=0x00951d; 	X(AND(*(raddr(ds,di)), al));	// 23359                  and     [di], al ;~ 01A2:951D
cs=0x1a2;eip=0x00951f; 	X(AND(*(raddr(ds,di+1)), ah));	// 23360                  and     [di+1], ah ;~ 01A2:951F
cs=0x1a2;eip=0x009522; 	T(ADD(di, 0x24));	// 23361                  add     di, 24h ; '$' ;~ 01A2:9522
cs=0x1a2;eip=0x009525; 	T(DEC(cl));	// 23362                  dec     cl ;~ 01A2:9525
cs=0x1a2;eip=0x009527; 	J(JNZ(loc_19501));	// 23363                  jnz     short loc_19501 ;~ 01A2:9527
cs=0x1a2;eip=0x009529; 	T(di = bp;);	// 23364                  mov     di, bp ;~ 01A2:9529
cs=0x1a2;eip=0x00952b; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 23365                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:952B
cs=0x1a2;eip=0x009530; 	T(dx = 0x3C4;);	// 23366                  mov     dx, 3C4h ;~ 01A2:9530
cs=0x1a2;eip=0x009533; 	T(ax = 0x102;);	// 23367                  mov     ax, 102h ;~ 01A2:9533
cs=0x1a2;eip=0x009536; 	S(OUT(dx, ax));	// 23368                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:9536
cs=0x1a2;eip=0x009537; 	T(dx = 0x3CE;);	// 23370                  mov     dx, 3CEh ;~ 01A2:9537
cs=0x1a2;eip=0x00953a; 	T(ax = 5;);	// 23371                  mov     ax, 5 ;~ 01A2:953A
cs=0x1a2;eip=0x00953d; 	S(OUT(dx, ax));	// 23372                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:953D
cs=0x1a2;eip=0x00953e; 	T(ax = 3;);	// 23379                  mov     ax, 3 ;~ 01A2:953E
cs=0x1a2;eip=0x009541; 	S(OUT(dx, ax));	// 23380                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9541
cs=0x1a2;eip=0x009542; 	T(ax = 4;);	// 23385                  mov     ax, 4 ;~ 01A2:9542
cs=0x1a2;eip=0x009545; 	S(OUT(dx, ax));	// 23386                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9545
cs=0x1a2;eip=0x009546; 	T(bp = di;);	// 23389                  mov     bp, di ;~ 01A2:9546
cs=0x1a2;eip=0x009548; 	T(cl = ch;);	// 23390                  mov     cl, ch ;~ 01A2:9548
loc_1954a:
	// 5895 
cs=0x1a2;eip=0x00954a; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23393                  lods    word ptr es:[si] ;~ 01A2:954A
cs=0x1a2;eip=0x00954c; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23394                  or      [di], ax ;~ 01A2:954C
cs=0x1a2;eip=0x00954e; 	T(ADD(di, 2));	// 23395                  add     di, 2 ;~ 01A2:954E
cs=0x1a2;eip=0x009551; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23396                  lods    word ptr es:[si] ;~ 01A2:9551
cs=0x1a2;eip=0x009553; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23397                  or      [di], ax ;~ 01A2:9553
cs=0x1a2;eip=0x009555; 	T(ADD(di, 2));	// 23398                  add     di, 2 ;~ 01A2:9555
cs=0x1a2;eip=0x009558; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23399                  lods    word ptr es:[si] ;~ 01A2:9558
cs=0x1a2;eip=0x00955a; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23400                  or      [di], ax ;~ 01A2:955A
cs=0x1a2;eip=0x00955c; 	T(ADD(di, 0x24));	// 23401                  add     di, 24h ; '$' ;~ 01A2:955C
cs=0x1a2;eip=0x00955f; 	T(DEC(cl));	// 23402                  dec     cl ;~ 01A2:955F
cs=0x1a2;eip=0x009561; 	J(JNZ(loc_1954a));	// 23403                  jnz     short loc_1954A ;~ 01A2:9561
cs=0x1a2;eip=0x009563; 	T(di = bp;);	// 23404                  mov     di, bp ;~ 01A2:9563
cs=0x1a2;eip=0x009565; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 23405                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:9565
cs=0x1a2;eip=0x00956a; 	T(dx = 0x3CE;);	// 23406                  mov     dx, 3CEh ;~ 01A2:956A
cs=0x1a2;eip=0x00956d; 	T(ax = 0x104;);	// 23407                  mov     ax, 104h ;~ 01A2:956D
cs=0x1a2;eip=0x009570; 	S(OUT(dx, ax));	// 23408                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9570
cs=0x1a2;eip=0x009571; 	T(dx = 0x3C4;);	// 23410                  mov     dx, 3C4h ;~ 01A2:9571
cs=0x1a2;eip=0x009574; 	T(ax = 0x202;);	// 23411                  mov     ax, 202h ;~ 01A2:9574
cs=0x1a2;eip=0x009577; 	S(OUT(dx, ax));	// 23412                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:9577
cs=0x1a2;eip=0x009578; 	T(bp = di;);	// 23414                  mov     bp, di ;~ 01A2:9578
cs=0x1a2;eip=0x00957a; 	T(cl = ch;);	// 23415                  mov     cl, ch ;~ 01A2:957A
loc_1957c:
	// 5896 
cs=0x1a2;eip=0x00957c; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23418                  lods    word ptr es:[si] ;~ 01A2:957C
cs=0x1a2;eip=0x00957e; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23419                  or      [di], ax ;~ 01A2:957E
cs=0x1a2;eip=0x009580; 	T(ADD(di, 2));	// 23420                  add     di, 2 ;~ 01A2:9580
cs=0x1a2;eip=0x009583; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23421                  lods    word ptr es:[si] ;~ 01A2:9583
cs=0x1a2;eip=0x009585; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23422                  or      [di], ax ;~ 01A2:9585
cs=0x1a2;eip=0x009587; 	T(ADD(di, 2));	// 23423                  add     di, 2 ;~ 01A2:9587
cs=0x1a2;eip=0x00958a; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23424                  lods    word ptr es:[si] ;~ 01A2:958A
cs=0x1a2;eip=0x00958c; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23425                  or      [di], ax ;~ 01A2:958C
cs=0x1a2;eip=0x00958e; 	T(ADD(di, 0x24));	// 23426                  add     di, 24h ; '$' ;~ 01A2:958E
cs=0x1a2;eip=0x009591; 	T(DEC(cl));	// 23427                  dec     cl ;~ 01A2:9591
cs=0x1a2;eip=0x009593; 	J(JNZ(loc_1957c));	// 23428                  jnz     short loc_1957C ;~ 01A2:9593
cs=0x1a2;eip=0x009595; 	T(di = bp;);	// 23429                  mov     di, bp ;~ 01A2:9595
cs=0x1a2;eip=0x009597; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 23430                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:9597
cs=0x1a2;eip=0x00959c; 	T(dx = 0x3CE;);	// 23431                  mov     dx, 3CEh ;~ 01A2:959C
cs=0x1a2;eip=0x00959f; 	T(ax = 0x204;);	// 23432                  mov     ax, 204h ;~ 01A2:959F
cs=0x1a2;eip=0x0095a2; 	S(OUT(dx, ax));	// 23433                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:95A2
cs=0x1a2;eip=0x0095a3; 	T(dx = 0x3C4;);	// 23435                  mov     dx, 3C4h ;~ 01A2:95A3
cs=0x1a2;eip=0x0095a6; 	T(ax = 0x402;);	// 23436                  mov     ax, 402h ;~ 01A2:95A6
cs=0x1a2;eip=0x0095a9; 	S(OUT(dx, ax));	// 23437                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:95A9
cs=0x1a2;eip=0x0095aa; 	T(bp = di;);	// 23439                  mov     bp, di ;~ 01A2:95AA
cs=0x1a2;eip=0x0095ac; 	T(cl = ch;);	// 23440                  mov     cl, ch ;~ 01A2:95AC
loc_195ae:
	// 5897 
cs=0x1a2;eip=0x0095ae; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23443                  lods    word ptr es:[si] ;~ 01A2:95AE
cs=0x1a2;eip=0x0095b0; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23444                  or      [di], ax ;~ 01A2:95B0
cs=0x1a2;eip=0x0095b2; 	T(ADD(di, 2));	// 23445                  add     di, 2 ;~ 01A2:95B2
cs=0x1a2;eip=0x0095b5; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23446                  lods    word ptr es:[si] ;~ 01A2:95B5
cs=0x1a2;eip=0x0095b7; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23447                  or      [di], ax ;~ 01A2:95B7
cs=0x1a2;eip=0x0095b9; 	T(ADD(di, 2));	// 23448                  add     di, 2 ;~ 01A2:95B9
cs=0x1a2;eip=0x0095bc; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23449                  lods    word ptr es:[si] ;~ 01A2:95BC
cs=0x1a2;eip=0x0095be; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23450                  or      [di], ax ;~ 01A2:95BE
cs=0x1a2;eip=0x0095c0; 	T(ADD(di, 0x24));	// 23451                  add     di, 24h ; '$' ;~ 01A2:95C0
cs=0x1a2;eip=0x0095c3; 	T(DEC(cl));	// 23452                  dec     cl ;~ 01A2:95C3
cs=0x1a2;eip=0x0095c5; 	J(JNZ(loc_195ae));	// 23453                  jnz     short loc_195AE ;~ 01A2:95C5
cs=0x1a2;eip=0x0095c7; 	T(di = bp;);	// 23454                  mov     di, bp ;~ 01A2:95C7
cs=0x1a2;eip=0x0095c9; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 23455                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:95C9
cs=0x1a2;eip=0x0095ce; 	T(dx = 0x3CE;);	// 23456                  mov     dx, 3CEh ;~ 01A2:95CE
cs=0x1a2;eip=0x0095d1; 	T(ax = 0x304;);	// 23457                  mov     ax, 304h ;~ 01A2:95D1
cs=0x1a2;eip=0x0095d4; 	S(OUT(dx, ax));	// 23458                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:95D4
cs=0x1a2;eip=0x0095d5; 	T(dx = 0x3C4;);	// 23460                  mov     dx, 3C4h ;~ 01A2:95D5
cs=0x1a2;eip=0x0095d8; 	T(ax = 0x802;);	// 23461                  mov     ax, 802h ;~ 01A2:95D8
cs=0x1a2;eip=0x0095db; 	S(OUT(dx, ax));	// 23462                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:95DB
cs=0x1a2;eip=0x0095dc; 	T(bp = di;);	// 23464                  mov     bp, di ;~ 01A2:95DC
cs=0x1a2;eip=0x0095de; 	T(cl = ch;);	// 23465                  mov     cl, ch ;~ 01A2:95DE
loc_195e0:
	// 5898 
cs=0x1a2;eip=0x0095e0; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23468                  lods    word ptr es:[si] ;~ 01A2:95E0
cs=0x1a2;eip=0x0095e2; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23469                  or      [di], ax ;~ 01A2:95E2
cs=0x1a2;eip=0x0095e4; 	T(ADD(di, 2));	// 23470                  add     di, 2 ;~ 01A2:95E4
cs=0x1a2;eip=0x0095e7; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23471                  lods    word ptr es:[si] ;~ 01A2:95E7
cs=0x1a2;eip=0x0095e9; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23472                  or      [di], ax ;~ 01A2:95E9
cs=0x1a2;eip=0x0095eb; 	T(ADD(di, 2));	// 23473                  add     di, 2 ;~ 01A2:95EB
cs=0x1a2;eip=0x0095ee; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23474                  lods    word ptr es:[si] ;~ 01A2:95EE
cs=0x1a2;eip=0x0095f0; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23475                  or      [di], ax ;~ 01A2:95F0
cs=0x1a2;eip=0x0095f2; 	T(ADD(di, 0x24));	// 23476                  add     di, 24h ; '$' ;~ 01A2:95F2
cs=0x1a2;eip=0x0095f5; 	T(DEC(cl));	// 23477                  dec     cl ;~ 01A2:95F5
cs=0x1a2;eip=0x0095f7; 	J(JNZ(loc_195e0));	// 23478                  jnz     short loc_195E0 ;~ 01A2:95F7
cs=0x1a2;eip=0x0095f9; 	T(di = bp;);	// 23479                  mov     di, bp ;~ 01A2:95F9
cs=0x1a2;eip=0x0095fb; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 23480                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:95FB
cs=0x1a2;eip=0x009600; 	X(POP(ds));	// 23481                  pop     ds ;~ 01A2:9600
cs=0x1a2;eip=0x009601; 	J(RETN(0));	// 23483                  retn ;~ 01A2:9601

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1930e: 	goto loc_1930e;
        case m2c::kloc_19316: 	goto loc_19316;
        case m2c::kloc_19334: 	goto loc_19334;
        case m2c::kloc_193a3: 	goto loc_193a3;
        case m2c::kloc_193f9: 	goto loc_193f9;
        case m2c::kloc_1944f: 	goto loc_1944f;
        case m2c::kloc_194a5: 	goto loc_194a5;
        case m2c::kloc_194e7: 	goto loc_194e7;
        case m2c::kloc_19501: 	goto loc_19501;
        case m2c::kloc_1954a: 	goto loc_1954a;
        case m2c::kloc_1957c: 	goto loc_1957c;
        case m2c::kloc_195ae: 	goto loc_195ae;
        case m2c::kloc_195e0: 	goto loc_195e0;
        case m2c::ksub_192ff: 	goto sub_192ff;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_19602(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_19602:
    _begin:
cs=0x1a2;eip=0x009602; 	X(PUSH(ds));	// 23492                  push    ds ;~ 01A2:9602
cs=0x1a2;eip=0x009603; 	X(byte_6fb92 = dl;);	// 23493                  mov     ss:byte_6FB92, dl ;~ 01A2:9603
cs=0x1a2;eip=0x009608; 	T(XOR(dh, dh));	// 23494                  xor     dh, dh ;~ 01A2:9608
cs=0x1a2;eip=0x00960a; 	T(SHL(dx, 1));	// 23495                  shl     dx, 1 ;~ 01A2:960A
cs=0x1a2;eip=0x00960c; 	T(ax = 0x28;);	// 23496                  mov     ax, 28h ; '(' ;~ 01A2:960C
cs=0x1a2;eip=0x00960f; 	T(SUB(ax, dx));	// 23497                  sub     ax, dx ;~ 01A2:960F
cs=0x1a2;eip=0x009611; 	X(*(dw*)(&unk_6fb94) = ax;);	// 23498                  mov     word ptr ss:unk_6FB94, ax ;~ 01A2:9611
cs=0x1a2;eip=0x009615; 	T(es = *(dw*)(((db*)&off_1f8c8)+2););	// 23499                  mov     es, word ptr ds:off_1F8C8+2 ;~ 01A2:9615
cs=0x1a2;eip=0x009619; 	T(ds = *(dw*)(((db*)&seg_1f171)+1););	// 23501                  mov     ds, seg_1F171+1 ;~ 01A2:9619
cs=0x1a2;eip=0x00961d; 	T(TEST(cl, 8));	// 23503                  test    cl, 8 ;~ 01A2:961D
cs=0x1a2;eip=0x009620; 	J(JZ(loc_19623));	// 23504                  jz      short loc_19623 ;~ 01A2:9620
cs=0x1a2;eip=0x009622; 	T(INC(di));	// 23505                  inc     di ;~ 01A2:9622
loc_19623:
	// 5899 
cs=0x1a2;eip=0x009623; 	T(AND(cl, 7));	// 23508                  and     cl, 7 ;~ 01A2:9623
cs=0x1a2;eip=0x009626; 	J(JNZ(loc_1962b));	// 23509                  jnz     short loc_1962B ;~ 01A2:9626
cs=0x1a2;eip=0x009628; 	J(JMP(loc_19881));	// 23510                  jmp     loc_19881 ;~ 01A2:9628
loc_1962b:
	// 5900 
cs=0x1a2;eip=0x00962b; 	T(dx = 0x3C4;);	// 23514                  mov     dx, 3C4h ;~ 01A2:962B
cs=0x1a2;eip=0x00962e; 	T(ax = 0x0F02;);	// 23515                  mov     ax, 0F02h ;~ 01A2:962E
cs=0x1a2;eip=0x009631; 	S(OUT(dx, ax));	// 23516                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:9631
cs=0x1a2;eip=0x009632; 	T(dx = 0x3CE;);	// 23518                  mov     dx, 3CEh ;~ 01A2:9632
cs=0x1a2;eip=0x009635; 	T(ax = 0x805;);	// 23519                  mov     ax, 805h ;~ 01A2:9635
cs=0x1a2;eip=0x009638; 	S(OUT(dx, ax));	// 23520                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9638
cs=0x1a2;eip=0x009639; 	T(ax = 0x803;);	// 23522                  mov     ax, 803h ;~ 01A2:9639
cs=0x1a2;eip=0x00963c; 	S(OUT(dx, ax));	// 23523                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:963C
cs=0x1a2;eip=0x00963d; 	T(ax = 7;);	// 23525                  mov     ax, 7 ;~ 01A2:963D
cs=0x1a2;eip=0x009640; 	S(OUT(dx, ax));	// 23526                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9640
cs=0x1a2;eip=0x009641; 	T(bp = di;);	// 23529                  mov     bp, di ;~ 01A2:9641
cs=0x1a2;eip=0x009643; 	T(bl = ch;);	// 23530                  mov     bl, ch ;~ 01A2:9643
loc_19645:
	// 5901 
cs=0x1a2;eip=0x009645; 	T(XOR(bh, bh));	// 23533                  xor     bh, bh ;~ 01A2:9645
cs=0x1a2;eip=0x009647; 	T(al = byte_6fb92;);	// 23534                  mov     al, ss:byte_6FB92 ;~ 01A2:9647
cs=0x1a2;eip=0x00964b; 	X(byte_6fb93 = al;);	// 23535                  mov     ss:byte_6FB93, al ;~ 01A2:964B
loc_1964f:
	// 5902 
cs=0x1a2;eip=0x00964f; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23538                  lods    word ptr es:[si] ;~ 01A2:964F
cs=0x1a2;eip=0x009651; 	T(XCHG(al, ah));	// 23539                  xchg    al, ah ;~ 01A2:9651
cs=0x1a2;eip=0x009653; 	T(XOR(dl, dl));	// 23540                  xor     dl, dl ;~ 01A2:9653
cs=0x1a2;eip=0x009655; 	T(dh = cl;);	// 23541                  mov     dh, cl ;~ 01A2:9655
loc_19657:
	// 5903 
cs=0x1a2;eip=0x009657; 	T(SHR(ax, 1));	// 23544                  shr     ax, 1 ;~ 01A2:9657
cs=0x1a2;eip=0x009659; 	T(RCR(dl, 1));	// 23545                  rcr     dl, 1 ;~ 01A2:9659
cs=0x1a2;eip=0x00965b; 	T(DEC(dh));	// 23546                  dec     dh ;~ 01A2:965B
cs=0x1a2;eip=0x00965d; 	J(JNZ(loc_19657));	// 23547                  jnz     short loc_19657 ;~ 01A2:965D
cs=0x1a2;eip=0x00965f; 	T(OR(ah, bh));	// 23548                  or      ah, bh ;~ 01A2:965F
cs=0x1a2;eip=0x009661; 	T(NOT(ax));	// 23549                  not     ax ;~ 01A2:9661
cs=0x1a2;eip=0x009663; 	X(AND(*(raddr(ds,di)), ah));	// 23550                  and     [di], ah ;~ 01A2:9663
cs=0x1a2;eip=0x009665; 	X(AND(*(raddr(ds,di+1)), al));	// 23551                  and     [di+1], al ;~ 01A2:9665
cs=0x1a2;eip=0x009668; 	T(ADD(di, 2));	// 23552                  add     di, 2 ;~ 01A2:9668
cs=0x1a2;eip=0x00966b; 	X(DEC(byte_6fb93));	// 23553                  dec     ss:byte_6FB93 ;~ 01A2:966B
cs=0x1a2;eip=0x009670; 	J(JNZ(loc_19678));	// 23554                  jnz     short loc_19678 ;~ 01A2:9670
cs=0x1a2;eip=0x009672; 	T(NOT(dl));	// 23555                  not     dl ;~ 01A2:9672
cs=0x1a2;eip=0x009674; 	X(AND(*(raddr(ds,di)), dl));	// 23556                  and     [di], dl ;~ 01A2:9674
cs=0x1a2;eip=0x009676; 	J(JMP(loc_1969f));	// 23557                  jmp     short loc_1969F ;~ 01A2:9676
loc_19678:
	// 5904 
cs=0x1a2;eip=0x009678; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23561                  lods    word ptr es:[si] ;~ 01A2:9678
cs=0x1a2;eip=0x00967a; 	T(XCHG(al, ah));	// 23562                  xchg    al, ah ;~ 01A2:967A
cs=0x1a2;eip=0x00967c; 	T(XOR(bh, bh));	// 23563                  xor     bh, bh ;~ 01A2:967C
cs=0x1a2;eip=0x00967e; 	T(dh = cl;);	// 23564                  mov     dh, cl ;~ 01A2:967E
loc_19680:
	// 5905 
cs=0x1a2;eip=0x009680; 	T(SHR(ax, 1));	// 23567                  shr     ax, 1 ;~ 01A2:9680
cs=0x1a2;eip=0x009682; 	T(RCR(bh, 1));	// 23568                  rcr     bh, 1 ;~ 01A2:9682
cs=0x1a2;eip=0x009684; 	T(DEC(dh));	// 23569                  dec     dh ;~ 01A2:9684
cs=0x1a2;eip=0x009686; 	J(JNZ(loc_19680));	// 23570                  jnz     short loc_19680 ;~ 01A2:9686
cs=0x1a2;eip=0x009688; 	T(OR(ah, dl));	// 23571                  or      ah, dl ;~ 01A2:9688
cs=0x1a2;eip=0x00968a; 	T(NOT(ax));	// 23572                  not     ax ;~ 01A2:968A
cs=0x1a2;eip=0x00968c; 	X(AND(*(raddr(ds,di)), ah));	// 23573                  and     [di], ah ;~ 01A2:968C
cs=0x1a2;eip=0x00968e; 	X(AND(*(raddr(ds,di+1)), al));	// 23574                  and     [di+1], al ;~ 01A2:968E
cs=0x1a2;eip=0x009691; 	T(ADD(di, 2));	// 23575                  add     di, 2 ;~ 01A2:9691
cs=0x1a2;eip=0x009694; 	X(DEC(byte_6fb93));	// 23576                  dec     ss:byte_6FB93 ;~ 01A2:9694
cs=0x1a2;eip=0x009699; 	J(JNZ(loc_1964f));	// 23577                  jnz     short loc_1964F ;~ 01A2:9699
cs=0x1a2;eip=0x00969b; 	T(NOT(bh));	// 23578                  not     bh ;~ 01A2:969B
cs=0x1a2;eip=0x00969d; 	X(AND(*(raddr(ds,di)), bh));	// 23579                  and     [di], bh ;~ 01A2:969D
loc_1969f:
	// 5906 
cs=0x1a2;eip=0x00969f; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 23582                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:969F
cs=0x1a2;eip=0x0096a4; 	T(DEC(bl));	// 23583                  dec     bl ;~ 01A2:96A4
cs=0x1a2;eip=0x0096a6; 	J(JNZ(loc_19645));	// 23584                  jnz     short loc_19645 ;~ 01A2:96A6
cs=0x1a2;eip=0x0096a8; 	T(di = bp;);	// 23585                  mov     di, bp ;~ 01A2:96A8
cs=0x1a2;eip=0x0096aa; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 23586                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:96AA
cs=0x1a2;eip=0x0096af; 	T(dx = 0x3C4;);	// 23587                  mov     dx, 3C4h ;~ 01A2:96AF
cs=0x1a2;eip=0x0096b2; 	T(ax = 0x102;);	// 23588                  mov     ax, 102h ;~ 01A2:96B2
cs=0x1a2;eip=0x0096b5; 	S(OUT(dx, ax));	// 23589                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:96B5
cs=0x1a2;eip=0x0096b6; 	T(dx = 0x3CE;);	// 23591                  mov     dx, 3CEh ;~ 01A2:96B6
cs=0x1a2;eip=0x0096b9; 	T(ax = 5;);	// 23592                  mov     ax, 5 ;~ 01A2:96B9
cs=0x1a2;eip=0x0096bc; 	S(OUT(dx, ax));	// 23593                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:96BC
cs=0x1a2;eip=0x0096bd; 	T(ax = 3;);	// 23600                  mov     ax, 3 ;~ 01A2:96BD
cs=0x1a2;eip=0x0096c0; 	S(OUT(dx, ax));	// 23601                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:96C0
cs=0x1a2;eip=0x0096c1; 	T(ax = 4;);	// 23606                  mov     ax, 4 ;~ 01A2:96C1
cs=0x1a2;eip=0x0096c4; 	S(OUT(dx, ax));	// 23607                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:96C4
cs=0x1a2;eip=0x0096c5; 	T(bp = di;);	// 23610                  mov     bp, di ;~ 01A2:96C5
cs=0x1a2;eip=0x0096c7; 	T(bl = ch;);	// 23611                  mov     bl, ch ;~ 01A2:96C7
loc_196c9:
	// 5907 
cs=0x1a2;eip=0x0096c9; 	T(XOR(bh, bh));	// 23614                  xor     bh, bh ;~ 01A2:96C9
cs=0x1a2;eip=0x0096cb; 	T(al = byte_6fb92;);	// 23615                  mov     al, ss:byte_6FB92 ;~ 01A2:96CB
cs=0x1a2;eip=0x0096cf; 	X(byte_6fb93 = al;);	// 23616                  mov     ss:byte_6FB93, al ;~ 01A2:96CF
loc_196d3:
	// 5908 
cs=0x1a2;eip=0x0096d3; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23619                  lods    word ptr es:[si] ;~ 01A2:96D3
cs=0x1a2;eip=0x0096d5; 	T(XCHG(al, ah));	// 23620                  xchg    al, ah ;~ 01A2:96D5
cs=0x1a2;eip=0x0096d7; 	T(XOR(dl, dl));	// 23621                  xor     dl, dl ;~ 01A2:96D7
cs=0x1a2;eip=0x0096d9; 	T(dh = cl;);	// 23622                  mov     dh, cl ;~ 01A2:96D9
loc_196db:
	// 5909 
cs=0x1a2;eip=0x0096db; 	T(SHR(ax, 1));	// 23625                  shr     ax, 1 ;~ 01A2:96DB
cs=0x1a2;eip=0x0096dd; 	T(RCR(dl, 1));	// 23626                  rcr     dl, 1 ;~ 01A2:96DD
cs=0x1a2;eip=0x0096df; 	T(DEC(dh));	// 23627                  dec     dh ;~ 01A2:96DF
cs=0x1a2;eip=0x0096e1; 	J(JNZ(loc_196db));	// 23628                  jnz     short loc_196DB ;~ 01A2:96E1
cs=0x1a2;eip=0x0096e3; 	T(OR(ah, bh));	// 23629                  or      ah, bh ;~ 01A2:96E3
cs=0x1a2;eip=0x0096e5; 	T(XCHG(al, ah));	// 23630                  xchg    al, ah ;~ 01A2:96E5
cs=0x1a2;eip=0x0096e7; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23631                  or      [di], ax ;~ 01A2:96E7
cs=0x1a2;eip=0x0096e9; 	T(ADD(di, 2));	// 23632                  add     di, 2 ;~ 01A2:96E9
cs=0x1a2;eip=0x0096ec; 	X(DEC(byte_6fb93));	// 23633                  dec     ss:byte_6FB93 ;~ 01A2:96EC
cs=0x1a2;eip=0x0096f1; 	J(JNZ(loc_196f7));	// 23634                  jnz     short loc_196F7 ;~ 01A2:96F1
cs=0x1a2;eip=0x0096f3; 	X(OR(*(raddr(ds,di)), dl));	// 23635                  or      [di], dl ;~ 01A2:96F3
cs=0x1a2;eip=0x0096f5; 	J(JMP(loc_19719));	// 23636                  jmp     short loc_19719 ;~ 01A2:96F5
loc_196f7:
	// 5910 
cs=0x1a2;eip=0x0096f7; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23640                  lods    word ptr es:[si] ;~ 01A2:96F7
cs=0x1a2;eip=0x0096f9; 	T(XCHG(al, ah));	// 23641                  xchg    al, ah ;~ 01A2:96F9
cs=0x1a2;eip=0x0096fb; 	T(XOR(bh, bh));	// 23642                  xor     bh, bh ;~ 01A2:96FB
cs=0x1a2;eip=0x0096fd; 	T(dh = cl;);	// 23643                  mov     dh, cl ;~ 01A2:96FD
loc_196ff:
	// 5911 
cs=0x1a2;eip=0x0096ff; 	T(SHR(ax, 1));	// 23646                  shr     ax, 1 ;~ 01A2:96FF
cs=0x1a2;eip=0x009701; 	T(RCR(bh, 1));	// 23647                  rcr     bh, 1 ;~ 01A2:9701
cs=0x1a2;eip=0x009703; 	T(DEC(dh));	// 23648                  dec     dh ;~ 01A2:9703
cs=0x1a2;eip=0x009705; 	J(JNZ(loc_196ff));	// 23649                  jnz     short loc_196FF ;~ 01A2:9705
cs=0x1a2;eip=0x009707; 	T(OR(ah, dl));	// 23650                  or      ah, dl ;~ 01A2:9707
cs=0x1a2;eip=0x009709; 	T(XCHG(al, ah));	// 23651                  xchg    al, ah ;~ 01A2:9709
cs=0x1a2;eip=0x00970b; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23652                  or      [di], ax ;~ 01A2:970B
cs=0x1a2;eip=0x00970d; 	T(ADD(di, 2));	// 23653                  add     di, 2 ;~ 01A2:970D
cs=0x1a2;eip=0x009710; 	X(DEC(byte_6fb93));	// 23654                  dec     ss:byte_6FB93 ;~ 01A2:9710
cs=0x1a2;eip=0x009715; 	J(JNZ(loc_196d3));	// 23655                  jnz     short loc_196D3 ;~ 01A2:9715
cs=0x1a2;eip=0x009717; 	X(OR(*(raddr(ds,di)), bh));	// 23656                  or      [di], bh ;~ 01A2:9717
loc_19719:
	// 5912 
cs=0x1a2;eip=0x009719; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 23659                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:9719
cs=0x1a2;eip=0x00971e; 	T(DEC(bl));	// 23660                  dec     bl ;~ 01A2:971E
cs=0x1a2;eip=0x009720; 	J(JNZ(loc_196c9));	// 23661                  jnz     short loc_196C9 ;~ 01A2:9720
cs=0x1a2;eip=0x009722; 	T(di = bp;);	// 23662                  mov     di, bp ;~ 01A2:9722
cs=0x1a2;eip=0x009724; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 23663                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:9724
cs=0x1a2;eip=0x009729; 	T(dx = 0x3CE;);	// 23664                  mov     dx, 3CEh ;~ 01A2:9729
cs=0x1a2;eip=0x00972c; 	T(ax = 0x104;);	// 23665                  mov     ax, 104h ;~ 01A2:972C
cs=0x1a2;eip=0x00972f; 	S(OUT(dx, ax));	// 23666                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:972F
cs=0x1a2;eip=0x009730; 	T(dx = 0x3C4;);	// 23668                  mov     dx, 3C4h ;~ 01A2:9730
cs=0x1a2;eip=0x009733; 	T(ax = 0x202;);	// 23669                  mov     ax, 202h ;~ 01A2:9733
cs=0x1a2;eip=0x009736; 	S(OUT(dx, ax));	// 23670                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:9736
cs=0x1a2;eip=0x009737; 	T(bp = di;);	// 23672                  mov     bp, di ;~ 01A2:9737
cs=0x1a2;eip=0x009739; 	T(bl = ch;);	// 23673                  mov     bl, ch ;~ 01A2:9739
loc_1973b:
	// 5913 
cs=0x1a2;eip=0x00973b; 	T(XOR(bh, bh));	// 23676                  xor     bh, bh ;~ 01A2:973B
cs=0x1a2;eip=0x00973d; 	T(al = byte_6fb92;);	// 23677                  mov     al, ss:byte_6FB92 ;~ 01A2:973D
cs=0x1a2;eip=0x009741; 	X(byte_6fb93 = al;);	// 23678                  mov     ss:byte_6FB93, al ;~ 01A2:9741
loc_19745:
	// 5914 
cs=0x1a2;eip=0x009745; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23681                  lods    word ptr es:[si] ;~ 01A2:9745
cs=0x1a2;eip=0x009747; 	T(XCHG(al, ah));	// 23682                  xchg    al, ah ;~ 01A2:9747
cs=0x1a2;eip=0x009749; 	T(XOR(dl, dl));	// 23683                  xor     dl, dl ;~ 01A2:9749
cs=0x1a2;eip=0x00974b; 	T(dh = cl;);	// 23684                  mov     dh, cl ;~ 01A2:974B
loc_1974d:
	// 5915 
cs=0x1a2;eip=0x00974d; 	T(SHR(ax, 1));	// 23687                  shr     ax, 1 ;~ 01A2:974D
cs=0x1a2;eip=0x00974f; 	T(RCR(dl, 1));	// 23688                  rcr     dl, 1 ;~ 01A2:974F
cs=0x1a2;eip=0x009751; 	T(DEC(dh));	// 23689                  dec     dh ;~ 01A2:9751
cs=0x1a2;eip=0x009753; 	J(JNZ(loc_1974d));	// 23690                  jnz     short loc_1974D ;~ 01A2:9753
cs=0x1a2;eip=0x009755; 	T(OR(ah, bh));	// 23691                  or      ah, bh ;~ 01A2:9755
cs=0x1a2;eip=0x009757; 	T(XCHG(al, ah));	// 23692                  xchg    al, ah ;~ 01A2:9757
cs=0x1a2;eip=0x009759; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23693                  or      [di], ax ;~ 01A2:9759
cs=0x1a2;eip=0x00975b; 	T(ADD(di, 2));	// 23694                  add     di, 2 ;~ 01A2:975B
cs=0x1a2;eip=0x00975e; 	X(DEC(byte_6fb93));	// 23695                  dec     ss:byte_6FB93 ;~ 01A2:975E
cs=0x1a2;eip=0x009763; 	J(JNZ(loc_19769));	// 23696                  jnz     short loc_19769 ;~ 01A2:9763
cs=0x1a2;eip=0x009765; 	X(OR(*(raddr(ds,di)), dl));	// 23697                  or      [di], dl ;~ 01A2:9765
cs=0x1a2;eip=0x009767; 	J(JMP(loc_1978b));	// 23698                  jmp     short loc_1978B ;~ 01A2:9767
loc_19769:
	// 5916 
cs=0x1a2;eip=0x009769; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23702                  lods    word ptr es:[si] ;~ 01A2:9769
cs=0x1a2;eip=0x00976b; 	T(XCHG(al, ah));	// 23703                  xchg    al, ah ;~ 01A2:976B
cs=0x1a2;eip=0x00976d; 	T(XOR(bh, bh));	// 23704                  xor     bh, bh ;~ 01A2:976D
cs=0x1a2;eip=0x00976f; 	T(dh = cl;);	// 23705                  mov     dh, cl ;~ 01A2:976F
loc_19771:
	// 5917 
cs=0x1a2;eip=0x009771; 	T(SHR(ax, 1));	// 23708                  shr     ax, 1 ;~ 01A2:9771
cs=0x1a2;eip=0x009773; 	T(RCR(bh, 1));	// 23709                  rcr     bh, 1 ;~ 01A2:9773
cs=0x1a2;eip=0x009775; 	T(DEC(dh));	// 23710                  dec     dh ;~ 01A2:9775
cs=0x1a2;eip=0x009777; 	J(JNZ(loc_19771));	// 23711                  jnz     short loc_19771 ;~ 01A2:9777
cs=0x1a2;eip=0x009779; 	T(OR(ah, dl));	// 23712                  or      ah, dl ;~ 01A2:9779
cs=0x1a2;eip=0x00977b; 	T(XCHG(al, ah));	// 23713                  xchg    al, ah ;~ 01A2:977B
cs=0x1a2;eip=0x00977d; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23714                  or      [di], ax ;~ 01A2:977D
cs=0x1a2;eip=0x00977f; 	T(ADD(di, 2));	// 23715                  add     di, 2 ;~ 01A2:977F
cs=0x1a2;eip=0x009782; 	X(DEC(byte_6fb93));	// 23716                  dec     ss:byte_6FB93 ;~ 01A2:9782
cs=0x1a2;eip=0x009787; 	J(JNZ(loc_19745));	// 23717                  jnz     short loc_19745 ;~ 01A2:9787
cs=0x1a2;eip=0x009789; 	X(OR(*(raddr(ds,di)), bh));	// 23718                  or      [di], bh ;~ 01A2:9789
loc_1978b:
	// 5918 
cs=0x1a2;eip=0x00978b; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 23721                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:978B
cs=0x1a2;eip=0x009790; 	T(DEC(bl));	// 23722                  dec     bl ;~ 01A2:9790
cs=0x1a2;eip=0x009792; 	J(JNZ(loc_1973b));	// 23723                  jnz     short loc_1973B ;~ 01A2:9792
cs=0x1a2;eip=0x009794; 	T(di = bp;);	// 23724                  mov     di, bp ;~ 01A2:9794
cs=0x1a2;eip=0x009796; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 23725                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:9796
cs=0x1a2;eip=0x00979b; 	T(dx = 0x3CE;);	// 23726                  mov     dx, 3CEh ;~ 01A2:979B
cs=0x1a2;eip=0x00979e; 	T(ax = 0x204;);	// 23727                  mov     ax, 204h ;~ 01A2:979E
cs=0x1a2;eip=0x0097a1; 	S(OUT(dx, ax));	// 23728                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:97A1
cs=0x1a2;eip=0x0097a2; 	T(dx = 0x3C4;);	// 23730                  mov     dx, 3C4h ;~ 01A2:97A2
cs=0x1a2;eip=0x0097a5; 	T(ax = 0x402;);	// 23731                  mov     ax, 402h ;~ 01A2:97A5
cs=0x1a2;eip=0x0097a8; 	S(OUT(dx, ax));	// 23732                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:97A8
cs=0x1a2;eip=0x0097a9; 	T(bp = di;);	// 23734                  mov     bp, di ;~ 01A2:97A9
cs=0x1a2;eip=0x0097ab; 	T(bl = ch;);	// 23735                  mov     bl, ch ;~ 01A2:97AB
loc_197ad:
	// 5919 
cs=0x1a2;eip=0x0097ad; 	T(XOR(bh, bh));	// 23738                  xor     bh, bh ;~ 01A2:97AD
cs=0x1a2;eip=0x0097af; 	T(al = byte_6fb92;);	// 23739                  mov     al, ss:byte_6FB92 ;~ 01A2:97AF
cs=0x1a2;eip=0x0097b3; 	X(byte_6fb93 = al;);	// 23740                  mov     ss:byte_6FB93, al ;~ 01A2:97B3
loc_197b7:
	// 5920 
cs=0x1a2;eip=0x0097b7; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23743                  lods    word ptr es:[si] ;~ 01A2:97B7
cs=0x1a2;eip=0x0097b9; 	T(XCHG(al, ah));	// 23744                  xchg    al, ah ;~ 01A2:97B9
cs=0x1a2;eip=0x0097bb; 	T(XOR(dl, dl));	// 23745                  xor     dl, dl ;~ 01A2:97BB
cs=0x1a2;eip=0x0097bd; 	T(dh = cl;);	// 23746                  mov     dh, cl ;~ 01A2:97BD
loc_197bf:
	// 5921 
cs=0x1a2;eip=0x0097bf; 	T(SHR(ax, 1));	// 23749                  shr     ax, 1 ;~ 01A2:97BF
cs=0x1a2;eip=0x0097c1; 	T(RCR(dl, 1));	// 23750                  rcr     dl, 1 ;~ 01A2:97C1
cs=0x1a2;eip=0x0097c3; 	T(DEC(dh));	// 23751                  dec     dh ;~ 01A2:97C3
cs=0x1a2;eip=0x0097c5; 	J(JNZ(loc_197bf));	// 23752                  jnz     short loc_197BF ;~ 01A2:97C5
cs=0x1a2;eip=0x0097c7; 	T(OR(ah, bh));	// 23753                  or      ah, bh ;~ 01A2:97C7
cs=0x1a2;eip=0x0097c9; 	T(XCHG(al, ah));	// 23754                  xchg    al, ah ;~ 01A2:97C9
cs=0x1a2;eip=0x0097cb; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23755                  or      [di], ax ;~ 01A2:97CB
cs=0x1a2;eip=0x0097cd; 	T(ADD(di, 2));	// 23756                  add     di, 2 ;~ 01A2:97CD
cs=0x1a2;eip=0x0097d0; 	X(DEC(byte_6fb93));	// 23757                  dec     ss:byte_6FB93 ;~ 01A2:97D0
cs=0x1a2;eip=0x0097d5; 	J(JNZ(loc_197db));	// 23758                  jnz     short loc_197DB ;~ 01A2:97D5
cs=0x1a2;eip=0x0097d7; 	X(OR(*(raddr(ds,di)), dl));	// 23759                  or      [di], dl ;~ 01A2:97D7
cs=0x1a2;eip=0x0097d9; 	J(JMP(loc_197fd));	// 23760                  jmp     short loc_197FD ;~ 01A2:97D9
loc_197db:
	// 5922 
cs=0x1a2;eip=0x0097db; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23764                  lods    word ptr es:[si] ;~ 01A2:97DB
cs=0x1a2;eip=0x0097dd; 	T(XCHG(al, ah));	// 23765                  xchg    al, ah ;~ 01A2:97DD
cs=0x1a2;eip=0x0097df; 	T(XOR(bh, bh));	// 23766                  xor     bh, bh ;~ 01A2:97DF
cs=0x1a2;eip=0x0097e1; 	T(dh = cl;);	// 23767                  mov     dh, cl ;~ 01A2:97E1
loc_197e3:
	// 5923 
cs=0x1a2;eip=0x0097e3; 	T(SHR(ax, 1));	// 23770                  shr     ax, 1 ;~ 01A2:97E3
cs=0x1a2;eip=0x0097e5; 	T(RCR(bh, 1));	// 23771                  rcr     bh, 1 ;~ 01A2:97E5
cs=0x1a2;eip=0x0097e7; 	T(DEC(dh));	// 23772                  dec     dh ;~ 01A2:97E7
cs=0x1a2;eip=0x0097e9; 	J(JNZ(loc_197e3));	// 23773                  jnz     short loc_197E3 ;~ 01A2:97E9
cs=0x1a2;eip=0x0097eb; 	T(OR(ah, dl));	// 23774                  or      ah, dl ;~ 01A2:97EB
cs=0x1a2;eip=0x0097ed; 	T(XCHG(al, ah));	// 23775                  xchg    al, ah ;~ 01A2:97ED
cs=0x1a2;eip=0x0097ef; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23776                  or      [di], ax ;~ 01A2:97EF
cs=0x1a2;eip=0x0097f1; 	T(ADD(di, 2));	// 23777                  add     di, 2 ;~ 01A2:97F1
cs=0x1a2;eip=0x0097f4; 	X(DEC(byte_6fb93));	// 23778                  dec     ss:byte_6FB93 ;~ 01A2:97F4
cs=0x1a2;eip=0x0097f9; 	J(JNZ(loc_197b7));	// 23779                  jnz     short loc_197B7 ;~ 01A2:97F9
cs=0x1a2;eip=0x0097fb; 	X(OR(*(raddr(ds,di)), bh));	// 23780                  or      [di], bh ;~ 01A2:97FB
loc_197fd:
	// 5924 
cs=0x1a2;eip=0x0097fd; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 23783                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:97FD
cs=0x1a2;eip=0x009802; 	T(DEC(bl));	// 23784                  dec     bl ;~ 01A2:9802
cs=0x1a2;eip=0x009804; 	J(JNZ(loc_197ad));	// 23785                  jnz     short loc_197AD ;~ 01A2:9804
cs=0x1a2;eip=0x009806; 	T(di = bp;);	// 23786                  mov     di, bp ;~ 01A2:9806
cs=0x1a2;eip=0x009808; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 23787                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:9808
cs=0x1a2;eip=0x00980d; 	T(dx = 0x3CE;);	// 23788                  mov     dx, 3CEh ;~ 01A2:980D
cs=0x1a2;eip=0x009810; 	T(ax = 0x304;);	// 23789                  mov     ax, 304h ;~ 01A2:9810
cs=0x1a2;eip=0x009813; 	S(OUT(dx, ax));	// 23790                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9813
cs=0x1a2;eip=0x009814; 	T(dx = 0x3C4;);	// 23792                  mov     dx, 3C4h ;~ 01A2:9814
cs=0x1a2;eip=0x009817; 	T(ax = 0x802;);	// 23793                  mov     ax, 802h ;~ 01A2:9817
cs=0x1a2;eip=0x00981a; 	S(OUT(dx, ax));	// 23794                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:981A
cs=0x1a2;eip=0x00981b; 	T(bp = di;);	// 23796                  mov     bp, di ;~ 01A2:981B
cs=0x1a2;eip=0x00981d; 	T(bl = ch;);	// 23797                  mov     bl, ch ;~ 01A2:981D
loc_1981f:
	// 5925 
cs=0x1a2;eip=0x00981f; 	T(XOR(bh, bh));	// 23800                  xor     bh, bh ;~ 01A2:981F
cs=0x1a2;eip=0x009821; 	T(al = byte_6fb92;);	// 23801                  mov     al, ss:byte_6FB92 ;~ 01A2:9821
cs=0x1a2;eip=0x009825; 	X(byte_6fb93 = al;);	// 23802                  mov     ss:byte_6FB93, al ;~ 01A2:9825
loc_19829:
	// 5926 
cs=0x1a2;eip=0x009829; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23805                  lods    word ptr es:[si] ;~ 01A2:9829
cs=0x1a2;eip=0x00982b; 	T(XCHG(al, ah));	// 23806                  xchg    al, ah ;~ 01A2:982B
cs=0x1a2;eip=0x00982d; 	T(XOR(dl, dl));	// 23807                  xor     dl, dl ;~ 01A2:982D
cs=0x1a2;eip=0x00982f; 	T(dh = cl;);	// 23808                  mov     dh, cl ;~ 01A2:982F
loc_19831:
	// 5927 
cs=0x1a2;eip=0x009831; 	T(SHR(ax, 1));	// 23811                  shr     ax, 1 ;~ 01A2:9831
cs=0x1a2;eip=0x009833; 	T(RCR(dl, 1));	// 23812                  rcr     dl, 1 ;~ 01A2:9833
cs=0x1a2;eip=0x009835; 	T(DEC(dh));	// 23813                  dec     dh ;~ 01A2:9835
cs=0x1a2;eip=0x009837; 	J(JNZ(loc_19831));	// 23814                  jnz     short loc_19831 ;~ 01A2:9837
cs=0x1a2;eip=0x009839; 	T(OR(ah, bh));	// 23815                  or      ah, bh ;~ 01A2:9839
cs=0x1a2;eip=0x00983b; 	T(XCHG(al, ah));	// 23816                  xchg    al, ah ;~ 01A2:983B
cs=0x1a2;eip=0x00983d; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23817                  or      [di], ax ;~ 01A2:983D
cs=0x1a2;eip=0x00983f; 	T(ADD(di, 2));	// 23818                  add     di, 2 ;~ 01A2:983F
cs=0x1a2;eip=0x009842; 	X(DEC(byte_6fb93));	// 23819                  dec     ss:byte_6FB93 ;~ 01A2:9842
cs=0x1a2;eip=0x009847; 	J(JNZ(loc_1984d));	// 23820                  jnz     short loc_1984D ;~ 01A2:9847
cs=0x1a2;eip=0x009849; 	X(OR(*(raddr(ds,di)), dl));	// 23821                  or      [di], dl ;~ 01A2:9849
cs=0x1a2;eip=0x00984b; 	J(JMP(loc_1986f));	// 23822                  jmp     short loc_1986F ;~ 01A2:984B
loc_1984d:
	// 5928 
cs=0x1a2;eip=0x00984d; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23826                  lods    word ptr es:[si] ;~ 01A2:984D
cs=0x1a2;eip=0x00984f; 	T(XCHG(al, ah));	// 23827                  xchg    al, ah ;~ 01A2:984F
cs=0x1a2;eip=0x009851; 	T(XOR(bh, bh));	// 23828                  xor     bh, bh ;~ 01A2:9851
cs=0x1a2;eip=0x009853; 	T(dh = cl;);	// 23829                  mov     dh, cl ;~ 01A2:9853
loc_19855:
	// 5929 
cs=0x1a2;eip=0x009855; 	T(SHR(ax, 1));	// 23832                  shr     ax, 1 ;~ 01A2:9855
cs=0x1a2;eip=0x009857; 	T(RCR(bh, 1));	// 23833                  rcr     bh, 1 ;~ 01A2:9857
cs=0x1a2;eip=0x009859; 	T(DEC(dh));	// 23834                  dec     dh ;~ 01A2:9859
cs=0x1a2;eip=0x00985b; 	J(JNZ(loc_19855));	// 23835                  jnz     short loc_19855 ;~ 01A2:985B
cs=0x1a2;eip=0x00985d; 	T(OR(ah, dl));	// 23836                  or      ah, dl ;~ 01A2:985D
cs=0x1a2;eip=0x00985f; 	T(XCHG(al, ah));	// 23837                  xchg    al, ah ;~ 01A2:985F
cs=0x1a2;eip=0x009861; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23838                  or      [di], ax ;~ 01A2:9861
cs=0x1a2;eip=0x009863; 	T(ADD(di, 2));	// 23839                  add     di, 2 ;~ 01A2:9863
cs=0x1a2;eip=0x009866; 	X(DEC(byte_6fb93));	// 23840                  dec     ss:byte_6FB93 ;~ 01A2:9866
cs=0x1a2;eip=0x00986b; 	J(JNZ(loc_19829));	// 23841                  jnz     short loc_19829 ;~ 01A2:986B
cs=0x1a2;eip=0x00986d; 	X(OR(*(raddr(ds,di)), bh));	// 23842                  or      [di], bh ;~ 01A2:986D
loc_1986f:
	// 5930 
cs=0x1a2;eip=0x00986f; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 23845                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:986F
cs=0x1a2;eip=0x009874; 	T(DEC(bl));	// 23846                  dec     bl ;~ 01A2:9874
cs=0x1a2;eip=0x009876; 	J(JNZ(loc_1981f));	// 23847                  jnz     short loc_1981F ;~ 01A2:9876
cs=0x1a2;eip=0x009878; 	T(di = bp;);	// 23848                  mov     di, bp ;~ 01A2:9878
cs=0x1a2;eip=0x00987a; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 23849                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:987A
cs=0x1a2;eip=0x00987f; 	X(POP(ds));	// 23850                  pop     ds ;~ 01A2:987F
cs=0x1a2;eip=0x009880; 	J(RETN(0));	// 23852                  retn ;~ 01A2:9880
loc_19881:
	// 5931 
cs=0x1a2;eip=0x009881; 	T(dx = 0x3C4;);	// 23857                  mov     dx, 3C4h ;~ 01A2:9881
cs=0x1a2;eip=0x009884; 	T(ax = 0x0F02;);	// 23858                  mov     ax, 0F02h ;~ 01A2:9884
cs=0x1a2;eip=0x009887; 	S(OUT(dx, ax));	// 23859                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:9887
cs=0x1a2;eip=0x009888; 	T(dx = 0x3CE;);	// 23861                  mov     dx, 3CEh ;~ 01A2:9888
cs=0x1a2;eip=0x00988b; 	T(ax = 0x805;);	// 23862                  mov     ax, 805h ;~ 01A2:988B
cs=0x1a2;eip=0x00988e; 	S(OUT(dx, ax));	// 23863                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:988E
cs=0x1a2;eip=0x00988f; 	T(ax = 0x803;);	// 23865                  mov     ax, 803h ;~ 01A2:988F
cs=0x1a2;eip=0x009892; 	S(OUT(dx, ax));	// 23866                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9892
cs=0x1a2;eip=0x009893; 	T(ax = 7;);	// 23868                  mov     ax, 7 ;~ 01A2:9893
cs=0x1a2;eip=0x009896; 	S(OUT(dx, ax));	// 23869                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9896
cs=0x1a2;eip=0x009897; 	T(bp = di;);	// 23872                  mov     bp, di ;~ 01A2:9897
cs=0x1a2;eip=0x009899; 	T(dl = ch;);	// 23873                  mov     dl, ch ;~ 01A2:9899
loc_1989b:
	// 5932 
cs=0x1a2;eip=0x00989b; 	T(al = byte_6fb92;);	// 23876                  mov     al, ss:byte_6FB92 ;~ 01A2:989B
cs=0x1a2;eip=0x00989f; 	X(byte_6fb93 = al;);	// 23877                  mov     ss:byte_6FB93, al ;~ 01A2:989F
loc_198a3:
	// 5933 
cs=0x1a2;eip=0x0098a3; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23880                  lods    word ptr es:[si] ;~ 01A2:98A3
cs=0x1a2;eip=0x0098a5; 	T(NOT(ax));	// 23881                  not     ax ;~ 01A2:98A5
cs=0x1a2;eip=0x0098a7; 	X(AND(*(raddr(ds,di)), al));	// 23882                  and     [di], al ;~ 01A2:98A7
cs=0x1a2;eip=0x0098a9; 	X(AND(*(raddr(ds,di+1)), ah));	// 23883                  and     [di+1], ah ;~ 01A2:98A9
cs=0x1a2;eip=0x0098ac; 	T(ADD(di, 2));	// 23884                  add     di, 2 ;~ 01A2:98AC
cs=0x1a2;eip=0x0098af; 	X(DEC(byte_6fb93));	// 23885                  dec     ss:byte_6FB93 ;~ 01A2:98AF
cs=0x1a2;eip=0x0098b4; 	J(JNZ(loc_198a3));	// 23886                  jnz     short loc_198A3 ;~ 01A2:98B4
cs=0x1a2;eip=0x0098b6; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 23887                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:98B6
cs=0x1a2;eip=0x0098bb; 	T(DEC(dl));	// 23888                  dec     dl ;~ 01A2:98BB
cs=0x1a2;eip=0x0098bd; 	J(JNZ(loc_1989b));	// 23889                  jnz     short loc_1989B ;~ 01A2:98BD
cs=0x1a2;eip=0x0098bf; 	T(di = bp;);	// 23890                  mov     di, bp ;~ 01A2:98BF
cs=0x1a2;eip=0x0098c1; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 23891                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:98C1
cs=0x1a2;eip=0x0098c6; 	T(dx = 0x3C4;);	// 23892                  mov     dx, 3C4h ;~ 01A2:98C6
cs=0x1a2;eip=0x0098c9; 	T(ax = 0x102;);	// 23893                  mov     ax, 102h ;~ 01A2:98C9
cs=0x1a2;eip=0x0098cc; 	S(OUT(dx, ax));	// 23894                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:98CC
cs=0x1a2;eip=0x0098cd; 	T(dx = 0x3CE;);	// 23896                  mov     dx, 3CEh ;~ 01A2:98CD
cs=0x1a2;eip=0x0098d0; 	T(ax = 5;);	// 23897                  mov     ax, 5 ;~ 01A2:98D0
cs=0x1a2;eip=0x0098d3; 	S(OUT(dx, ax));	// 23898                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:98D3
cs=0x1a2;eip=0x0098d4; 	T(ax = 3;);	// 23905                  mov     ax, 3 ;~ 01A2:98D4
cs=0x1a2;eip=0x0098d7; 	S(OUT(dx, ax));	// 23906                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:98D7
cs=0x1a2;eip=0x0098d8; 	T(ax = 4;);	// 23911                  mov     ax, 4 ;~ 01A2:98D8
cs=0x1a2;eip=0x0098db; 	S(OUT(dx, ax));	// 23912                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:98DB
cs=0x1a2;eip=0x0098dc; 	T(bp = di;);	// 23915                  mov     bp, di ;~ 01A2:98DC
cs=0x1a2;eip=0x0098de; 	T(bl = ch;);	// 23916                  mov     bl, ch ;~ 01A2:98DE
loc_198e0:
	// 5934 
cs=0x1a2;eip=0x0098e0; 	T(al = byte_6fb92;);	// 23919                  mov     al, ss:byte_6FB92 ;~ 01A2:98E0
cs=0x1a2;eip=0x0098e4; 	X(byte_6fb93 = al;);	// 23920                  mov     ss:byte_6FB93, al ;~ 01A2:98E4
loc_198e8:
	// 5935 
cs=0x1a2;eip=0x0098e8; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23923                  lods    word ptr es:[si] ;~ 01A2:98E8
cs=0x1a2;eip=0x0098ea; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23924                  or      [di], ax ;~ 01A2:98EA
cs=0x1a2;eip=0x0098ec; 	T(ADD(di, 2));	// 23925                  add     di, 2 ;~ 01A2:98EC
cs=0x1a2;eip=0x0098ef; 	X(DEC(byte_6fb93));	// 23926                  dec     ss:byte_6FB93 ;~ 01A2:98EF
cs=0x1a2;eip=0x0098f4; 	J(JNZ(loc_198e8));	// 23927                  jnz     short loc_198E8 ;~ 01A2:98F4
cs=0x1a2;eip=0x0098f6; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 23928                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:98F6
cs=0x1a2;eip=0x0098fb; 	T(DEC(bl));	// 23929                  dec     bl ;~ 01A2:98FB
cs=0x1a2;eip=0x0098fd; 	J(JNZ(loc_198e0));	// 23930                  jnz     short loc_198E0 ;~ 01A2:98FD
cs=0x1a2;eip=0x0098ff; 	T(di = bp;);	// 23931                  mov     di, bp ;~ 01A2:98FF
cs=0x1a2;eip=0x009901; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 23932                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:9901
cs=0x1a2;eip=0x009906; 	T(dx = 0x3CE;);	// 23933                  mov     dx, 3CEh ;~ 01A2:9906
cs=0x1a2;eip=0x009909; 	T(ax = 0x104;);	// 23934                  mov     ax, 104h ;~ 01A2:9909
cs=0x1a2;eip=0x00990c; 	S(OUT(dx, ax));	// 23935                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:990C
cs=0x1a2;eip=0x00990d; 	T(dx = 0x3C4;);	// 23937                  mov     dx, 3C4h ;~ 01A2:990D
cs=0x1a2;eip=0x009910; 	T(ax = 0x202;);	// 23938                  mov     ax, 202h ;~ 01A2:9910
cs=0x1a2;eip=0x009913; 	S(OUT(dx, ax));	// 23939                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:9913
cs=0x1a2;eip=0x009914; 	T(bp = di;);	// 23941                  mov     bp, di ;~ 01A2:9914
cs=0x1a2;eip=0x009916; 	T(bl = ch;);	// 23942                  mov     bl, ch ;~ 01A2:9916
loc_19918:
	// 5936 
cs=0x1a2;eip=0x009918; 	T(al = byte_6fb92;);	// 23945                  mov     al, ss:byte_6FB92 ;~ 01A2:9918
cs=0x1a2;eip=0x00991c; 	X(byte_6fb93 = al;);	// 23946                  mov     ss:byte_6FB93, al ;~ 01A2:991C
loc_19920:
	// 5937 
cs=0x1a2;eip=0x009920; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23949                  lods    word ptr es:[si] ;~ 01A2:9920
cs=0x1a2;eip=0x009922; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23950                  or      [di], ax ;~ 01A2:9922
cs=0x1a2;eip=0x009924; 	T(ADD(di, 2));	// 23951                  add     di, 2 ;~ 01A2:9924
cs=0x1a2;eip=0x009927; 	X(DEC(byte_6fb93));	// 23952                  dec     ss:byte_6FB93 ;~ 01A2:9927
cs=0x1a2;eip=0x00992c; 	J(JNZ(loc_19920));	// 23953                  jnz     short loc_19920 ;~ 01A2:992C
cs=0x1a2;eip=0x00992e; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 23954                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:992E
cs=0x1a2;eip=0x009933; 	T(DEC(bl));	// 23955                  dec     bl ;~ 01A2:9933
cs=0x1a2;eip=0x009935; 	J(JNZ(loc_19918));	// 23956                  jnz     short loc_19918 ;~ 01A2:9935
cs=0x1a2;eip=0x009937; 	T(di = bp;);	// 23957                  mov     di, bp ;~ 01A2:9937
cs=0x1a2;eip=0x009939; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 23958                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:9939
cs=0x1a2;eip=0x00993e; 	T(dx = 0x3CE;);	// 23959                  mov     dx, 3CEh ;~ 01A2:993E
cs=0x1a2;eip=0x009941; 	T(ax = 0x204;);	// 23960                  mov     ax, 204h ;~ 01A2:9941
cs=0x1a2;eip=0x009944; 	S(OUT(dx, ax));	// 23961                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9944
cs=0x1a2;eip=0x009945; 	T(dx = 0x3C4;);	// 23963                  mov     dx, 3C4h ;~ 01A2:9945
cs=0x1a2;eip=0x009948; 	T(ax = 0x402;);	// 23964                  mov     ax, 402h ;~ 01A2:9948
cs=0x1a2;eip=0x00994b; 	S(OUT(dx, ax));	// 23965                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:994B
cs=0x1a2;eip=0x00994c; 	T(bp = di;);	// 23967                  mov     bp, di ;~ 01A2:994C
cs=0x1a2;eip=0x00994e; 	T(bl = ch;);	// 23968                  mov     bl, ch ;~ 01A2:994E
loc_19950:
	// 5938 
cs=0x1a2;eip=0x009950; 	T(al = byte_6fb92;);	// 23971                  mov     al, ss:byte_6FB92 ;~ 01A2:9950
cs=0x1a2;eip=0x009954; 	X(byte_6fb93 = al;);	// 23972                  mov     ss:byte_6FB93, al ;~ 01A2:9954
loc_19958:
	// 5939 
cs=0x1a2;eip=0x009958; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 23975                  lods    word ptr es:[si] ;~ 01A2:9958
cs=0x1a2;eip=0x00995a; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 23976                  or      [di], ax ;~ 01A2:995A
cs=0x1a2;eip=0x00995c; 	T(ADD(di, 2));	// 23977                  add     di, 2 ;~ 01A2:995C
cs=0x1a2;eip=0x00995f; 	X(DEC(byte_6fb93));	// 23978                  dec     ss:byte_6FB93 ;~ 01A2:995F
cs=0x1a2;eip=0x009964; 	J(JNZ(loc_19958));	// 23979                  jnz     short loc_19958 ;~ 01A2:9964
cs=0x1a2;eip=0x009966; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 23980                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:9966
cs=0x1a2;eip=0x00996b; 	T(DEC(bl));	// 23981                  dec     bl ;~ 01A2:996B
cs=0x1a2;eip=0x00996d; 	J(JNZ(loc_19950));	// 23982                  jnz     short loc_19950 ;~ 01A2:996D
cs=0x1a2;eip=0x00996f; 	T(di = bp;);	// 23983                  mov     di, bp ;~ 01A2:996F
cs=0x1a2;eip=0x009971; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 23984                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:9971
cs=0x1a2;eip=0x009976; 	T(dx = 0x3CE;);	// 23985                  mov     dx, 3CEh ;~ 01A2:9976
cs=0x1a2;eip=0x009979; 	T(ax = 0x304;);	// 23986                  mov     ax, 304h ;~ 01A2:9979
cs=0x1a2;eip=0x00997c; 	S(OUT(dx, ax));	// 23987                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:997C
cs=0x1a2;eip=0x00997d; 	T(dx = 0x3C4;);	// 23989                  mov     dx, 3C4h ;~ 01A2:997D
cs=0x1a2;eip=0x009980; 	T(ax = 0x802;);	// 23990                  mov     ax, 802h ;~ 01A2:9980
cs=0x1a2;eip=0x009983; 	S(OUT(dx, ax));	// 23991                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:9983
cs=0x1a2;eip=0x009984; 	T(bp = di;);	// 23993                  mov     bp, di ;~ 01A2:9984
cs=0x1a2;eip=0x009986; 	T(bl = ch;);	// 23994                  mov     bl, ch ;~ 01A2:9986
loc_19988:
	// 5940 
cs=0x1a2;eip=0x009988; 	T(al = byte_6fb92;);	// 23997                  mov     al, ss:byte_6FB92 ;~ 01A2:9988
cs=0x1a2;eip=0x00998c; 	X(byte_6fb93 = al;);	// 23998                  mov     ss:byte_6FB93, al ;~ 01A2:998C
loc_19990:
	// 5941 
cs=0x1a2;eip=0x009990; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 24001                  lods    word ptr es:[si] ;~ 01A2:9990
cs=0x1a2;eip=0x009992; 	X(OR(*(dw*)(raddr(ds,di)), ax));	// 24002                  or      [di], ax ;~ 01A2:9992
cs=0x1a2;eip=0x009994; 	T(ADD(di, 2));	// 24003                  add     di, 2 ;~ 01A2:9994
cs=0x1a2;eip=0x009997; 	X(DEC(byte_6fb93));	// 24004                  dec     ss:byte_6FB93 ;~ 01A2:9997
cs=0x1a2;eip=0x00999c; 	J(JNZ(loc_19990));	// 24005                  jnz     short loc_19990 ;~ 01A2:999C
cs=0x1a2;eip=0x00999e; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 24006                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:999E
cs=0x1a2;eip=0x0099a3; 	T(DEC(bl));	// 24007                  dec     bl ;~ 01A2:99A3
cs=0x1a2;eip=0x0099a5; 	J(JNZ(loc_19988));	// 24008                  jnz     short loc_19988 ;~ 01A2:99A5
cs=0x1a2;eip=0x0099a7; 	T(di = bp;);	// 24009                  mov     di, bp ;~ 01A2:99A7
cs=0x1a2;eip=0x0099a9; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 24010                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:99A9
cs=0x1a2;eip=0x0099ae; 	X(POP(ds));	// 24011                  pop     ds ;~ 01A2:99AE
cs=0x1a2;eip=0x0099af; 	J(RETN(0));	// 24013                  retn ;~ 01A2:99AF

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_19623: 	goto loc_19623;
        case m2c::kloc_1962b: 	goto loc_1962b;
        case m2c::kloc_19645: 	goto loc_19645;
        case m2c::kloc_1964f: 	goto loc_1964f;
        case m2c::kloc_19657: 	goto loc_19657;
        case m2c::kloc_19678: 	goto loc_19678;
        case m2c::kloc_19680: 	goto loc_19680;
        case m2c::kloc_1969f: 	goto loc_1969f;
        case m2c::kloc_196c9: 	goto loc_196c9;
        case m2c::kloc_196d3: 	goto loc_196d3;
        case m2c::kloc_196db: 	goto loc_196db;
        case m2c::kloc_196f7: 	goto loc_196f7;
        case m2c::kloc_196ff: 	goto loc_196ff;
        case m2c::kloc_19719: 	goto loc_19719;
        case m2c::kloc_1973b: 	goto loc_1973b;
        case m2c::kloc_19745: 	goto loc_19745;
        case m2c::kloc_1974d: 	goto loc_1974d;
        case m2c::kloc_19769: 	goto loc_19769;
        case m2c::kloc_19771: 	goto loc_19771;
        case m2c::kloc_1978b: 	goto loc_1978b;
        case m2c::kloc_197ad: 	goto loc_197ad;
        case m2c::kloc_197b7: 	goto loc_197b7;
        case m2c::kloc_197bf: 	goto loc_197bf;
        case m2c::kloc_197db: 	goto loc_197db;
        case m2c::kloc_197e3: 	goto loc_197e3;
        case m2c::kloc_197fd: 	goto loc_197fd;
        case m2c::kloc_1981f: 	goto loc_1981f;
        case m2c::kloc_19829: 	goto loc_19829;
        case m2c::kloc_19831: 	goto loc_19831;
        case m2c::kloc_1984d: 	goto loc_1984d;
        case m2c::kloc_19855: 	goto loc_19855;
        case m2c::kloc_1986f: 	goto loc_1986f;
        case m2c::kloc_19881: 	goto loc_19881;
        case m2c::kloc_1989b: 	goto loc_1989b;
        case m2c::kloc_198a3: 	goto loc_198a3;
        case m2c::kloc_198e0: 	goto loc_198e0;
        case m2c::kloc_198e8: 	goto loc_198e8;
        case m2c::kloc_19918: 	goto loc_19918;
        case m2c::kloc_19920: 	goto loc_19920;
        case m2c::kloc_19950: 	goto loc_19950;
        case m2c::kloc_19958: 	goto loc_19958;
        case m2c::kloc_19988: 	goto loc_19988;
        case m2c::kloc_19990: 	goto loc_19990;
        case m2c::ksub_19602: 	goto sub_19602;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_199b0(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_199b0:
    _begin:
cs=0x1a2;eip=0x0099b0; 	T(dx = 0x3CE;);	// 24022                  mov     dx, 3CEh ;~ 01A2:99B0
cs=0x1a2;eip=0x0099b3; 	T(ax = 5;);	// 24023                  mov     ax, 5 ;~ 01A2:99B3
cs=0x1a2;eip=0x0099b6; 	S(OUT(dx, ax));	// 24024                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:99B6
cs=0x1a2;eip=0x0099b7; 	X(PUSH(bp));	// 24031                  push    bp ;~ 01A2:99B7
cs=0x1a2;eip=0x0099b8; 	T(bp = sp;);	// 24032                  mov     bp, sp ;~ 01A2:99B8
cs=0x1a2;eip=0x0099ba; 	T(SUB(sp, 6));	// 24033                  sub     sp, 6 ;~ 01A2:99BA
cs=0x1a2;eip=0x0099bd; 	X(PUSH(di));	// 24034                  push    di ;~ 01A2:99BD
cs=0x1a2;eip=0x0099be; 	X(PUSH(si));	// 24035                  push    si ;~ 01A2:99BE
cs=0x1a2;eip=0x0099bf; 	X(PUSH(ds));	// 24036                  push    ds ;~ 01A2:99BF
cs=0x1a2;eip=0x0099c0; 	X(PUSH(es));	// 24037                  push    es ;~ 01A2:99C0
cs=0x1a2;eip=0x0099c1; 	T(MOV(ax, *(dw*)(raddr(ss,bp+4))));	// 24038                  mov     ax, [bp+4] ;~ 01A2:99C1
cs=0x1a2;eip=0x0099c4; 	T(MOV(cx, *(dw*)(raddr(ss,bp+8))));	// 24039                  mov     cx, [bp+8] ;~ 01A2:99C4
cs=0x1a2;eip=0x0099c7; 	T(CMP(cx, ax));	// 24040                  cmp     cx, ax ;~ 01A2:99C7
cs=0x1a2;eip=0x0099c9; 	J(JGE(loc_199dd));	// 24041                  jge     short loc_199DD ;~ 01A2:99C9
cs=0x1a2;eip=0x0099cb; 	T(MOV(bx, *(dw*)(raddr(ss,bp+6))));	// 24042                  mov     bx, [bp+6] ;~ 01A2:99CB
cs=0x1a2;eip=0x0099ce; 	T(MOV(dx, *(dw*)(raddr(ss,bp+0x0A))));	// 24043                  mov     dx, [bp+0Ah] ;~ 01A2:99CE
cs=0x1a2;eip=0x0099d1; 	X(MOV(*(dw*)(raddr(ss,bp+4)), cx));	// 24044                  mov     [bp+4], cx ;~ 01A2:99D1
cs=0x1a2;eip=0x0099d4; 	X(MOV(*(dw*)(raddr(ss,bp+6)), dx));	// 24045                  mov     [bp+6], dx ;~ 01A2:99D4
cs=0x1a2;eip=0x0099d7; 	X(MOV(*(dw*)(raddr(ss,bp+8)), ax));	// 24046                  mov     [bp+8], ax ;~ 01A2:99D7
cs=0x1a2;eip=0x0099da; 	X(MOV(*(dw*)(raddr(ss,bp+0x0A)), bx));	// 24047                  mov     [bp+0Ah], bx ;~ 01A2:99DA
loc_199dd:
	// 5942 
cs=0x1a2;eip=0x0099dd; 	T(cl = 3;);	// 24050                  mov     cl, 3 ;~ 01A2:99DD
cs=0x1a2;eip=0x0099df; 	T(MOV(ax, *(dw*)(raddr(ss,bp+6))));	// 24051                  mov     ax, [bp+6] ;~ 01A2:99DF
cs=0x1a2;eip=0x0099e2; 	T(SHL(ax, cl));	// 24052                  shl     ax, cl ;~ 01A2:99E2
cs=0x1a2;eip=0x0099e4; 	T(bx = ax;);	// 24053                  mov     bx, ax ;~ 01A2:99E4
cs=0x1a2;eip=0x0099e6; 	T(SHL(ax, 1));	// 24054                  shl     ax, 1 ;~ 01A2:99E6
cs=0x1a2;eip=0x0099e8; 	T(SHL(ax, 1));	// 24055                  shl     ax, 1 ;~ 01A2:99E8
cs=0x1a2;eip=0x0099ea; 	T(ADD(ax, bx));	// 24056                  add     ax, bx ;~ 01A2:99EA
cs=0x1a2;eip=0x0099ec; 	T(MOV(bx, *(dw*)(raddr(ss,bp+4))));	// 24057                  mov     bx, [bp+4] ;~ 01A2:99EC
cs=0x1a2;eip=0x0099ef; 	T(cl = 3;);	// 24058                  mov     cl, 3 ;~ 01A2:99EF
cs=0x1a2;eip=0x0099f1; 	T(SHR(bx, cl));	// 24059                  shr     bx, cl ;~ 01A2:99F1
cs=0x1a2;eip=0x0099f3; 	T(ADD(ax, bx));	// 24060                  add     ax, bx ;~ 01A2:99F3
cs=0x1a2;eip=0x0099f5; 	X(PUSH(ax));	// 24061                  push    ax ;~ 01A2:99F5
cs=0x1a2;eip=0x0099f6; 	T(MOV(cx, *(dw*)(raddr(ss,bp+4))));	// 24062                  mov     cx, [bp+4] ;~ 01A2:99F6
cs=0x1a2;eip=0x0099f9; 	T(AND(cl, 7));	// 24063                  and     cl, 7 ;~ 01A2:99F9
cs=0x1a2;eip=0x0099fc; 	T(bx = 0x80;);	// 24064                  mov     bx, 80h ;~ 01A2:99FC
cs=0x1a2;eip=0x0099ff; 	T(SHR(bx, cl));	// 24065                  shr     bx, cl ;~ 01A2:99FF
cs=0x1a2;eip=0x009a01; 	X(PUSH(bx));	// 24066                  push    bx ;~ 01A2:9A01
cs=0x1a2;eip=0x009a02; 	T(dx = 0x3CE;);	// 24067                  mov     dx, 3CEh ;~ 01A2:9A02
cs=0x1a2;eip=0x009a05; 	T(al = 8;);	// 24068                  mov     al, 8 ;~ 01A2:9A05
cs=0x1a2;eip=0x009a07; 	S(OUT(dx, al));	// 24069                  out     dx, al          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9A07
cs=0x1a2;eip=0x009a08; 	T(INC(dx));	// 24072                  inc     dx ;~ 01A2:9A08
cs=0x1a2;eip=0x009a09; 	T(al = bl;);	// 24073                  mov     al, bl ;~ 01A2:9A09
cs=0x1a2;eip=0x009a0b; 	S(OUT(dx, al));	// 24074                  out     dx, al          ; EGA port: graphics controller data register ;~ 01A2:9A0B
cs=0x1a2;eip=0x009a0c; 	T(dx = 0x3CE;);	// 24075                  mov     dx, 3CEh ;~ 01A2:9A0C
cs=0x1a2;eip=0x009a0f; 	T(XOR(al, al));	// 24076                  xor     al, al ;~ 01A2:9A0F
cs=0x1a2;eip=0x009a11; 	S(OUT(dx, al));	// 24077                  out     dx, al          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9A11
cs=0x1a2;eip=0x009a12; 	T(INC(dx));	// 24080                  inc     dx ;~ 01A2:9A12
cs=0x1a2;eip=0x009a13; 	T(MOV(ax, *(dw*)(raddr(ss,bp+0x0C))));	// 24081                  mov     ax, [bp+0Ch] ;~ 01A2:9A13
cs=0x1a2;eip=0x009a16; 	S(OUT(dx, al));	// 24082                  out     dx, al          ; EGA port: graphics controller data register ;~ 01A2:9A16
cs=0x1a2;eip=0x009a17; 	T(DEC(dx));	// 24083                  dec     dx ;~ 01A2:9A17
cs=0x1a2;eip=0x009a18; 	T(al = 1;);	// 24084                  mov     al, 1 ;~ 01A2:9A18
cs=0x1a2;eip=0x009a1a; 	S(OUT(dx, al));	// 24085                  out     dx, al          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9A1A
cs=0x1a2;eip=0x009a1b; 	T(INC(dx));	// 24087                  inc     dx ;~ 01A2:9A1B
cs=0x1a2;eip=0x009a1c; 	T(al = 0x0F;);	// 24088                  mov     al, 0Fh ;~ 01A2:9A1C
cs=0x1a2;eip=0x009a1e; 	S(OUT(dx, al));	// 24089                  out     dx, al          ; EGA port: graphics controller data register ;~ 01A2:9A1E
cs=0x1a2;eip=0x009a1f; 	T(dx = 0x3C4;);	// 24090                  mov     dx, 3C4h ;~ 01A2:9A1F
cs=0x1a2;eip=0x009a22; 	T(al = 2;);	// 24091                  mov     al, 2 ;~ 01A2:9A22
cs=0x1a2;eip=0x009a24; 	S(OUT(dx, al));	// 24092                  out     dx, al          ; EGA: sequencer address reg ;~ 01A2:9A24
cs=0x1a2;eip=0x009a25; 	T(INC(dx));	// 24094                  inc     dx ;~ 01A2:9A25
cs=0x1a2;eip=0x009a26; 	T(al = 0x0F;);	// 24095                  mov     al, 0Fh ;~ 01A2:9A26
cs=0x1a2;eip=0x009a28; 	S(OUT(dx, al));	// 24096                  out     dx, al          ; EGA port: sequencer data register ;~ 01A2:9A28
cs=0x1a2;eip=0x009a29; 	T(dx = *(dw*)(((db*)&seg_1f171)+1););	// 24097                  mov     dx, seg_1F171+1 ;~ 01A2:9A29
cs=0x1a2;eip=0x009a2d; 	T(ds = dx;);	// 24098                  mov     ds, dx ;~ 01A2:9A2D
cs=0x1a2;eip=0x009a2f; 	T(es = dx;);	// 24100                  mov     es, dx ;~ 01A2:9A2F
cs=0x1a2;eip=0x009a31; 	T(ax = 0x28;);	// 24102                  mov     ax, 28h ; '(' ;~ 01A2:9A31
cs=0x1a2;eip=0x009a34; 	X(MOV(*(dw*)(raddr(ss,bp-6)), ax));	// 24103                  mov     [bp-6], ax ;~ 01A2:9A34
cs=0x1a2;eip=0x009a37; 	T(MOV(si, *(dw*)(raddr(ss,bp+8))));	// 24104                  mov     si, [bp+8] ;~ 01A2:9A37
cs=0x1a2;eip=0x009a3a; 	T(SUB(si, *(dw*)(raddr(ss,bp+4))));	// 24105                  sub     si, [bp+4] ;~ 01A2:9A3A
cs=0x1a2;eip=0x009a3d; 	T(MOV(di, *(dw*)(raddr(ss,bp+0x0A))));	// 24106                  mov     di, [bp+0Ah] ;~ 01A2:9A3D
cs=0x1a2;eip=0x009a40; 	T(SUB(di, *(dw*)(raddr(ss,bp+6))));	// 24107                  sub     di, [bp+6] ;~ 01A2:9A40
cs=0x1a2;eip=0x009a43; 	J(JGE(loc_19a4c));	// 24108                  jge     short loc_19A4C ;~ 01A2:9A43
cs=0x1a2;eip=0x009a45; 	T(NEG(ax));	// 24109                  neg     ax ;~ 01A2:9A45
cs=0x1a2;eip=0x009a47; 	X(MOV(*(dw*)(raddr(ss,bp-6)), ax));	// 24110                  mov     [bp-6], ax ;~ 01A2:9A47
cs=0x1a2;eip=0x009a4a; 	T(NEG(di));	// 24111                  neg     di ;~ 01A2:9A4A
loc_19a4c:
	// 5943 
cs=0x1a2;eip=0x009a4c; 	T(CMP(si, 0));	// 24114                  cmp     si, 0 ;~ 01A2:9A4C
cs=0x1a2;eip=0x009a4f; 	J(JZ(loc_19a59));	// 24115                  jz      short loc_19A59 ;~ 01A2:9A4F
cs=0x1a2;eip=0x009a51; 	T(CMP(di, 0));	// 24116                  cmp     di, 0 ;~ 01A2:9A51
cs=0x1a2;eip=0x009a54; 	J(JZ(loc_19a76));	// 24117                  jz      short loc_19A76 ;~ 01A2:9A54
cs=0x1a2;eip=0x009a56; 	J(JMP(loc_19ae1));	// 24118                  jmp     loc_19AE1 ;~ 01A2:9A56
loc_19a59:
	// 5944 
cs=0x1a2;eip=0x009a59; 	T(cx = di;);	// 24122                  mov     cx, di ;~ 01A2:9A59
cs=0x1a2;eip=0x009a5b; 	T(INC(cx));	// 24123                  inc     cx ;~ 01A2:9A5B
cs=0x1a2;eip=0x009a5c; 	T(MOV(bx, *(dw*)(raddr(ss,bp-6))));	// 24124                  mov     bx, [bp-6] ;~ 01A2:9A5C
cs=0x1a2;eip=0x009a5f; 	X(POP(si));	// 24125                  pop     si ;~ 01A2:9A5F
cs=0x1a2;eip=0x009a60; 	T(dx = 0x3CE;);	// 24126                  mov     dx, 3CEh ;~ 01A2:9A60
cs=0x1a2;eip=0x009a63; 	T(al = 8;);	// 24127                  mov     al, 8 ;~ 01A2:9A63
cs=0x1a2;eip=0x009a65; 	S(OUT(dx, al));	// 24128                  out     dx, al          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9A65
cs=0x1a2;eip=0x009a66; 	T(INC(dx));	// 24131                  inc     dx ;~ 01A2:9A66
cs=0x1a2;eip=0x009a67; 	T(ax = si;);	// 24132                  mov     ax, si ;~ 01A2:9A67
cs=0x1a2;eip=0x009a69; 	S(OUT(dx, al));	// 24133                  out     dx, al          ; EGA port: graphics controller data register ;~ 01A2:9A69
cs=0x1a2;eip=0x009a6a; 	X(POP(di));	// 24134                  pop     di ;~ 01A2:9A6A
loc_19a6b:
	// 5945 
cs=0x1a2;eip=0x009a6b; 	T(MOV(al, *(raddr(ds,di))));	// 24137                  mov     al, [di] ;~ 01A2:9A6B
cs=0x1a2;eip=0x009a6d; 	X(MOV(*(raddr(ds,di)), al));	// 24138                  mov     [di], al ;~ 01A2:9A6D
cs=0x1a2;eip=0x009a6f; 	T(ADD(di, bx));	// 24139                  add     di, bx ;~ 01A2:9A6F
cs=0x1a2;eip=0x009a71; 	J(LOOP(loc_19a6b));	// 24140                  loop    loc_19A6B ;~ 01A2:9A71
cs=0x1a2;eip=0x009a73; 	J(JMP(loc_19b5e));	// 24141                  jmp     loc_19B5E ;~ 01A2:9A73
loc_19a76:
	// 5946 
cs=0x1a2;eip=0x009a76; 	T(cx = si;);	// 24145                  mov     cx, si ;~ 01A2:9A76
cs=0x1a2;eip=0x009a78; 	X(POP(si));	// 24146                  pop     si ;~ 01A2:9A78
cs=0x1a2;eip=0x009a79; 	X(POP(di));	// 24147                  pop     di ;~ 01A2:9A79
cs=0x1a2;eip=0x009a7a; 	T(MOV(ax, *(dw*)(raddr(ss,bp+4))));	// 24148                  mov     ax, [bp+4] ;~ 01A2:9A7A
cs=0x1a2;eip=0x009a7d; 	T(AND(ax, 7));	// 24149                  and     ax, 7 ;~ 01A2:9A7D
cs=0x1a2;eip=0x009a80; 	J(JZ(loc_19aa9));	// 24150                  jz      short loc_19AA9 ;~ 01A2:9A80
cs=0x1a2;eip=0x009a82; 	T(bx = 0x0FF;);	// 24151                  mov     bx, 0FFh ;~ 01A2:9A82
cs=0x1a2;eip=0x009a85; 	X(PUSH(cx));	// 24152                  push    cx ;~ 01A2:9A85
cs=0x1a2;eip=0x009a86; 	T(cx = ax;);	// 24153                  mov     cx, ax ;~ 01A2:9A86
cs=0x1a2;eip=0x009a88; 	T(SHR(bx, cl));	// 24154                  shr     bx, cl ;~ 01A2:9A88
cs=0x1a2;eip=0x009a8a; 	X(POP(cx));	// 24155                  pop     cx ;~ 01A2:9A8A
cs=0x1a2;eip=0x009a8b; 	T(ADD(cx, ax));	// 24156                  add     cx, ax ;~ 01A2:9A8B
cs=0x1a2;eip=0x009a8d; 	T(SUB(cx, 8));	// 24157                  sub     cx, 8 ;~ 01A2:9A8D
cs=0x1a2;eip=0x009a90; 	J(JGE(loc_19a9a));	// 24158                  jge     short loc_19A9A ;~ 01A2:9A90
cs=0x1a2;eip=0x009a92; 	T(NEG(cx));	// 24159                  neg     cx ;~ 01A2:9A92
cs=0x1a2;eip=0x009a94; 	T(SHR(bx, cl));	// 24160                  shr     bx, cl ;~ 01A2:9A94
cs=0x1a2;eip=0x009a96; 	T(SHL(bx, cl));	// 24161                  shl     bx, cl ;~ 01A2:9A96
cs=0x1a2;eip=0x009a98; 	T(XOR(cx, cx));	// 24162                  xor     cx, cx ;~ 01A2:9A98
loc_19a9a:
	// 5947 
cs=0x1a2;eip=0x009a9a; 	T(dx = 0x3CE;);	// 24165                  mov     dx, 3CEh ;~ 01A2:9A9A
cs=0x1a2;eip=0x009a9d; 	T(al = 8;);	// 24166                  mov     al, 8 ;~ 01A2:9A9D
cs=0x1a2;eip=0x009a9f; 	S(OUT(dx, al));	// 24167                  out     dx, al          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9A9F
cs=0x1a2;eip=0x009aa0; 	T(INC(dx));	// 24170                  inc     dx ;~ 01A2:9AA0
cs=0x1a2;eip=0x009aa1; 	T(al = bl;);	// 24171                  mov     al, bl ;~ 01A2:9AA1
cs=0x1a2;eip=0x009aa3; 	S(OUT(dx, al));	// 24172                  out     dx, al          ; EGA port: graphics controller data register ;~ 01A2:9AA3
cs=0x1a2;eip=0x009aa4; 	T(MOV(ah, *(raddr(ds,di))));	// 24173                  mov     ah, [di] ;~ 01A2:9AA4
cs=0x1a2;eip=0x009aa6; 	X(MOV(*(raddr(ds,di)), al));	// 24174                  mov     [di], al ;~ 01A2:9AA6
cs=0x1a2;eip=0x009aa8; 	T(INC(di));	// 24175                  inc     di ;~ 01A2:9AA8
loc_19aa9:
	// 5948 
cs=0x1a2;eip=0x009aa9; 	T(bx = cx;);	// 24178                  mov     bx, cx ;~ 01A2:9AA9
cs=0x1a2;eip=0x009aab; 	T(CMP(bx, 8));	// 24179                  cmp     bx, 8 ;~ 01A2:9AAB
cs=0x1a2;eip=0x009aae; 	J(JL(loc_19ac2));	// 24180                  jl      short loc_19AC2 ;~ 01A2:9AAE
cs=0x1a2;eip=0x009ab0; 	T(SHR(cx, 1));	// 24181                  shr     cx, 1 ;~ 01A2:9AB0
cs=0x1a2;eip=0x009ab2; 	T(SHR(cx, 1));	// 24182                  shr     cx, 1 ;~ 01A2:9AB2
cs=0x1a2;eip=0x009ab4; 	T(SHR(cx, 1));	// 24183                  shr     cx, 1 ;~ 01A2:9AB4
cs=0x1a2;eip=0x009ab6; 	T(dx = 0x3CE;);	// 24184                  mov     dx, 3CEh ;~ 01A2:9AB6
cs=0x1a2;eip=0x009ab9; 	T(al = 8;);	// 24185                  mov     al, 8 ;~ 01A2:9AB9
cs=0x1a2;eip=0x009abb; 	S(OUT(dx, al));	// 24186                  out     dx, al          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9ABB
cs=0x1a2;eip=0x009abc; 	T(INC(dx));	// 24189                  inc     dx ;~ 01A2:9ABC
cs=0x1a2;eip=0x009abd; 	T(al = 0x0FF;);	// 24190                  mov     al, 0FFh ;~ 01A2:9ABD
cs=0x1a2;eip=0x009abf; 	S(OUT(dx, al));	// 24191                  out     dx, al          ; EGA port: graphics controller data register ;~ 01A2:9ABF
	// 24192                  rep stosb ;~ 01A2:9AC0
cs=0x1a2;eip=0x009ac0; 	X(	REP STOSB);	// 24192                  rep stosb ;~ 01A2:9AC0
loc_19ac2:
	// 5949 
cs=0x1a2;eip=0x009ac2; 	T(AND(bx, 7));	// 24195                  and     bx, 7 ;~ 01A2:9AC2
cs=0x1a2;eip=0x009ac5; 	J(JZ(loc_19adf));	// 24196                  jz      short loc_19ADF ;~ 01A2:9AC5
cs=0x1a2;eip=0x009ac7; 	T(ax = 0x0FFFF;);	// 24197                  mov     ax, 0FFFFh ;~ 01A2:9AC7
cs=0x1a2;eip=0x009aca; 	T(cx = bx;);	// 24198                  mov     cx, bx ;~ 01A2:9ACA
cs=0x1a2;eip=0x009acc; 	T(SHR(ax, cl));	// 24199                  shr     ax, cl ;~ 01A2:9ACC
cs=0x1a2;eip=0x009ace; 	T(XOR(ah, 0x0FF));	// 24200                  xor     ah, 0FFh ;~ 01A2:9ACE
cs=0x1a2;eip=0x009ad1; 	T(dx = 0x3CE;);	// 24201                  mov     dx, 3CEh ;~ 01A2:9AD1
cs=0x1a2;eip=0x009ad4; 	T(al = 8;);	// 24202                  mov     al, 8 ;~ 01A2:9AD4
cs=0x1a2;eip=0x009ad6; 	S(OUT(dx, al));	// 24203                  out     dx, al          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9AD6
cs=0x1a2;eip=0x009ad7; 	T(INC(dx));	// 24206                  inc     dx ;~ 01A2:9AD7
cs=0x1a2;eip=0x009ad8; 	T(al = ah;);	// 24207                  mov     al, ah ;~ 01A2:9AD8
cs=0x1a2;eip=0x009ada; 	S(OUT(dx, al));	// 24208                  out     dx, al          ; EGA port: graphics controller data register ;~ 01A2:9ADA
cs=0x1a2;eip=0x009adb; 	T(MOV(al, *(raddr(ds,di))));	// 24209                  mov     al, [di] ;~ 01A2:9ADB
cs=0x1a2;eip=0x009add; 	X(MOV(*(raddr(ds,di)), al));	// 24210                  mov     [di], al ;~ 01A2:9ADD
loc_19adf:
	// 5950 
cs=0x1a2;eip=0x009adf; 	J(JMP(loc_19b5e));	// 24213                  jmp     short loc_19B5E ;~ 01A2:9ADF
loc_19ae1:
	// 5951 
cs=0x1a2;eip=0x009ae1; 	T(CMP(si, di));	// 24217                  cmp     si, di ;~ 01A2:9AE1
cs=0x1a2;eip=0x009ae3; 	J(JLE(loc_19b22));	// 24218                  jle     short loc_19B22 ;~ 01A2:9AE3
cs=0x1a2;eip=0x009ae5; 	T(cx = si;);	// 24219                  mov     cx, si ;~ 01A2:9AE5
cs=0x1a2;eip=0x009ae7; 	T(INC(cx));	// 24220                  inc     cx ;~ 01A2:9AE7
cs=0x1a2;eip=0x009ae8; 	T(SHL(di, 1));	// 24221                  shl     di, 1 ;~ 01A2:9AE8
cs=0x1a2;eip=0x009aea; 	T(bx = di;);	// 24222                  mov     bx, di ;~ 01A2:9AEA
cs=0x1a2;eip=0x009aec; 	T(SUB(bx, si));	// 24223                  sub     bx, si ;~ 01A2:9AEC
cs=0x1a2;eip=0x009aee; 	T(NEG(si));	// 24224                  neg     si ;~ 01A2:9AEE
cs=0x1a2;eip=0x009af0; 	T(ADD(si, bx));	// 24225                  add     si, bx ;~ 01A2:9AF0
cs=0x1a2;eip=0x009af2; 	X(MOV(*(dw*)(raddr(ss,bp-2)), di));	// 24226                  mov     [bp-2], di ;~ 01A2:9AF2
cs=0x1a2;eip=0x009af5; 	X(MOV(*(dw*)(raddr(ss,bp-4)), si));	// 24227                  mov     [bp-4], si ;~ 01A2:9AF5
cs=0x1a2;eip=0x009af8; 	T(dx = 0x3CE;);	// 24228                  mov     dx, 3CEh ;~ 01A2:9AF8
cs=0x1a2;eip=0x009afb; 	T(al = 8;);	// 24229                  mov     al, 8 ;~ 01A2:9AFB
cs=0x1a2;eip=0x009afd; 	S(OUT(dx, al));	// 24230                  out     dx, al          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9AFD
cs=0x1a2;eip=0x009afe; 	T(INC(dx));	// 24233                  inc     dx ;~ 01A2:9AFE
cs=0x1a2;eip=0x009aff; 	X(POP(ax));	// 24234                  pop     ax ;~ 01A2:9AFF
cs=0x1a2;eip=0x009b00; 	X(POP(di));	// 24235                  pop     di ;~ 01A2:9B00
loc_19b01:
	// 5952 
cs=0x1a2;eip=0x009b01; 	S(OUT(dx, al));	// 24239                  out     dx, al          ; EGA port: graphics controller data register ;~ 01A2:9B01
cs=0x1a2;eip=0x009b02; 	T(MOV(ah, *(raddr(ds,di))));	// 24240                  mov     ah, [di] ;~ 01A2:9B02
cs=0x1a2;eip=0x009b04; 	X(MOV(*(raddr(ds,di)), ah));	// 24241                  mov     [di], ah ;~ 01A2:9B04
cs=0x1a2;eip=0x009b06; 	T(ROR(al, 1));	// 24242                  ror     al, 1 ;~ 01A2:9B06
cs=0x1a2;eip=0x009b08; 	T(ADC(di, 0));	// 24243                  adc     di, 0 ;~ 01A2:9B08
cs=0x1a2;eip=0x009b0b; 	T(TEST(bx, 0x8000));	// 24244                  test    bx, 8000h ;~ 01A2:9B0B
cs=0x1a2;eip=0x009b0f; 	J(JNZ(loc_19b1b));	// 24245                  jnz     short loc_19B1B ;~ 01A2:9B0F
cs=0x1a2;eip=0x009b11; 	T(ADD(bx, *(dw*)(raddr(ss,bp-4))));	// 24246                  add     bx, [bp-4] ;~ 01A2:9B11
cs=0x1a2;eip=0x009b14; 	T(ADD(di, *(dw*)(raddr(ss,bp-6))));	// 24247                  add     di, [bp-6] ;~ 01A2:9B14
cs=0x1a2;eip=0x009b17; 	J(LOOP(loc_19b01));	// 24248                  loop    loc_19B01 ;~ 01A2:9B17
cs=0x1a2;eip=0x009b19; 	J(JMP(loc_19b5e));	// 24249                  jmp     short loc_19B5E ;~ 01A2:9B19
loc_19b1b:
	// 5953 
cs=0x1a2;eip=0x009b1b; 	T(ADD(bx, *(dw*)(raddr(ss,bp-2))));	// 24253                  add     bx, [bp-2] ;~ 01A2:9B1B
cs=0x1a2;eip=0x009b1e; 	J(LOOP(loc_19b01));	// 24254                  loop    loc_19B01 ;~ 01A2:9B1E
cs=0x1a2;eip=0x009b20; 	J(JMP(loc_19b5e));	// 24255                  jmp     short loc_19B5E ;~ 01A2:9B20
loc_19b22:
	// 5954 
cs=0x1a2;eip=0x009b22; 	T(cx = di;);	// 24259                  mov     cx, di ;~ 01A2:9B22
cs=0x1a2;eip=0x009b24; 	T(INC(cx));	// 24260                  inc     cx ;~ 01A2:9B24
cs=0x1a2;eip=0x009b25; 	T(SHL(si, 1));	// 24261                  shl     si, 1 ;~ 01A2:9B25
cs=0x1a2;eip=0x009b27; 	T(bx = si;);	// 24262                  mov     bx, si ;~ 01A2:9B27
cs=0x1a2;eip=0x009b29; 	T(SUB(bx, di));	// 24263                  sub     bx, di ;~ 01A2:9B29
cs=0x1a2;eip=0x009b2b; 	T(NEG(di));	// 24264                  neg     di ;~ 01A2:9B2B
cs=0x1a2;eip=0x009b2d; 	T(ADD(di, bx));	// 24265                  add     di, bx ;~ 01A2:9B2D
cs=0x1a2;eip=0x009b2f; 	X(MOV(*(dw*)(raddr(ss,bp-4)), di));	// 24266                  mov     [bp-4], di ;~ 01A2:9B2F
cs=0x1a2;eip=0x009b32; 	X(MOV(*(dw*)(raddr(ss,bp-2)), si));	// 24267                  mov     [bp-2], si ;~ 01A2:9B32
cs=0x1a2;eip=0x009b35; 	T(dx = 0x3CE;);	// 24268                  mov     dx, 3CEh ;~ 01A2:9B35
cs=0x1a2;eip=0x009b38; 	T(al = 8;);	// 24269                  mov     al, 8 ;~ 01A2:9B38
cs=0x1a2;eip=0x009b3a; 	S(OUT(dx, al));	// 24270                  out     dx, al          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9B3A
cs=0x1a2;eip=0x009b3b; 	T(INC(dx));	// 24273                  inc     dx ;~ 01A2:9B3B
cs=0x1a2;eip=0x009b3c; 	X(POP(ax));	// 24274                  pop     ax ;~ 01A2:9B3C
cs=0x1a2;eip=0x009b3d; 	X(POP(di));	// 24275                  pop     di ;~ 01A2:9B3D
cs=0x1a2;eip=0x009b3e; 	S(OUT(dx, al));	// 24276                  out     dx, al          ; EGA port: graphics controller data register ;~ 01A2:9B3E
loc_19b3f:
	// 5955 
cs=0x1a2;eip=0x009b3f; 	T(MOV(ah, *(raddr(ds,di))));	// 24280                  mov     ah, [di] ;~ 01A2:9B3F
cs=0x1a2;eip=0x009b41; 	X(MOV(*(raddr(ds,di)), ah));	// 24281                  mov     [di], ah ;~ 01A2:9B41
cs=0x1a2;eip=0x009b43; 	T(ADD(di, *(dw*)(raddr(ss,bp-6))));	// 24282                  add     di, [bp-6] ;~ 01A2:9B43
cs=0x1a2;eip=0x009b46; 	T(TEST(bx, 0x8000));	// 24283                  test    bx, 8000h ;~ 01A2:9B46
cs=0x1a2;eip=0x009b4a; 	J(JNZ(loc_19b59));	// 24284                  jnz     short loc_19B59 ;~ 01A2:9B4A
cs=0x1a2;eip=0x009b4c; 	T(ADD(bx, *(dw*)(raddr(ss,bp-4))));	// 24285                  add     bx, [bp-4] ;~ 01A2:9B4C
cs=0x1a2;eip=0x009b4f; 	T(ROR(al, 1));	// 24286                  ror     al, 1 ;~ 01A2:9B4F
cs=0x1a2;eip=0x009b51; 	T(ADC(di, 0));	// 24287                  adc     di, 0 ;~ 01A2:9B51
cs=0x1a2;eip=0x009b54; 	S(OUT(dx, al));	// 24288                  out     dx, al          ; EGA port: graphics controller data register ;~ 01A2:9B54
cs=0x1a2;eip=0x009b55; 	J(LOOP(loc_19b3f));	// 24289                  loop    loc_19B3F ;~ 01A2:9B55
cs=0x1a2;eip=0x009b57; 	J(JMP(loc_19b5e));	// 24290                  jmp     short loc_19B5E ;~ 01A2:9B57
loc_19b59:
	// 5956 
cs=0x1a2;eip=0x009b59; 	T(ADD(bx, *(dw*)(raddr(ss,bp-2))));	// 24294                  add     bx, [bp-2] ;~ 01A2:9B59
cs=0x1a2;eip=0x009b5c; 	J(LOOP(loc_19b3f));	// 24295                  loop    loc_19B3F ;~ 01A2:9B5C
loc_19b5e:
	// 5957 
cs=0x1a2;eip=0x009b5e; 	T(dx = 0x3CE;);	// 24299                  mov     dx, 3CEh ;~ 01A2:9B5E
cs=0x1a2;eip=0x009b61; 	T(al = 8;);	// 24300                  mov     al, 8 ;~ 01A2:9B61
cs=0x1a2;eip=0x009b63; 	S(OUT(dx, al));	// 24301                  out     dx, al          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9B63
cs=0x1a2;eip=0x009b64; 	T(INC(dx));	// 24304                  inc     dx ;~ 01A2:9B64
cs=0x1a2;eip=0x009b65; 	T(al = 0x0FF;);	// 24305                  mov     al, 0FFh ;~ 01A2:9B65
cs=0x1a2;eip=0x009b67; 	S(OUT(dx, al));	// 24306                  out     dx, al          ; EGA port: graphics controller data register ;~ 01A2:9B67
cs=0x1a2;eip=0x009b68; 	T(DEC(dx));	// 24307                  dec     dx ;~ 01A2:9B68
cs=0x1a2;eip=0x009b69; 	T(al = 1;);	// 24308                  mov     al, 1 ;~ 01A2:9B69
cs=0x1a2;eip=0x009b6b; 	S(OUT(dx, al));	// 24309                  out     dx, al          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9B6B
cs=0x1a2;eip=0x009b6c; 	T(INC(dx));	// 24311                  inc     dx ;~ 01A2:9B6C
cs=0x1a2;eip=0x009b6d; 	T(XOR(ax, ax));	// 24312                  xor     ax, ax ;~ 01A2:9B6D
cs=0x1a2;eip=0x009b6f; 	S(OUT(dx, al));	// 24313                  out     dx, al          ; EGA port: graphics controller data register ;~ 01A2:9B6F
cs=0x1a2;eip=0x009b70; 	X(POP(es));	// 24314                  pop     es ;~ 01A2:9B70
cs=0x1a2;eip=0x009b71; 	X(POP(ds));	// 24315                  pop     ds ;~ 01A2:9B71
cs=0x1a2;eip=0x009b72; 	X(POP(si));	// 24317                  pop     si ;~ 01A2:9B72
cs=0x1a2;eip=0x009b73; 	X(POP(di));	// 24318                  pop     di ;~ 01A2:9B73
cs=0x1a2;eip=0x009b74; 	T(sp = bp;);	// 24319                  mov     sp, bp ;~ 01A2:9B74
cs=0x1a2;eip=0x009b76; 	X(POP(bp));	// 24320                  pop     bp ;~ 01A2:9B76
cs=0x1a2;eip=0x009b77; 	J(RETN(0));	// 24321                  retn ;~ 01A2:9B77

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_199dd: 	goto loc_199dd;
        case m2c::kloc_19a4c: 	goto loc_19a4c;
        case m2c::kloc_19a59: 	goto loc_19a59;
        case m2c::kloc_19a6b: 	goto loc_19a6b;
        case m2c::kloc_19a76: 	goto loc_19a76;
        case m2c::kloc_19a9a: 	goto loc_19a9a;
        case m2c::kloc_19aa9: 	goto loc_19aa9;
        case m2c::kloc_19ac2: 	goto loc_19ac2;
        case m2c::kloc_19adf: 	goto loc_19adf;
        case m2c::kloc_19ae1: 	goto loc_19ae1;
        case m2c::kloc_19b01: 	goto loc_19b01;
        case m2c::kloc_19b1b: 	goto loc_19b1b;
        case m2c::kloc_19b22: 	goto loc_19b22;
        case m2c::kloc_19b3f: 	goto loc_19b3f;
        case m2c::kloc_19b59: 	goto loc_19b59;
        case m2c::kloc_19b5e: 	goto loc_19b5e;
        case m2c::ksub_199b0: 	goto sub_199b0;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_9b78_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_9b78_proc:
    _begin:
cs=0x1a2;eip=0x009b78; 	T(XOR(ah, ah));	// 24325                  xor     ah, ah ;~ 01A2:9B78
cs=0x1a2;eip=0x009b7a; 	T(XOR(bx, bx));	// 24326                  xor     bx, bx ;~ 01A2:9B7A
cs=0x1a2;eip=0x009b7c; 	T(bp = cx;);	// 24327                  mov     bp, cx ;~ 01A2:9B7C
loc_19b7e:
	// 5958 
cs=0x1a2;eip=0x009b7e; 	T(cx = bp;);	// 24331                  mov     cx, bp ;~ 01A2:9B7E
cs=0x1a2;eip=0x009b80; 	T(INC(cx));	// 24332                  inc     cx ;~ 01A2:9B80
cs=0x1a2;eip=0x009b81; 	T(LODSB);	// 24333                  lodsb ;~ 01A2:9B81
cs=0x1a2;eip=0x009b82; 	T(ADD(bx, ax));	// 24334                  add     bx, ax ;~ 01A2:9B82
cs=0x1a2;eip=0x009b84; 	T(AND(cl, 7));	// 24335                  and     cl, 7 ;~ 01A2:9B84
cs=0x1a2;eip=0x009b87; 	J(JZ(loc_19b8b));	// 24336                  jz      short loc_19B8B ;~ 01A2:9B87
cs=0x1a2;eip=0x009b89; 	T(ROL(bx, cl));	// 24337                  rol     bx, cl ;~ 01A2:9B89
loc_19b8b:
	// 5959 
cs=0x1a2;eip=0x009b8b; 	T(CMP(si, 0));	// 24340                  cmp     si, 0 ;~ 01A2:9B8B
cs=0x1a2;eip=0x009b8e; 	J(JNZ(loc_19b99));	// 24341                  jnz     short loc_19B99 ;~ 01A2:9B8E
cs=0x1a2;eip=0x009b90; 	T(ax = ds;);	// 24342                  mov     ax, ds ;~ 01A2:9B90
cs=0x1a2;eip=0x009b92; 	T(ADD(ax, 0x10));	// 24343                  add     ax, 10h ;~ 01A2:9B92
cs=0x1a2;eip=0x009b95; 	T(ds = ax;);	// 24344                  mov     ds, ax ;~ 01A2:9B95
cs=0x1a2;eip=0x009b97; 	T(XOR(ah, ah));	// 24346                  xor     ah, ah ;~ 01A2:9B97
loc_19b99:
	// 5960 
cs=0x1a2;eip=0x009b99; 	T(DEC(bp));	// 24349                  dec     bp ;~ 01A2:9B99
cs=0x1a2;eip=0x009b9a; 	J(JNZ(loc_19b7e));	// 24350                  jnz     short loc_19B7E ;~ 01A2:9B9A
cs=0x1a2;eip=0x009b9c; 	T(DEC(dx));	// 24351                  dec     dx ;~ 01A2:9B9C
cs=0x1a2;eip=0x009b9d; 	J(JNZ(loc_19b7e));	// 24352                  jnz     short loc_19B7E ;~ 01A2:9B9D
cs=0x1a2;eip=0x009b9f; 	J(RETN(0));	// 24353                  retn ;~ 01A2:9B9F

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_19b7e: 	goto loc_19b7e;
        case m2c::kloc_19b8b: 	goto loc_19b8b;
        case m2c::kloc_19b99: 	goto loc_19b99;
        case m2c::kseg000_9b78_proc: 	goto seg000_9b78_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_19ba0(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_19ba0:
    _begin:
cs=0x1a2;eip=0x009ba0; 	X(PUSH(ax));	// 24359                  push    ax ;~ 01A2:9BA0
cs=0x1a2;eip=0x009ba1; 	X(PUSH(dx));	// 24360                  push    dx ;~ 01A2:9BA1
cs=0x1a2;eip=0x009ba2; 	X(PUSH(cx));	// 24361                  push    cx ;~ 01A2:9BA2
cs=0x1a2;eip=0x009ba3; 	X(PUSH(bx));	// 24362                  push    bx ;~ 01A2:9BA3
cs=0x1a2;eip=0x009ba4; 	X(PUSH(bp));	// 24363                  push    bp ;~ 01A2:9BA4
cs=0x1a2;eip=0x009ba5; 	X(PUSH(di));	// 24364                  push    di ;~ 01A2:9BA5
cs=0x1a2;eip=0x009ba6; 	T(ch = 2;);	// 24365                  mov     ch, 2 ;~ 01A2:9BA6
cs=0x1a2;eip=0x009ba8; 	J(JMP(loc_19bc2));	// 24366                  jmp     short loc_19BC2 ;~ 01A2:9BA8
ret_1a2_9baa:
	// 5961 
cs=0x1a2;eip=0x009baa; 	X(PUSH(ax));	// 24368                  push    ax ;~ 01A2:9BAA
cs=0x1a2;eip=0x009bab; 	X(PUSH(bx));	// 24369                  push    bx ;~ 01A2:9BAB
cs=0x1a2;eip=0x009bac; 	X(PUSH(cx));	// 24370                  push    cx ;~ 01A2:9BAC
cs=0x1a2;eip=0x009bad; 	X(PUSH(dx));	// 24371                  push    dx ;~ 01A2:9BAD
cs=0x1a2;eip=0x009bae; 	X(PUSH(bp));	// 24372                  push    bp ;~ 01A2:9BAE
cs=0x1a2;eip=0x009baf; 	X(PUSH(si));	// 24373                  push    si ;~ 01A2:9BAF
cs=0x1a2;eip=0x009bb0; 	X(PUSH(di));	// 24374                  push    di ;~ 01A2:9BB0
cs=0x1a2;eip=0x009bb1; 	X(PUSH(es));	// 24375                  push    es ;~ 01A2:9BB1
cs=0x1a2;eip=0x009bb2; 	X(PUSH(ds));	// 24376                  push    ds ;~ 01A2:9BB2
cs=0x1a2;eip=0x009bb3; 	T(ch = 1;);	// 24377                  mov     ch, 1 ;~ 01A2:9BB3
cs=0x1a2;eip=0x009bb5; 	J(JMP(loc_19bc2));	// 24378                  jmp     short loc_19BC2 ;~ 01A2:9BB5
loc_19bb7:
	// 5962 
cs=0x1a2;eip=0x009bb7; 	X(PUSH(ax));	// 24384                  push    ax ;~ 01A2:9BB7
cs=0x1a2;eip=0x009bb8; 	X(PUSH(bx));	// 24385                  push    bx ;~ 01A2:9BB8
cs=0x1a2;eip=0x009bb9; 	X(PUSH(cx));	// 24386                  push    cx ;~ 01A2:9BB9
cs=0x1a2;eip=0x009bba; 	X(PUSH(dx));	// 24387                  push    dx ;~ 01A2:9BBA
cs=0x1a2;eip=0x009bbb; 	X(PUSH(bp));	// 24388                  push    bp ;~ 01A2:9BBB
cs=0x1a2;eip=0x009bbc; 	X(PUSH(si));	// 24389                  push    si ;~ 01A2:9BBC
cs=0x1a2;eip=0x009bbd; 	X(PUSH(di));	// 24390                  push    di ;~ 01A2:9BBD
cs=0x1a2;eip=0x009bbe; 	X(PUSH(es));	// 24391                  push    es ;~ 01A2:9BBE
cs=0x1a2;eip=0x009bbf; 	X(PUSH(ds));	// 24392                  push    ds ;~ 01A2:9BBF
cs=0x1a2;eip=0x009bc0; 	T(XOR(ch, ch));	// 24393                  xor     ch, ch ;~ 01A2:9BC0
loc_19bc2:
	// 5963 
cs=0x1a2;eip=0x009bc2; 	T(di = si;);	// 24397                  mov     di, si ;~ 01A2:9BC2
cs=0x1a2;eip=0x009bc4; 	T(es = seg_1f8f4;);	// 24398                  mov     es, ds:seg_1F8F4 ;~ 01A2:9BC4
cs=0x1a2;eip=0x009bc8; 	T(OR(cl, cl));	// 24400                  or      cl, cl ;~ 01A2:9BC8
cs=0x1a2;eip=0x009bca; 	J(JGE(loc_19bce));	// 24401                  jge     short loc_19BCE ;~ 01A2:9BCA
cs=0x1a2;eip=0x009bcc; 	T(cl = 4;);	// 24402                  mov     cl, 4 ;~ 01A2:9BCC
loc_19bce:
	// 5964 
cs=0x1a2;eip=0x009bce; 	T(si = 0x4D24;);	// 24405                  mov     si, 4D24h ;~ 01A2:9BCE
loc_19bd1:
	// 5965 
cs=0x1a2;eip=0x009bd1; 	T(MOV(ax, *(dw*)(raddr(ss,si))));	// 24409                  mov     ax, ss:[si] ;~ 01A2:9BD1
cs=0x1a2;eip=0x009bd4; 	T(ADD(si, 2));	// 24410                  add     si, 2 ;~ 01A2:9BD4
cs=0x1a2;eip=0x009bd7; 	T(OR(ax, ax));	// 24411                  or      ax, ax ;~ 01A2:9BD7
cs=0x1a2;eip=0x009bd9; 	J(JZ(loc_19bff));	// 24412                  jz      short loc_19BFF ;~ 01A2:9BD9
cs=0x1a2;eip=0x009bdb; 	T(CMP(dx, ax));	// 24413                  cmp     dx, ax ;~ 01A2:9BDB
cs=0x1a2;eip=0x009bdd; 	J(JGE(loc_19beb));	// 24414                  jge     short loc_19BEB ;~ 01A2:9BDD
cs=0x1a2;eip=0x009bdf; 	T(OR(cl, cl));	// 24415                  or      cl, cl ;~ 01A2:9BDF
cs=0x1a2;eip=0x009be1; 	J(JZ(loc_19be7));	// 24416                  jz      short loc_19BE7 ;~ 01A2:9BE1
cs=0x1a2;eip=0x009be3; 	T(DEC(cl));	// 24417                  dec     cl ;~ 01A2:9BE3
cs=0x1a2;eip=0x009be5; 	J(JMP(loc_19bd1));	// 24418                  jmp     short loc_19BD1 ;~ 01A2:9BE5
loc_19be7:
	// 5966 
cs=0x1a2;eip=0x009be7; 	T(bl = 0x30;);	// 24422                  mov     bl, 30h ; '0' ;~ 01A2:9BE7
cs=0x1a2;eip=0x009be9; 	J(JMP(loc_19bf8));	// 24423                  jmp     short loc_19BF8 ;~ 01A2:9BE9
loc_19beb:
	// 5967 
cs=0x1a2;eip=0x009beb; 	T(bl = 0x0FF;);	// 24427                  mov     bl, 0FFh ;~ 01A2:9BEB
loc_19bed:
	// 5968 
cs=0x1a2;eip=0x009bed; 	T(INC(bl));	// 24430                  inc     bl ;~ 01A2:9BED
cs=0x1a2;eip=0x009bef; 	T(SUB(dx, ax));	// 24431                  sub     dx, ax ;~ 01A2:9BEF
cs=0x1a2;eip=0x009bf1; 	J(JNC(loc_19bed));	// 24432                  jnb     short loc_19BED ;~ 01A2:9BF1
cs=0x1a2;eip=0x009bf3; 	T(ADD(dx, ax));	// 24433                  add     dx, ax ;~ 01A2:9BF3
cs=0x1a2;eip=0x009bf5; 	T(ADD(bl, 0x30));	// 24434                  add     bl, 30h ; '0' ;~ 01A2:9BF5
loc_19bf8:
	// 5969 
cs=0x1a2;eip=0x009bf8; 	T(al = bl;);	// 24437                  mov     al, bl ;~ 01A2:9BF8
cs=0x1a2;eip=0x009bfa; 	X(STOSB);	// 24438                  stosb ;~ 01A2:9BFA
cs=0x1a2;eip=0x009bfb; 	T(XOR(cl, cl));	// 24439                  xor     cl, cl ;~ 01A2:9BFB
cs=0x1a2;eip=0x009bfd; 	J(JMP(loc_19bd1));	// 24440                  jmp     short loc_19BD1 ;~ 01A2:9BFD
loc_19bff:
	// 5970 
cs=0x1a2;eip=0x009bff; 	T(OR(ch, ch));	// 24444                  or      ch, ch ;~ 01A2:9BFF
cs=0x1a2;eip=0x009c01; 	J(JNZ(loc_19c06));	// 24445                  jnz     short loc_19C06 ;~ 01A2:9C01
cs=0x1a2;eip=0x009c03; 	X(MOV(*(raddr(ds,di)), 0));	// 24446                  mov     byte ptr [di], 0 ;~ 01A2:9C03
loc_19c06:
	// 5971 
cs=0x1a2;eip=0x009c06; 	T(CMP(ch, 2));	// 24449                  cmp     ch, 2 ;~ 01A2:9C06
cs=0x1a2;eip=0x009c09; 	J(JZ(loc_19c15));	// 24450                  jz      short loc_19C15 ;~ 01A2:9C09
cs=0x1a2;eip=0x009c0b; 	X(POP(ds));	// 24451                  pop     ds ;~ 01A2:9C0B
cs=0x1a2;eip=0x009c0c; 	X(POP(es));	// 24452                  pop     es ;~ 01A2:9C0C
cs=0x1a2;eip=0x009c0d; 	X(POP(di));	// 24454                  pop     di ;~ 01A2:9C0D
cs=0x1a2;eip=0x009c0e; 	X(POP(si));	// 24455                  pop     si ;~ 01A2:9C0E
cs=0x1a2;eip=0x009c0f; 	X(POP(bp));	// 24456                  pop     bp ;~ 01A2:9C0F
cs=0x1a2;eip=0x009c10; 	X(POP(dx));	// 24457                  pop     dx ;~ 01A2:9C10
cs=0x1a2;eip=0x009c11; 	X(POP(cx));	// 24458                  pop     cx ;~ 01A2:9C11
cs=0x1a2;eip=0x009c12; 	X(POP(bx));	// 24459                  pop     bx ;~ 01A2:9C12
cs=0x1a2;eip=0x009c13; 	X(POP(ax));	// 24460                  pop     ax ;~ 01A2:9C13
cs=0x1a2;eip=0x009c14; 	J(RETN(0));	// 24461                  retn ;~ 01A2:9C14
loc_19c15:
	// 5972 
cs=0x1a2;eip=0x009c15; 	T(si = di;);	// 24465                  mov     si, di ;~ 01A2:9C15
cs=0x1a2;eip=0x009c17; 	X(POP(di));	// 24466                  pop     di ;~ 01A2:9C17
cs=0x1a2;eip=0x009c18; 	X(POP(bp));	// 24467                  pop     bp ;~ 01A2:9C18
cs=0x1a2;eip=0x009c19; 	X(POP(bx));	// 24468                  pop     bx ;~ 01A2:9C19
cs=0x1a2;eip=0x009c1a; 	X(POP(cx));	// 24469                  pop     cx ;~ 01A2:9C1A
cs=0x1a2;eip=0x009c1b; 	X(POP(dx));	// 24470                  pop     dx ;~ 01A2:9C1B
cs=0x1a2;eip=0x009c1c; 	X(POP(ax));	// 24471                  pop     ax ;~ 01A2:9C1C
cs=0x1a2;eip=0x009c1d; 	J(RETN(0));	// 24472                  retn ;~ 01A2:9C1D

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_19bb7: 	goto loc_19bb7;
        case m2c::kloc_19bc2: 	goto loc_19bc2;
        case m2c::kloc_19bce: 	goto loc_19bce;
        case m2c::kloc_19bd1: 	goto loc_19bd1;
        case m2c::kloc_19be7: 	goto loc_19be7;
        case m2c::kloc_19beb: 	goto loc_19beb;
        case m2c::kloc_19bed: 	goto loc_19bed;
        case m2c::kloc_19bf8: 	goto loc_19bf8;
        case m2c::kloc_19bff: 	goto loc_19bff;
        case m2c::kloc_19c06: 	goto loc_19c06;
        case m2c::kloc_19c15: 	goto loc_19c15;
        case m2c::kret_1a2_9baa: 	goto ret_1a2_9baa;
        case m2c::ksub_19ba0: 	goto sub_19ba0;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_9c1e_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_9c1e_proc:
    _begin:
loc_19c1e:
	// 5973 
cs=0x1a2;eip=0x009c1e; 	J(return seg000_df4b_proc(m2c::kloc_1df4b, _state););	// 24478                  jmp     loc_1DF4B ;~ 01A2:9C1E
ret_1a2_9c21:
	// 5974 
cs=0x1a2;eip=0x009c21; 	J(CALL(sub_19d9d,0));	// 24480                  call    sub_19D9D ;~ 01A2:9C21
cs=0x1a2;eip=0x009c24; 	T(CMP(al, 0x59));	// 24481                  cmp     al, 59h ; 'Y' ;~ 01A2:9C24
cs=0x1a2;eip=0x009c26; 	J(JZ(loc_19c39));	// 24482                  jz      short loc_19C39 ;~ 01A2:9C26
cs=0x1a2;eip=0x009c28; 	T(CMP(al, 0x79));	// 24483                  cmp     al, 79h ; 'y' ;~ 01A2:9C28
cs=0x1a2;eip=0x009c2a; 	J(JZ(loc_19c39));	// 24484                  jz      short loc_19C39 ;~ 01A2:9C2A
cs=0x1a2;eip=0x009c2c; 	T(CMP(al, 0x6E));	// 24485                  cmp     al, 6Eh ; 'n' ;~ 01A2:9C2C
cs=0x1a2;eip=0x009c2e; 	J(JZ(loc_19c3c));	// 24486                  jz      short loc_19C3C ;~ 01A2:9C2E
cs=0x1a2;eip=0x009c30; 	T(CMP(al, 0x4E));	// 24487                  cmp     al, 4Eh ; 'N' ;~ 01A2:9C30
cs=0x1a2;eip=0x009c32; 	J(JZ(loc_19c3c));	// 24488                  jz      short loc_19C3C ;~ 01A2:9C32
cs=0x1a2;eip=0x009c34; 	T(al = 0x0FF;);	// 24489                  mov     al, 0FFh ;~ 01A2:9C34
cs=0x1a2;eip=0x009c36; 	T(OR(al, al));	// 24490                  or      al, al ;~ 01A2:9C36
cs=0x1a2;eip=0x009c38; 	J(RETN(0));	// 24491                  retn ;~ 01A2:9C38
loc_19c39:
	// 5975 
cs=0x1a2;eip=0x009c39; 	T(XOR(al, al));	// 24496                  xor     al, al ;~ 01A2:9C39
cs=0x1a2;eip=0x009c3b; 	J(RETN(0));	// 24497                  retn ;~ 01A2:9C3B
loc_19c3c:
	// 5976 
cs=0x1a2;eip=0x009c3c; 	T(XOR(al, al));	// 24502                  xor     al, al ;~ 01A2:9C3C
cs=0x1a2;eip=0x009c3e; 	T(OR(al, 1));	// 24503                  or      al, 1 ;~ 01A2:9C3E
cs=0x1a2;eip=0x009c40; 	J(RETN(0));	// 24504                  retn ;~ 01A2:9C40

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_19c39: 	goto loc_19c39;
        case m2c::kloc_19c3c: 	goto loc_19c3c;
        case m2c::kret_1a2_9c21: 	goto ret_1a2_9c21;
        case m2c::kseg000_9c1e_proc: 	goto seg000_9c1e_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_19c41(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_19c41:
    _begin:
cs=0x1a2;eip=0x009c41; 	X(PUSH(di));	// 24511                  push    di ;~ 01A2:9C41
cs=0x1a2;eip=0x009c42; 	T(dx = 0x0FFFF;);	// 24512                  mov     dx, 0FFFFh ;~ 01A2:9C42
cs=0x1a2;eip=0x009c45; 	T(DEC(di));	// 24513                  dec     di ;~ 01A2:9C45
loc_19c46:
	// 5977 
cs=0x1a2;eip=0x009c46; 	T(INC(di));	// 24516                  inc     di ;~ 01A2:9C46
cs=0x1a2;eip=0x009c47; 	T(INC(dx));	// 24517                  inc     dx ;~ 01A2:9C47
cs=0x1a2;eip=0x009c48; 	T(CMP(*(raddr(ds,di)), 0));	// 24518                  cmp     byte ptr [di], 0 ;~ 01A2:9C48
cs=0x1a2;eip=0x009c4b; 	J(JNZ(loc_19c46));	// 24519                  jnz     short loc_19C46 ;~ 01A2:9C4B
cs=0x1a2;eip=0x009c4d; 	X(POP(di));	// 24520                  pop     di ;~ 01A2:9C4D
cs=0x1a2;eip=0x009c4e; 	J(RETN(0));	// 24521                  retn ;~ 01A2:9C4E

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_19c46: 	goto loc_19c46;
        case m2c::ksub_19c41: 	goto sub_19c41;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_9c4f_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_9c4f_proc:
    _begin:
loc_19c4f:
	// 5978 
cs=0x1a2;eip=0x009c4f; 	X(PUSH(ax));	// 24527                  push    ax ;~ 01A2:9C4F
cs=0x1a2;eip=0x009c50; 	T(al = ch;);	// 24528                  mov     al, ch ;~ 01A2:9C50
cs=0x1a2;eip=0x009c52; 	T(XOR(ah, ah));	// 24529                  xor     ah, ah ;~ 01A2:9C52
cs=0x1a2;eip=0x009c54; 	T(SHL(ax, 1));	// 24530                  shl     ax, 1 ;~ 01A2:9C54
cs=0x1a2;eip=0x009c56; 	T(ADD(bp, ax));	// 24531                  add     bp, ax ;~ 01A2:9C56
cs=0x1a2;eip=0x009c58; 	X(POP(ax));	// 24532                  pop     ax ;~ 01A2:9C58
cs=0x1a2;eip=0x009c59; 	T(MOV(bp, *(dw*)(raddr(cs,bp+0))));	// 24533                  mov     bp, cs:[bp+0] ;~ 01A2:9C59
cs=0x1a2;eip=0x009c5d; 	T(OR(bp, bp));	// 24534                  or      bp, bp ;~ 01A2:9C5D
cs=0x1a2;eip=0x009c5f; 	J(JS(locret_19c63));	// 24535                  js      short locret_19C63 ;~ 01A2:9C5F
cs=0x1a2;eip=0x009c61; __disp=bp;
	J(return __dispatch_call(__disp, _state););	// 24536                  jmp     bp ;~ 01A2:9C61
locret_19c63:
	// 5979 
cs=0x1a2;eip=0x009c63; 	J(RETN(0));	// 24540                  retn ;~ 01A2:9C63

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_19c4f: 	goto loc_19c4f;
        case m2c::klocret_19c63: 	goto locret_19c63;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_19c64(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_19c64:
    _begin:
cs=0x1a2;eip=0x009c64; 	T(SHL(dx, 1));	// 24546                  shl     dx, 1 ;~ 01A2:9C64
cs=0x1a2;eip=0x009c66; 	T(ADD(ax, dx));	// 24547                  add     ax, dx ;~ 01A2:9C66
cs=0x1a2;eip=0x009c68; 	X(PUSH(si));	// 24548                  push    si ;~ 01A2:9C68
cs=0x1a2;eip=0x009c69; 	T(si = ax;);	// 24549                  mov     si, ax ;~ 01A2:9C69
cs=0x1a2;eip=0x009c6b; 	T(MOV(ax, *(dw*)(raddr(cs,si))));	// 24550                  mov     ax, cs:[si] ;~ 01A2:9C6B
cs=0x1a2;eip=0x009c6e; 	X(POP(si));	// 24551                  pop     si ;~ 01A2:9C6E
cs=0x1a2;eip=0x009c6f; __disp=ax;
	J(return __dispatch_call(__disp, _state););	// 24552                  jmp     ax ;~ 01A2:9C6F

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_19c64: 	goto sub_19c64;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_19c71(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_19c71:
    _begin:
cs=0x1a2;eip=0x009c71; 	X(PUSH(cx));	// 24560                  push    cx ;~ 01A2:9C71
cs=0x1a2;eip=0x009c72; 	X(PUSH(si));	// 24561                  push    si ;~ 01A2:9C72
cs=0x1a2;eip=0x009c73; 	X(PUSH(di));	// 24562                  push    di ;~ 01A2:9C73
cs=0x1a2;eip=0x009c74; 	T(cx = bp;);	// 24563                  mov     cx, bp ;~ 01A2:9C74
cs=0x1a2;eip=0x009c76; 	T(XCHG(di, si));	// 24564                  xchg    di, si ;~ 01A2:9C76
cs=0x1a2;eip=0x009c78; 	T(es = seg_1f8f4;);	// 24565                  mov     es, ds:seg_1F8F4 ;~ 01A2:9C78
	// 24567                  rep movsb ;~ 01A2:9C7C
cs=0x1a2;eip=0x009c7c; 	X(	REP MOVSB);	// 24567                  rep movsb ;~ 01A2:9C7C
cs=0x1a2;eip=0x009c7e; 	X(POP(di));	// 24568                  pop     di ;~ 01A2:9C7E
cs=0x1a2;eip=0x009c7f; 	X(POP(si));	// 24569                  pop     si ;~ 01A2:9C7F
cs=0x1a2;eip=0x009c80; 	X(POP(cx));	// 24570                  pop     cx ;~ 01A2:9C80
cs=0x1a2;eip=0x009c81; 	J(RETN(0));	// 24571                  retn ;~ 01A2:9C81

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_19c71: 	goto sub_19c71;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_19c82(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_19c82:
    _begin:
cs=0x1a2;eip=0x009c82; 	X(PUSH(si));	// 24579                  push    si ;~ 01A2:9C82
cs=0x1a2;eip=0x009c83; 	X(PUSH(di));	// 24580                  push    di ;~ 01A2:9C83
cs=0x1a2;eip=0x009c84; 	X(PUSH(ax));	// 24581                  push    ax ;~ 01A2:9C84
cs=0x1a2;eip=0x009c85; 	X(PUSH(es));	// 24582                  push    es ;~ 01A2:9C85
cs=0x1a2;eip=0x009c86; 	T(XCHG(si, di));	// 24583                  xchg    si, di ;~ 01A2:9C86
cs=0x1a2;eip=0x009c88; 	T(es = seg_1f8f4;);	// 24584                  mov     es, ds:seg_1F8F4 ;~ 01A2:9C88
loc_19c8c:
	// 5980 
cs=0x1a2;eip=0x009c8c; 	T(LODSB);	// 24588                  lodsb ;~ 01A2:9C8C
cs=0x1a2;eip=0x009c8d; 	X(STOSB);	// 24589                  stosb ;~ 01A2:9C8D
cs=0x1a2;eip=0x009c8e; 	T(OR(al, al));	// 24590                  or      al, al ;~ 01A2:9C8E
cs=0x1a2;eip=0x009c90; 	J(JNZ(loc_19c8c));	// 24591                  jnz     short loc_19C8C ;~ 01A2:9C90
cs=0x1a2;eip=0x009c92; 	X(POP(es));	// 24592                  pop     es ;~ 01A2:9C92
cs=0x1a2;eip=0x009c93; 	X(POP(ax));	// 24593                  pop     ax ;~ 01A2:9C93
cs=0x1a2;eip=0x009c94; 	X(POP(di));	// 24594                  pop     di ;~ 01A2:9C94
cs=0x1a2;eip=0x009c95; 	X(POP(si));	// 24595                  pop     si ;~ 01A2:9C95
cs=0x1a2;eip=0x009c96; 	J(RETN(0));	// 24596                  retn ;~ 01A2:9C96

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_19c8c: 	goto loc_19c8c;
        case m2c::ksub_19c82: 	goto sub_19c82;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_19c97(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_19c97:
    _begin:
cs=0x1a2;eip=0x009c97; 	X(PUSH(es));	// 24606                  push    es ;~ 01A2:9C97
cs=0x1a2;eip=0x009c98; 	T(XCHG(si, di));	// 24607                  xchg    si, di ;~ 01A2:9C98
cs=0x1a2;eip=0x009c9a; 	T(es = seg_1f8f4;);	// 24608                  mov     es, ds:seg_1F8F4 ;~ 01A2:9C9A
loc_19c9e:
	// 5981 
cs=0x1a2;eip=0x009c9e; 	T(CMP(*(raddr(ds,si)), 0));	// 24612                  cmp     byte ptr [si], 0 ;~ 01A2:9C9E
cs=0x1a2;eip=0x009ca1; 	J(JZ(loc_19ca6));	// 24613                  jz      short loc_19CA6 ;~ 01A2:9CA1
cs=0x1a2;eip=0x009ca3; 	X(MOVSB);	// 24614                  movsb ;~ 01A2:9CA3
cs=0x1a2;eip=0x009ca4; 	J(JMP(loc_19c9e));	// 24615                  jmp     short loc_19C9E ;~ 01A2:9CA4
loc_19ca6:
	// 5982 
cs=0x1a2;eip=0x009ca6; 	T(INC(si));	// 24619                  inc     si ;~ 01A2:9CA6
cs=0x1a2;eip=0x009ca7; 	T(XCHG(si, di));	// 24620                  xchg    si, di ;~ 01A2:9CA7
cs=0x1a2;eip=0x009ca9; 	X(POP(es));	// 24621                  pop     es ;~ 01A2:9CA9
cs=0x1a2;eip=0x009caa; 	J(RETN(0));	// 24623                  retn ;~ 01A2:9CAA

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_19c9e: 	goto loc_19c9e;
        case m2c::kloc_19ca6: 	goto loc_19ca6;
        case m2c::ksub_19c97: 	goto sub_19c97;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_19cab(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_19cab:
    _begin:
cs=0x1a2;eip=0x009cab; 	X(PUSH(dx));	// 24632                  push    dx ;~ 01A2:9CAB
cs=0x1a2;eip=0x009cac; 	T(XOR(dh, dh));	// 24633                  xor     dh, dh ;~ 01A2:9CAC
cs=0x1a2;eip=0x009cae; 	T(dl = byte_1f768;);	// 24634                  mov     dl, ds:byte_1F768 ;~ 01A2:9CAE
cs=0x1a2;eip=0x009cb2; 	X(INC(byte_1f768));	// 24635                  inc     ds:byte_1F768 ;~ 01A2:9CB2
cs=0x1a2;eip=0x009cb6; 	J(CALL(sub_175af,0));	// 24636                  call    sub_175AF ;~ 01A2:9CB6
cs=0x1a2;eip=0x009cb9; 	X(POP(ax));	// 24637                  pop     ax ;~ 01A2:9CB9
cs=0x1a2;eip=0x009cba; 	J(return sub_19c97(0, _state););	// 24638                  jmp     short sub_19C97 ;~ 01A2:9CBA

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_19cab: 	goto sub_19cab;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_19cbc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_19cbc:
    _begin:
cs=0x1a2;eip=0x009cbc; 	X(PUSH(dx));	// 24647                  push    dx ;~ 01A2:9CBC
cs=0x1a2;eip=0x009cbd; 	X(PUSH(bp));	// 24648                  push    bp ;~ 01A2:9CBD
cs=0x1a2;eip=0x009cbe; 	T(dx = ax;);	// 24649                  mov     dx, ax ;~ 01A2:9CBE
cs=0x1a2;eip=0x009cc0; 	J(CALL(sub_175af,0));	// 24650                  call    sub_175AF ;~ 01A2:9CC0
cs=0x1a2;eip=0x009cc3; 	J(CALL(sub_19c97,0));	// 24651                  call    sub_19C97 ;~ 01A2:9CC3
cs=0x1a2;eip=0x009cc6; 	X(POP(bp));	// 24652                  pop     bp ;~ 01A2:9CC6
cs=0x1a2;eip=0x009cc7; 	X(POP(dx));	// 24653                  pop     dx ;~ 01A2:9CC7
cs=0x1a2;eip=0x009cc8; 	J(RETN(0));	// 24654                  retn ;~ 01A2:9CC8

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_19cbc: 	goto sub_19cbc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_19cc9(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_19cc9:
    _begin:
cs=0x1a2;eip=0x009cc9; 	X(PUSH(ds));	// 24662                  push    ds ;~ 01A2:9CC9
cs=0x1a2;eip=0x009cca; 	T(ds = *(dw*)(&unk_1f8b8););	// 24663                  mov     ds, word ptr ds:unk_1F8B8 ;~ 01A2:9CCA
cs=0x1a2;eip=0x009cce; 	X(PUSH(ax));	// 24665                  push    ax ;~ 01A2:9CCE
cs=0x1a2;eip=0x009ccf; 	T(XOR(cx, cx));	// 24666                  xor     cx, cx ;~ 01A2:9CCF
loc_19cd1:
	// 5983 
cs=0x1a2;eip=0x009cd1; 	T(LODSB);	// 24669                  lodsb ;~ 01A2:9CD1
cs=0x1a2;eip=0x009cd2; 	T(CMP(al, bl));	// 24670                  cmp     al, bl ;~ 01A2:9CD2
cs=0x1a2;eip=0x009cd4; 	J(JZ(loc_19ce1));	// 24671                  jz      short loc_19CE1 ;~ 01A2:9CD4
cs=0x1a2;eip=0x009cd6; 	T(OR(al, al));	// 24672                  or      al, al ;~ 01A2:9CD6
cs=0x1a2;eip=0x009cd8; 	J(JZ(loc_19cdd));	// 24673                  jz      short loc_19CDD ;~ 01A2:9CD8
cs=0x1a2;eip=0x009cda; 	T(INC(cx));	// 24674                  inc     cx ;~ 01A2:9CDA
cs=0x1a2;eip=0x009cdb; 	J(JMP(loc_19cd1));	// 24675                  jmp     short loc_19CD1 ;~ 01A2:9CDB
loc_19cdd:
	// 5984 
cs=0x1a2;eip=0x009cdd; 	T(cx = 0x0FFFF;);	// 24679                  mov     cx, 0FFFFh ;~ 01A2:9CDD
cs=0x1a2;eip=0x009ce0; 	T(INC(si));	// 24680                  inc     si ;~ 01A2:9CE0
loc_19ce1:
	// 5985 
cs=0x1a2;eip=0x009ce1; 	T(DEC(si));	// 24683                  dec     si ;~ 01A2:9CE1
cs=0x1a2;eip=0x009ce2; 	T(OR(cx, cx));	// 24684                  or      cx, cx ;~ 01A2:9CE2
cs=0x1a2;eip=0x009ce4; 	X(POP(ax));	// 24685                  pop     ax ;~ 01A2:9CE4
cs=0x1a2;eip=0x009ce5; 	X(POP(ds));	// 24686                  pop     ds ;~ 01A2:9CE5
cs=0x1a2;eip=0x009ce6; 	J(RETN(0));	// 24688                  retn ;~ 01A2:9CE6

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_19cd1: 	goto loc_19cd1;
        case m2c::kloc_19cdd: 	goto loc_19cdd;
        case m2c::kloc_19ce1: 	goto loc_19ce1;
        case m2c::ksub_19cc9: 	goto sub_19cc9;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_9ce7_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_9ce7_proc:
    _begin:
cs=0x1a2;eip=0x009ce7; 	J(RETN(0));	// 24692                  retn ;~ 01A2:9CE7

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kseg000_9ce7_proc: 	goto seg000_9ce7_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_19ce8(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_19ce8:
    _begin:
cs=0x1a2;eip=0x009ce8; 	X(PUSH(ax));	// 24699                  push    ax ;~ 01A2:9CE8
cs=0x1a2;eip=0x009ce9; 	X(PUSH(cx));	// 24700                  push    cx ;~ 01A2:9CE9
cs=0x1a2;eip=0x009cea; 	J(CALL(sub_19d33,0));	// 24701                  call    sub_19D33 ;~ 01A2:9CEA
cs=0x1a2;eip=0x009ced; 	J(CALL(sub_19d8e,0));	// 24702                  call    sub_19D8E ;~ 01A2:9CED
loc_19cf0:
	// 5986 
cs=0x1a2;eip=0x009cf0; 	J(CALL(sub_11043,0));	// 24705                  call    sub_11043 ;~ 01A2:9CF0
cs=0x1a2;eip=0x009cf3; 	T(MOV(al, *(raddr(ds,0x715))));	// 24706                  mov     al, ds:715h ;~ 01A2:9CF3
cs=0x1a2;eip=0x009cf6; 	T(OR(al, al));	// 24707                  or      al, al ;~ 01A2:9CF6
cs=0x1a2;eip=0x009cf8; 	T(TEST(al, 0x80));	// 24708                  test    al, 80h ;~ 01A2:9CF8
cs=0x1a2;eip=0x009cfa; 	J(JZ(loc_19d0c));	// 24709                  jz      short loc_19D0C ;~ 01A2:9CFA
cs=0x1a2;eip=0x009cfc; 	J(CALL(sub_19d8e,0));	// 24710                  call    sub_19D8E ;~ 01A2:9CFC
cs=0x1a2;eip=0x009cff; 	T(cx = 3;);	// 24711                  mov     cx, 3 ;~ 01A2:9CFF
loc_19d02:
	// 5987 
cs=0x1a2;eip=0x009d02; 	J(CALL(sub_1897f,0));	// 24714                  call    sub_1897F ;~ 01A2:9D02
cs=0x1a2;eip=0x009d05; 	J(LOOP(loc_19d02));	// 24715                  loop    loc_19D02 ;~ 01A2:9D05
cs=0x1a2;eip=0x009d07; 	J(CALL(sub_19d8e,0));	// 24716                  call    sub_19D8E ;~ 01A2:9D07
cs=0x1a2;eip=0x009d0a; 	J(JMP(loc_19d30));	// 24717                  jmp     short loc_19D30 ;~ 01A2:9D0A
loc_19d0c:
	// 5988 
cs=0x1a2;eip=0x009d0c; 	X(PUSH(ax));	// 24721                  push    ax ;~ 01A2:9D0C
cs=0x1a2;eip=0x009d0d; 	X(PUSH(bx));	// 24722                  push    bx ;~ 01A2:9D0D
cs=0x1a2;eip=0x009d0e; 	X(PUSH(cx));	// 24723                  push    cx ;~ 01A2:9D0E
cs=0x1a2;eip=0x009d0f; 	X(PUSH(dx));	// 24724                  push    dx ;~ 01A2:9D0F
cs=0x1a2;eip=0x009d10; 	X(PUSH(bp));	// 24725                  push    bp ;~ 01A2:9D10
cs=0x1a2;eip=0x009d11; 	X(PUSH(si));	// 24726                  push    si ;~ 01A2:9D11
cs=0x1a2;eip=0x009d12; 	X(PUSH(di));	// 24727                  push    di ;~ 01A2:9D12
cs=0x1a2;eip=0x009d13; 	X(PUSH(es));	// 24728                  push    es ;~ 01A2:9D13
cs=0x1a2;eip=0x009d14; 	X(PUSH(ds));	// 24729                  push    ds ;~ 01A2:9D14
cs=0x1a2;eip=0x009d15; 	J(CALL(sub_1c566,0));	// 24730                  call    sub_1C566 ;~ 01A2:9D15
cs=0x1a2;eip=0x009d18; 	J(JNZ(loc_19d20));	// 24731                  jnz     short loc_19D20 ;~ 01A2:9D18
cs=0x1a2;eip=0x009d1a; 	J(CALL(sub_1c5dd,0));	// 24732                  call    sub_1C5DD ;~ 01A2:9D1A
cs=0x1a2;eip=0x009d1d; 	X(MOV(*(raddr(ds,0x716)), al));	// 24733                  mov     ds:716h, al ;~ 01A2:9D1D
loc_19d20:
	// 5989 
cs=0x1a2;eip=0x009d20; 	X(POP(ds));	// 24736                  pop     ds ;~ 01A2:9D20
cs=0x1a2;eip=0x009d21; 	X(POP(es));	// 24737                  pop     es ;~ 01A2:9D21
cs=0x1a2;eip=0x009d22; 	X(POP(di));	// 24739                  pop     di ;~ 01A2:9D22
cs=0x1a2;eip=0x009d23; 	X(POP(si));	// 24740                  pop     si ;~ 01A2:9D23
cs=0x1a2;eip=0x009d24; 	X(POP(bp));	// 24741                  pop     bp ;~ 01A2:9D24
cs=0x1a2;eip=0x009d25; 	X(POP(dx));	// 24742                  pop     dx ;~ 01A2:9D25
cs=0x1a2;eip=0x009d26; 	X(POP(cx));	// 24743                  pop     cx ;~ 01A2:9D26
cs=0x1a2;eip=0x009d27; 	X(POP(bx));	// 24744                  pop     bx ;~ 01A2:9D27
cs=0x1a2;eip=0x009d28; 	X(POP(ax));	// 24745                  pop     ax ;~ 01A2:9D28
cs=0x1a2;eip=0x009d29; 	T(MOV(al, *(raddr(ds,0x716))));	// 24746                  mov     al, ds:716h ;~ 01A2:9D29
cs=0x1a2;eip=0x009d2c; 	T(OR(al, al));	// 24747                  or      al, al ;~ 01A2:9D2C
cs=0x1a2;eip=0x009d2e; 	J(JZ(loc_19cf0));	// 24748                  jz      short loc_19CF0 ;~ 01A2:9D2E
loc_19d30:
	// 5990 
cs=0x1a2;eip=0x009d30; 	X(POP(cx));	// 24751                  pop     cx ;~ 01A2:9D30
cs=0x1a2;eip=0x009d31; 	X(POP(ax));	// 24752                  pop     ax ;~ 01A2:9D31
cs=0x1a2;eip=0x009d32; 	J(RETN(0));	// 24753                  retn ;~ 01A2:9D32

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_19cf0: 	goto loc_19cf0;
        case m2c::kloc_19d02: 	goto loc_19d02;
        case m2c::kloc_19d0c: 	goto loc_19d0c;
        case m2c::kloc_19d20: 	goto loc_19d20;
        case m2c::kloc_19d30: 	goto loc_19d30;
        case m2c::ksub_19ce8: 	goto sub_19ce8;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_19d33(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_19d33:
    _begin:
cs=0x1a2;eip=0x009d33; 	X(PUSH(ax));	// 24763                  push    ax ;~ 01A2:9D33
cs=0x1a2;eip=0x009d34; 	X(PUSH(bx));	// 24764                  push    bx ;~ 01A2:9D34
cs=0x1a2;eip=0x009d35; 	X(PUSH(cx));	// 24765                  push    cx ;~ 01A2:9D35
cs=0x1a2;eip=0x009d36; 	X(PUSH(dx));	// 24766                  push    dx ;~ 01A2:9D36
cs=0x1a2;eip=0x009d37; 	X(PUSH(bp));	// 24767                  push    bp ;~ 01A2:9D37
cs=0x1a2;eip=0x009d38; 	X(PUSH(si));	// 24768                  push    si ;~ 01A2:9D38
cs=0x1a2;eip=0x009d39; 	X(PUSH(di));	// 24769                  push    di ;~ 01A2:9D39
cs=0x1a2;eip=0x009d3a; 	X(PUSH(es));	// 24770                  push    es ;~ 01A2:9D3A
cs=0x1a2;eip=0x009d3b; 	X(PUSH(ds));	// 24771                  push    ds ;~ 01A2:9D3B
cs=0x1a2;eip=0x009d3c; 	J(CALL(sub_1c566,0));	// 24772                  call    sub_1C566 ;~ 01A2:9D3C
cs=0x1a2;eip=0x009d3f; 	X(POP(ds));	// 24773                  pop     ds ;~ 01A2:9D3F
cs=0x1a2;eip=0x009d40; 	X(POP(es));	// 24774                  pop     es ;~ 01A2:9D40
cs=0x1a2;eip=0x009d41; 	X(POP(di));	// 24775                  pop     di ;~ 01A2:9D41
cs=0x1a2;eip=0x009d42; 	X(POP(si));	// 24776                  pop     si ;~ 01A2:9D42
cs=0x1a2;eip=0x009d43; 	X(POP(bp));	// 24777                  pop     bp ;~ 01A2:9D43
cs=0x1a2;eip=0x009d44; 	X(POP(dx));	// 24778                  pop     dx ;~ 01A2:9D44
cs=0x1a2;eip=0x009d45; 	X(POP(cx));	// 24779                  pop     cx ;~ 01A2:9D45
cs=0x1a2;eip=0x009d46; 	X(POP(bx));	// 24780                  pop     bx ;~ 01A2:9D46
cs=0x1a2;eip=0x009d47; 	X(POP(ax));	// 24781                  pop     ax ;~ 01A2:9D47
cs=0x1a2;eip=0x009d48; 	J(JNZ(loc_19d70));	// 24782                  jnz     short loc_19D70 ;~ 01A2:9D48
cs=0x1a2;eip=0x009d4a; 	X(PUSH(ax));	// 24783                  push    ax ;~ 01A2:9D4A
cs=0x1a2;eip=0x009d4b; 	X(PUSH(ax));	// 24784                  push    ax ;~ 01A2:9D4B
cs=0x1a2;eip=0x009d4c; 	X(PUSH(bx));	// 24785                  push    bx ;~ 01A2:9D4C
cs=0x1a2;eip=0x009d4d; 	X(PUSH(cx));	// 24786                  push    cx ;~ 01A2:9D4D
cs=0x1a2;eip=0x009d4e; 	X(PUSH(dx));	// 24787                  push    dx ;~ 01A2:9D4E
cs=0x1a2;eip=0x009d4f; 	X(PUSH(bp));	// 24788                  push    bp ;~ 01A2:9D4F
cs=0x1a2;eip=0x009d50; 	X(PUSH(si));	// 24789                  push    si ;~ 01A2:9D50
cs=0x1a2;eip=0x009d51; 	X(PUSH(di));	// 24790                  push    di ;~ 01A2:9D51
cs=0x1a2;eip=0x009d52; 	X(PUSH(es));	// 24791                  push    es ;~ 01A2:9D52
cs=0x1a2;eip=0x009d53; 	X(PUSH(ds));	// 24792                  push    ds ;~ 01A2:9D53
cs=0x1a2;eip=0x009d54; 	J(CALL(sub_1c566,0));	// 24793                  call    sub_1C566 ;~ 01A2:9D54
cs=0x1a2;eip=0x009d57; 	J(JNZ(loc_19d5f));	// 24794                  jnz     short loc_19D5F ;~ 01A2:9D57
cs=0x1a2;eip=0x009d59; 	J(CALL(sub_1c5dd,0));	// 24795                  call    sub_1C5DD ;~ 01A2:9D59
cs=0x1a2;eip=0x009d5c; 	X(byte_1f886 = al;);	// 24796                  mov     ds:byte_1F886, al ;~ 01A2:9D5C
loc_19d5f:
	// 5991 
cs=0x1a2;eip=0x009d5f; 	X(POP(ds));	// 24799                  pop     ds ;~ 01A2:9D5F
cs=0x1a2;eip=0x009d60; 	X(POP(es));	// 24800                  pop     es ;~ 01A2:9D60
cs=0x1a2;eip=0x009d61; 	X(POP(di));	// 24801                  pop     di ;~ 01A2:9D61
cs=0x1a2;eip=0x009d62; 	X(POP(si));	// 24802                  pop     si ;~ 01A2:9D62
cs=0x1a2;eip=0x009d63; 	X(POP(bp));	// 24803                  pop     bp ;~ 01A2:9D63
cs=0x1a2;eip=0x009d64; 	X(POP(dx));	// 24804                  pop     dx ;~ 01A2:9D64
cs=0x1a2;eip=0x009d65; 	X(POP(cx));	// 24805                  pop     cx ;~ 01A2:9D65
cs=0x1a2;eip=0x009d66; 	X(POP(bx));	// 24806                  pop     bx ;~ 01A2:9D66
cs=0x1a2;eip=0x009d67; 	X(POP(ax));	// 24807                  pop     ax ;~ 01A2:9D67
cs=0x1a2;eip=0x009d68; 	T(al = byte_1f886;);	// 24808                  mov     al, ds:byte_1F886 ;~ 01A2:9D68
cs=0x1a2;eip=0x009d6b; 	T(OR(al, al));	// 24809                  or      al, al ;~ 01A2:9D6B
cs=0x1a2;eip=0x009d6d; 	X(POP(ax));	// 24810                  pop     ax ;~ 01A2:9D6D
cs=0x1a2;eip=0x009d6e; 	J(JMP(sub_19d33));	// 24811                  jmp     short sub_19D33 ;~ 01A2:9D6E
loc_19d70:
	// 5992 
cs=0x1a2;eip=0x009d70; 	X(byte_1f886 = 0;);	// 24815                  mov     ds:byte_1F886, 0 ;~ 01A2:9D70
cs=0x1a2;eip=0x009d75; 	T(TEST(byte_1f873, 8));	// 24816                  test    ds:byte_1F873, 8 ;~ 01A2:9D75
cs=0x1a2;eip=0x009d7a; 	X(PUSHF);	// 24817                  pushf ;~ 01A2:9D7A
cs=0x1a2;eip=0x009d7b; 	X(AND(byte_1f873, 0x0F7));	// 24818                  and     ds:byte_1F873, 0F7h ;~ 01A2:9D7B
cs=0x1a2;eip=0x009d80; 	X(POPF);	// 24819                  popf ;~ 01A2:9D80
cs=0x1a2;eip=0x009d81; 	T(TEST(byte_1f873, 0x10));	// 24820                  test    ds:byte_1F873, 10h ;~ 01A2:9D81
cs=0x1a2;eip=0x009d86; 	X(PUSHF);	// 24821                  pushf ;~ 01A2:9D86
cs=0x1a2;eip=0x009d87; 	X(AND(byte_1f873, 0x0EF));	// 24822                  and     ds:byte_1F873, 0EFh ;~ 01A2:9D87
cs=0x1a2;eip=0x009d8c; 	X(POPF);	// 24823                  popf ;~ 01A2:9D8C
cs=0x1a2;eip=0x009d8d; 	J(RETN(0));	// 24824                  retn ;~ 01A2:9D8D

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_19d5f: 	goto loc_19d5f;
        case m2c::kloc_19d70: 	goto loc_19d70;
        case m2c::ksub_19d33: 	goto sub_19d33;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_19d8e(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_19d8e:
    _begin:
cs=0x1a2;eip=0x009d8e; 	X(PUSH(ax));	// 24834                  push    ax ;~ 01A2:9D8E
loc_19d8f:
	// 5993 
cs=0x1a2;eip=0x009d8f; 	J(CALL(sub_11043,0));	// 24837                  call    sub_11043 ;~ 01A2:9D8F
cs=0x1a2;eip=0x009d92; 	T(al = byte_1f885;);	// 24838                  mov     al, ds:byte_1F885 ;~ 01A2:9D92
cs=0x1a2;eip=0x009d95; 	T(OR(al, al));	// 24839                  or      al, al ;~ 01A2:9D95
cs=0x1a2;eip=0x009d97; 	T(AND(al, 0x8F));	// 24840                  and     al, 8Fh ;~ 01A2:9D97
cs=0x1a2;eip=0x009d99; 	J(JNZ(loc_19d8f));	// 24841                  jnz     short loc_19D8F ;~ 01A2:9D99
cs=0x1a2;eip=0x009d9b; 	X(POP(ax));	// 24842                  pop     ax ;~ 01A2:9D9B
cs=0x1a2;eip=0x009d9c; 	J(RETN(0));	// 24843                  retn ;~ 01A2:9D9C

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_19d8f: 	goto loc_19d8f;
        case m2c::ksub_19d8e: 	goto sub_19d8e;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group28(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group28:
    _begin:
sub_19d9d:
	// 24850 
cs=0x1a2;eip=0x009d9d; 	T(XOR(ax, ax));	// 24851                  xor     ax, ax ;~ 01A2:9D9D
loc_19d9f:
	// 5994 
cs=0x1a2;eip=0x009d9f; 	X(PUSH(ax));	// 24854                  push    ax ;~ 01A2:9D9F
cs=0x1a2;eip=0x009da0; 	X(PUSH(bx));	// 24855                  push    bx ;~ 01A2:9DA0
cs=0x1a2;eip=0x009da1; 	X(PUSH(cx));	// 24856                  push    cx ;~ 01A2:9DA1
cs=0x1a2;eip=0x009da2; 	X(PUSH(dx));	// 24857                  push    dx ;~ 01A2:9DA2
cs=0x1a2;eip=0x009da3; 	X(PUSH(bp));	// 24858                  push    bp ;~ 01A2:9DA3
cs=0x1a2;eip=0x009da4; 	X(PUSH(si));	// 24859                  push    si ;~ 01A2:9DA4
cs=0x1a2;eip=0x009da5; 	X(PUSH(di));	// 24860                  push    di ;~ 01A2:9DA5
cs=0x1a2;eip=0x009da6; 	X(PUSH(es));	// 24861                  push    es ;~ 01A2:9DA6
cs=0x1a2;eip=0x009da7; 	X(PUSH(ds));	// 24862                  push    ds ;~ 01A2:9DA7
cs=0x1a2;eip=0x009da8; 	J(CALL(sub_1c566,0));	// 24863                  call    sub_1C566 ;~ 01A2:9DA8
cs=0x1a2;eip=0x009dab; 	J(JNZ(loc_19db3));	// 24864                  jnz     short loc_19DB3 ;~ 01A2:9DAB
cs=0x1a2;eip=0x009dad; 	J(CALL(sub_1c5dd,0));	// 24865                  call    sub_1C5DD ;~ 01A2:9DAD
cs=0x1a2;eip=0x009db0; 	X(byte_1f886 = al;);	// 24866                  mov     ds:byte_1F886, al ;~ 01A2:9DB0
loc_19db3:
	// 5995 
cs=0x1a2;eip=0x009db3; 	X(POP(ds));	// 24869                  pop     ds ;~ 01A2:9DB3
cs=0x1a2;eip=0x009db4; 	X(POP(es));	// 24871                  pop     es ;~ 01A2:9DB4
cs=0x1a2;eip=0x009db5; 	X(POP(di));	// 24873                  pop     di ;~ 01A2:9DB5
cs=0x1a2;eip=0x009db6; 	X(POP(si));	// 24874                  pop     si ;~ 01A2:9DB6
cs=0x1a2;eip=0x009db7; 	X(POP(bp));	// 24875                  pop     bp ;~ 01A2:9DB7
cs=0x1a2;eip=0x009db8; 	X(POP(dx));	// 24876                  pop     dx ;~ 01A2:9DB8
cs=0x1a2;eip=0x009db9; 	X(POP(cx));	// 24877                  pop     cx ;~ 01A2:9DB9
cs=0x1a2;eip=0x009dba; 	X(POP(bx));	// 24878                  pop     bx ;~ 01A2:9DBA
cs=0x1a2;eip=0x009dbb; 	X(POP(ax));	// 24879                  pop     ax ;~ 01A2:9DBB
cs=0x1a2;eip=0x009dbc; 	T(MOV(al, *(raddr(ds,0x716))));	// 24880                  mov     al, ds:716h ;~ 01A2:9DBC
cs=0x1a2;eip=0x009dbf; 	T(OR(al, al));	// 24881                  or      al, al ;~ 01A2:9DBF
loc_19dc1:
	// 5996 
cs=0x1a2;eip=0x009dc1; 	J(JZ(loc_19d9f));	// 24884                  jz      short loc_19D9F ;~ 01A2:9DC1
cs=0x1a2;eip=0x009dc3; 	J(RETN(0));	// 24885                  retn ;~ 01A2:9DC3
sub_19ddc:
	// 24905 
cs=0x1a2;eip=0x009ddc; 	X(PUSH(ds));	// 24906                  push    ds ;~ 01A2:9DDC
cs=0x1a2;eip=0x009ddd; 	T(es = *(dw*)(((db*)&off_1f8c8)+2););	// 24908                  mov     es, word ptr ds:off_1F8C8+2 ;~ 01A2:9DDD
cs=0x1a2;eip=0x009de1; 	T(ds = bp;);	// 24910                  mov     ds, bp ;~ 01A2:9DE1
cs=0x1a2;eip=0x009de3; 	T(al = ch;);	// 24912                  mov     al, ch ;~ 01A2:9DE3
cs=0x1a2;eip=0x009de5; 	T(XOR(ah, ah));	// 24913                  xor     ah, ah ;~ 01A2:9DE5
cs=0x1a2;eip=0x009de7; 	T(MUL1_1(dl));	// 24914                  mul     dl ;~ 01A2:9DE7
cs=0x1a2;eip=0x009de9; 	T(SHL(ax, 1));	// 24915                  shl     ax, 1 ;~ 01A2:9DE9
cs=0x1a2;eip=0x009deb; 	T(ADD(si, ax));	// 24916                  add     si, ax ;~ 01A2:9DEB
cs=0x1a2;eip=0x009ded; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 24917                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:9DED
cs=0x1a2;eip=0x009df2; 	T(TEST(cl, 8));	// 24918                  test    cl, 8 ;~ 01A2:9DF2
cs=0x1a2;eip=0x009df5; 	J(JZ(loc_19df8));	// 24919                  jz      short loc_19DF8 ;~ 01A2:9DF5
cs=0x1a2;eip=0x009df7; 	T(INC(di));	// 24920                  inc     di ;~ 01A2:9DF7
loc_19df8:
	// 5997 
cs=0x1a2;eip=0x009df8; 	T(XOR(dh, dh));	// 24923                  xor     dh, dh ;~ 01A2:9DF8
cs=0x1a2;eip=0x009dfa; 	T(SHL(dx, 1));	// 24924                  shl     dx, 1 ;~ 01A2:9DFA
cs=0x1a2;eip=0x009dfc; 	T(bx = m2c::kloc_19dc1+1;);	// 24925                  mov     bx, (offset loc_19DC1+1) ;~ 01A2:9DFC
cs=0x1a2;eip=0x009dff; 	T(ADD(bx, dx));	// 24926                  add     bx, dx ;~ 01A2:9DFF
cs=0x1a2;eip=0x009e01; 	T(MOV(ax, *(dw*)(raddr(cs,bx))));	// 24927                  mov     ax, cs:[bx] ;~ 01A2:9E01
cs=0x1a2;eip=0x009e04; __disp=ax;
	J(return __dispatch_call(__disp, _state););	// 24928                  jmp     ax ;~ 01A2:9E04

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_19d9f: 	goto loc_19d9f;
        case m2c::kloc_19db3: 	goto loc_19db3;
        case m2c::kloc_19dc1: 	goto loc_19dc1;
        case m2c::kloc_19df8: 	goto loc_19df8;
        case m2c::ksub_19d9d: 	goto sub_19d9d;
        case m2c::ksub_19ddc: 	goto sub_19ddc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_9e06_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_9e06_proc:
    _begin:
loc_19e06:
	// 5998 
cs=0x1a2;eip=0x009e06; 	T(dx = 0x3C4;);	// 24934                  mov     dx, 3C4h ;~ 01A2:9E06
cs=0x1a2;eip=0x009e09; 	T(ax = 0x0F02;);	// 24935                  mov     ax, 0F02h ;~ 01A2:9E09
cs=0x1a2;eip=0x009e0c; 	S(OUT(dx, ax));	// 24936                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:9E0C
cs=0x1a2;eip=0x009e0d; 	T(dx = 0x3CE;);	// 24938                  mov     dx, 3CEh ;~ 01A2:9E0D
cs=0x1a2;eip=0x009e10; 	T(ax = 5;);	// 24939                  mov     ax, 5 ;~ 01A2:9E10
cs=0x1a2;eip=0x009e13; 	S(OUT(dx, ax));	// 24940                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9E13
cs=0x1a2;eip=0x009e14; 	T(ax = 3;);	// 24947                  mov     ax, 3 ;~ 01A2:9E14
cs=0x1a2;eip=0x009e17; 	S(OUT(dx, ax));	// 24948                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9E17
cs=0x1a2;eip=0x009e18; 	T(bp = di;);	// 24953                  mov     bp, di ;~ 01A2:9E18
cs=0x1a2;eip=0x009e1a; 	T(cl = ch;);	// 24954                  mov     cl, ch ;~ 01A2:9E1A
cs=0x1a2;eip=0x009e1c; 	T(XOR(ax, ax));	// 24955                  xor     ax, ax ;~ 01A2:9E1C
loc_19e1e:
	// 5999 
cs=0x1a2;eip=0x009e1e; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 24958                  mov     [di], ax ;~ 01A2:9E1E
cs=0x1a2;eip=0x009e20; 	T(ADD(di, 0x28));	// 24959                  add     di, 28h ; '(' ;~ 01A2:9E20
cs=0x1a2;eip=0x009e23; 	T(DEC(cl));	// 24960                  dec     cl ;~ 01A2:9E23
cs=0x1a2;eip=0x009e25; 	J(JNZ(loc_19e1e));	// 24961                  jnz     short loc_19E1E ;~ 01A2:9E25
cs=0x1a2;eip=0x009e27; 	T(di = bp;);	// 24962                  mov     di, bp ;~ 01A2:9E27
cs=0x1a2;eip=0x009e29; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 24963                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:9E29
cs=0x1a2;eip=0x009e2e; 	X(POP(ds));	// 24964                  pop     ds ;~ 01A2:9E2E
cs=0x1a2;eip=0x009e2f; 	J(RETN(0));	// 24966                  retn ;~ 01A2:9E2F

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_19e06: 	goto loc_19e06;
        case m2c::kloc_19e1e: 	goto loc_19e1e;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_19e30(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_19e30:
    _begin:
cs=0x1a2;eip=0x009e30; 	T(dx = 0x3C4;);	// 24973                  mov     dx, 3C4h ;~ 01A2:9E30
cs=0x1a2;eip=0x009e33; 	T(ax = 0x0F02;);	// 24974                  mov     ax, 0F02h ;~ 01A2:9E33
cs=0x1a2;eip=0x009e36; 	S(OUT(dx, ax));	// 24975                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:9E36
cs=0x1a2;eip=0x009e37; 	T(dx = 0x3CE;);	// 24977                  mov     dx, 3CEh ;~ 01A2:9E37
cs=0x1a2;eip=0x009e3a; 	T(ax = 5;);	// 24978                  mov     ax, 5 ;~ 01A2:9E3A
cs=0x1a2;eip=0x009e3d; 	S(OUT(dx, ax));	// 24979                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9E3D
cs=0x1a2;eip=0x009e3e; 	T(ax = 3;);	// 24986                  mov     ax, 3 ;~ 01A2:9E3E
cs=0x1a2;eip=0x009e41; 	S(OUT(dx, ax));	// 24987                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9E41
cs=0x1a2;eip=0x009e42; 	T(bp = di;);	// 24992                  mov     bp, di ;~ 01A2:9E42
cs=0x1a2;eip=0x009e44; 	T(bl = ch;);	// 24993                  mov     bl, ch ;~ 01A2:9E44
cs=0x1a2;eip=0x009e46; 	T(XOR(ax, ax));	// 24994                  xor     ax, ax ;~ 01A2:9E46
loc_19e48:
	// 6000 
cs=0x1a2;eip=0x009e48; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 24997                  mov     [di], ax ;~ 01A2:9E48
cs=0x1a2;eip=0x009e4a; 	T(ADD(di, 2));	// 24998                  add     di, 2 ;~ 01A2:9E4A
cs=0x1a2;eip=0x009e4d; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 24999                  mov     [di], ax ;~ 01A2:9E4D
cs=0x1a2;eip=0x009e4f; 	T(ADD(di, 0x26));	// 25000                  add     di, 26h ; '&' ;~ 01A2:9E4F
cs=0x1a2;eip=0x009e52; 	T(DEC(bl));	// 25001                  dec     bl ;~ 01A2:9E52
cs=0x1a2;eip=0x009e54; 	J(JNZ(loc_19e48));	// 25002                  jnz     short loc_19E48 ;~ 01A2:9E54
cs=0x1a2;eip=0x009e56; 	T(di = bp;);	// 25003                  mov     di, bp ;~ 01A2:9E56
cs=0x1a2;eip=0x009e58; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 25004                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:9E58
cs=0x1a2;eip=0x009e5d; 	X(POP(ds));	// 25005                  pop     ds ;~ 01A2:9E5D
cs=0x1a2;eip=0x009e5e; 	J(RETN(0));	// 25007                  retn ;~ 01A2:9E5E

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_19e48: 	goto loc_19e48;
        case m2c::ksub_19e30: 	goto sub_19e30;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_19e5f(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_19e5f:
    _begin:
cs=0x1a2;eip=0x009e5f; 	T(dx = 0x3C4;);	// 25016                  mov     dx, 3C4h ;~ 01A2:9E5F
cs=0x1a2;eip=0x009e62; 	T(ax = 0x0F02;);	// 25017                  mov     ax, 0F02h ;~ 01A2:9E62
cs=0x1a2;eip=0x009e65; 	S(OUT(dx, ax));	// 25018                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:9E65
cs=0x1a2;eip=0x009e66; 	T(dx = 0x3CE;);	// 25020                  mov     dx, 3CEh ;~ 01A2:9E66
cs=0x1a2;eip=0x009e69; 	T(ax = 5;);	// 25021                  mov     ax, 5 ;~ 01A2:9E69
cs=0x1a2;eip=0x009e6c; 	S(OUT(dx, ax));	// 25022                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9E6C
cs=0x1a2;eip=0x009e6d; 	T(ax = 3;);	// 25029                  mov     ax, 3 ;~ 01A2:9E6D
cs=0x1a2;eip=0x009e70; 	S(OUT(dx, ax));	// 25030                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9E70
cs=0x1a2;eip=0x009e71; 	T(bp = di;);	// 25035                  mov     bp, di ;~ 01A2:9E71
cs=0x1a2;eip=0x009e73; 	T(cl = ch;);	// 25036                  mov     cl, ch ;~ 01A2:9E73
cs=0x1a2;eip=0x009e75; 	T(XOR(ax, ax));	// 25037                  xor     ax, ax ;~ 01A2:9E75
loc_19e77:
	// 6001 
cs=0x1a2;eip=0x009e77; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 25040                  mov     [di], ax ;~ 01A2:9E77
cs=0x1a2;eip=0x009e79; 	T(ADD(di, 2));	// 25041                  add     di, 2 ;~ 01A2:9E79
cs=0x1a2;eip=0x009e7c; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 25042                  mov     [di], ax ;~ 01A2:9E7C
cs=0x1a2;eip=0x009e7e; 	T(ADD(di, 2));	// 25043                  add     di, 2 ;~ 01A2:9E7E
cs=0x1a2;eip=0x009e81; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 25044                  mov     [di], ax ;~ 01A2:9E81
cs=0x1a2;eip=0x009e83; 	T(ADD(di, 0x24));	// 25045                  add     di, 24h ; '$' ;~ 01A2:9E83
cs=0x1a2;eip=0x009e86; 	T(DEC(cl));	// 25046                  dec     cl ;~ 01A2:9E86
cs=0x1a2;eip=0x009e88; 	J(JNZ(loc_19e77));	// 25047                  jnz     short loc_19E77 ;~ 01A2:9E88
cs=0x1a2;eip=0x009e8a; 	T(di = bp;);	// 25048                  mov     di, bp ;~ 01A2:9E8A
cs=0x1a2;eip=0x009e8c; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 25049                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:9E8C
cs=0x1a2;eip=0x009e91; 	X(POP(ds));	// 25050                  pop     ds ;~ 01A2:9E91
cs=0x1a2;eip=0x009e92; 	J(RETN(0));	// 25052                  retn ;~ 01A2:9E92

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_19e77: 	goto loc_19e77;
        case m2c::ksub_19e5f: 	goto sub_19e5f;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_9e93_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_9e93_proc:
    _begin:
loc_19e93:
	// 6002 
cs=0x1a2;eip=0x009e93; 	T(al = dl;);	// 25059                  mov     al, dl ;~ 01A2:9E93
cs=0x1a2;eip=0x009e95; 	T(SHR(al, 1));	// 25060                  shr     al, 1 ;~ 01A2:9E95
cs=0x1a2;eip=0x009e97; 	X(byte_6fb92 = al;);	// 25061                  mov     ss:byte_6FB92, al ;~ 01A2:9E97
cs=0x1a2;eip=0x009e9b; 	T(ax = 0x28;);	// 25062                  mov     ax, 28h ; '(' ;~ 01A2:9E9B
cs=0x1a2;eip=0x009e9e; 	T(SUB(ax, dx));	// 25063                  sub     ax, dx ;~ 01A2:9E9E
cs=0x1a2;eip=0x009ea0; 	X(*(dw*)(&unk_6fb94) = ax;);	// 25064                  mov     word ptr ss:unk_6FB94, ax ;~ 01A2:9EA0
cs=0x1a2;eip=0x009ea4; 	T(dx = 0x3C4;);	// 25065                  mov     dx, 3C4h ;~ 01A2:9EA4
cs=0x1a2;eip=0x009ea7; 	T(ax = 0x0F02;);	// 25066                  mov     ax, 0F02h ;~ 01A2:9EA7
cs=0x1a2;eip=0x009eaa; 	S(OUT(dx, ax));	// 25067                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:9EAA
cs=0x1a2;eip=0x009eab; 	T(dx = 0x3CE;);	// 25069                  mov     dx, 3CEh ;~ 01A2:9EAB
cs=0x1a2;eip=0x009eae; 	T(ax = 5;);	// 25070                  mov     ax, 5 ;~ 01A2:9EAE
cs=0x1a2;eip=0x009eb1; 	S(OUT(dx, ax));	// 25071                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9EB1
cs=0x1a2;eip=0x009eb2; 	T(ax = 3;);	// 25078                  mov     ax, 3 ;~ 01A2:9EB2
cs=0x1a2;eip=0x009eb5; 	S(OUT(dx, ax));	// 25079                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:9EB5
cs=0x1a2;eip=0x009eb6; 	T(bp = di;);	// 25084                  mov     bp, di ;~ 01A2:9EB6
cs=0x1a2;eip=0x009eb8; 	T(bl = ch;);	// 25085                  mov     bl, ch ;~ 01A2:9EB8
loc_19eba:
	// 6003 
cs=0x1a2;eip=0x009eba; 	T(al = byte_6fb92;);	// 25088                  mov     al, ss:byte_6FB92 ;~ 01A2:9EBA
cs=0x1a2;eip=0x009ebe; 	X(byte_6fb93 = al;);	// 25089                  mov     ss:byte_6FB93, al ;~ 01A2:9EBE
loc_19ec2:
	// 6004 
cs=0x1a2;eip=0x009ec2; 	T(XOR(ax, ax));	// 25092                  xor     ax, ax ;~ 01A2:9EC2
cs=0x1a2;eip=0x009ec4; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 25093                  mov     [di], ax ;~ 01A2:9EC4
cs=0x1a2;eip=0x009ec6; 	T(ADD(di, 2));	// 25094                  add     di, 2 ;~ 01A2:9EC6
cs=0x1a2;eip=0x009ec9; 	X(DEC(byte_6fb93));	// 25095                  dec     ss:byte_6FB93 ;~ 01A2:9EC9
cs=0x1a2;eip=0x009ece; 	J(JNZ(loc_19ec2));	// 25096                  jnz     short loc_19EC2 ;~ 01A2:9ECE
cs=0x1a2;eip=0x009ed0; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 25097                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:9ED0
cs=0x1a2;eip=0x009ed5; 	T(DEC(bl));	// 25098                  dec     bl ;~ 01A2:9ED5
cs=0x1a2;eip=0x009ed7; 	J(JNZ(loc_19eba));	// 25099                  jnz     short loc_19EBA ;~ 01A2:9ED7
cs=0x1a2;eip=0x009ed9; 	T(di = bp;);	// 25100                  mov     di, bp ;~ 01A2:9ED9
cs=0x1a2;eip=0x009edb; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 25101                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:9EDB
cs=0x1a2;eip=0x009ee0; 	X(POP(ds));	// 25102                  pop     ds ;~ 01A2:9EE0
cs=0x1a2;eip=0x009ee1; 	J(RETN(0));	// 25104                  retn ;~ 01A2:9EE1

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_19eba: 	goto loc_19eba;
        case m2c::kloc_19ec2: 	goto loc_19ec2;
        case m2c::kseg000_9e93_proc: 	goto seg000_9e93_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group29(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group29:
    _begin:
sub_1a372:
	// 25347 
cs=0x1a2;eip=0x00a372; 	T(al = dl;);	// 25348                  mov     al, dl ;~ 01A2:A372
cs=0x1a2;eip=0x00a374; 	T(SHR(al, 1));	// 25349                  shr     al, 1 ;~ 01A2:A374
cs=0x1a2;eip=0x00a376; 	X(byte_6fb92 = al;);	// 25350                  mov     ss:byte_6FB92, al ;~ 01A2:A376
cs=0x1a2;eip=0x00a37a; 	T(ax = 0x28;);	// 25351                  mov     ax, 28h ; '(' ;~ 01A2:A37A
cs=0x1a2;eip=0x00a37d; 	T(SUB(ax, dx));	// 25352                  sub     ax, dx ;~ 01A2:A37D
cs=0x1a2;eip=0x00a37f; 	X(*(dw*)(&unk_6fb94) = ax;);	// 25353                  mov     word ptr ss:unk_6FB94, ax ;~ 01A2:A37F
cs=0x1a2;eip=0x00a383; 	T(ax = es;);	// 25354                  mov     ax, es ;~ 01A2:A383
cs=0x1a2;eip=0x00a385; 	T(dx = ds;);	// 25355                  mov     dx, ds ;~ 01A2:A385
cs=0x1a2;eip=0x00a387; 	T(es = dx;);	// 25356                  mov     es, dx ;~ 01A2:A387
cs=0x1a2;eip=0x00a389; 	T(ds = ax;);	// 25358                  mov     ds, ax ;~ 01A2:A389
cs=0x1a2;eip=0x00a38b; 	T(dx = 0x3C4;);	// 25360                  mov     dx, 3C4h ;~ 01A2:A38B
cs=0x1a2;eip=0x00a38e; 	T(ax = 0x102;);	// 25361                  mov     ax, 102h ;~ 01A2:A38E
cs=0x1a2;eip=0x00a391; 	S(OUT(dx, ax));	// 25362                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:A391
cs=0x1a2;eip=0x00a392; 	T(dx = 0x3CE;);	// 25364                  mov     dx, 3CEh ;~ 01A2:A392
cs=0x1a2;eip=0x00a395; 	T(ax = 5;);	// 25365                  mov     ax, 5 ;~ 01A2:A395
cs=0x1a2;eip=0x00a398; 	S(OUT(dx, ax));	// 25366                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A398
cs=0x1a2;eip=0x00a399; 	T(ax = 3;);	// 25373                  mov     ax, 3 ;~ 01A2:A399
cs=0x1a2;eip=0x00a39c; 	S(OUT(dx, ax));	// 25374                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A39C
cs=0x1a2;eip=0x00a39d; 	T(AND(cl, 7));	// 25379                  and     cl, 7 ;~ 01A2:A39D
cs=0x1a2;eip=0x00a3a0; 	J(JNZ(loc_1a3a5));	// 25380                  jnz     short loc_1A3A5 ;~ 01A2:A3A0
cs=0x1a2;eip=0x00a3a2; 	J(JMP(loc_1a54c));	// 25381                  jmp     loc_1A54C ;~ 01A2:A3A2
loc_1a3a5:
	// 6005 
cs=0x1a2;eip=0x00a3a5; 	T(bp = di;);	// 25385                  mov     bp, di ;~ 01A2:A3A5
cs=0x1a2;eip=0x00a3a7; 	T(bl = ch;);	// 25386                  mov     bl, ch ;~ 01A2:A3A7
loc_1a3a9:
	// 6006 
cs=0x1a2;eip=0x00a3a9; 	T(XOR(bh, bh));	// 25389                  xor     bh, bh ;~ 01A2:A3A9
cs=0x1a2;eip=0x00a3ab; 	T(al = byte_6fb92;);	// 25390                  mov     al, ss:byte_6FB92 ;~ 01A2:A3AB
cs=0x1a2;eip=0x00a3af; 	X(byte_6fb93 = al;);	// 25391                  mov     ss:byte_6FB93, al ;~ 01A2:A3AF
loc_1a3b3:
	// 6007 
cs=0x1a2;eip=0x00a3b3; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 25394                  lods    word ptr es:[si] ;~ 01A2:A3B3
cs=0x1a2;eip=0x00a3b5; 	T(XCHG(al, ah));	// 25395                  xchg    al, ah ;~ 01A2:A3B5
cs=0x1a2;eip=0x00a3b7; 	T(XOR(dl, dl));	// 25396                  xor     dl, dl ;~ 01A2:A3B7
cs=0x1a2;eip=0x00a3b9; 	T(dh = cl;);	// 25397                  mov     dh, cl ;~ 01A2:A3B9
loc_1a3bb:
	// 6008 
cs=0x1a2;eip=0x00a3bb; 	T(SHR(ax, 1));	// 25400                  shr     ax, 1 ;~ 01A2:A3BB
cs=0x1a2;eip=0x00a3bd; 	T(RCR(dl, 1));	// 25401                  rcr     dl, 1 ;~ 01A2:A3BD
cs=0x1a2;eip=0x00a3bf; 	T(DEC(dh));	// 25402                  dec     dh ;~ 01A2:A3BF
cs=0x1a2;eip=0x00a3c1; 	J(JNZ(loc_1a3bb));	// 25403                  jnz     short loc_1A3BB ;~ 01A2:A3C1
cs=0x1a2;eip=0x00a3c3; 	T(OR(ah, bh));	// 25404                  or      ah, bh ;~ 01A2:A3C3
cs=0x1a2;eip=0x00a3c5; 	T(XCHG(al, ah));	// 25405                  xchg    al, ah ;~ 01A2:A3C5
cs=0x1a2;eip=0x00a3c7; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 25406                  mov     [di], ax ;~ 01A2:A3C7
cs=0x1a2;eip=0x00a3c9; 	T(ADD(di, 2));	// 25407                  add     di, 2 ;~ 01A2:A3C9
cs=0x1a2;eip=0x00a3cc; 	X(DEC(byte_6fb93));	// 25408                  dec     ss:byte_6FB93 ;~ 01A2:A3CC
cs=0x1a2;eip=0x00a3d1; 	J(JNZ(loc_1a3d7));	// 25409                  jnz     short loc_1A3D7 ;~ 01A2:A3D1
cs=0x1a2;eip=0x00a3d3; 	X(MOV(*(raddr(ds,di)), dl));	// 25410                  mov     [di], dl ;~ 01A2:A3D3
cs=0x1a2;eip=0x00a3d5; 	J(JMP(loc_1a3f9));	// 25411                  jmp     short loc_1A3F9 ;~ 01A2:A3D5
loc_1a3d7:
	// 6009 
cs=0x1a2;eip=0x00a3d7; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 25415                  lods    word ptr es:[si] ;~ 01A2:A3D7
cs=0x1a2;eip=0x00a3d9; 	T(XCHG(al, ah));	// 25416                  xchg    al, ah ;~ 01A2:A3D9
cs=0x1a2;eip=0x00a3db; 	T(XOR(bh, bh));	// 25417                  xor     bh, bh ;~ 01A2:A3DB
cs=0x1a2;eip=0x00a3dd; 	T(dh = cl;);	// 25418                  mov     dh, cl ;~ 01A2:A3DD
loc_1a3df:
	// 6010 
cs=0x1a2;eip=0x00a3df; 	T(SHR(ax, 1));	// 25421                  shr     ax, 1 ;~ 01A2:A3DF
cs=0x1a2;eip=0x00a3e1; 	T(RCR(bh, 1));	// 25422                  rcr     bh, 1 ;~ 01A2:A3E1
cs=0x1a2;eip=0x00a3e3; 	T(DEC(dh));	// 25423                  dec     dh ;~ 01A2:A3E3
cs=0x1a2;eip=0x00a3e5; 	J(JNZ(loc_1a3df));	// 25424                  jnz     short loc_1A3DF ;~ 01A2:A3E5
cs=0x1a2;eip=0x00a3e7; 	T(OR(ah, dl));	// 25425                  or      ah, dl ;~ 01A2:A3E7
cs=0x1a2;eip=0x00a3e9; 	T(XCHG(al, ah));	// 25426                  xchg    al, ah ;~ 01A2:A3E9
cs=0x1a2;eip=0x00a3eb; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 25427                  mov     [di], ax ;~ 01A2:A3EB
cs=0x1a2;eip=0x00a3ed; 	T(ADD(di, 2));	// 25428                  add     di, 2 ;~ 01A2:A3ED
cs=0x1a2;eip=0x00a3f0; 	X(DEC(byte_6fb93));	// 25429                  dec     ss:byte_6FB93 ;~ 01A2:A3F0
cs=0x1a2;eip=0x00a3f5; 	J(JNZ(loc_1a3b3));	// 25430                  jnz     short loc_1A3B3 ;~ 01A2:A3F5
cs=0x1a2;eip=0x00a3f7; 	X(MOV(*(raddr(ds,di)), bh));	// 25431                  mov     [di], bh ;~ 01A2:A3F7
loc_1a3f9:
	// 6011 
cs=0x1a2;eip=0x00a3f9; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 25434                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:A3F9
cs=0x1a2;eip=0x00a3fe; 	T(DEC(bl));	// 25435                  dec     bl ;~ 01A2:A3FE
cs=0x1a2;eip=0x00a400; 	J(JNZ(loc_1a3a9));	// 25436                  jnz     short loc_1A3A9 ;~ 01A2:A400
cs=0x1a2;eip=0x00a402; 	T(di = bp;);	// 25437                  mov     di, bp ;~ 01A2:A402
cs=0x1a2;eip=0x00a404; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 25438                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:A404
cs=0x1a2;eip=0x00a409; 	T(dx = 0x3C4;);	// 25439                  mov     dx, 3C4h ;~ 01A2:A409
cs=0x1a2;eip=0x00a40c; 	T(ax = 0x202;);	// 25440                  mov     ax, 202h ;~ 01A2:A40C
cs=0x1a2;eip=0x00a40f; 	S(OUT(dx, ax));	// 25441                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:A40F
cs=0x1a2;eip=0x00a410; 	T(bp = di;);	// 25443                  mov     bp, di ;~ 01A2:A410
cs=0x1a2;eip=0x00a412; 	T(bl = ch;);	// 25444                  mov     bl, ch ;~ 01A2:A412
loc_1a414:
	// 6012 
cs=0x1a2;eip=0x00a414; 	T(XOR(bh, bh));	// 25447                  xor     bh, bh ;~ 01A2:A414
cs=0x1a2;eip=0x00a416; 	T(al = byte_6fb92;);	// 25448                  mov     al, ss:byte_6FB92 ;~ 01A2:A416
cs=0x1a2;eip=0x00a41a; 	X(byte_6fb93 = al;);	// 25449                  mov     ss:byte_6FB93, al ;~ 01A2:A41A
loc_1a41e:
	// 6013 
cs=0x1a2;eip=0x00a41e; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 25452                  lods    word ptr es:[si] ;~ 01A2:A41E
cs=0x1a2;eip=0x00a420; 	T(XCHG(al, ah));	// 25453                  xchg    al, ah ;~ 01A2:A420
cs=0x1a2;eip=0x00a422; 	T(XOR(dl, dl));	// 25454                  xor     dl, dl ;~ 01A2:A422
cs=0x1a2;eip=0x00a424; 	T(dh = cl;);	// 25455                  mov     dh, cl ;~ 01A2:A424
loc_1a426:
	// 6014 
cs=0x1a2;eip=0x00a426; 	T(SHR(ax, 1));	// 25458                  shr     ax, 1 ;~ 01A2:A426
cs=0x1a2;eip=0x00a428; 	T(RCR(dl, 1));	// 25459                  rcr     dl, 1 ;~ 01A2:A428
cs=0x1a2;eip=0x00a42a; 	T(DEC(dh));	// 25460                  dec     dh ;~ 01A2:A42A
cs=0x1a2;eip=0x00a42c; 	J(JNZ(loc_1a426));	// 25461                  jnz     short loc_1A426 ;~ 01A2:A42C
cs=0x1a2;eip=0x00a42e; 	T(OR(ah, bh));	// 25462                  or      ah, bh ;~ 01A2:A42E
cs=0x1a2;eip=0x00a430; 	T(XCHG(al, ah));	// 25463                  xchg    al, ah ;~ 01A2:A430
cs=0x1a2;eip=0x00a432; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 25464                  mov     [di], ax ;~ 01A2:A432
cs=0x1a2;eip=0x00a434; 	T(ADD(di, 2));	// 25465                  add     di, 2 ;~ 01A2:A434
cs=0x1a2;eip=0x00a437; 	X(DEC(byte_6fb93));	// 25466                  dec     ss:byte_6FB93 ;~ 01A2:A437
cs=0x1a2;eip=0x00a43c; 	J(JNZ(loc_1a442));	// 25467                  jnz     short loc_1A442 ;~ 01A2:A43C
cs=0x1a2;eip=0x00a43e; 	X(MOV(*(raddr(ds,di)), dl));	// 25468                  mov     [di], dl ;~ 01A2:A43E
cs=0x1a2;eip=0x00a440; 	J(JMP(loc_1a464));	// 25469                  jmp     short loc_1A464 ;~ 01A2:A440
loc_1a442:
	// 6015 
cs=0x1a2;eip=0x00a442; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 25473                  lods    word ptr es:[si] ;~ 01A2:A442
cs=0x1a2;eip=0x00a444; 	T(XCHG(al, ah));	// 25474                  xchg    al, ah ;~ 01A2:A444
cs=0x1a2;eip=0x00a446; 	T(XOR(bh, bh));	// 25475                  xor     bh, bh ;~ 01A2:A446
cs=0x1a2;eip=0x00a448; 	T(dh = cl;);	// 25476                  mov     dh, cl ;~ 01A2:A448
loc_1a44a:
	// 6016 
cs=0x1a2;eip=0x00a44a; 	T(SHR(ax, 1));	// 25479                  shr     ax, 1 ;~ 01A2:A44A
cs=0x1a2;eip=0x00a44c; 	T(RCR(bh, 1));	// 25480                  rcr     bh, 1 ;~ 01A2:A44C
cs=0x1a2;eip=0x00a44e; 	T(DEC(dh));	// 25481                  dec     dh ;~ 01A2:A44E
cs=0x1a2;eip=0x00a450; 	J(JNZ(loc_1a44a));	// 25482                  jnz     short loc_1A44A ;~ 01A2:A450
cs=0x1a2;eip=0x00a452; 	T(OR(ah, dl));	// 25483                  or      ah, dl ;~ 01A2:A452
cs=0x1a2;eip=0x00a454; 	T(XCHG(al, ah));	// 25484                  xchg    al, ah ;~ 01A2:A454
cs=0x1a2;eip=0x00a456; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 25485                  mov     [di], ax ;~ 01A2:A456
cs=0x1a2;eip=0x00a458; 	T(ADD(di, 2));	// 25486                  add     di, 2 ;~ 01A2:A458
cs=0x1a2;eip=0x00a45b; 	X(DEC(byte_6fb93));	// 25487                  dec     ss:byte_6FB93 ;~ 01A2:A45B
cs=0x1a2;eip=0x00a460; 	J(JNZ(loc_1a41e));	// 25488                  jnz     short loc_1A41E ;~ 01A2:A460
cs=0x1a2;eip=0x00a462; 	X(MOV(*(raddr(ds,di)), bh));	// 25489                  mov     [di], bh ;~ 01A2:A462
loc_1a464:
	// 6017 
cs=0x1a2;eip=0x00a464; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 25492                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:A464
cs=0x1a2;eip=0x00a469; 	T(DEC(bl));	// 25493                  dec     bl ;~ 01A2:A469
cs=0x1a2;eip=0x00a46b; 	J(JNZ(loc_1a414));	// 25494                  jnz     short loc_1A414 ;~ 01A2:A46B
cs=0x1a2;eip=0x00a46d; 	T(di = bp;);	// 25495                  mov     di, bp ;~ 01A2:A46D
cs=0x1a2;eip=0x00a46f; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 25496                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:A46F
cs=0x1a2;eip=0x00a474; 	T(dx = 0x3C4;);	// 25497                  mov     dx, 3C4h ;~ 01A2:A474
cs=0x1a2;eip=0x00a477; 	T(ax = 0x402;);	// 25498                  mov     ax, 402h ;~ 01A2:A477
cs=0x1a2;eip=0x00a47a; 	S(OUT(dx, ax));	// 25499                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:A47A
cs=0x1a2;eip=0x00a47b; 	T(bp = di;);	// 25501                  mov     bp, di ;~ 01A2:A47B
cs=0x1a2;eip=0x00a47d; 	T(bl = ch;);	// 25502                  mov     bl, ch ;~ 01A2:A47D
loc_1a47f:
	// 6018 
cs=0x1a2;eip=0x00a47f; 	T(XOR(bh, bh));	// 25505                  xor     bh, bh ;~ 01A2:A47F
cs=0x1a2;eip=0x00a481; 	T(al = byte_6fb92;);	// 25506                  mov     al, ss:byte_6FB92 ;~ 01A2:A481
cs=0x1a2;eip=0x00a485; 	X(byte_6fb93 = al;);	// 25507                  mov     ss:byte_6FB93, al ;~ 01A2:A485
loc_1a489:
	// 6019 
cs=0x1a2;eip=0x00a489; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 25510                  lods    word ptr es:[si] ;~ 01A2:A489
cs=0x1a2;eip=0x00a48b; 	T(XCHG(al, ah));	// 25511                  xchg    al, ah ;~ 01A2:A48B
cs=0x1a2;eip=0x00a48d; 	T(XOR(dl, dl));	// 25512                  xor     dl, dl ;~ 01A2:A48D
cs=0x1a2;eip=0x00a48f; 	T(dh = cl;);	// 25513                  mov     dh, cl ;~ 01A2:A48F
loc_1a491:
	// 6020 
cs=0x1a2;eip=0x00a491; 	T(SHR(ax, 1));	// 25516                  shr     ax, 1 ;~ 01A2:A491
cs=0x1a2;eip=0x00a493; 	T(RCR(dl, 1));	// 25517                  rcr     dl, 1 ;~ 01A2:A493
cs=0x1a2;eip=0x00a495; 	T(DEC(dh));	// 25518                  dec     dh ;~ 01A2:A495
cs=0x1a2;eip=0x00a497; 	J(JNZ(loc_1a491));	// 25519                  jnz     short loc_1A491 ;~ 01A2:A497
cs=0x1a2;eip=0x00a499; 	T(OR(ah, bh));	// 25520                  or      ah, bh ;~ 01A2:A499
cs=0x1a2;eip=0x00a49b; 	T(XCHG(al, ah));	// 25521                  xchg    al, ah ;~ 01A2:A49B
cs=0x1a2;eip=0x00a49d; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 25522                  mov     [di], ax ;~ 01A2:A49D
cs=0x1a2;eip=0x00a49f; 	T(ADD(di, 2));	// 25523                  add     di, 2 ;~ 01A2:A49F
cs=0x1a2;eip=0x00a4a2; 	X(DEC(byte_6fb93));	// 25524                  dec     ss:byte_6FB93 ;~ 01A2:A4A2
cs=0x1a2;eip=0x00a4a7; 	J(JNZ(loc_1a4ad));	// 25525                  jnz     short loc_1A4AD ;~ 01A2:A4A7
cs=0x1a2;eip=0x00a4a9; 	X(MOV(*(raddr(ds,di)), dl));	// 25526                  mov     [di], dl ;~ 01A2:A4A9
cs=0x1a2;eip=0x00a4ab; 	J(JMP(loc_1a4cf));	// 25527                  jmp     short loc_1A4CF ;~ 01A2:A4AB
loc_1a4ad:
	// 6021 
cs=0x1a2;eip=0x00a4ad; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 25531                  lods    word ptr es:[si] ;~ 01A2:A4AD
cs=0x1a2;eip=0x00a4af; 	T(XCHG(al, ah));	// 25532                  xchg    al, ah ;~ 01A2:A4AF
cs=0x1a2;eip=0x00a4b1; 	T(XOR(bh, bh));	// 25533                  xor     bh, bh ;~ 01A2:A4B1
cs=0x1a2;eip=0x00a4b3; 	T(dh = cl;);	// 25534                  mov     dh, cl ;~ 01A2:A4B3
loc_1a4b5:
	// 6022 
cs=0x1a2;eip=0x00a4b5; 	T(SHR(ax, 1));	// 25537                  shr     ax, 1 ;~ 01A2:A4B5
cs=0x1a2;eip=0x00a4b7; 	T(RCR(bh, 1));	// 25538                  rcr     bh, 1 ;~ 01A2:A4B7
cs=0x1a2;eip=0x00a4b9; 	T(DEC(dh));	// 25539                  dec     dh ;~ 01A2:A4B9
cs=0x1a2;eip=0x00a4bb; 	J(JNZ(loc_1a4b5));	// 25540                  jnz     short loc_1A4B5 ;~ 01A2:A4BB
cs=0x1a2;eip=0x00a4bd; 	T(OR(ah, dl));	// 25541                  or      ah, dl ;~ 01A2:A4BD
cs=0x1a2;eip=0x00a4bf; 	T(XCHG(al, ah));	// 25542                  xchg    al, ah ;~ 01A2:A4BF
cs=0x1a2;eip=0x00a4c1; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 25543                  mov     [di], ax ;~ 01A2:A4C1
cs=0x1a2;eip=0x00a4c3; 	T(ADD(di, 2));	// 25544                  add     di, 2 ;~ 01A2:A4C3
cs=0x1a2;eip=0x00a4c6; 	X(DEC(byte_6fb93));	// 25545                  dec     ss:byte_6FB93 ;~ 01A2:A4C6
cs=0x1a2;eip=0x00a4cb; 	J(JNZ(loc_1a489));	// 25546                  jnz     short loc_1A489 ;~ 01A2:A4CB
cs=0x1a2;eip=0x00a4cd; 	X(MOV(*(raddr(ds,di)), bh));	// 25547                  mov     [di], bh ;~ 01A2:A4CD
loc_1a4cf:
	// 6023 
cs=0x1a2;eip=0x00a4cf; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 25550                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:A4CF
cs=0x1a2;eip=0x00a4d4; 	T(DEC(bl));	// 25551                  dec     bl ;~ 01A2:A4D4
cs=0x1a2;eip=0x00a4d6; 	J(JNZ(loc_1a47f));	// 25552                  jnz     short loc_1A47F ;~ 01A2:A4D6
cs=0x1a2;eip=0x00a4d8; 	T(di = bp;);	// 25553                  mov     di, bp ;~ 01A2:A4D8
cs=0x1a2;eip=0x00a4da; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 25554                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:A4DA
cs=0x1a2;eip=0x00a4df; 	T(dx = 0x3C4;);	// 25555                  mov     dx, 3C4h ;~ 01A2:A4DF
cs=0x1a2;eip=0x00a4e2; 	T(ax = 0x802;);	// 25556                  mov     ax, 802h ;~ 01A2:A4E2
cs=0x1a2;eip=0x00a4e5; 	S(OUT(dx, ax));	// 25557                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:A4E5
cs=0x1a2;eip=0x00a4e6; 	T(bp = di;);	// 25559                  mov     bp, di ;~ 01A2:A4E6
cs=0x1a2;eip=0x00a4e8; 	T(bl = ch;);	// 25560                  mov     bl, ch ;~ 01A2:A4E8
loc_1a4ea:
	// 6024 
cs=0x1a2;eip=0x00a4ea; 	T(XOR(bh, bh));	// 25563                  xor     bh, bh ;~ 01A2:A4EA
cs=0x1a2;eip=0x00a4ec; 	T(al = byte_6fb92;);	// 25564                  mov     al, ss:byte_6FB92 ;~ 01A2:A4EC
cs=0x1a2;eip=0x00a4f0; 	X(byte_6fb93 = al;);	// 25565                  mov     ss:byte_6FB93, al ;~ 01A2:A4F0
loc_1a4f4:
	// 6025 
cs=0x1a2;eip=0x00a4f4; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 25568                  lods    word ptr es:[si] ;~ 01A2:A4F4
cs=0x1a2;eip=0x00a4f6; 	T(XCHG(al, ah));	// 25569                  xchg    al, ah ;~ 01A2:A4F6
cs=0x1a2;eip=0x00a4f8; 	T(XOR(dl, dl));	// 25570                  xor     dl, dl ;~ 01A2:A4F8
cs=0x1a2;eip=0x00a4fa; 	T(dh = cl;);	// 25571                  mov     dh, cl ;~ 01A2:A4FA
loc_1a4fc:
	// 6026 
cs=0x1a2;eip=0x00a4fc; 	T(SHR(ax, 1));	// 25574                  shr     ax, 1 ;~ 01A2:A4FC
cs=0x1a2;eip=0x00a4fe; 	T(RCR(dl, 1));	// 25575                  rcr     dl, 1 ;~ 01A2:A4FE
cs=0x1a2;eip=0x00a500; 	T(DEC(dh));	// 25576                  dec     dh ;~ 01A2:A500
cs=0x1a2;eip=0x00a502; 	J(JNZ(loc_1a4fc));	// 25577                  jnz     short loc_1A4FC ;~ 01A2:A502
cs=0x1a2;eip=0x00a504; 	T(OR(ah, bh));	// 25578                  or      ah, bh ;~ 01A2:A504
cs=0x1a2;eip=0x00a506; 	T(XCHG(al, ah));	// 25579                  xchg    al, ah ;~ 01A2:A506
cs=0x1a2;eip=0x00a508; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 25580                  mov     [di], ax ;~ 01A2:A508
cs=0x1a2;eip=0x00a50a; 	T(ADD(di, 2));	// 25581                  add     di, 2 ;~ 01A2:A50A
cs=0x1a2;eip=0x00a50d; 	X(DEC(byte_6fb93));	// 25582                  dec     ss:byte_6FB93 ;~ 01A2:A50D
cs=0x1a2;eip=0x00a512; 	J(JNZ(loc_1a518));	// 25583                  jnz     short loc_1A518 ;~ 01A2:A512
cs=0x1a2;eip=0x00a514; 	X(MOV(*(raddr(ds,di)), dl));	// 25584                  mov     [di], dl ;~ 01A2:A514
cs=0x1a2;eip=0x00a516; 	J(JMP(loc_1a53a));	// 25585                  jmp     short loc_1A53A ;~ 01A2:A516
loc_1a518:
	// 6027 
cs=0x1a2;eip=0x00a518; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 25589                  lods    word ptr es:[si] ;~ 01A2:A518
cs=0x1a2;eip=0x00a51a; 	T(XCHG(al, ah));	// 25590                  xchg    al, ah ;~ 01A2:A51A
cs=0x1a2;eip=0x00a51c; 	T(XOR(bh, bh));	// 25591                  xor     bh, bh ;~ 01A2:A51C
cs=0x1a2;eip=0x00a51e; 	T(dh = cl;);	// 25592                  mov     dh, cl ;~ 01A2:A51E
loc_1a520:
	// 6028 
cs=0x1a2;eip=0x00a520; 	T(SHR(ax, 1));	// 25595                  shr     ax, 1 ;~ 01A2:A520
cs=0x1a2;eip=0x00a522; 	T(RCR(bh, 1));	// 25596                  rcr     bh, 1 ;~ 01A2:A522
cs=0x1a2;eip=0x00a524; 	T(DEC(dh));	// 25597                  dec     dh ;~ 01A2:A524
cs=0x1a2;eip=0x00a526; 	J(JNZ(loc_1a520));	// 25598                  jnz     short loc_1A520 ;~ 01A2:A526
cs=0x1a2;eip=0x00a528; 	T(OR(ah, dl));	// 25599                  or      ah, dl ;~ 01A2:A528
cs=0x1a2;eip=0x00a52a; 	T(XCHG(al, ah));	// 25600                  xchg    al, ah ;~ 01A2:A52A
cs=0x1a2;eip=0x00a52c; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 25601                  mov     [di], ax ;~ 01A2:A52C
cs=0x1a2;eip=0x00a52e; 	T(ADD(di, 2));	// 25602                  add     di, 2 ;~ 01A2:A52E
cs=0x1a2;eip=0x00a531; 	X(DEC(byte_6fb93));	// 25603                  dec     ss:byte_6FB93 ;~ 01A2:A531
cs=0x1a2;eip=0x00a536; 	J(JNZ(loc_1a4f4));	// 25604                  jnz     short loc_1A4F4 ;~ 01A2:A536
cs=0x1a2;eip=0x00a538; 	X(MOV(*(raddr(ds,di)), bh));	// 25605                  mov     [di], bh ;~ 01A2:A538
loc_1a53a:
	// 6029 
cs=0x1a2;eip=0x00a53a; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 25608                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:A53A
cs=0x1a2;eip=0x00a53f; 	T(DEC(bl));	// 25609                  dec     bl ;~ 01A2:A53F
cs=0x1a2;eip=0x00a541; 	J(JNZ(loc_1a4ea));	// 25610                  jnz     short loc_1A4EA ;~ 01A2:A541
cs=0x1a2;eip=0x00a543; 	T(di = bp;);	// 25611                  mov     di, bp ;~ 01A2:A543
cs=0x1a2;eip=0x00a545; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 25612                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:A545
cs=0x1a2;eip=0x00a54a; 	X(POP(ds));	// 25613                  pop     ds ;~ 01A2:A54A
cs=0x1a2;eip=0x00a54b; 	J(RETN(0));	// 25615                  retn ;~ 01A2:A54B
loc_1a54c:
	// 6030 
cs=0x1a2;eip=0x00a54c; 	T(bp = di;);	// 25620                  mov     bp, di ;~ 01A2:A54C
cs=0x1a2;eip=0x00a54e; 	T(bl = ch;);	// 25621                  mov     bl, ch ;~ 01A2:A54E
loc_1a550:
	// 6031 
cs=0x1a2;eip=0x00a550; 	T(al = byte_6fb92;);	// 25624                  mov     al, ss:byte_6FB92 ;~ 01A2:A550
cs=0x1a2;eip=0x00a554; 	X(byte_6fb93 = al;);	// 25625                  mov     ss:byte_6FB93, al ;~ 01A2:A554
loc_1a558:
	// 6032 
cs=0x1a2;eip=0x00a558; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 25628                  lods    word ptr es:[si] ;~ 01A2:A558
cs=0x1a2;eip=0x00a55a; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 25629                  mov     [di], ax ;~ 01A2:A55A
cs=0x1a2;eip=0x00a55c; 	T(ADD(di, 2));	// 25630                  add     di, 2 ;~ 01A2:A55C
cs=0x1a2;eip=0x00a55f; 	X(DEC(byte_6fb93));	// 25631                  dec     ss:byte_6FB93 ;~ 01A2:A55F
cs=0x1a2;eip=0x00a564; 	J(JNZ(loc_1a558));	// 25632                  jnz     short loc_1A558 ;~ 01A2:A564
cs=0x1a2;eip=0x00a566; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 25633                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:A566
cs=0x1a2;eip=0x00a56b; 	T(DEC(bl));	// 25634                  dec     bl ;~ 01A2:A56B
cs=0x1a2;eip=0x00a56d; 	J(JNZ(loc_1a550));	// 25635                  jnz     short loc_1A550 ;~ 01A2:A56D
cs=0x1a2;eip=0x00a56f; 	T(di = bp;);	// 25636                  mov     di, bp ;~ 01A2:A56F
cs=0x1a2;eip=0x00a571; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 25637                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:A571
cs=0x1a2;eip=0x00a576; 	T(dx = 0x3C4;);	// 25638                  mov     dx, 3C4h ;~ 01A2:A576
cs=0x1a2;eip=0x00a579; 	T(ax = 0x202;);	// 25639                  mov     ax, 202h ;~ 01A2:A579
cs=0x1a2;eip=0x00a57c; 	S(OUT(dx, ax));	// 25640                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:A57C
cs=0x1a2;eip=0x00a57d; 	T(bp = di;);	// 25642                  mov     bp, di ;~ 01A2:A57D
cs=0x1a2;eip=0x00a57f; 	T(bl = ch;);	// 25643                  mov     bl, ch ;~ 01A2:A57F
loc_1a581:
	// 6033 
cs=0x1a2;eip=0x00a581; 	T(al = byte_6fb92;);	// 25646                  mov     al, ss:byte_6FB92 ;~ 01A2:A581
cs=0x1a2;eip=0x00a585; 	X(byte_6fb93 = al;);	// 25647                  mov     ss:byte_6FB93, al ;~ 01A2:A585
loc_1a589:
	// 6034 
cs=0x1a2;eip=0x00a589; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 25650                  lods    word ptr es:[si] ;~ 01A2:A589
cs=0x1a2;eip=0x00a58b; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 25651                  mov     [di], ax ;~ 01A2:A58B
cs=0x1a2;eip=0x00a58d; 	T(ADD(di, 2));	// 25652                  add     di, 2 ;~ 01A2:A58D
cs=0x1a2;eip=0x00a590; 	X(DEC(byte_6fb93));	// 25653                  dec     ss:byte_6FB93 ;~ 01A2:A590
cs=0x1a2;eip=0x00a595; 	J(JNZ(loc_1a589));	// 25654                  jnz     short loc_1A589 ;~ 01A2:A595
cs=0x1a2;eip=0x00a597; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 25655                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:A597
cs=0x1a2;eip=0x00a59c; 	T(DEC(bl));	// 25656                  dec     bl ;~ 01A2:A59C
cs=0x1a2;eip=0x00a59e; 	J(JNZ(loc_1a581));	// 25657                  jnz     short loc_1A581 ;~ 01A2:A59E
cs=0x1a2;eip=0x00a5a0; 	T(di = bp;);	// 25658                  mov     di, bp ;~ 01A2:A5A0
cs=0x1a2;eip=0x00a5a2; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 25659                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:A5A2
cs=0x1a2;eip=0x00a5a7; 	T(dx = 0x3C4;);	// 25660                  mov     dx, 3C4h ;~ 01A2:A5A7
cs=0x1a2;eip=0x00a5aa; 	T(ax = 0x402;);	// 25661                  mov     ax, 402h ;~ 01A2:A5AA
cs=0x1a2;eip=0x00a5ad; 	S(OUT(dx, ax));	// 25662                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:A5AD
cs=0x1a2;eip=0x00a5ae; 	T(bp = di;);	// 25664                  mov     bp, di ;~ 01A2:A5AE
cs=0x1a2;eip=0x00a5b0; 	T(bl = ch;);	// 25665                  mov     bl, ch ;~ 01A2:A5B0
loc_1a5b2:
	// 6035 
cs=0x1a2;eip=0x00a5b2; 	T(al = byte_6fb92;);	// 25668                  mov     al, ss:byte_6FB92 ;~ 01A2:A5B2
cs=0x1a2;eip=0x00a5b6; 	X(byte_6fb93 = al;);	// 25669                  mov     ss:byte_6FB93, al ;~ 01A2:A5B6
loc_1a5ba:
	// 6036 
cs=0x1a2;eip=0x00a5ba; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 25672                  lods    word ptr es:[si] ;~ 01A2:A5BA
cs=0x1a2;eip=0x00a5bc; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 25673                  mov     [di], ax ;~ 01A2:A5BC
cs=0x1a2;eip=0x00a5be; 	T(ADD(di, 2));	// 25674                  add     di, 2 ;~ 01A2:A5BE
cs=0x1a2;eip=0x00a5c1; 	X(DEC(byte_6fb93));	// 25675                  dec     ss:byte_6FB93 ;~ 01A2:A5C1
cs=0x1a2;eip=0x00a5c6; 	J(JNZ(loc_1a5ba));	// 25676                  jnz     short loc_1A5BA ;~ 01A2:A5C6
cs=0x1a2;eip=0x00a5c8; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 25677                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:A5C8
cs=0x1a2;eip=0x00a5cd; 	T(DEC(bl));	// 25678                  dec     bl ;~ 01A2:A5CD
cs=0x1a2;eip=0x00a5cf; 	J(JNZ(loc_1a5b2));	// 25679                  jnz     short loc_1A5B2 ;~ 01A2:A5CF
cs=0x1a2;eip=0x00a5d1; 	T(di = bp;);	// 25680                  mov     di, bp ;~ 01A2:A5D1
cs=0x1a2;eip=0x00a5d3; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 25681                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:A5D3
cs=0x1a2;eip=0x00a5d8; 	T(dx = 0x3C4;);	// 25682                  mov     dx, 3C4h ;~ 01A2:A5D8
cs=0x1a2;eip=0x00a5db; 	T(ax = 0x802;);	// 25683                  mov     ax, 802h ;~ 01A2:A5DB
cs=0x1a2;eip=0x00a5de; 	S(OUT(dx, ax));	// 25684                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:A5DE
cs=0x1a2;eip=0x00a5df; 	T(bp = di;);	// 25686                  mov     bp, di ;~ 01A2:A5DF
cs=0x1a2;eip=0x00a5e1; 	T(bl = ch;);	// 25687                  mov     bl, ch ;~ 01A2:A5E1
loc_1a5e3:
	// 6037 
cs=0x1a2;eip=0x00a5e3; 	T(al = byte_6fb92;);	// 25690                  mov     al, ss:byte_6FB92 ;~ 01A2:A5E3
cs=0x1a2;eip=0x00a5e7; 	X(byte_6fb93 = al;);	// 25691                  mov     ss:byte_6FB93, al ;~ 01A2:A5E7
loc_1a5eb:
	// 6038 
cs=0x1a2;eip=0x00a5eb; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 25694                  lods    word ptr es:[si] ;~ 01A2:A5EB
cs=0x1a2;eip=0x00a5ed; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 25695                  mov     [di], ax ;~ 01A2:A5ED
cs=0x1a2;eip=0x00a5ef; 	T(ADD(di, 2));	// 25696                  add     di, 2 ;~ 01A2:A5EF
cs=0x1a2;eip=0x00a5f2; 	X(DEC(byte_6fb93));	// 25697                  dec     ss:byte_6FB93 ;~ 01A2:A5F2
cs=0x1a2;eip=0x00a5f7; 	J(JNZ(loc_1a5eb));	// 25698                  jnz     short loc_1A5EB ;~ 01A2:A5F7
cs=0x1a2;eip=0x00a5f9; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 25699                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:A5F9
cs=0x1a2;eip=0x00a5fe; 	T(DEC(bl));	// 25700                  dec     bl ;~ 01A2:A5FE
cs=0x1a2;eip=0x00a600; 	J(JNZ(loc_1a5e3));	// 25701                  jnz     short loc_1A5E3 ;~ 01A2:A600
cs=0x1a2;eip=0x00a602; 	T(di = bp;);	// 25702                  mov     di, bp ;~ 01A2:A602
cs=0x1a2;eip=0x00a604; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 25703                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:A604
loc_1a609:
	// 6039 
cs=0x1a2;eip=0x00a609; 	X(POP(ds));	// 25706                  pop     ds ;~ 01A2:A609
cs=0x1a2;eip=0x00a60a; 	J(RETN(0));	// 25708                  retn ;~ 01A2:A60A
sub_1a621:
	// 25728 
cs=0x1a2;eip=0x00a621; 	J({;});	// 25729                  jmp     short $+2 ;~ 01A2:A621
loc_1a623:
	// 6040 
cs=0x1a2;eip=0x00a623; 	T(OR(dl, dl));	// 25734                  or      dl, dl ;~ 01A2:A623
cs=0x1a2;eip=0x00a625; 	J(JNZ(loc_1a628));	// 25735                  jnz     short loc_1A628 ;~ 01A2:A625
cs=0x1a2;eip=0x00a627; 	T(NOP);	// 25736                  nop ;~ 01A2:A627
loc_1a628:
	// 6041 
cs=0x1a2;eip=0x00a628; 	X(PUSH(ds));	// 25739                  push    ds ;~ 01A2:A628
cs=0x1a2;eip=0x00a629; 	T(es = *(dw*)(((db*)&off_1f8c8)+2););	// 25740                  mov     es, word ptr ds:off_1F8C8+2 ;~ 01A2:A629
cs=0x1a2;eip=0x00a62d; 	T(ds = bp;);	// 25742                  mov     ds, bp ;~ 01A2:A62D
cs=0x1a2;eip=0x00a62f; 	T(TEST(cl, 8));	// 25744                  test    cl, 8 ;~ 01A2:A62F
cs=0x1a2;eip=0x00a632; 	J(JZ(loc_1a635));	// 25745                  jz      short loc_1A635 ;~ 01A2:A632
cs=0x1a2;eip=0x00a634; 	T(INC(di));	// 25746                  inc     di ;~ 01A2:A634
loc_1a635:
	// 6042 
cs=0x1a2;eip=0x00a635; 	T(XOR(dh, dh));	// 25749                  xor     dh, dh ;~ 01A2:A635
cs=0x1a2;eip=0x00a637; 	T(SHL(dx, 1));	// 25750                  shl     dx, 1 ;~ 01A2:A637
cs=0x1a2;eip=0x00a639; 	T(bx = m2c::kloc_1a609;);	// 25751                  mov     bx, offset loc_1A609 ;~ 01A2:A639
cs=0x1a2;eip=0x00a63c; 	T(ADD(bx, dx));	// 25752                  add     bx, dx ;~ 01A2:A63C
cs=0x1a2;eip=0x00a63e; 	T(MOV(ax, *(dw*)(raddr(cs,bx))));	// 25753                  mov     ax, cs:[bx] ;~ 01A2:A63E
cs=0x1a2;eip=0x00a641; __disp=ax;
	J(return __dispatch_call(__disp, _state););	// 25754                  jmp     ax ;~ 01A2:A641

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1a3a5: 	goto loc_1a3a5;
        case m2c::kloc_1a3a9: 	goto loc_1a3a9;
        case m2c::kloc_1a3b3: 	goto loc_1a3b3;
        case m2c::kloc_1a3bb: 	goto loc_1a3bb;
        case m2c::kloc_1a3d7: 	goto loc_1a3d7;
        case m2c::kloc_1a3df: 	goto loc_1a3df;
        case m2c::kloc_1a3f9: 	goto loc_1a3f9;
        case m2c::kloc_1a414: 	goto loc_1a414;
        case m2c::kloc_1a41e: 	goto loc_1a41e;
        case m2c::kloc_1a426: 	goto loc_1a426;
        case m2c::kloc_1a442: 	goto loc_1a442;
        case m2c::kloc_1a44a: 	goto loc_1a44a;
        case m2c::kloc_1a464: 	goto loc_1a464;
        case m2c::kloc_1a47f: 	goto loc_1a47f;
        case m2c::kloc_1a489: 	goto loc_1a489;
        case m2c::kloc_1a491: 	goto loc_1a491;
        case m2c::kloc_1a4ad: 	goto loc_1a4ad;
        case m2c::kloc_1a4b5: 	goto loc_1a4b5;
        case m2c::kloc_1a4cf: 	goto loc_1a4cf;
        case m2c::kloc_1a4ea: 	goto loc_1a4ea;
        case m2c::kloc_1a4f4: 	goto loc_1a4f4;
        case m2c::kloc_1a4fc: 	goto loc_1a4fc;
        case m2c::kloc_1a518: 	goto loc_1a518;
        case m2c::kloc_1a520: 	goto loc_1a520;
        case m2c::kloc_1a53a: 	goto loc_1a53a;
        case m2c::kloc_1a54c: 	goto loc_1a54c;
        case m2c::kloc_1a550: 	goto loc_1a550;
        case m2c::kloc_1a558: 	goto loc_1a558;
        case m2c::kloc_1a581: 	goto loc_1a581;
        case m2c::kloc_1a589: 	goto loc_1a589;
        case m2c::kloc_1a5b2: 	goto loc_1a5b2;
        case m2c::kloc_1a5ba: 	goto loc_1a5ba;
        case m2c::kloc_1a5e3: 	goto loc_1a5e3;
        case m2c::kloc_1a5eb: 	goto loc_1a5eb;
        case m2c::kloc_1a609: 	goto loc_1a609;
        case m2c::kloc_1a623: 	goto loc_1a623;
        case m2c::kloc_1a628: 	goto loc_1a628;
        case m2c::kloc_1a635: 	goto loc_1a635;
        case m2c::ksub_1a372: 	goto sub_1a372;
        case m2c::ksub_1a621: 	goto sub_1a621;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1a643(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1a643:
    _begin:
cs=0x1a2;eip=0x00a643; 	T(AND(cl, 7));	// 25762                  and     cl, 7 ;~ 01A2:A643
cs=0x1a2;eip=0x00a646; 	J(JZ(loc_1a68d));	// 25763                  jz      short loc_1A68D ;~ 01A2:A646
cs=0x1a2;eip=0x00a648; 	T(dx = 0x3C4;);	// 25764                  mov     dx, 3C4h ;~ 01A2:A648
cs=0x1a2;eip=0x00a64b; 	T(ax = 0x0F02;);	// 25765                  mov     ax, 0F02h ;~ 01A2:A64B
cs=0x1a2;eip=0x00a64e; 	S(OUT(dx, ax));	// 25766                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:A64E
cs=0x1a2;eip=0x00a64f; 	T(dx = 0x3CE;);	// 25768                  mov     dx, 3CEh ;~ 01A2:A64F
cs=0x1a2;eip=0x00a652; 	T(ax = 0x805;);	// 25769                  mov     ax, 805h ;~ 01A2:A652
cs=0x1a2;eip=0x00a655; 	S(OUT(dx, ax));	// 25770                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A655
cs=0x1a2;eip=0x00a656; 	T(ax = 0x803;);	// 25772                  mov     ax, 803h ;~ 01A2:A656
cs=0x1a2;eip=0x00a659; 	S(OUT(dx, ax));	// 25773                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A659
cs=0x1a2;eip=0x00a65a; 	T(ax = 7;);	// 25775                  mov     ax, 7 ;~ 01A2:A65A
cs=0x1a2;eip=0x00a65d; 	S(OUT(dx, ax));	// 25776                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A65D
cs=0x1a2;eip=0x00a65e; 	T(bp = di;);	// 25779                  mov     bp, di ;~ 01A2:A65E
cs=0x1a2;eip=0x00a660; 	T(bx = 0x0FF00;);	// 25780                  mov     bx, 0FF00h ;~ 01A2:A660
cs=0x1a2;eip=0x00a663; 	T(SHR(bx, cl));	// 25781                  shr     bx, cl ;~ 01A2:A663
cs=0x1a2;eip=0x00a665; 	T(dh = ch;);	// 25782                  mov     dh, ch ;~ 01A2:A665
loc_1a667:
	// 6043 
cs=0x1a2;eip=0x00a667; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 25785                  lods    word ptr es:[si] ;~ 01A2:A667
cs=0x1a2;eip=0x00a669; 	T(ROR(ax, cl));	// 25786                  ror     ax, cl ;~ 01A2:A669
cs=0x1a2;eip=0x00a66b; 	T(dl = al;);	// 25787                  mov     dl, al ;~ 01A2:A66B
cs=0x1a2;eip=0x00a66d; 	T(AND(al, bh));	// 25788                  and     al, bh ;~ 01A2:A66D
cs=0x1a2;eip=0x00a66f; 	T(AND(dl, bl));	// 25789                  and     dl, bl ;~ 01A2:A66F
cs=0x1a2;eip=0x00a671; 	T(NOT(ax));	// 25790                  not     ax ;~ 01A2:A671
cs=0x1a2;eip=0x00a673; 	X(AND(*(raddr(ds,di)), al));	// 25791                  and     [di], al ;~ 01A2:A673
cs=0x1a2;eip=0x00a675; 	X(AND(*(raddr(ds,di+1)), ah));	// 25792                  and     [di+1], ah ;~ 01A2:A675
cs=0x1a2;eip=0x00a678; 	T(NOT(dl));	// 25793                  not     dl ;~ 01A2:A678
cs=0x1a2;eip=0x00a67a; 	X(AND(*(raddr(ds,di+2)), dl));	// 25794                  and     [di+2], dl ;~ 01A2:A67A
cs=0x1a2;eip=0x00a67d; 	T(ADD(di, 0x28));	// 25795                  add     di, 28h ; '(' ;~ 01A2:A67D
cs=0x1a2;eip=0x00a680; 	T(DEC(dh));	// 25796                  dec     dh ;~ 01A2:A680
cs=0x1a2;eip=0x00a682; 	J(JNZ(loc_1a667));	// 25797                  jnz     short loc_1A667 ;~ 01A2:A682
cs=0x1a2;eip=0x00a684; 	T(di = bp;);	// 25798                  mov     di, bp ;~ 01A2:A684
cs=0x1a2;eip=0x00a686; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 25799                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:A686
cs=0x1a2;eip=0x00a68b; 	X(POP(ds));	// 25800                  pop     ds ;~ 01A2:A68B
cs=0x1a2;eip=0x00a68c; 	J(RETN(0));	// 25802                  retn ;~ 01A2:A68C
loc_1a68d:
	// 6044 
cs=0x1a2;eip=0x00a68d; 	T(dx = 0x3C4;);	// 25807                  mov     dx, 3C4h ;~ 01A2:A68D
cs=0x1a2;eip=0x00a690; 	T(ax = 0x0F02;);	// 25808                  mov     ax, 0F02h ;~ 01A2:A690
cs=0x1a2;eip=0x00a693; 	S(OUT(dx, ax));	// 25809                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:A693
cs=0x1a2;eip=0x00a694; 	T(dx = 0x3CE;);	// 25811                  mov     dx, 3CEh ;~ 01A2:A694
cs=0x1a2;eip=0x00a697; 	T(ax = 0x805;);	// 25812                  mov     ax, 805h ;~ 01A2:A697
cs=0x1a2;eip=0x00a69a; 	S(OUT(dx, ax));	// 25813                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A69A
cs=0x1a2;eip=0x00a69b; 	T(ax = 0x803;);	// 25815                  mov     ax, 803h ;~ 01A2:A69B
cs=0x1a2;eip=0x00a69e; 	S(OUT(dx, ax));	// 25816                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A69E
cs=0x1a2;eip=0x00a69f; 	T(ax = 7;);	// 25818                  mov     ax, 7 ;~ 01A2:A69F
cs=0x1a2;eip=0x00a6a2; 	S(OUT(dx, ax));	// 25819                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A6A2
cs=0x1a2;eip=0x00a6a3; 	T(bp = di;);	// 25822                  mov     bp, di ;~ 01A2:A6A3
cs=0x1a2;eip=0x00a6a5; 	T(cl = ch;);	// 25823                  mov     cl, ch ;~ 01A2:A6A5
loc_1a6a7:
	// 6045 
cs=0x1a2;eip=0x00a6a7; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 25826                  lods    word ptr es:[si] ;~ 01A2:A6A7
cs=0x1a2;eip=0x00a6a9; 	T(NOT(ax));	// 25827                  not     ax ;~ 01A2:A6A9
cs=0x1a2;eip=0x00a6ab; 	X(AND(*(raddr(ds,di)), al));	// 25828                  and     [di], al ;~ 01A2:A6AB
cs=0x1a2;eip=0x00a6ad; 	X(AND(*(raddr(ds,di+1)), ah));	// 25829                  and     [di+1], ah ;~ 01A2:A6AD
cs=0x1a2;eip=0x00a6b0; 	T(ADD(di, 0x28));	// 25830                  add     di, 28h ; '(' ;~ 01A2:A6B0
cs=0x1a2;eip=0x00a6b3; 	T(DEC(cl));	// 25831                  dec     cl ;~ 01A2:A6B3
cs=0x1a2;eip=0x00a6b5; 	J(JNZ(loc_1a6a7));	// 25832                  jnz     short loc_1A6A7 ;~ 01A2:A6B5
cs=0x1a2;eip=0x00a6b7; 	T(di = bp;);	// 25833                  mov     di, bp ;~ 01A2:A6B7
cs=0x1a2;eip=0x00a6b9; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 25834                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:A6B9
cs=0x1a2;eip=0x00a6be; 	X(POP(ds));	// 25835                  pop     ds ;~ 01A2:A6BE
cs=0x1a2;eip=0x00a6bf; 	J(RETN(0));	// 25837                  retn ;~ 01A2:A6BF

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1a667: 	goto loc_1a667;
        case m2c::kloc_1a68d: 	goto loc_1a68d;
        case m2c::kloc_1a6a7: 	goto loc_1a6a7;
        case m2c::ksub_1a643: 	goto sub_1a643;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1a6c0(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1a6c0:
    _begin:
cs=0x1a2;eip=0x00a6c0; 	T(AND(cl, 7));	// 25845                  and     cl, 7 ;~ 01A2:A6C0
cs=0x1a2;eip=0x00a6c3; 	J(JZ(loc_1a720));	// 25846                  jz      short loc_1A720 ;~ 01A2:A6C3
cs=0x1a2;eip=0x00a6c5; 	T(dx = 0x3C4;);	// 25847                  mov     dx, 3C4h ;~ 01A2:A6C5
cs=0x1a2;eip=0x00a6c8; 	T(ax = 0x0F02;);	// 25848                  mov     ax, 0F02h ;~ 01A2:A6C8
cs=0x1a2;eip=0x00a6cb; 	S(OUT(dx, ax));	// 25849                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:A6CB
cs=0x1a2;eip=0x00a6cc; 	T(dx = 0x3CE;);	// 25851                  mov     dx, 3CEh ;~ 01A2:A6CC
cs=0x1a2;eip=0x00a6cf; 	T(ax = 0x805;);	// 25852                  mov     ax, 805h ;~ 01A2:A6CF
cs=0x1a2;eip=0x00a6d2; 	S(OUT(dx, ax));	// 25853                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A6D2
cs=0x1a2;eip=0x00a6d3; 	T(ax = 0x803;);	// 25855                  mov     ax, 803h ;~ 01A2:A6D3
cs=0x1a2;eip=0x00a6d6; 	S(OUT(dx, ax));	// 25856                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A6D6
cs=0x1a2;eip=0x00a6d7; 	T(ax = 7;);	// 25858                  mov     ax, 7 ;~ 01A2:A6D7
cs=0x1a2;eip=0x00a6da; 	S(OUT(dx, ax));	// 25859                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A6DA
cs=0x1a2;eip=0x00a6db; 	X(PUSH(cx));	// 25862                  push    cx ;~ 01A2:A6DB
cs=0x1a2;eip=0x00a6dc; 	T(bp = di;);	// 25863                  mov     bp, di ;~ 01A2:A6DC
cs=0x1a2;eip=0x00a6de; 	T(bx = 0x0FF00;);	// 25864                  mov     bx, 0FF00h ;~ 01A2:A6DE
cs=0x1a2;eip=0x00a6e1; 	T(SHR(bx, cl));	// 25865                  shr     bx, cl ;~ 01A2:A6E1
loc_1a6e3:
	// 6046 
cs=0x1a2;eip=0x00a6e3; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 25868                  lods    word ptr es:[si] ;~ 01A2:A6E3
cs=0x1a2;eip=0x00a6e5; 	T(ROR(ax, cl));	// 25869                  ror     ax, cl ;~ 01A2:A6E5
cs=0x1a2;eip=0x00a6e7; 	T(dl = al;);	// 25870                  mov     dl, al ;~ 01A2:A6E7
cs=0x1a2;eip=0x00a6e9; 	T(AND(al, bh));	// 25871                  and     al, bh ;~ 01A2:A6E9
cs=0x1a2;eip=0x00a6eb; 	T(AND(dl, bl));	// 25872                  and     dl, bl ;~ 01A2:A6EB
cs=0x1a2;eip=0x00a6ed; 	T(NOT(ax));	// 25873                  not     ax ;~ 01A2:A6ED
cs=0x1a2;eip=0x00a6ef; 	X(AND(*(raddr(ds,di)), al));	// 25874                  and     [di], al ;~ 01A2:A6EF
cs=0x1a2;eip=0x00a6f1; 	X(AND(*(raddr(ds,di+1)), ah));	// 25875                  and     [di+1], ah ;~ 01A2:A6F1
cs=0x1a2;eip=0x00a6f4; 	T(ADD(di, 2));	// 25876                  add     di, 2 ;~ 01A2:A6F4
cs=0x1a2;eip=0x00a6f7; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 25877                  lods    word ptr es:[si] ;~ 01A2:A6F7
cs=0x1a2;eip=0x00a6f9; 	T(ROR(ax, cl));	// 25878                  ror     ax, cl ;~ 01A2:A6F9
cs=0x1a2;eip=0x00a6fb; 	T(dh = al;);	// 25879                  mov     dh, al ;~ 01A2:A6FB
cs=0x1a2;eip=0x00a6fd; 	T(AND(al, bh));	// 25880                  and     al, bh ;~ 01A2:A6FD
cs=0x1a2;eip=0x00a6ff; 	T(AND(dh, bl));	// 25881                  and     dh, bl ;~ 01A2:A6FF
cs=0x1a2;eip=0x00a701; 	T(OR(al, dl));	// 25882                  or      al, dl ;~ 01A2:A701
cs=0x1a2;eip=0x00a703; 	T(NOT(ax));	// 25883                  not     ax ;~ 01A2:A703
cs=0x1a2;eip=0x00a705; 	X(AND(*(raddr(ds,di)), al));	// 25884                  and     [di], al ;~ 01A2:A705
cs=0x1a2;eip=0x00a707; 	X(AND(*(raddr(ds,di+1)), ah));	// 25885                  and     [di+1], ah ;~ 01A2:A707
cs=0x1a2;eip=0x00a70a; 	T(NOT(dh));	// 25886                  not     dh ;~ 01A2:A70A
cs=0x1a2;eip=0x00a70c; 	X(AND(*(raddr(ds,di+2)), dh));	// 25887                  and     [di+2], dh ;~ 01A2:A70C
cs=0x1a2;eip=0x00a70f; 	T(ADD(di, 0x26));	// 25888                  add     di, 26h ; '&' ;~ 01A2:A70F
cs=0x1a2;eip=0x00a712; 	T(DEC(ch));	// 25889                  dec     ch ;~ 01A2:A712
cs=0x1a2;eip=0x00a714; 	J(JNZ(loc_1a6e3));	// 25890                  jnz     short loc_1A6E3 ;~ 01A2:A714
cs=0x1a2;eip=0x00a716; 	X(POP(cx));	// 25891                  pop     cx ;~ 01A2:A716
cs=0x1a2;eip=0x00a717; 	T(di = bp;);	// 25892                  mov     di, bp ;~ 01A2:A717
cs=0x1a2;eip=0x00a719; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 25893                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:A719
cs=0x1a2;eip=0x00a71e; 	X(POP(ds));	// 25894                  pop     ds ;~ 01A2:A71E
cs=0x1a2;eip=0x00a71f; 	J(RETN(0));	// 25895                  retn ;~ 01A2:A71F
loc_1a720:
	// 6047 
cs=0x1a2;eip=0x00a720; 	T(dx = 0x3C4;);	// 25900                  mov     dx, 3C4h ;~ 01A2:A720
cs=0x1a2;eip=0x00a723; 	T(ax = 0x0F02;);	// 25901                  mov     ax, 0F02h ;~ 01A2:A723
cs=0x1a2;eip=0x00a726; 	S(OUT(dx, ax));	// 25902                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:A726
cs=0x1a2;eip=0x00a727; 	T(dx = 0x3CE;);	// 25904                  mov     dx, 3CEh ;~ 01A2:A727
cs=0x1a2;eip=0x00a72a; 	T(ax = 0x805;);	// 25905                  mov     ax, 805h ;~ 01A2:A72A
cs=0x1a2;eip=0x00a72d; 	S(OUT(dx, ax));	// 25906                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A72D
cs=0x1a2;eip=0x00a72e; 	T(ax = 0x803;);	// 25908                  mov     ax, 803h ;~ 01A2:A72E
cs=0x1a2;eip=0x00a731; 	S(OUT(dx, ax));	// 25909                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A731
cs=0x1a2;eip=0x00a732; 	T(ax = 7;);	// 25911                  mov     ax, 7 ;~ 01A2:A732
cs=0x1a2;eip=0x00a735; 	S(OUT(dx, ax));	// 25912                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A735
cs=0x1a2;eip=0x00a736; 	T(bp = di;);	// 25915                  mov     bp, di ;~ 01A2:A736
cs=0x1a2;eip=0x00a738; 	T(dl = ch;);	// 25916                  mov     dl, ch ;~ 01A2:A738
loc_1a73a:
	// 6048 
cs=0x1a2;eip=0x00a73a; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 25919                  lods    word ptr es:[si] ;~ 01A2:A73A
cs=0x1a2;eip=0x00a73c; 	T(NOT(ax));	// 25920                  not     ax ;~ 01A2:A73C
cs=0x1a2;eip=0x00a73e; 	X(AND(*(raddr(ds,di)), al));	// 25921                  and     [di], al ;~ 01A2:A73E
cs=0x1a2;eip=0x00a740; 	X(AND(*(raddr(ds,di+1)), ah));	// 25922                  and     [di+1], ah ;~ 01A2:A740
cs=0x1a2;eip=0x00a743; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 25923                  lods    word ptr es:[si] ;~ 01A2:A743
cs=0x1a2;eip=0x00a745; 	T(NOT(ax));	// 25924                  not     ax ;~ 01A2:A745
cs=0x1a2;eip=0x00a747; 	X(AND(*(raddr(ds,di+2)), al));	// 25925                  and     [di+2], al ;~ 01A2:A747
cs=0x1a2;eip=0x00a74a; 	X(AND(*(raddr(ds,di+3)), ah));	// 25926                  and     [di+3], ah ;~ 01A2:A74A
cs=0x1a2;eip=0x00a74d; 	T(ADD(di, 0x28));	// 25927                  add     di, 28h ; '(' ;~ 01A2:A74D
cs=0x1a2;eip=0x00a750; 	T(DEC(dl));	// 25928                  dec     dl ;~ 01A2:A750
cs=0x1a2;eip=0x00a752; 	J(JNZ(loc_1a73a));	// 25929                  jnz     short loc_1A73A ;~ 01A2:A752
cs=0x1a2;eip=0x00a754; 	T(di = bp;);	// 25930                  mov     di, bp ;~ 01A2:A754
cs=0x1a2;eip=0x00a756; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 25931                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:A756
cs=0x1a2;eip=0x00a75b; 	X(POP(ds));	// 25932                  pop     ds ;~ 01A2:A75B
cs=0x1a2;eip=0x00a75c; 	J(RETN(0));	// 25934                  retn ;~ 01A2:A75C

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1a6e3: 	goto loc_1a6e3;
        case m2c::kloc_1a720: 	goto loc_1a720;
        case m2c::kloc_1a73a: 	goto loc_1a73a;
        case m2c::ksub_1a6c0: 	goto sub_1a6c0;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group30(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group30:
    _begin:
seg000_a81e_proc:
	// 26134 
loc_1a81e:
	// 6049 
cs=0x1a2;eip=0x00a81e; 	T(al = dl;);	// 26136                  mov     al, dl ;~ 01A2:A81E
cs=0x1a2;eip=0x00a820; 	T(SHR(al, 1));	// 26137                  shr     al, 1 ;~ 01A2:A820
cs=0x1a2;eip=0x00a822; 	X(byte_6fb92 = al;);	// 26138                  mov     ss:byte_6FB92, al ;~ 01A2:A822
cs=0x1a2;eip=0x00a826; 	T(ax = 0x28;);	// 26139                  mov     ax, 28h ; '(' ;~ 01A2:A826
cs=0x1a2;eip=0x00a829; 	T(SUB(ax, dx));	// 26140                  sub     ax, dx ;~ 01A2:A829
cs=0x1a2;eip=0x00a82b; 	X(*(dw*)(&unk_6fb94) = ax;);	// 26141                  mov     word ptr ss:unk_6FB94, ax ;~ 01A2:A82B
cs=0x1a2;eip=0x00a82f; 	T(AND(cl, 7));	// 26142                  and     cl, 7 ;~ 01A2:A82F
cs=0x1a2;eip=0x00a832; 	J(JNZ(loc_1a837));	// 26143                  jnz     short loc_1A837 ;~ 01A2:A832
cs=0x1a2;eip=0x00a834; 	J(JMP(loc_1a8bd));	// 26144                  jmp     loc_1A8BD ;~ 01A2:A834
loc_1a837:
	// 6050 
cs=0x1a2;eip=0x00a837; 	T(dx = 0x3C4;);	// 26148                  mov     dx, 3C4h ;~ 01A2:A837
cs=0x1a2;eip=0x00a83a; 	T(ax = 0x0F02;);	// 26149                  mov     ax, 0F02h ;~ 01A2:A83A
cs=0x1a2;eip=0x00a83d; 	S(OUT(dx, ax));	// 26150                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:A83D
cs=0x1a2;eip=0x00a83e; 	T(dx = 0x3CE;);	// 26152                  mov     dx, 3CEh ;~ 01A2:A83E
cs=0x1a2;eip=0x00a841; 	T(ax = 0x805;);	// 26153                  mov     ax, 805h ;~ 01A2:A841
cs=0x1a2;eip=0x00a844; 	S(OUT(dx, ax));	// 26154                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A844
cs=0x1a2;eip=0x00a845; 	T(ax = 0x803;);	// 26156                  mov     ax, 803h ;~ 01A2:A845
cs=0x1a2;eip=0x00a848; 	S(OUT(dx, ax));	// 26157                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A848
cs=0x1a2;eip=0x00a849; 	T(ax = 7;);	// 26159                  mov     ax, 7 ;~ 01A2:A849
cs=0x1a2;eip=0x00a84c; 	S(OUT(dx, ax));	// 26160                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A84C
cs=0x1a2;eip=0x00a84d; 	T(bp = di;);	// 26163                  mov     bp, di ;~ 01A2:A84D
cs=0x1a2;eip=0x00a84f; 	T(bl = ch;);	// 26164                  mov     bl, ch ;~ 01A2:A84F
loc_1a851:
	// 6051 
cs=0x1a2;eip=0x00a851; 	T(XOR(bh, bh));	// 26167                  xor     bh, bh ;~ 01A2:A851
cs=0x1a2;eip=0x00a853; 	T(al = byte_6fb92;);	// 26168                  mov     al, ss:byte_6FB92 ;~ 01A2:A853
cs=0x1a2;eip=0x00a857; 	X(byte_6fb93 = al;);	// 26169                  mov     ss:byte_6FB93, al ;~ 01A2:A857
loc_1a85b:
	// 6052 
cs=0x1a2;eip=0x00a85b; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 26172                  lods    word ptr es:[si] ;~ 01A2:A85B
cs=0x1a2;eip=0x00a85d; 	T(XCHG(al, ah));	// 26173                  xchg    al, ah ;~ 01A2:A85D
cs=0x1a2;eip=0x00a85f; 	T(XOR(dl, dl));	// 26174                  xor     dl, dl ;~ 01A2:A85F
cs=0x1a2;eip=0x00a861; 	T(dh = cl;);	// 26175                  mov     dh, cl ;~ 01A2:A861
loc_1a863:
	// 6053 
cs=0x1a2;eip=0x00a863; 	T(SHR(ax, 1));	// 26178                  shr     ax, 1 ;~ 01A2:A863
cs=0x1a2;eip=0x00a865; 	T(RCR(dl, 1));	// 26179                  rcr     dl, 1 ;~ 01A2:A865
cs=0x1a2;eip=0x00a867; 	T(DEC(dh));	// 26180                  dec     dh ;~ 01A2:A867
cs=0x1a2;eip=0x00a869; 	J(JNZ(loc_1a863));	// 26181                  jnz     short loc_1A863 ;~ 01A2:A869
cs=0x1a2;eip=0x00a86b; 	T(OR(ah, bh));	// 26182                  or      ah, bh ;~ 01A2:A86B
cs=0x1a2;eip=0x00a86d; 	T(NOT(ax));	// 26183                  not     ax ;~ 01A2:A86D
cs=0x1a2;eip=0x00a86f; 	X(AND(*(raddr(ds,di)), ah));	// 26184                  and     [di], ah ;~ 01A2:A86F
cs=0x1a2;eip=0x00a871; 	X(AND(*(raddr(ds,di+1)), al));	// 26185                  and     [di+1], al ;~ 01A2:A871
cs=0x1a2;eip=0x00a874; 	T(ADD(di, 2));	// 26186                  add     di, 2 ;~ 01A2:A874
cs=0x1a2;eip=0x00a877; 	X(DEC(byte_6fb93));	// 26187                  dec     ss:byte_6FB93 ;~ 01A2:A877
cs=0x1a2;eip=0x00a87c; 	J(JNZ(loc_1a884));	// 26188                  jnz     short loc_1A884 ;~ 01A2:A87C
cs=0x1a2;eip=0x00a87e; 	T(NOT(dl));	// 26189                  not     dl ;~ 01A2:A87E
cs=0x1a2;eip=0x00a880; 	X(AND(*(raddr(ds,di)), dl));	// 26190                  and     [di], dl ;~ 01A2:A880
cs=0x1a2;eip=0x00a882; 	J(JMP(loc_1a8ab));	// 26191                  jmp     short loc_1A8AB ;~ 01A2:A882
loc_1a884:
	// 6054 
cs=0x1a2;eip=0x00a884; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 26195                  lods    word ptr es:[si] ;~ 01A2:A884
cs=0x1a2;eip=0x00a886; 	T(XCHG(al, ah));	// 26196                  xchg    al, ah ;~ 01A2:A886
cs=0x1a2;eip=0x00a888; 	T(XOR(bh, bh));	// 26197                  xor     bh, bh ;~ 01A2:A888
cs=0x1a2;eip=0x00a88a; 	T(dh = cl;);	// 26198                  mov     dh, cl ;~ 01A2:A88A
loc_1a88c:
	// 6055 
cs=0x1a2;eip=0x00a88c; 	T(SHR(ax, 1));	// 26201                  shr     ax, 1 ;~ 01A2:A88C
cs=0x1a2;eip=0x00a88e; 	T(RCR(bh, 1));	// 26202                  rcr     bh, 1 ;~ 01A2:A88E
cs=0x1a2;eip=0x00a890; 	T(DEC(dh));	// 26203                  dec     dh ;~ 01A2:A890
cs=0x1a2;eip=0x00a892; 	J(JNZ(loc_1a88c));	// 26204                  jnz     short loc_1A88C ;~ 01A2:A892
cs=0x1a2;eip=0x00a894; 	T(OR(ah, dl));	// 26205                  or      ah, dl ;~ 01A2:A894
cs=0x1a2;eip=0x00a896; 	T(NOT(ax));	// 26206                  not     ax ;~ 01A2:A896
cs=0x1a2;eip=0x00a898; 	X(AND(*(raddr(ds,di)), ah));	// 26207                  and     [di], ah ;~ 01A2:A898
cs=0x1a2;eip=0x00a89a; 	X(AND(*(raddr(ds,di+1)), al));	// 26208                  and     [di+1], al ;~ 01A2:A89A
cs=0x1a2;eip=0x00a89d; 	T(ADD(di, 2));	// 26209                  add     di, 2 ;~ 01A2:A89D
cs=0x1a2;eip=0x00a8a0; 	X(DEC(byte_6fb93));	// 26210                  dec     ss:byte_6FB93 ;~ 01A2:A8A0
cs=0x1a2;eip=0x00a8a5; 	J(JNZ(loc_1a85b));	// 26211                  jnz     short loc_1A85B ;~ 01A2:A8A5
cs=0x1a2;eip=0x00a8a7; 	T(NOT(bh));	// 26212                  not     bh ;~ 01A2:A8A7
cs=0x1a2;eip=0x00a8a9; 	X(AND(*(raddr(ds,di)), bh));	// 26213                  and     [di], bh ;~ 01A2:A8A9
loc_1a8ab:
	// 6056 
cs=0x1a2;eip=0x00a8ab; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 26216                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:A8AB
cs=0x1a2;eip=0x00a8b0; 	T(DEC(bl));	// 26217                  dec     bl ;~ 01A2:A8B0
cs=0x1a2;eip=0x00a8b2; 	J(JNZ(loc_1a851));	// 26218                  jnz     short loc_1A851 ;~ 01A2:A8B2
cs=0x1a2;eip=0x00a8b4; 	T(di = bp;);	// 26219                  mov     di, bp ;~ 01A2:A8B4
cs=0x1a2;eip=0x00a8b6; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 26220                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:A8B6
cs=0x1a2;eip=0x00a8bb; 	X(POP(ds));	// 26221                  pop     ds ;~ 01A2:A8BB
cs=0x1a2;eip=0x00a8bc; 	J(RETN(0));	// 26223                  retn ;~ 01A2:A8BC
loc_1a8bd:
	// 6057 
cs=0x1a2;eip=0x00a8bd; 	T(dx = 0x3C4;);	// 26228                  mov     dx, 3C4h ;~ 01A2:A8BD
cs=0x1a2;eip=0x00a8c0; 	T(ax = 0x0F02;);	// 26229                  mov     ax, 0F02h ;~ 01A2:A8C0
cs=0x1a2;eip=0x00a8c3; 	S(OUT(dx, ax));	// 26230                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:A8C3
cs=0x1a2;eip=0x00a8c4; 	T(dx = 0x3CE;);	// 26232                  mov     dx, 3CEh ;~ 01A2:A8C4
cs=0x1a2;eip=0x00a8c7; 	T(ax = 0x805;);	// 26233                  mov     ax, 805h ;~ 01A2:A8C7
cs=0x1a2;eip=0x00a8ca; 	S(OUT(dx, ax));	// 26234                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A8CA
cs=0x1a2;eip=0x00a8cb; 	T(ax = 0x803;);	// 26236                  mov     ax, 803h ;~ 01A2:A8CB
cs=0x1a2;eip=0x00a8ce; 	S(OUT(dx, ax));	// 26237                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A8CE
cs=0x1a2;eip=0x00a8cf; 	T(ax = 7;);	// 26239                  mov     ax, 7 ;~ 01A2:A8CF
cs=0x1a2;eip=0x00a8d2; 	S(OUT(dx, ax));	// 26240                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A8D2
cs=0x1a2;eip=0x00a8d3; 	T(bp = di;);	// 26243                  mov     bp, di ;~ 01A2:A8D3
cs=0x1a2;eip=0x00a8d5; 	T(dl = ch;);	// 26244                  mov     dl, ch ;~ 01A2:A8D5
loc_1a8d7:
	// 6058 
cs=0x1a2;eip=0x00a8d7; 	T(al = byte_6fb92;);	// 26247                  mov     al, ss:byte_6FB92 ;~ 01A2:A8D7
cs=0x1a2;eip=0x00a8db; 	X(byte_6fb93 = al;);	// 26248                  mov     ss:byte_6FB93, al ;~ 01A2:A8DB
loc_1a8df:
	// 6059 
cs=0x1a2;eip=0x00a8df; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 26251                  lods    word ptr es:[si] ;~ 01A2:A8DF
cs=0x1a2;eip=0x00a8e1; 	T(NOT(ax));	// 26252                  not     ax ;~ 01A2:A8E1
cs=0x1a2;eip=0x00a8e3; 	X(AND(*(raddr(ds,di)), al));	// 26253                  and     [di], al ;~ 01A2:A8E3
cs=0x1a2;eip=0x00a8e5; 	X(AND(*(raddr(ds,di+1)), ah));	// 26254                  and     [di+1], ah ;~ 01A2:A8E5
cs=0x1a2;eip=0x00a8e8; 	T(ADD(di, 2));	// 26255                  add     di, 2 ;~ 01A2:A8E8
cs=0x1a2;eip=0x00a8eb; 	X(DEC(byte_6fb93));	// 26256                  dec     ss:byte_6FB93 ;~ 01A2:A8EB
cs=0x1a2;eip=0x00a8f0; 	J(JNZ(loc_1a8df));	// 26257                  jnz     short loc_1A8DF ;~ 01A2:A8F0
cs=0x1a2;eip=0x00a8f2; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 26258                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:A8F2
cs=0x1a2;eip=0x00a8f7; 	T(DEC(dl));	// 26259                  dec     dl ;~ 01A2:A8F7
cs=0x1a2;eip=0x00a8f9; 	J(JNZ(loc_1a8d7));	// 26260                  jnz     short loc_1A8D7 ;~ 01A2:A8F9
cs=0x1a2;eip=0x00a8fb; 	T(di = bp;);	// 26261                  mov     di, bp ;~ 01A2:A8FB
cs=0x1a2;eip=0x00a8fd; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 26262                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:A8FD
loc_1a902:
	// 6060 
cs=0x1a2;eip=0x00a902; 	X(POP(ds));	// 26265                  pop     ds ;~ 01A2:A902
cs=0x1a2;eip=0x00a903; 	J(RETN(0));	// 26267                  retn ;~ 01A2:A903
sub_1a91c:
	// 26285 
cs=0x1a2;eip=0x00a91c; 	X(PUSH(ds));	// 26286                  push    ds ;~ 01A2:A91C
cs=0x1a2;eip=0x00a91d; 	T(es = *(dw*)(((db*)&off_1f8c8)+2););	// 26287                  mov     es, word ptr ds:off_1F8C8+2 ;~ 01A2:A91D
cs=0x1a2;eip=0x00a921; 	T(ds = bp;);	// 26289                  mov     ds, bp ;~ 01A2:A921
cs=0x1a2;eip=0x00a923; 	T(TEST(cl, 8));	// 26291                  test    cl, 8 ;~ 01A2:A923
cs=0x1a2;eip=0x00a926; 	J(JZ(loc_1a92a));	// 26292                  jz      short loc_1A92A ;~ 01A2:A926
cs=0x1a2;eip=0x00a928; 	T(INC(di));	// 26293                  inc     di ;~ 01A2:A928
cs=0x1a2;eip=0x00a929; 	T(INC(si));	// 26294                  inc     si ;~ 01A2:A929
loc_1a92a:
	// 6061 
cs=0x1a2;eip=0x00a92a; 	T(XOR(dh, dh));	// 26297                  xor     dh, dh ;~ 01A2:A92A
cs=0x1a2;eip=0x00a92c; 	T(SHL(dx, 1));	// 26298                  shl     dx, 1 ;~ 01A2:A92C
cs=0x1a2;eip=0x00a92e; 	T(bx = m2c::kloc_1a902;);	// 26299                  mov     bx, offset loc_1A902 ;~ 01A2:A92E
cs=0x1a2;eip=0x00a931; 	T(ADD(bx, dx));	// 26300                  add     bx, dx ;~ 01A2:A931
cs=0x1a2;eip=0x00a933; 	T(MOV(ax, *(dw*)(raddr(cs,bx))));	// 26301                  mov     ax, cs:[bx] ;~ 01A2:A933
cs=0x1a2;eip=0x00a936; __disp=ax;
	J(return __dispatch_call(__disp, _state););	// 26302                  jmp     ax ;~ 01A2:A936

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1a81e: 	goto loc_1a81e;
        case m2c::kloc_1a837: 	goto loc_1a837;
        case m2c::kloc_1a851: 	goto loc_1a851;
        case m2c::kloc_1a85b: 	goto loc_1a85b;
        case m2c::kloc_1a863: 	goto loc_1a863;
        case m2c::kloc_1a884: 	goto loc_1a884;
        case m2c::kloc_1a88c: 	goto loc_1a88c;
        case m2c::kloc_1a8ab: 	goto loc_1a8ab;
        case m2c::kloc_1a8bd: 	goto loc_1a8bd;
        case m2c::kloc_1a8d7: 	goto loc_1a8d7;
        case m2c::kloc_1a8df: 	goto loc_1a8df;
        case m2c::kloc_1a902: 	goto loc_1a902;
        case m2c::kloc_1a92a: 	goto loc_1a92a;
        case m2c::ksub_1a91c: 	goto sub_1a91c;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_a938_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_a938_proc:
    _begin:
cs=0x1a2;eip=0x00a938; 	T(AND(cl, 7));	// 26306                  and     cl, 7 ;~ 01A2:A938
cs=0x1a2;eip=0x00a93b; 	J(JZ(loc_1a982));	// 26307                  jz      short loc_1A982 ;~ 01A2:A93B
cs=0x1a2;eip=0x00a93d; 	T(dx = 0x3C4;);	// 26308                  mov     dx, 3C4h ;~ 01A2:A93D
cs=0x1a2;eip=0x00a940; 	T(ax = 0x0F02;);	// 26309                  mov     ax, 0F02h ;~ 01A2:A940
cs=0x1a2;eip=0x00a943; 	S(OUT(dx, ax));	// 26310                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:A943
cs=0x1a2;eip=0x00a944; 	T(dx = 0x3CE;);	// 26312                  mov     dx, 3CEh ;~ 01A2:A944
cs=0x1a2;eip=0x00a947; 	T(ax = 0x805;);	// 26313                  mov     ax, 805h ;~ 01A2:A947
cs=0x1a2;eip=0x00a94a; 	S(OUT(dx, ax));	// 26314                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A94A
cs=0x1a2;eip=0x00a94b; 	T(ax = 0x803;);	// 26316                  mov     ax, 803h ;~ 01A2:A94B
cs=0x1a2;eip=0x00a94e; 	S(OUT(dx, ax));	// 26317                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A94E
cs=0x1a2;eip=0x00a94f; 	T(ax = 7;);	// 26319                  mov     ax, 7 ;~ 01A2:A94F
cs=0x1a2;eip=0x00a952; 	S(OUT(dx, ax));	// 26320                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A952
cs=0x1a2;eip=0x00a953; 	T(bp = di;);	// 26323                  mov     bp, di ;~ 01A2:A953
cs=0x1a2;eip=0x00a955; 	T(bx = 0x0FF00;);	// 26324                  mov     bx, 0FF00h ;~ 01A2:A955
cs=0x1a2;eip=0x00a958; 	T(SHR(bx, cl));	// 26325                  shr     bx, cl ;~ 01A2:A958
cs=0x1a2;eip=0x00a95a; 	T(dh = ch;);	// 26326                  mov     dh, ch ;~ 01A2:A95A
loc_1a95c:
	// 6062 
cs=0x1a2;eip=0x00a95c; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 26329                  lods    word ptr es:[si] ;~ 01A2:A95C
cs=0x1a2;eip=0x00a95e; 	T(ROR(ax, cl));	// 26330                  ror     ax, cl ;~ 01A2:A95E
cs=0x1a2;eip=0x00a960; 	T(dl = al;);	// 26331                  mov     dl, al ;~ 01A2:A960
cs=0x1a2;eip=0x00a962; 	T(AND(al, bh));	// 26332                  and     al, bh ;~ 01A2:A962
cs=0x1a2;eip=0x00a964; 	T(AND(dl, bl));	// 26333                  and     dl, bl ;~ 01A2:A964
cs=0x1a2;eip=0x00a966; 	T(NOT(ax));	// 26334                  not     ax ;~ 01A2:A966
cs=0x1a2;eip=0x00a968; 	X(AND(*(raddr(ds,di)), al));	// 26335                  and     [di], al ;~ 01A2:A968
cs=0x1a2;eip=0x00a96a; 	X(AND(*(raddr(ds,di+1)), ah));	// 26336                  and     [di+1], ah ;~ 01A2:A96A
cs=0x1a2;eip=0x00a96d; 	T(NOT(dl));	// 26337                  not     dl ;~ 01A2:A96D
cs=0x1a2;eip=0x00a96f; 	X(AND(*(raddr(ds,di+2)), dl));	// 26338                  and     [di+2], dl ;~ 01A2:A96F
cs=0x1a2;eip=0x00a972; 	T(ADD(di, 0x28));	// 26339                  add     di, 28h ; '(' ;~ 01A2:A972
cs=0x1a2;eip=0x00a975; 	T(DEC(dh));	// 26340                  dec     dh ;~ 01A2:A975
cs=0x1a2;eip=0x00a977; 	J(JNZ(loc_1a95c));	// 26341                  jnz     short loc_1A95C ;~ 01A2:A977
cs=0x1a2;eip=0x00a979; 	T(di = bp;);	// 26342                  mov     di, bp ;~ 01A2:A979
cs=0x1a2;eip=0x00a97b; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 26343                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:A97B
cs=0x1a2;eip=0x00a980; 	X(POP(ds));	// 26344                  pop     ds ;~ 01A2:A980
cs=0x1a2;eip=0x00a981; 	J(RETN(0));	// 26346                  retn ;~ 01A2:A981
loc_1a982:
	// 6063 
cs=0x1a2;eip=0x00a982; 	T(dx = 0x3C4;);	// 26350                  mov     dx, 3C4h ;~ 01A2:A982
cs=0x1a2;eip=0x00a985; 	T(ax = 0x0F02;);	// 26351                  mov     ax, 0F02h ;~ 01A2:A985
cs=0x1a2;eip=0x00a988; 	S(OUT(dx, ax));	// 26352                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:A988
cs=0x1a2;eip=0x00a989; 	T(dx = 0x3CE;);	// 26354                  mov     dx, 3CEh ;~ 01A2:A989
cs=0x1a2;eip=0x00a98c; 	T(ax = 0x805;);	// 26355                  mov     ax, 805h ;~ 01A2:A98C
cs=0x1a2;eip=0x00a98f; 	S(OUT(dx, ax));	// 26356                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A98F
cs=0x1a2;eip=0x00a990; 	T(ax = 0x803;);	// 26358                  mov     ax, 803h ;~ 01A2:A990
cs=0x1a2;eip=0x00a993; 	S(OUT(dx, ax));	// 26359                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A993
cs=0x1a2;eip=0x00a994; 	T(ax = 7;);	// 26361                  mov     ax, 7 ;~ 01A2:A994
cs=0x1a2;eip=0x00a997; 	S(OUT(dx, ax));	// 26362                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:A997
cs=0x1a2;eip=0x00a998; 	T(bp = di;);	// 26365                  mov     bp, di ;~ 01A2:A998
cs=0x1a2;eip=0x00a99a; 	T(cl = ch;);	// 26366                  mov     cl, ch ;~ 01A2:A99A
loc_1a99c:
	// 6064 
cs=0x1a2;eip=0x00a99c; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 26369                  lods    word ptr es:[si] ;~ 01A2:A99C
cs=0x1a2;eip=0x00a99e; 	T(NOT(ax));	// 26370                  not     ax ;~ 01A2:A99E
cs=0x1a2;eip=0x00a9a0; 	X(AND(*(raddr(ds,di)), al));	// 26371                  and     [di], al ;~ 01A2:A9A0
cs=0x1a2;eip=0x00a9a2; 	X(AND(*(raddr(ds,di+1)), ah));	// 26372                  and     [di+1], ah ;~ 01A2:A9A2
cs=0x1a2;eip=0x00a9a5; 	T(ADD(di, 0x28));	// 26373                  add     di, 28h ; '(' ;~ 01A2:A9A5
cs=0x1a2;eip=0x00a9a8; 	T(DEC(cl));	// 26374                  dec     cl ;~ 01A2:A9A8
cs=0x1a2;eip=0x00a9aa; 	J(JNZ(loc_1a99c));	// 26375                  jnz     short loc_1A99C ;~ 01A2:A9AA
cs=0x1a2;eip=0x00a9ac; 	T(di = bp;);	// 26376                  mov     di, bp ;~ 01A2:A9AC
cs=0x1a2;eip=0x00a9ae; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 26377                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:A9AE
cs=0x1a2;eip=0x00a9b3; 	X(POP(ds));	// 26378                  pop     ds ;~ 01A2:A9B3
cs=0x1a2;eip=0x00a9b4; 	J(RETN(0));	// 26379                  retn ;~ 01A2:A9B4

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1a95c: 	goto loc_1a95c;
        case m2c::kloc_1a982: 	goto loc_1a982;
        case m2c::kloc_1a99c: 	goto loc_1a99c;
        case m2c::kseg000_a938_proc: 	goto seg000_a938_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group31(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group31:
    _begin:
sub_1ab13:
	// 26735 
cs=0x1a2;eip=0x00ab13; 	T(al = dl;);	// 26737                  mov     al, dl ;~ 01A2:AB13
cs=0x1a2;eip=0x00ab15; 	T(SHR(al, 1));	// 26738                  shr     al, 1 ;~ 01A2:AB15
cs=0x1a2;eip=0x00ab17; 	X(byte_6fb92 = al;);	// 26739                  mov     ss:byte_6FB92, al ;~ 01A2:AB17
cs=0x1a2;eip=0x00ab1b; 	T(ax = 0x28;);	// 26740                  mov     ax, 28h ; '(' ;~ 01A2:AB1B
cs=0x1a2;eip=0x00ab1e; 	T(SUB(ax, dx));	// 26741                  sub     ax, dx ;~ 01A2:AB1E
cs=0x1a2;eip=0x00ab20; 	X(*(dw*)(&unk_6fb94) = ax;);	// 26742                  mov     word ptr ss:unk_6FB94, ax ;~ 01A2:AB20
cs=0x1a2;eip=0x00ab24; 	T(dx = ds;);	// 26743                  mov     dx, ds ;~ 01A2:AB24
cs=0x1a2;eip=0x00ab26; 	T(ax = es;);	// 26744                  mov     ax, es ;~ 01A2:AB26
cs=0x1a2;eip=0x00ab28; 	T(ds = ax;);	// 26745                  mov     ds, ax ;~ 01A2:AB28
cs=0x1a2;eip=0x00ab2a; 	T(es = dx;);	// 26747                  mov     es, dx ;~ 01A2:AB2A
cs=0x1a2;eip=0x00ab2c; 	T(dx = 0x3C4;);	// 26749                  mov     dx, 3C4h ;~ 01A2:AB2C
cs=0x1a2;eip=0x00ab2f; 	T(ax = 0x0F02;);	// 26750                  mov     ax, 0F02h ;~ 01A2:AB2F
cs=0x1a2;eip=0x00ab32; 	S(OUT(dx, ax));	// 26751                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:AB32
cs=0x1a2;eip=0x00ab33; 	T(dx = 0x3CE;);	// 26753                  mov     dx, 3CEh ;~ 01A2:AB33
cs=0x1a2;eip=0x00ab36; 	T(ax = 0x805;);	// 26754                  mov     ax, 805h ;~ 01A2:AB36
cs=0x1a2;eip=0x00ab39; 	S(OUT(dx, ax));	// 26755                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AB39
cs=0x1a2;eip=0x00ab3a; 	T(ax = 0x803;);	// 26757                  mov     ax, 803h ;~ 01A2:AB3A
cs=0x1a2;eip=0x00ab3d; 	S(OUT(dx, ax));	// 26758                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AB3D
cs=0x1a2;eip=0x00ab3e; 	T(ax = 0x0F07;);	// 26760                  mov     ax, 0F07h ;~ 01A2:AB3E
cs=0x1a2;eip=0x00ab41; 	S(OUT(dx, ax));	// 26761                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AB41
cs=0x1a2;eip=0x00ab42; 	T(ax = 2;);	// 26763                  mov     ax, 2 ;~ 01A2:AB42
cs=0x1a2;eip=0x00ab45; 	S(OUT(dx, ax));	// 26764                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AB45
cs=0x1a2;eip=0x00ab46; 	T(AND(cl, 7));	// 26767                  and     cl, 7 ;~ 01A2:AB46
cs=0x1a2;eip=0x00ab49; 	J(JNZ(loc_1ab4e));	// 26768                  jnz     short loc_1AB4E ;~ 01A2:AB49
cs=0x1a2;eip=0x00ab4b; 	J(JMP(loc_1ac82));	// 26769                  jmp     loc_1AC82 ;~ 01A2:AB4B
loc_1ab4e:
	// 6065 
cs=0x1a2;eip=0x00ab4e; 	X(PUSH(di));	// 26773                  push    di ;~ 01A2:AB4E
cs=0x1a2;eip=0x00ab4f; 	X(PUSH(si));	// 26774                  push    si ;~ 01A2:AB4F
cs=0x1a2;eip=0x00ab50; 	T(bl = ch;);	// 26775                  mov     bl, ch ;~ 01A2:AB50
loc_1ab52:
	// 6066 
cs=0x1a2;eip=0x00ab52; 	T(al = byte_6fb92;);	// 26778                  mov     al, ss:byte_6FB92 ;~ 01A2:AB52
cs=0x1a2;eip=0x00ab56; 	X(byte_6fb93 = al;);	// 26779                  mov     ss:byte_6FB93, al ;~ 01A2:AB56
loc_1ab5a:
	// 6067 
cs=0x1a2;eip=0x00ab5a; 	T(LODSW);	// 26782                  lodsw ;~ 01A2:AB5A
cs=0x1a2;eip=0x00ab5b; 	X(OR(*(raddr(es,di)), al));	// 26783                  or      es:[di], al ;~ 01A2:AB5B
cs=0x1a2;eip=0x00ab5e; 	T(INC(di));	// 26784                  inc     di ;~ 01A2:AB5E
cs=0x1a2;eip=0x00ab5f; 	X(OR(*(raddr(es,di)), ah));	// 26785                  or      es:[di], ah ;~ 01A2:AB5F
cs=0x1a2;eip=0x00ab62; 	T(INC(di));	// 26786                  inc     di ;~ 01A2:AB62
cs=0x1a2;eip=0x00ab63; 	X(DEC(byte_6fb93));	// 26787                  dec     ss:byte_6FB93 ;~ 01A2:AB63
cs=0x1a2;eip=0x00ab68; 	J(JNZ(loc_1ab5a));	// 26788                  jnz     short loc_1AB5A ;~ 01A2:AB68
cs=0x1a2;eip=0x00ab6a; 	T(MOV(al, *(raddr(ds,si))));	// 26789                  mov     al, [si] ;~ 01A2:AB6A
cs=0x1a2;eip=0x00ab6c; 	X(OR(*(raddr(es,di)), al));	// 26790                  or      es:[di], al ;~ 01A2:AB6C
cs=0x1a2;eip=0x00ab6f; 	T(ADD(si, *(dw*)(&unk_6fb94)));	// 26791                  add     si, word ptr ss:unk_6FB94 ;~ 01A2:AB6F
cs=0x1a2;eip=0x00ab74; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 26792                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:AB74
cs=0x1a2;eip=0x00ab79; 	T(DEC(bl));	// 26793                  dec     bl ;~ 01A2:AB79
cs=0x1a2;eip=0x00ab7b; 	J(JNZ(loc_1ab52));	// 26794                  jnz     short loc_1AB52 ;~ 01A2:AB7B
cs=0x1a2;eip=0x00ab7d; 	X(POP(si));	// 26795                  pop     si ;~ 01A2:AB7D
cs=0x1a2;eip=0x00ab7e; 	X(POP(di));	// 26796                  pop     di ;~ 01A2:AB7E
cs=0x1a2;eip=0x00ab7f; 	T(dx = 0x3C4;);	// 26797                  mov     dx, 3C4h ;~ 01A2:AB7F
cs=0x1a2;eip=0x00ab82; 	T(ax = 0x102;);	// 26798                  mov     ax, 102h ;~ 01A2:AB82
cs=0x1a2;eip=0x00ab85; 	S(OUT(dx, ax));	// 26799                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:AB85
cs=0x1a2;eip=0x00ab86; 	T(dx = 0x3CE;);	// 26801                  mov     dx, 3CEh ;~ 01A2:AB86
cs=0x1a2;eip=0x00ab89; 	T(ax = 5;);	// 26802                  mov     ax, 5 ;~ 01A2:AB89
cs=0x1a2;eip=0x00ab8c; 	S(OUT(dx, ax));	// 26803                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AB8C
cs=0x1a2;eip=0x00ab8d; 	T(ax = 4;);	// 26810                  mov     ax, 4 ;~ 01A2:AB8D
cs=0x1a2;eip=0x00ab90; 	S(OUT(dx, ax));	// 26811                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AB90
cs=0x1a2;eip=0x00ab91; 	T(ax = 3;);	// 26814                  mov     ax, 3 ;~ 01A2:AB91
cs=0x1a2;eip=0x00ab94; 	S(OUT(dx, ax));	// 26815                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AB94
cs=0x1a2;eip=0x00ab95; 	T(ax = 7;);	// 26820                  mov     ax, 7 ;~ 01A2:AB95
cs=0x1a2;eip=0x00ab98; 	S(OUT(dx, ax));	// 26821                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AB98
cs=0x1a2;eip=0x00ab99; 	X(PUSH(di));	// 26824                  push    di ;~ 01A2:AB99
cs=0x1a2;eip=0x00ab9a; 	X(PUSH(si));	// 26825                  push    si ;~ 01A2:AB9A
cs=0x1a2;eip=0x00ab9b; 	T(dl = ch;);	// 26826                  mov     dl, ch ;~ 01A2:AB9B
loc_1ab9d:
	// 6068 
cs=0x1a2;eip=0x00ab9d; 	T(al = byte_6fb92;);	// 26829                  mov     al, ss:byte_6FB92 ;~ 01A2:AB9D
cs=0x1a2;eip=0x00aba1; 	X(byte_6fb93 = al;);	// 26830                  mov     ss:byte_6FB93, al ;~ 01A2:ABA1
loc_1aba5:
	// 6069 
cs=0x1a2;eip=0x00aba5; 	T(LODSW);	// 26833                  lodsw ;~ 01A2:ABA5
cs=0x1a2;eip=0x00aba6; 	X(OR(*(dw*)(raddr(es,di)), ax));	// 26834                  or      es:[di], ax ;~ 01A2:ABA6
cs=0x1a2;eip=0x00aba9; 	T(ADD(di, 2));	// 26835                  add     di, 2 ;~ 01A2:ABA9
cs=0x1a2;eip=0x00abac; 	X(DEC(byte_6fb93));	// 26836                  dec     ss:byte_6FB93 ;~ 01A2:ABAC
cs=0x1a2;eip=0x00abb1; 	J(JNZ(loc_1aba5));	// 26837                  jnz     short loc_1ABA5 ;~ 01A2:ABB1
cs=0x1a2;eip=0x00abb3; 	T(MOV(al, *(raddr(ds,si))));	// 26838                  mov     al, [si] ;~ 01A2:ABB3
cs=0x1a2;eip=0x00abb5; 	X(OR(*(raddr(es,di)), al));	// 26839                  or      es:[di], al ;~ 01A2:ABB5
cs=0x1a2;eip=0x00abb8; 	T(ADD(si, *(dw*)(&unk_6fb94)));	// 26840                  add     si, word ptr ss:unk_6FB94 ;~ 01A2:ABB8
cs=0x1a2;eip=0x00abbd; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 26841                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:ABBD
cs=0x1a2;eip=0x00abc2; 	T(DEC(dl));	// 26842                  dec     dl ;~ 01A2:ABC2
cs=0x1a2;eip=0x00abc4; 	J(JNZ(loc_1ab9d));	// 26843                  jnz     short loc_1AB9D ;~ 01A2:ABC4
cs=0x1a2;eip=0x00abc6; 	X(POP(si));	// 26844                  pop     si ;~ 01A2:ABC6
cs=0x1a2;eip=0x00abc7; 	X(POP(di));	// 26845                  pop     di ;~ 01A2:ABC7
cs=0x1a2;eip=0x00abc8; 	T(dx = 0x3CE;);	// 26846                  mov     dx, 3CEh ;~ 01A2:ABC8
cs=0x1a2;eip=0x00abcb; 	T(ax = 0x104;);	// 26847                  mov     ax, 104h ;~ 01A2:ABCB
cs=0x1a2;eip=0x00abce; 	S(OUT(dx, ax));	// 26848                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:ABCE
cs=0x1a2;eip=0x00abcf; 	T(dx = 0x3C4;);	// 26850                  mov     dx, 3C4h ;~ 01A2:ABCF
cs=0x1a2;eip=0x00abd2; 	T(ax = 0x202;);	// 26851                  mov     ax, 202h ;~ 01A2:ABD2
cs=0x1a2;eip=0x00abd5; 	S(OUT(dx, ax));	// 26852                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:ABD5
cs=0x1a2;eip=0x00abd6; 	X(PUSH(di));	// 26854                  push    di ;~ 01A2:ABD6
cs=0x1a2;eip=0x00abd7; 	X(PUSH(si));	// 26855                  push    si ;~ 01A2:ABD7
cs=0x1a2;eip=0x00abd8; 	T(dl = ch;);	// 26856                  mov     dl, ch ;~ 01A2:ABD8
loc_1abda:
	// 6070 
cs=0x1a2;eip=0x00abda; 	T(al = byte_6fb92;);	// 26859                  mov     al, ss:byte_6FB92 ;~ 01A2:ABDA
cs=0x1a2;eip=0x00abde; 	X(byte_6fb93 = al;);	// 26860                  mov     ss:byte_6FB93, al ;~ 01A2:ABDE
loc_1abe2:
	// 6071 
cs=0x1a2;eip=0x00abe2; 	T(LODSW);	// 26863                  lodsw ;~ 01A2:ABE2
cs=0x1a2;eip=0x00abe3; 	X(OR(*(dw*)(raddr(es,di)), ax));	// 26864                  or      es:[di], ax ;~ 01A2:ABE3
cs=0x1a2;eip=0x00abe6; 	T(ADD(di, 2));	// 26865                  add     di, 2 ;~ 01A2:ABE6
cs=0x1a2;eip=0x00abe9; 	X(DEC(byte_6fb93));	// 26866                  dec     ss:byte_6FB93 ;~ 01A2:ABE9
cs=0x1a2;eip=0x00abee; 	J(JNZ(loc_1abe2));	// 26867                  jnz     short loc_1ABE2 ;~ 01A2:ABEE
cs=0x1a2;eip=0x00abf0; 	T(MOV(al, *(raddr(ds,si))));	// 26868                  mov     al, [si] ;~ 01A2:ABF0
cs=0x1a2;eip=0x00abf2; 	X(OR(*(raddr(es,di)), al));	// 26869                  or      es:[di], al ;~ 01A2:ABF2
cs=0x1a2;eip=0x00abf5; 	T(ADD(si, *(dw*)(&unk_6fb94)));	// 26870                  add     si, word ptr ss:unk_6FB94 ;~ 01A2:ABF5
cs=0x1a2;eip=0x00abfa; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 26871                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:ABFA
cs=0x1a2;eip=0x00abff; 	T(DEC(dl));	// 26872                  dec     dl ;~ 01A2:ABFF
cs=0x1a2;eip=0x00ac01; 	J(JNZ(loc_1abda));	// 26873                  jnz     short loc_1ABDA ;~ 01A2:AC01
cs=0x1a2;eip=0x00ac03; 	X(POP(si));	// 26874                  pop     si ;~ 01A2:AC03
cs=0x1a2;eip=0x00ac04; 	X(POP(di));	// 26875                  pop     di ;~ 01A2:AC04
cs=0x1a2;eip=0x00ac05; 	T(dx = 0x3CE;);	// 26876                  mov     dx, 3CEh ;~ 01A2:AC05
cs=0x1a2;eip=0x00ac08; 	T(ax = 0x204;);	// 26877                  mov     ax, 204h ;~ 01A2:AC08
cs=0x1a2;eip=0x00ac0b; 	S(OUT(dx, ax));	// 26878                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AC0B
cs=0x1a2;eip=0x00ac0c; 	T(dx = 0x3C4;);	// 26880                  mov     dx, 3C4h ;~ 01A2:AC0C
cs=0x1a2;eip=0x00ac0f; 	T(ax = 0x402;);	// 26881                  mov     ax, 402h ;~ 01A2:AC0F
cs=0x1a2;eip=0x00ac12; 	S(OUT(dx, ax));	// 26882                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:AC12
cs=0x1a2;eip=0x00ac13; 	X(PUSH(di));	// 26884                  push    di ;~ 01A2:AC13
cs=0x1a2;eip=0x00ac14; 	X(PUSH(si));	// 26885                  push    si ;~ 01A2:AC14
cs=0x1a2;eip=0x00ac15; 	T(dl = ch;);	// 26886                  mov     dl, ch ;~ 01A2:AC15
loc_1ac17:
	// 6072 
cs=0x1a2;eip=0x00ac17; 	T(al = byte_6fb92;);	// 26889                  mov     al, ss:byte_6FB92 ;~ 01A2:AC17
cs=0x1a2;eip=0x00ac1b; 	X(byte_6fb93 = al;);	// 26890                  mov     ss:byte_6FB93, al ;~ 01A2:AC1B
loc_1ac1f:
	// 6073 
cs=0x1a2;eip=0x00ac1f; 	T(LODSW);	// 26893                  lodsw ;~ 01A2:AC1F
cs=0x1a2;eip=0x00ac20; 	X(OR(*(dw*)(raddr(es,di)), ax));	// 26894                  or      es:[di], ax ;~ 01A2:AC20
cs=0x1a2;eip=0x00ac23; 	T(ADD(di, 2));	// 26895                  add     di, 2 ;~ 01A2:AC23
cs=0x1a2;eip=0x00ac26; 	X(DEC(byte_6fb93));	// 26896                  dec     ss:byte_6FB93 ;~ 01A2:AC26
cs=0x1a2;eip=0x00ac2b; 	J(JNZ(loc_1ac1f));	// 26897                  jnz     short loc_1AC1F ;~ 01A2:AC2B
cs=0x1a2;eip=0x00ac2d; 	T(MOV(al, *(raddr(ds,si))));	// 26898                  mov     al, [si] ;~ 01A2:AC2D
cs=0x1a2;eip=0x00ac2f; 	X(OR(*(raddr(es,di)), al));	// 26899                  or      es:[di], al ;~ 01A2:AC2F
cs=0x1a2;eip=0x00ac32; 	T(ADD(si, *(dw*)(&unk_6fb94)));	// 26900                  add     si, word ptr ss:unk_6FB94 ;~ 01A2:AC32
cs=0x1a2;eip=0x00ac37; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 26901                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:AC37
cs=0x1a2;eip=0x00ac3c; 	T(DEC(dl));	// 26902                  dec     dl ;~ 01A2:AC3C
cs=0x1a2;eip=0x00ac3e; 	J(JNZ(loc_1ac17));	// 26903                  jnz     short loc_1AC17 ;~ 01A2:AC3E
cs=0x1a2;eip=0x00ac40; 	X(POP(si));	// 26904                  pop     si ;~ 01A2:AC40
cs=0x1a2;eip=0x00ac41; 	X(POP(di));	// 26905                  pop     di ;~ 01A2:AC41
cs=0x1a2;eip=0x00ac42; 	T(dx = 0x3CE;);	// 26906                  mov     dx, 3CEh ;~ 01A2:AC42
cs=0x1a2;eip=0x00ac45; 	T(ax = 0x304;);	// 26907                  mov     ax, 304h ;~ 01A2:AC45
cs=0x1a2;eip=0x00ac48; 	S(OUT(dx, ax));	// 26908                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AC48
cs=0x1a2;eip=0x00ac49; 	T(dx = 0x3C4;);	// 26910                  mov     dx, 3C4h ;~ 01A2:AC49
cs=0x1a2;eip=0x00ac4c; 	T(ax = 0x802;);	// 26911                  mov     ax, 802h ;~ 01A2:AC4C
cs=0x1a2;eip=0x00ac4f; 	S(OUT(dx, ax));	// 26912                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:AC4F
cs=0x1a2;eip=0x00ac50; 	X(PUSH(di));	// 26914                  push    di ;~ 01A2:AC50
cs=0x1a2;eip=0x00ac51; 	X(PUSH(si));	// 26915                  push    si ;~ 01A2:AC51
cs=0x1a2;eip=0x00ac52; 	T(dl = ch;);	// 26916                  mov     dl, ch ;~ 01A2:AC52
loc_1ac54:
	// 6074 
cs=0x1a2;eip=0x00ac54; 	T(al = byte_6fb92;);	// 26919                  mov     al, ss:byte_6FB92 ;~ 01A2:AC54
cs=0x1a2;eip=0x00ac58; 	X(byte_6fb93 = al;);	// 26920                  mov     ss:byte_6FB93, al ;~ 01A2:AC58
loc_1ac5c:
	// 6075 
cs=0x1a2;eip=0x00ac5c; 	T(LODSW);	// 26923                  lodsw ;~ 01A2:AC5C
cs=0x1a2;eip=0x00ac5d; 	X(OR(*(dw*)(raddr(es,di)), ax));	// 26924                  or      es:[di], ax ;~ 01A2:AC5D
cs=0x1a2;eip=0x00ac60; 	T(ADD(di, 2));	// 26925                  add     di, 2 ;~ 01A2:AC60
cs=0x1a2;eip=0x00ac63; 	X(DEC(byte_6fb93));	// 26926                  dec     ss:byte_6FB93 ;~ 01A2:AC63
cs=0x1a2;eip=0x00ac68; 	J(JNZ(loc_1ac5c));	// 26927                  jnz     short loc_1AC5C ;~ 01A2:AC68
cs=0x1a2;eip=0x00ac6a; 	T(MOV(al, *(raddr(ds,si))));	// 26928                  mov     al, [si] ;~ 01A2:AC6A
cs=0x1a2;eip=0x00ac6c; 	X(OR(*(raddr(es,di)), al));	// 26929                  or      es:[di], al ;~ 01A2:AC6C
cs=0x1a2;eip=0x00ac6f; 	T(ADD(si, *(dw*)(&unk_6fb94)));	// 26930                  add     si, word ptr ss:unk_6FB94 ;~ 01A2:AC6F
cs=0x1a2;eip=0x00ac74; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 26931                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:AC74
cs=0x1a2;eip=0x00ac79; 	T(DEC(dl));	// 26932                  dec     dl ;~ 01A2:AC79
cs=0x1a2;eip=0x00ac7b; 	J(JNZ(loc_1ac54));	// 26933                  jnz     short loc_1AC54 ;~ 01A2:AC7B
cs=0x1a2;eip=0x00ac7d; 	X(POP(si));	// 26934                  pop     si ;~ 01A2:AC7D
cs=0x1a2;eip=0x00ac7e; 	X(POP(di));	// 26935                  pop     di ;~ 01A2:AC7E
cs=0x1a2;eip=0x00ac7f; 	J(JMP(loc_1ad9a));	// 26936                  jmp     loc_1AD9A ;~ 01A2:AC7F
loc_1ac82:
	// 6076 
cs=0x1a2;eip=0x00ac82; 	X(PUSH(di));	// 26940                  push    di ;~ 01A2:AC82
cs=0x1a2;eip=0x00ac83; 	X(PUSH(si));	// 26941                  push    si ;~ 01A2:AC83
cs=0x1a2;eip=0x00ac84; 	T(cl = ch;);	// 26942                  mov     cl, ch ;~ 01A2:AC84
loc_1ac86:
	// 6077 
cs=0x1a2;eip=0x00ac86; 	T(al = byte_6fb92;);	// 26945                  mov     al, ss:byte_6FB92 ;~ 01A2:AC86
cs=0x1a2;eip=0x00ac8a; 	X(byte_6fb93 = al;);	// 26946                  mov     ss:byte_6FB93, al ;~ 01A2:AC8A
loc_1ac8e:
	// 6078 
cs=0x1a2;eip=0x00ac8e; 	T(LODSW);	// 26949                  lodsw ;~ 01A2:AC8E
cs=0x1a2;eip=0x00ac8f; 	X(OR(*(raddr(es,di)), al));	// 26950                  or      es:[di], al ;~ 01A2:AC8F
cs=0x1a2;eip=0x00ac92; 	T(INC(di));	// 26951                  inc     di ;~ 01A2:AC92
cs=0x1a2;eip=0x00ac93; 	X(OR(*(raddr(es,di)), ah));	// 26952                  or      es:[di], ah ;~ 01A2:AC93
cs=0x1a2;eip=0x00ac96; 	T(INC(di));	// 26953                  inc     di ;~ 01A2:AC96
cs=0x1a2;eip=0x00ac97; 	X(DEC(byte_6fb93));	// 26954                  dec     ss:byte_6FB93 ;~ 01A2:AC97
cs=0x1a2;eip=0x00ac9c; 	J(JNZ(loc_1ac8e));	// 26955                  jnz     short loc_1AC8E ;~ 01A2:AC9C
cs=0x1a2;eip=0x00ac9e; 	T(ADD(si, *(dw*)(&unk_6fb94)));	// 26956                  add     si, word ptr ss:unk_6FB94 ;~ 01A2:AC9E
cs=0x1a2;eip=0x00aca3; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 26957                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:ACA3
cs=0x1a2;eip=0x00aca8; 	T(DEC(cl));	// 26958                  dec     cl ;~ 01A2:ACA8
cs=0x1a2;eip=0x00acaa; 	J(JNZ(loc_1ac86));	// 26959                  jnz     short loc_1AC86 ;~ 01A2:ACAA
cs=0x1a2;eip=0x00acac; 	X(POP(si));	// 26960                  pop     si ;~ 01A2:ACAC
cs=0x1a2;eip=0x00acad; 	X(POP(di));	// 26961                  pop     di ;~ 01A2:ACAD
cs=0x1a2;eip=0x00acae; 	T(dx = 0x3C4;);	// 26962                  mov     dx, 3C4h ;~ 01A2:ACAE
cs=0x1a2;eip=0x00acb1; 	T(ax = 0x102;);	// 26963                  mov     ax, 102h ;~ 01A2:ACB1
cs=0x1a2;eip=0x00acb4; 	S(OUT(dx, ax));	// 26964                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:ACB4
cs=0x1a2;eip=0x00acb5; 	T(dx = 0x3CE;);	// 26966                  mov     dx, 3CEh ;~ 01A2:ACB5
cs=0x1a2;eip=0x00acb8; 	T(ax = 5;);	// 26967                  mov     ax, 5 ;~ 01A2:ACB8
cs=0x1a2;eip=0x00acbb; 	S(OUT(dx, ax));	// 26968                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:ACBB
cs=0x1a2;eip=0x00acbc; 	T(ax = 4;);	// 26975                  mov     ax, 4 ;~ 01A2:ACBC
cs=0x1a2;eip=0x00acbf; 	S(OUT(dx, ax));	// 26976                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:ACBF
cs=0x1a2;eip=0x00acc0; 	T(ax = 3;);	// 26979                  mov     ax, 3 ;~ 01A2:ACC0
cs=0x1a2;eip=0x00acc3; 	S(OUT(dx, ax));	// 26980                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:ACC3
cs=0x1a2;eip=0x00acc4; 	T(ax = 7;);	// 26985                  mov     ax, 7 ;~ 01A2:ACC4
cs=0x1a2;eip=0x00acc7; 	S(OUT(dx, ax));	// 26986                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:ACC7
cs=0x1a2;eip=0x00acc8; 	X(PUSH(di));	// 26989                  push    di ;~ 01A2:ACC8
cs=0x1a2;eip=0x00acc9; 	X(PUSH(si));	// 26990                  push    si ;~ 01A2:ACC9
cs=0x1a2;eip=0x00acca; 	T(cl = ch;);	// 26991                  mov     cl, ch ;~ 01A2:ACCA
loc_1accc:
	// 6079 
cs=0x1a2;eip=0x00accc; 	T(al = byte_6fb92;);	// 26994                  mov     al, ss:byte_6FB92 ;~ 01A2:ACCC
cs=0x1a2;eip=0x00acd0; 	X(byte_6fb93 = al;);	// 26995                  mov     ss:byte_6FB93, al ;~ 01A2:ACD0
loc_1acd4:
	// 6080 
cs=0x1a2;eip=0x00acd4; 	T(LODSW);	// 26998                  lodsw ;~ 01A2:ACD4
cs=0x1a2;eip=0x00acd5; 	X(OR(*(dw*)(raddr(es,di)), ax));	// 26999                  or      es:[di], ax ;~ 01A2:ACD5
cs=0x1a2;eip=0x00acd8; 	T(ADD(di, 2));	// 27000                  add     di, 2 ;~ 01A2:ACD8
cs=0x1a2;eip=0x00acdb; 	X(DEC(byte_6fb93));	// 27001                  dec     ss:byte_6FB93 ;~ 01A2:ACDB
cs=0x1a2;eip=0x00ace0; 	J(JNZ(loc_1acd4));	// 27002                  jnz     short loc_1ACD4 ;~ 01A2:ACE0
cs=0x1a2;eip=0x00ace2; 	T(ADD(si, *(dw*)(&unk_6fb94)));	// 27003                  add     si, word ptr ss:unk_6FB94 ;~ 01A2:ACE2
cs=0x1a2;eip=0x00ace7; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 27004                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:ACE7
cs=0x1a2;eip=0x00acec; 	T(DEC(cl));	// 27005                  dec     cl ;~ 01A2:ACEC
cs=0x1a2;eip=0x00acee; 	J(JNZ(loc_1accc));	// 27006                  jnz     short loc_1ACCC ;~ 01A2:ACEE
cs=0x1a2;eip=0x00acf0; 	X(POP(si));	// 27007                  pop     si ;~ 01A2:ACF0
cs=0x1a2;eip=0x00acf1; 	X(POP(di));	// 27008                  pop     di ;~ 01A2:ACF1
cs=0x1a2;eip=0x00acf2; 	T(dx = 0x3CE;);	// 27009                  mov     dx, 3CEh ;~ 01A2:ACF2
cs=0x1a2;eip=0x00acf5; 	T(ax = 0x104;);	// 27010                  mov     ax, 104h ;~ 01A2:ACF5
cs=0x1a2;eip=0x00acf8; 	S(OUT(dx, ax));	// 27011                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:ACF8
cs=0x1a2;eip=0x00acf9; 	T(dx = 0x3C4;);	// 27013                  mov     dx, 3C4h ;~ 01A2:ACF9
cs=0x1a2;eip=0x00acfc; 	T(ax = 0x202;);	// 27014                  mov     ax, 202h ;~ 01A2:ACFC
cs=0x1a2;eip=0x00acff; 	S(OUT(dx, ax));	// 27015                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:ACFF
cs=0x1a2;eip=0x00ad00; 	X(PUSH(di));	// 27017                  push    di ;~ 01A2:AD00
cs=0x1a2;eip=0x00ad01; 	X(PUSH(si));	// 27018                  push    si ;~ 01A2:AD01
cs=0x1a2;eip=0x00ad02; 	T(cl = ch;);	// 27019                  mov     cl, ch ;~ 01A2:AD02
loc_1ad04:
	// 6081 
cs=0x1a2;eip=0x00ad04; 	T(al = byte_6fb92;);	// 27022                  mov     al, ss:byte_6FB92 ;~ 01A2:AD04
cs=0x1a2;eip=0x00ad08; 	X(byte_6fb93 = al;);	// 27023                  mov     ss:byte_6FB93, al ;~ 01A2:AD08
loc_1ad0c:
	// 6082 
cs=0x1a2;eip=0x00ad0c; 	T(LODSW);	// 27026                  lodsw ;~ 01A2:AD0C
cs=0x1a2;eip=0x00ad0d; 	X(OR(*(dw*)(raddr(es,di)), ax));	// 27027                  or      es:[di], ax ;~ 01A2:AD0D
cs=0x1a2;eip=0x00ad10; 	T(ADD(di, 2));	// 27028                  add     di, 2 ;~ 01A2:AD10
cs=0x1a2;eip=0x00ad13; 	X(DEC(byte_6fb93));	// 27029                  dec     ss:byte_6FB93 ;~ 01A2:AD13
cs=0x1a2;eip=0x00ad18; 	J(JNZ(loc_1ad0c));	// 27030                  jnz     short loc_1AD0C ;~ 01A2:AD18
cs=0x1a2;eip=0x00ad1a; 	T(ADD(si, *(dw*)(&unk_6fb94)));	// 27031                  add     si, word ptr ss:unk_6FB94 ;~ 01A2:AD1A
cs=0x1a2;eip=0x00ad1f; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 27032                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:AD1F
cs=0x1a2;eip=0x00ad24; 	T(DEC(cl));	// 27033                  dec     cl ;~ 01A2:AD24
cs=0x1a2;eip=0x00ad26; 	J(JNZ(loc_1ad04));	// 27034                  jnz     short loc_1AD04 ;~ 01A2:AD26
cs=0x1a2;eip=0x00ad28; 	X(POP(si));	// 27035                  pop     si ;~ 01A2:AD28
cs=0x1a2;eip=0x00ad29; 	X(POP(di));	// 27036                  pop     di ;~ 01A2:AD29
cs=0x1a2;eip=0x00ad2a; 	T(dx = 0x3CE;);	// 27037                  mov     dx, 3CEh ;~ 01A2:AD2A
cs=0x1a2;eip=0x00ad2d; 	T(ax = 0x204;);	// 27038                  mov     ax, 204h ;~ 01A2:AD2D
cs=0x1a2;eip=0x00ad30; 	S(OUT(dx, ax));	// 27039                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AD30
cs=0x1a2;eip=0x00ad31; 	T(dx = 0x3C4;);	// 27041                  mov     dx, 3C4h ;~ 01A2:AD31
cs=0x1a2;eip=0x00ad34; 	T(ax = 0x402;);	// 27042                  mov     ax, 402h ;~ 01A2:AD34
cs=0x1a2;eip=0x00ad37; 	S(OUT(dx, ax));	// 27043                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:AD37
cs=0x1a2;eip=0x00ad38; 	X(PUSH(di));	// 27045                  push    di ;~ 01A2:AD38
cs=0x1a2;eip=0x00ad39; 	X(PUSH(si));	// 27046                  push    si ;~ 01A2:AD39
cs=0x1a2;eip=0x00ad3a; 	T(cl = ch;);	// 27047                  mov     cl, ch ;~ 01A2:AD3A
loc_1ad3c:
	// 6083 
cs=0x1a2;eip=0x00ad3c; 	T(al = byte_6fb92;);	// 27050                  mov     al, ss:byte_6FB92 ;~ 01A2:AD3C
cs=0x1a2;eip=0x00ad40; 	X(byte_6fb93 = al;);	// 27051                  mov     ss:byte_6FB93, al ;~ 01A2:AD40
loc_1ad44:
	// 6084 
cs=0x1a2;eip=0x00ad44; 	T(LODSW);	// 27054                  lodsw ;~ 01A2:AD44
cs=0x1a2;eip=0x00ad45; 	X(OR(*(dw*)(raddr(es,di)), ax));	// 27055                  or      es:[di], ax ;~ 01A2:AD45
cs=0x1a2;eip=0x00ad48; 	T(ADD(di, 2));	// 27056                  add     di, 2 ;~ 01A2:AD48
cs=0x1a2;eip=0x00ad4b; 	X(DEC(byte_6fb93));	// 27057                  dec     ss:byte_6FB93 ;~ 01A2:AD4B
cs=0x1a2;eip=0x00ad50; 	J(JNZ(loc_1ad44));	// 27058                  jnz     short loc_1AD44 ;~ 01A2:AD50
cs=0x1a2;eip=0x00ad52; 	T(ADD(si, *(dw*)(&unk_6fb94)));	// 27059                  add     si, word ptr ss:unk_6FB94 ;~ 01A2:AD52
cs=0x1a2;eip=0x00ad57; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 27060                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:AD57
cs=0x1a2;eip=0x00ad5c; 	T(DEC(cl));	// 27061                  dec     cl ;~ 01A2:AD5C
cs=0x1a2;eip=0x00ad5e; 	J(JNZ(loc_1ad3c));	// 27062                  jnz     short loc_1AD3C ;~ 01A2:AD5E
cs=0x1a2;eip=0x00ad60; 	X(POP(si));	// 27063                  pop     si ;~ 01A2:AD60
cs=0x1a2;eip=0x00ad61; 	X(POP(di));	// 27064                  pop     di ;~ 01A2:AD61
cs=0x1a2;eip=0x00ad62; 	T(dx = 0x3CE;);	// 27065                  mov     dx, 3CEh ;~ 01A2:AD62
cs=0x1a2;eip=0x00ad65; 	T(ax = 0x304;);	// 27066                  mov     ax, 304h ;~ 01A2:AD65
cs=0x1a2;eip=0x00ad68; 	S(OUT(dx, ax));	// 27067                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AD68
cs=0x1a2;eip=0x00ad69; 	T(dx = 0x3C4;);	// 27069                  mov     dx, 3C4h ;~ 01A2:AD69
cs=0x1a2;eip=0x00ad6c; 	T(ax = 0x802;);	// 27070                  mov     ax, 802h ;~ 01A2:AD6C
cs=0x1a2;eip=0x00ad6f; 	S(OUT(dx, ax));	// 27071                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:AD6F
cs=0x1a2;eip=0x00ad70; 	X(PUSH(di));	// 27073                  push    di ;~ 01A2:AD70
cs=0x1a2;eip=0x00ad71; 	X(PUSH(si));	// 27074                  push    si ;~ 01A2:AD71
cs=0x1a2;eip=0x00ad72; 	T(cl = ch;);	// 27075                  mov     cl, ch ;~ 01A2:AD72
loc_1ad74:
	// 6085 
cs=0x1a2;eip=0x00ad74; 	T(al = byte_6fb92;);	// 27078                  mov     al, ss:byte_6FB92 ;~ 01A2:AD74
cs=0x1a2;eip=0x00ad78; 	X(byte_6fb93 = al;);	// 27079                  mov     ss:byte_6FB93, al ;~ 01A2:AD78
loc_1ad7c:
	// 6086 
cs=0x1a2;eip=0x00ad7c; 	T(LODSW);	// 27082                  lodsw ;~ 01A2:AD7C
cs=0x1a2;eip=0x00ad7d; 	X(OR(*(dw*)(raddr(es,di)), ax));	// 27083                  or      es:[di], ax ;~ 01A2:AD7D
cs=0x1a2;eip=0x00ad80; 	T(ADD(di, 2));	// 27084                  add     di, 2 ;~ 01A2:AD80
cs=0x1a2;eip=0x00ad83; 	X(DEC(byte_6fb93));	// 27085                  dec     ss:byte_6FB93 ;~ 01A2:AD83
cs=0x1a2;eip=0x00ad88; 	J(JNZ(loc_1ad7c));	// 27086                  jnz     short loc_1AD7C ;~ 01A2:AD88
cs=0x1a2;eip=0x00ad8a; 	T(ADD(si, *(dw*)(&unk_6fb94)));	// 27087                  add     si, word ptr ss:unk_6FB94 ;~ 01A2:AD8A
cs=0x1a2;eip=0x00ad8f; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 27088                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:AD8F
cs=0x1a2;eip=0x00ad94; 	T(DEC(cl));	// 27089                  dec     cl ;~ 01A2:AD94
cs=0x1a2;eip=0x00ad96; 	J(JNZ(loc_1ad74));	// 27090                  jnz     short loc_1AD74 ;~ 01A2:AD96
cs=0x1a2;eip=0x00ad98; 	X(POP(si));	// 27091                  pop     si ;~ 01A2:AD98
cs=0x1a2;eip=0x00ad99; 	X(POP(di));	// 27092                  pop     di ;~ 01A2:AD99
loc_1ad9a:
	// 6087 
cs=0x1a2;eip=0x00ad9a; 	X(POP(ds));	// 27096                  pop     ds ;~ 01A2:AD9A
cs=0x1a2;eip=0x00ad9b; 	J(RETN(0));	// 27098                  retn ;~ 01A2:AD9B
sub_1adb4:
	// 27118 
cs=0x1a2;eip=0x00adb4; 	X(PUSH(ds));	// 27119                  push    ds ;~ 01A2:ADB4
cs=0x1a2;eip=0x00adb5; 	T(es = *(dw*)(((db*)&off_1f8c8)+2););	// 27120                  mov     es, word ptr ds:off_1F8C8+2 ;~ 01A2:ADB5
cs=0x1a2;eip=0x00adb9; 	T(ds = bp;);	// 27122                  mov     ds, bp ;~ 01A2:ADB9
cs=0x1a2;eip=0x00adbb; 	T(TEST(cl, 8));	// 27124                  test    cl, 8 ;~ 01A2:ADBB
cs=0x1a2;eip=0x00adbe; 	J(JZ(loc_1adc2));	// 27125                  jz      short loc_1ADC2 ;~ 01A2:ADBE
cs=0x1a2;eip=0x00adc0; 	T(INC(di));	// 27126                  inc     di ;~ 01A2:ADC0
cs=0x1a2;eip=0x00adc1; 	T(INC(si));	// 27127                  inc     si ;~ 01A2:ADC1
loc_1adc2:
	// 6088 
cs=0x1a2;eip=0x00adc2; 	T(XOR(dh, dh));	// 27130                  xor     dh, dh ;~ 01A2:ADC2
cs=0x1a2;eip=0x00adc4; 	T(SHL(dx, 1));	// 27131                  shl     dx, 1 ;~ 01A2:ADC4
cs=0x1a2;eip=0x00adc6; 	T(bx = m2c::kloc_1ad9a;);	// 27132                  mov     bx, offset loc_1AD9A ;~ 01A2:ADC6
cs=0x1a2;eip=0x00adc9; 	T(ADD(bx, dx));	// 27133                  add     bx, dx ;~ 01A2:ADC9
cs=0x1a2;eip=0x00adcb; 	T(MOV(ax, *(dw*)(raddr(cs,bx))));	// 27134                  mov     ax, cs:[bx] ;~ 01A2:ADCB
cs=0x1a2;eip=0x00adce; __disp=ax;
	J(return __dispatch_call(__disp, _state););	// 27135                  jmp     ax ;~ 01A2:ADCE

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1ab4e: 	goto loc_1ab4e;
        case m2c::kloc_1ab52: 	goto loc_1ab52;
        case m2c::kloc_1ab5a: 	goto loc_1ab5a;
        case m2c::kloc_1ab9d: 	goto loc_1ab9d;
        case m2c::kloc_1aba5: 	goto loc_1aba5;
        case m2c::kloc_1abda: 	goto loc_1abda;
        case m2c::kloc_1abe2: 	goto loc_1abe2;
        case m2c::kloc_1ac17: 	goto loc_1ac17;
        case m2c::kloc_1ac1f: 	goto loc_1ac1f;
        case m2c::kloc_1ac54: 	goto loc_1ac54;
        case m2c::kloc_1ac5c: 	goto loc_1ac5c;
        case m2c::kloc_1ac82: 	goto loc_1ac82;
        case m2c::kloc_1ac86: 	goto loc_1ac86;
        case m2c::kloc_1ac8e: 	goto loc_1ac8e;
        case m2c::kloc_1accc: 	goto loc_1accc;
        case m2c::kloc_1acd4: 	goto loc_1acd4;
        case m2c::kloc_1ad04: 	goto loc_1ad04;
        case m2c::kloc_1ad0c: 	goto loc_1ad0c;
        case m2c::kloc_1ad3c: 	goto loc_1ad3c;
        case m2c::kloc_1ad44: 	goto loc_1ad44;
        case m2c::kloc_1ad74: 	goto loc_1ad74;
        case m2c::kloc_1ad7c: 	goto loc_1ad7c;
        case m2c::kloc_1ad9a: 	goto loc_1ad9a;
        case m2c::kloc_1adc2: 	goto loc_1adc2;
        case m2c::ksub_1ab13: 	goto sub_1ab13;
        case m2c::ksub_1adb4: 	goto sub_1adb4;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group32(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group32:
    _begin:
sub_1add0:
	// 27142 
cs=0x1a2;eip=0x00add0; 	T(al = dl;);	// 27144                  mov     al, dl ;~ 01A2:ADD0
cs=0x1a2;eip=0x00add2; 	T(SHR(al, 1));	// 27145                  shr     al, 1 ;~ 01A2:ADD2
cs=0x1a2;eip=0x00add4; 	X(byte_6fb92 = al;);	// 27146                  mov     ss:byte_6FB92, al ;~ 01A2:ADD4
cs=0x1a2;eip=0x00add8; 	T(ax = 0x28;);	// 27147                  mov     ax, 28h ; '(' ;~ 01A2:ADD8
cs=0x1a2;eip=0x00addb; 	T(SUB(ax, dx));	// 27148                  sub     ax, dx ;~ 01A2:ADDB
cs=0x1a2;eip=0x00addd; 	X(*(dw*)(&unk_6fb94) = ax;);	// 27149                  mov     word ptr ss:unk_6FB94, ax ;~ 01A2:ADDD
cs=0x1a2;eip=0x00ade1; 	T(dx = ds;);	// 27150                  mov     dx, ds ;~ 01A2:ADE1
cs=0x1a2;eip=0x00ade3; 	T(ax = es;);	// 27151                  mov     ax, es ;~ 01A2:ADE3
cs=0x1a2;eip=0x00ade5; 	T(ds = ax;);	// 27152                  mov     ds, ax ;~ 01A2:ADE5
cs=0x1a2;eip=0x00ade7; 	T(es = dx;);	// 27154                  mov     es, dx ;~ 01A2:ADE7
cs=0x1a2;eip=0x00ade9; 	T(dx = 0x3C4;);	// 27156                  mov     dx, 3C4h ;~ 01A2:ADE9
cs=0x1a2;eip=0x00adec; 	T(ax = 0x0F02;);	// 27157                  mov     ax, 0F02h ;~ 01A2:ADEC
cs=0x1a2;eip=0x00adef; 	S(OUT(dx, ax));	// 27158                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:ADEF
cs=0x1a2;eip=0x00adf0; 	T(dx = 0x3CE;);	// 27160                  mov     dx, 3CEh ;~ 01A2:ADF0
cs=0x1a2;eip=0x00adf3; 	T(ax = 0x805;);	// 27161                  mov     ax, 805h ;~ 01A2:ADF3
cs=0x1a2;eip=0x00adf6; 	S(OUT(dx, ax));	// 27162                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:ADF6
cs=0x1a2;eip=0x00adf7; 	T(ax = 0x803;);	// 27164                  mov     ax, 803h ;~ 01A2:ADF7
cs=0x1a2;eip=0x00adfa; 	S(OUT(dx, ax));	// 27165                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:ADFA
cs=0x1a2;eip=0x00adfb; 	T(ax = 0x0F07;);	// 27167                  mov     ax, 0F07h ;~ 01A2:ADFB
cs=0x1a2;eip=0x00adfe; 	S(OUT(dx, ax));	// 27168                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:ADFE
cs=0x1a2;eip=0x00adff; 	T(ax = 2;);	// 27170                  mov     ax, 2 ;~ 01A2:ADFF
cs=0x1a2;eip=0x00ae02; 	S(OUT(dx, ax));	// 27171                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AE02
cs=0x1a2;eip=0x00ae03; 	T(AND(cl, 7));	// 27174                  and     cl, 7 ;~ 01A2:AE03
cs=0x1a2;eip=0x00ae06; 	J(JNZ(loc_1ae0b));	// 27175                  jnz     short loc_1AE0B ;~ 01A2:AE06
cs=0x1a2;eip=0x00ae08; 	J(JMP(loc_1af0e));	// 27176                  jmp     loc_1AF0E ;~ 01A2:AE08
loc_1ae0b:
	// 6089 
cs=0x1a2;eip=0x00ae0b; 	T(dx = 0x3C4;);	// 27180                  mov     dx, 3C4h ;~ 01A2:AE0B
cs=0x1a2;eip=0x00ae0e; 	T(ax = 0x102;);	// 27181                  mov     ax, 102h ;~ 01A2:AE0E
cs=0x1a2;eip=0x00ae11; 	S(OUT(dx, ax));	// 27182                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:AE11
cs=0x1a2;eip=0x00ae12; 	T(dx = 0x3CE;);	// 27184                  mov     dx, 3CEh ;~ 01A2:AE12
cs=0x1a2;eip=0x00ae15; 	T(ax = 5;);	// 27185                  mov     ax, 5 ;~ 01A2:AE15
cs=0x1a2;eip=0x00ae18; 	S(OUT(dx, ax));	// 27186                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AE18
cs=0x1a2;eip=0x00ae19; 	T(ax = 4;);	// 27193                  mov     ax, 4 ;~ 01A2:AE19
cs=0x1a2;eip=0x00ae1c; 	S(OUT(dx, ax));	// 27194                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AE1C
cs=0x1a2;eip=0x00ae1d; 	T(ax = 3;);	// 27197                  mov     ax, 3 ;~ 01A2:AE1D
cs=0x1a2;eip=0x00ae20; 	S(OUT(dx, ax));	// 27198                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AE20
cs=0x1a2;eip=0x00ae21; 	T(ax = 7;);	// 27203                  mov     ax, 7 ;~ 01A2:AE21
cs=0x1a2;eip=0x00ae24; 	S(OUT(dx, ax));	// 27204                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AE24
cs=0x1a2;eip=0x00ae25; 	X(PUSH(di));	// 27207                  push    di ;~ 01A2:AE25
cs=0x1a2;eip=0x00ae26; 	X(PUSH(si));	// 27208                  push    si ;~ 01A2:AE26
cs=0x1a2;eip=0x00ae27; 	T(dl = ch;);	// 27209                  mov     dl, ch ;~ 01A2:AE27
loc_1ae29:
	// 6090 
cs=0x1a2;eip=0x00ae29; 	T(al = byte_6fb92;);	// 27212                  mov     al, ss:byte_6FB92 ;~ 01A2:AE29
cs=0x1a2;eip=0x00ae2d; 	X(byte_6fb93 = al;);	// 27213                  mov     ss:byte_6FB93, al ;~ 01A2:AE2D
loc_1ae31:
	// 6091 
cs=0x1a2;eip=0x00ae31; 	T(LODSW);	// 27216                  lodsw ;~ 01A2:AE31
cs=0x1a2;eip=0x00ae32; 	X(OR(*(dw*)(raddr(es,di)), ax));	// 27217                  or      es:[di], ax ;~ 01A2:AE32
cs=0x1a2;eip=0x00ae35; 	T(ADD(di, 2));	// 27218                  add     di, 2 ;~ 01A2:AE35
cs=0x1a2;eip=0x00ae38; 	X(DEC(byte_6fb93));	// 27219                  dec     ss:byte_6FB93 ;~ 01A2:AE38
cs=0x1a2;eip=0x00ae3d; 	J(JNZ(loc_1ae31));	// 27220                  jnz     short loc_1AE31 ;~ 01A2:AE3D
cs=0x1a2;eip=0x00ae3f; 	T(MOV(al, *(raddr(ds,si))));	// 27221                  mov     al, [si] ;~ 01A2:AE3F
cs=0x1a2;eip=0x00ae41; 	X(OR(*(raddr(es,di)), al));	// 27222                  or      es:[di], al ;~ 01A2:AE41
cs=0x1a2;eip=0x00ae44; 	T(ADD(si, *(dw*)(&unk_6fb94)));	// 27223                  add     si, word ptr ss:unk_6FB94 ;~ 01A2:AE44
cs=0x1a2;eip=0x00ae49; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 27224                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:AE49
cs=0x1a2;eip=0x00ae4e; 	T(DEC(dl));	// 27225                  dec     dl ;~ 01A2:AE4E
cs=0x1a2;eip=0x00ae50; 	J(JNZ(loc_1ae29));	// 27226                  jnz     short loc_1AE29 ;~ 01A2:AE50
cs=0x1a2;eip=0x00ae52; 	X(POP(si));	// 27227                  pop     si ;~ 01A2:AE52
cs=0x1a2;eip=0x00ae53; 	X(POP(di));	// 27228                  pop     di ;~ 01A2:AE53
cs=0x1a2;eip=0x00ae54; 	T(dx = 0x3CE;);	// 27229                  mov     dx, 3CEh ;~ 01A2:AE54
cs=0x1a2;eip=0x00ae57; 	T(ax = 0x104;);	// 27230                  mov     ax, 104h ;~ 01A2:AE57
cs=0x1a2;eip=0x00ae5a; 	S(OUT(dx, ax));	// 27231                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AE5A
cs=0x1a2;eip=0x00ae5b; 	T(dx = 0x3C4;);	// 27233                  mov     dx, 3C4h ;~ 01A2:AE5B
cs=0x1a2;eip=0x00ae5e; 	T(ax = 0x202;);	// 27234                  mov     ax, 202h ;~ 01A2:AE5E
cs=0x1a2;eip=0x00ae61; 	S(OUT(dx, ax));	// 27235                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:AE61
cs=0x1a2;eip=0x00ae62; 	X(PUSH(di));	// 27237                  push    di ;~ 01A2:AE62
cs=0x1a2;eip=0x00ae63; 	X(PUSH(si));	// 27238                  push    si ;~ 01A2:AE63
cs=0x1a2;eip=0x00ae64; 	T(dl = ch;);	// 27239                  mov     dl, ch ;~ 01A2:AE64
loc_1ae66:
	// 6092 
cs=0x1a2;eip=0x00ae66; 	T(al = byte_6fb92;);	// 27242                  mov     al, ss:byte_6FB92 ;~ 01A2:AE66
cs=0x1a2;eip=0x00ae6a; 	X(byte_6fb93 = al;);	// 27243                  mov     ss:byte_6FB93, al ;~ 01A2:AE6A
loc_1ae6e:
	// 6093 
cs=0x1a2;eip=0x00ae6e; 	T(LODSW);	// 27246                  lodsw ;~ 01A2:AE6E
cs=0x1a2;eip=0x00ae6f; 	X(OR(*(dw*)(raddr(es,di)), ax));	// 27247                  or      es:[di], ax ;~ 01A2:AE6F
cs=0x1a2;eip=0x00ae72; 	T(ADD(di, 2));	// 27248                  add     di, 2 ;~ 01A2:AE72
cs=0x1a2;eip=0x00ae75; 	X(DEC(byte_6fb93));	// 27249                  dec     ss:byte_6FB93 ;~ 01A2:AE75
cs=0x1a2;eip=0x00ae7a; 	J(JNZ(loc_1ae6e));	// 27250                  jnz     short loc_1AE6E ;~ 01A2:AE7A
cs=0x1a2;eip=0x00ae7c; 	T(MOV(al, *(raddr(ds,si))));	// 27251                  mov     al, [si] ;~ 01A2:AE7C
cs=0x1a2;eip=0x00ae7e; 	X(OR(*(raddr(es,di)), al));	// 27252                  or      es:[di], al ;~ 01A2:AE7E
cs=0x1a2;eip=0x00ae81; 	T(ADD(si, *(dw*)(&unk_6fb94)));	// 27253                  add     si, word ptr ss:unk_6FB94 ;~ 01A2:AE81
cs=0x1a2;eip=0x00ae86; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 27254                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:AE86
cs=0x1a2;eip=0x00ae8b; 	T(DEC(dl));	// 27255                  dec     dl ;~ 01A2:AE8B
cs=0x1a2;eip=0x00ae8d; 	J(JNZ(loc_1ae66));	// 27256                  jnz     short loc_1AE66 ;~ 01A2:AE8D
cs=0x1a2;eip=0x00ae8f; 	X(POP(si));	// 27257                  pop     si ;~ 01A2:AE8F
cs=0x1a2;eip=0x00ae90; 	X(POP(di));	// 27258                  pop     di ;~ 01A2:AE90
cs=0x1a2;eip=0x00ae91; 	T(dx = 0x3CE;);	// 27259                  mov     dx, 3CEh ;~ 01A2:AE91
cs=0x1a2;eip=0x00ae94; 	T(ax = 0x204;);	// 27260                  mov     ax, 204h ;~ 01A2:AE94
cs=0x1a2;eip=0x00ae97; 	S(OUT(dx, ax));	// 27261                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AE97
cs=0x1a2;eip=0x00ae98; 	T(dx = 0x3C4;);	// 27263                  mov     dx, 3C4h ;~ 01A2:AE98
cs=0x1a2;eip=0x00ae9b; 	T(ax = 0x402;);	// 27264                  mov     ax, 402h ;~ 01A2:AE9B
cs=0x1a2;eip=0x00ae9e; 	S(OUT(dx, ax));	// 27265                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:AE9E
cs=0x1a2;eip=0x00ae9f; 	X(PUSH(di));	// 27267                  push    di ;~ 01A2:AE9F
cs=0x1a2;eip=0x00aea0; 	X(PUSH(si));	// 27268                  push    si ;~ 01A2:AEA0
cs=0x1a2;eip=0x00aea1; 	T(dl = ch;);	// 27269                  mov     dl, ch ;~ 01A2:AEA1
loc_1aea3:
	// 6094 
cs=0x1a2;eip=0x00aea3; 	T(al = byte_6fb92;);	// 27272                  mov     al, ss:byte_6FB92 ;~ 01A2:AEA3
cs=0x1a2;eip=0x00aea7; 	X(byte_6fb93 = al;);	// 27273                  mov     ss:byte_6FB93, al ;~ 01A2:AEA7
loc_1aeab:
	// 6095 
cs=0x1a2;eip=0x00aeab; 	T(LODSW);	// 27276                  lodsw ;~ 01A2:AEAB
cs=0x1a2;eip=0x00aeac; 	X(OR(*(dw*)(raddr(es,di)), ax));	// 27277                  or      es:[di], ax ;~ 01A2:AEAC
cs=0x1a2;eip=0x00aeaf; 	T(ADD(di, 2));	// 27278                  add     di, 2 ;~ 01A2:AEAF
cs=0x1a2;eip=0x00aeb2; 	X(DEC(byte_6fb93));	// 27279                  dec     ss:byte_6FB93 ;~ 01A2:AEB2
cs=0x1a2;eip=0x00aeb7; 	J(JNZ(loc_1aeab));	// 27280                  jnz     short loc_1AEAB ;~ 01A2:AEB7
cs=0x1a2;eip=0x00aeb9; 	T(MOV(al, *(raddr(ds,si))));	// 27281                  mov     al, [si] ;~ 01A2:AEB9
cs=0x1a2;eip=0x00aebb; 	X(OR(*(raddr(es,di)), al));	// 27282                  or      es:[di], al ;~ 01A2:AEBB
cs=0x1a2;eip=0x00aebe; 	T(ADD(si, *(dw*)(&unk_6fb94)));	// 27283                  add     si, word ptr ss:unk_6FB94 ;~ 01A2:AEBE
cs=0x1a2;eip=0x00aec3; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 27284                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:AEC3
cs=0x1a2;eip=0x00aec8; 	T(DEC(dl));	// 27285                  dec     dl ;~ 01A2:AEC8
cs=0x1a2;eip=0x00aeca; 	J(JNZ(loc_1aea3));	// 27286                  jnz     short loc_1AEA3 ;~ 01A2:AECA
cs=0x1a2;eip=0x00aecc; 	X(POP(si));	// 27287                  pop     si ;~ 01A2:AECC
cs=0x1a2;eip=0x00aecd; 	X(POP(di));	// 27288                  pop     di ;~ 01A2:AECD
cs=0x1a2;eip=0x00aece; 	T(dx = 0x3CE;);	// 27289                  mov     dx, 3CEh ;~ 01A2:AECE
cs=0x1a2;eip=0x00aed1; 	T(ax = 0x304;);	// 27290                  mov     ax, 304h ;~ 01A2:AED1
cs=0x1a2;eip=0x00aed4; 	S(OUT(dx, ax));	// 27291                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AED4
cs=0x1a2;eip=0x00aed5; 	T(dx = 0x3C4;);	// 27293                  mov     dx, 3C4h ;~ 01A2:AED5
cs=0x1a2;eip=0x00aed8; 	T(ax = 0x802;);	// 27294                  mov     ax, 802h ;~ 01A2:AED8
cs=0x1a2;eip=0x00aedb; 	S(OUT(dx, ax));	// 27295                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:AEDB
cs=0x1a2;eip=0x00aedc; 	X(PUSH(di));	// 27297                  push    di ;~ 01A2:AEDC
cs=0x1a2;eip=0x00aedd; 	X(PUSH(si));	// 27298                  push    si ;~ 01A2:AEDD
cs=0x1a2;eip=0x00aede; 	T(dl = ch;);	// 27299                  mov     dl, ch ;~ 01A2:AEDE
loc_1aee0:
	// 6096 
cs=0x1a2;eip=0x00aee0; 	T(al = byte_6fb92;);	// 27302                  mov     al, ss:byte_6FB92 ;~ 01A2:AEE0
cs=0x1a2;eip=0x00aee4; 	X(byte_6fb93 = al;);	// 27303                  mov     ss:byte_6FB93, al ;~ 01A2:AEE4
loc_1aee8:
	// 6097 
cs=0x1a2;eip=0x00aee8; 	T(LODSW);	// 27306                  lodsw ;~ 01A2:AEE8
cs=0x1a2;eip=0x00aee9; 	X(OR(*(dw*)(raddr(es,di)), ax));	// 27307                  or      es:[di], ax ;~ 01A2:AEE9
cs=0x1a2;eip=0x00aeec; 	T(ADD(di, 2));	// 27308                  add     di, 2 ;~ 01A2:AEEC
cs=0x1a2;eip=0x00aeef; 	X(DEC(byte_6fb93));	// 27309                  dec     ss:byte_6FB93 ;~ 01A2:AEEF
cs=0x1a2;eip=0x00aef4; 	J(JNZ(loc_1aee8));	// 27310                  jnz     short loc_1AEE8 ;~ 01A2:AEF4
cs=0x1a2;eip=0x00aef6; 	T(MOV(al, *(raddr(ds,si))));	// 27311                  mov     al, [si] ;~ 01A2:AEF6
cs=0x1a2;eip=0x00aef8; 	X(OR(*(raddr(es,di)), al));	// 27312                  or      es:[di], al ;~ 01A2:AEF8
cs=0x1a2;eip=0x00aefb; 	T(ADD(si, *(dw*)(&unk_6fb94)));	// 27313                  add     si, word ptr ss:unk_6FB94 ;~ 01A2:AEFB
cs=0x1a2;eip=0x00af00; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 27314                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:AF00
cs=0x1a2;eip=0x00af05; 	T(DEC(dl));	// 27315                  dec     dl ;~ 01A2:AF05
cs=0x1a2;eip=0x00af07; 	J(JNZ(loc_1aee0));	// 27316                  jnz     short loc_1AEE0 ;~ 01A2:AF07
cs=0x1a2;eip=0x00af09; 	X(POP(si));	// 27317                  pop     si ;~ 01A2:AF09
cs=0x1a2;eip=0x00af0a; 	X(POP(di));	// 27318                  pop     di ;~ 01A2:AF0A
cs=0x1a2;eip=0x00af0b; 	J(JMP(loc_1affa));	// 27319                  jmp     loc_1AFFA ;~ 01A2:AF0B
loc_1af0e:
	// 6098 
cs=0x1a2;eip=0x00af0e; 	T(dx = 0x3C4;);	// 27323                  mov     dx, 3C4h ;~ 01A2:AF0E
cs=0x1a2;eip=0x00af11; 	T(ax = 0x102;);	// 27324                  mov     ax, 102h ;~ 01A2:AF11
cs=0x1a2;eip=0x00af14; 	S(OUT(dx, ax));	// 27325                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:AF14
cs=0x1a2;eip=0x00af15; 	T(dx = 0x3CE;);	// 27327                  mov     dx, 3CEh ;~ 01A2:AF15
cs=0x1a2;eip=0x00af18; 	T(ax = 5;);	// 27328                  mov     ax, 5 ;~ 01A2:AF18
cs=0x1a2;eip=0x00af1b; 	S(OUT(dx, ax));	// 27329                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AF1B
cs=0x1a2;eip=0x00af1c; 	T(ax = 4;);	// 27336                  mov     ax, 4 ;~ 01A2:AF1C
cs=0x1a2;eip=0x00af1f; 	S(OUT(dx, ax));	// 27337                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AF1F
cs=0x1a2;eip=0x00af20; 	T(ax = 3;);	// 27340                  mov     ax, 3 ;~ 01A2:AF20
cs=0x1a2;eip=0x00af23; 	S(OUT(dx, ax));	// 27341                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AF23
cs=0x1a2;eip=0x00af24; 	T(ax = 7;);	// 27346                  mov     ax, 7 ;~ 01A2:AF24
cs=0x1a2;eip=0x00af27; 	S(OUT(dx, ax));	// 27347                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AF27
cs=0x1a2;eip=0x00af28; 	X(PUSH(di));	// 27350                  push    di ;~ 01A2:AF28
cs=0x1a2;eip=0x00af29; 	X(PUSH(si));	// 27351                  push    si ;~ 01A2:AF29
cs=0x1a2;eip=0x00af2a; 	T(cl = ch;);	// 27352                  mov     cl, ch ;~ 01A2:AF2A
loc_1af2c:
	// 6099 
cs=0x1a2;eip=0x00af2c; 	T(al = byte_6fb92;);	// 27355                  mov     al, ss:byte_6FB92 ;~ 01A2:AF2C
cs=0x1a2;eip=0x00af30; 	X(byte_6fb93 = al;);	// 27356                  mov     ss:byte_6FB93, al ;~ 01A2:AF30
loc_1af34:
	// 6100 
cs=0x1a2;eip=0x00af34; 	T(LODSW);	// 27359                  lodsw ;~ 01A2:AF34
cs=0x1a2;eip=0x00af35; 	X(OR(*(dw*)(raddr(es,di)), ax));	// 27360                  or      es:[di], ax ;~ 01A2:AF35
cs=0x1a2;eip=0x00af38; 	T(ADD(di, 2));	// 27361                  add     di, 2 ;~ 01A2:AF38
cs=0x1a2;eip=0x00af3b; 	X(DEC(byte_6fb93));	// 27362                  dec     ss:byte_6FB93 ;~ 01A2:AF3B
cs=0x1a2;eip=0x00af40; 	J(JNZ(loc_1af34));	// 27363                  jnz     short loc_1AF34 ;~ 01A2:AF40
cs=0x1a2;eip=0x00af42; 	T(ADD(si, *(dw*)(&unk_6fb94)));	// 27364                  add     si, word ptr ss:unk_6FB94 ;~ 01A2:AF42
cs=0x1a2;eip=0x00af47; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 27365                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:AF47
cs=0x1a2;eip=0x00af4c; 	T(DEC(cl));	// 27366                  dec     cl ;~ 01A2:AF4C
cs=0x1a2;eip=0x00af4e; 	J(JNZ(loc_1af2c));	// 27367                  jnz     short loc_1AF2C ;~ 01A2:AF4E
cs=0x1a2;eip=0x00af50; 	X(POP(si));	// 27368                  pop     si ;~ 01A2:AF50
cs=0x1a2;eip=0x00af51; 	X(POP(di));	// 27369                  pop     di ;~ 01A2:AF51
cs=0x1a2;eip=0x00af52; 	T(dx = 0x3CE;);	// 27370                  mov     dx, 3CEh ;~ 01A2:AF52
cs=0x1a2;eip=0x00af55; 	T(ax = 0x104;);	// 27371                  mov     ax, 104h ;~ 01A2:AF55
cs=0x1a2;eip=0x00af58; 	S(OUT(dx, ax));	// 27372                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AF58
cs=0x1a2;eip=0x00af59; 	T(dx = 0x3C4;);	// 27374                  mov     dx, 3C4h ;~ 01A2:AF59
cs=0x1a2;eip=0x00af5c; 	T(ax = 0x202;);	// 27375                  mov     ax, 202h ;~ 01A2:AF5C
cs=0x1a2;eip=0x00af5f; 	S(OUT(dx, ax));	// 27376                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:AF5F
cs=0x1a2;eip=0x00af60; 	X(PUSH(di));	// 27378                  push    di ;~ 01A2:AF60
cs=0x1a2;eip=0x00af61; 	X(PUSH(si));	// 27379                  push    si ;~ 01A2:AF61
cs=0x1a2;eip=0x00af62; 	T(cl = ch;);	// 27380                  mov     cl, ch ;~ 01A2:AF62
loc_1af64:
	// 6101 
cs=0x1a2;eip=0x00af64; 	T(al = byte_6fb92;);	// 27383                  mov     al, ss:byte_6FB92 ;~ 01A2:AF64
cs=0x1a2;eip=0x00af68; 	X(byte_6fb93 = al;);	// 27384                  mov     ss:byte_6FB93, al ;~ 01A2:AF68
loc_1af6c:
	// 6102 
cs=0x1a2;eip=0x00af6c; 	T(LODSW);	// 27387                  lodsw ;~ 01A2:AF6C
cs=0x1a2;eip=0x00af6d; 	X(OR(*(dw*)(raddr(es,di)), ax));	// 27388                  or      es:[di], ax ;~ 01A2:AF6D
cs=0x1a2;eip=0x00af70; 	T(ADD(di, 2));	// 27389                  add     di, 2 ;~ 01A2:AF70
cs=0x1a2;eip=0x00af73; 	X(DEC(byte_6fb93));	// 27390                  dec     ss:byte_6FB93 ;~ 01A2:AF73
cs=0x1a2;eip=0x00af78; 	J(JNZ(loc_1af6c));	// 27391                  jnz     short loc_1AF6C ;~ 01A2:AF78
cs=0x1a2;eip=0x00af7a; 	T(ADD(si, *(dw*)(&unk_6fb94)));	// 27392                  add     si, word ptr ss:unk_6FB94 ;~ 01A2:AF7A
cs=0x1a2;eip=0x00af7f; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 27393                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:AF7F
cs=0x1a2;eip=0x00af84; 	T(DEC(cl));	// 27394                  dec     cl ;~ 01A2:AF84
cs=0x1a2;eip=0x00af86; 	J(JNZ(loc_1af64));	// 27395                  jnz     short loc_1AF64 ;~ 01A2:AF86
cs=0x1a2;eip=0x00af88; 	X(POP(si));	// 27396                  pop     si ;~ 01A2:AF88
cs=0x1a2;eip=0x00af89; 	X(POP(di));	// 27397                  pop     di ;~ 01A2:AF89
cs=0x1a2;eip=0x00af8a; 	T(dx = 0x3CE;);	// 27398                  mov     dx, 3CEh ;~ 01A2:AF8A
cs=0x1a2;eip=0x00af8d; 	T(ax = 0x204;);	// 27399                  mov     ax, 204h ;~ 01A2:AF8D
cs=0x1a2;eip=0x00af90; 	S(OUT(dx, ax));	// 27400                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AF90
cs=0x1a2;eip=0x00af91; 	T(dx = 0x3C4;);	// 27402                  mov     dx, 3C4h ;~ 01A2:AF91
cs=0x1a2;eip=0x00af94; 	T(ax = 0x402;);	// 27403                  mov     ax, 402h ;~ 01A2:AF94
cs=0x1a2;eip=0x00af97; 	S(OUT(dx, ax));	// 27404                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:AF97
cs=0x1a2;eip=0x00af98; 	X(PUSH(di));	// 27406                  push    di ;~ 01A2:AF98
cs=0x1a2;eip=0x00af99; 	X(PUSH(si));	// 27407                  push    si ;~ 01A2:AF99
cs=0x1a2;eip=0x00af9a; 	T(cl = ch;);	// 27408                  mov     cl, ch ;~ 01A2:AF9A
loc_1af9c:
	// 6103 
cs=0x1a2;eip=0x00af9c; 	T(al = byte_6fb92;);	// 27411                  mov     al, ss:byte_6FB92 ;~ 01A2:AF9C
cs=0x1a2;eip=0x00afa0; 	X(byte_6fb93 = al;);	// 27412                  mov     ss:byte_6FB93, al ;~ 01A2:AFA0
loc_1afa4:
	// 6104 
cs=0x1a2;eip=0x00afa4; 	T(LODSW);	// 27415                  lodsw ;~ 01A2:AFA4
cs=0x1a2;eip=0x00afa5; 	X(OR(*(dw*)(raddr(es,di)), ax));	// 27416                  or      es:[di], ax ;~ 01A2:AFA5
cs=0x1a2;eip=0x00afa8; 	T(ADD(di, 2));	// 27417                  add     di, 2 ;~ 01A2:AFA8
cs=0x1a2;eip=0x00afab; 	X(DEC(byte_6fb93));	// 27418                  dec     ss:byte_6FB93 ;~ 01A2:AFAB
cs=0x1a2;eip=0x00afb0; 	J(JNZ(loc_1afa4));	// 27419                  jnz     short loc_1AFA4 ;~ 01A2:AFB0
cs=0x1a2;eip=0x00afb2; 	T(ADD(si, *(dw*)(&unk_6fb94)));	// 27420                  add     si, word ptr ss:unk_6FB94 ;~ 01A2:AFB2
cs=0x1a2;eip=0x00afb7; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 27421                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:AFB7
cs=0x1a2;eip=0x00afbc; 	T(DEC(cl));	// 27422                  dec     cl ;~ 01A2:AFBC
cs=0x1a2;eip=0x00afbe; 	J(JNZ(loc_1af9c));	// 27423                  jnz     short loc_1AF9C ;~ 01A2:AFBE
cs=0x1a2;eip=0x00afc0; 	X(POP(si));	// 27424                  pop     si ;~ 01A2:AFC0
cs=0x1a2;eip=0x00afc1; 	X(POP(di));	// 27425                  pop     di ;~ 01A2:AFC1
cs=0x1a2;eip=0x00afc2; 	T(dx = 0x3CE;);	// 27426                  mov     dx, 3CEh ;~ 01A2:AFC2
cs=0x1a2;eip=0x00afc5; 	T(ax = 0x304;);	// 27427                  mov     ax, 304h ;~ 01A2:AFC5
cs=0x1a2;eip=0x00afc8; 	S(OUT(dx, ax));	// 27428                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:AFC8
cs=0x1a2;eip=0x00afc9; 	T(dx = 0x3C4;);	// 27430                  mov     dx, 3C4h ;~ 01A2:AFC9
cs=0x1a2;eip=0x00afcc; 	T(ax = 0x802;);	// 27431                  mov     ax, 802h ;~ 01A2:AFCC
cs=0x1a2;eip=0x00afcf; 	S(OUT(dx, ax));	// 27432                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:AFCF
cs=0x1a2;eip=0x00afd0; 	X(PUSH(di));	// 27434                  push    di ;~ 01A2:AFD0
cs=0x1a2;eip=0x00afd1; 	X(PUSH(si));	// 27435                  push    si ;~ 01A2:AFD1
cs=0x1a2;eip=0x00afd2; 	T(cl = ch;);	// 27436                  mov     cl, ch ;~ 01A2:AFD2
loc_1afd4:
	// 6105 
cs=0x1a2;eip=0x00afd4; 	T(al = byte_6fb92;);	// 27439                  mov     al, ss:byte_6FB92 ;~ 01A2:AFD4
cs=0x1a2;eip=0x00afd8; 	X(byte_6fb93 = al;);	// 27440                  mov     ss:byte_6FB93, al ;~ 01A2:AFD8
loc_1afdc:
	// 6106 
cs=0x1a2;eip=0x00afdc; 	T(LODSW);	// 27443                  lodsw ;~ 01A2:AFDC
cs=0x1a2;eip=0x00afdd; 	X(OR(*(dw*)(raddr(es,di)), ax));	// 27444                  or      es:[di], ax ;~ 01A2:AFDD
cs=0x1a2;eip=0x00afe0; 	T(ADD(di, 2));	// 27445                  add     di, 2 ;~ 01A2:AFE0
cs=0x1a2;eip=0x00afe3; 	X(DEC(byte_6fb93));	// 27446                  dec     ss:byte_6FB93 ;~ 01A2:AFE3
cs=0x1a2;eip=0x00afe8; 	J(JNZ(loc_1afdc));	// 27447                  jnz     short loc_1AFDC ;~ 01A2:AFE8
cs=0x1a2;eip=0x00afea; 	T(ADD(si, *(dw*)(&unk_6fb94)));	// 27448                  add     si, word ptr ss:unk_6FB94 ;~ 01A2:AFEA
cs=0x1a2;eip=0x00afef; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 27449                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:AFEF
cs=0x1a2;eip=0x00aff4; 	T(DEC(cl));	// 27450                  dec     cl ;~ 01A2:AFF4
cs=0x1a2;eip=0x00aff6; 	J(JNZ(loc_1afd4));	// 27451                  jnz     short loc_1AFD4 ;~ 01A2:AFF6
cs=0x1a2;eip=0x00aff8; 	X(POP(si));	// 27452                  pop     si ;~ 01A2:AFF8
cs=0x1a2;eip=0x00aff9; 	X(POP(di));	// 27453                  pop     di ;~ 01A2:AFF9
loc_1affa:
	// 6107 
cs=0x1a2;eip=0x00affa; 	X(POP(ds));	// 27457                  pop     ds ;~ 01A2:AFFA
cs=0x1a2;eip=0x00affb; 	J(RETN(0));	// 27459                  retn ;~ 01A2:AFFB
sub_1b012:
	// 27479 
cs=0x1a2;eip=0x00b012; 	X(PUSH(ds));	// 27480                  push    ds ;~ 01A2:B012
cs=0x1a2;eip=0x00b013; 	T(es = *(dw*)(((db*)&off_1f8c8)+2););	// 27481                  mov     es, word ptr ds:off_1F8C8+2 ;~ 01A2:B013
cs=0x1a2;eip=0x00b017; 	T(ds = bp;);	// 27483                  mov     ds, bp ;~ 01A2:B017
cs=0x1a2;eip=0x00b019; 	T(TEST(cl, 8));	// 27485                  test    cl, 8 ;~ 01A2:B019
cs=0x1a2;eip=0x00b01c; 	J(JZ(loc_1b01f));	// 27486                  jz      short loc_1B01F ;~ 01A2:B01C
cs=0x1a2;eip=0x00b01e; 	T(INC(di));	// 27488                  inc     di ;~ 01A2:B01E
loc_1b01f:
	// 6108 
cs=0x1a2;eip=0x00b01f; 	T(XOR(dh, dh));	// 27491                  xor     dh, dh ;~ 01A2:B01F
cs=0x1a2;eip=0x00b021; 	T(SHL(dx, 1));	// 27492                  shl     dx, 1 ;~ 01A2:B021
cs=0x1a2;eip=0x00b023; 	T(bx = m2c::kloc_1affa;);	// 27493                  mov     bx, offset loc_1AFFA ;~ 01A2:B023
cs=0x1a2;eip=0x00b026; 	T(ADD(bx, dx));	// 27494                  add     bx, dx ;~ 01A2:B026
cs=0x1a2;eip=0x00b028; 	T(MOV(ax, *(dw*)(raddr(cs,bx))));	// 27495                  mov     ax, cs:[bx] ;~ 01A2:B028
cs=0x1a2;eip=0x00b02b; __disp=ax;
	J(return __dispatch_call(__disp, _state););	// 27496                  jmp     ax ;~ 01A2:B02B

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1ae0b: 	goto loc_1ae0b;
        case m2c::kloc_1ae29: 	goto loc_1ae29;
        case m2c::kloc_1ae31: 	goto loc_1ae31;
        case m2c::kloc_1ae66: 	goto loc_1ae66;
        case m2c::kloc_1ae6e: 	goto loc_1ae6e;
        case m2c::kloc_1aea3: 	goto loc_1aea3;
        case m2c::kloc_1aeab: 	goto loc_1aeab;
        case m2c::kloc_1aee0: 	goto loc_1aee0;
        case m2c::kloc_1aee8: 	goto loc_1aee8;
        case m2c::kloc_1af0e: 	goto loc_1af0e;
        case m2c::kloc_1af2c: 	goto loc_1af2c;
        case m2c::kloc_1af34: 	goto loc_1af34;
        case m2c::kloc_1af64: 	goto loc_1af64;
        case m2c::kloc_1af6c: 	goto loc_1af6c;
        case m2c::kloc_1af9c: 	goto loc_1af9c;
        case m2c::kloc_1afa4: 	goto loc_1afa4;
        case m2c::kloc_1afd4: 	goto loc_1afd4;
        case m2c::kloc_1afdc: 	goto loc_1afdc;
        case m2c::kloc_1affa: 	goto loc_1affa;
        case m2c::kloc_1b01f: 	goto loc_1b01f;
        case m2c::ksub_1add0: 	goto sub_1add0;
        case m2c::ksub_1b012: 	goto sub_1b012;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1b02d(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1b02d:
    _begin:
cs=0x1a2;eip=0x00b02d; 	T(AND(cl, 7));	// 27504                  and     cl, 7 ;~ 01A2:B02D
cs=0x1a2;eip=0x00b030; 	J(JZ(loc_1b073));	// 27505                  jz      short loc_1B073 ;~ 01A2:B030
cs=0x1a2;eip=0x00b032; 	T(dx = 0x3C4;);	// 27506                  mov     dx, 3C4h ;~ 01A2:B032
cs=0x1a2;eip=0x00b035; 	T(ax = 0x0F02;);	// 27507                  mov     ax, 0F02h ;~ 01A2:B035
cs=0x1a2;eip=0x00b038; 	S(OUT(dx, ax));	// 27508                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:B038
cs=0x1a2;eip=0x00b039; 	T(dx = 0x3CE;);	// 27510                  mov     dx, 3CEh ;~ 01A2:B039
cs=0x1a2;eip=0x00b03c; 	T(ax = 0x805;);	// 27511                  mov     ax, 805h ;~ 01A2:B03C
cs=0x1a2;eip=0x00b03f; 	S(OUT(dx, ax));	// 27512                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B03F
cs=0x1a2;eip=0x00b040; 	T(ax = 0x803;);	// 27514                  mov     ax, 803h ;~ 01A2:B040
cs=0x1a2;eip=0x00b043; 	S(OUT(dx, ax));	// 27515                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B043
cs=0x1a2;eip=0x00b044; 	T(ax = 7;);	// 27517                  mov     ax, 7 ;~ 01A2:B044
cs=0x1a2;eip=0x00b047; 	S(OUT(dx, ax));	// 27518                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B047
cs=0x1a2;eip=0x00b048; 	T(bp = di;);	// 27521                  mov     bp, di ;~ 01A2:B048
cs=0x1a2;eip=0x00b04a; 	T(bx = 0x0FF00;);	// 27522                  mov     bx, 0FF00h ;~ 01A2:B04A
cs=0x1a2;eip=0x00b04d; 	T(SHR(bx, cl));	// 27523                  shr     bx, cl ;~ 01A2:B04D
cs=0x1a2;eip=0x00b04f; 	T(dh = ch;);	// 27524                  mov     dh, ch ;~ 01A2:B04F
loc_1b051:
	// 6109 
cs=0x1a2;eip=0x00b051; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 27527                  lods    word ptr es:[si] ;~ 01A2:B051
cs=0x1a2;eip=0x00b053; 	T(ROR(ax, cl));	// 27528                  ror     ax, cl ;~ 01A2:B053
cs=0x1a2;eip=0x00b055; 	T(dl = al;);	// 27529                  mov     dl, al ;~ 01A2:B055
cs=0x1a2;eip=0x00b057; 	T(AND(al, bh));	// 27530                  and     al, bh ;~ 01A2:B057
cs=0x1a2;eip=0x00b059; 	T(AND(dl, bl));	// 27531                  and     dl, bl ;~ 01A2:B059
cs=0x1a2;eip=0x00b05b; 	X(AND(*(raddr(ds,di)), al));	// 27532                  and     [di], al ;~ 01A2:B05B
cs=0x1a2;eip=0x00b05d; 	X(AND(*(raddr(ds,di+1)), ah));	// 27533                  and     [di+1], ah ;~ 01A2:B05D
cs=0x1a2;eip=0x00b060; 	X(AND(*(raddr(ds,di+2)), dl));	// 27534                  and     [di+2], dl ;~ 01A2:B060
cs=0x1a2;eip=0x00b063; 	T(ADD(di, 0x28));	// 27535                  add     di, 28h ; '(' ;~ 01A2:B063
cs=0x1a2;eip=0x00b066; 	T(DEC(dh));	// 27536                  dec     dh ;~ 01A2:B066
cs=0x1a2;eip=0x00b068; 	J(JNZ(loc_1b051));	// 27537                  jnz     short loc_1B051 ;~ 01A2:B068
cs=0x1a2;eip=0x00b06a; 	T(di = bp;);	// 27538                  mov     di, bp ;~ 01A2:B06A
cs=0x1a2;eip=0x00b06c; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 27539                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:B06C
cs=0x1a2;eip=0x00b071; 	X(POP(ds));	// 27540                  pop     ds ;~ 01A2:B071
cs=0x1a2;eip=0x00b072; 	J(RETN(0));	// 27542                  retn ;~ 01A2:B072
loc_1b073:
	// 6110 
cs=0x1a2;eip=0x00b073; 	T(dx = 0x3C4;);	// 27546                  mov     dx, 3C4h ;~ 01A2:B073
cs=0x1a2;eip=0x00b076; 	T(ax = 0x0F02;);	// 27547                  mov     ax, 0F02h ;~ 01A2:B076
cs=0x1a2;eip=0x00b079; 	S(OUT(dx, ax));	// 27548                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:B079
cs=0x1a2;eip=0x00b07a; 	T(dx = 0x3CE;);	// 27550                  mov     dx, 3CEh ;~ 01A2:B07A
cs=0x1a2;eip=0x00b07d; 	T(ax = 0x805;);	// 27551                  mov     ax, 805h ;~ 01A2:B07D
cs=0x1a2;eip=0x00b080; 	S(OUT(dx, ax));	// 27552                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B080
cs=0x1a2;eip=0x00b081; 	T(ax = 0x803;);	// 27554                  mov     ax, 803h ;~ 01A2:B081
cs=0x1a2;eip=0x00b084; 	S(OUT(dx, ax));	// 27555                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B084
cs=0x1a2;eip=0x00b085; 	T(ax = 7;);	// 27557                  mov     ax, 7 ;~ 01A2:B085
cs=0x1a2;eip=0x00b088; 	S(OUT(dx, ax));	// 27558                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B088
cs=0x1a2;eip=0x00b089; 	T(bp = di;);	// 27561                  mov     bp, di ;~ 01A2:B089
cs=0x1a2;eip=0x00b08b; 	T(cl = ch;);	// 27562                  mov     cl, ch ;~ 01A2:B08B
loc_1b08d:
	// 6111 
cs=0x1a2;eip=0x00b08d; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 27565                  lods    word ptr es:[si] ;~ 01A2:B08D
cs=0x1a2;eip=0x00b08f; 	X(AND(*(raddr(ds,di)), al));	// 27566                  and     [di], al ;~ 01A2:B08F
cs=0x1a2;eip=0x00b091; 	X(AND(*(raddr(ds,di+1)), ah));	// 27567                  and     [di+1], ah ;~ 01A2:B091
cs=0x1a2;eip=0x00b094; 	T(ADD(di, 0x28));	// 27568                  add     di, 28h ; '(' ;~ 01A2:B094
cs=0x1a2;eip=0x00b097; 	T(DEC(cl));	// 27569                  dec     cl ;~ 01A2:B097
cs=0x1a2;eip=0x00b099; 	J(JNZ(loc_1b08d));	// 27570                  jnz     short loc_1B08D ;~ 01A2:B099
cs=0x1a2;eip=0x00b09b; 	T(di = bp;);	// 27571                  mov     di, bp ;~ 01A2:B09B
cs=0x1a2;eip=0x00b09d; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 27572                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:B09D
cs=0x1a2;eip=0x00b0a2; 	X(POP(ds));	// 27573                  pop     ds ;~ 01A2:B0A2
cs=0x1a2;eip=0x00b0a3; 	J(RETN(0));	// 27575                  retn ;~ 01A2:B0A3

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1b051: 	goto loc_1b051;
        case m2c::kloc_1b073: 	goto loc_1b073;
        case m2c::kloc_1b08d: 	goto loc_1b08d;
        case m2c::ksub_1b02d: 	goto sub_1b02d;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1b0a4(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1b0a4:
    _begin:
cs=0x1a2;eip=0x00b0a4; 	T(AND(cl, 7));	// 27584                  and     cl, 7 ;~ 01A2:B0A4
cs=0x1a2;eip=0x00b0a7; 	J(JZ(loc_1b0fe));	// 27585                  jz      short loc_1B0FE ;~ 01A2:B0A7
cs=0x1a2;eip=0x00b0a9; 	T(dx = 0x3C4;);	// 27586                  mov     dx, 3C4h ;~ 01A2:B0A9
cs=0x1a2;eip=0x00b0ac; 	T(ax = 0x0F02;);	// 27587                  mov     ax, 0F02h ;~ 01A2:B0AC
cs=0x1a2;eip=0x00b0af; 	S(OUT(dx, ax));	// 27588                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:B0AF
cs=0x1a2;eip=0x00b0b0; 	T(dx = 0x3CE;);	// 27590                  mov     dx, 3CEh ;~ 01A2:B0B0
cs=0x1a2;eip=0x00b0b3; 	T(ax = 0x805;);	// 27591                  mov     ax, 805h ;~ 01A2:B0B3
cs=0x1a2;eip=0x00b0b6; 	S(OUT(dx, ax));	// 27592                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B0B6
cs=0x1a2;eip=0x00b0b7; 	T(ax = 0x803;);	// 27594                  mov     ax, 803h ;~ 01A2:B0B7
cs=0x1a2;eip=0x00b0ba; 	S(OUT(dx, ax));	// 27595                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B0BA
cs=0x1a2;eip=0x00b0bb; 	T(ax = 7;);	// 27597                  mov     ax, 7 ;~ 01A2:B0BB
cs=0x1a2;eip=0x00b0be; 	S(OUT(dx, ax));	// 27598                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B0BE
cs=0x1a2;eip=0x00b0bf; 	X(PUSH(cx));	// 27601                  push    cx ;~ 01A2:B0BF
cs=0x1a2;eip=0x00b0c0; 	T(bp = di;);	// 27602                  mov     bp, di ;~ 01A2:B0C0
cs=0x1a2;eip=0x00b0c2; 	T(bx = 0x0FF00;);	// 27603                  mov     bx, 0FF00h ;~ 01A2:B0C2
cs=0x1a2;eip=0x00b0c5; 	T(SHR(bx, cl));	// 27604                  shr     bx, cl ;~ 01A2:B0C5
loc_1b0c7:
	// 6112 
cs=0x1a2;eip=0x00b0c7; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 27607                  lods    word ptr es:[si] ;~ 01A2:B0C7
cs=0x1a2;eip=0x00b0c9; 	T(ROR(ax, cl));	// 27608                  ror     ax, cl ;~ 01A2:B0C9
cs=0x1a2;eip=0x00b0cb; 	T(dl = al;);	// 27609                  mov     dl, al ;~ 01A2:B0CB
cs=0x1a2;eip=0x00b0cd; 	T(AND(al, bh));	// 27610                  and     al, bh ;~ 01A2:B0CD
cs=0x1a2;eip=0x00b0cf; 	T(AND(dl, bl));	// 27611                  and     dl, bl ;~ 01A2:B0CF
cs=0x1a2;eip=0x00b0d1; 	X(AND(*(raddr(ds,di)), al));	// 27612                  and     [di], al ;~ 01A2:B0D1
cs=0x1a2;eip=0x00b0d3; 	X(AND(*(raddr(ds,di+1)), ah));	// 27613                  and     [di+1], ah ;~ 01A2:B0D3
cs=0x1a2;eip=0x00b0d6; 	T(ADD(di, 2));	// 27614                  add     di, 2 ;~ 01A2:B0D6
cs=0x1a2;eip=0x00b0d9; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 27615                  lods    word ptr es:[si] ;~ 01A2:B0D9
cs=0x1a2;eip=0x00b0db; 	T(ROR(ax, cl));	// 27616                  ror     ax, cl ;~ 01A2:B0DB
cs=0x1a2;eip=0x00b0dd; 	T(dh = al;);	// 27617                  mov     dh, al ;~ 01A2:B0DD
cs=0x1a2;eip=0x00b0df; 	T(AND(al, bh));	// 27618                  and     al, bh ;~ 01A2:B0DF
cs=0x1a2;eip=0x00b0e1; 	T(AND(dh, bl));	// 27619                  and     dh, bl ;~ 01A2:B0E1
cs=0x1a2;eip=0x00b0e3; 	T(OR(al, dl));	// 27620                  or      al, dl ;~ 01A2:B0E3
cs=0x1a2;eip=0x00b0e5; 	X(AND(*(raddr(ds,di)), al));	// 27621                  and     [di], al ;~ 01A2:B0E5
cs=0x1a2;eip=0x00b0e7; 	X(AND(*(raddr(ds,di+1)), ah));	// 27622                  and     [di+1], ah ;~ 01A2:B0E7
cs=0x1a2;eip=0x00b0ea; 	X(AND(*(raddr(ds,di+2)), dh));	// 27623                  and     [di+2], dh ;~ 01A2:B0EA
cs=0x1a2;eip=0x00b0ed; 	T(ADD(di, 0x26));	// 27624                  add     di, 26h ; '&' ;~ 01A2:B0ED
cs=0x1a2;eip=0x00b0f0; 	T(DEC(ch));	// 27625                  dec     ch ;~ 01A2:B0F0
cs=0x1a2;eip=0x00b0f2; 	J(JNZ(loc_1b0c7));	// 27626                  jnz     short loc_1B0C7 ;~ 01A2:B0F2
cs=0x1a2;eip=0x00b0f4; 	X(POP(cx));	// 27627                  pop     cx ;~ 01A2:B0F4
cs=0x1a2;eip=0x00b0f5; 	T(di = bp;);	// 27628                  mov     di, bp ;~ 01A2:B0F5
cs=0x1a2;eip=0x00b0f7; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 27629                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:B0F7
cs=0x1a2;eip=0x00b0fc; 	X(POP(ds));	// 27630                  pop     ds ;~ 01A2:B0FC
cs=0x1a2;eip=0x00b0fd; 	J(RETN(0));	// 27632                  retn ;~ 01A2:B0FD
loc_1b0fe:
	// 6113 
cs=0x1a2;eip=0x00b0fe; 	T(dx = 0x3C4;);	// 27636                  mov     dx, 3C4h ;~ 01A2:B0FE
cs=0x1a2;eip=0x00b101; 	T(ax = 0x0F02;);	// 27637                  mov     ax, 0F02h ;~ 01A2:B101
cs=0x1a2;eip=0x00b104; 	S(OUT(dx, ax));	// 27638                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:B104
cs=0x1a2;eip=0x00b105; 	T(dx = 0x3CE;);	// 27640                  mov     dx, 3CEh ;~ 01A2:B105
cs=0x1a2;eip=0x00b108; 	T(ax = 0x805;);	// 27641                  mov     ax, 805h ;~ 01A2:B108
cs=0x1a2;eip=0x00b10b; 	S(OUT(dx, ax));	// 27642                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B10B
cs=0x1a2;eip=0x00b10c; 	T(ax = 0x803;);	// 27644                  mov     ax, 803h ;~ 01A2:B10C
cs=0x1a2;eip=0x00b10f; 	S(OUT(dx, ax));	// 27645                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B10F
cs=0x1a2;eip=0x00b110; 	T(ax = 7;);	// 27647                  mov     ax, 7 ;~ 01A2:B110
cs=0x1a2;eip=0x00b113; 	S(OUT(dx, ax));	// 27648                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B113
cs=0x1a2;eip=0x00b114; 	T(bp = di;);	// 27651                  mov     bp, di ;~ 01A2:B114
cs=0x1a2;eip=0x00b116; 	T(dl = ch;);	// 27652                  mov     dl, ch ;~ 01A2:B116
loc_1b118:
	// 6114 
cs=0x1a2;eip=0x00b118; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 27655                  lods    word ptr es:[si] ;~ 01A2:B118
cs=0x1a2;eip=0x00b11a; 	X(AND(*(raddr(ds,di)), al));	// 27656                  and     [di], al ;~ 01A2:B11A
cs=0x1a2;eip=0x00b11c; 	X(AND(*(raddr(ds,di+1)), ah));	// 27657                  and     [di+1], ah ;~ 01A2:B11C
cs=0x1a2;eip=0x00b11f; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 27658                  lods    word ptr es:[si] ;~ 01A2:B11F
cs=0x1a2;eip=0x00b121; 	X(AND(*(raddr(ds,di+2)), al));	// 27659                  and     [di+2], al ;~ 01A2:B121
cs=0x1a2;eip=0x00b124; 	X(AND(*(raddr(ds,di+3)), ah));	// 27660                  and     [di+3], ah ;~ 01A2:B124
cs=0x1a2;eip=0x00b127; 	T(ADD(di, 0x28));	// 27661                  add     di, 28h ; '(' ;~ 01A2:B127
cs=0x1a2;eip=0x00b12a; 	T(DEC(dl));	// 27662                  dec     dl ;~ 01A2:B12A
cs=0x1a2;eip=0x00b12c; 	J(JNZ(loc_1b118));	// 27663                  jnz     short loc_1B118 ;~ 01A2:B12C
cs=0x1a2;eip=0x00b12e; 	T(di = bp;);	// 27664                  mov     di, bp ;~ 01A2:B12E
cs=0x1a2;eip=0x00b130; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 27665                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:B130
cs=0x1a2;eip=0x00b135; 	X(POP(ds));	// 27666                  pop     ds ;~ 01A2:B135
cs=0x1a2;eip=0x00b136; 	J(RETN(0));	// 27668                  retn ;~ 01A2:B136

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1b0c7: 	goto loc_1b0c7;
        case m2c::kloc_1b0fe: 	goto loc_1b0fe;
        case m2c::kloc_1b118: 	goto loc_1b118;
        case m2c::ksub_1b0a4: 	goto sub_1b0a4;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_b137_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_b137_proc:
    _begin:
loc_1b137:
	// 6115 
cs=0x1a2;eip=0x00b137; 	T(AND(cl, 7));	// 27674                  and     cl, 7 ;~ 01A2:B137
cs=0x1a2;eip=0x00b13a; 	J(JZ(loc_1b1a5));	// 27675                  jz      short loc_1B1A5 ;~ 01A2:B13A
cs=0x1a2;eip=0x00b13c; 	T(dx = 0x3C4;);	// 27676                  mov     dx, 3C4h ;~ 01A2:B13C
cs=0x1a2;eip=0x00b13f; 	T(ax = 0x0F02;);	// 27677                  mov     ax, 0F02h ;~ 01A2:B13F
cs=0x1a2;eip=0x00b142; 	S(OUT(dx, ax));	// 27678                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:B142
cs=0x1a2;eip=0x00b143; 	T(dx = 0x3CE;);	// 27680                  mov     dx, 3CEh ;~ 01A2:B143
cs=0x1a2;eip=0x00b146; 	T(ax = 0x805;);	// 27681                  mov     ax, 805h ;~ 01A2:B146
cs=0x1a2;eip=0x00b149; 	S(OUT(dx, ax));	// 27682                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B149
cs=0x1a2;eip=0x00b14a; 	T(ax = 0x803;);	// 27684                  mov     ax, 803h ;~ 01A2:B14A
cs=0x1a2;eip=0x00b14d; 	S(OUT(dx, ax));	// 27685                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B14D
cs=0x1a2;eip=0x00b14e; 	T(ax = 7;);	// 27687                  mov     ax, 7 ;~ 01A2:B14E
cs=0x1a2;eip=0x00b151; 	S(OUT(dx, ax));	// 27688                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B151
cs=0x1a2;eip=0x00b152; 	X(PUSH(cx));	// 27691                  push    cx ;~ 01A2:B152
cs=0x1a2;eip=0x00b153; 	T(bp = di;);	// 27692                  mov     bp, di ;~ 01A2:B153
cs=0x1a2;eip=0x00b155; 	T(bx = 0x0FF00;);	// 27693                  mov     bx, 0FF00h ;~ 01A2:B155
cs=0x1a2;eip=0x00b158; 	T(SHR(bx, cl));	// 27694                  shr     bx, cl ;~ 01A2:B158
loc_1b15a:
	// 6116 
cs=0x1a2;eip=0x00b15a; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 27697                  lods    word ptr es:[si] ;~ 01A2:B15A
cs=0x1a2;eip=0x00b15c; 	T(ROR(ax, cl));	// 27698                  ror     ax, cl ;~ 01A2:B15C
cs=0x1a2;eip=0x00b15e; 	T(dl = al;);	// 27699                  mov     dl, al ;~ 01A2:B15E
cs=0x1a2;eip=0x00b160; 	T(AND(al, bh));	// 27700                  and     al, bh ;~ 01A2:B160
cs=0x1a2;eip=0x00b162; 	T(AND(dl, bl));	// 27701                  and     dl, bl ;~ 01A2:B162
cs=0x1a2;eip=0x00b164; 	X(AND(*(raddr(ds,di)), al));	// 27702                  and     [di], al ;~ 01A2:B164
cs=0x1a2;eip=0x00b166; 	X(AND(*(raddr(ds,di+1)), ah));	// 27703                  and     [di+1], ah ;~ 01A2:B166
cs=0x1a2;eip=0x00b169; 	T(ADD(di, 2));	// 27704                  add     di, 2 ;~ 01A2:B169
cs=0x1a2;eip=0x00b16c; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 27705                  lods    word ptr es:[si] ;~ 01A2:B16C
cs=0x1a2;eip=0x00b16e; 	T(ROR(ax, cl));	// 27706                  ror     ax, cl ;~ 01A2:B16E
cs=0x1a2;eip=0x00b170; 	T(dh = al;);	// 27707                  mov     dh, al ;~ 01A2:B170
cs=0x1a2;eip=0x00b172; 	T(AND(al, bh));	// 27708                  and     al, bh ;~ 01A2:B172
cs=0x1a2;eip=0x00b174; 	T(AND(dh, bl));	// 27709                  and     dh, bl ;~ 01A2:B174
cs=0x1a2;eip=0x00b176; 	T(OR(al, dl));	// 27710                  or      al, dl ;~ 01A2:B176
cs=0x1a2;eip=0x00b178; 	X(AND(*(raddr(ds,di)), al));	// 27711                  and     [di], al ;~ 01A2:B178
cs=0x1a2;eip=0x00b17a; 	X(AND(*(raddr(ds,di+1)), ah));	// 27712                  and     [di+1], ah ;~ 01A2:B17A
cs=0x1a2;eip=0x00b17d; 	T(ADD(di, 2));	// 27713                  add     di, 2 ;~ 01A2:B17D
cs=0x1a2;eip=0x00b180; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 27714                  lods    word ptr es:[si] ;~ 01A2:B180
cs=0x1a2;eip=0x00b182; 	T(ROR(ax, cl));	// 27715                  ror     ax, cl ;~ 01A2:B182
cs=0x1a2;eip=0x00b184; 	T(dl = al;);	// 27716                  mov     dl, al ;~ 01A2:B184
cs=0x1a2;eip=0x00b186; 	T(AND(al, bh));	// 27717                  and     al, bh ;~ 01A2:B186
cs=0x1a2;eip=0x00b188; 	T(AND(dl, bl));	// 27718                  and     dl, bl ;~ 01A2:B188
cs=0x1a2;eip=0x00b18a; 	T(OR(al, dh));	// 27719                  or      al, dh ;~ 01A2:B18A
cs=0x1a2;eip=0x00b18c; 	X(AND(*(raddr(ds,di)), al));	// 27720                  and     [di], al ;~ 01A2:B18C
cs=0x1a2;eip=0x00b18e; 	X(AND(*(raddr(ds,di+1)), ah));	// 27721                  and     [di+1], ah ;~ 01A2:B18E
cs=0x1a2;eip=0x00b191; 	X(AND(*(raddr(ds,di+2)), dl));	// 27722                  and     [di+2], dl ;~ 01A2:B191
cs=0x1a2;eip=0x00b194; 	T(ADD(di, 0x24));	// 27723                  add     di, 24h ; '$' ;~ 01A2:B194
cs=0x1a2;eip=0x00b197; 	T(DEC(ch));	// 27724                  dec     ch ;~ 01A2:B197
cs=0x1a2;eip=0x00b199; 	J(JNZ(loc_1b15a));	// 27725                  jnz     short loc_1B15A ;~ 01A2:B199
cs=0x1a2;eip=0x00b19b; 	X(POP(cx));	// 27726                  pop     cx ;~ 01A2:B19B
cs=0x1a2;eip=0x00b19c; 	T(di = bp;);	// 27727                  mov     di, bp ;~ 01A2:B19C
cs=0x1a2;eip=0x00b19e; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 27728                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:B19E
cs=0x1a2;eip=0x00b1a3; 	X(POP(ds));	// 27729                  pop     ds ;~ 01A2:B1A3
cs=0x1a2;eip=0x00b1a4; 	J(RETN(0));	// 27730                  retn ;~ 01A2:B1A4
loc_1b1a5:
	// 6117 
cs=0x1a2;eip=0x00b1a5; 	T(dx = 0x3C4;);	// 27734                  mov     dx, 3C4h ;~ 01A2:B1A5
cs=0x1a2;eip=0x00b1a8; 	T(ax = 0x0F02;);	// 27735                  mov     ax, 0F02h ;~ 01A2:B1A8
cs=0x1a2;eip=0x00b1ab; 	S(OUT(dx, ax));	// 27736                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:B1AB
cs=0x1a2;eip=0x00b1ac; 	T(dx = 0x3CE;);	// 27738                  mov     dx, 3CEh ;~ 01A2:B1AC
cs=0x1a2;eip=0x00b1af; 	T(ax = 0x805;);	// 27739                  mov     ax, 805h ;~ 01A2:B1AF
cs=0x1a2;eip=0x00b1b2; 	S(OUT(dx, ax));	// 27740                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B1B2
cs=0x1a2;eip=0x00b1b3; 	T(ax = 0x803;);	// 27742                  mov     ax, 803h ;~ 01A2:B1B3
cs=0x1a2;eip=0x00b1b6; 	S(OUT(dx, ax));	// 27743                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B1B6
cs=0x1a2;eip=0x00b1b7; 	T(ax = 7;);	// 27745                  mov     ax, 7 ;~ 01A2:B1B7
cs=0x1a2;eip=0x00b1ba; 	S(OUT(dx, ax));	// 27746                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B1BA
cs=0x1a2;eip=0x00b1bb; 	T(bp = di;);	// 27749                  mov     bp, di ;~ 01A2:B1BB
cs=0x1a2;eip=0x00b1bd; 	T(cl = ch;);	// 27750                  mov     cl, ch ;~ 01A2:B1BD
loc_1b1bf:
	// 6118 
cs=0x1a2;eip=0x00b1bf; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 27753                  lods    word ptr es:[si] ;~ 01A2:B1BF
cs=0x1a2;eip=0x00b1c1; 	X(AND(*(raddr(ds,di)), al));	// 27754                  and     [di], al ;~ 01A2:B1C1
cs=0x1a2;eip=0x00b1c3; 	X(AND(*(raddr(ds,di+1)), ah));	// 27755                  and     [di+1], ah ;~ 01A2:B1C3
cs=0x1a2;eip=0x00b1c6; 	T(ADD(di, 2));	// 27756                  add     di, 2 ;~ 01A2:B1C6
cs=0x1a2;eip=0x00b1c9; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 27757                  lods    word ptr es:[si] ;~ 01A2:B1C9
cs=0x1a2;eip=0x00b1cb; 	X(AND(*(raddr(ds,di)), al));	// 27758                  and     [di], al ;~ 01A2:B1CB
cs=0x1a2;eip=0x00b1cd; 	X(AND(*(raddr(ds,di+1)), ah));	// 27759                  and     [di+1], ah ;~ 01A2:B1CD
cs=0x1a2;eip=0x00b1d0; 	T(ADD(di, 2));	// 27760                  add     di, 2 ;~ 01A2:B1D0
cs=0x1a2;eip=0x00b1d3; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 27761                  lods    word ptr es:[si] ;~ 01A2:B1D3
cs=0x1a2;eip=0x00b1d5; 	X(AND(*(raddr(ds,di)), al));	// 27762                  and     [di], al ;~ 01A2:B1D5
cs=0x1a2;eip=0x00b1d7; 	X(AND(*(raddr(ds,di+1)), ah));	// 27763                  and     [di+1], ah ;~ 01A2:B1D7
cs=0x1a2;eip=0x00b1da; 	T(ADD(di, 0x24));	// 27764                  add     di, 24h ; '$' ;~ 01A2:B1DA
cs=0x1a2;eip=0x00b1dd; 	T(DEC(cl));	// 27765                  dec     cl ;~ 01A2:B1DD
cs=0x1a2;eip=0x00b1df; 	J(JNZ(loc_1b1bf));	// 27766                  jnz     short loc_1B1BF ;~ 01A2:B1DF
cs=0x1a2;eip=0x00b1e1; 	T(di = bp;);	// 27767                  mov     di, bp ;~ 01A2:B1E1
cs=0x1a2;eip=0x00b1e3; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 27768                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:B1E3
cs=0x1a2;eip=0x00b1e8; 	X(POP(ds));	// 27769                  pop     ds ;~ 01A2:B1E8
cs=0x1a2;eip=0x00b1e9; 	J(RETN(0));	// 27770                  retn ;~ 01A2:B1E9
loc_1b1ea:
	// 6119 
cs=0x1a2;eip=0x00b1ea; 	T(al = dl;);	// 27775                  mov     al, dl ;~ 01A2:B1EA
cs=0x1a2;eip=0x00b1ec; 	T(SHR(al, 1));	// 27776                  shr     al, 1 ;~ 01A2:B1EC
cs=0x1a2;eip=0x00b1ee; 	X(byte_6fb92 = al;);	// 27777                  mov     ss:byte_6FB92, al ;~ 01A2:B1EE
cs=0x1a2;eip=0x00b1f2; 	T(ax = 0x28;);	// 27778                  mov     ax, 28h ; '(' ;~ 01A2:B1F2
cs=0x1a2;eip=0x00b1f5; 	T(SUB(ax, dx));	// 27779                  sub     ax, dx ;~ 01A2:B1F5
cs=0x1a2;eip=0x00b1f7; 	X(*(dw*)(&unk_6fb94) = ax;);	// 27780                  mov     word ptr ss:unk_6FB94, ax ;~ 01A2:B1F7
cs=0x1a2;eip=0x00b1fb; 	T(AND(cl, 7));	// 27781                  and     cl, 7 ;~ 01A2:B1FB
cs=0x1a2;eip=0x00b1fe; 	J(JNZ(loc_1b203));	// 27782                  jnz     short loc_1B203 ;~ 01A2:B1FE
cs=0x1a2;eip=0x00b200; 	J(JMP(loc_1b281));	// 27783                  jmp     loc_1B281 ;~ 01A2:B200
loc_1b203:
	// 6120 
cs=0x1a2;eip=0x00b203; 	T(dx = 0x3C4;);	// 27787                  mov     dx, 3C4h ;~ 01A2:B203
cs=0x1a2;eip=0x00b206; 	T(ax = 0x0F02;);	// 27788                  mov     ax, 0F02h ;~ 01A2:B206
cs=0x1a2;eip=0x00b209; 	S(OUT(dx, ax));	// 27789                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:B209
cs=0x1a2;eip=0x00b20a; 	T(dx = 0x3CE;);	// 27791                  mov     dx, 3CEh ;~ 01A2:B20A
cs=0x1a2;eip=0x00b20d; 	T(ax = 0x805;);	// 27792                  mov     ax, 805h ;~ 01A2:B20D
cs=0x1a2;eip=0x00b210; 	S(OUT(dx, ax));	// 27793                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B210
cs=0x1a2;eip=0x00b211; 	T(ax = 0x803;);	// 27795                  mov     ax, 803h ;~ 01A2:B211
cs=0x1a2;eip=0x00b214; 	S(OUT(dx, ax));	// 27796                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B214
cs=0x1a2;eip=0x00b215; 	T(ax = 7;);	// 27798                  mov     ax, 7 ;~ 01A2:B215
cs=0x1a2;eip=0x00b218; 	S(OUT(dx, ax));	// 27799                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B218
cs=0x1a2;eip=0x00b219; 	T(bp = di;);	// 27802                  mov     bp, di ;~ 01A2:B219
cs=0x1a2;eip=0x00b21b; 	T(bl = ch;);	// 27803                  mov     bl, ch ;~ 01A2:B21B
loc_1b21d:
	// 6121 
cs=0x1a2;eip=0x00b21d; 	T(XOR(bh, bh));	// 27806                  xor     bh, bh ;~ 01A2:B21D
cs=0x1a2;eip=0x00b21f; 	T(al = byte_6fb92;);	// 27807                  mov     al, ss:byte_6FB92 ;~ 01A2:B21F
cs=0x1a2;eip=0x00b223; 	X(byte_6fb93 = al;);	// 27808                  mov     ss:byte_6FB93, al ;~ 01A2:B223
loc_1b227:
	// 6122 
cs=0x1a2;eip=0x00b227; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 27811                  lods    word ptr es:[si] ;~ 01A2:B227
cs=0x1a2;eip=0x00b229; 	T(XCHG(al, ah));	// 27812                  xchg    al, ah ;~ 01A2:B229
cs=0x1a2;eip=0x00b22b; 	T(XOR(dl, dl));	// 27813                  xor     dl, dl ;~ 01A2:B22B
cs=0x1a2;eip=0x00b22d; 	T(dh = cl;);	// 27814                  mov     dh, cl ;~ 01A2:B22D
loc_1b22f:
	// 6123 
cs=0x1a2;eip=0x00b22f; 	T(SHR(ax, 1));	// 27817                  shr     ax, 1 ;~ 01A2:B22F
cs=0x1a2;eip=0x00b231; 	T(RCR(dl, 1));	// 27818                  rcr     dl, 1 ;~ 01A2:B231
cs=0x1a2;eip=0x00b233; 	T(DEC(dh));	// 27819                  dec     dh ;~ 01A2:B233
cs=0x1a2;eip=0x00b235; 	J(JNZ(loc_1b22f));	// 27820                  jnz     short loc_1B22F ;~ 01A2:B235
cs=0x1a2;eip=0x00b237; 	T(OR(ah, bh));	// 27821                  or      ah, bh ;~ 01A2:B237
cs=0x1a2;eip=0x00b239; 	X(AND(*(raddr(ds,di)), ah));	// 27822                  and     [di], ah ;~ 01A2:B239
cs=0x1a2;eip=0x00b23b; 	X(AND(*(raddr(ds,di+1)), al));	// 27823                  and     [di+1], al ;~ 01A2:B23B
cs=0x1a2;eip=0x00b23e; 	T(ADD(di, 2));	// 27824                  add     di, 2 ;~ 01A2:B23E
cs=0x1a2;eip=0x00b241; 	X(DEC(byte_6fb93));	// 27825                  dec     ss:byte_6FB93 ;~ 01A2:B241
cs=0x1a2;eip=0x00b246; 	J(JNZ(loc_1b24c));	// 27826                  jnz     short loc_1B24C ;~ 01A2:B246
cs=0x1a2;eip=0x00b248; 	X(AND(*(raddr(ds,di)), dl));	// 27827                  and     [di], dl ;~ 01A2:B248
cs=0x1a2;eip=0x00b24a; 	J(JMP(loc_1b26f));	// 27828                  jmp     short loc_1B26F ;~ 01A2:B24A
loc_1b24c:
	// 6124 
cs=0x1a2;eip=0x00b24c; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 27832                  lods    word ptr es:[si] ;~ 01A2:B24C
cs=0x1a2;eip=0x00b24e; 	T(XCHG(al, ah));	// 27833                  xchg    al, ah ;~ 01A2:B24E
cs=0x1a2;eip=0x00b250; 	T(XOR(bh, bh));	// 27834                  xor     bh, bh ;~ 01A2:B250
cs=0x1a2;eip=0x00b252; 	T(dh = cl;);	// 27835                  mov     dh, cl ;~ 01A2:B252
loc_1b254:
	// 6125 
cs=0x1a2;eip=0x00b254; 	T(SHR(ax, 1));	// 27838                  shr     ax, 1 ;~ 01A2:B254
cs=0x1a2;eip=0x00b256; 	T(RCR(bh, 1));	// 27839                  rcr     bh, 1 ;~ 01A2:B256
cs=0x1a2;eip=0x00b258; 	T(DEC(dh));	// 27840                  dec     dh ;~ 01A2:B258
cs=0x1a2;eip=0x00b25a; 	J(JNZ(loc_1b254));	// 27841                  jnz     short loc_1B254 ;~ 01A2:B25A
cs=0x1a2;eip=0x00b25c; 	T(OR(ah, dl));	// 27842                  or      ah, dl ;~ 01A2:B25C
cs=0x1a2;eip=0x00b25e; 	X(AND(*(raddr(ds,di)), ah));	// 27843                  and     [di], ah ;~ 01A2:B25E
cs=0x1a2;eip=0x00b260; 	X(AND(*(raddr(ds,di+1)), al));	// 27844                  and     [di+1], al ;~ 01A2:B260
cs=0x1a2;eip=0x00b263; 	T(ADD(di, 2));	// 27845                  add     di, 2 ;~ 01A2:B263
cs=0x1a2;eip=0x00b266; 	X(DEC(byte_6fb93));	// 27846                  dec     ss:byte_6FB93 ;~ 01A2:B266
cs=0x1a2;eip=0x00b26b; 	J(JNZ(loc_1b227));	// 27847                  jnz     short loc_1B227 ;~ 01A2:B26B
cs=0x1a2;eip=0x00b26d; 	X(AND(*(raddr(ds,di)), bh));	// 27848                  and     [di], bh ;~ 01A2:B26D
loc_1b26f:
	// 6126 
cs=0x1a2;eip=0x00b26f; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 27851                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:B26F
cs=0x1a2;eip=0x00b274; 	T(DEC(bl));	// 27852                  dec     bl ;~ 01A2:B274
cs=0x1a2;eip=0x00b276; 	J(JNZ(loc_1b21d));	// 27853                  jnz     short loc_1B21D ;~ 01A2:B276
cs=0x1a2;eip=0x00b278; 	T(di = bp;);	// 27854                  mov     di, bp ;~ 01A2:B278
cs=0x1a2;eip=0x00b27a; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 27855                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:B27A
cs=0x1a2;eip=0x00b27f; 	X(POP(ds));	// 27856                  pop     ds ;~ 01A2:B27F
cs=0x1a2;eip=0x00b280; 	J(RETN(0));	// 27857                  retn ;~ 01A2:B280
loc_1b281:
	// 6127 
cs=0x1a2;eip=0x00b281; 	T(dx = 0x3C4;);	// 27861                  mov     dx, 3C4h ;~ 01A2:B281
cs=0x1a2;eip=0x00b284; 	T(ax = 0x0F02;);	// 27862                  mov     ax, 0F02h ;~ 01A2:B284
cs=0x1a2;eip=0x00b287; 	S(OUT(dx, ax));	// 27863                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:B287
cs=0x1a2;eip=0x00b288; 	T(dx = 0x3CE;);	// 27865                  mov     dx, 3CEh ;~ 01A2:B288
cs=0x1a2;eip=0x00b28b; 	T(ax = 0x805;);	// 27866                  mov     ax, 805h ;~ 01A2:B28B
cs=0x1a2;eip=0x00b28e; 	S(OUT(dx, ax));	// 27867                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B28E
cs=0x1a2;eip=0x00b28f; 	T(ax = 0x803;);	// 27869                  mov     ax, 803h ;~ 01A2:B28F
cs=0x1a2;eip=0x00b292; 	S(OUT(dx, ax));	// 27870                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B292
cs=0x1a2;eip=0x00b293; 	T(ax = 7;);	// 27872                  mov     ax, 7 ;~ 01A2:B293
cs=0x1a2;eip=0x00b296; 	S(OUT(dx, ax));	// 27873                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B296
cs=0x1a2;eip=0x00b297; 	T(bp = di;);	// 27876                  mov     bp, di ;~ 01A2:B297
cs=0x1a2;eip=0x00b299; 	T(dl = ch;);	// 27877                  mov     dl, ch ;~ 01A2:B299
loc_1b29b:
	// 6128 
cs=0x1a2;eip=0x00b29b; 	T(al = byte_6fb92;);	// 27880                  mov     al, ss:byte_6FB92 ;~ 01A2:B29B
cs=0x1a2;eip=0x00b29f; 	X(byte_6fb93 = al;);	// 27881                  mov     ss:byte_6FB93, al ;~ 01A2:B29F
loc_1b2a3:
	// 6129 
cs=0x1a2;eip=0x00b2a3; 	X(LODS(*(dw*)(raddr(es,si)),si,2));	// 27884                  lods    word ptr es:[si] ;~ 01A2:B2A3
cs=0x1a2;eip=0x00b2a5; 	X(AND(*(raddr(ds,di)), al));	// 27885                  and     [di], al ;~ 01A2:B2A5
cs=0x1a2;eip=0x00b2a7; 	X(AND(*(raddr(ds,di+1)), ah));	// 27886                  and     [di+1], ah ;~ 01A2:B2A7
cs=0x1a2;eip=0x00b2aa; 	T(ADD(di, 2));	// 27887                  add     di, 2 ;~ 01A2:B2AA
cs=0x1a2;eip=0x00b2ad; 	X(DEC(byte_6fb93));	// 27888                  dec     ss:byte_6FB93 ;~ 01A2:B2AD
cs=0x1a2;eip=0x00b2b2; 	J(JNZ(loc_1b2a3));	// 27889                  jnz     short loc_1B2A3 ;~ 01A2:B2B2
cs=0x1a2;eip=0x00b2b4; 	T(ADD(di, *(dw*)(&unk_6fb94)));	// 27890                  add     di, word ptr ss:unk_6FB94 ;~ 01A2:B2B4
cs=0x1a2;eip=0x00b2b9; 	T(DEC(dl));	// 27891                  dec     dl ;~ 01A2:B2B9
cs=0x1a2;eip=0x00b2bb; 	J(JNZ(loc_1b29b));	// 27892                  jnz     short loc_1B29B ;~ 01A2:B2BB
cs=0x1a2;eip=0x00b2bd; 	T(di = bp;);	// 27893                  mov     di, bp ;~ 01A2:B2BD
cs=0x1a2;eip=0x00b2bf; 	T(ADD(si, *(dw*)(&unk_6fb96)));	// 27894                  add     si, word ptr ss:unk_6FB96 ;~ 01A2:B2BF
cs=0x1a2;eip=0x00b2c4; 	X(POP(ds));	// 27895                  pop     ds ;~ 01A2:B2C4
cs=0x1a2;eip=0x00b2c5; 	J(RETN(0));	// 27896                  retn ;~ 01A2:B2C5

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1b15a: 	goto loc_1b15a;
        case m2c::kloc_1b1a5: 	goto loc_1b1a5;
        case m2c::kloc_1b1bf: 	goto loc_1b1bf;
        case m2c::kloc_1b1ea: 	goto loc_1b1ea;
        case m2c::kloc_1b203: 	goto loc_1b203;
        case m2c::kloc_1b21d: 	goto loc_1b21d;
        case m2c::kloc_1b227: 	goto loc_1b227;
        case m2c::kloc_1b22f: 	goto loc_1b22f;
        case m2c::kloc_1b24c: 	goto loc_1b24c;
        case m2c::kloc_1b254: 	goto loc_1b254;
        case m2c::kloc_1b26f: 	goto loc_1b26f;
        case m2c::kloc_1b281: 	goto loc_1b281;
        case m2c::kloc_1b29b: 	goto loc_1b29b;
        case m2c::kloc_1b2a3: 	goto loc_1b2a3;
        case m2c::kseg000_b137_proc: 	goto seg000_b137_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1b2c6(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1b2c6:
    _begin:
cs=0x1a2;eip=0x00b2c6; 	X(PUSH(es));	// 27903                  push    es ;~ 01A2:B2C6
cs=0x1a2;eip=0x00b2c7; 	X(PUSH(ds));	// 27904                  push    ds ;~ 01A2:B2C7
cs=0x1a2;eip=0x00b2c8; 	T(ax = ds;);	// 27905                  mov     ax, ds ;~ 01A2:B2C8
cs=0x1a2;eip=0x00b2ca; 	T(es = ax;);	// 27906                  mov     es, ax ;~ 01A2:B2CA
cs=0x1a2;eip=0x00b2cc; 	T(ax = ss;);	// 27907                  mov     ax, ss ;~ 01A2:B2CC
cs=0x1a2;eip=0x00b2ce; 	T(ds = ax;);	// 27908                  mov     ds, ax ;~ 01A2:B2CE
cs=0x1a2;eip=0x00b2d0; 	T(dx = 0x4C73;);	// 27910                  mov     dx, 4C73h ;~ 01A2:B2D0
cs=0x1a2;eip=0x00b2d3; 	T(ax = 0x3D00;);	// 27911                  mov     ax, 3D00h ;~ 01A2:B2D3
cs=0x1a2;eip=0x00b2d6; 	S(_INT(0x21));	// 27912                  int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE ;~ 01A2:B2D6
cs=0x1a2;eip=0x00b2d8; 	X(POP(ds));	// 27916                  pop     ds ;~ 01A2:B2D8
cs=0x1a2;eip=0x00b2d9; 	X(POP(es));	// 27918                  pop     es ;~ 01A2:B2D9
cs=0x1a2;eip=0x00b2da; 	J(JNC(loc_1b2df));	// 27919                  jnb     short loc_1B2DF ;~ 01A2:B2DA
cs=0x1a2;eip=0x00b2dc; 	J(JMP(loc_1b40e));	// 27920                  jmp     loc_1B40E ;~ 01A2:B2DC
loc_1b2df:
	// 6130 
cs=0x1a2;eip=0x00b2df; 	T(dx = 0x7B0;);	// 27924                  mov     dx, 7B0h ;~ 01A2:B2DF
cs=0x1a2;eip=0x00b2e2; 	T(cx = 0x0C8;);	// 27925                  mov     cx, 0C8h ;~ 01A2:B2E2
cs=0x1a2;eip=0x00b2e5; 	T(bx = ax;);	// 27926                  mov     bx, ax ;~ 01A2:B2E5
cs=0x1a2;eip=0x00b2e7; 	X(PUSH(bx));	// 27927                  push    bx ;~ 01A2:B2E7
cs=0x1a2;eip=0x00b2e8; 	T(ah = 0x3F;);	// 27928                  mov     ah, 3Fh ;~ 01A2:B2E8
cs=0x1a2;eip=0x00b2ea; 	S(_INT(0x21));	// 27929                  int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE ;~ 01A2:B2EA
cs=0x1a2;eip=0x00b2ec; 	X(POP(bx));	// 27932                  pop     bx ;~ 01A2:B2EC
cs=0x1a2;eip=0x00b2ed; 	J(JNC(loc_1b2f2));	// 27933                  jnb     short loc_1B2F2 ;~ 01A2:B2ED
cs=0x1a2;eip=0x00b2ef; 	J(JMP(loc_1b40e));	// 27934                  jmp     loc_1B40E ;~ 01A2:B2EF
loc_1b2f2:
	// 6131 
cs=0x1a2;eip=0x00b2f2; 	X(PUSH(ax));	// 27938                  push    ax ;~ 01A2:B2F2
cs=0x1a2;eip=0x00b2f3; 	T(ah = 0x3E;);	// 27939                  mov     ah, 3Eh ;~ 01A2:B2F3
cs=0x1a2;eip=0x00b2f5; 	S(_INT(0x21));	// 27940                  int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE ;~ 01A2:B2F5
cs=0x1a2;eip=0x00b2f7; 	X(POP(bx));	// 27942                  pop     bx ;~ 01A2:B2F7
cs=0x1a2;eip=0x00b2f8; 	T(si = 0x7B0;);	// 27943                  mov     si, 7B0h ;~ 01A2:B2F8
cs=0x1a2;eip=0x00b2fb; 	X(MOV(*(dw*)(raddr(ds,bx+si)), 0));	// 27944                  mov     word ptr [bx+si], 0 ;~ 01A2:B2FB
cs=0x1a2;eip=0x00b2ff; 	T(MOV(al, *(raddr(ds,si))));	// 27945                  mov     al, [si] ;~ 01A2:B2FF
cs=0x1a2;eip=0x00b301; 	X(byte_70cb0 = al;);	// 27946                  mov     ss:byte_70CB0, al ;~ 01A2:B301
cs=0x1a2;eip=0x00b305; 	J(CALL(sub_1b416,0));	// 27947                  call    sub_1B416 ;~ 01A2:B305
cs=0x1a2;eip=0x00b308; 	T(MOV(al, *(raddr(ds,si))));	// 27948                  mov     al, [si] ;~ 01A2:B308
cs=0x1a2;eip=0x00b30a; 	X(byte_1f91b = al;);	// 27949                  mov     ds:byte_1F91B, al ;~ 01A2:B30A
cs=0x1a2;eip=0x00b30d; 	J(CALL(sub_1b416,0));	// 27950                  call    sub_1B416 ;~ 01A2:B30D
cs=0x1a2;eip=0x00b310; 	X(byte_1f8e5 = 2;);	// 27951                  mov     ds:byte_1F8E5, 2 ;~ 01A2:B310
cs=0x1a2;eip=0x00b315; 	T(MOV(al, *(raddr(ds,si))));	// 27952                  mov     al, [si] ;~ 01A2:B315
cs=0x1a2;eip=0x00b317; 	T(CMP(al, 0x4A));	// 27953                  cmp     al, 4Ah ; 'J' ;~ 01A2:B317
cs=0x1a2;eip=0x00b319; 	J(JNZ(loc_1b320));	// 27954                  jnz     short loc_1B320 ;~ 01A2:B319
cs=0x1a2;eip=0x00b31b; 	X(byte_1f8e5 = 3;);	// 27955                  mov     ds:byte_1F8E5, 3 ;~ 01A2:B31B
loc_1b320:
	// 6132 
cs=0x1a2;eip=0x00b320; 	J(CALL(sub_1b416,0));	// 27958                  call    sub_1B416 ;~ 01A2:B320
cs=0x1a2;eip=0x00b323; 	T(MOV(al, *(raddr(ds,si))));	// 27959                  mov     al, [si] ;~ 01A2:B323
cs=0x1a2;eip=0x00b325; 	X(byte_70d0f = al;);	// 27960                  mov     ss:byte_70D0F, al ;~ 01A2:B325
cs=0x1a2;eip=0x00b329; 	X(byte_70d1f = al;);	// 27961                  mov     ss:byte_70D1F, al ;~ 01A2:B329
cs=0x1a2;eip=0x00b32d; 	X(byte_70d2f = al;);	// 27962                  mov     ss:byte_70D2F, al ;~ 01A2:B32D
cs=0x1a2;eip=0x00b331; 	X(byte_70d3f = al;);	// 27963                  mov     ss:byte_70D3F, al ;~ 01A2:B331
cs=0x1a2;eip=0x00b335; 	X(byte_70d59 = al;);	// 27964                  mov     ss:byte_70D59, al ;~ 01A2:B335
cs=0x1a2;eip=0x00b339; 	X(byte_70d69 = al;);	// 27965                  mov     ss:byte_70D69, al ;~ 01A2:B339
cs=0x1a2;eip=0x00b33d; 	X(byte_70d79 = al;);	// 27966                  mov     ss:byte_70D79, al ;~ 01A2:B33D
cs=0x1a2;eip=0x00b341; 	T(bp = 0x19F;);	// 27967                  mov     bp, 19Fh ;~ 01A2:B341
cs=0x1a2;eip=0x00b344; 	T(cx = 9;);	// 27968                  mov     cx, 9 ;~ 01A2:B344
cs=0x1a2;eip=0x00b347; 	J(CALL(sub_1b416,0));	// 27969                  call    sub_1B416 ;~ 01A2:B347
loc_1b34a:
	// 6133 
cs=0x1a2;eip=0x00b34a; 	J(CALL(sub_1b416,0));	// 27972                  call    sub_1B416 ;~ 01A2:B34A
cs=0x1a2;eip=0x00b34d; 	T(di = 0x128E;);	// 27973                  mov     di, 128Eh ;~ 01A2:B34D
cs=0x1a2;eip=0x00b350; 	T(LODSB);	// 27974                  lodsb ;~ 01A2:B350
cs=0x1a2;eip=0x00b351; 	T(XOR(ah, ah));	// 27975                  xor     ah, ah ;~ 01A2:B351
cs=0x1a2;eip=0x00b353; 	T(SUB(al, 0x30));	// 27976                  sub     al, 30h ; '0' ;~ 01A2:B353
cs=0x1a2;eip=0x00b355; 	X(PUSH(cx));	// 27977                  push    cx ;~ 01A2:B355
cs=0x1a2;eip=0x00b356; 	T(cx = 0x2710;);	// 27978                  mov     cx, 2710h ;~ 01A2:B356
cs=0x1a2;eip=0x00b359; 	T(MUL1_2(cx));	// 27979                  mul     cx ;~ 01A2:B359
cs=0x1a2;eip=0x00b35b; 	X(word_1f72c = ax;);	// 27980                  mov     ds:word_1F72C, ax ;~ 01A2:B35B
cs=0x1a2;eip=0x00b35e; 	T(LODSB);	// 27981                  lodsb ;~ 01A2:B35E
cs=0x1a2;eip=0x00b35f; 	T(XOR(ah, ah));	// 27982                  xor     ah, ah ;~ 01A2:B35F
cs=0x1a2;eip=0x00b361; 	T(SUB(al, 0x30));	// 27983                  sub     al, 30h ; '0' ;~ 01A2:B361
cs=0x1a2;eip=0x00b363; 	T(cx = 0x3E8;);	// 27984                  mov     cx, 3E8h ;~ 01A2:B363
cs=0x1a2;eip=0x00b366; 	T(MUL1_2(cx));	// 27985                  mul     cx ;~ 01A2:B366
cs=0x1a2;eip=0x00b368; 	X(ADD(word_1f72c, ax));	// 27986                  add     ds:word_1F72C, ax ;~ 01A2:B368
cs=0x1a2;eip=0x00b36c; 	X(POP(cx));	// 27987                  pop     cx ;~ 01A2:B36C
cs=0x1a2;eip=0x00b36d; 	T(LODSB);	// 27988                  lodsb ;~ 01A2:B36D
cs=0x1a2;eip=0x00b36e; 	T(LODSB);	// 27989                  lodsb ;~ 01A2:B36E
cs=0x1a2;eip=0x00b36f; 	T(XOR(ah, ah));	// 27990                  xor     ah, ah ;~ 01A2:B36F
cs=0x1a2;eip=0x00b371; 	T(SUB(al, 0x30));	// 27991                  sub     al, 30h ; '0' ;~ 01A2:B371
cs=0x1a2;eip=0x00b373; 	T(ch = 0x64;);	// 27992                  mov     ch, 64h ; 'd' ;~ 01A2:B373
cs=0x1a2;eip=0x00b375; 	T(MUL1_1(ch));	// 27993                  mul     ch ;~ 01A2:B375
cs=0x1a2;eip=0x00b377; 	X(ADD(word_1f72c, ax));	// 27994                  add     ds:word_1F72C, ax ;~ 01A2:B377
cs=0x1a2;eip=0x00b37b; 	T(LODSB);	// 27995                  lodsb ;~ 01A2:B37B
cs=0x1a2;eip=0x00b37c; 	T(XOR(ah, ah));	// 27996                  xor     ah, ah ;~ 01A2:B37C
cs=0x1a2;eip=0x00b37e; 	T(SUB(al, 0x30));	// 27997                  sub     al, 30h ; '0' ;~ 01A2:B37E
cs=0x1a2;eip=0x00b380; 	T(ch = 0x0A;);	// 27998                  mov     ch, 0Ah ;~ 01A2:B380
cs=0x1a2;eip=0x00b382; 	T(MUL1_1(ch));	// 27999                  mul     ch ;~ 01A2:B382
cs=0x1a2;eip=0x00b384; 	X(ADD(word_1f72c, ax));	// 28000                  add     ds:word_1F72C, ax ;~ 01A2:B384
cs=0x1a2;eip=0x00b388; 	T(LODSB);	// 28001                  lodsb ;~ 01A2:B388
cs=0x1a2;eip=0x00b389; 	T(XOR(ah, ah));	// 28002                  xor     ah, ah ;~ 01A2:B389
cs=0x1a2;eip=0x00b38b; 	T(SUB(al, 0x30));	// 28003                  sub     al, 30h ; '0' ;~ 01A2:B38B
cs=0x1a2;eip=0x00b38d; 	T(ADD(ax, word_1f72c));	// 28004                  add     ax, ds:word_1F72C ;~ 01A2:B38D
cs=0x1a2;eip=0x00b391; 	T(al = ah;);	// 28005                  mov     al, ah ;~ 01A2:B391
cs=0x1a2;eip=0x00b393; 	T(XOR(ah, ah));	// 28006                  xor     ah, ah ;~ 01A2:B393
cs=0x1a2;eip=0x00b395; 	T(ADD(ax, ax));	// 28007                  add     ax, ax ;~ 01A2:B395
cs=0x1a2;eip=0x00b397; 	T(ADD(di, ax));	// 28008                  add     di, ax ;~ 01A2:B397
cs=0x1a2;eip=0x00b399; 	T(MOV(al, *(raddr(ss,bp+0))));	// 28009                  mov     al, [bp+0] ;~ 01A2:B399
cs=0x1a2;eip=0x00b39c; 	T(INC(bp));	// 28010                  inc     bp ;~ 01A2:B39C
cs=0x1a2;eip=0x00b39d; 	X(MOV(*(raddr(cs,di)), al));	// 28011                  mov     cs:[di], al ;~ 01A2:B39D
cs=0x1a2;eip=0x00b3a0; 	T(NOT(al));	// 28012                  not     al ;~ 01A2:B3A0
cs=0x1a2;eip=0x00b3a2; 	X(MOV(*(raddr(cs,di+0x100)), al));	// 28013                  mov     cs:[di+100h], al ;~ 01A2:B3A2
cs=0x1a2;eip=0x00b3a7; 	T(DEC(cl));	// 28014                  dec     cl ;~ 01A2:B3A7
cs=0x1a2;eip=0x00b3a9; 	J(JNZ(loc_1b34a));	// 28015                  jnz     short loc_1B34A ;~ 01A2:B3A9
cs=0x1a2;eip=0x00b3ab; 	T(al = byte_70cb0;);	// 28016                  mov     al, ss:byte_70CB0 ;~ 01A2:B3AB
cs=0x1a2;eip=0x00b3af; 	T(CMP(al, 0x41));	// 28017                  cmp     al, 41h ; 'A' ;~ 01A2:B3AF
cs=0x1a2;eip=0x00b3b1; 	T(dx = 0x4C32;);	// 28018                  mov     dx, 4C32h ;~ 01A2:B3B1
cs=0x1a2;eip=0x00b3b4; 	J(JZ(loc_1b3ce));	// 28019                  jz      short loc_1B3CE ;~ 01A2:B3B4
cs=0x1a2;eip=0x00b3b6; 	T(CMP(al, 0x52));	// 28020                  cmp     al, 52h ; 'R' ;~ 01A2:B3B6
cs=0x1a2;eip=0x00b3b8; 	T(dx = 0x4C47;);	// 28021                  mov     dx, 4C47h ;~ 01A2:B3B8
cs=0x1a2;eip=0x00b3bb; 	J(JZ(loc_1b3ce));	// 28022                  jz      short loc_1B3CE ;~ 01A2:B3BB
cs=0x1a2;eip=0x00b3bd; 	T(CMP(al, 0x53));	// 28023                  cmp     al, 53h ; 'S' ;~ 01A2:B3BD
cs=0x1a2;eip=0x00b3bf; 	T(dx = 0x4C52;);	// 28024                  mov     dx, 4C52h ;~ 01A2:B3BF
cs=0x1a2;eip=0x00b3c2; 	J(JZ(loc_1b3ce));	// 28025                  jz      short loc_1B3CE ;~ 01A2:B3C2
cs=0x1a2;eip=0x00b3c4; 	T(dx = 0x4C3C;);	// 28026                  mov     dx, 4C3Ch ;~ 01A2:B3C4
cs=0x1a2;eip=0x00b3c7; 	T(CMP(al, 0x42));	// 28027                  cmp     al, 42h ; 'B' ;~ 01A2:B3C7
cs=0x1a2;eip=0x00b3c9; 	J(JZ(loc_1b3ce));	// 28028                  jz      short loc_1B3CE ;~ 01A2:B3C9
cs=0x1a2;eip=0x00b3cb; 	T(dx = 0x4C5F;);	// 28029                  mov     dx, 4C5Fh ;~ 01A2:B3CB
loc_1b3ce:
	// 6134 
cs=0x1a2;eip=0x00b3ce; 	X(PUSH(es));	// 28033                  push    es ;~ 01A2:B3CE
cs=0x1a2;eip=0x00b3cf; 	X(PUSH(ds));	// 28034                  push    ds ;~ 01A2:B3CF
cs=0x1a2;eip=0x00b3d0; 	T(ax = ss;);	// 28035                  mov     ax, ss ;~ 01A2:B3D0
cs=0x1a2;eip=0x00b3d2; 	T(ds = ax;);	// 28036                  mov     ds, ax ;~ 01A2:B3D2
cs=0x1a2;eip=0x00b3d4; 	T(ax = 0x3D00;);	// 28038                  mov     ax, 3D00h ;~ 01A2:B3D4
cs=0x1a2;eip=0x00b3d7; 	S(_INT(0x21));	// 28039                  int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE ;~ 01A2:B3D7
cs=0x1a2;eip=0x00b3d9; 	X(POP(ds));	// 28043                  pop     ds ;~ 01A2:B3D9
cs=0x1a2;eip=0x00b3da; 	X(POP(es));	// 28045                  pop     es ;~ 01A2:B3DA
cs=0x1a2;eip=0x00b3db; 	J(JC(loc_1b40e));	// 28046                  jb      short loc_1B40E ;~ 01A2:B3DB
cs=0x1a2;eip=0x00b3dd; 	X(PUSH(es));	// 28047                  push    es ;~ 01A2:B3DD
cs=0x1a2;eip=0x00b3de; 	X(PUSH(ds));	// 28048                  push    ds ;~ 01A2:B3DE
cs=0x1a2;eip=0x00b3df; 	T(bx = ax;);	// 28049                  mov     bx, ax ;~ 01A2:B3DF
cs=0x1a2;eip=0x00b3e1; 	T(ax = seg_offset(seg008););	// 28050                  mov     ax, seg seg008 ;~ 01A2:B3E1
cs=0x1a2;eip=0x00b3e4; 	X(*(dw*)(((db*)&off_11494)+2) = ax;);	// 28051                  mov     word ptr cs:off_11494+2, ax ;~ 01A2:B3E4
cs=0x1a2;eip=0x00b3e8; 	X(*(dw*)(((db*)&off_11490)+2) = ax;);	// 28052                  mov     word ptr cs:off_11490+2, ax ;~ 01A2:B3E8
cs=0x1a2;eip=0x00b3ec; 	T(ds = ax;);	// 28053                  mov     ds, ax ;~ 01A2:B3EC
cs=0x1a2;eip=0x00b3ee; 	T(dx = 0;);	// 28055                  mov     dx, 0 ;~ 01A2:B3EE
cs=0x1a2;eip=0x00b3f1; 	T(cx = 0x838E;);	// 28056                  mov     cx, 838Eh ;~ 01A2:B3F1
cs=0x1a2;eip=0x00b3f4; 	X(PUSH(bx));	// 28057                  push    bx ;~ 01A2:B3F4
cs=0x1a2;eip=0x00b3f5; 	T(ah = 0x3F;);	// 28058                  mov     ah, 3Fh ;~ 01A2:B3F5
cs=0x1a2;eip=0x00b3f7; 	S(_INT(0x21));	// 28059                  int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE ;~ 01A2:B3F7
cs=0x1a2;eip=0x00b3f9; 	X(POP(bx));	// 28062                  pop     bx ;~ 01A2:B3F9
cs=0x1a2;eip=0x00b3fa; 	X(POP(ds));	// 28063                  pop     ds ;~ 01A2:B3FA
cs=0x1a2;eip=0x00b3fb; 	X(POP(es));	// 28065                  pop     es ;~ 01A2:B3FB
cs=0x1a2;eip=0x00b3fc; 	J(JC(loc_1b40e));	// 28066                  jb      short loc_1B40E ;~ 01A2:B3FC
cs=0x1a2;eip=0x00b3fe; 	T(ah = 0x3E;);	// 28067                  mov     ah, 3Eh ;~ 01A2:B3FE
cs=0x1a2;eip=0x00b400; 	S(_INT(0x21));	// 28068                  int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE ;~ 01A2:B400
cs=0x1a2;eip=0x00b402; 	J(CALL(__dispatch_call,off_11494));	// 28070                  call    cs:off_11494 ;~ 01A2:B402
cs=0x1a2;eip=0x00b407; 	T(OR(al, al));	// 28071                  or      al, al ;~ 01A2:B407
cs=0x1a2;eip=0x00b409; 	J(JZ(loc_1b412));	// 28072                  jz      short loc_1B412 ;~ 01A2:B409
cs=0x1a2;eip=0x00b40b; 	T(XOR(ax, ax));	// 28073                  xor     ax, ax ;~ 01A2:B40B
cs=0x1a2;eip=0x00b40d; 	J(RETN(0));	// 28074                  retn ;~ 01A2:B40D
loc_1b40e:
	// 6135 
cs=0x1a2;eip=0x00b40e; 	T(ax = 1;);	// 28079                  mov     ax, 1 ;~ 01A2:B40E
cs=0x1a2;eip=0x00b411; 	J(RETN(0));	// 28080                  retn ;~ 01A2:B411
loc_1b412:
	// 6136 
cs=0x1a2;eip=0x00b412; 	T(ax = 0x0FFFF;);	// 28084                  mov     ax, 0FFFFh ;~ 01A2:B412
cs=0x1a2;eip=0x00b415; 	J(RETN(0));	// 28085                  retn ;~ 01A2:B415

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1b2df: 	goto loc_1b2df;
        case m2c::kloc_1b2f2: 	goto loc_1b2f2;
        case m2c::kloc_1b320: 	goto loc_1b320;
        case m2c::kloc_1b34a: 	goto loc_1b34a;
        case m2c::kloc_1b3ce: 	goto loc_1b3ce;
        case m2c::kloc_1b40e: 	goto loc_1b40e;
        case m2c::kloc_1b412: 	goto loc_1b412;
        case m2c::ksub_1b2c6: 	goto sub_1b2c6;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1b416(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1b416:
    _begin:
cs=0x1a2;eip=0x00b416; 	T(LODSB);	// 28094                  lodsb ;~ 01A2:B416
cs=0x1a2;eip=0x00b417; 	T(CMP(al, 0));	// 28095                  cmp     al, 0 ;~ 01A2:B417
cs=0x1a2;eip=0x00b419; 	J(JNZ(loc_1b41d));	// 28096                  jnz     short loc_1B41D ;~ 01A2:B419
cs=0x1a2;eip=0x00b41b; 	T(DEC(si));	// 28097                  dec     si ;~ 01A2:B41B
cs=0x1a2;eip=0x00b41c; 	J(RETN(0));	// 28098                  retn ;~ 01A2:B41C
loc_1b41d:
	// 6137 
cs=0x1a2;eip=0x00b41d; 	T(CMP(al, 0x0A));	// 28102                  cmp     al, 0Ah ;~ 01A2:B41D
cs=0x1a2;eip=0x00b41f; 	J(JNZ(sub_1b416));	// 28103                  jnz     short sub_1B416 ;~ 01A2:B41F
cs=0x1a2;eip=0x00b421; 	J(RETN(0));	// 28104                  retn ;~ 01A2:B421

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1b41d: 	goto loc_1b41d;
        case m2c::ksub_1b416: 	goto sub_1b416;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1b422(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1b422:
    _begin:
cs=0x1a2;eip=0x00b422; 	X(PUSH(es));	// 28113                  push    es ;~ 01A2:B422
cs=0x1a2;eip=0x00b423; 	X(PUSH(es));	// 28114                  push    es ;~ 01A2:B423
cs=0x1a2;eip=0x00b424; 	X(PUSH(ds));	// 28115                  push    ds ;~ 01A2:B424
cs=0x1a2;eip=0x00b425; 	T(ax = ds;);	// 28116                  mov     ax, ds ;~ 01A2:B425
cs=0x1a2;eip=0x00b427; 	T(es = ax;);	// 28117                  mov     es, ax ;~ 01A2:B427
cs=0x1a2;eip=0x00b429; 	T(ax = ss;);	// 28119                  mov     ax, ss ;~ 01A2:B429
cs=0x1a2;eip=0x00b42b; 	T(ds = ax;);	// 28120                  mov     ds, ax ;~ 01A2:B42B
cs=0x1a2;eip=0x00b42d; 	T(dx = 0x4D14;);	// 28122                  mov     dx, 4D14h ;~ 01A2:B42D
cs=0x1a2;eip=0x00b430; 	T(CLC);	// 28123                  clc ;~ 01A2:B430
cs=0x1a2;eip=0x00b431; 	J(CALL(sub_1c44a,0));	// 28124                  call    sub_1C44A ;~ 01A2:B431
cs=0x1a2;eip=0x00b434; 	X(POP(ds));	// 28125                  pop     ds ;~ 01A2:B434
cs=0x1a2;eip=0x00b435; 	X(POP(es));	// 28127                  pop     es ;~ 01A2:B435
cs=0x1a2;eip=0x00b436; 	J(JC(loc_1b49d));	// 28129                  jb      short loc_1B49D ;~ 01A2:B436
cs=0x1a2;eip=0x00b438; 	T(dx = word_1f892;);	// 28130                  mov     dx, ds:word_1F892 ;~ 01A2:B438
cs=0x1a2;eip=0x00b43c; 	T(bx = word_1f8ee;);	// 28131                  mov     bx, ds:word_1F8EE ;~ 01A2:B43C
cs=0x1a2;eip=0x00b440; 	X(PUSH(ds));	// 28132                  push    ds ;~ 01A2:B440
cs=0x1a2;eip=0x00b441; 	T(ds = seg_1f8a6;);	// 28133                  mov     ds, ds:seg_1F8A6 ;~ 01A2:B441
cs=0x1a2;eip=0x00b445; 	T(cx = 0x0FA00;);	// 28135                  mov     cx, 0FA00h ;~ 01A2:B445
cs=0x1a2;eip=0x00b448; 	J(CALL(sub_1c7d1,0));	// 28136                  call    near ptr sub_1C7D1 ;~ 01A2:B448
cs=0x1a2;eip=0x00b44b; 	T(cx = ax;);	// 28138                  mov     cx, ax ;~ 01A2:B44B
cs=0x1a2;eip=0x00b44d; 	X(POP(ds));	// 28139                  pop     ds ;~ 01A2:B44D
cs=0x1a2;eip=0x00b44e; 	J(JC(loc_1b49d));	// 28141                  jb      short loc_1B49D ;~ 01A2:B44E
cs=0x1a2;eip=0x00b450; 	T(bx = word_1f8ee;);	// 28142                  mov     bx, ds:word_1F8EE ;~ 01A2:B450
cs=0x1a2;eip=0x00b454; 	T(ah = 0x3E;);	// 28143                  mov     ah, 3Eh ;~ 01A2:B454
cs=0x1a2;eip=0x00b456; 	S(_INT(0x21));	// 28144                  int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE ;~ 01A2:B456
cs=0x1a2;eip=0x00b458; 	T(dx = 0x3C4;);	// 28146                  mov     dx, 3C4h ;~ 01A2:B458
cs=0x1a2;eip=0x00b45b; 	T(ax = 0x402;);	// 28147                  mov     ax, 402h ;~ 01A2:B45B
cs=0x1a2;eip=0x00b45e; 	S(OUT(dx, ax));	// 28148                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:B45E
cs=0x1a2;eip=0x00b45f; 	T(dx = 0x3CE;);	// 28150                  mov     dx, 3CEh ;~ 01A2:B45F
cs=0x1a2;eip=0x00b462; 	T(ax = 5;);	// 28151                  mov     ax, 5 ;~ 01A2:B462
cs=0x1a2;eip=0x00b465; 	S(OUT(dx, ax));	// 28152                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B465
cs=0x1a2;eip=0x00b466; 	T(ax = 3;);	// 28159                  mov     ax, 3 ;~ 01A2:B466
cs=0x1a2;eip=0x00b469; 	S(OUT(dx, ax));	// 28160                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:B469
cs=0x1a2;eip=0x00b46a; 	X(PUSH(ds));	// 28165                  push    ds ;~ 01A2:B46A
cs=0x1a2;eip=0x00b46b; 	T(ax = 0x0AA00;);	// 28166                  mov     ax, 0AA00h ;~ 01A2:B46B
cs=0x1a2;eip=0x00b46e; 	T(es = ax;);	// 28167                  mov     es, ax ;~ 01A2:B46E
cs=0x1a2;eip=0x00b470; 	T(XOR(di, di));	// 28169                  xor     di, di ;~ 01A2:B470
cs=0x1a2;eip=0x00b472; 	T(si = word_1f892;);	// 28170                  mov     si, ds:word_1F892 ;~ 01A2:B472
cs=0x1a2;eip=0x00b476; 	T(ds = seg_1f8a6;);	// 28171                  mov     ds, ds:seg_1F8A6 ;~ 01A2:B476
cs=0x1a2;eip=0x00b47a; 	X(PUSH(cx));	// 28173                  push    cx ;~ 01A2:B47A
cs=0x1a2;eip=0x00b47b; 	T(cx = 0x6000;);	// 28174                  mov     cx, 6000h ;~ 01A2:B47B
	// 28175                  rep movsb ;~ 01A2:B47E
cs=0x1a2;eip=0x00b47e; 	X(	REP MOVSB);	// 28175                  rep movsb ;~ 01A2:B47E
cs=0x1a2;eip=0x00b480; 	X(POP(cx));	// 28176                  pop     cx ;~ 01A2:B480
cs=0x1a2;eip=0x00b481; 	T(dx = 0x3C4;);	// 28177                  mov     dx, 3C4h ;~ 01A2:B481
cs=0x1a2;eip=0x00b484; 	T(ax = 0x802;);	// 28178                  mov     ax, 802h ;~ 01A2:B484
cs=0x1a2;eip=0x00b487; 	S(OUT(dx, ax));	// 28179                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:B487
cs=0x1a2;eip=0x00b488; 	T(SUB(cx, 0x6000));	// 28181                  sub     cx, 6000h ;~ 01A2:B488
cs=0x1a2;eip=0x00b48c; 	T(di = 0;);	// 28182                  mov     di, 0 ;~ 01A2:B48C
	// 28183                  rep movsb ;~ 01A2:B48F
cs=0x1a2;eip=0x00b48f; 	X(	REP MOVSB);	// 28183                  rep movsb ;~ 01A2:B48F
cs=0x1a2;eip=0x00b491; 	X(POP(ds));	// 28184                  pop     ds ;~ 01A2:B491
cs=0x1a2;eip=0x00b492; 	T(dx = 0x3C4;);	// 28186                  mov     dx, 3C4h ;~ 01A2:B492
cs=0x1a2;eip=0x00b495; 	T(ax = 0x102;);	// 28187                  mov     ax, 102h ;~ 01A2:B495
cs=0x1a2;eip=0x00b498; 	S(OUT(dx, ax));	// 28188                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:B498
cs=0x1a2;eip=0x00b499; 	T(XOR(ax, ax));	// 28190                  xor     ax, ax ;~ 01A2:B499
cs=0x1a2;eip=0x00b49b; 	X(POP(es));	// 28191                  pop     es ;~ 01A2:B49B
cs=0x1a2;eip=0x00b49c; 	J(RETN(0));	// 28193                  retn ;~ 01A2:B49C
loc_1b49d:
	// 6138 
cs=0x1a2;eip=0x00b49d; 	T(dx = 0x3C4;);	// 28198                  mov     dx, 3C4h ;~ 01A2:B49D
cs=0x1a2;eip=0x00b4a0; 	T(ax = 0x102;);	// 28199                  mov     ax, 102h ;~ 01A2:B4A0
cs=0x1a2;eip=0x00b4a3; 	S(OUT(dx, ax));	// 28200                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:B4A3
cs=0x1a2;eip=0x00b4a4; 	T(ax = 1;);	// 28202                  mov     ax, 1 ;~ 01A2:B4A4
cs=0x1a2;eip=0x00b4a7; 	X(POP(es));	// 28203                  pop     es ;~ 01A2:B4A7
cs=0x1a2;eip=0x00b4a8; 	J(RETN(0));	// 28205                  retn ;~ 01A2:B4A8

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1b49d: 	goto loc_1b49d;
        case m2c::ksub_1b422: 	goto sub_1b422;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1b4a9(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1b4a9:
    _begin:
cs=0x1a2;eip=0x00b4a9; 	X(PUSH(es));	// 28214                  push    es ;~ 01A2:B4A9
cs=0x1a2;eip=0x00b4aa; 	X(PUSH(ds));	// 28215                  push    ds ;~ 01A2:B4AA
cs=0x1a2;eip=0x00b4ab; 	T(ax = ds;);	// 28216                  mov     ax, ds ;~ 01A2:B4AB
cs=0x1a2;eip=0x00b4ad; 	T(es = ax;);	// 28217                  mov     es, ax ;~ 01A2:B4AD
cs=0x1a2;eip=0x00b4af; 	T(ax = ss;);	// 28218                  mov     ax, ss ;~ 01A2:B4AF
cs=0x1a2;eip=0x00b4b1; 	T(ds = ax;);	// 28219                  mov     ds, ax ;~ 01A2:B4B1
cs=0x1a2;eip=0x00b4b3; 	T(dx = 0x4C7F;);	// 28221                  mov     dx, 4C7Fh ;~ 01A2:B4B3
cs=0x1a2;eip=0x00b4b6; 	T(CLC);	// 28222                  clc ;~ 01A2:B4B6
cs=0x1a2;eip=0x00b4b7; 	J(CALL(sub_1c44a,0));	// 28223                  call    sub_1C44A ;~ 01A2:B4B7
cs=0x1a2;eip=0x00b4ba; 	X(POP(ds));	// 28224                  pop     ds ;~ 01A2:B4BA
cs=0x1a2;eip=0x00b4bb; 	X(POP(es));	// 28226                  pop     es ;~ 01A2:B4BB
cs=0x1a2;eip=0x00b4bc; 	J(JNC(loc_1b4c1));	// 28227                  jnb     short loc_1B4C1 ;~ 01A2:B4BC
cs=0x1a2;eip=0x00b4be; 	J(JMP(loc_1b564));	// 28228                  jmp     loc_1B564 ;~ 01A2:B4BE
loc_1b4c1:
	// 6139 
cs=0x1a2;eip=0x00b4c1; 	T(dx = 0x1DC;);	// 28232                  mov     dx, 1DCh ;~ 01A2:B4C1
cs=0x1a2;eip=0x00b4c4; 	T(bx = word_1f8ee;);	// 28233                  mov     bx, ds:word_1F8EE ;~ 01A2:B4C4
cs=0x1a2;eip=0x00b4c8; 	X(PUSH(ds));	// 28234                  push    ds ;~ 01A2:B4C8
cs=0x1a2;eip=0x00b4c9; 	T(ds = seg_1f8b6;);	// 28235                  mov     ds, ds:seg_1F8B6 ;~ 01A2:B4C9
cs=0x1a2;eip=0x00b4cd; 	T(cx = 0x4FE6;);	// 28237                  mov     cx, 4FE6h ;~ 01A2:B4CD
cs=0x1a2;eip=0x00b4d0; 	J(CALL(sub_1c7d1,0));	// 28238                  call    near ptr sub_1C7D1 ;~ 01A2:B4D0
cs=0x1a2;eip=0x00b4d3; 	X(POP(ds));	// 28240                  pop     ds ;~ 01A2:B4D3
cs=0x1a2;eip=0x00b4d4; 	J(JNC(loc_1b4d9));	// 28242                  jnb     short loc_1B4D9 ;~ 01A2:B4D4
cs=0x1a2;eip=0x00b4d6; 	J(JMP(loc_1b564));	// 28243                  jmp     loc_1B564 ;~ 01A2:B4D6
loc_1b4d9:
	// 6140 
cs=0x1a2;eip=0x00b4d9; 	T(bx = word_1f8ee;);	// 28247                  mov     bx, ds:word_1F8EE ;~ 01A2:B4D9
cs=0x1a2;eip=0x00b4dd; 	T(ah = 0x3E;);	// 28248                  mov     ah, 3Eh ;~ 01A2:B4DD
cs=0x1a2;eip=0x00b4df; 	S(_INT(0x21));	// 28249                  int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE ;~ 01A2:B4DF
cs=0x1a2;eip=0x00b4e1; 	T(es = seg_1f8b6;);	// 28251                  mov     es, ds:seg_1F8B6 ;~ 01A2:B4E1
cs=0x1a2;eip=0x00b4e5; 	T(di = 0x1DC;);	// 28252                  mov     di, 1DCh ;~ 01A2:B4E5
cs=0x1a2;eip=0x00b4e8; 	T(MOV(cx, *(dw*)(raddr(es,di))));	// 28253                  mov     cx, es:[di] ;~ 01A2:B4E8
cs=0x1a2;eip=0x00b4eb; 	T(ADD(di, 2));	// 28254                  add     di, 2 ;~ 01A2:B4EB
cs=0x1a2;eip=0x00b4ee; 	T(XCHG(ch, cl));	// 28255                  xchg    ch, cl ;~ 01A2:B4EE
cs=0x1a2;eip=0x00b4f0; 	T(ax = cx;);	// 28256                  mov     ax, cx ;~ 01A2:B4F0
cs=0x1a2;eip=0x00b4f2; 	T(SHL(ax, 1));	// 28257                  shl     ax, 1 ;~ 01A2:B4F2
cs=0x1a2;eip=0x00b4f4; 	T(ADD(ax, di));	// 28258                  add     ax, di ;~ 01A2:B4F4
cs=0x1a2;eip=0x00b4f6; 	T(bp = 0x4BA6;);	// 28259                  mov     bp, 4BA6h ;~ 01A2:B4F6
cs=0x1a2;eip=0x00b4f9; 	T(si = ax;);	// 28260                  mov     si, ax ;~ 01A2:B4F9
cs=0x1a2;eip=0x00b4fb; 	T(MOV(dx, *(dw*)(raddr(ss,bp+0))));	// 28261                  mov     dx, [bp+0] ;~ 01A2:B4FB
loc_1b4fe:
	// 6141 
cs=0x1a2;eip=0x00b4fe; 	T(MOV(bx, *(dw*)(raddr(ss,bp+0))));	// 28264                  mov     bx, [bp+0] ;~ 01A2:B4FE
cs=0x1a2;eip=0x00b501; 	T(ADD(bp, 8));	// 28265                  add     bp, 8 ;~ 01A2:B501
cs=0x1a2;eip=0x00b504; 	X(MOV(*(dw*)(raddr(ds,bx)), ax));	// 28266                  mov     [bx], ax ;~ 01A2:B504
cs=0x1a2;eip=0x00b506; 	T(MOV(bx, *(dw*)(raddr(es,di))));	// 28267                  mov     bx, es:[di] ;~ 01A2:B506
cs=0x1a2;eip=0x00b509; 	T(XCHG(bh, bl));	// 28268                  xchg    bh, bl ;~ 01A2:B509
cs=0x1a2;eip=0x00b50b; 	T(ADD(ax, bx));	// 28269                  add     ax, bx ;~ 01A2:B50B
cs=0x1a2;eip=0x00b50d; 	T(ADD(di, 2));	// 28270                  add     di, 2 ;~ 01A2:B50D
cs=0x1a2;eip=0x00b510; 	J(LOOP(loc_1b4fe));	// 28271                  loop    loc_1B4FE ;~ 01A2:B510
cs=0x1a2;eip=0x00b512; 	X(PUSH(ds));	// 28272                  push    ds ;~ 01A2:B512
cs=0x1a2;eip=0x00b513; 	T(bx = dx;);	// 28273                  mov     bx, dx ;~ 01A2:B513
cs=0x1a2;eip=0x00b515; 	T(ax = 0;);	// 28274                  mov     ax, 0 ;~ 01A2:B515
cs=0x1a2;eip=0x00b518; 	X(MOV(*(dw*)(raddr(ds,bx)), ax));	// 28275                  mov     [bx], ax ;~ 01A2:B518
cs=0x1a2;eip=0x00b51a; 	X(PUSH(ax));	// 28276                  push    ax ;~ 01A2:B51A
cs=0x1a2;eip=0x00b51b; 	T(di = word_1f892;);	// 28277                  mov     di, ds:word_1F892 ;~ 01A2:B51B
cs=0x1a2;eip=0x00b51f; 	T(es = seg_1f8a6;);	// 28278                  mov     es, ds:seg_1F8A6 ;~ 01A2:B51F
cs=0x1a2;eip=0x00b523; 	T(cx = offset(seg010,unk_32018););	// 28280                  mov     cx, offset unk_32018 ;~ 01A2:B523
cs=0x1a2;eip=0x00b526; 	T(ds = seg_1f8b6;);	// 28281                  mov     ds, ds:seg_1F8B6 ;~ 01A2:B526
cs=0x1a2;eip=0x00b52a; 	X(PUSH(di));	// 28283                  push    di ;~ 01A2:B52A
cs=0x1a2;eip=0x00b52b; 	X(PUSH(es));	// 28284                  push    es ;~ 01A2:B52B
cs=0x1a2;eip=0x00b52c; 	X(PUSH(ds));	// 28285                  push    ds ;~ 01A2:B52C
	// 28286                  rep movsw ;~ 01A2:B52D
cs=0x1a2;eip=0x00b52d; 	X(	REP MOVSW);	// 28286                  rep movsw ;~ 01A2:B52D
cs=0x1a2;eip=0x00b52f; 	X(POP(es));	// 28287                  pop     es ;~ 01A2:B52F
cs=0x1a2;eip=0x00b530; 	X(POP(ds));	// 28289                  pop     ds ;~ 01A2:B530
cs=0x1a2;eip=0x00b531; 	X(POP(si));	// 28291                  pop     si ;~ 01A2:B531
cs=0x1a2;eip=0x00b532; 	X(POP(di));	// 28292                  pop     di ;~ 01A2:B532
cs=0x1a2;eip=0x00b533; 	T(bl = 0x11;);	// 28293                  mov     bl, 11h ;~ 01A2:B533
loc_1b535:
	// 6142 
cs=0x1a2;eip=0x00b535; 	T(cx = 0x0E;);	// 28296                  mov     cx, 0Eh ;~ 01A2:B535
loc_1b538:
	// 6143 
cs=0x1a2;eip=0x00b538; 	T(LODSW);	// 28299                  lodsw ;~ 01A2:B538
cs=0x1a2;eip=0x00b539; 	X(MOV(*(dw*)(raddr(es,di+0x1C)), ax));	// 28300                  mov     es:[di+1Ch], ax ;~ 01A2:B539
cs=0x1a2;eip=0x00b53d; 	T(dx = ax;);	// 28301                  mov     dx, ax ;~ 01A2:B53D
cs=0x1a2;eip=0x00b53f; 	T(LODSW);	// 28302                  lodsw ;~ 01A2:B53F
cs=0x1a2;eip=0x00b540; 	T(OR(dx, ax));	// 28303                  or      dx, ax ;~ 01A2:B540
cs=0x1a2;eip=0x00b542; 	X(MOV(*(dw*)(raddr(es,di+0x38)), ax));	// 28304                  mov     es:[di+38h], ax ;~ 01A2:B542
cs=0x1a2;eip=0x00b546; 	T(LODSW);	// 28305                  lodsw ;~ 01A2:B546
cs=0x1a2;eip=0x00b547; 	T(OR(dx, ax));	// 28306                  or      dx, ax ;~ 01A2:B547
cs=0x1a2;eip=0x00b549; 	X(MOV(*(dw*)(raddr(es,di+0x54)), ax));	// 28307                  mov     es:[di+54h], ax ;~ 01A2:B549
cs=0x1a2;eip=0x00b54d; 	T(LODSW);	// 28308                  lodsw ;~ 01A2:B54D
cs=0x1a2;eip=0x00b54e; 	T(OR(dx, ax));	// 28309                  or      dx, ax ;~ 01A2:B54E
cs=0x1a2;eip=0x00b550; 	X(MOV(*(dw*)(raddr(es,di+0x70)), ax));	// 28310                  mov     es:[di+70h], ax ;~ 01A2:B550
cs=0x1a2;eip=0x00b554; 	T(ax = dx;);	// 28311                  mov     ax, dx ;~ 01A2:B554
cs=0x1a2;eip=0x00b556; 	X(STOSW);	// 28312                  stosw ;~ 01A2:B556
cs=0x1a2;eip=0x00b557; 	J(LOOP(loc_1b538));	// 28313                  loop    loc_1B538 ;~ 01A2:B557
cs=0x1a2;eip=0x00b559; 	T(ADD(di, 0x70));	// 28314                  add     di, 70h ; 'p' ;~ 01A2:B559
cs=0x1a2;eip=0x00b55c; 	T(DEC(bl));	// 28315                  dec     bl ;~ 01A2:B55C
cs=0x1a2;eip=0x00b55e; 	J(JNZ(loc_1b535));	// 28316                  jnz     short loc_1B535 ;~ 01A2:B55E
cs=0x1a2;eip=0x00b560; 	X(POP(ds));	// 28317                  pop     ds ;~ 01A2:B560
cs=0x1a2;eip=0x00b561; 	T(XOR(ax, ax));	// 28319                  xor     ax, ax ;~ 01A2:B561
cs=0x1a2;eip=0x00b563; 	J(RETN(0));	// 28320                  retn ;~ 01A2:B563
loc_1b564:
	// 6144 
cs=0x1a2;eip=0x00b564; 	T(ax = 0x0FFFF;);	// 28325                  mov     ax, 0FFFFh ;~ 01A2:B564
cs=0x1a2;eip=0x00b567; 	J(RETN(0));	// 28326                  retn ;~ 01A2:B567

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1b4c1: 	goto loc_1b4c1;
        case m2c::kloc_1b4d9: 	goto loc_1b4d9;
        case m2c::kloc_1b4fe: 	goto loc_1b4fe;
        case m2c::kloc_1b535: 	goto loc_1b535;
        case m2c::kloc_1b538: 	goto loc_1b538;
        case m2c::kloc_1b564: 	goto loc_1b564;
        case m2c::ksub_1b4a9: 	goto sub_1b4a9;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1b568(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1b568:
    _begin:
cs=0x1a2;eip=0x00b568; 	T(CMP(byte_1f872, 0));	// 28335                  cmp     ds:byte_1F872, 0 ;~ 01A2:B568
cs=0x1a2;eip=0x00b56d; 	J(JZ(loc_1b572));	// 28336                  jz      short loc_1B572 ;~ 01A2:B56D
cs=0x1a2;eip=0x00b56f; 	J(JMP(loc_1b720));	// 28337                  jmp     loc_1B720 ;~ 01A2:B56F
loc_1b572:
	// 6145 
cs=0x1a2;eip=0x00b572; 	X(PUSH(es));	// 28341                  push    es ;~ 01A2:B572
cs=0x1a2;eip=0x00b573; 	X(PUSH(ds));	// 28342                  push    ds ;~ 01A2:B573
cs=0x1a2;eip=0x00b574; 	T(ax = ds;);	// 28343                  mov     ax, ds ;~ 01A2:B574
cs=0x1a2;eip=0x00b576; 	T(es = ax;);	// 28344                  mov     es, ax ;~ 01A2:B576
cs=0x1a2;eip=0x00b578; 	T(ax = ss;);	// 28345                  mov     ax, ss ;~ 01A2:B578
cs=0x1a2;eip=0x00b57a; 	T(ds = ax;);	// 28346                  mov     ds, ax ;~ 01A2:B57A
cs=0x1a2;eip=0x00b57c; 	T(dx = 0x4C8F;);	// 28348                  mov     dx, 4C8Fh ;~ 01A2:B57C
cs=0x1a2;eip=0x00b57f; 	T(STC);	// 28349                  stc ;~ 01A2:B57F
cs=0x1a2;eip=0x00b580; 	J(CALL(sub_1c44a,0));	// 28350                  call    sub_1C44A ;~ 01A2:B580
cs=0x1a2;eip=0x00b583; 	X(POP(ds));	// 28351                  pop     ds ;~ 01A2:B583
cs=0x1a2;eip=0x00b584; 	X(POP(es));	// 28353                  pop     es ;~ 01A2:B584
cs=0x1a2;eip=0x00b585; 	J(JNC(loc_1b58a));	// 28354                  jnb     short loc_1B58A ;~ 01A2:B585
cs=0x1a2;eip=0x00b587; 	J(JMP(loc_1ba27));	// 28355                  jmp     loc_1BA27 ;~ 01A2:B587
loc_1b58a:
	// 6146 
cs=0x1a2;eip=0x00b58a; 	T(dx = word_1f18a;);	// 28359                  mov     dx, word_1F18A ;~ 01A2:B58A
cs=0x1a2;eip=0x00b58e; 	T(cx = 0x3C;);	// 28360                  mov     cx, 3Ch ; '<' ;~ 01A2:B58E
cs=0x1a2;eip=0x00b591; 	T(bx = word_1f8ee;);	// 28361                  mov     bx, ds:word_1F8EE ;~ 01A2:B591
cs=0x1a2;eip=0x00b595; 	J(CALL(sub_1c7d1,0));	// 28362                  call    near ptr sub_1C7D1 ;~ 01A2:B595
cs=0x1a2;eip=0x00b598; 	J(JNC(loc_1b59d));	// 28363                  jnb     short loc_1B59D ;~ 01A2:B598
cs=0x1a2;eip=0x00b59a; 	J(JMP(loc_1ba27));	// 28364                  jmp     loc_1BA27 ;~ 01A2:B59A
loc_1b59d:
	// 6147 
cs=0x1a2;eip=0x00b59d; 	J(CALL(sub_14224,0));	// 28368                  call    sub_14224 ;~ 01A2:B59D
cs=0x1a2;eip=0x00b5a0; 	T(dx = 8;);	// 28369                  mov     dx, 8 ;~ 01A2:B5A0
cs=0x1a2;eip=0x00b5a3; 	J(CALL(sub_14275,0));	// 28370                  call    sub_14275 ;~ 01A2:B5A3
cs=0x1a2;eip=0x00b5a6; 	T(dx = 0x700;);	// 28371                  mov     dx, 700h ;~ 01A2:B5A6
cs=0x1a2;eip=0x00b5a9; 	T(cx = 2;);	// 28372                  mov     cx, 2 ;~ 01A2:B5A9
cs=0x1a2;eip=0x00b5ac; 	T(bx = word_1f8ee;);	// 28373                  mov     bx, ds:word_1F8EE ;~ 01A2:B5AC
cs=0x1a2;eip=0x00b5b0; 	J(CALL(sub_1c7d1,0));	// 28374                  call    near ptr sub_1C7D1 ;~ 01A2:B5B0
cs=0x1a2;eip=0x00b5b3; 	J(JNC(loc_1b5b8));	// 28375                  jnb     short loc_1B5B8 ;~ 01A2:B5B3
cs=0x1a2;eip=0x00b5b5; 	J(JMP(loc_1ba27));	// 28376                  jmp     loc_1BA27 ;~ 01A2:B5B5
loc_1b5b8:
	// 6148 
cs=0x1a2;eip=0x00b5b8; 	T(si = 0x700;);	// 28380                  mov     si, 700h ;~ 01A2:B5B8
cs=0x1a2;eip=0x00b5bb; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 28381                  mov     ax, [si] ;~ 01A2:B5BB
cs=0x1a2;eip=0x00b5bd; 	X(MOV(*(raddr(ds,si)), ah));	// 28382                  mov     [si], ah ;~ 01A2:B5BD
cs=0x1a2;eip=0x00b5bf; 	X(MOV(*(raddr(ds,si+1)), al));	// 28383                  mov     [si+1], al ;~ 01A2:B5BF
cs=0x1a2;eip=0x00b5c2; 	T(dx = 0x242;);	// 28384                  mov     dx, 242h ;~ 01A2:B5C2
cs=0x1a2;eip=0x00b5c5; 	T(cx = 2;);	// 28385                  mov     cx, 2 ;~ 01A2:B5C5
cs=0x1a2;eip=0x00b5c8; 	T(bx = word_1f8ee;);	// 28386                  mov     bx, ds:word_1F8EE ;~ 01A2:B5C8
cs=0x1a2;eip=0x00b5cc; 	J(CALL(sub_1c7d1,0));	// 28387                  call    near ptr sub_1C7D1 ;~ 01A2:B5CC
cs=0x1a2;eip=0x00b5cf; 	J(JNC(loc_1b5d4));	// 28388                  jnb     short loc_1B5D4 ;~ 01A2:B5CF
cs=0x1a2;eip=0x00b5d1; 	J(JMP(loc_1ba27));	// 28389                  jmp     loc_1BA27 ;~ 01A2:B5D1
loc_1b5d4:
	// 6149 
cs=0x1a2;eip=0x00b5d4; 	T(si = 0x242;);	// 28393                  mov     si, 242h ;~ 01A2:B5D4
cs=0x1a2;eip=0x00b5d7; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 28394                  mov     ax, [si] ;~ 01A2:B5D7
cs=0x1a2;eip=0x00b5d9; 	X(MOV(*(raddr(ds,si)), ah));	// 28395                  mov     [si], ah ;~ 01A2:B5D9
cs=0x1a2;eip=0x00b5db; 	X(MOV(*(raddr(ds,si+1)), al));	// 28396                  mov     [si+1], al ;~ 01A2:B5DB
cs=0x1a2;eip=0x00b5de; 	T(dx = 0x6FA;);	// 28397                  mov     dx, 6FAh ;~ 01A2:B5DE
cs=0x1a2;eip=0x00b5e1; 	T(cx = 2;);	// 28398                  mov     cx, 2 ;~ 01A2:B5E1
cs=0x1a2;eip=0x00b5e4; 	T(bx = word_1f8ee;);	// 28399                  mov     bx, ds:word_1F8EE ;~ 01A2:B5E4
cs=0x1a2;eip=0x00b5e8; 	J(CALL(sub_1c7d1,0));	// 28400                  call    near ptr sub_1C7D1 ;~ 01A2:B5E8
cs=0x1a2;eip=0x00b5eb; 	J(JNC(loc_1b5f0));	// 28401                  jnb     short loc_1B5F0 ;~ 01A2:B5EB
cs=0x1a2;eip=0x00b5ed; 	J(JMP(loc_1ba27));	// 28402                  jmp     loc_1BA27 ;~ 01A2:B5ED
loc_1b5f0:
	// 6150 
cs=0x1a2;eip=0x00b5f0; 	T(si = 0x6FA;);	// 28406                  mov     si, 6FAh ;~ 01A2:B5F0
cs=0x1a2;eip=0x00b5f3; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 28407                  mov     ax, [si] ;~ 01A2:B5F3
cs=0x1a2;eip=0x00b5f5; 	X(MOV(*(raddr(ds,si)), ah));	// 28408                  mov     [si], ah ;~ 01A2:B5F5
cs=0x1a2;eip=0x00b5f7; 	X(MOV(*(raddr(ds,si+1)), al));	// 28409                  mov     [si+1], al ;~ 01A2:B5F7
cs=0x1a2;eip=0x00b5fa; 	T(dx = 0x6F8;);	// 28410                  mov     dx, 6F8h ;~ 01A2:B5FA
cs=0x1a2;eip=0x00b5fd; 	T(cx = 2;);	// 28411                  mov     cx, 2 ;~ 01A2:B5FD
cs=0x1a2;eip=0x00b600; 	T(bx = word_1f8ee;);	// 28412                  mov     bx, ds:word_1F8EE ;~ 01A2:B600
cs=0x1a2;eip=0x00b604; 	J(CALL(sub_1c7d1,0));	// 28413                  call    near ptr sub_1C7D1 ;~ 01A2:B604
cs=0x1a2;eip=0x00b607; 	J(JNC(loc_1b60c));	// 28414                  jnb     short loc_1B60C ;~ 01A2:B607
cs=0x1a2;eip=0x00b609; 	J(JMP(loc_1ba27));	// 28415                  jmp     loc_1BA27 ;~ 01A2:B609
loc_1b60c:
	// 6151 
cs=0x1a2;eip=0x00b60c; 	T(si = 0x6F8;);	// 28419                  mov     si, 6F8h ;~ 01A2:B60C
cs=0x1a2;eip=0x00b60f; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 28420                  mov     ax, [si] ;~ 01A2:B60F
cs=0x1a2;eip=0x00b611; 	X(MOV(*(raddr(ds,si)), ah));	// 28421                  mov     [si], ah ;~ 01A2:B611
cs=0x1a2;eip=0x00b613; 	X(MOV(*(raddr(ds,si+1)), al));	// 28422                  mov     [si+1], al ;~ 01A2:B613
cs=0x1a2;eip=0x00b616; 	T(dx = 0x6FC;);	// 28423                  mov     dx, 6FCh ;~ 01A2:B616
cs=0x1a2;eip=0x00b619; 	T(cx = 2;);	// 28424                  mov     cx, 2 ;~ 01A2:B619
cs=0x1a2;eip=0x00b61c; 	T(bx = word_1f8ee;);	// 28425                  mov     bx, ds:word_1F8EE ;~ 01A2:B61C
cs=0x1a2;eip=0x00b620; 	J(CALL(sub_1c7d1,0));	// 28426                  call    near ptr sub_1C7D1 ;~ 01A2:B620
cs=0x1a2;eip=0x00b623; 	J(JNC(loc_1b628));	// 28427                  jnb     short loc_1B628 ;~ 01A2:B623
cs=0x1a2;eip=0x00b625; 	J(JMP(loc_1ba27));	// 28428                  jmp     loc_1BA27 ;~ 01A2:B625
loc_1b628:
	// 6152 
cs=0x1a2;eip=0x00b628; 	T(si = 0x6FC;);	// 28432                  mov     si, 6FCh ;~ 01A2:B628
cs=0x1a2;eip=0x00b62b; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 28433                  mov     ax, [si] ;~ 01A2:B62B
cs=0x1a2;eip=0x00b62d; 	X(MOV(*(raddr(ds,si)), ah));	// 28434                  mov     [si], ah ;~ 01A2:B62D
cs=0x1a2;eip=0x00b62f; 	X(MOV(*(raddr(ds,si+1)), al));	// 28435                  mov     [si+1], al ;~ 01A2:B62F
cs=0x1a2;eip=0x00b632; 	T(dx = 0x6FE;);	// 28436                  mov     dx, 6FEh ;~ 01A2:B632
cs=0x1a2;eip=0x00b635; 	T(cx = 2;);	// 28437                  mov     cx, 2 ;~ 01A2:B635
cs=0x1a2;eip=0x00b638; 	T(bx = word_1f8ee;);	// 28438                  mov     bx, ds:word_1F8EE ;~ 01A2:B638
cs=0x1a2;eip=0x00b63c; 	J(CALL(sub_1c7d1,0));	// 28439                  call    near ptr sub_1C7D1 ;~ 01A2:B63C
cs=0x1a2;eip=0x00b63f; 	J(JNC(loc_1b644));	// 28440                  jnb     short loc_1B644 ;~ 01A2:B63F
cs=0x1a2;eip=0x00b641; 	J(JMP(loc_1ba27));	// 28441                  jmp     loc_1BA27 ;~ 01A2:B641
loc_1b644:
	// 6153 
cs=0x1a2;eip=0x00b644; 	T(si = 0x6FE;);	// 28445                  mov     si, 6FEh ;~ 01A2:B644
cs=0x1a2;eip=0x00b647; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 28446                  mov     ax, [si] ;~ 01A2:B647
cs=0x1a2;eip=0x00b649; 	X(MOV(*(raddr(ds,si)), ah));	// 28447                  mov     [si], ah ;~ 01A2:B649
cs=0x1a2;eip=0x00b64b; 	X(MOV(*(raddr(ds,si+1)), al));	// 28448                  mov     [si+1], al ;~ 01A2:B64B
cs=0x1a2;eip=0x00b64e; 	T(al = 0;);	// 28449                  mov     al, 0 ;~ 01A2:B64E
cs=0x1a2;eip=0x00b650; 	J(CALL(sub_1ba35,0));	// 28450                  call    sub_1BA35 ;~ 01A2:B650
cs=0x1a2;eip=0x00b653; 	J(JNC(loc_1b658));	// 28451                  jnb     short loc_1B658 ;~ 01A2:B653
cs=0x1a2;eip=0x00b655; 	J(JMP(loc_1ba27));	// 28452                  jmp     loc_1BA27 ;~ 01A2:B655
loc_1b658:
	// 6154 
cs=0x1a2;eip=0x00b658; 	X(PUSH(ax));	// 28456                  push    ax ;~ 01A2:B658
cs=0x1a2;eip=0x00b659; 	X(PUSH(bx));	// 28457                  push    bx ;~ 01A2:B659
cs=0x1a2;eip=0x00b65a; 	X(PUSH(cx));	// 28458                  push    cx ;~ 01A2:B65A
cs=0x1a2;eip=0x00b65b; 	X(PUSH(dx));	// 28459                  push    dx ;~ 01A2:B65B
cs=0x1a2;eip=0x00b65c; 	X(PUSH(bp));	// 28460                  push    bp ;~ 01A2:B65C
cs=0x1a2;eip=0x00b65d; 	X(PUSH(si));	// 28461                  push    si ;~ 01A2:B65D
cs=0x1a2;eip=0x00b65e; 	X(PUSH(di));	// 28462                  push    di ;~ 01A2:B65E
cs=0x1a2;eip=0x00b65f; 	X(PUSH(es));	// 28463                  push    es ;~ 01A2:B65F
cs=0x1a2;eip=0x00b660; 	X(PUSH(ds));	// 28464                  push    ds ;~ 01A2:B660
cs=0x1a2;eip=0x00b661; 	T(ax = 0x0A;);	// 28465                  mov     ax, 0Ah ;~ 01A2:B661
cs=0x1a2;eip=0x00b664; 	J(CALL(sub_1c43b,0));	// 28466                  call    sub_1C43B ;~ 01A2:B664
cs=0x1a2;eip=0x00b667; 	X(POP(ds));	// 28467                  pop     ds ;~ 01A2:B667
cs=0x1a2;eip=0x00b668; 	X(POP(es));	// 28468                  pop     es ;~ 01A2:B668
cs=0x1a2;eip=0x00b669; 	X(POP(di));	// 28469                  pop     di ;~ 01A2:B669
cs=0x1a2;eip=0x00b66a; 	X(POP(si));	// 28470                  pop     si ;~ 01A2:B66A
cs=0x1a2;eip=0x00b66b; 	X(POP(bp));	// 28471                  pop     bp ;~ 01A2:B66B
cs=0x1a2;eip=0x00b66c; 	X(POP(dx));	// 28472                  pop     dx ;~ 01A2:B66C
cs=0x1a2;eip=0x00b66d; 	X(POP(cx));	// 28473                  pop     cx ;~ 01A2:B66D
cs=0x1a2;eip=0x00b66e; 	X(POP(bx));	// 28474                  pop     bx ;~ 01A2:B66E
cs=0x1a2;eip=0x00b66f; 	X(POP(ax));	// 28475                  pop     ax ;~ 01A2:B66F
cs=0x1a2;eip=0x00b670; 	T(al = 1;);	// 28476                  mov     al, 1 ;~ 01A2:B670
cs=0x1a2;eip=0x00b672; 	J(CALL(sub_1ba35,0));	// 28477                  call    sub_1BA35 ;~ 01A2:B672
cs=0x1a2;eip=0x00b675; 	J(JNC(loc_1b67a));	// 28478                  jnb     short loc_1B67A ;~ 01A2:B675
cs=0x1a2;eip=0x00b677; 	J(JMP(loc_1ba27));	// 28479                  jmp     loc_1BA27 ;~ 01A2:B677
loc_1b67a:
	// 6155 
cs=0x1a2;eip=0x00b67a; 	T(al = 2;);	// 28483                  mov     al, 2 ;~ 01A2:B67A
cs=0x1a2;eip=0x00b67c; 	J(CALL(sub_1bb6b,0));	// 28484                  call    sub_1BB6B ;~ 01A2:B67C
cs=0x1a2;eip=0x00b67f; 	J(JNC(loc_1b684));	// 28485                  jnb     short loc_1B684 ;~ 01A2:B67F
cs=0x1a2;eip=0x00b681; 	J(JMP(loc_1ba27));	// 28486                  jmp     loc_1BA27 ;~ 01A2:B681
loc_1b684:
	// 6156 
cs=0x1a2;eip=0x00b684; 	T(dx = 0x0F812;);	// 28490                  mov     dx, 0F812h ;~ 01A2:B684
cs=0x1a2;eip=0x00b687; 	T(cx = 0x20;);	// 28491                  mov     cx, 20h ; ' ' ;~ 01A2:B687
cs=0x1a2;eip=0x00b68a; 	T(bx = word_1f8ee;);	// 28492                  mov     bx, ds:word_1F8EE ;~ 01A2:B68A
cs=0x1a2;eip=0x00b68e; 	J(CALL(sub_1c7d1,0));	// 28493                  call    near ptr sub_1C7D1 ;~ 01A2:B68E
cs=0x1a2;eip=0x00b691; 	J(JNC(loc_1b696));	// 28494                  jnb     short loc_1B696 ;~ 01A2:B691
cs=0x1a2;eip=0x00b693; 	J(JMP(loc_1ba27));	// 28495                  jmp     loc_1BA27 ;~ 01A2:B693
loc_1b696:
	// 6157 
cs=0x1a2;eip=0x00b696; 	T(si = 0x0F812;);	// 28499                  mov     si, 0F812h ;~ 01A2:B696
cs=0x1a2;eip=0x00b699; 	T(cx = 0x10;);	// 28500                  mov     cx, 10h ;~ 01A2:B699
loc_1b69c:
	// 6158 
cs=0x1a2;eip=0x00b69c; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 28503                  mov     ax, [si] ;~ 01A2:B69C
cs=0x1a2;eip=0x00b69e; 	X(MOV(*(raddr(ds,si)), ah));	// 28504                  mov     [si], ah ;~ 01A2:B69E
cs=0x1a2;eip=0x00b6a0; 	X(MOV(*(raddr(ds,si+1)), al));	// 28505                  mov     [si+1], al ;~ 01A2:B6A0
cs=0x1a2;eip=0x00b6a3; 	T(ADD(si, 2));	// 28506                  add     si, 2 ;~ 01A2:B6A3
cs=0x1a2;eip=0x00b6a6; 	J(LOOP(loc_1b69c));	// 28507                  loop    loc_1B69C ;~ 01A2:B6A6
cs=0x1a2;eip=0x00b6a8; 	T(dx = word_1f1b4;);	// 28508                  mov     dx, word_1F1B4 ;~ 01A2:B6A8
cs=0x1a2;eip=0x00b6ac; 	T(cx = 0x320;);	// 28509                  mov     cx, 320h ;~ 01A2:B6AC
cs=0x1a2;eip=0x00b6af; 	T(bx = word_1f8ee;);	// 28510                  mov     bx, ds:word_1F8EE ;~ 01A2:B6AF
cs=0x1a2;eip=0x00b6b3; 	J(CALL(sub_1c7d1,0));	// 28511                  call    near ptr sub_1C7D1 ;~ 01A2:B6B3
cs=0x1a2;eip=0x00b6b6; 	J(JNC(loc_1b6bb));	// 28512                  jnb     short loc_1B6BB ;~ 01A2:B6B6
cs=0x1a2;eip=0x00b6b8; 	J(JMP(loc_1ba27));	// 28513                  jmp     loc_1BA27 ;~ 01A2:B6B8
loc_1b6bb:
	// 6159 
cs=0x1a2;eip=0x00b6bb; 	T(dx = word_1f1b6;);	// 28517                  mov     dx, word_1F1B6 ;~ 01A2:B6BB
cs=0x1a2;eip=0x00b6bf; 	T(cx = 0x320;);	// 28518                  mov     cx, 320h ;~ 01A2:B6BF
cs=0x1a2;eip=0x00b6c2; 	T(bx = word_1f8ee;);	// 28519                  mov     bx, ds:word_1F8EE ;~ 01A2:B6C2
cs=0x1a2;eip=0x00b6c6; 	J(CALL(sub_1c7d1,0));	// 28520                  call    near ptr sub_1C7D1 ;~ 01A2:B6C6
cs=0x1a2;eip=0x00b6c9; 	J(JNC(loc_1b6ce));	// 28521                  jnb     short loc_1B6CE ;~ 01A2:B6C9
cs=0x1a2;eip=0x00b6cb; 	J(JMP(loc_1ba27));	// 28522                  jmp     loc_1BA27 ;~ 01A2:B6CB
loc_1b6ce:
	// 6160 
cs=0x1a2;eip=0x00b6ce; 	T(dx = 0x9A4;);	// 28526                  mov     dx, 9A4h ;~ 01A2:B6CE
cs=0x1a2;eip=0x00b6d1; 	T(cx = 0x1E;);	// 28527                  mov     cx, 1Eh ;~ 01A2:B6D1
cs=0x1a2;eip=0x00b6d4; 	T(bx = word_1f8ee;);	// 28528                  mov     bx, ds:word_1F8EE ;~ 01A2:B6D4
cs=0x1a2;eip=0x00b6d8; 	J(CALL(sub_1c7d1,0));	// 28529                  call    near ptr sub_1C7D1 ;~ 01A2:B6D8
cs=0x1a2;eip=0x00b6db; 	J(JNC(loc_1b6e0));	// 28530                  jnb     short loc_1B6E0 ;~ 01A2:B6DB
cs=0x1a2;eip=0x00b6dd; 	J(JMP(loc_1ba27));	// 28531                  jmp     loc_1BA27 ;~ 01A2:B6DD
loc_1b6e0:
	// 6161 
cs=0x1a2;eip=0x00b6e0; 	T(dx = word_1f1b8;);	// 28535                  mov     dx, word_1F1B8 ;~ 01A2:B6E0
cs=0x1a2;eip=0x00b6e4; 	T(cx = 0x28;);	// 28536                  mov     cx, 28h ; '(' ;~ 01A2:B6E4
cs=0x1a2;eip=0x00b6e7; 	T(bx = word_1f8ee;);	// 28537                  mov     bx, ds:word_1F8EE ;~ 01A2:B6E7
cs=0x1a2;eip=0x00b6eb; 	J(CALL(sub_1c7d1,0));	// 28538                  call    near ptr sub_1C7D1 ;~ 01A2:B6EB
cs=0x1a2;eip=0x00b6ee; 	J(JNC(loc_1b6f3));	// 28539                  jnb     short loc_1B6F3 ;~ 01A2:B6EE
cs=0x1a2;eip=0x00b6f0; 	J(JMP(loc_1ba27));	// 28540                  jmp     loc_1BA27 ;~ 01A2:B6F0
loc_1b6f3:
	// 6162 
cs=0x1a2;eip=0x00b6f3; 	T(dx = word_1f1d4;);	// 28544                  mov     dx, word_1F1D4 ;~ 01A2:B6F3
cs=0x1a2;eip=0x00b6f7; 	T(cx = 0x78;);	// 28545                  mov     cx, 78h ; 'x' ;~ 01A2:B6F7
cs=0x1a2;eip=0x00b6fa; 	T(bx = word_1f8ee;);	// 28546                  mov     bx, ds:word_1F8EE ;~ 01A2:B6FA
cs=0x1a2;eip=0x00b6fe; 	J(CALL(sub_1c7d1,0));	// 28547                  call    near ptr sub_1C7D1 ;~ 01A2:B6FE
cs=0x1a2;eip=0x00b701; 	J(JNC(loc_1b706));	// 28548                  jnb     short loc_1B706 ;~ 01A2:B701
cs=0x1a2;eip=0x00b703; 	J(JMP(loc_1ba27));	// 28549                  jmp     loc_1BA27 ;~ 01A2:B703
loc_1b706:
	// 6163 
cs=0x1a2;eip=0x00b706; 	T(di = word_1f1d4;);	// 28553                  mov     di, word_1F1D4 ;~ 01A2:B706
cs=0x1a2;eip=0x00b70a; 	T(cx = 0x3C;);	// 28554                  mov     cx, 3Ch ; '<' ;~ 01A2:B70A
cs=0x1a2;eip=0x00b70d; 	T(ax = ds;);	// 28555                  mov     ax, ds ;~ 01A2:B70D
cs=0x1a2;eip=0x00b70f; 	T(es = ax;);	// 28556                  mov     es, ax ;~ 01A2:B70F
loc_1b711:
	// 6164 
cs=0x1a2;eip=0x00b711; 	T(MOV(ax, *(dw*)(raddr(ds,di))));	// 28559                  mov     ax, [di] ;~ 01A2:B711
cs=0x1a2;eip=0x00b713; 	T(XCHG(al, ah));	// 28560                  xchg    al, ah ;~ 01A2:B713
cs=0x1a2;eip=0x00b715; 	X(STOSW);	// 28561                  stosw ;~ 01A2:B715
cs=0x1a2;eip=0x00b716; 	J(LOOP(loc_1b711));	// 28562                  loop    loc_1B711 ;~ 01A2:B716
cs=0x1a2;eip=0x00b718; 	T(bx = word_1f8ee;);	// 28563                  mov     bx, ds:word_1F8EE ;~ 01A2:B718
cs=0x1a2;eip=0x00b71c; 	T(ah = 0x3E;);	// 28564                  mov     ah, 3Eh ;~ 01A2:B71C
cs=0x1a2;eip=0x00b71e; 	S(_INT(0x21));	// 28565                  int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE ;~ 01A2:B71E
loc_1b720:
	// 6165 
cs=0x1a2;eip=0x00b720; 	T(CMP(byte_1f87a, 0));	// 28569                  cmp     ds:byte_1F87A, 0 ;~ 01A2:B720
cs=0x1a2;eip=0x00b725; 	J(JNZ(loc_1b76f));	// 28570                  jnz     short loc_1B76F ;~ 01A2:B725
cs=0x1a2;eip=0x00b727; 	X(PUSH(es));	// 28571                  push    es ;~ 01A2:B727
cs=0x1a2;eip=0x00b728; 	X(PUSH(ds));	// 28572                  push    ds ;~ 01A2:B728
cs=0x1a2;eip=0x00b729; 	T(ax = ds;);	// 28573                  mov     ax, ds ;~ 01A2:B729
cs=0x1a2;eip=0x00b72b; 	T(es = ax;);	// 28574                  mov     es, ax ;~ 01A2:B72B
cs=0x1a2;eip=0x00b72d; 	T(ax = ss;);	// 28575                  mov     ax, ss ;~ 01A2:B72D
cs=0x1a2;eip=0x00b72f; 	T(ds = ax;);	// 28576                  mov     ds, ax ;~ 01A2:B72F
cs=0x1a2;eip=0x00b731; 	T(dx = 0x4C9F;);	// 28578                  mov     dx, 4C9Fh ;~ 01A2:B731
cs=0x1a2;eip=0x00b734; 	T(CLC);	// 28579                  clc ;~ 01A2:B734
cs=0x1a2;eip=0x00b735; 	J(CALL(sub_1c44a,0));	// 28580                  call    sub_1C44A ;~ 01A2:B735
cs=0x1a2;eip=0x00b738; 	X(POP(ds));	// 28581                  pop     ds ;~ 01A2:B738
cs=0x1a2;eip=0x00b739; 	X(POP(es));	// 28583                  pop     es ;~ 01A2:B739
cs=0x1a2;eip=0x00b73a; 	J(JNC(loc_1b73f));	// 28584                  jnb     short loc_1B73F ;~ 01A2:B73A
cs=0x1a2;eip=0x00b73c; 	J(JMP(loc_1ba27));	// 28585                  jmp     loc_1BA27 ;~ 01A2:B73C
loc_1b73f:
	// 6166 
cs=0x1a2;eip=0x00b73f; 	T(al = 3;);	// 28589                  mov     al, 3 ;~ 01A2:B73F
cs=0x1a2;eip=0x00b741; 	J(CALL(sub_1ba35,0));	// 28590                  call    sub_1BA35 ;~ 01A2:B741
cs=0x1a2;eip=0x00b744; 	J(JNC(loc_1b749));	// 28591                  jnb     short loc_1B749 ;~ 01A2:B744
cs=0x1a2;eip=0x00b746; 	J(JMP(loc_1ba27));	// 28592                  jmp     loc_1BA27 ;~ 01A2:B746
loc_1b749:
	// 6167 
cs=0x1a2;eip=0x00b749; 	T(al = 4;);	// 28596                  mov     al, 4 ;~ 01A2:B749
cs=0x1a2;eip=0x00b74b; 	J(CALL(sub_1ba35,0));	// 28597                  call    sub_1BA35 ;~ 01A2:B74B
cs=0x1a2;eip=0x00b74e; 	J(JNC(loc_1b753));	// 28598                  jnb     short loc_1B753 ;~ 01A2:B74E
cs=0x1a2;eip=0x00b750; 	J(JMP(loc_1ba27));	// 28599                  jmp     loc_1BA27 ;~ 01A2:B750
loc_1b753:
	// 6168 
cs=0x1a2;eip=0x00b753; 	T(al = 5;);	// 28603                  mov     al, 5 ;~ 01A2:B753
cs=0x1a2;eip=0x00b755; 	J(CALL(sub_1ba35,0));	// 28604                  call    sub_1BA35 ;~ 01A2:B755
cs=0x1a2;eip=0x00b758; 	J(JNC(loc_1b75d));	// 28605                  jnb     short loc_1B75D ;~ 01A2:B758
cs=0x1a2;eip=0x00b75a; 	J(JMP(loc_1ba27));	// 28606                  jmp     loc_1BA27 ;~ 01A2:B75A
loc_1b75d:
	// 6169 
cs=0x1a2;eip=0x00b75d; 	T(al = 6;);	// 28610                  mov     al, 6 ;~ 01A2:B75D
cs=0x1a2;eip=0x00b75f; 	J(CALL(sub_1ba35,0));	// 28611                  call    sub_1BA35 ;~ 01A2:B75F
cs=0x1a2;eip=0x00b762; 	J(JNC(loc_1b767));	// 28612                  jnb     short loc_1B767 ;~ 01A2:B762
cs=0x1a2;eip=0x00b764; 	J(JMP(loc_1ba27));	// 28613                  jmp     loc_1BA27 ;~ 01A2:B764
loc_1b767:
	// 6170 
cs=0x1a2;eip=0x00b767; 	T(bx = word_1f8ee;);	// 28617                  mov     bx, ds:word_1F8EE ;~ 01A2:B767
cs=0x1a2;eip=0x00b76b; 	T(ah = 0x3E;);	// 28618                  mov     ah, 3Eh ;~ 01A2:B76B
cs=0x1a2;eip=0x00b76d; 	S(_INT(0x21));	// 28619                  int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE ;~ 01A2:B76D
loc_1b76f:
	// 6171 
cs=0x1a2;eip=0x00b76f; 	T(CMP(byte_1f872, 0));	// 28623                  cmp     ds:byte_1F872, 0 ;~ 01A2:B76F
cs=0x1a2;eip=0x00b774; 	J(JZ(loc_1b779));	// 28624                  jz      short loc_1B779 ;~ 01A2:B774
cs=0x1a2;eip=0x00b776; 	J(JMP(loc_1b9ff));	// 28625                  jmp     loc_1B9FF ;~ 01A2:B776
loc_1b779:
	// 6172 
cs=0x1a2;eip=0x00b779; 	X(PUSH(es));	// 28629                  push    es ;~ 01A2:B779
cs=0x1a2;eip=0x00b77a; 	X(PUSH(ds));	// 28630                  push    ds ;~ 01A2:B77A
cs=0x1a2;eip=0x00b77b; 	T(ax = ds;);	// 28631                  mov     ax, ds ;~ 01A2:B77B
cs=0x1a2;eip=0x00b77d; 	T(es = ax;);	// 28632                  mov     es, ax ;~ 01A2:B77D
cs=0x1a2;eip=0x00b77f; 	T(ax = ss;);	// 28633                  mov     ax, ss ;~ 01A2:B77F
cs=0x1a2;eip=0x00b781; 	T(ds = ax;);	// 28634                  mov     ds, ax ;~ 01A2:B781
cs=0x1a2;eip=0x00b783; 	T(dx = 0x4CAF;);	// 28636                  mov     dx, 4CAFh ;~ 01A2:B783
cs=0x1a2;eip=0x00b786; 	T(STC);	// 28637                  stc ;~ 01A2:B786
cs=0x1a2;eip=0x00b787; 	J(CALL(sub_1c44a,0));	// 28638                  call    sub_1C44A ;~ 01A2:B787
cs=0x1a2;eip=0x00b78a; 	X(POP(ds));	// 28639                  pop     ds ;~ 01A2:B78A
cs=0x1a2;eip=0x00b78b; 	X(POP(es));	// 28641                  pop     es ;~ 01A2:B78B
cs=0x1a2;eip=0x00b78c; 	J(JNC(loc_1b791));	// 28642                  jnb     short loc_1B791 ;~ 01A2:B78C
cs=0x1a2;eip=0x00b78e; 	J(JMP(loc_1ba27));	// 28643                  jmp     loc_1BA27 ;~ 01A2:B78E
loc_1b791:
	// 6173 
cs=0x1a2;eip=0x00b791; 	T(dx = 0x16;);	// 28647                  mov     dx, 16h ;~ 01A2:B791
cs=0x1a2;eip=0x00b794; 	T(cx = 2;);	// 28648                  mov     cx, 2 ;~ 01A2:B794
cs=0x1a2;eip=0x00b797; 	T(bx = word_1f8ee;);	// 28649                  mov     bx, ds:word_1F8EE ;~ 01A2:B797
cs=0x1a2;eip=0x00b79b; 	J(CALL(sub_1c7d1,0));	// 28650                  call    near ptr sub_1C7D1 ;~ 01A2:B79B
cs=0x1a2;eip=0x00b79e; 	J(JNC(loc_1b7a3));	// 28651                  jnb     short loc_1B7A3 ;~ 01A2:B79E
cs=0x1a2;eip=0x00b7a0; 	J(JMP(loc_1ba27));	// 28652                  jmp     loc_1BA27 ;~ 01A2:B7A0
loc_1b7a3:
	// 6174 
cs=0x1a2;eip=0x00b7a3; 	T(dx = 0x16;);	// 28656                  mov     dx, 16h ;~ 01A2:B7A3
cs=0x1a2;eip=0x00b7a6; 	T(cx = 2;);	// 28657                  mov     cx, 2 ;~ 01A2:B7A6
cs=0x1a2;eip=0x00b7a9; 	T(bx = word_1f8ee;);	// 28658                  mov     bx, ds:word_1F8EE ;~ 01A2:B7A9
cs=0x1a2;eip=0x00b7ad; 	J(CALL(sub_1c7d1,0));	// 28659                  call    near ptr sub_1C7D1 ;~ 01A2:B7AD
cs=0x1a2;eip=0x00b7b0; 	J(JNC(loc_1b7b5));	// 28660                  jnb     short loc_1B7B5 ;~ 01A2:B7B0
cs=0x1a2;eip=0x00b7b2; 	J(JMP(loc_1ba27));	// 28661                  jmp     loc_1BA27 ;~ 01A2:B7B2
loc_1b7b5:
	// 6175 
cs=0x1a2;eip=0x00b7b5; 	T(si = 0x16;);	// 28665                  mov     si, 16h ;~ 01A2:B7B5
cs=0x1a2;eip=0x00b7b8; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 28666                  mov     ax, [si] ;~ 01A2:B7B8
cs=0x1a2;eip=0x00b7ba; 	X(MOV(*(raddr(ds,si)), ah));	// 28667                  mov     [si], ah ;~ 01A2:B7BA
cs=0x1a2;eip=0x00b7bc; 	X(MOV(*(raddr(ds,si+1)), al));	// 28668                  mov     [si+1], al ;~ 01A2:B7BC
cs=0x1a2;eip=0x00b7bf; 	T(ax = word_1f186;);	// 28669                  mov     ax, word_1F186 ;~ 01A2:B7BF
cs=0x1a2;eip=0x00b7c2; 	T(SHR(ax, 1));	// 28670                  shr     ax, 1 ;~ 01A2:B7C2
cs=0x1a2;eip=0x00b7c4; 	T(SHR(ax, 1));	// 28671                  shr     ax, 1 ;~ 01A2:B7C4
cs=0x1a2;eip=0x00b7c6; 	T(SHR(ax, 1));	// 28672                  shr     ax, 1 ;~ 01A2:B7C6
cs=0x1a2;eip=0x00b7c8; 	T(SHR(ax, 1));	// 28673                  shr     ax, 1 ;~ 01A2:B7C8
cs=0x1a2;eip=0x00b7ca; 	T(dx = ax;);	// 28674                  mov     dx, ax ;~ 01A2:B7CA
cs=0x1a2;eip=0x00b7cc; 	T(SHR(ax, 1));	// 28675                  shr     ax, 1 ;~ 01A2:B7CC
cs=0x1a2;eip=0x00b7ce; 	T(SHR(ax, 1));	// 28676                  shr     ax, 1 ;~ 01A2:B7CE
cs=0x1a2;eip=0x00b7d0; 	T(ADD(ax, dx));	// 28677                  add     ax, dx ;~ 01A2:B7D0
cs=0x1a2;eip=0x00b7d2; 	T(ADD(ax, seg_1f17a));	// 28678                  add     ax, seg_1F17A ;~ 01A2:B7D2
cs=0x1a2;eip=0x00b7d6; 	X(seg_1f176 = ax;);	// 28679                  mov     seg_1F176, ax ;~ 01A2:B7D6
cs=0x1a2;eip=0x00b7d9; 	X(word_1f178 = 0;);	// 28680                  mov     word_1F178, 0 ;~ 01A2:B7D9
cs=0x1a2;eip=0x00b7df; 	T(ax = seg_1f17a;);	// 28681                  mov     ax, seg_1F17A ;~ 01A2:B7DF
cs=0x1a2;eip=0x00b7e2; 	X(seg_1f17e = ax;);	// 28682                  mov     seg_1F17E, ax ;~ 01A2:B7E2
cs=0x1a2;eip=0x00b7e5; 	T(dx = word_1f17c;);	// 28683                  mov     dx, word_1F17C ;~ 01A2:B7E5
cs=0x1a2;eip=0x00b7e9; 	X(word_1f180 = dx;);	// 28684                  mov     word_1F180, dx ;~ 01A2:B7E9
cs=0x1a2;eip=0x00b7ed; 	X(word_1f72c = dx;);	// 28685                  mov     ds:word_1F72C, dx ;~ 01A2:B7ED
cs=0x1a2;eip=0x00b7f1; 	T(ax = word_1f186;);	// 28686                  mov     ax, word_1F186 ;~ 01A2:B7F1
cs=0x1a2;eip=0x00b7f4; 	T(SHR(ax, 1));	// 28687                  shr     ax, 1 ;~ 01A2:B7F4
cs=0x1a2;eip=0x00b7f6; 	T(SHR(ax, 1));	// 28688                  shr     ax, 1 ;~ 01A2:B7F6
cs=0x1a2;eip=0x00b7f8; 	T(SHR(ax, 1));	// 28689                  shr     ax, 1 ;~ 01A2:B7F8
cs=0x1a2;eip=0x00b7fa; 	T(SHR(ax, 1));	// 28690                  shr     ax, 1 ;~ 01A2:B7FA
cs=0x1a2;eip=0x00b7fc; 	X(word_1f72e = ax;);	// 28691                  mov     ds:word_1F72E, ax ;~ 01A2:B7FC
loc_1b7ff:
	// 6176 
cs=0x1a2;eip=0x00b7ff; 	T(dx = 0x10B6;);	// 28694                  mov     dx, 10B6h ;~ 01A2:B7FF
cs=0x1a2;eip=0x00b802; 	T(bx = word_1f8ee;);	// 28695                  mov     bx, ds:word_1F8EE ;~ 01A2:B802
cs=0x1a2;eip=0x00b806; 	T(cx = 0x120;);	// 28696                  mov     cx, 120h ;~ 01A2:B806
cs=0x1a2;eip=0x00b809; 	T(cx = cx;);	// 28697                  mov     cx, cx ;~ 01A2:B809
cs=0x1a2;eip=0x00b80b; 	J(CALL(sub_1c7d1,0));	// 28698                  call    near ptr sub_1C7D1 ;~ 01A2:B80B
cs=0x1a2;eip=0x00b80e; 	J(JNC(loc_1b813));	// 28699                  jnb     short loc_1B813 ;~ 01A2:B80E
cs=0x1a2;eip=0x00b810; 	J(JMP(loc_1ba27));	// 28700                  jmp     loc_1BA27 ;~ 01A2:B810
loc_1b813:
	// 6177 
cs=0x1a2;eip=0x00b813; 	T(si = 0x10B6;);	// 28704                  mov     si, 10B6h ;~ 01A2:B813
cs=0x1a2;eip=0x00b816; 	T(cl = 0x12;);	// 28705                  mov     cl, 12h ;~ 01A2:B816
cs=0x1a2;eip=0x00b818; 	T(es = seg_1f17e;);	// 28706                  mov     es, seg_1F17E ;~ 01A2:B818
cs=0x1a2;eip=0x00b81c; 	T(di = word_1f72c;);	// 28708                  mov     di, ds:word_1F72C ;~ 01A2:B81C
cs=0x1a2;eip=0x00b820; 	T(bp = di;);	// 28709                  mov     bp, di ;~ 01A2:B820
cs=0x1a2;eip=0x00b822; 	T(ADD(di, 0x48));	// 28710                  add     di, 48h ; 'H' ;~ 01A2:B822
loc_1b825:
	// 6178 
cs=0x1a2;eip=0x00b825; 	T(LODSW);	// 28713                  lodsw ;~ 01A2:B825
cs=0x1a2;eip=0x00b826; 	T(bx = ax;);	// 28714                  mov     bx, ax ;~ 01A2:B826
cs=0x1a2;eip=0x00b828; 	X(STOSW);	// 28715                  stosw ;~ 01A2:B828
cs=0x1a2;eip=0x00b829; 	T(LODSW);	// 28716                  lodsw ;~ 01A2:B829
cs=0x1a2;eip=0x00b82a; 	T(OR(bx, ax));	// 28717                  or      bx, ax ;~ 01A2:B82A
cs=0x1a2;eip=0x00b82c; 	X(MOV(*(dw*)(raddr(es,di+0x46)), ax));	// 28718                  mov     es:[di+46h], ax ;~ 01A2:B82C
cs=0x1a2;eip=0x00b830; 	T(LODSW);	// 28719                  lodsw ;~ 01A2:B830
cs=0x1a2;eip=0x00b831; 	T(OR(bx, ax));	// 28720                  or      bx, ax ;~ 01A2:B831
cs=0x1a2;eip=0x00b833; 	X(MOV(*(dw*)(raddr(es,di+0x8E)), ax));	// 28721                  mov     es:[di+8Eh], ax ;~ 01A2:B833
cs=0x1a2;eip=0x00b838; 	T(LODSW);	// 28722                  lodsw ;~ 01A2:B838
cs=0x1a2;eip=0x00b839; 	T(OR(bx, ax));	// 28723                  or      bx, ax ;~ 01A2:B839
cs=0x1a2;eip=0x00b83b; 	X(MOV(*(dw*)(raddr(es,di+0x0D6)), ax));	// 28724                  mov     es:[di+0D6h], ax ;~ 01A2:B83B
cs=0x1a2;eip=0x00b840; 	X(MOV(*(dw*)(raddr(es,bp+0)), bx));	// 28725                  mov     es:[bp+0], bx ;~ 01A2:B840
cs=0x1a2;eip=0x00b844; 	T(ADD(bp, 2));	// 28726                  add     bp, 2 ;~ 01A2:B844
cs=0x1a2;eip=0x00b847; 	T(LODSW);	// 28727                  lodsw ;~ 01A2:B847
cs=0x1a2;eip=0x00b848; 	T(bx = ax;);	// 28728                  mov     bx, ax ;~ 01A2:B848
cs=0x1a2;eip=0x00b84a; 	X(STOSW);	// 28729                  stosw ;~ 01A2:B84A
cs=0x1a2;eip=0x00b84b; 	T(LODSW);	// 28730                  lodsw ;~ 01A2:B84B
cs=0x1a2;eip=0x00b84c; 	T(OR(bx, ax));	// 28731                  or      bx, ax ;~ 01A2:B84C
cs=0x1a2;eip=0x00b84e; 	X(MOV(*(dw*)(raddr(es,di+0x46)), ax));	// 28732                  mov     es:[di+46h], ax ;~ 01A2:B84E
cs=0x1a2;eip=0x00b852; 	T(LODSW);	// 28733                  lodsw ;~ 01A2:B852
cs=0x1a2;eip=0x00b853; 	T(OR(bx, ax));	// 28734                  or      bx, ax ;~ 01A2:B853
cs=0x1a2;eip=0x00b855; 	X(MOV(*(dw*)(raddr(es,di+0x8E)), ax));	// 28735                  mov     es:[di+8Eh], ax ;~ 01A2:B855
cs=0x1a2;eip=0x00b85a; 	T(LODSW);	// 28736                  lodsw ;~ 01A2:B85A
cs=0x1a2;eip=0x00b85b; 	T(OR(bx, ax));	// 28737                  or      bx, ax ;~ 01A2:B85B
cs=0x1a2;eip=0x00b85d; 	X(MOV(*(dw*)(raddr(es,di+0x0D6)), ax));	// 28738                  mov     es:[di+0D6h], ax ;~ 01A2:B85D
cs=0x1a2;eip=0x00b862; 	X(MOV(*(dw*)(raddr(es,bp+0)), bx));	// 28739                  mov     es:[bp+0], bx ;~ 01A2:B862
cs=0x1a2;eip=0x00b866; 	T(ADD(bp, 2));	// 28740                  add     bp, 2 ;~ 01A2:B866
cs=0x1a2;eip=0x00b869; 	T(DEC(cl));	// 28741                  dec     cl ;~ 01A2:B869
cs=0x1a2;eip=0x00b86b; 	J(JNZ(loc_1b825));	// 28742                  jnz     short loc_1B825 ;~ 01A2:B86B
cs=0x1a2;eip=0x00b86d; 	T(ADD(bp, 0x120));	// 28743                  add     bp, 120h ;~ 01A2:B86D
cs=0x1a2;eip=0x00b871; 	X(word_1f72c = bp;);	// 28744                  mov     ds:word_1F72C, bp ;~ 01A2:B871
cs=0x1a2;eip=0x00b875; 	X(SUB(word_1f72e, 0x12));	// 28745                  sub     ds:word_1F72E, 12h ;~ 01A2:B875
cs=0x1a2;eip=0x00b87a; 	J(JNZ(loc_1b7ff));	// 28746                  jnz     short loc_1B7FF ;~ 01A2:B87A
cs=0x1a2;eip=0x00b87c; 	T(dx = 0x18;);	// 28747                  mov     dx, 18h ;~ 01A2:B87C
cs=0x1a2;eip=0x00b87f; 	T(cx = 2;);	// 28748                  mov     cx, 2 ;~ 01A2:B87F
cs=0x1a2;eip=0x00b882; 	T(bx = word_1f8ee;);	// 28749                  mov     bx, ds:word_1F8EE ;~ 01A2:B882
cs=0x1a2;eip=0x00b886; 	J(CALL(sub_1c7d1,0));	// 28750                  call    near ptr sub_1C7D1 ;~ 01A2:B886
cs=0x1a2;eip=0x00b889; 	J(JNC(loc_1b88e));	// 28752                  jnb     short loc_1B88E ;~ 01A2:B889
cs=0x1a2;eip=0x00b88b; 	J(JMP(loc_1ba27));	// 28753                  jmp     loc_1BA27 ;~ 01A2:B88B
loc_1b88e:
	// 6179 
cs=0x1a2;eip=0x00b88e; 	T(dx = 0x18;);	// 28757                  mov     dx, 18h ;~ 01A2:B88E
cs=0x1a2;eip=0x00b891; 	T(cx = 2;);	// 28758                  mov     cx, 2 ;~ 01A2:B891
cs=0x1a2;eip=0x00b894; 	T(bx = word_1f8ee;);	// 28759                  mov     bx, ds:word_1F8EE ;~ 01A2:B894
cs=0x1a2;eip=0x00b898; 	J(CALL(sub_1c7d1,0));	// 28760                  call    near ptr sub_1C7D1 ;~ 01A2:B898
cs=0x1a2;eip=0x00b89b; 	J(JNC(loc_1b8a0));	// 28761                  jnb     short loc_1B8A0 ;~ 01A2:B89B
cs=0x1a2;eip=0x00b89d; 	J(JMP(loc_1ba27));	// 28762                  jmp     loc_1BA27 ;~ 01A2:B89D
loc_1b8a0:
	// 6180 
cs=0x1a2;eip=0x00b8a0; 	T(si = 0x18;);	// 28766                  mov     si, 18h ;~ 01A2:B8A0
cs=0x1a2;eip=0x00b8a3; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 28767                  mov     ax, [si] ;~ 01A2:B8A3
cs=0x1a2;eip=0x00b8a5; 	X(MOV(*(raddr(ds,si)), ah));	// 28768                  mov     [si], ah ;~ 01A2:B8A5
cs=0x1a2;eip=0x00b8a7; 	X(MOV(*(raddr(ds,si+1)), al));	// 28769                  mov     [si+1], al ;~ 01A2:B8A7
cs=0x1a2;eip=0x00b8aa; 	T(dx = word_1f178;);	// 28770                  mov     dx, word_1F178 ;~ 01A2:B8AA
cs=0x1a2;eip=0x00b8ae; 	X(word_1f184 = dx;);	// 28771                  mov     word_1F184, dx ;~ 01A2:B8AE
cs=0x1a2;eip=0x00b8b2; 	X(word_1f72c = dx;);	// 28772                  mov     ds:word_1F72C, dx ;~ 01A2:B8B2
cs=0x1a2;eip=0x00b8b6; 	T(dx = seg_1f176;);	// 28773                  mov     dx, seg_1F176 ;~ 01A2:B8B6
cs=0x1a2;eip=0x00b8ba; 	X(seg_1f182 = dx;);	// 28774                  mov     seg_1F182, dx ;~ 01A2:B8BA
cs=0x1a2;eip=0x00b8be; 	T(ax = word_1f188;);	// 28775                  mov     ax, word_1F188 ;~ 01A2:B8BE
cs=0x1a2;eip=0x00b8c1; 	T(SHR(ax, 1));	// 28776                  shr     ax, 1 ;~ 01A2:B8C1
cs=0x1a2;eip=0x00b8c3; 	T(SHR(ax, 1));	// 28777                  shr     ax, 1 ;~ 01A2:B8C3
cs=0x1a2;eip=0x00b8c5; 	T(SHR(ax, 1));	// 28778                  shr     ax, 1 ;~ 01A2:B8C5
cs=0x1a2;eip=0x00b8c7; 	T(SHR(ax, 1));	// 28779                  shr     ax, 1 ;~ 01A2:B8C7
cs=0x1a2;eip=0x00b8c9; 	X(word_1f72e = ax;);	// 28780                  mov     ds:word_1F72E, ax ;~ 01A2:B8C9
loc_1b8cc:
	// 6181 
cs=0x1a2;eip=0x00b8cc; 	T(dx = 0x10B6;);	// 28783                  mov     dx, 10B6h ;~ 01A2:B8CC
cs=0x1a2;eip=0x00b8cf; 	T(bx = word_1f8ee;);	// 28784                  mov     bx, ds:word_1F8EE ;~ 01A2:B8CF
cs=0x1a2;eip=0x00b8d3; 	T(cx = 0x200;);	// 28785                  mov     cx, 200h ;~ 01A2:B8D3
cs=0x1a2;eip=0x00b8d6; 	T(cx = cx;);	// 28786                  mov     cx, cx ;~ 01A2:B8D6
cs=0x1a2;eip=0x00b8d8; 	J(CALL(sub_1c7d1,0));	// 28787                  call    near ptr sub_1C7D1 ;~ 01A2:B8D8
cs=0x1a2;eip=0x00b8db; 	J(JNC(loc_1b8e0));	// 28788                  jnb     short loc_1B8E0 ;~ 01A2:B8DB
cs=0x1a2;eip=0x00b8dd; 	J(JMP(loc_1ba27));	// 28789                  jmp     loc_1BA27 ;~ 01A2:B8DD
loc_1b8e0:
	// 6182 
cs=0x1a2;eip=0x00b8e0; 	T(si = 0x10B6;);	// 28793                  mov     si, 10B6h ;~ 01A2:B8E0
cs=0x1a2;eip=0x00b8e3; 	T(cl = 0x20;);	// 28794                  mov     cl, 20h ; ' ' ;~ 01A2:B8E3
cs=0x1a2;eip=0x00b8e5; 	T(es = seg_1f182;);	// 28795                  mov     es, seg_1F182 ;~ 01A2:B8E5
cs=0x1a2;eip=0x00b8e9; 	T(di = word_1f72c;);	// 28797                  mov     di, ds:word_1F72C ;~ 01A2:B8E9
cs=0x1a2;eip=0x00b8ed; 	T(bp = di;);	// 28798                  mov     bp, di ;~ 01A2:B8ED
cs=0x1a2;eip=0x00b8ef; 	T(ADD(di, 0x80));	// 28799                  add     di, 80h ;~ 01A2:B8EF
loc_1b8f3:
	// 6183 
cs=0x1a2;eip=0x00b8f3; 	T(LODSW);	// 28802                  lodsw ;~ 01A2:B8F3
cs=0x1a2;eip=0x00b8f4; 	T(bx = ax;);	// 28803                  mov     bx, ax ;~ 01A2:B8F4
cs=0x1a2;eip=0x00b8f6; 	X(STOSW);	// 28804                  stosw ;~ 01A2:B8F6
cs=0x1a2;eip=0x00b8f7; 	T(LODSW);	// 28805                  lodsw ;~ 01A2:B8F7
cs=0x1a2;eip=0x00b8f8; 	T(OR(bx, ax));	// 28806                  or      bx, ax ;~ 01A2:B8F8
cs=0x1a2;eip=0x00b8fa; 	X(MOV(*(dw*)(raddr(es,di+0x7E)), ax));	// 28807                  mov     es:[di+7Eh], ax ;~ 01A2:B8FA
cs=0x1a2;eip=0x00b8fe; 	T(LODSW);	// 28808                  lodsw ;~ 01A2:B8FE
cs=0x1a2;eip=0x00b8ff; 	T(OR(bx, ax));	// 28809                  or      bx, ax ;~ 01A2:B8FF
cs=0x1a2;eip=0x00b901; 	X(MOV(*(dw*)(raddr(es,di+0x0FE)), ax));	// 28810                  mov     es:[di+0FEh], ax ;~ 01A2:B901
cs=0x1a2;eip=0x00b906; 	T(LODSW);	// 28811                  lodsw ;~ 01A2:B906
cs=0x1a2;eip=0x00b907; 	T(OR(bx, ax));	// 28812                  or      bx, ax ;~ 01A2:B907
cs=0x1a2;eip=0x00b909; 	X(MOV(*(dw*)(raddr(es,di+0x17E)), ax));	// 28813                  mov     es:[di+17Eh], ax ;~ 01A2:B909
cs=0x1a2;eip=0x00b90e; 	X(MOV(*(dw*)(raddr(es,bp+0)), bx));	// 28814                  mov     es:[bp+0], bx ;~ 01A2:B90E
cs=0x1a2;eip=0x00b912; 	T(ADD(bp, 2));	// 28815                  add     bp, 2 ;~ 01A2:B912
cs=0x1a2;eip=0x00b915; 	T(LODSW);	// 28816                  lodsw ;~ 01A2:B915
cs=0x1a2;eip=0x00b916; 	T(bx = ax;);	// 28817                  mov     bx, ax ;~ 01A2:B916
cs=0x1a2;eip=0x00b918; 	X(STOSW);	// 28818                  stosw ;~ 01A2:B918
cs=0x1a2;eip=0x00b919; 	T(LODSW);	// 28819                  lodsw ;~ 01A2:B919
cs=0x1a2;eip=0x00b91a; 	T(OR(bx, ax));	// 28820                  or      bx, ax ;~ 01A2:B91A
cs=0x1a2;eip=0x00b91c; 	X(MOV(*(dw*)(raddr(es,di+0x7E)), ax));	// 28821                  mov     es:[di+7Eh], ax ;~ 01A2:B91C
cs=0x1a2;eip=0x00b920; 	T(LODSW);	// 28822                  lodsw ;~ 01A2:B920
cs=0x1a2;eip=0x00b921; 	T(OR(bx, ax));	// 28823                  or      bx, ax ;~ 01A2:B921
cs=0x1a2;eip=0x00b923; 	X(MOV(*(dw*)(raddr(es,di+0x0FE)), ax));	// 28824                  mov     es:[di+0FEh], ax ;~ 01A2:B923
cs=0x1a2;eip=0x00b928; 	T(LODSW);	// 28825                  lodsw ;~ 01A2:B928
cs=0x1a2;eip=0x00b929; 	T(OR(bx, ax));	// 28826                  or      bx, ax ;~ 01A2:B929
cs=0x1a2;eip=0x00b92b; 	X(MOV(*(dw*)(raddr(es,di+0x17E)), ax));	// 28827                  mov     es:[di+17Eh], ax ;~ 01A2:B92B
cs=0x1a2;eip=0x00b930; 	X(MOV(*(dw*)(raddr(es,bp+0)), bx));	// 28828                  mov     es:[bp+0], bx ;~ 01A2:B930
cs=0x1a2;eip=0x00b934; 	T(ADD(bp, 2));	// 28829                  add     bp, 2 ;~ 01A2:B934
cs=0x1a2;eip=0x00b937; 	T(DEC(cl));	// 28830                  dec     cl ;~ 01A2:B937
cs=0x1a2;eip=0x00b939; 	J(JNZ(loc_1b8f3));	// 28831                  jnz     short loc_1B8F3 ;~ 01A2:B939
cs=0x1a2;eip=0x00b93b; 	T(ADD(bp, 0x200));	// 28832                  add     bp, 200h ;~ 01A2:B93B
cs=0x1a2;eip=0x00b93f; 	X(word_1f72c = bp;);	// 28833                  mov     ds:word_1F72C, bp ;~ 01A2:B93F
cs=0x1a2;eip=0x00b943; 	X(SUB(word_1f72e, 0x20));	// 28834                  sub     ds:word_1F72E, 20h ; ' ' ;~ 01A2:B943
cs=0x1a2;eip=0x00b948; 	J(JNZ(loc_1b8cc));	// 28835                  jnz     short loc_1B8CC ;~ 01A2:B948
cs=0x1a2;eip=0x00b94a; 	T(bx = word_1f8ee;);	// 28836                  mov     bx, ds:word_1F8EE ;~ 01A2:B94A
cs=0x1a2;eip=0x00b94e; 	T(ah = 0x3E;);	// 28837                  mov     ah, 3Eh ;~ 01A2:B94E
cs=0x1a2;eip=0x00b950; 	S(_INT(0x21));	// 28838                  int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE ;~ 01A2:B950
cs=0x1a2;eip=0x00b952; 	T(si = 0x4CD3;);	// 28840                  mov     si, 4CD3h ;~ 01A2:B952
cs=0x1a2;eip=0x00b955; 	T(al = byte_1f87b;);	// 28841                  mov     al, ds:byte_1F87B ;~ 01A2:B955
cs=0x1a2;eip=0x00b958; 	T(XOR(ah, ah));	// 28842                  xor     ah, ah ;~ 01A2:B958
cs=0x1a2;eip=0x00b95a; 	T(ADD(ax, ax));	// 28843                  add     ax, ax ;~ 01A2:B95A
cs=0x1a2;eip=0x00b95c; 	T(ADD(si, ax));	// 28844                  add     si, ax ;~ 01A2:B95C
cs=0x1a2;eip=0x00b95e; 	T(MOV(dx, *(dw*)(raddr(ss,si))));	// 28845                  mov     dx, ss:[si] ;~ 01A2:B95E
cs=0x1a2;eip=0x00b961; 	X(PUSH(es));	// 28846                  push    es ;~ 01A2:B961
cs=0x1a2;eip=0x00b962; 	X(PUSH(ds));	// 28847                  push    ds ;~ 01A2:B962
cs=0x1a2;eip=0x00b963; 	T(ax = ds;);	// 28848                  mov     ax, ds ;~ 01A2:B963
cs=0x1a2;eip=0x00b965; 	T(es = ax;);	// 28849                  mov     es, ax ;~ 01A2:B965
cs=0x1a2;eip=0x00b967; 	T(ax = ss;);	// 28851                  mov     ax, ss ;~ 01A2:B967
cs=0x1a2;eip=0x00b969; 	T(ds = ax;);	// 28852                  mov     ds, ax ;~ 01A2:B969
cs=0x1a2;eip=0x00b96b; 	T(STC);	// 28854                  stc ;~ 01A2:B96B
cs=0x1a2;eip=0x00b96c; 	J(CALL(sub_1c44a,0));	// 28855                  call    sub_1C44A ;~ 01A2:B96C
cs=0x1a2;eip=0x00b96f; 	X(POP(ds));	// 28856                  pop     ds ;~ 01A2:B96F
cs=0x1a2;eip=0x00b970; 	X(POP(es));	// 28858                  pop     es ;~ 01A2:B970
cs=0x1a2;eip=0x00b971; 	J(JNC(loc_1b976));	// 28860                  jnb     short loc_1B976 ;~ 01A2:B971
cs=0x1a2;eip=0x00b973; 	J(JMP(loc_1ba27));	// 28861                  jmp     loc_1BA27 ;~ 01A2:B973
loc_1b976:
	// 6184 
cs=0x1a2;eip=0x00b976; 	T(dx = 0x234;);	// 28865                  mov     dx, 234h ;~ 01A2:B976
cs=0x1a2;eip=0x00b979; 	T(cx = 2;);	// 28866                  mov     cx, 2 ;~ 01A2:B979
cs=0x1a2;eip=0x00b97c; 	T(bx = word_1f8ee;);	// 28867                  mov     bx, ds:word_1F8EE ;~ 01A2:B97C
cs=0x1a2;eip=0x00b980; 	J(CALL(sub_1c7d1,0));	// 28868                  call    near ptr sub_1C7D1 ;~ 01A2:B980
cs=0x1a2;eip=0x00b983; 	J(JNC(loc_1b988));	// 28870                  jnb     short loc_1B988 ;~ 01A2:B983
cs=0x1a2;eip=0x00b985; 	J(JMP(loc_1ba27));	// 28871                  jmp     loc_1BA27 ;~ 01A2:B985
loc_1b988:
	// 6185 
cs=0x1a2;eip=0x00b988; 	T(si = 0x234;);	// 28875                  mov     si, 234h ;~ 01A2:B988
cs=0x1a2;eip=0x00b98b; 	T(MOV(cx, *(dw*)(raddr(ds,si))));	// 28876                  mov     cx, [si] ;~ 01A2:B98B
cs=0x1a2;eip=0x00b98d; 	T(XCHG(ch, cl));	// 28877                  xchg    ch, cl ;~ 01A2:B98D
cs=0x1a2;eip=0x00b98f; 	X(PUSH(cx));	// 28878                  push    cx ;~ 01A2:B98F
cs=0x1a2;eip=0x00b990; 	T(SHL(cx, 1));	// 28879                  shl     cx, 1 ;~ 01A2:B990
cs=0x1a2;eip=0x00b992; 	T(bx = word_1f8ee;);	// 28880                  mov     bx, ds:word_1F8EE ;~ 01A2:B992
cs=0x1a2;eip=0x00b996; 	T(dx = word_1f1d0;);	// 28881                  mov     dx, word_1F1D0 ;~ 01A2:B996
cs=0x1a2;eip=0x00b99a; 	T(ax = ss;);	// 28882                  mov     ax, ss ;~ 01A2:B99A
cs=0x1a2;eip=0x00b99c; 	T(ds = ax;);	// 28883                  mov     ds, ax ;~ 01A2:B99C
cs=0x1a2;eip=0x00b99e; 	T(cx = cx;);	// 28885                  mov     cx, cx ;~ 01A2:B99E
cs=0x1a2;eip=0x00b9a0; 	J(CALL(sub_1c7d1,0));	// 28886                  call    near ptr sub_1C7D1 ;~ 01A2:B9A0
cs=0x1a2;eip=0x00b9a3; 	J(JNC(loc_1b9a8));	// 28888                  jnb     short loc_1B9A8 ;~ 01A2:B9A3
cs=0x1a2;eip=0x00b9a5; 	J(JMP(loc_1ba27));	// 28889                  jmp     loc_1BA27 ;~ 01A2:B9A5
loc_1b9a8:
	// 6186 
cs=0x1a2;eip=0x00b9a8; 	T(ax = seg_offset(seg002););	// 28893                  mov     ax, seg seg002 ;~ 01A2:B9A8
cs=0x1a2;eip=0x00b9ab; 	T(ds = ax;);	// 28894                  mov     ds, ax ;~ 01A2:B9AB
cs=0x1a2;eip=0x00b9ad; 	X(POP(cx));	// 28896                  pop     cx ;~ 01A2:B9AD
cs=0x1a2;eip=0x00b9ae; 	J(JC(loc_1ba27));	// 28897                  jb      short loc_1BA27 ;~ 01A2:B9AE
cs=0x1a2;eip=0x00b9b0; 	T(si = word_1f1d0;);	// 28898                  mov     si, word_1F1D0 ;~ 01A2:B9B0
cs=0x1a2;eip=0x00b9b4; 	T(di = si;);	// 28899                  mov     di, si ;~ 01A2:B9B4
cs=0x1a2;eip=0x00b9b6; 	T(ax = ss;);	// 28900                  mov     ax, ss ;~ 01A2:B9B6
cs=0x1a2;eip=0x00b9b8; 	T(ds = ax;);	// 28901                  mov     ds, ax ;~ 01A2:B9B8
cs=0x1a2;eip=0x00b9ba; 	T(es = ax;);	// 28903                  mov     es, ax ;~ 01A2:B9BA
loc_1b9bc:
	// 6187 
cs=0x1a2;eip=0x00b9bc; 	T(LODSW);	// 28906                  lodsw ;~ 01A2:B9BC
cs=0x1a2;eip=0x00b9bd; 	T(XCHG(ah, al));	// 28907                  xchg    ah, al ;~ 01A2:B9BD
cs=0x1a2;eip=0x00b9bf; 	X(STOSW);	// 28908                  stosw ;~ 01A2:B9BF
cs=0x1a2;eip=0x00b9c0; 	J(LOOP(loc_1b9bc));	// 28909                  loop    loc_1B9BC ;~ 01A2:B9C0
cs=0x1a2;eip=0x00b9c2; 	T(ax = seg_offset(seg002););	// 28910                  mov     ax, seg seg002 ;~ 01A2:B9C2
cs=0x1a2;eip=0x00b9c5; 	T(ds = ax;);	// 28911                  mov     ds, ax ;~ 01A2:B9C5
cs=0x1a2;eip=0x00b9c7; 	T(dx = 0x234;);	// 28913                  mov     dx, 234h ;~ 01A2:B9C7
cs=0x1a2;eip=0x00b9ca; 	T(cx = 2;);	// 28914                  mov     cx, 2 ;~ 01A2:B9CA
cs=0x1a2;eip=0x00b9cd; 	T(bx = word_1f8ee;);	// 28915                  mov     bx, ds:word_1F8EE ;~ 01A2:B9CD
cs=0x1a2;eip=0x00b9d1; 	J(CALL(sub_1c7d1,0));	// 28916                  call    near ptr sub_1C7D1 ;~ 01A2:B9D1
cs=0x1a2;eip=0x00b9d4; 	J(JC(loc_1ba27));	// 28918                  jb      short loc_1BA27 ;~ 01A2:B9D4
cs=0x1a2;eip=0x00b9d6; 	T(si = 0x234;);	// 28919                  mov     si, 234h ;~ 01A2:B9D6
cs=0x1a2;eip=0x00b9d9; 	T(MOV(cx, *(dw*)(raddr(ds,si))));	// 28920                  mov     cx, [si] ;~ 01A2:B9D9
cs=0x1a2;eip=0x00b9db; 	T(XCHG(ch, cl));	// 28921                  xchg    ch, cl ;~ 01A2:B9DB
cs=0x1a2;eip=0x00b9dd; 	T(bx = word_1f8ee;);	// 28922                  mov     bx, ds:word_1F8EE ;~ 01A2:B9DD
cs=0x1a2;eip=0x00b9e1; 	T(dx = word_1f1d2;);	// 28923                  mov     dx, word_1F1D2 ;~ 01A2:B9E1
cs=0x1a2;eip=0x00b9e5; 	T(ax = ss;);	// 28924                  mov     ax, ss ;~ 01A2:B9E5
cs=0x1a2;eip=0x00b9e7; 	T(ds = ax;);	// 28925                  mov     ds, ax ;~ 01A2:B9E7
cs=0x1a2;eip=0x00b9e9; 	T(cx = cx;);	// 28927                  mov     cx, cx ;~ 01A2:B9E9
cs=0x1a2;eip=0x00b9eb; 	J(CALL(sub_1c7d1,0));	// 28928                  call    near ptr sub_1C7D1 ;~ 01A2:B9EB
cs=0x1a2;eip=0x00b9ee; 	J(JC(loc_1ba27));	// 28930                  jb      short loc_1BA27 ;~ 01A2:B9EE
cs=0x1a2;eip=0x00b9f0; 	T(ax = seg_offset(seg002););	// 28931                  mov     ax, seg seg002 ;~ 01A2:B9F0
cs=0x1a2;eip=0x00b9f3; 	T(ds = ax;);	// 28932                  mov     ds, ax ;~ 01A2:B9F3
cs=0x1a2;eip=0x00b9f5; 	J(JC(loc_1ba27));	// 28934                  jb      short loc_1BA27 ;~ 01A2:B9F5
cs=0x1a2;eip=0x00b9f7; 	T(bx = word_1f8ee;);	// 28935                  mov     bx, ds:word_1F8EE ;~ 01A2:B9F7
cs=0x1a2;eip=0x00b9fb; 	T(ah = 0x3E;);	// 28936                  mov     ah, 3Eh ;~ 01A2:B9FB
cs=0x1a2;eip=0x00b9fd; 	S(_INT(0x21));	// 28937                  int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE ;~ 01A2:B9FD
loc_1b9ff:
	// 6188 
cs=0x1a2;eip=0x00b9ff; 	T(CMP(byte_1f87a, 0));	// 28941                  cmp     ds:byte_1F87A, 0 ;~ 01A2:B9FF
cs=0x1a2;eip=0x00ba04; 	J(JZ(locret_1ba26));	// 28942                  jz      short locret_1BA26 ;~ 01A2:BA04
cs=0x1a2;eip=0x00ba06; 	X(word_1f8f2 = 0x0FFFF;);	// 28943                  mov     ds:word_1F8F2, 0FFFFh ;~ 01A2:BA06
cs=0x1a2;eip=0x00ba0c; 	J(CALL(sub_1c238,0));	// 28944                  call    sub_1C238 ;~ 01A2:BA0C
cs=0x1a2;eip=0x00ba0f; 	J(JNS(locret_1ba26));	// 28945                  jns     short locret_1BA26 ;~ 01A2:BA0F
cs=0x1a2;eip=0x00ba11; 	J(CALL(sub_1d445,0));	// 28946                  call    sub_1D445 ;~ 01A2:BA11
cs=0x1a2;eip=0x00ba14; 	J(CALL(sub_13514,0));	// 28947                  call    sub_13514 ;~ 01A2:BA14
cs=0x1a2;eip=0x00ba17; 	J(CALL(sub_13618,0));	// 28948                  call    sub_13618 ;~ 01A2:BA17
cs=0x1a2;eip=0x00ba1a; 	T(dx = 6;);	// 28949                  mov     dx, 6 ;~ 01A2:BA1A
cs=0x1a2;eip=0x00ba1d; 	T(cx = 0x14;);	// 28950                  mov     cx, 14h ;~ 01A2:BA1D
cs=0x1a2;eip=0x00ba20; 	J(CALL(sub_1c3e8,0));	// 28951                  call    sub_1C3E8 ;~ 01A2:BA20
cs=0x1a2;eip=0x00ba23; 	J(return start(m2c::kloc_1006c, _state););	// 28952                  jmp     loc_1006C ;~ 01A2:BA23
locret_1ba26:
	// 6189 
cs=0x1a2;eip=0x00ba26; 	J(RETN(0));	// 28957                  retn ;~ 01A2:BA26
loc_1ba27:
	// 6190 
cs=0x1a2;eip=0x00ba27; 	T(bx = word_1f8ee;);	// 28962                  mov     bx, ds:word_1F8EE ;~ 01A2:BA27
cs=0x1a2;eip=0x00ba2b; 	T(ah = 0x3E;);	// 28963                  mov     ah, 3Eh ;~ 01A2:BA2B
cs=0x1a2;eip=0x00ba2d; 	S(_INT(0x21));	// 28964                  int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE ;~ 01A2:BA2D
cs=0x1a2;eip=0x00ba2f; 	T(ax = 0x0FFFF;);	// 28966                  mov     ax, 0FFFFh ;~ 01A2:BA2F
cs=0x1a2;eip=0x00ba32; 	T(OR(ax, ax));	// 28967                  or      ax, ax ;~ 01A2:BA32
cs=0x1a2;eip=0x00ba34; 	J(RETN(0));	// 28968                  retn ;~ 01A2:BA34

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1b572: 	goto loc_1b572;
        case m2c::kloc_1b58a: 	goto loc_1b58a;
        case m2c::kloc_1b59d: 	goto loc_1b59d;
        case m2c::kloc_1b5b8: 	goto loc_1b5b8;
        case m2c::kloc_1b5d4: 	goto loc_1b5d4;
        case m2c::kloc_1b5f0: 	goto loc_1b5f0;
        case m2c::kloc_1b60c: 	goto loc_1b60c;
        case m2c::kloc_1b628: 	goto loc_1b628;
        case m2c::kloc_1b644: 	goto loc_1b644;
        case m2c::kloc_1b658: 	goto loc_1b658;
        case m2c::kloc_1b67a: 	goto loc_1b67a;
        case m2c::kloc_1b684: 	goto loc_1b684;
        case m2c::kloc_1b696: 	goto loc_1b696;
        case m2c::kloc_1b69c: 	goto loc_1b69c;
        case m2c::kloc_1b6bb: 	goto loc_1b6bb;
        case m2c::kloc_1b6ce: 	goto loc_1b6ce;
        case m2c::kloc_1b6e0: 	goto loc_1b6e0;
        case m2c::kloc_1b6f3: 	goto loc_1b6f3;
        case m2c::kloc_1b706: 	goto loc_1b706;
        case m2c::kloc_1b711: 	goto loc_1b711;
        case m2c::kloc_1b720: 	goto loc_1b720;
        case m2c::kloc_1b73f: 	goto loc_1b73f;
        case m2c::kloc_1b749: 	goto loc_1b749;
        case m2c::kloc_1b753: 	goto loc_1b753;
        case m2c::kloc_1b75d: 	goto loc_1b75d;
        case m2c::kloc_1b767: 	goto loc_1b767;
        case m2c::kloc_1b76f: 	goto loc_1b76f;
        case m2c::kloc_1b779: 	goto loc_1b779;
        case m2c::kloc_1b791: 	goto loc_1b791;
        case m2c::kloc_1b7a3: 	goto loc_1b7a3;
        case m2c::kloc_1b7b5: 	goto loc_1b7b5;
        case m2c::kloc_1b7ff: 	goto loc_1b7ff;
        case m2c::kloc_1b813: 	goto loc_1b813;
        case m2c::kloc_1b825: 	goto loc_1b825;
        case m2c::kloc_1b88e: 	goto loc_1b88e;
        case m2c::kloc_1b8a0: 	goto loc_1b8a0;
        case m2c::kloc_1b8cc: 	goto loc_1b8cc;
        case m2c::kloc_1b8e0: 	goto loc_1b8e0;
        case m2c::kloc_1b8f3: 	goto loc_1b8f3;
        case m2c::kloc_1b976: 	goto loc_1b976;
        case m2c::kloc_1b988: 	goto loc_1b988;
        case m2c::kloc_1b9a8: 	goto loc_1b9a8;
        case m2c::kloc_1b9bc: 	goto loc_1b9bc;
        case m2c::kloc_1b9ff: 	goto loc_1b9ff;
        case m2c::kloc_1ba27: 	goto loc_1ba27;
        case m2c::klocret_1ba26: 	goto locret_1ba26;
        case m2c::ksub_1b568: 	goto sub_1b568;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1ba35(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1ba35:
    _begin:
cs=0x1a2;eip=0x00ba35; 	X(PUSH(ax));	// 28978                  push    ax ;~ 01A2:BA35
cs=0x1a2;eip=0x00ba36; 	J(CALL(sub_14060,0));	// 28979                  call    sub_14060 ;~ 01A2:BA36
cs=0x1a2;eip=0x00ba39; 	T(bp = di;);	// 28980                  mov     bp, di ;~ 01A2:BA39
cs=0x1a2;eip=0x00ba3b; 	T(ADD(di, 8));	// 28981                  add     di, 8 ;~ 01A2:BA3B
cs=0x1a2;eip=0x00ba3e; 	X(PUSH(di));	// 28982                  push    di ;~ 01A2:BA3E
cs=0x1a2;eip=0x00ba3f; 	X(PUSH(si));	// 28983                  push    si ;~ 01A2:BA3F
cs=0x1a2;eip=0x00ba40; 	X(PUSH(bx));	// 28984                  push    bx ;~ 01A2:BA40
cs=0x1a2;eip=0x00ba41; 	X(PUSH(bp));	// 28985                  push    bp ;~ 01A2:BA41
cs=0x1a2;eip=0x00ba42; 	T(dx = di;);	// 28986                  mov     dx, di ;~ 01A2:BA42
cs=0x1a2;eip=0x00ba44; 	T(cx = 4;);	// 28987                  mov     cx, 4 ;~ 01A2:BA44
cs=0x1a2;eip=0x00ba47; 	T(bx = word_1f8ee;);	// 28988                  mov     bx, ds:word_1F8EE ;~ 01A2:BA47
cs=0x1a2;eip=0x00ba4b; 	J(CALL(sub_1c7d1,0));	// 28989                  call    near ptr sub_1C7D1 ;~ 01A2:BA4B
cs=0x1a2;eip=0x00ba4e; 	X(POP(bp));	// 28990                  pop     bp ;~ 01A2:BA4E
cs=0x1a2;eip=0x00ba4f; 	X(POP(bx));	// 28991                  pop     bx ;~ 01A2:BA4F
cs=0x1a2;eip=0x00ba50; 	X(POP(si));	// 28992                  pop     si ;~ 01A2:BA50
cs=0x1a2;eip=0x00ba51; 	X(POP(di));	// 28993                  pop     di ;~ 01A2:BA51
cs=0x1a2;eip=0x00ba52; 	J(JNC(loc_1ba57));	// 28994                  jnb     short loc_1BA57 ;~ 01A2:BA52
cs=0x1a2;eip=0x00ba54; 	J(JMP(loc_1bb64));	// 28995                  jmp     loc_1BB64 ;~ 01A2:BA54
loc_1ba57:
	// 6191 
cs=0x1a2;eip=0x00ba57; 	X(POP(ax));	// 28999                  pop     ax ;~ 01A2:BA57
cs=0x1a2;eip=0x00ba58; 	X(PUSH(ax));	// 29000                  push    ax ;~ 01A2:BA58
cs=0x1a2;eip=0x00ba59; 	T(XOR(ah, ah));	// 29001                  xor     ah, ah ;~ 01A2:BA59
cs=0x1a2;eip=0x00ba5b; 	T(ADD(ax, ax));	// 29002                  add     ax, ax ;~ 01A2:BA5B
cs=0x1a2;eip=0x00ba5d; 	X(PUSH(bp));	// 29003                  push    bp ;~ 01A2:BA5D
cs=0x1a2;eip=0x00ba5e; 	T(bp = 0x4020;);	// 29004                  mov     bp, 4020h ;~ 01A2:BA5E
cs=0x1a2;eip=0x00ba61; 	T(ADD(bp, ax));	// 29005                  add     bp, ax ;~ 01A2:BA61
cs=0x1a2;eip=0x00ba63; 	T(MOV(ax, *(dw*)(raddr(ds,di+2))));	// 29006                  mov     ax, [di+2] ;~ 01A2:BA63
cs=0x1a2;eip=0x00ba66; 	T(XCHG(al, ah));	// 29007                  xchg    al, ah ;~ 01A2:BA66
cs=0x1a2;eip=0x00ba68; 	T(CMP(ax, *(dw*)(raddr(ss,bp+0))));	// 29008                  cmp     ax, [bp+0] ;~ 01A2:BA68
cs=0x1a2;eip=0x00ba6b; 	J(JC(loc_1ba6e));	// 29009                  jb      short loc_1BA6E ;~ 01A2:BA6B
cs=0x1a2;eip=0x00ba6d; 	T(NOP);	// 29010                  nop ;~ 01A2:BA6D
loc_1ba6e:
	// 6192 
cs=0x1a2;eip=0x00ba6e; 	X(POP(bp));	// 29013                  pop     bp ;~ 01A2:BA6E
cs=0x1a2;eip=0x00ba6f; 	X(PUSH(di));	// 29014                  push    di ;~ 01A2:BA6F
cs=0x1a2;eip=0x00ba70; 	X(PUSH(si));	// 29015                  push    si ;~ 01A2:BA70
cs=0x1a2;eip=0x00ba71; 	X(PUSH(bx));	// 29016                  push    bx ;~ 01A2:BA71
cs=0x1a2;eip=0x00ba72; 	X(PUSH(bp));	// 29017                  push    bp ;~ 01A2:BA72
cs=0x1a2;eip=0x00ba73; 	T(dx = word_1f19a;);	// 29018                  mov     dx, word_1F19A ;~ 01A2:BA73
cs=0x1a2;eip=0x00ba77; 	T(cx = 6;);	// 29019                  mov     cx, 6 ;~ 01A2:BA77
cs=0x1a2;eip=0x00ba7a; 	T(bx = word_1f8ee;);	// 29020                  mov     bx, ds:word_1F8EE ;~ 01A2:BA7A
cs=0x1a2;eip=0x00ba7e; 	J(CALL(sub_1c7d1,0));	// 29021                  call    near ptr sub_1C7D1 ;~ 01A2:BA7E
cs=0x1a2;eip=0x00ba81; 	X(POP(bp));	// 29022                  pop     bp ;~ 01A2:BA81
cs=0x1a2;eip=0x00ba82; 	X(POP(bx));	// 29023                  pop     bx ;~ 01A2:BA82
cs=0x1a2;eip=0x00ba83; 	X(POP(si));	// 29024                  pop     si ;~ 01A2:BA83
cs=0x1a2;eip=0x00ba84; 	X(POP(di));	// 29025                  pop     di ;~ 01A2:BA84
cs=0x1a2;eip=0x00ba85; 	J(JNC(loc_1ba8a));	// 29026                  jnb     short loc_1BA8A ;~ 01A2:BA85
cs=0x1a2;eip=0x00ba87; 	J(JMP(loc_1bb64));	// 29027                  jmp     loc_1BB64 ;~ 01A2:BA87
loc_1ba8a:
	// 6193 
cs=0x1a2;eip=0x00ba8a; 	T(MOV(ax, *(dw*)(raddr(ds,bp+0x0E))));	// 29031                  mov     ax, ds:[bp+0Eh] ;~ 01A2:BA8A
cs=0x1a2;eip=0x00ba8e; 	T(dx = 4;);	// 29032                  mov     dx, 4 ;~ 01A2:BA8E
cs=0x1a2;eip=0x00ba91; 	T(MUL1_2(dx));	// 29033                  mul     dx ;~ 01A2:BA91
cs=0x1a2;eip=0x00ba93; 	X(PUSH(di));	// 29034                  push    di ;~ 01A2:BA93
cs=0x1a2;eip=0x00ba94; 	X(PUSH(si));	// 29035                  push    si ;~ 01A2:BA94
cs=0x1a2;eip=0x00ba95; 	X(PUSH(bx));	// 29036                  push    bx ;~ 01A2:BA95
cs=0x1a2;eip=0x00ba96; 	X(PUSH(bp));	// 29037                  push    bp ;~ 01A2:BA96
cs=0x1a2;eip=0x00ba97; 	T(dx = si;);	// 29038                  mov     dx, si ;~ 01A2:BA97
cs=0x1a2;eip=0x00ba99; 	T(cx = ax;);	// 29039                  mov     cx, ax ;~ 01A2:BA99
cs=0x1a2;eip=0x00ba9b; 	T(bx = word_1f8ee;);	// 29040                  mov     bx, ds:word_1F8EE ;~ 01A2:BA9B
cs=0x1a2;eip=0x00ba9f; 	J(CALL(sub_1c7d1,0));	// 29041                  call    near ptr sub_1C7D1 ;~ 01A2:BA9F
cs=0x1a2;eip=0x00baa2; 	X(POP(bp));	// 29042                  pop     bp ;~ 01A2:BAA2
cs=0x1a2;eip=0x00baa3; 	X(POP(bx));	// 29043                  pop     bx ;~ 01A2:BAA3
cs=0x1a2;eip=0x00baa4; 	X(POP(si));	// 29044                  pop     si ;~ 01A2:BAA4
cs=0x1a2;eip=0x00baa5; 	X(POP(di));	// 29045                  pop     di ;~ 01A2:BAA5
cs=0x1a2;eip=0x00baa6; 	J(JNC(loc_1baab));	// 29046                  jnb     short loc_1BAAB ;~ 01A2:BAA6
cs=0x1a2;eip=0x00baa8; 	J(JMP(loc_1bb64));	// 29047                  jmp     loc_1BB64 ;~ 01A2:BAA8
loc_1baab:
	// 6194 
cs=0x1a2;eip=0x00baab; 	T(MOV(cx, *(dw*)(raddr(ds,bp+0x0E))));	// 29051                  mov     cx, ds:[bp+0Eh] ;~ 01A2:BAAB
cs=0x1a2;eip=0x00baaf; 	X(PUSH(es));	// 29052                  push    es ;~ 01A2:BAAF
cs=0x1a2;eip=0x00bab0; 	X(PUSH(si));	// 29053                  push    si ;~ 01A2:BAB0
cs=0x1a2;eip=0x00bab1; 	T(es = seg_1f8f4;);	// 29054                  mov     es, ds:seg_1F8F4 ;~ 01A2:BAB1
cs=0x1a2;eip=0x00bab5; 	T(di = si;);	// 29055                  mov     di, si ;~ 01A2:BAB5
loc_1bab7:
	// 6195 
cs=0x1a2;eip=0x00bab7; 	T(LODSW);	// 29058                  lodsw ;~ 01A2:BAB7
cs=0x1a2;eip=0x00bab8; 	T(XCHG(al, ah));	// 29059                  xchg    al, ah ;~ 01A2:BAB8
cs=0x1a2;eip=0x00baba; 	X(STOSW);	// 29060                  stosw ;~ 01A2:BABA
cs=0x1a2;eip=0x00babb; 	T(LODSW);	// 29061                  lodsw ;~ 01A2:BABB
cs=0x1a2;eip=0x00babc; 	T(XCHG(al, ah));	// 29062                  xchg    al, ah ;~ 01A2:BABC
cs=0x1a2;eip=0x00babe; 	X(STOSW);	// 29063                  stosw ;~ 01A2:BABE
cs=0x1a2;eip=0x00babf; 	J(LOOP(loc_1bab7));	// 29064                  loop    loc_1BAB7 ;~ 01A2:BABF
cs=0x1a2;eip=0x00bac1; 	X(POP(si));	// 29065                  pop     si ;~ 01A2:BAC1
cs=0x1a2;eip=0x00bac2; 	X(POP(es));	// 29066                  pop     es ;~ 01A2:BAC2
cs=0x1a2;eip=0x00bac3; 	T(MOV(cx, *(dw*)(raddr(ds,bp+0x0A))));	// 29067                  mov     cx, ds:[bp+0Ah] ;~ 01A2:BAC3
cs=0x1a2;eip=0x00bac7; 	T(XCHG(cl, ch));	// 29068                  xchg    cl, ch ;~ 01A2:BAC7
cs=0x1a2;eip=0x00bac9; 	T(TEST(cl, 1));	// 29069                  test    cl, 1 ;~ 01A2:BAC9
cs=0x1a2;eip=0x00bacc; 	J(JZ(loc_1bacf));	// 29070                  jz      short loc_1BACF ;~ 01A2:BACC
cs=0x1a2;eip=0x00bace; 	T(INC(cx));	// 29071                  inc     cx ;~ 01A2:BACE
loc_1bacf:
	// 6196 
cs=0x1a2;eip=0x00bacf; 	X(MOV(*(dw*)(raddr(ds,bp+0x0A)), cx));	// 29074                  mov     ds:[bp+0Ah], cx ;~ 01A2:BACF
cs=0x1a2;eip=0x00bad3; 	T(ax = word_1f8ee;);	// 29075                  mov     ax, ds:word_1F8EE ;~ 01A2:BAD3
cs=0x1a2;eip=0x00bad6; 	T(MOV(ds, *(dw*)(raddr(ds,bp+4))));	// 29076                  mov     ds, word ptr ds:[bp+4] ;~ 01A2:BAD6
cs=0x1a2;eip=0x00bada; 	T(XCHG(ax, bx));	// 29078                  xchg    ax, bx ;~ 01A2:BADA
cs=0x1a2;eip=0x00badb; 	X(PUSH(ax));	// 29079                  push    ax ;~ 01A2:BADB
cs=0x1a2;eip=0x00badc; 	X(PUSH(bx));	// 29080                  push    bx ;~ 01A2:BADC
cs=0x1a2;eip=0x00badd; 	X(PUSH(cx));	// 29081                  push    cx ;~ 01A2:BADD
cs=0x1a2;eip=0x00bade; 	X(PUSH(dx));	// 29082                  push    dx ;~ 01A2:BADE
cs=0x1a2;eip=0x00badf; 	X(PUSH(bp));	// 29083                  push    bp ;~ 01A2:BADF
cs=0x1a2;eip=0x00bae0; 	X(PUSH(si));	// 29084                  push    si ;~ 01A2:BAE0
cs=0x1a2;eip=0x00bae1; 	X(PUSH(di));	// 29085                  push    di ;~ 01A2:BAE1
cs=0x1a2;eip=0x00bae2; 	X(PUSH(es));	// 29086                  push    es ;~ 01A2:BAE2
cs=0x1a2;eip=0x00bae3; 	X(PUSH(ds));	// 29087                  push    ds ;~ 01A2:BAE3
cs=0x1a2;eip=0x00bae4; 	T(dx = ax;);	// 29088                  mov     dx, ax ;~ 01A2:BAE4
cs=0x1a2;eip=0x00bae6; 	T(cx = cx;);	// 29089                  mov     cx, cx ;~ 01A2:BAE6
cs=0x1a2;eip=0x00bae8; 	J(CALL(sub_1c7d1,0));	// 29090                  call    near ptr sub_1C7D1 ;~ 01A2:BAE8
cs=0x1a2;eip=0x00baeb; 	X(POP(ds));	// 29091                  pop     ds ;~ 01A2:BAEB
cs=0x1a2;eip=0x00baec; 	X(POP(es));	// 29092                  pop     es ;~ 01A2:BAEC
cs=0x1a2;eip=0x00baed; 	X(POP(di));	// 29093                  pop     di ;~ 01A2:BAED
cs=0x1a2;eip=0x00baee; 	X(POP(si));	// 29094                  pop     si ;~ 01A2:BAEE
cs=0x1a2;eip=0x00baef; 	X(POP(bp));	// 29095                  pop     bp ;~ 01A2:BAEF
cs=0x1a2;eip=0x00baf0; 	X(POP(dx));	// 29096                  pop     dx ;~ 01A2:BAF0
cs=0x1a2;eip=0x00baf1; 	X(POP(cx));	// 29097                  pop     cx ;~ 01A2:BAF1
cs=0x1a2;eip=0x00baf2; 	X(POP(bx));	// 29098                  pop     bx ;~ 01A2:BAF2
cs=0x1a2;eip=0x00baf3; 	X(POP(ax));	// 29099                  pop     ax ;~ 01A2:BAF3
cs=0x1a2;eip=0x00baf4; 	T(ax = seg_offset(seg002););	// 29100                  mov     ax, seg seg002 ;~ 01A2:BAF4
cs=0x1a2;eip=0x00baf7; 	T(ds = ax;);	// 29101                  mov     ds, ax ;~ 01A2:BAF7
cs=0x1a2;eip=0x00baf9; 	J(JC(loc_1bb64));	// 29103                  jb      short loc_1BB64 ;~ 01A2:BAF9
cs=0x1a2;eip=0x00bafb; 	T(ax = ds;);	// 29104                  mov     ax, ds ;~ 01A2:BAFB
cs=0x1a2;eip=0x00bafd; 	T(es = ax;);	// 29105                  mov     es, ax ;~ 01A2:BAFD
cs=0x1a2;eip=0x00baff; 	X(POP(ax));	// 29106                  pop     ax ;~ 01A2:BAFF
cs=0x1a2;eip=0x00bb00; 	T(CMP(al, 3));	// 29107                  cmp     al, 3 ;~ 01A2:BB00
cs=0x1a2;eip=0x00bb02; 	J(JNZ(loc_1bb27));	// 29108                  jnz     short loc_1BB27 ;~ 01A2:BB02
cs=0x1a2;eip=0x00bb04; 	T(XOR(dx, dx));	// 29109                  xor     dx, dx ;~ 01A2:BB04
loc_1bb06:
	// 6197 
cs=0x1a2;eip=0x00bb06; 	T(ax = 3;);	// 29112                  mov     ax, 3 ;~ 01A2:BB06
cs=0x1a2;eip=0x00bb09; 	J(CALL(sub_1415c,0));	// 29113                  call    sub_1415C ;~ 01A2:BB09
cs=0x1a2;eip=0x00bb0c; 	J(JS(loc_1bb61));	// 29114                  js      short loc_1BB61 ;~ 01A2:BB0C
cs=0x1a2;eip=0x00bb0e; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x18))));	// 29115                  mov     ax, [di+18h] ;~ 01A2:BB0E
cs=0x1a2;eip=0x00bb11; 	T(XCHG(al, ah));	// 29116                  xchg    al, ah ;~ 01A2:BB11
cs=0x1a2;eip=0x00bb13; 	X(MOV(*(dw*)(raddr(ds,di+0x18)), ax));	// 29117                  mov     [di+18h], ax ;~ 01A2:BB13
cs=0x1a2;eip=0x00bb16; 	T(cx = 7;);	// 29118                  mov     cx, 7 ;~ 01A2:BB16
cs=0x1a2;eip=0x00bb19; 	T(ADD(di, 6));	// 29119                  add     di, 6 ;~ 01A2:BB19
cs=0x1a2;eip=0x00bb1c; 	T(si = di;);	// 29120                  mov     si, di ;~ 01A2:BB1C
loc_1bb1e:
	// 6198 
cs=0x1a2;eip=0x00bb1e; 	T(LODSW);	// 29123                  lodsw ;~ 01A2:BB1E
cs=0x1a2;eip=0x00bb1f; 	T(XCHG(al, ah));	// 29124                  xchg    al, ah ;~ 01A2:BB1F
cs=0x1a2;eip=0x00bb21; 	X(STOSW);	// 29125                  stosw ;~ 01A2:BB21
cs=0x1a2;eip=0x00bb22; 	J(LOOP(loc_1bb1e));	// 29126                  loop    loc_1BB1E ;~ 01A2:BB22
cs=0x1a2;eip=0x00bb24; 	T(INC(dx));	// 29127                  inc     dx ;~ 01A2:BB24
cs=0x1a2;eip=0x00bb25; 	J(JMP(loc_1bb06));	// 29128                  jmp     short loc_1BB06 ;~ 01A2:BB25
loc_1bb27:
	// 6199 
cs=0x1a2;eip=0x00bb27; 	T(CMP(al, 6));	// 29132                  cmp     al, 6 ;~ 01A2:BB27
cs=0x1a2;eip=0x00bb29; 	J(JNZ(loc_1bb4a));	// 29133                  jnz     short loc_1BB4A ;~ 01A2:BB29
cs=0x1a2;eip=0x00bb2b; 	T(XOR(dx, dx));	// 29134                  xor     dx, dx ;~ 01A2:BB2B
loc_1bb2d:
	// 6200 
cs=0x1a2;eip=0x00bb2d; 	T(ax = 6;);	// 29137                  mov     ax, 6 ;~ 01A2:BB2D
cs=0x1a2;eip=0x00bb30; 	J(CALL(sub_1415c,0));	// 29138                  call    sub_1415C ;~ 01A2:BB30
cs=0x1a2;eip=0x00bb33; 	J(JS(loc_1bb61));	// 29139                  js      short loc_1BB61 ;~ 01A2:BB33
cs=0x1a2;eip=0x00bb35; 	T(MOV(ax, *(dw*)(raddr(ds,di+4))));	// 29140                  mov     ax, [di+4] ;~ 01A2:BB35
cs=0x1a2;eip=0x00bb38; 	X(MOV(*(raddr(ds,di+4)), ah));	// 29141                  mov     [di+4], ah ;~ 01A2:BB38
cs=0x1a2;eip=0x00bb3b; 	X(MOV(*(raddr(ds,di+5)), al));	// 29142                  mov     [di+5], al ;~ 01A2:BB3B
cs=0x1a2;eip=0x00bb3e; 	T(MOV(ax, *(dw*)(raddr(ds,di+6))));	// 29143                  mov     ax, [di+6] ;~ 01A2:BB3E
cs=0x1a2;eip=0x00bb41; 	X(MOV(*(raddr(ds,di+6)), ah));	// 29144                  mov     [di+6], ah ;~ 01A2:BB41
cs=0x1a2;eip=0x00bb44; 	X(MOV(*(raddr(ds,di+7)), al));	// 29145                  mov     [di+7], al ;~ 01A2:BB44
cs=0x1a2;eip=0x00bb47; 	T(INC(dx));	// 29146                  inc     dx ;~ 01A2:BB47
cs=0x1a2;eip=0x00bb48; 	J(JMP(loc_1bb2d));	// 29147                  jmp     short loc_1BB2D ;~ 01A2:BB48
loc_1bb4a:
	// 6201 
cs=0x1a2;eip=0x00bb4a; 	T(CMP(ax, 5));	// 29151                  cmp     ax, 5 ;~ 01A2:BB4A
cs=0x1a2;eip=0x00bb4d; 	J(JNZ(loc_1bb61));	// 29152                  jnz     short loc_1BB61 ;~ 01A2:BB4D
cs=0x1a2;eip=0x00bb4f; 	T(MOV(si, *(dw*)(raddr(ds,bp+6))));	// 29153                  mov     si, ds:[bp+6] ;~ 01A2:BB4F
cs=0x1a2;eip=0x00bb53; 	T(MOV(cx, *(dw*)(raddr(ds,bp+0x0A))));	// 29154                  mov     cx, ds:[bp+0Ah] ;~ 01A2:BB53
cs=0x1a2;eip=0x00bb57; 	T(SHR(cx, 1));	// 29155                  shr     cx, 1 ;~ 01A2:BB57
cs=0x1a2;eip=0x00bb59; 	T(di = si;);	// 29156                  mov     di, si ;~ 01A2:BB59
loc_1bb5b:
	// 6202 
cs=0x1a2;eip=0x00bb5b; 	T(LODSW);	// 29159                  lodsw ;~ 01A2:BB5B
cs=0x1a2;eip=0x00bb5c; 	T(XCHG(al, ah));	// 29160                  xchg    al, ah ;~ 01A2:BB5C
cs=0x1a2;eip=0x00bb5e; 	X(STOSW);	// 29161                  stosw ;~ 01A2:BB5E
cs=0x1a2;eip=0x00bb5f; 	J(LOOP(loc_1bb5b));	// 29162                  loop    loc_1BB5B ;~ 01A2:BB5F
loc_1bb61:
	// 6203 
cs=0x1a2;eip=0x00bb61; 	T(XOR(ax, ax));	// 29166                  xor     ax, ax ;~ 01A2:BB61
cs=0x1a2;eip=0x00bb63; 	J(RETN(0));	// 29167                  retn ;~ 01A2:BB63
loc_1bb64:
	// 6204 
cs=0x1a2;eip=0x00bb64; 	X(POP(ax));	// 29172                  pop     ax ;~ 01A2:BB64
cs=0x1a2;eip=0x00bb65; 	T(ax = 0x0FFFF;);	// 29173                  mov     ax, 0FFFFh ;~ 01A2:BB65
cs=0x1a2;eip=0x00bb68; 	T(OR(ax, ax));	// 29174                  or      ax, ax ;~ 01A2:BB68
cs=0x1a2;eip=0x00bb6a; 	J(RETN(0));	// 29175                  retn ;~ 01A2:BB6A

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1ba57: 	goto loc_1ba57;
        case m2c::kloc_1ba6e: 	goto loc_1ba6e;
        case m2c::kloc_1ba8a: 	goto loc_1ba8a;
        case m2c::kloc_1baab: 	goto loc_1baab;
        case m2c::kloc_1bab7: 	goto loc_1bab7;
        case m2c::kloc_1bacf: 	goto loc_1bacf;
        case m2c::kloc_1bb06: 	goto loc_1bb06;
        case m2c::kloc_1bb1e: 	goto loc_1bb1e;
        case m2c::kloc_1bb27: 	goto loc_1bb27;
        case m2c::kloc_1bb2d: 	goto loc_1bb2d;
        case m2c::kloc_1bb4a: 	goto loc_1bb4a;
        case m2c::kloc_1bb5b: 	goto loc_1bb5b;
        case m2c::kloc_1bb61: 	goto loc_1bb61;
        case m2c::kloc_1bb64: 	goto loc_1bb64;
        case m2c::ksub_1ba35: 	goto sub_1ba35;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1bb6b(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1bb6b:
    _begin:
cs=0x1a2;eip=0x00bb6b; 	J(CALL(sub_14060,0));	// 29183                  call    sub_14060 ;~ 01A2:BB6B
cs=0x1a2;eip=0x00bb6e; 	T(bp = di;);	// 29185                  mov     bp, di ;~ 01A2:BB6E
cs=0x1a2;eip=0x00bb70; 	T(ADD(di, 8));	// 29186                  add     di, 8 ;~ 01A2:BB70
cs=0x1a2;eip=0x00bb73; 	X(PUSH(di));	// 29187                  push    di ;~ 01A2:BB73
cs=0x1a2;eip=0x00bb74; 	X(PUSH(si));	// 29188                  push    si ;~ 01A2:BB74
cs=0x1a2;eip=0x00bb75; 	X(PUSH(bx));	// 29189                  push    bx ;~ 01A2:BB75
cs=0x1a2;eip=0x00bb76; 	X(PUSH(bp));	// 29190                  push    bp ;~ 01A2:BB76
cs=0x1a2;eip=0x00bb77; 	T(dx = di;);	// 29191                  mov     dx, di ;~ 01A2:BB77
cs=0x1a2;eip=0x00bb79; 	T(cx = 4;);	// 29192                  mov     cx, 4 ;~ 01A2:BB79
cs=0x1a2;eip=0x00bb7c; 	T(bx = word_1f8ee;);	// 29193                  mov     bx, ds:word_1F8EE ;~ 01A2:BB7C
cs=0x1a2;eip=0x00bb80; 	J(CALL(sub_1c7d1,0));	// 29194                  call    near ptr sub_1C7D1 ;~ 01A2:BB80
cs=0x1a2;eip=0x00bb83; 	X(POP(bp));	// 29196                  pop     bp ;~ 01A2:BB83
cs=0x1a2;eip=0x00bb84; 	X(POP(bx));	// 29197                  pop     bx ;~ 01A2:BB84
cs=0x1a2;eip=0x00bb85; 	X(POP(si));	// 29198                  pop     si ;~ 01A2:BB85
cs=0x1a2;eip=0x00bb86; 	X(POP(di));	// 29199                  pop     di ;~ 01A2:BB86
cs=0x1a2;eip=0x00bb87; 	J(JC(loc_1bbfd));	// 29200                  jb      short loc_1BBFD ;~ 01A2:BB87
cs=0x1a2;eip=0x00bb89; 	X(PUSH(di));	// 29201                  push    di ;~ 01A2:BB89
cs=0x1a2;eip=0x00bb8a; 	X(PUSH(si));	// 29202                  push    si ;~ 01A2:BB8A
cs=0x1a2;eip=0x00bb8b; 	X(PUSH(bx));	// 29203                  push    bx ;~ 01A2:BB8B
cs=0x1a2;eip=0x00bb8c; 	X(PUSH(bp));	// 29204                  push    bp ;~ 01A2:BB8C
cs=0x1a2;eip=0x00bb8d; 	T(dx = word_1f19a;);	// 29205                  mov     dx, word_1F19A ;~ 01A2:BB8D
cs=0x1a2;eip=0x00bb91; 	T(cx = 6;);	// 29206                  mov     cx, 6 ;~ 01A2:BB91
cs=0x1a2;eip=0x00bb94; 	T(bx = word_1f8ee;);	// 29207                  mov     bx, ds:word_1F8EE ;~ 01A2:BB94
cs=0x1a2;eip=0x00bb98; 	J(CALL(sub_1c7d1,0));	// 29208                  call    near ptr sub_1C7D1 ;~ 01A2:BB98
cs=0x1a2;eip=0x00bb9b; 	X(POP(bp));	// 29209                  pop     bp ;~ 01A2:BB9B
cs=0x1a2;eip=0x00bb9c; 	X(POP(bx));	// 29210                  pop     bx ;~ 01A2:BB9C
cs=0x1a2;eip=0x00bb9d; 	X(POP(si));	// 29211                  pop     si ;~ 01A2:BB9D
cs=0x1a2;eip=0x00bb9e; 	X(POP(di));	// 29212                  pop     di ;~ 01A2:BB9E
cs=0x1a2;eip=0x00bb9f; 	J(JC(loc_1bbfd));	// 29213                  jb      short loc_1BBFD ;~ 01A2:BB9F
cs=0x1a2;eip=0x00bba1; 	T(MOV(ax, *(dw*)(raddr(ds,bp+0x0E))));	// 29214                  mov     ax, ds:[bp+0Eh] ;~ 01A2:BBA1
cs=0x1a2;eip=0x00bba5; 	T(dx = 4;);	// 29215                  mov     dx, 4 ;~ 01A2:BBA5
cs=0x1a2;eip=0x00bba8; 	T(MUL1_2(dx));	// 29216                  mul     dx ;~ 01A2:BBA8
cs=0x1a2;eip=0x00bbaa; 	X(PUSH(di));	// 29217                  push    di ;~ 01A2:BBAA
cs=0x1a2;eip=0x00bbab; 	X(PUSH(si));	// 29218                  push    si ;~ 01A2:BBAB
cs=0x1a2;eip=0x00bbac; 	X(PUSH(bx));	// 29219                  push    bx ;~ 01A2:BBAC
cs=0x1a2;eip=0x00bbad; 	X(PUSH(bp));	// 29220                  push    bp ;~ 01A2:BBAD
cs=0x1a2;eip=0x00bbae; 	T(dx = si;);	// 29221                  mov     dx, si ;~ 01A2:BBAE
cs=0x1a2;eip=0x00bbb0; 	T(cx = ax;);	// 29222                  mov     cx, ax ;~ 01A2:BBB0
cs=0x1a2;eip=0x00bbb2; 	T(bx = word_1f8ee;);	// 29223                  mov     bx, ds:word_1F8EE ;~ 01A2:BBB2
cs=0x1a2;eip=0x00bbb6; 	J(CALL(sub_1c7d1,0));	// 29224                  call    near ptr sub_1C7D1 ;~ 01A2:BBB6
cs=0x1a2;eip=0x00bbb9; 	X(POP(bp));	// 29225                  pop     bp ;~ 01A2:BBB9
cs=0x1a2;eip=0x00bbba; 	X(POP(bx));	// 29226                  pop     bx ;~ 01A2:BBBA
cs=0x1a2;eip=0x00bbbb; 	X(POP(si));	// 29227                  pop     si ;~ 01A2:BBBB
cs=0x1a2;eip=0x00bbbc; 	X(POP(di));	// 29228                  pop     di ;~ 01A2:BBBC
cs=0x1a2;eip=0x00bbbd; 	J(JC(loc_1bbfd));	// 29229                  jb      short loc_1BBFD ;~ 01A2:BBBD
cs=0x1a2;eip=0x00bbbf; 	T(MOV(cx, *(dw*)(raddr(ds,bp+0x0E))));	// 29230                  mov     cx, ds:[bp+0Eh] ;~ 01A2:BBBF
cs=0x1a2;eip=0x00bbc3; 	X(PUSH(es));	// 29231                  push    es ;~ 01A2:BBC3
cs=0x1a2;eip=0x00bbc4; 	T(es = seg_1f8f4;);	// 29232                  mov     es, ds:seg_1F8F4 ;~ 01A2:BBC4
cs=0x1a2;eip=0x00bbc8; 	T(di = si;);	// 29233                  mov     di, si ;~ 01A2:BBC8
loc_1bbca:
	// 6205 
cs=0x1a2;eip=0x00bbca; 	T(LODSW);	// 29236                  lodsw ;~ 01A2:BBCA
cs=0x1a2;eip=0x00bbcb; 	T(XCHG(al, ah));	// 29237                  xchg    al, ah ;~ 01A2:BBCB
cs=0x1a2;eip=0x00bbcd; 	X(STOSW);	// 29238                  stosw ;~ 01A2:BBCD
cs=0x1a2;eip=0x00bbce; 	T(LODSW);	// 29239                  lodsw ;~ 01A2:BBCE
cs=0x1a2;eip=0x00bbcf; 	T(XCHG(al, ah));	// 29240                  xchg    al, ah ;~ 01A2:BBCF
cs=0x1a2;eip=0x00bbd1; 	X(STOSW);	// 29241                  stosw ;~ 01A2:BBD1
cs=0x1a2;eip=0x00bbd2; 	J(LOOP(loc_1bbca));	// 29242                  loop    loc_1BBCA ;~ 01A2:BBD2
cs=0x1a2;eip=0x00bbd4; 	X(POP(es));	// 29243                  pop     es ;~ 01A2:BBD4
cs=0x1a2;eip=0x00bbd5; 	T(ax = es;);	// 29244                  mov     ax, es ;~ 01A2:BBD5
cs=0x1a2;eip=0x00bbd7; 	T(dx = bx;);	// 29245                  mov     dx, bx ;~ 01A2:BBD7
cs=0x1a2;eip=0x00bbd9; 	T(MOV(bx, *(dw*)(raddr(ds,bp+8))));	// 29246                  mov     bx, ds:[bp+8] ;~ 01A2:BBD9
cs=0x1a2;eip=0x00bbdd; 	T(XCHG(bl, bh));	// 29247                  xchg    bl, bh ;~ 01A2:BBDD
cs=0x1a2;eip=0x00bbdf; 	X(MOV(*(dw*)(raddr(ds,bp+8)), bx));	// 29248                  mov     ds:[bp+8], bx ;~ 01A2:BBDF
cs=0x1a2;eip=0x00bbe3; 	T(MOV(cx, *(dw*)(raddr(ds,bp+0x0A))));	// 29249                  mov     cx, ds:[bp+0Ah] ;~ 01A2:BBE3
cs=0x1a2;eip=0x00bbe7; 	T(XCHG(cl, ch));	// 29250                  xchg    cl, ch ;~ 01A2:BBE7
cs=0x1a2;eip=0x00bbe9; 	T(TEST(cl, 1));	// 29251                  test    cl, 1 ;~ 01A2:BBE9
cs=0x1a2;eip=0x00bbec; 	J(JZ(loc_1bbef));	// 29252                  jz      short loc_1BBEF ;~ 01A2:BBEC
cs=0x1a2;eip=0x00bbee; 	T(INC(cx));	// 29253                  inc     cx ;~ 01A2:BBEE
loc_1bbef:
	// 6206 
cs=0x1a2;eip=0x00bbef; 	X(MOV(*(dw*)(raddr(ds,bp+0x0A)), cx));	// 29256                  mov     ds:[bp+0Ah], cx ;~ 01A2:BBEF
cs=0x1a2;eip=0x00bbf3; 	X(word_1f8d0 = bp;);	// 29257                  mov     ds:word_1F8D0, bp ;~ 01A2:BBF3
cs=0x1a2;eip=0x00bbf7; 	J(CALL(sub_1bc03,0));	// 29258                  call    sub_1BC03 ;~ 01A2:BBF7
cs=0x1a2;eip=0x00bbfa; 	T(XOR(ax, ax));	// 29259                  xor     ax, ax ;~ 01A2:BBFA
cs=0x1a2;eip=0x00bbfc; 	J(RETN(0));	// 29260                  retn ;~ 01A2:BBFC
loc_1bbfd:
	// 6207 
cs=0x1a2;eip=0x00bbfd; 	T(ax = 0x0FFFF;);	// 29265                  mov     ax, 0FFFFh ;~ 01A2:BBFD
cs=0x1a2;eip=0x00bc00; 	T(OR(ax, ax));	// 29266                  or      ax, ax ;~ 01A2:BC00
cs=0x1a2;eip=0x00bc02; 	J(RETN(0));	// 29267                  retn ;~ 01A2:BC02

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1bbca: 	goto loc_1bbca;
        case m2c::kloc_1bbef: 	goto loc_1bbef;
        case m2c::kloc_1bbfd: 	goto loc_1bbfd;
        case m2c::ksub_1bb6b: 	goto sub_1bb6b;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1bc03(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1bc03:
    _begin:
cs=0x1a2;eip=0x00bc03; 	X(PUSH(ax));	// 29275                  push    ax ;~ 01A2:BC03
cs=0x1a2;eip=0x00bc04; 	X(PUSH(bx));	// 29276                  push    bx ;~ 01A2:BC04
cs=0x1a2;eip=0x00bc05; 	X(PUSH(cx));	// 29277                  push    cx ;~ 01A2:BC05
cs=0x1a2;eip=0x00bc06; 	X(PUSH(dx));	// 29278                  push    dx ;~ 01A2:BC06
cs=0x1a2;eip=0x00bc07; 	X(PUSH(bp));	// 29279                  push    bp ;~ 01A2:BC07
cs=0x1a2;eip=0x00bc08; 	X(PUSH(si));	// 29280                  push    si ;~ 01A2:BC08
cs=0x1a2;eip=0x00bc09; 	X(PUSH(di));	// 29281                  push    di ;~ 01A2:BC09
cs=0x1a2;eip=0x00bc0a; 	X(PUSH(es));	// 29282                  push    es ;~ 01A2:BC0A
cs=0x1a2;eip=0x00bc0b; 	X(PUSH(ds));	// 29283                  push    ds ;~ 01A2:BC0B
cs=0x1a2;eip=0x00bc0c; 	T(ax = 2;);	// 29284                  mov     ax, 2 ;~ 01A2:BC0C
cs=0x1a2;eip=0x00bc0f; 	J(CALL(sub_14060,0));	// 29285                  call    sub_14060 ;~ 01A2:BC0F
cs=0x1a2;eip=0x00bc12; 	T(XOR(dx, dx));	// 29287                  xor     dx, dx ;~ 01A2:BC12
loc_1bc14:
	// 6208 
cs=0x1a2;eip=0x00bc14; 	X(*(dw*)(&unk_6fb90) = 0;);	// 29290                  mov     word ptr ss:unk_6FB90, 0 ;~ 01A2:BC14
cs=0x1a2;eip=0x00bc1b; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 29291                  mov     ax, [si] ;~ 01A2:BC1B
cs=0x1a2;eip=0x00bc1d; 	T(SHR(ax, 1));	// 29292                  shr     ax, 1 ;~ 01A2:BC1D
cs=0x1a2;eip=0x00bc1f; 	X(PUSH(ax));	// 29293                  push    ax ;~ 01A2:BC1F
cs=0x1a2;eip=0x00bc20; 	T(ax = 2;);	// 29294                  mov     ax, 2 ;~ 01A2:BC20
cs=0x1a2;eip=0x00bc23; 	J(CALL(sub_140a9,0));	// 29295                  call    sub_140A9 ;~ 01A2:BC23
cs=0x1a2;eip=0x00bc26; 	J(JS(loc_1bc9e));	// 29296                  js      short loc_1BC9E ;~ 01A2:BC26
cs=0x1a2;eip=0x00bc28; 	J(JZ(loc_1bc70));	// 29297                  jz      short loc_1BC70 ;~ 01A2:BC28
cs=0x1a2;eip=0x00bc2a; 	J(CALL(sub_1bcf3,0));	// 29298                  call    sub_1BCF3 ;~ 01A2:BC2A
cs=0x1a2;eip=0x00bc2d; 	T(CMP(*(dw*)(raddr(es,di+0x18)), 0));	// 29299                  cmp     word ptr es:[di+18h], 0 ;~ 01A2:BC2D
cs=0x1a2;eip=0x00bc32; 	J(JS(loc_1bc48));	// 29300                  js      short loc_1BC48 ;~ 01A2:BC32
cs=0x1a2;eip=0x00bc34; 	T(MOV(ax, *(dw*)(raddr(es,di+0x18))));	// 29301                  mov     ax, es:[di+18h] ;~ 01A2:BC34
cs=0x1a2;eip=0x00bc38; 	T(XCHG(al, ah));	// 29302                  xchg    al, ah ;~ 01A2:BC38
cs=0x1a2;eip=0x00bc3a; 	X(MOV(*(dw*)(raddr(es,di+0x18)), ax));	// 29303                  mov     es:[di+18h], ax ;~ 01A2:BC3A
cs=0x1a2;eip=0x00bc3e; 	T(SHR(ax, 1));	// 29304                  shr     ax, 1 ;~ 01A2:BC3E
cs=0x1a2;eip=0x00bc40; 	T(SHR(ax, 1));	// 29305                  shr     ax, 1 ;~ 01A2:BC40
cs=0x1a2;eip=0x00bc42; 	X(ADD(*(dw*)(raddr(es,di+0x18)), ax));	// 29306                  add     es:[di+18h], ax ;~ 01A2:BC42
cs=0x1a2;eip=0x00bc46; 	J(JMP(loc_1bc70));	// 29307                  jmp     short loc_1BC70 ;~ 01A2:BC46
loc_1bc48:
	// 6209 
cs=0x1a2;eip=0x00bc48; 	T(MOV(al, *(raddr(es,di+0x0C))));	// 29311                  mov     al, es:[di+0Ch] ;~ 01A2:BC48
cs=0x1a2;eip=0x00bc4c; 	T(TEST(al, 4));	// 29312                  test    al, 4 ;~ 01A2:BC4C
cs=0x1a2;eip=0x00bc4e; 	J(JZ(loc_1bc64));	// 29313                  jz      short loc_1BC64 ;~ 01A2:BC4E
cs=0x1a2;eip=0x00bc50; 	T(TEST(al, 0x20));	// 29314                  test    al, 20h ;~ 01A2:BC50
cs=0x1a2;eip=0x00bc52; 	J(JZ(loc_1bc5c));	// 29315                  jz      short loc_1BC5C ;~ 01A2:BC52
cs=0x1a2;eip=0x00bc54; 	T(ADD(di, 0x20));	// 29317                  add     di, 20h ; ' ' ;~ 01A2:BC54
cs=0x1a2;eip=0x00bc57; 	J(CALL(sub_1be36,0));	// 29318                  call    sub_1BE36 ;~ 01A2:BC57
cs=0x1a2;eip=0x00bc5a; 	J(JMP(loc_1bc70));	// 29319                  jmp     short loc_1BC70 ;~ 01A2:BC5A
loc_1bc5c:
	// 6210 
cs=0x1a2;eip=0x00bc5c; 	T(ADD(di, 0x20));	// 29323                  add     di, 20h ; ' ' ;~ 01A2:BC5C
cs=0x1a2;eip=0x00bc5f; 	J(CALL(sub_1bd6c,0));	// 29324                  call    sub_1BD6C ;~ 01A2:BC5F
cs=0x1a2;eip=0x00bc62; 	J(JMP(loc_1bc70));	// 29325                  jmp     short loc_1BC70 ;~ 01A2:BC62
loc_1bc64:
	// 6211 
cs=0x1a2;eip=0x00bc64; 	T(ADD(di, 0x20));	// 29329                  add     di, 20h ; ' ' ;~ 01A2:BC64
cs=0x1a2;eip=0x00bc67; 	J(CALL(sub_1be5f,0));	// 29330                  call    sub_1BE5F ;~ 01A2:BC67
cs=0x1a2;eip=0x00bc6a; 	J(CALL(sub_1beb0,0));	// 29331                  call    sub_1BEB0 ;~ 01A2:BC6A
cs=0x1a2;eip=0x00bc6d; 	J(CALL(sub_1bca9,0));	// 29332                  call    sub_1BCA9 ;~ 01A2:BC6D
loc_1bc70:
	// 6212 
cs=0x1a2;eip=0x00bc70; 	X(POP(cx));	// 29336                  pop     cx ;~ 01A2:BC70
cs=0x1a2;eip=0x00bc71; 	T(ax = *(dw*)(&unk_6fb90););	// 29337                  mov     ax, word ptr ss:unk_6FB90 ;~ 01A2:BC71
cs=0x1a2;eip=0x00bc75; 	T(SUB(cx, ax));	// 29338                  sub     cx, ax ;~ 01A2:BC75
cs=0x1a2;eip=0x00bc77; 	J(JZ(loc_1bc97));	// 29339                  jz      short loc_1BC97 ;~ 01A2:BC77
cs=0x1a2;eip=0x00bc79; 	X(PUSH(ax));	// 29340                  push    ax ;~ 01A2:BC79
cs=0x1a2;eip=0x00bc7a; 	X(PUSH(bx));	// 29341                  push    bx ;~ 01A2:BC7A
cs=0x1a2;eip=0x00bc7b; 	X(PUSH(cx));	// 29342                  push    cx ;~ 01A2:BC7B
cs=0x1a2;eip=0x00bc7c; 	X(PUSH(dx));	// 29343                  push    dx ;~ 01A2:BC7C
cs=0x1a2;eip=0x00bc7d; 	X(PUSH(bp));	// 29344                  push    bp ;~ 01A2:BC7D
cs=0x1a2;eip=0x00bc7e; 	X(PUSH(si));	// 29345                  push    si ;~ 01A2:BC7E
cs=0x1a2;eip=0x00bc7f; 	X(PUSH(di));	// 29346                  push    di ;~ 01A2:BC7F
cs=0x1a2;eip=0x00bc80; 	X(PUSH(es));	// 29347                  push    es ;~ 01A2:BC80
cs=0x1a2;eip=0x00bc81; 	X(PUSH(ds));	// 29348                  push    ds ;~ 01A2:BC81
cs=0x1a2;eip=0x00bc82; 	T(dx = 0x10B6;);	// 29349                  mov     dx, 10B6h ;~ 01A2:BC82
cs=0x1a2;eip=0x00bc85; 	T(cx = cx;);	// 29350                  mov     cx, cx ;~ 01A2:BC85
cs=0x1a2;eip=0x00bc87; 	T(bx = word_1f8ee;);	// 29351                  mov     bx, ds:word_1F8EE ;~ 01A2:BC87
cs=0x1a2;eip=0x00bc8b; 	J(CALL(sub_1c7d1,0));	// 29352                  call    near ptr sub_1C7D1 ;~ 01A2:BC8B
cs=0x1a2;eip=0x00bc8e; 	X(POP(ds));	// 29354                  pop     ds ;~ 01A2:BC8E
cs=0x1a2;eip=0x00bc8f; 	X(POP(es));	// 29355                  pop     es ;~ 01A2:BC8F
cs=0x1a2;eip=0x00bc90; 	X(POP(di));	// 29357                  pop     di ;~ 01A2:BC90
cs=0x1a2;eip=0x00bc91; 	X(POP(si));	// 29358                  pop     si ;~ 01A2:BC91
cs=0x1a2;eip=0x00bc92; 	X(POP(bp));	// 29359                  pop     bp ;~ 01A2:BC92
cs=0x1a2;eip=0x00bc93; 	X(POP(dx));	// 29360                  pop     dx ;~ 01A2:BC93
cs=0x1a2;eip=0x00bc94; 	X(POP(cx));	// 29361                  pop     cx ;~ 01A2:BC94
cs=0x1a2;eip=0x00bc95; 	X(POP(bx));	// 29362                  pop     bx ;~ 01A2:BC95
cs=0x1a2;eip=0x00bc96; 	X(POP(ax));	// 29363                  pop     ax ;~ 01A2:BC96
loc_1bc97:
	// 6213 
cs=0x1a2;eip=0x00bc97; 	T(ADD(si, 4));	// 29366                  add     si, 4 ;~ 01A2:BC97
cs=0x1a2;eip=0x00bc9a; 	T(INC(dx));	// 29367                  inc     dx ;~ 01A2:BC9A
cs=0x1a2;eip=0x00bc9b; 	J(JMP(loc_1bc14));	// 29368                  jmp     loc_1BC14 ;~ 01A2:BC9B
loc_1bc9e:
	// 6214 
cs=0x1a2;eip=0x00bc9e; 	X(POP(ax));	// 29373                  pop     ax ;~ 01A2:BC9E
cs=0x1a2;eip=0x00bc9f; 	X(POP(ds));	// 29374                  pop     ds ;~ 01A2:BC9F
cs=0x1a2;eip=0x00bca0; 	X(POP(es));	// 29375                  pop     es ;~ 01A2:BCA0
cs=0x1a2;eip=0x00bca1; 	X(POP(di));	// 29377                  pop     di ;~ 01A2:BCA1
cs=0x1a2;eip=0x00bca2; 	X(POP(si));	// 29378                  pop     si ;~ 01A2:BCA2
cs=0x1a2;eip=0x00bca3; 	X(POP(bp));	// 29379                  pop     bp ;~ 01A2:BCA3
cs=0x1a2;eip=0x00bca4; 	X(POP(dx));	// 29380                  pop     dx ;~ 01A2:BCA4
cs=0x1a2;eip=0x00bca5; 	X(POP(cx));	// 29381                  pop     cx ;~ 01A2:BCA5
cs=0x1a2;eip=0x00bca6; 	X(POP(bx));	// 29382                  pop     bx ;~ 01A2:BCA6
cs=0x1a2;eip=0x00bca7; 	X(POP(ax));	// 29383                  pop     ax ;~ 01A2:BCA7
cs=0x1a2;eip=0x00bca8; 	J(RETN(0));	// 29384                  retn ;~ 01A2:BCA8

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1bc14: 	goto loc_1bc14;
        case m2c::kloc_1bc48: 	goto loc_1bc48;
        case m2c::kloc_1bc5c: 	goto loc_1bc5c;
        case m2c::kloc_1bc64: 	goto loc_1bc64;
        case m2c::kloc_1bc70: 	goto loc_1bc70;
        case m2c::kloc_1bc97: 	goto loc_1bc97;
        case m2c::kloc_1bc9e: 	goto loc_1bc9e;
        case m2c::ksub_1bc03: 	goto sub_1bc03;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1bca9(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1bca9:
    _begin:
cs=0x1a2;eip=0x00bca9; 	X(PUSH(ax));	// 29393                  push    ax ;~ 01A2:BCA9
cs=0x1a2;eip=0x00bcaa; 	X(PUSH(bx));	// 29394                  push    bx ;~ 01A2:BCAA
cs=0x1a2;eip=0x00bcab; 	X(PUSH(cx));	// 29395                  push    cx ;~ 01A2:BCAB
cs=0x1a2;eip=0x00bcac; 	X(PUSH(dx));	// 29396                  push    dx ;~ 01A2:BCAC
cs=0x1a2;eip=0x00bcad; 	X(PUSH(bp));	// 29397                  push    bp ;~ 01A2:BCAD
cs=0x1a2;eip=0x00bcae; 	X(PUSH(si));	// 29398                  push    si ;~ 01A2:BCAE
cs=0x1a2;eip=0x00bcaf; 	X(PUSH(di));	// 29399                  push    di ;~ 01A2:BCAF
cs=0x1a2;eip=0x00bcb0; 	X(PUSH(es));	// 29400                  push    es ;~ 01A2:BCB0
cs=0x1a2;eip=0x00bcb1; 	X(PUSH(ds));	// 29401                  push    ds ;~ 01A2:BCB1
cs=0x1a2;eip=0x00bcb2; 	T(bp = word_1f8d0;);	// 29402                  mov     bp, ds:word_1F8D0 ;~ 01A2:BCB2
cs=0x1a2;eip=0x00bcb6; 	X(ADD(*(dw*)(raddr(ds,bp+0x0A)), ax));	// 29403                  add     ds:[bp+0Ah], ax ;~ 01A2:BCB6
cs=0x1a2;eip=0x00bcba; 	X(ADC(*(dw*)(raddr(ds,bp+8)), 0));	// 29404                  adc     word ptr ds:[bp+8], 0 ;~ 01A2:BCBA
cs=0x1a2;eip=0x00bcbf; 	T(MOV(cx, *(dw*)(raddr(ds,si))));	// 29405                  mov     cx, [si] ;~ 01A2:BCBF
cs=0x1a2;eip=0x00bcc1; 	T(bx = cx;);	// 29406                  mov     bx, cx ;~ 01A2:BCC1
cs=0x1a2;eip=0x00bcc3; 	T(AND(bx, 1));	// 29407                  and     bx, 1 ;~ 01A2:BCC3
cs=0x1a2;eip=0x00bcc6; 	T(SHR(cx, 1));	// 29408                  shr     cx, 1 ;~ 01A2:BCC6
cs=0x1a2;eip=0x00bcc8; 	T(ADD(cx, ax));	// 29409                  add     cx, ax ;~ 01A2:BCC8
cs=0x1a2;eip=0x00bcca; 	T(SHL(cx, 1));	// 29410                  shl     cx, 1 ;~ 01A2:BCCA
cs=0x1a2;eip=0x00bccc; 	T(OR(cx, bx));	// 29411                  or      cx, bx ;~ 01A2:BCCC
cs=0x1a2;eip=0x00bcce; 	X(MOV(*(dw*)(raddr(ds,si)), cx));	// 29412                  mov     [si], cx ;~ 01A2:BCCE
cs=0x1a2;eip=0x00bcd0; 	T(cx = 0x0FF;);	// 29413                  mov     cx, 0FFh ;~ 01A2:BCD0
cs=0x1a2;eip=0x00bcd3; 	T(SUB(cx, dx));	// 29414                  sub     cx, dx ;~ 01A2:BCD3
cs=0x1a2;eip=0x00bcd5; 	T(DEC(cx));	// 29415                  dec     cx ;~ 01A2:BCD5
cs=0x1a2;eip=0x00bcd6; 	J(JZ(loc_1bce9));	// 29416                  jz      short loc_1BCE9 ;~ 01A2:BCD6
cs=0x1a2;eip=0x00bcd8; 	J(JS(loc_1bce9));	// 29417                  js      short loc_1BCE9 ;~ 01A2:BCD8
cs=0x1a2;eip=0x00bcda; 	J(JMP(loc_1bce4));	// 29418                  jmp     short loc_1BCE4 ;~ 01A2:BCDA
loc_1bcdc:
	// 6215 
cs=0x1a2;eip=0x00bcdc; 	X(ADD(*(dw*)(raddr(ds,si+2)), ax));	// 29422                  add     [si+2], ax ;~ 01A2:BCDC
cs=0x1a2;eip=0x00bcdf; 	J(JNC(loc_1bce4));	// 29423                  jnb     short loc_1BCE4 ;~ 01A2:BCDF
cs=0x1a2;eip=0x00bce1; 	X(OR(*(raddr(ds,si)), 1));	// 29424                  or      byte ptr [si], 1 ;~ 01A2:BCE1
loc_1bce4:
	// 6216 
cs=0x1a2;eip=0x00bce4; 	T(ADD(si, 4));	// 29428                  add     si, 4 ;~ 01A2:BCE4
cs=0x1a2;eip=0x00bce7; 	J(LOOP(loc_1bcdc));	// 29429                  loop    loc_1BCDC ;~ 01A2:BCE7
loc_1bce9:
	// 6217 
cs=0x1a2;eip=0x00bce9; 	X(POP(ds));	// 29433                  pop     ds ;~ 01A2:BCE9
cs=0x1a2;eip=0x00bcea; 	X(POP(es));	// 29434                  pop     es ;~ 01A2:BCEA
cs=0x1a2;eip=0x00bceb; 	X(POP(di));	// 29436                  pop     di ;~ 01A2:BCEB
cs=0x1a2;eip=0x00bcec; 	X(POP(si));	// 29437                  pop     si ;~ 01A2:BCEC
cs=0x1a2;eip=0x00bced; 	X(POP(bp));	// 29438                  pop     bp ;~ 01A2:BCED
cs=0x1a2;eip=0x00bcee; 	X(POP(dx));	// 29439                  pop     dx ;~ 01A2:BCEE
cs=0x1a2;eip=0x00bcef; 	X(POP(cx));	// 29440                  pop     cx ;~ 01A2:BCEF
cs=0x1a2;eip=0x00bcf0; 	X(POP(bx));	// 29441                  pop     bx ;~ 01A2:BCF0
cs=0x1a2;eip=0x00bcf1; 	X(POP(ax));	// 29442                  pop     ax ;~ 01A2:BCF1
cs=0x1a2;eip=0x00bcf2; 	J(RETN(0));	// 29443                  retn ;~ 01A2:BCF2

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1bcdc: 	goto loc_1bcdc;
        case m2c::kloc_1bce4: 	goto loc_1bce4;
        case m2c::kloc_1bce9: 	goto loc_1bce9;
        case m2c::ksub_1bca9: 	goto sub_1bca9;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1bcf3(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1bcf3:
    _begin:
cs=0x1a2;eip=0x00bcf3; 	X(PUSH(ax));	// 29451                  push    ax ;~ 01A2:BCF3
cs=0x1a2;eip=0x00bcf4; 	X(PUSH(bx));	// 29452                  push    bx ;~ 01A2:BCF4
cs=0x1a2;eip=0x00bcf5; 	X(PUSH(cx));	// 29453                  push    cx ;~ 01A2:BCF5
cs=0x1a2;eip=0x00bcf6; 	X(PUSH(dx));	// 29454                  push    dx ;~ 01A2:BCF6
cs=0x1a2;eip=0x00bcf7; 	X(PUSH(bp));	// 29455                  push    bp ;~ 01A2:BCF7
cs=0x1a2;eip=0x00bcf8; 	X(PUSH(si));	// 29456                  push    si ;~ 01A2:BCF8
cs=0x1a2;eip=0x00bcf9; 	X(PUSH(di));	// 29457                  push    di ;~ 01A2:BCF9
cs=0x1a2;eip=0x00bcfa; 	X(PUSH(es));	// 29458                  push    es ;~ 01A2:BCFA
cs=0x1a2;eip=0x00bcfb; 	X(PUSH(ds));	// 29459                  push    ds ;~ 01A2:BCFB
cs=0x1a2;eip=0x00bcfc; 	T(ax = es;);	// 29460                  mov     ax, es ;~ 01A2:BCFC
cs=0x1a2;eip=0x00bcfe; 	T(bx = word_1f8ee;);	// 29461                  mov     bx, ds:word_1F8EE ;~ 01A2:BCFE
cs=0x1a2;eip=0x00bd02; 	T(ds = ax;);	// 29462                  mov     ds, ax ;~ 01A2:BD02
cs=0x1a2;eip=0x00bd04; 	X(PUSH(ds));	// 29464                  push    ds ;~ 01A2:BD04
cs=0x1a2;eip=0x00bd05; 	X(PUSH(di));	// 29465                  push    di ;~ 01A2:BD05
cs=0x1a2;eip=0x00bd06; 	T(dx = di;);	// 29466                  mov     dx, di ;~ 01A2:BD06
cs=0x1a2;eip=0x00bd08; 	T(cx = 0x20;);	// 29467                  mov     cx, 20h ; ' ' ;~ 01A2:BD08
cs=0x1a2;eip=0x00bd0b; 	J(CALL(sub_1c7d1,0));	// 29468                  call    near ptr sub_1C7D1 ;~ 01A2:BD0B
cs=0x1a2;eip=0x00bd0e; 	X(POP(di));	// 29469                  pop     di ;~ 01A2:BD0E
cs=0x1a2;eip=0x00bd0f; 	X(POP(ds));	// 29470                  pop     ds ;~ 01A2:BD0F
cs=0x1a2;eip=0x00bd10; 	T(MOV(ax, *(dw*)(raddr(ds,di))));	// 29471                  mov     ax, [di] ;~ 01A2:BD10
cs=0x1a2;eip=0x00bd12; 	X(MOV(*(raddr(ds,di)), ah));	// 29472                  mov     [di], ah ;~ 01A2:BD12
cs=0x1a2;eip=0x00bd14; 	X(MOV(*(raddr(ds,di+1)), al));	// 29473                  mov     [di+1], al ;~ 01A2:BD14
cs=0x1a2;eip=0x00bd17; 	T(MOV(ax, *(dw*)(raddr(ds,di+2))));	// 29474                  mov     ax, [di+2] ;~ 01A2:BD17
cs=0x1a2;eip=0x00bd1a; 	X(MOV(*(raddr(ds,di+2)), ah));	// 29475                  mov     [di+2], ah ;~ 01A2:BD1A
cs=0x1a2;eip=0x00bd1d; 	X(MOV(*(raddr(ds,di+3)), al));	// 29476                  mov     [di+3], al ;~ 01A2:BD1D
cs=0x1a2;eip=0x00bd20; 	T(MOV(ax, *(dw*)(raddr(ds,di+4))));	// 29477                  mov     ax, [di+4] ;~ 01A2:BD20
cs=0x1a2;eip=0x00bd23; 	X(MOV(*(raddr(ds,di+4)), ah));	// 29478                  mov     [di+4], ah ;~ 01A2:BD23
cs=0x1a2;eip=0x00bd26; 	X(MOV(*(raddr(ds,di+5)), al));	// 29479                  mov     [di+5], al ;~ 01A2:BD26
cs=0x1a2;eip=0x00bd29; 	T(MOV(ax, *(dw*)(raddr(ds,di+6))));	// 29480                  mov     ax, [di+6] ;~ 01A2:BD29
cs=0x1a2;eip=0x00bd2c; 	X(MOV(*(raddr(ds,di+6)), ah));	// 29481                  mov     [di+6], ah ;~ 01A2:BD2C
cs=0x1a2;eip=0x00bd2f; 	X(MOV(*(raddr(ds,di+7)), al));	// 29482                  mov     [di+7], al ;~ 01A2:BD2F
cs=0x1a2;eip=0x00bd32; 	T(MOV(ax, *(dw*)(raddr(ds,di+8))));	// 29483                  mov     ax, [di+8] ;~ 01A2:BD32
cs=0x1a2;eip=0x00bd35; 	X(MOV(*(raddr(ds,di+8)), ah));	// 29484                  mov     [di+8], ah ;~ 01A2:BD35
cs=0x1a2;eip=0x00bd38; 	X(MOV(*(raddr(ds,di+9)), al));	// 29485                  mov     [di+9], al ;~ 01A2:BD38
cs=0x1a2;eip=0x00bd3b; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x0A))));	// 29486                  mov     ax, [di+0Ah] ;~ 01A2:BD3B
cs=0x1a2;eip=0x00bd3e; 	X(MOV(*(raddr(ds,di+0x0A)), ah));	// 29487                  mov     [di+0Ah], ah ;~ 01A2:BD3E
cs=0x1a2;eip=0x00bd41; 	X(MOV(*(raddr(ds,di+0x0B)), al));	// 29488                  mov     [di+0Bh], al ;~ 01A2:BD41
cs=0x1a2;eip=0x00bd44; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x10))));	// 29489                  mov     ax, [di+10h] ;~ 01A2:BD44
cs=0x1a2;eip=0x00bd47; 	X(MOV(*(raddr(ds,di+0x10)), ah));	// 29490                  mov     [di+10h], ah ;~ 01A2:BD47
cs=0x1a2;eip=0x00bd4a; 	X(MOV(*(raddr(ds,di+0x11)), al));	// 29491                  mov     [di+11h], al ;~ 01A2:BD4A
cs=0x1a2;eip=0x00bd4d; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x12))));	// 29492                  mov     ax, [di+12h] ;~ 01A2:BD4D
cs=0x1a2;eip=0x00bd50; 	X(MOV(*(raddr(ds,di+0x12)), ah));	// 29493                  mov     [di+12h], ah ;~ 01A2:BD50
cs=0x1a2;eip=0x00bd53; 	X(MOV(*(raddr(ds,di+0x13)), al));	// 29494                  mov     [di+13h], al ;~ 01A2:BD53
cs=0x1a2;eip=0x00bd56; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x14))));	// 29495                  mov     ax, [di+14h] ;~ 01A2:BD56
cs=0x1a2;eip=0x00bd59; 	X(MOV(*(raddr(ds,di+0x14)), ah));	// 29496                  mov     [di+14h], ah ;~ 01A2:BD59
cs=0x1a2;eip=0x00bd5c; 	X(MOV(*(raddr(ds,di+0x15)), al));	// 29497                  mov     [di+15h], al ;~ 01A2:BD5C
cs=0x1a2;eip=0x00bd5f; 	X(POP(ds));	// 29498                  pop     ds ;~ 01A2:BD5F
cs=0x1a2;eip=0x00bd60; 	X(POP(es));	// 29500                  pop     es ;~ 01A2:BD60
cs=0x1a2;eip=0x00bd61; 	X(POP(di));	// 29501                  pop     di ;~ 01A2:BD61
cs=0x1a2;eip=0x00bd62; 	X(POP(si));	// 29502                  pop     si ;~ 01A2:BD62
cs=0x1a2;eip=0x00bd63; 	X(POP(bp));	// 29503                  pop     bp ;~ 01A2:BD63
cs=0x1a2;eip=0x00bd64; 	X(POP(dx));	// 29504                  pop     dx ;~ 01A2:BD64
cs=0x1a2;eip=0x00bd65; 	X(POP(cx));	// 29505                  pop     cx ;~ 01A2:BD65
cs=0x1a2;eip=0x00bd66; 	X(POP(bx));	// 29506                  pop     bx ;~ 01A2:BD66
cs=0x1a2;eip=0x00bd67; 	X(POP(ax));	// 29507                  pop     ax ;~ 01A2:BD67
cs=0x1a2;eip=0x00bd68; 	J(JC(locret_1bd6b));	// 29508                  jb      short locret_1BD6B ;~ 01A2:BD68
cs=0x1a2;eip=0x00bd6a; 	J(RETN(0));	// 29509                  retn ;~ 01A2:BD6A
locret_1bd6b:
	// 6218 
cs=0x1a2;eip=0x00bd6b; 	J(RETN(0));	// 29513                  retn ;~ 01A2:BD6B

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::klocret_1bd6b: 	goto locret_1bd6b;
        case m2c::ksub_1bcf3: 	goto sub_1bcf3;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1bd6c(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1bd6c:
    _begin:
cs=0x1a2;eip=0x00bd6c; 	X(PUSH(ax));	// 29521                  push    ax ;~ 01A2:BD6C
cs=0x1a2;eip=0x00bd6d; 	X(PUSH(bx));	// 29522                  push    bx ;~ 01A2:BD6D
cs=0x1a2;eip=0x00bd6e; 	X(PUSH(cx));	// 29523                  push    cx ;~ 01A2:BD6E
cs=0x1a2;eip=0x00bd6f; 	X(PUSH(dx));	// 29524                  push    dx ;~ 01A2:BD6F
cs=0x1a2;eip=0x00bd70; 	X(PUSH(bp));	// 29525                  push    bp ;~ 01A2:BD70
cs=0x1a2;eip=0x00bd71; 	X(PUSH(si));	// 29526                  push    si ;~ 01A2:BD71
cs=0x1a2;eip=0x00bd72; 	X(PUSH(di));	// 29527                  push    di ;~ 01A2:BD72
cs=0x1a2;eip=0x00bd73; 	X(PUSH(es));	// 29528                  push    es ;~ 01A2:BD73
cs=0x1a2;eip=0x00bd74; 	X(PUSH(ds));	// 29529                  push    ds ;~ 01A2:BD74
cs=0x1a2;eip=0x00bd75; 	T(cx = 8;);	// 29530                  mov     cx, 8 ;~ 01A2:BD75
cs=0x1a2;eip=0x00bd78; 	T(ax = es;);	// 29531                  mov     ax, es ;~ 01A2:BD78
cs=0x1a2;eip=0x00bd7a; 	T(bx = word_1f8ee;);	// 29532                  mov     bx, ds:word_1F8EE ;~ 01A2:BD7A
cs=0x1a2;eip=0x00bd7e; 	T(ds = ax;);	// 29533                  mov     ds, ax ;~ 01A2:BD7E
cs=0x1a2;eip=0x00bd80; 	T(dx = di;);	// 29535                  mov     dx, di ;~ 01A2:BD80
cs=0x1a2;eip=0x00bd82; 	T(cx = cx;);	// 29536                  mov     cx, cx ;~ 01A2:BD82
cs=0x1a2;eip=0x00bd84; 	J(CALL(sub_1c7d1,0));	// 29537                  call    near ptr sub_1C7D1 ;~ 01A2:BD84
cs=0x1a2;eip=0x00bd87; 	X(POP(ds));	// 29538                  pop     ds ;~ 01A2:BD87
cs=0x1a2;eip=0x00bd88; 	X(POP(es));	// 29540                  pop     es ;~ 01A2:BD88
cs=0x1a2;eip=0x00bd89; 	X(POP(di));	// 29541                  pop     di ;~ 01A2:BD89
cs=0x1a2;eip=0x00bd8a; 	X(POP(si));	// 29542                  pop     si ;~ 01A2:BD8A
cs=0x1a2;eip=0x00bd8b; 	X(POP(bp));	// 29543                  pop     bp ;~ 01A2:BD8B
cs=0x1a2;eip=0x00bd8c; 	X(POP(dx));	// 29544                  pop     dx ;~ 01A2:BD8C
cs=0x1a2;eip=0x00bd8d; 	X(POP(cx));	// 29545                  pop     cx ;~ 01A2:BD8D
cs=0x1a2;eip=0x00bd8e; 	X(POP(bx));	// 29546                  pop     bx ;~ 01A2:BD8E
cs=0x1a2;eip=0x00bd8f; 	X(POP(ax));	// 29547                  pop     ax ;~ 01A2:BD8F
cs=0x1a2;eip=0x00bd90; 	T(XOR(ch, ch));	// 29548                  xor     ch, ch ;~ 01A2:BD90
cs=0x1a2;eip=0x00bd92; 	T(MOV(ax, *(dw*)(raddr(es,di+2))));	// 29549                  mov     ax, es:[di+2] ;~ 01A2:BD92
cs=0x1a2;eip=0x00bd96; 	T(XCHG(al, ah));	// 29550                  xchg    al, ah ;~ 01A2:BD96
cs=0x1a2;eip=0x00bd98; 	X(MOV(*(dw*)(raddr(es,di+2)), ax));	// 29551                  mov     es:[di+2], ax ;~ 01A2:BD98
cs=0x1a2;eip=0x00bd9c; 	T(MOV(cl, *(raddr(es,di))));	// 29552                  mov     cl, es:[di] ;~ 01A2:BD9C
cs=0x1a2;eip=0x00bd9f; 	T(ADD(di, 8));	// 29553                  add     di, 8 ;~ 01A2:BD9F
cs=0x1a2;eip=0x00bda2; 	X(PUSH(ax));	// 29554                  push    ax ;~ 01A2:BDA2
cs=0x1a2;eip=0x00bda3; 	X(PUSH(bx));	// 29555                  push    bx ;~ 01A2:BDA3
cs=0x1a2;eip=0x00bda4; 	X(PUSH(cx));	// 29556                  push    cx ;~ 01A2:BDA4
cs=0x1a2;eip=0x00bda5; 	X(PUSH(dx));	// 29557                  push    dx ;~ 01A2:BDA5
cs=0x1a2;eip=0x00bda6; 	X(PUSH(bp));	// 29558                  push    bp ;~ 01A2:BDA6
cs=0x1a2;eip=0x00bda7; 	X(PUSH(si));	// 29559                  push    si ;~ 01A2:BDA7
cs=0x1a2;eip=0x00bda8; 	X(PUSH(di));	// 29560                  push    di ;~ 01A2:BDA8
cs=0x1a2;eip=0x00bda9; 	X(PUSH(es));	// 29561                  push    es ;~ 01A2:BDA9
cs=0x1a2;eip=0x00bdaa; 	X(PUSH(ds));	// 29562                  push    ds ;~ 01A2:BDAA
cs=0x1a2;eip=0x00bdab; 	T(SHL(cx, 1));	// 29563                  shl     cx, 1 ;~ 01A2:BDAB
cs=0x1a2;eip=0x00bdad; 	T(SHL(cx, 1));	// 29564                  shl     cx, 1 ;~ 01A2:BDAD
cs=0x1a2;eip=0x00bdaf; 	T(SHL(cx, 1));	// 29565                  shl     cx, 1 ;~ 01A2:BDAF
cs=0x1a2;eip=0x00bdb1; 	T(ADD(cx, ax));	// 29566                  add     cx, ax ;~ 01A2:BDB1
cs=0x1a2;eip=0x00bdb3; 	T(ax = es;);	// 29567                  mov     ax, es ;~ 01A2:BDB3
cs=0x1a2;eip=0x00bdb5; 	T(bx = word_1f8ee;);	// 29568                  mov     bx, ds:word_1F8EE ;~ 01A2:BDB5
cs=0x1a2;eip=0x00bdb9; 	T(ds = ax;);	// 29569                  mov     ds, ax ;~ 01A2:BDB9
cs=0x1a2;eip=0x00bdbb; 	T(dx = di;);	// 29571                  mov     dx, di ;~ 01A2:BDBB
cs=0x1a2;eip=0x00bdbd; 	T(cx = cx;);	// 29572                  mov     cx, cx ;~ 01A2:BDBD
cs=0x1a2;eip=0x00bdbf; 	J(CALL(sub_1c7d1,0));	// 29573                  call    near ptr sub_1C7D1 ;~ 01A2:BDBF
cs=0x1a2;eip=0x00bdc2; 	X(POP(ds));	// 29574                  pop     ds ;~ 01A2:BDC2
cs=0x1a2;eip=0x00bdc3; 	X(POP(es));	// 29576                  pop     es ;~ 01A2:BDC3
cs=0x1a2;eip=0x00bdc4; 	X(POP(di));	// 29577                  pop     di ;~ 01A2:BDC4
cs=0x1a2;eip=0x00bdc5; 	X(POP(si));	// 29578                  pop     si ;~ 01A2:BDC5
cs=0x1a2;eip=0x00bdc6; 	X(POP(bp));	// 29579                  pop     bp ;~ 01A2:BDC6
cs=0x1a2;eip=0x00bdc7; 	X(POP(dx));	// 29580                  pop     dx ;~ 01A2:BDC7
cs=0x1a2;eip=0x00bdc8; 	X(POP(cx));	// 29581                  pop     cx ;~ 01A2:BDC8
cs=0x1a2;eip=0x00bdc9; 	X(POP(bx));	// 29582                  pop     bx ;~ 01A2:BDC9
cs=0x1a2;eip=0x00bdca; 	X(POP(ax));	// 29583                  pop     ax ;~ 01A2:BDCA
cs=0x1a2;eip=0x00bdcb; 	X(PUSH(ax));	// 29584                  push    ax ;~ 01A2:BDCB
cs=0x1a2;eip=0x00bdcc; 	X(PUSH(bx));	// 29585                  push    bx ;~ 01A2:BDCC
cs=0x1a2;eip=0x00bdcd; 	X(PUSH(cx));	// 29586                  push    cx ;~ 01A2:BDCD
cs=0x1a2;eip=0x00bdce; 	X(PUSH(dx));	// 29587                  push    dx ;~ 01A2:BDCE
cs=0x1a2;eip=0x00bdcf; 	X(PUSH(bp));	// 29588                  push    bp ;~ 01A2:BDCF
cs=0x1a2;eip=0x00bdd0; 	X(PUSH(si));	// 29589                  push    si ;~ 01A2:BDD0
cs=0x1a2;eip=0x00bdd1; 	X(PUSH(di));	// 29590                  push    di ;~ 01A2:BDD1
cs=0x1a2;eip=0x00bdd2; 	X(PUSH(es));	// 29591                  push    es ;~ 01A2:BDD2
cs=0x1a2;eip=0x00bdd3; 	X(PUSH(ds));	// 29592                  push    ds ;~ 01A2:BDD3
cs=0x1a2;eip=0x00bdd4; 	T(ADD(di, ax));	// 29593                  add     di, ax ;~ 01A2:BDD4
cs=0x1a2;eip=0x00bdd6; 	T(dx = cx;);	// 29594                  mov     dx, cx ;~ 01A2:BDD6
cs=0x1a2;eip=0x00bdd8; 	T(bx = di;);	// 29595                  mov     bx, di ;~ 01A2:BDD8
loc_1bdda:
	// 6219 
cs=0x1a2;eip=0x00bdda; 	T(MOV(ax, *(dw*)(raddr(es,di))));	// 29598                  mov     ax, es:[di] ;~ 01A2:BDDA
cs=0x1a2;eip=0x00bddd; 	T(XCHG(al, ah));	// 29599                  xchg    al, ah ;~ 01A2:BDDD
cs=0x1a2;eip=0x00bddf; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 29600                  mov     es:[di], ax ;~ 01A2:BDDF
cs=0x1a2;eip=0x00bde2; 	T(ADD(di, 8));	// 29601                  add     di, 8 ;~ 01A2:BDE2
cs=0x1a2;eip=0x00bde5; 	J(LOOP(loc_1bdda));	// 29602                  loop    loc_1BDDA ;~ 01A2:BDE5
cs=0x1a2;eip=0x00bde7; 	T(cx = dx;);	// 29603                  mov     cx, dx ;~ 01A2:BDE7
loc_1bde9:
	// 6220 
cs=0x1a2;eip=0x00bde9; 	J(CALL(sub_1be5f,0));	// 29606                  call    sub_1BE5F ;~ 01A2:BDE9
cs=0x1a2;eip=0x00bdec; 	J(CALL(sub_1beb0,0));	// 29607                  call    sub_1BEB0 ;~ 01A2:BDEC
cs=0x1a2;eip=0x00bdef; 	T(ADD(bx, 2));	// 29608                  add     bx, 2 ;~ 01A2:BDEF
cs=0x1a2;eip=0x00bdf2; 	T(MOV(dx, *(dw*)(raddr(es,bx))));	// 29609                  mov     dx, es:[bx] ;~ 01A2:BDF2
cs=0x1a2;eip=0x00bdf5; 	T(XCHG(dl, dh));	// 29610                  xchg    dl, dh ;~ 01A2:BDF5
cs=0x1a2;eip=0x00bdf7; 	X(MOV(*(dw*)(raddr(es,bx)), dx));	// 29611                  mov     es:[bx], dx ;~ 01A2:BDF7
cs=0x1a2;eip=0x00bdfa; 	T(ADD(bx, 2));	// 29612                  add     bx, 2 ;~ 01A2:BDFA
cs=0x1a2;eip=0x00bdfd; 	T(MOV(dx, *(dw*)(raddr(es,bx))));	// 29613                  mov     dx, es:[bx] ;~ 01A2:BDFD
cs=0x1a2;eip=0x00be00; 	T(XCHG(dl, dh));	// 29614                  xchg    dl, dh ;~ 01A2:BE00
cs=0x1a2;eip=0x00be02; 	X(MOV(*(dw*)(raddr(es,bx)), dx));	// 29615                  mov     es:[bx], dx ;~ 01A2:BE02
cs=0x1a2;eip=0x00be05; 	T(ADD(bx, 4));	// 29616                  add     bx, 4 ;~ 01A2:BE05
cs=0x1a2;eip=0x00be08; 	T(dx = cx;);	// 29617                  mov     dx, cx ;~ 01A2:BE08
cs=0x1a2;eip=0x00be0a; 	X(PUSH(bx));	// 29618                  push    bx ;~ 01A2:BE0A
cs=0x1a2;eip=0x00be0b; 	J(JMP(loc_1be13));	// 29619                  jmp     short loc_1BE13 ;~ 01A2:BE0B
loc_1be0d:
	// 6221 
cs=0x1a2;eip=0x00be0d; 	X(ADD(*(dw*)(raddr(es,bx)), ax));	// 29623                  add     es:[bx], ax ;~ 01A2:BE0D
cs=0x1a2;eip=0x00be10; 	T(ADD(bx, 8));	// 29624                  add     bx, 8 ;~ 01A2:BE10
loc_1be13:
	// 6222 
cs=0x1a2;eip=0x00be13; 	J(LOOP(loc_1be0d));	// 29627                  loop    loc_1BE0D ;~ 01A2:BE13
cs=0x1a2;eip=0x00be15; 	X(POP(bx));	// 29628                  pop     bx ;~ 01A2:BE15
cs=0x1a2;eip=0x00be16; 	T(cx = dx;);	// 29629                  mov     cx, dx ;~ 01A2:BE16
cs=0x1a2;eip=0x00be18; 	T(ADD(di, ax));	// 29630                  add     di, ax ;~ 01A2:BE18
cs=0x1a2;eip=0x00be1a; 	T(ADD(di, ax));	// 29631                  add     di, ax ;~ 01A2:BE1A
cs=0x1a2;eip=0x00be1c; 	T(ADD(di, ax));	// 29632                  add     di, ax ;~ 01A2:BE1C
cs=0x1a2;eip=0x00be1e; 	T(ADD(di, ax));	// 29633                  add     di, ax ;~ 01A2:BE1E
cs=0x1a2;eip=0x00be20; 	T(ADD(di, ax));	// 29634                  add     di, ax ;~ 01A2:BE20
cs=0x1a2;eip=0x00be22; 	T(ADD(di, 4));	// 29635                  add     di, 4 ;~ 01A2:BE22
cs=0x1a2;eip=0x00be25; 	X(PUSH(si));	// 29636                  push    si ;~ 01A2:BE25
cs=0x1a2;eip=0x00be26; 	J(CALL(sub_1bca9,0));	// 29637                  call    sub_1BCA9 ;~ 01A2:BE26
cs=0x1a2;eip=0x00be29; 	X(POP(si));	// 29638                  pop     si ;~ 01A2:BE29
cs=0x1a2;eip=0x00be2a; 	J(LOOP(loc_1bde9));	// 29639                  loop    loc_1BDE9 ;~ 01A2:BE2A
cs=0x1a2;eip=0x00be2c; 	X(POP(ds));	// 29640                  pop     ds ;~ 01A2:BE2C
cs=0x1a2;eip=0x00be2d; 	X(POP(es));	// 29641                  pop     es ;~ 01A2:BE2D
cs=0x1a2;eip=0x00be2e; 	X(POP(di));	// 29642                  pop     di ;~ 01A2:BE2E
cs=0x1a2;eip=0x00be2f; 	X(POP(si));	// 29643                  pop     si ;~ 01A2:BE2F
cs=0x1a2;eip=0x00be30; 	X(POP(bp));	// 29644                  pop     bp ;~ 01A2:BE30
cs=0x1a2;eip=0x00be31; 	X(POP(dx));	// 29645                  pop     dx ;~ 01A2:BE31
cs=0x1a2;eip=0x00be32; 	X(POP(cx));	// 29646                  pop     cx ;~ 01A2:BE32
cs=0x1a2;eip=0x00be33; 	X(POP(bx));	// 29647                  pop     bx ;~ 01A2:BE33
cs=0x1a2;eip=0x00be34; 	X(POP(ax));	// 29648                  pop     ax ;~ 01A2:BE34
cs=0x1a2;eip=0x00be35; 	J(RETN(0));	// 29649                  retn ;~ 01A2:BE35

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1bdda: 	goto loc_1bdda;
        case m2c::kloc_1bde9: 	goto loc_1bde9;
        case m2c::kloc_1be0d: 	goto loc_1be0d;
        case m2c::kloc_1be13: 	goto loc_1be13;
        case m2c::ksub_1bd6c: 	goto sub_1bd6c;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1be36(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1be36:
    _begin:
cs=0x1a2;eip=0x00be36; 	X(PUSH(ax));	// 29658                  push    ax ;~ 01A2:BE36
cs=0x1a2;eip=0x00be37; 	X(PUSH(bx));	// 29659                  push    bx ;~ 01A2:BE37
cs=0x1a2;eip=0x00be38; 	X(PUSH(cx));	// 29660                  push    cx ;~ 01A2:BE38
cs=0x1a2;eip=0x00be39; 	X(PUSH(dx));	// 29661                  push    dx ;~ 01A2:BE39
cs=0x1a2;eip=0x00be3a; 	X(PUSH(bp));	// 29662                  push    bp ;~ 01A2:BE3A
cs=0x1a2;eip=0x00be3b; 	X(PUSH(si));	// 29663                  push    si ;~ 01A2:BE3B
cs=0x1a2;eip=0x00be3c; 	X(PUSH(di));	// 29664                  push    di ;~ 01A2:BE3C
cs=0x1a2;eip=0x00be3d; 	X(PUSH(es));	// 29665                  push    es ;~ 01A2:BE3D
cs=0x1a2;eip=0x00be3e; 	X(PUSH(ds));	// 29666                  push    ds ;~ 01A2:BE3E
cs=0x1a2;eip=0x00be3f; 	T(MOV(cx, *(dw*)(raddr(ds,si))));	// 29667                  mov     cx, [si] ;~ 01A2:BE3F
cs=0x1a2;eip=0x00be41; 	T(SHR(cx, 1));	// 29668                  shr     cx, 1 ;~ 01A2:BE41
cs=0x1a2;eip=0x00be43; 	T(SUB(cx, 0x20));	// 29669                  sub     cx, 20h ; ' ' ;~ 01A2:BE43
cs=0x1a2;eip=0x00be46; 	T(ax = es;);	// 29670                  mov     ax, es ;~ 01A2:BE46
cs=0x1a2;eip=0x00be48; 	T(bx = word_1f8ee;);	// 29671                  mov     bx, ds:word_1F8EE ;~ 01A2:BE48
cs=0x1a2;eip=0x00be4c; 	T(ds = ax;);	// 29672                  mov     ds, ax ;~ 01A2:BE4C
cs=0x1a2;eip=0x00be4e; 	T(dx = di;);	// 29674                  mov     dx, di ;~ 01A2:BE4E
cs=0x1a2;eip=0x00be50; 	T(cx = cx;);	// 29675                  mov     cx, cx ;~ 01A2:BE50
cs=0x1a2;eip=0x00be52; 	J(CALL(sub_1c7d1,0));	// 29676                  call    near ptr sub_1C7D1 ;~ 01A2:BE52
cs=0x1a2;eip=0x00be55; 	X(POP(ds));	// 29677                  pop     ds ;~ 01A2:BE55
cs=0x1a2;eip=0x00be56; 	X(POP(es));	// 29679                  pop     es ;~ 01A2:BE56
cs=0x1a2;eip=0x00be57; 	X(POP(di));	// 29680                  pop     di ;~ 01A2:BE57
cs=0x1a2;eip=0x00be58; 	X(POP(si));	// 29681                  pop     si ;~ 01A2:BE58
cs=0x1a2;eip=0x00be59; 	X(POP(bp));	// 29682                  pop     bp ;~ 01A2:BE59
cs=0x1a2;eip=0x00be5a; 	X(POP(dx));	// 29683                  pop     dx ;~ 01A2:BE5A
cs=0x1a2;eip=0x00be5b; 	X(POP(cx));	// 29684                  pop     cx ;~ 01A2:BE5B
cs=0x1a2;eip=0x00be5c; 	X(POP(bx));	// 29685                  pop     bx ;~ 01A2:BE5C
cs=0x1a2;eip=0x00be5d; 	X(POP(ax));	// 29686                  pop     ax ;~ 01A2:BE5D
cs=0x1a2;eip=0x00be5e; 	J(RETN(0));	// 29687                  retn ;~ 01A2:BE5E

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1be36: 	goto sub_1be36;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1be5f(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1be5f:
    _begin:
cs=0x1a2;eip=0x00be5f; 	X(PUSH(ax));	// 29696                  push    ax ;~ 01A2:BE5F
cs=0x1a2;eip=0x00be60; 	X(PUSH(bx));	// 29697                  push    bx ;~ 01A2:BE60
cs=0x1a2;eip=0x00be61; 	X(PUSH(cx));	// 29698                  push    cx ;~ 01A2:BE61
cs=0x1a2;eip=0x00be62; 	X(PUSH(dx));	// 29699                  push    dx ;~ 01A2:BE62
cs=0x1a2;eip=0x00be63; 	X(PUSH(bp));	// 29700                  push    bp ;~ 01A2:BE63
cs=0x1a2;eip=0x00be64; 	X(PUSH(si));	// 29701                  push    si ;~ 01A2:BE64
cs=0x1a2;eip=0x00be65; 	X(PUSH(di));	// 29702                  push    di ;~ 01A2:BE65
cs=0x1a2;eip=0x00be66; 	X(PUSH(es));	// 29703                  push    es ;~ 01A2:BE66
cs=0x1a2;eip=0x00be67; 	X(PUSH(ds));	// 29704                  push    ds ;~ 01A2:BE67
cs=0x1a2;eip=0x00be68; 	T(dx = 0x10B6;);	// 29705                  mov     dx, 10B6h ;~ 01A2:BE68
cs=0x1a2;eip=0x00be6b; 	T(cx = 4;);	// 29706                  mov     cx, 4 ;~ 01A2:BE6B
cs=0x1a2;eip=0x00be6e; 	T(bx = word_1f8ee;);	// 29707                  mov     bx, ds:word_1F8EE ;~ 01A2:BE6E
cs=0x1a2;eip=0x00be72; 	J(CALL(sub_1c7d1,0));	// 29708                  call    near ptr sub_1C7D1 ;~ 01A2:BE72
cs=0x1a2;eip=0x00be75; 	T(ax = word_20226;);	// 29710                  mov     ax, ds:word_20226 ;~ 01A2:BE75
cs=0x1a2;eip=0x00be78; 	T(XCHG(al, ah));	// 29711                  xchg    al, ah ;~ 01A2:BE78
cs=0x1a2;eip=0x00be7a; 	X(word_20226 = ax;);	// 29712                  mov     ds:word_20226, ax ;~ 01A2:BE7A
cs=0x1a2;eip=0x00be7d; 	T(bx = word_20228;);	// 29713                  mov     bx, ds:word_20228 ;~ 01A2:BE7D
cs=0x1a2;eip=0x00be81; 	T(XCHG(bl, bh));	// 29714                  xchg    bl, bh ;~ 01A2:BE81
cs=0x1a2;eip=0x00be83; 	X(word_20228 = bx;);	// 29715                  mov     ds:word_20228, bx ;~ 01A2:BE83
cs=0x1a2;eip=0x00be87; 	T(SHL(ax, 1));	// 29716                  shl     ax, 1 ;~ 01A2:BE87
cs=0x1a2;eip=0x00be89; 	T(SHL(ax, 1));	// 29717                  shl     ax, 1 ;~ 01A2:BE89
cs=0x1a2;eip=0x00be8b; 	T(SHL(ax, 1));	// 29718                  shl     ax, 1 ;~ 01A2:BE8B
cs=0x1a2;eip=0x00be8d; 	T(MUL1_2(bx));	// 29719                  mul     bx ;~ 01A2:BE8D
cs=0x1a2;eip=0x00be8f; 	X(word_1f72a = ax;);	// 29720                  mov     ds:word_1F72A, ax ;~ 01A2:BE8F
cs=0x1a2;eip=0x00be92; 	T(cx = ax;);	// 29721                  mov     cx, ax ;~ 01A2:BE92
cs=0x1a2;eip=0x00be94; 	T(dx = 0x10BA;);	// 29722                  mov     dx, 10BAh ;~ 01A2:BE94
cs=0x1a2;eip=0x00be97; 	T(cx = cx;);	// 29723                  mov     cx, cx ;~ 01A2:BE97
cs=0x1a2;eip=0x00be99; 	T(bx = word_1f8ee;);	// 29724                  mov     bx, ds:word_1F8EE ;~ 01A2:BE99
cs=0x1a2;eip=0x00be9d; 	J(CALL(sub_1c7d1,0));	// 29725                  call    near ptr sub_1C7D1 ;~ 01A2:BE9D
cs=0x1a2;eip=0x00bea0; 	X(POP(ds));	// 29726                  pop     ds ;~ 01A2:BEA0
cs=0x1a2;eip=0x00bea1; 	X(POP(es));	// 29727                  pop     es ;~ 01A2:BEA1
cs=0x1a2;eip=0x00bea2; 	X(POP(di));	// 29729                  pop     di ;~ 01A2:BEA2
cs=0x1a2;eip=0x00bea3; 	X(POP(si));	// 29730                  pop     si ;~ 01A2:BEA3
cs=0x1a2;eip=0x00bea4; 	X(POP(bp));	// 29731                  pop     bp ;~ 01A2:BEA4
cs=0x1a2;eip=0x00bea5; 	X(POP(dx));	// 29732                  pop     dx ;~ 01A2:BEA5
cs=0x1a2;eip=0x00bea6; 	X(POP(cx));	// 29733                  pop     cx ;~ 01A2:BEA6
cs=0x1a2;eip=0x00bea7; 	X(POP(bx));	// 29734                  pop     bx ;~ 01A2:BEA7
cs=0x1a2;eip=0x00bea8; 	X(POP(ax));	// 29735                  pop     ax ;~ 01A2:BEA8
cs=0x1a2;eip=0x00bea9; 	J(JC(locret_1beaf));	// 29736                  jb      short locret_1BEAF ;~ 01A2:BEA9
cs=0x1a2;eip=0x00beab; 	T(ax = word_1f72a;);	// 29737                  mov     ax, ds:word_1F72A ;~ 01A2:BEAB
cs=0x1a2;eip=0x00beae; 	J(RETN(0));	// 29738                  retn ;~ 01A2:BEAE
locret_1beaf:
	// 6223 
cs=0x1a2;eip=0x00beaf; 	J(RETN(0));	// 29742                  retn ;~ 01A2:BEAF

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::klocret_1beaf: 	goto locret_1beaf;
        case m2c::ksub_1be5f: 	goto sub_1be5f;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1beb0(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1beb0:
    _begin:
cs=0x1a2;eip=0x00beb0; 	T(SHR(ax, 1));	// 29751                  shr     ax, 1 ;~ 01A2:BEB0
cs=0x1a2;eip=0x00beb2; 	T(SHR(ax, 1));	// 29752                  shr     ax, 1 ;~ 01A2:BEB2
cs=0x1a2;eip=0x00beb4; 	X(PUSH(ax));	// 29753                  push    ax ;~ 01A2:BEB4
cs=0x1a2;eip=0x00beb5; 	X(PUSH(bx));	// 29754                  push    bx ;~ 01A2:BEB5
cs=0x1a2;eip=0x00beb6; 	X(PUSH(cx));	// 29755                  push    cx ;~ 01A2:BEB6
cs=0x1a2;eip=0x00beb7; 	X(PUSH(dx));	// 29756                  push    dx ;~ 01A2:BEB7
cs=0x1a2;eip=0x00beb8; 	X(PUSH(bp));	// 29757                  push    bp ;~ 01A2:BEB8
cs=0x1a2;eip=0x00beb9; 	X(PUSH(si));	// 29758                  push    si ;~ 01A2:BEB9
cs=0x1a2;eip=0x00beba; 	X(PUSH(di));	// 29759                  push    di ;~ 01A2:BEBA
cs=0x1a2;eip=0x00bebb; 	X(PUSH(es));	// 29760                  push    es ;~ 01A2:BEBB
cs=0x1a2;eip=0x00bebc; 	X(PUSH(ds));	// 29761                  push    ds ;~ 01A2:BEBC
cs=0x1a2;eip=0x00bebd; 	T(bp = ax;);	// 29762                  mov     bp, ax ;~ 01A2:BEBD
cs=0x1a2;eip=0x00bebf; 	T(cx = ax;);	// 29763                  mov     cx, ax ;~ 01A2:BEBF
cs=0x1a2;eip=0x00bec1; 	T(SHR(cx, 1));	// 29764                  shr     cx, 1 ;~ 01A2:BEC1
cs=0x1a2;eip=0x00bec3; 	T(si = 0x10B6;);	// 29765                  mov     si, 10B6h ;~ 01A2:BEC3
cs=0x1a2;eip=0x00bec6; 	X(MOVSW);	// 29766                  movsw ;~ 01A2:BEC6
cs=0x1a2;eip=0x00bec7; 	X(MOVSW);	// 29767                  movsw ;~ 01A2:BEC7
loc_1bec8:
	// 6224 
cs=0x1a2;eip=0x00bec8; 	T(bx = di;);	// 29770                  mov     bx, di ;~ 01A2:BEC8
cs=0x1a2;eip=0x00beca; 	T(LODSW);	// 29771                  lodsw ;~ 01A2:BECA
cs=0x1a2;eip=0x00becb; 	T(dx = ax;);	// 29772                  mov     dx, ax ;~ 01A2:BECB
cs=0x1a2;eip=0x00becd; 	T(ADD(bx, bp));	// 29773                  add     bx, bp ;~ 01A2:BECD
cs=0x1a2;eip=0x00becf; 	X(MOV(*(dw*)(raddr(es,bx)), ax));	// 29774                  mov     es:[bx], ax ;~ 01A2:BECF
cs=0x1a2;eip=0x00bed2; 	T(LODSW);	// 29775                  lodsw ;~ 01A2:BED2
cs=0x1a2;eip=0x00bed3; 	T(OR(dx, ax));	// 29776                  or      dx, ax ;~ 01A2:BED3
cs=0x1a2;eip=0x00bed5; 	T(ADD(bx, bp));	// 29777                  add     bx, bp ;~ 01A2:BED5
cs=0x1a2;eip=0x00bed7; 	X(MOV(*(dw*)(raddr(es,bx)), ax));	// 29778                  mov     es:[bx], ax ;~ 01A2:BED7
cs=0x1a2;eip=0x00beda; 	T(LODSW);	// 29779                  lodsw ;~ 01A2:BEDA
cs=0x1a2;eip=0x00bedb; 	T(OR(dx, ax));	// 29780                  or      dx, ax ;~ 01A2:BEDB
cs=0x1a2;eip=0x00bedd; 	T(ADD(bx, bp));	// 29781                  add     bx, bp ;~ 01A2:BEDD
cs=0x1a2;eip=0x00bedf; 	X(MOV(*(dw*)(raddr(es,bx)), ax));	// 29782                  mov     es:[bx], ax ;~ 01A2:BEDF
cs=0x1a2;eip=0x00bee2; 	T(LODSW);	// 29783                  lodsw ;~ 01A2:BEE2
cs=0x1a2;eip=0x00bee3; 	T(OR(dx, ax));	// 29784                  or      dx, ax ;~ 01A2:BEE3
cs=0x1a2;eip=0x00bee5; 	T(ADD(bx, bp));	// 29785                  add     bx, bp ;~ 01A2:BEE5
cs=0x1a2;eip=0x00bee7; 	X(MOV(*(dw*)(raddr(es,bx)), ax));	// 29786                  mov     es:[bx], ax ;~ 01A2:BEE7
cs=0x1a2;eip=0x00beea; 	X(MOV(*(dw*)(raddr(es,di)), dx));	// 29787                  mov     es:[di], dx ;~ 01A2:BEEA
cs=0x1a2;eip=0x00beed; 	T(ADD(di, 2));	// 29788                  add     di, 2 ;~ 01A2:BEED
cs=0x1a2;eip=0x00bef0; 	J(LOOP(loc_1bec8));	// 29789                  loop    loc_1BEC8 ;~ 01A2:BEF0
cs=0x1a2;eip=0x00bef2; 	X(POP(ds));	// 29790                  pop     ds ;~ 01A2:BEF2
cs=0x1a2;eip=0x00bef3; 	X(POP(es));	// 29791                  pop     es ;~ 01A2:BEF3
cs=0x1a2;eip=0x00bef4; 	X(POP(di));	// 29792                  pop     di ;~ 01A2:BEF4
cs=0x1a2;eip=0x00bef5; 	X(POP(si));	// 29793                  pop     si ;~ 01A2:BEF5
cs=0x1a2;eip=0x00bef6; 	X(POP(bp));	// 29794                  pop     bp ;~ 01A2:BEF6
cs=0x1a2;eip=0x00bef7; 	X(POP(dx));	// 29795                  pop     dx ;~ 01A2:BEF7
cs=0x1a2;eip=0x00bef8; 	X(POP(cx));	// 29796                  pop     cx ;~ 01A2:BEF8
cs=0x1a2;eip=0x00bef9; 	X(POP(bx));	// 29797                  pop     bx ;~ 01A2:BEF9
cs=0x1a2;eip=0x00befa; 	X(POP(ax));	// 29798                  pop     ax ;~ 01A2:BEFA
cs=0x1a2;eip=0x00befb; 	J(RETN(0));	// 29799                  retn ;~ 01A2:BEFB

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1bec8: 	goto loc_1bec8;
        case m2c::ksub_1beb0: 	goto sub_1beb0;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1befc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1befc:
    _begin:
cs=0x1a2;eip=0x00befc; 	T(CMP(byte_1f872, 0));	// 29808                  cmp     ds:byte_1F872, 0 ;~ 01A2:BEFC
cs=0x1a2;eip=0x00bf01; 	J(JNZ(loc_1bf72));	// 29809                  jnz     short loc_1BF72 ;~ 01A2:BF01
cs=0x1a2;eip=0x00bf03; 	T(ax = cs;);	// 29810                  mov     ax, cs ;~ 01A2:BF03
cs=0x1a2;eip=0x00bf05; 	X(*(dw*)(((db*)&off_1f8fe)+2) = ax;);	// 29811                  mov     word ptr ds:off_1F8FE+2, ax ;~ 01A2:BF05
cs=0x1a2;eip=0x00bf08; 	T(ax = 0x6019;);	// 29812                  mov     ax, 6019h ;~ 01A2:BF08
cs=0x1a2;eip=0x00bf0b; 	X(*(dw*)(&off_1f8fe) = ax;);	// 29813                  mov     word ptr ds:off_1F8FE, ax ;~ 01A2:BF0B
cs=0x1a2;eip=0x00bf0e; 	T(ax = seg_offset(seg015););	// 29814                  mov     ax, seg seg015 ;~ 01A2:BF0E
cs=0x1a2;eip=0x00bf11; 	X(*(dw*)(((db*)&off_1fcfc)+2) = ax;);	// 29815                  mov     word ptr ds:off_1FCFC+2, ax ;~ 01A2:BF11
cs=0x1a2;eip=0x00bf14; 	X(*(dw*)(((db*)&off_1f8f8)+2) = ax;);	// 29816                  mov     word ptr ds:off_1F8F8+2, ax ;~ 01A2:BF14
cs=0x1a2;eip=0x00bf17; 	X(*(dw*)(((db*)&off_1f88a)+2) = ax;);	// 29817                  mov     word ptr ds:off_1F88A+2, ax ;~ 01A2:BF17
cs=0x1a2;eip=0x00bf1a; 	T(ax = 0;);	// 29818                  mov     ax, 0 ;~ 01A2:BF1A
cs=0x1a2;eip=0x00bf1d; 	X(word_1fd00 = ax;);	// 29819                  mov     ds:word_1FD00, ax ;~ 01A2:BF1D
cs=0x1a2;eip=0x00bf20; 	T(ax = ds;);	// 29820                  mov     ax, ds ;~ 01A2:BF20
cs=0x1a2;eip=0x00bf22; 	T(es = ax;);	// 29821                  mov     es, ax ;~ 01A2:BF22
cs=0x1a2;eip=0x00bf24; 	T(bx = 0x0B8E;);	// 29822                  mov     bx, 0B8Eh ;~ 01A2:BF24
cs=0x1a2;eip=0x00bf27; 	T(dx = 0x4CBF;);	// 29823                  mov     dx, 4CBFh ;~ 01A2:BF27
cs=0x1a2;eip=0x00bf2a; 	T(si = dx;);	// 29824                  mov     si, dx ;~ 01A2:BF2A
cs=0x1a2;eip=0x00bf2c; 	X(PUSH(es));	// 29825                  push    es ;~ 01A2:BF2C
cs=0x1a2;eip=0x00bf2d; 	X(PUSH(ds));	// 29826                  push    ds ;~ 01A2:BF2D
cs=0x1a2;eip=0x00bf2e; 	T(ax = ds;);	// 29827                  mov     ax, ds ;~ 01A2:BF2E
cs=0x1a2;eip=0x00bf30; 	T(es = ax;);	// 29828                  mov     es, ax ;~ 01A2:BF30
cs=0x1a2;eip=0x00bf32; 	T(ax = ss;);	// 29829                  mov     ax, ss ;~ 01A2:BF32
cs=0x1a2;eip=0x00bf34; 	T(ds = ax;);	// 29830                  mov     ds, ax ;~ 01A2:BF34
cs=0x1a2;eip=0x00bf36; 	T(STC);	// 29832                  stc ;~ 01A2:BF36
cs=0x1a2;eip=0x00bf37; 	J(CALL(sub_1c44a,0));	// 29833                  call    sub_1C44A ;~ 01A2:BF37
cs=0x1a2;eip=0x00bf3a; 	X(POP(ds));	// 29834                  pop     ds ;~ 01A2:BF3A
cs=0x1a2;eip=0x00bf3b; 	X(POP(es));	// 29836                  pop     es ;~ 01A2:BF3B
cs=0x1a2;eip=0x00bf3c; 	J(JC(loc_1bf8c));	// 29837                  jb      short loc_1BF8C ;~ 01A2:BF3C
cs=0x1a2;eip=0x00bf3e; 	X(PUSH(ds));	// 29838                  push    ds ;~ 01A2:BF3E
cs=0x1a2;eip=0x00bf3f; 	T(bx = word_1f8ee;);	// 29839                  mov     bx, ds:word_1F8EE ;~ 01A2:BF3F
cs=0x1a2;eip=0x00bf43; 	T(XOR(dx, dx));	// 29840                  xor     dx, dx ;~ 01A2:BF43
cs=0x1a2;eip=0x00bf45; 	T(ds = *(dw*)(((db*)&off_1f8f8)+2););	// 29841                  mov     ds, word ptr ds:off_1F8F8+2 ;~ 01A2:BF45
cs=0x1a2;eip=0x00bf49; 	T(cx = 0x0FA00;);	// 29843                  mov     cx, 0FA00h ;~ 01A2:BF49
cs=0x1a2;eip=0x00bf4c; 	J(CALL(sub_1c7d1,0));	// 29844                  call    near ptr sub_1C7D1 ;~ 01A2:BF4C
cs=0x1a2;eip=0x00bf4f; 	X(POP(ds));	// 29845                  pop     ds ;~ 01A2:BF4F
cs=0x1a2;eip=0x00bf50; 	J(JC(loc_1bf8c));	// 29847                  jb      short loc_1BF8C ;~ 01A2:BF50
cs=0x1a2;eip=0x00bf52; 	T(bx = word_1f8ee;);	// 29848                  mov     bx, ds:word_1F8EE ;~ 01A2:BF52
cs=0x1a2;eip=0x00bf56; 	T(ah = 0x3E;);	// 29849                  mov     ah, 3Eh ;~ 01A2:BF56
cs=0x1a2;eip=0x00bf58; 	S(_INT(0x21));	// 29850                  int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE ;~ 01A2:BF58
cs=0x1a2;eip=0x00bf5a; 	X(*(dw*)(&off_1f8f8) = 0x10;);	// 29852                  mov     word ptr ds:off_1F8F8, 10h ;~ 01A2:BF5A
cs=0x1a2;eip=0x00bf60; 	T(di = 0x0F832;);	// 29853                  mov     di, 0F832h ;~ 01A2:BF60
cs=0x1a2;eip=0x00bf63; 	T(ax = ds;);	// 29854                  mov     ax, ds ;~ 01A2:BF63
cs=0x1a2;eip=0x00bf65; 	T(es = ax;);	// 29855                  mov     es, ax ;~ 01A2:BF65
cs=0x1a2;eip=0x00bf67; 	J(CALL(__dispatch_call,off_1f8f8));	// 29856                  call    ds:off_1F8F8 ;~ 01A2:BF67
cs=0x1a2;eip=0x00bf6b; 	X(*(dw*)(&off_1f8f8) = bx;);	// 29857                  mov     word ptr ds:off_1F8F8, bx ;~ 01A2:BF6B
cs=0x1a2;eip=0x00bf6f; 	X(*(dw*)(&off_1f88a) = ax;);	// 29858                  mov     word ptr ds:off_1F88A, ax ;~ 01A2:BF6F
loc_1bf72:
	// 6225 
cs=0x1a2;eip=0x00bf72; 	T(XOR(ax, ax));	// 29861                  xor     ax, ax ;~ 01A2:BF72
cs=0x1a2;eip=0x00bf74; 	X(word_1f226 = 0x4BD6;);	// 29862                  mov     word_1F226, 4BD6h ;~ 01A2:BF74
cs=0x1a2;eip=0x00bf7a; 	J(CALL(sub_1b568,0));	// 29863                  call    sub_1B568 ;~ 01A2:BF7A
cs=0x1a2;eip=0x00bf7d; 	T(OR(ax, ax));	// 29865                  or      ax, ax ;~ 01A2:BF7D
cs=0x1a2;eip=0x00bf7f; 	J(JS(loc_1bf8c));	// 29866                  js      short loc_1BF8C ;~ 01A2:BF7F
cs=0x1a2;eip=0x00bf81; 	T(CMP(byte_1f872, 0));	// 29867                  cmp     ds:byte_1F872, 0 ;~ 01A2:BF81
cs=0x1a2;eip=0x00bf86; 	J(JNZ(loc_1bf89));	// 29868                  jnz     short loc_1BF89 ;~ 01A2:BF86
cs=0x1a2;eip=0x00bf88; 	T(NOP);	// 29869                  nop ;~ 01A2:BF88
loc_1bf89:
	// 6226 
cs=0x1a2;eip=0x00bf89; 	T(XOR(ax, ax));	// 29872                  xor     ax, ax ;~ 01A2:BF89
cs=0x1a2;eip=0x00bf8b; 	J(RETN(0));	// 29873                  retn ;~ 01A2:BF8B
loc_1bf8c:
	// 6227 
cs=0x1a2;eip=0x00bf8c; 	T(ax = 0x0FFFF;);	// 29878                  mov     ax, 0FFFFh ;~ 01A2:BF8C
cs=0x1a2;eip=0x00bf8f; 	T(OR(ax, ax));	// 29879                  or      ax, ax ;~ 01A2:BF8F
cs=0x1a2;eip=0x00bf91; 	J(RETN(0));	// 29880                  retn ;~ 01A2:BF91

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1bf72: 	goto loc_1bf72;
        case m2c::kloc_1bf89: 	goto loc_1bf89;
        case m2c::kloc_1bf8c: 	goto loc_1bf8c;
        case m2c::ksub_1befc: 	goto sub_1befc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_bf92_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_bf92_proc:
    _begin:
loc_1bf92:
	// 6228 
cs=0x1a2;eip=0x00bf92; 	T(XOR(ah, ah));	// 29886                  xor     ah, ah ;~ 01A2:BF92
cs=0x1a2;eip=0x00bf94; 	T(al = byte_1f878;);	// 29887                  mov     al, ds:byte_1F878 ;~ 01A2:BF94
cs=0x1a2;eip=0x00bf97; 	T(INC(ax));	// 29888                  inc     ax ;~ 01A2:BF97
cs=0x1a2;eip=0x00bf98; 	T(dl = 0x32;);	// 29889                  mov     dl, 32h ; '2' ;~ 01A2:BF98
cs=0x1a2;eip=0x00bf9a; 	T(MUL1_1(dl));	// 29890                  mul     dl ;~ 01A2:BF9A
cs=0x1a2;eip=0x00bf9c; 	T(SUB(ax, 0x2D));	// 29891                  sub     ax, 2Dh ; '-' ;~ 01A2:BF9C
cs=0x1a2;eip=0x00bf9f; 	T(CMP(ax, word_1f3b6));	// 29892                  cmp     ax, ds:word_1F3B6 ;~ 01A2:BF9F
cs=0x1a2;eip=0x00bfa3; 	J(JLE(loc_1bfa8));	// 29893                  jle     short loc_1BFA8 ;~ 01A2:BFA3
cs=0x1a2;eip=0x00bfa5; 	X(word_1f3b6 = ax;);	// 29894                  mov     ds:word_1F3B6, ax ;~ 01A2:BFA5
loc_1bfa8:
	// 6229 
cs=0x1a2;eip=0x00bfa8; 	J(CALL(sub_115eb,0));	// 29897                  call    sub_115EB ;~ 01A2:BFA8
cs=0x1a2;eip=0x00bfab; 	J(CALL(sub_13514,0));	// 29898                  call    sub_13514 ;~ 01A2:BFAB
cs=0x1a2;eip=0x00bfae; 	T(ax = word_1f3b6;);	// 29899                  mov     ax, ds:word_1F3B6 ;~ 01A2:BFAE
cs=0x1a2;eip=0x00bfb1; 	T(dx = 0x3C;);	// 29900                  mov     dx, 3Ch ; '<' ;~ 01A2:BFB1
cs=0x1a2;eip=0x00bfb4; 	J(CALL(sub_15cdc,0));	// 29901                  call    sub_15CDC ;~ 01A2:BFB4
cs=0x1a2;eip=0x00bfb7; 	J(JS(loc_1bfdd));	// 29902                  js      short loc_1BFDD ;~ 01A2:BFB7
cs=0x1a2;eip=0x00bfb9; 	J(JNZ(loc_1bfd9));	// 29903                  jnz     short loc_1BFD9 ;~ 01A2:BFB9
cs=0x1a2;eip=0x00bfbb; 	T(XOR(ah, ah));	// 29904                  xor     ah, ah ;~ 01A2:BFBB
cs=0x1a2;eip=0x00bfbd; 	T(al = byte_1f878;);	// 29905                  mov     al, ds:byte_1F878 ;~ 01A2:BFBD
cs=0x1a2;eip=0x00bfc0; 	T(INC(al));	// 29906                  inc     al ;~ 01A2:BFC0
cs=0x1a2;eip=0x00bfc2; 	T(SHL(ax, 1));	// 29907                  shl     ax, 1 ;~ 01A2:BFC2
cs=0x1a2;eip=0x00bfc4; 	T(bx = ax;);	// 29908                  mov     bx, ax ;~ 01A2:BFC4
cs=0x1a2;eip=0x00bfc6; 	T(SHL(ax, 1));	// 29909                  shl     ax, 1 ;~ 01A2:BFC6
cs=0x1a2;eip=0x00bfc8; 	T(ADD(ax, bx));	// 29910                  add     ax, bx ;~ 01A2:BFC8
cs=0x1a2;eip=0x00bfca; 	X(ADD(word_1f3b6, ax));	// 29911                  add     ds:word_1F3B6, ax ;~ 01A2:BFCA
cs=0x1a2;eip=0x00bfce; 	X(PUSH(ax));	// 29912                  push    ax ;~ 01A2:BFCE
cs=0x1a2;eip=0x00bfcf; 	J(CALL(sub_1c057,0));	// 29913                  call    sub_1C057 ;~ 01A2:BFCF
cs=0x1a2;eip=0x00bfd2; 	X(POP(ax));	// 29914                  pop     ax ;~ 01A2:BFD2
cs=0x1a2;eip=0x00bfd3; 	J(JNZ(loc_1bfd9));	// 29915                  jnz     short loc_1BFD9 ;~ 01A2:BFD3
cs=0x1a2;eip=0x00bfd5; 	X(SUB(word_1f3b6, ax));	// 29916                  sub     ds:word_1F3B6, ax ;~ 01A2:BFD5
loc_1bfd9:
	// 6230 
cs=0x1a2;eip=0x00bfd9; 	J(CALL(sub_11685,0));	// 29920                  call    sub_11685 ;~ 01A2:BFD9
cs=0x1a2;eip=0x00bfdc; 	J(RETN(0));	// 29921                  retn ;~ 01A2:BFDC
loc_1bfdd:
	// 6231 
cs=0x1a2;eip=0x00bfdd; 	T(dx = 0x3D;);	// 29925                  mov     dx, 3Dh ; '=' ;~ 01A2:BFDD
cs=0x1a2;eip=0x00bfe0; 	T(cl = 0x0E;);	// 29926                  mov     cl, 0Eh ;~ 01A2:BFE0
cs=0x1a2;eip=0x00bfe2; 	J(CALL(sub_13533,0));	// 29927                  call    sub_13533 ;~ 01A2:BFE2
cs=0x1a2;eip=0x00bfe5; 	J(CALL(sub_11685,0));	// 29928                  call    sub_11685 ;~ 01A2:BFE5
cs=0x1a2;eip=0x00bfe8; 	J(RETN(0));	// 29929                  retn ;~ 01A2:BFE8
loc_1bfe9:
	// 6232 
cs=0x1a2;eip=0x00bfe9; 	J(CALL(sub_115eb,0));	// 29933                  call    sub_115EB ;~ 01A2:BFE9
cs=0x1a2;eip=0x00bfec; 	X(word_1f8f0 = 0x0FFFF;);	// 29934                  mov     ds:word_1F8F0, 0FFFFh ;~ 01A2:BFEC
cs=0x1a2;eip=0x00bff2; 	J(CALL(sub_1c238,0));	// 29935                  call    sub_1C238 ;~ 01A2:BFF2
cs=0x1a2;eip=0x00bff5; 	J(JS(loc_1c00a));	// 29936                  js      short loc_1C00A ;~ 01A2:BFF5
cs=0x1a2;eip=0x00bff7; 	T(TEST(byte_1f84b, 1));	// 29937                  test    ds:byte_1F84B, 1 ;~ 01A2:BFF7
cs=0x1a2;eip=0x00bffc; 	X(PUSHF);	// 29938                  pushf ;~ 01A2:BFFC
cs=0x1a2;eip=0x00bffd; 	X(OR(byte_1f84b, 1));	// 29939                  or      ds:byte_1F84B, 1 ;~ 01A2:BFFD
cs=0x1a2;eip=0x00c002; 	X(POPF);	// 29940                  popf ;~ 01A2:C002
cs=0x1a2;eip=0x00c003; 	J(CALL(sub_1c377,0));	// 29941                  call    sub_1C377 ;~ 01A2:C003
cs=0x1a2;eip=0x00c006; 	T(XOR(ax, ax));	// 29942                  xor     ax, ax ;~ 01A2:C006
cs=0x1a2;eip=0x00c008; 	J(JMP(loc_1c010));	// 29943                  jmp     short loc_1C010 ;~ 01A2:C008
loc_1c00a:
	// 6233 
cs=0x1a2;eip=0x00c00a; 	J(CALL(sub_11685,0));	// 29947                  call    sub_11685 ;~ 01A2:C00A
cs=0x1a2;eip=0x00c00d; 	T(ax = 0x0FFFF;);	// 29948                  mov     ax, 0FFFFh ;~ 01A2:C00D
loc_1c010:
	// 6234 
cs=0x1a2;eip=0x00c010; 	T(OR(ax, ax));	// 29951                  or      ax, ax ;~ 01A2:C010
cs=0x1a2;eip=0x00c012; 	J(RETN(0));	// 29952                  retn ;~ 01A2:C012

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1bf92: 	goto loc_1bf92;
        case m2c::kloc_1bfa8: 	goto loc_1bfa8;
        case m2c::kloc_1bfd9: 	goto loc_1bfd9;
        case m2c::kloc_1bfdd: 	goto loc_1bfdd;
        case m2c::kloc_1bfe9: 	goto loc_1bfe9;
        case m2c::kloc_1c00a: 	goto loc_1c00a;
        case m2c::kloc_1c010: 	goto loc_1c010;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1c013(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1c013:
    _begin:
cs=0x1a2;eip=0x00c013; 	T(cl = 0x0A;);	// 29959                  mov     cl, 0Ah ;~ 01A2:C013
cs=0x1a2;eip=0x00c015; 	T(si = 0x0F7E6;);	// 29960                  mov     si, 0F7E6h ;~ 01A2:C015
cs=0x1a2;eip=0x00c018; 	J(CALL(sub_13555,0));	// 29961                  call    sub_13555 ;~ 01A2:C018
loc_1c01b:
	// 6235 
cs=0x1a2;eip=0x00c01b; 	J(CALL(sub_19d33,0));	// 29964                  call    sub_19D33 ;~ 01A2:C01B
cs=0x1a2;eip=0x00c01e; 	J(CALL(sub_1dec8,0));	// 29965                  call    sub_1DEC8 ;~ 01A2:C01E
cs=0x1a2;eip=0x00c021; 	T(ah = 0;);	// 29966                  mov     ah, 0 ;~ 01A2:C021
cs=0x1a2;eip=0x00c023; 	S(_INT(0x16));	// 29967                  int     16h             ; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY ;~ 01A2:C023
cs=0x1a2;eip=0x00c025; 	T(al = ah;);	// 29969                  mov     al, ah ;~ 01A2:C025
cs=0x1a2;eip=0x00c027; 	T(SUB(al, 2));	// 29970                  sub     al, 2 ;~ 01A2:C027
cs=0x1a2;eip=0x00c029; 	T(CMP(al, 3));	// 29971                  cmp     al, 3 ;~ 01A2:C029
cs=0x1a2;eip=0x00c02b; 	J(JNC(loc_1c01b));	// 29972                  jnb     short loc_1C01B ;~ 01A2:C02B
cs=0x1a2;eip=0x00c02d; 	X(byte_1f87b = al;);	// 29973                  mov     ds:byte_1F87B, al ;~ 01A2:C02D
cs=0x1a2;eip=0x00c030; 	J(CALL(sub_19d33,0));	// 29974                  call    sub_19D33 ;~ 01A2:C030
cs=0x1a2;eip=0x00c033; 	J(RETN(0));	// 29975                  retn ;~ 01A2:C033

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1c01b: 	goto loc_1c01b;
        case m2c::ksub_1c013: 	goto sub_1c013;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1c034(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1c034:
    _begin:
cs=0x1a2;eip=0x00c034; 	X(word_1f8f0 = 0x0FFFE;);	// 29984                  mov     ds:word_1F8F0, 0FFFEh ;~ 01A2:C034
cs=0x1a2;eip=0x00c03a; 	J(CALL(sub_1c238,0));	// 29985                  call    sub_1C238 ;~ 01A2:C03A
cs=0x1a2;eip=0x00c03d; 	J(JS(loc_1c051));	// 29986                  js      short loc_1C051 ;~ 01A2:C03D
cs=0x1a2;eip=0x00c03f; 	T(TEST(byte_1f84b, 1));	// 29987                  test    ds:byte_1F84B, 1 ;~ 01A2:C03F
cs=0x1a2;eip=0x00c044; 	X(PUSHF);	// 29988                  pushf ;~ 01A2:C044
cs=0x1a2;eip=0x00c045; 	X(OR(byte_1f84b, 1));	// 29989                  or      ds:byte_1F84B, 1 ;~ 01A2:C045
cs=0x1a2;eip=0x00c04a; 	X(POPF);	// 29990                  popf ;~ 01A2:C04A
cs=0x1a2;eip=0x00c04b; 	J(CALL(sub_1c377,0));	// 29991                  call    sub_1C377 ;~ 01A2:C04B
cs=0x1a2;eip=0x00c04e; 	T(XOR(ax, ax));	// 29992                  xor     ax, ax ;~ 01A2:C04E
cs=0x1a2;eip=0x00c050; 	J(RETN(0));	// 29993                  retn ;~ 01A2:C050
loc_1c051:
	// 6236 
cs=0x1a2;eip=0x00c051; 	T(ax = 0x0FFFF;);	// 29997                  mov     ax, 0FFFFh ;~ 01A2:C051
cs=0x1a2;eip=0x00c054; 	T(OR(ax, ax));	// 29998                  or      ax, ax ;~ 01A2:C054
cs=0x1a2;eip=0x00c056; 	J(RETN(0));	// 29999                  retn ;~ 01A2:C056

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1c051: 	goto loc_1c051;
        case m2c::ksub_1c034: 	goto sub_1c034;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1c057(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1c057:
    _begin:
cs=0x1a2;eip=0x00c057; 	X(word_1f8f0 = 0x0FFFF;);	// 30007                  mov     ds:word_1F8F0, 0FFFFh ;~ 01A2:C057
cs=0x1a2;eip=0x00c05d; 	J(CALL(sub_13514,0));	// 30008                  call    sub_13514 ;~ 01A2:C05D
cs=0x1a2;eip=0x00c060; 	J(CALL(sub_13618,0));	// 30009                  call    sub_13618 ;~ 01A2:C060
loc_1c063:
	// 6237 
cs=0x1a2;eip=0x00c063; 	T(ax = 2;);	// 30012                  mov     ax, 2 ;~ 01A2:C063
cs=0x1a2;eip=0x00c066; 	T(si = 3;);	// 30013                  mov     si, 3 ;~ 01A2:C066
cs=0x1a2;eip=0x00c069; 	J(CALL(sub_1c1ab,0));	// 30014                  call    sub_1C1AB ;~ 01A2:C069
cs=0x1a2;eip=0x00c06c; 	J(JNZ(loc_1c071));	// 30015                  jnz     short loc_1C071 ;~ 01A2:C06C
cs=0x1a2;eip=0x00c06e; 	J(JMP(loc_1c16b));	// 30016                  jmp     loc_1C16B ;~ 01A2:C06E
loc_1c071:
	// 6238 
cs=0x1a2;eip=0x00c071; 	X(byte_70d92 = bl;);	// 30020                  mov     ss:byte_70D92, bl ;~ 01A2:C071
cs=0x1a2;eip=0x00c076; 	X(PUSH(ax));	// 30021                  push    ax ;~ 01A2:C076
cs=0x1a2;eip=0x00c077; 	X(PUSH(bx));	// 30022                  push    bx ;~ 01A2:C077
cs=0x1a2;eip=0x00c078; 	X(PUSH(cx));	// 30023                  push    cx ;~ 01A2:C078
cs=0x1a2;eip=0x00c079; 	X(PUSH(dx));	// 30024                  push    dx ;~ 01A2:C079
cs=0x1a2;eip=0x00c07a; 	X(PUSH(bp));	// 30025                  push    bp ;~ 01A2:C07A
cs=0x1a2;eip=0x00c07b; 	X(PUSH(si));	// 30026                  push    si ;~ 01A2:C07B
cs=0x1a2;eip=0x00c07c; 	X(PUSH(di));	// 30027                  push    di ;~ 01A2:C07C
cs=0x1a2;eip=0x00c07d; 	X(PUSH(es));	// 30028                  push    es ;~ 01A2:C07D
cs=0x1a2;eip=0x00c07e; 	X(PUSH(ds));	// 30029                  push    ds ;~ 01A2:C07E
cs=0x1a2;eip=0x00c07f; 	T(dx = 0x4D09;);	// 30030                  mov     dx, 4D09h ;~ 01A2:C07F
cs=0x1a2;eip=0x00c082; 	X(PUSH(es));	// 30031                  push    es ;~ 01A2:C082
cs=0x1a2;eip=0x00c083; 	X(PUSH(ds));	// 30032                  push    ds ;~ 01A2:C083
cs=0x1a2;eip=0x00c084; 	T(ax = ds;);	// 30033                  mov     ax, ds ;~ 01A2:C084
cs=0x1a2;eip=0x00c086; 	T(es = ax;);	// 30034                  mov     es, ax ;~ 01A2:C086
cs=0x1a2;eip=0x00c088; 	T(ax = ss;);	// 30035                  mov     ax, ss ;~ 01A2:C088
cs=0x1a2;eip=0x00c08a; 	T(ds = ax;);	// 30036                  mov     ds, ax ;~ 01A2:C08A
cs=0x1a2;eip=0x00c08c; 	T(cx = 0;);	// 30038                  mov     cx, 0 ;~ 01A2:C08C
cs=0x1a2;eip=0x00c08f; 	X(word_1117b = cx;);	// 30039                  mov     cs:word_1117B, cx ;~ 01A2:C08F
cs=0x1a2;eip=0x00c094; 	T(ax = 0x3C00;);	// 30040                  mov     ax, 3C00h ;~ 01A2:C094
cs=0x1a2;eip=0x00c097; 	S(_INT(0x21));	// 30041                  int     21h             ; DOS - 2+ - CREATE A FILE WITH HANDLE (CREAT) ;~ 01A2:C097
cs=0x1a2;eip=0x00c099; 	X(word_1f8ee = ax;);	// 30044                  mov     es:word_1F8EE, ax ;~ 01A2:C099
cs=0x1a2;eip=0x00c09d; 	X(POP(ds));	// 30045                  pop     ds ;~ 01A2:C09D
cs=0x1a2;eip=0x00c09e; 	X(POP(es));	// 30047                  pop     es ;~ 01A2:C09E
cs=0x1a2;eip=0x00c09f; 	J(JNC(loc_1c0a4));	// 30049                  jnb     short loc_1C0A4 ;~ 01A2:C09F
cs=0x1a2;eip=0x00c0a1; 	J(JMP(loc_1c178));	// 30050                  jmp     loc_1C178 ;~ 01A2:C0A1
loc_1c0a4:
	// 6239 
cs=0x1a2;eip=0x00c0a4; 	T(CMP(word_1117b, 0));	// 30054                  cmp     cs:word_1117B, 0 ;~ 01A2:C0A4
cs=0x1a2;eip=0x00c0aa; 	J(JNS(loc_1c0af));	// 30055                  jns     short loc_1C0AF ;~ 01A2:C0AA
cs=0x1a2;eip=0x00c0ac; 	J(JMP(loc_1c178));	// 30056                  jmp     loc_1C178 ;~ 01A2:C0AC
loc_1c0af:
	// 6240 
cs=0x1a2;eip=0x00c0af; 	J(CALL(sub_13514,0));	// 30060                  call    sub_13514 ;~ 01A2:C0AF
cs=0x1a2;eip=0x00c0b2; 	J(CALL(sub_13618,0));	// 30061                  call    sub_13618 ;~ 01A2:C0B2
cs=0x1a2;eip=0x00c0b5; 	T(ax = 4;);	// 30062                  mov     ax, 4 ;~ 01A2:C0B5
cs=0x1a2;eip=0x00c0b8; 	T(cl = 0x14;);	// 30063                  mov     cl, 14h ;~ 01A2:C0B8
cs=0x1a2;eip=0x00c0ba; 	J(CALL(sub_1c3e8,0));	// 30064                  call    sub_1C3E8 ;~ 01A2:C0BA
cs=0x1a2;eip=0x00c0bd; 	T(ax = 9;);	// 30065                  mov     ax, 9 ;~ 01A2:C0BD
cs=0x1a2;eip=0x00c0c0; 	T(XOR(dx, dx));	// 30066                  xor     dx, dx ;~ 01A2:C0C0
cs=0x1a2;eip=0x00c0c2; 	J(CALL(sub_1415c,0));	// 30067                  call    sub_1415C ;~ 01A2:C0C2
cs=0x1a2;eip=0x00c0c5; 	T(si = 0x0F892;);	// 30068                  mov     si, 0F892h ;~ 01A2:C0C5
cs=0x1a2;eip=0x00c0c8; 	T(dx = si;);	// 30069                  mov     dx, si ;~ 01A2:C0C8
cs=0x1a2;eip=0x00c0ca; 	T(MOV(al, *(raddr(ds,0x708))));	// 30070                  mov     al, ds:708h ;~ 01A2:C0CA
cs=0x1a2;eip=0x00c0cd; 	X(MOV(*(raddr(ds,si+7)), al));	// 30071                  mov     [si+7], al ;~ 01A2:C0CD
cs=0x1a2;eip=0x00c0d0; 	T(cx = 8;);	// 30072                  mov     cx, 8 ;~ 01A2:C0D0
cs=0x1a2;eip=0x00c0d3; 	T(MOV(bx, *(dw*)(raddr(ds,0x77E))));	// 30073                  mov     bx, ds:77Eh ;~ 01A2:C0D3
cs=0x1a2;eip=0x00c0d7; 	X(word_1117b = 0;);	// 30074                  mov     cs:word_1117B, 0 ;~ 01A2:C0D7
cs=0x1a2;eip=0x00c0de; 	X(ADD(*(dw*)(&unk_6fb90), cx));	// 30075                  add     word ptr ss:unk_6FB90, cx ;~ 01A2:C0DE
cs=0x1a2;eip=0x00c0e3; 	T(ah = 0x40;);	// 30076                  mov     ah, 40h ;~ 01A2:C0E3
cs=0x1a2;eip=0x00c0e5; 	S(_INT(0x21));	// 30077                  int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE ;~ 01A2:C0E5
cs=0x1a2;eip=0x00c0e7; 	J(JNC(loc_1c0ec));	// 30079                  jnb     short loc_1C0EC ;~ 01A2:C0E7
cs=0x1a2;eip=0x00c0e9; 	J(JMP(loc_1c178));	// 30080                  jmp     loc_1C178 ;~ 01A2:C0E9
loc_1c0ec:
	// 6241 
cs=0x1a2;eip=0x00c0ec; 	T(CMP(word_1117b, 0));	// 30084                  cmp     cs:word_1117B, 0 ;~ 01A2:C0EC
cs=0x1a2;eip=0x00c0f2; 	J(JNS(loc_1c0f7));	// 30085                  jns     short loc_1C0F7 ;~ 01A2:C0F2
cs=0x1a2;eip=0x00c0f4; 	J(JMP(loc_1c178));	// 30086                  jmp     loc_1C178 ;~ 01A2:C0F4
loc_1c0f7:
	// 6242 
cs=0x1a2;eip=0x00c0f7; 	T(al = 3;);	// 30090                  mov     al, 3 ;~ 01A2:C0F7
cs=0x1a2;eip=0x00c0f9; 	J(CALL(sub_1457d,0));	// 30091                  call    sub_1457D ;~ 01A2:C0F9
cs=0x1a2;eip=0x00c0fc; 	T(OR(ax, ax));	// 30092                  or      ax, ax ;~ 01A2:C0FC
cs=0x1a2;eip=0x00c0fe; 	J(JS(loc_1c178));	// 30093                  js      short loc_1C178 ;~ 01A2:C0FE
cs=0x1a2;eip=0x00c100; 	T(al = 4;);	// 30094                  mov     al, 4 ;~ 01A2:C100
cs=0x1a2;eip=0x00c102; 	J(CALL(sub_1457d,0));	// 30095                  call    sub_1457D ;~ 01A2:C102
cs=0x1a2;eip=0x00c105; 	T(OR(ax, ax));	// 30096                  or      ax, ax ;~ 01A2:C105
cs=0x1a2;eip=0x00c107; 	J(JS(loc_1c178));	// 30097                  js      short loc_1C178 ;~ 01A2:C107
cs=0x1a2;eip=0x00c109; 	T(al = 5;);	// 30098                  mov     al, 5 ;~ 01A2:C109
cs=0x1a2;eip=0x00c10b; 	J(CALL(sub_1457d,0));	// 30099                  call    sub_1457D ;~ 01A2:C10B
cs=0x1a2;eip=0x00c10e; 	T(OR(ax, ax));	// 30100                  or      ax, ax ;~ 01A2:C10E
cs=0x1a2;eip=0x00c110; 	J(JS(loc_1c178));	// 30101                  js      short loc_1C178 ;~ 01A2:C110
cs=0x1a2;eip=0x00c112; 	T(al = 8;);	// 30102                  mov     al, 8 ;~ 01A2:C112
cs=0x1a2;eip=0x00c114; 	J(CALL(sub_1457d,0));	// 30103                  call    sub_1457D ;~ 01A2:C114
cs=0x1a2;eip=0x00c117; 	T(OR(ax, ax));	// 30104                  or      ax, ax ;~ 01A2:C117
cs=0x1a2;eip=0x00c119; 	J(JS(loc_1c178));	// 30105                  js      short loc_1C178 ;~ 01A2:C119
cs=0x1a2;eip=0x00c11b; 	T(al = 6;);	// 30106                  mov     al, 6 ;~ 01A2:C11B
cs=0x1a2;eip=0x00c11d; 	J(CALL(sub_1457d,0));	// 30107                  call    sub_1457D ;~ 01A2:C11D
cs=0x1a2;eip=0x00c120; 	T(OR(ax, ax));	// 30108                  or      ax, ax ;~ 01A2:C120
cs=0x1a2;eip=0x00c122; 	J(JS(loc_1c178));	// 30109                  js      short loc_1C178 ;~ 01A2:C122
cs=0x1a2;eip=0x00c124; 	T(dx = 0x20C;);	// 30110                  mov     dx, 20Ch ;~ 01A2:C124
cs=0x1a2;eip=0x00c127; 	T(cx = 0x6F8;);	// 30111                  mov     cx, 6F8h ;~ 01A2:C127
cs=0x1a2;eip=0x00c12a; 	T(SUB(cx, dx));	// 30112                  sub     cx, dx ;~ 01A2:C12A
cs=0x1a2;eip=0x00c12c; 	T(cx = cx;);	// 30113                  mov     cx, cx ;~ 01A2:C12C
cs=0x1a2;eip=0x00c12e; 	T(MOV(bx, *(dw*)(raddr(ds,0x77E))));	// 30114                  mov     bx, ds:77Eh ;~ 01A2:C12E
cs=0x1a2;eip=0x00c132; 	X(word_1117b = 0;);	// 30115                  mov     cs:word_1117B, 0 ;~ 01A2:C132
cs=0x1a2;eip=0x00c139; 	X(ADD(*(dw*)(&unk_6fb90), cx));	// 30116                  add     word ptr ss:unk_6FB90, cx ;~ 01A2:C139
cs=0x1a2;eip=0x00c13e; 	T(ah = 0x40;);	// 30117                  mov     ah, 40h ;~ 01A2:C13E
cs=0x1a2;eip=0x00c140; 	S(_INT(0x21));	// 30118                  int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE ;~ 01A2:C140
cs=0x1a2;eip=0x00c142; 	J(JC(loc_1c178));	// 30120                  jb      short loc_1C178 ;~ 01A2:C142
cs=0x1a2;eip=0x00c144; 	T(CMP(word_1117b, 0));	// 30121                  cmp     cs:word_1117B, 0 ;~ 01A2:C144
cs=0x1a2;eip=0x00c14a; 	J(JS(loc_1c178));	// 30122                  js      short loc_1C178 ;~ 01A2:C14A
cs=0x1a2;eip=0x00c14c; 	T(MOV(bx, *(dw*)(raddr(ds,0x77E))));	// 30123                  mov     bx, ds:77Eh ;~ 01A2:C14C
cs=0x1a2;eip=0x00c150; 	T(ah = 0x3E;);	// 30124                  mov     ah, 3Eh ;~ 01A2:C150
cs=0x1a2;eip=0x00c152; 	S(_INT(0x21));	// 30125                  int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE ;~ 01A2:C152
cs=0x1a2;eip=0x00c154; 	T(XOR(bp, bp));	// 30127                  xor     bp, bp ;~ 01A2:C154
cs=0x1a2;eip=0x00c156; 	J(CALL(sub_1d7cc,0));	// 30128                  call    sub_1D7CC ;~ 01A2:C156
cs=0x1a2;eip=0x00c159; 	T(OR(bp, bp));	// 30129                  or      bp, bp ;~ 01A2:C159
cs=0x1a2;eip=0x00c15b; 	J(JNZ(loc_1c178));	// 30130                  jnz     short loc_1C178 ;~ 01A2:C15B
cs=0x1a2;eip=0x00c15d; 	X(POP(ds));	// 30131                  pop     ds ;~ 01A2:C15D
cs=0x1a2;eip=0x00c15e; 	X(POP(es));	// 30132                  pop     es ;~ 01A2:C15E
cs=0x1a2;eip=0x00c15f; 	X(POP(di));	// 30133                  pop     di ;~ 01A2:C15F
cs=0x1a2;eip=0x00c160; 	X(POP(si));	// 30134                  pop     si ;~ 01A2:C160
cs=0x1a2;eip=0x00c161; 	X(POP(bp));	// 30135                  pop     bp ;~ 01A2:C161
cs=0x1a2;eip=0x00c162; 	X(POP(dx));	// 30136                  pop     dx ;~ 01A2:C162
cs=0x1a2;eip=0x00c163; 	X(POP(cx));	// 30137                  pop     cx ;~ 01A2:C163
cs=0x1a2;eip=0x00c164; 	X(POP(bx));	// 30138                  pop     bx ;~ 01A2:C164
cs=0x1a2;eip=0x00c165; 	X(POP(ax));	// 30139                  pop     ax ;~ 01A2:C165
cs=0x1a2;eip=0x00c166; 	T(ax = 1;);	// 30140                  mov     ax, 1 ;~ 01A2:C166
cs=0x1a2;eip=0x00c169; 	J(JMP(loc_1c16d));	// 30141                  jmp     short loc_1C16D ;~ 01A2:C169
loc_1c16b:
	// 6243 
cs=0x1a2;eip=0x00c16b; 	T(XOR(ax, ax));	// 30145                  xor     ax, ax ;~ 01A2:C16B
loc_1c16d:
	// 6244 
cs=0x1a2;eip=0x00c16d; 	X(PUSH(ax));	// 30148                  push    ax ;~ 01A2:C16D
cs=0x1a2;eip=0x00c16e; 	J(CALL(sub_13514,0));	// 30149                  call    sub_13514 ;~ 01A2:C16E
cs=0x1a2;eip=0x00c171; 	J(CALL(sub_13618,0));	// 30150                  call    sub_13618 ;~ 01A2:C171
cs=0x1a2;eip=0x00c174; 	X(POP(ax));	// 30151                  pop     ax ;~ 01A2:C174
cs=0x1a2;eip=0x00c175; 	T(OR(ax, ax));	// 30152                  or      ax, ax ;~ 01A2:C175
cs=0x1a2;eip=0x00c177; 	J(RETN(0));	// 30153                  retn ;~ 01A2:C177
loc_1c178:
	// 6245 
cs=0x1a2;eip=0x00c178; 	J(CALL(sub_1d7cc,0));	// 30158                  call    sub_1D7CC ;~ 01A2:C178
cs=0x1a2;eip=0x00c17b; 	X(POP(ds));	// 30159                  pop     ds ;~ 01A2:C17B
cs=0x1a2;eip=0x00c17c; 	X(POP(es));	// 30160                  pop     es ;~ 01A2:C17C
cs=0x1a2;eip=0x00c17d; 	X(POP(di));	// 30161                  pop     di ;~ 01A2:C17D
cs=0x1a2;eip=0x00c17e; 	X(POP(si));	// 30162                  pop     si ;~ 01A2:C17E
cs=0x1a2;eip=0x00c17f; 	X(POP(bp));	// 30163                  pop     bp ;~ 01A2:C17F
cs=0x1a2;eip=0x00c180; 	X(POP(dx));	// 30164                  pop     dx ;~ 01A2:C180
cs=0x1a2;eip=0x00c181; 	X(POP(cx));	// 30165                  pop     cx ;~ 01A2:C181
cs=0x1a2;eip=0x00c182; 	X(POP(bx));	// 30166                  pop     bx ;~ 01A2:C182
cs=0x1a2;eip=0x00c183; 	X(POP(ax));	// 30167                  pop     ax ;~ 01A2:C183
cs=0x1a2;eip=0x00c184; 	J(CALL(sub_1c18a,0));	// 30168                  call    sub_1C18A ;~ 01A2:C184
cs=0x1a2;eip=0x00c187; 	J(JMP(loc_1c063));	// 30169                  jmp     loc_1C063 ;~ 01A2:C187

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1c063: 	goto loc_1c063;
        case m2c::kloc_1c071: 	goto loc_1c071;
        case m2c::kloc_1c0a4: 	goto loc_1c0a4;
        case m2c::kloc_1c0af: 	goto loc_1c0af;
        case m2c::kloc_1c0ec: 	goto loc_1c0ec;
        case m2c::kloc_1c0f7: 	goto loc_1c0f7;
        case m2c::kloc_1c16b: 	goto loc_1c16b;
        case m2c::kloc_1c16d: 	goto loc_1c16d;
        case m2c::kloc_1c178: 	goto loc_1c178;
        case m2c::ksub_1c057: 	goto sub_1c057;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1c18a(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1c18a:
    _begin:
cs=0x1a2;eip=0x00c18a; 	X(MOV(*(dw*)(raddr(ds,0x5A4)), 0x0FFFF));	// 30178                  mov     word ptr ds:5A4h, 0FFFFh ;~ 01A2:C18A
cs=0x1a2;eip=0x00c190; 	J(CALL(sub_13514,0));	// 30179                  call    sub_13514 ;~ 01A2:C190
cs=0x1a2;eip=0x00c193; 	J(CALL(sub_13618,0));	// 30180                  call    sub_13618 ;~ 01A2:C193
cs=0x1a2;eip=0x00c196; 	T(cl = 0x14;);	// 30181                  mov     cl, 14h ;~ 01A2:C196
cs=0x1a2;eip=0x00c198; 	T(ax = 5;);	// 30182                  mov     ax, 5 ;~ 01A2:C198
cs=0x1a2;eip=0x00c19b; 	J(CALL(sub_1c3e8,0));	// 30183                  call    sub_1C3E8 ;~ 01A2:C19B
cs=0x1a2;eip=0x00c19e; 	J(CALL(sub_19ce8,0));	// 30184                  call    sub_19CE8 ;~ 01A2:C19E
cs=0x1a2;eip=0x00c1a1; 	J(CALL(sub_19d33,0));	// 30185                  call    sub_19D33 ;~ 01A2:C1A1
cs=0x1a2;eip=0x00c1a4; 	J(CALL(sub_13514,0));	// 30186                  call    sub_13514 ;~ 01A2:C1A4
cs=0x1a2;eip=0x00c1a7; 	J(CALL(sub_13618,0));	// 30187                  call    sub_13618 ;~ 01A2:C1A7
cs=0x1a2;eip=0x00c1aa; 	J(RETN(0));	// 30188                  retn ;~ 01A2:C1AA

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1c18a: 	goto sub_1c18a;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1c1ab(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1c1ab:
    _begin:
cs=0x1a2;eip=0x00c1ab; 	X(PUSH(ax));	// 30198                  push    ax ;~ 01A2:C1AB
cs=0x1a2;eip=0x00c1ac; 	J(CALL(sub_19d33,0));	// 30199                  call    sub_19D33 ;~ 01A2:C1AC
cs=0x1a2;eip=0x00c1af; 	X(POP(ax));	// 30200                  pop     ax ;~ 01A2:C1AF
cs=0x1a2;eip=0x00c1b0; 	T(CMP(word_1f8f0, 0));	// 30201                  cmp     ds:word_1F8F0, 0 ;~ 01A2:C1B0
cs=0x1a2;eip=0x00c1b5; 	J(JS(loc_1c1ca));	// 30202                  js      short loc_1C1CA ;~ 01A2:C1B5
cs=0x1a2;eip=0x00c1b7; 	T(bx = word_1f8f0;);	// 30203                  mov     bx, ds:word_1F8F0 ;~ 01A2:C1B7
cs=0x1a2;eip=0x00c1bb; 	X(PUSH(bx));	// 30204                  push    bx ;~ 01A2:C1BB
cs=0x1a2;eip=0x00c1bc; 	X(PUSH(si));	// 30205                  push    si ;~ 01A2:C1BC
cs=0x1a2;eip=0x00c1bd; 	T(ah = 0x19;);	// 30206                  mov     ah, 19h ;~ 01A2:C1BD
cs=0x1a2;eip=0x00c1bf; 	S(_INT(0x21));	// 30207                  int     21h             ; DOS - GET DEFAULT DISK NUMBER ;~ 01A2:C1BF
cs=0x1a2;eip=0x00c1c1; 	X(POP(si));	// 30208                  pop     si ;~ 01A2:C1C1
cs=0x1a2;eip=0x00c1c2; 	X(POP(bx));	// 30209                  pop     bx ;~ 01A2:C1C2
cs=0x1a2;eip=0x00c1c3; 	T(CMP(al, 1));	// 30210                  cmp     al, 1 ;~ 01A2:C1C3
cs=0x1a2;eip=0x00c1c5; 	J(JA(loc_1c21d));	// 30211                  ja      short loc_1C21D ;~ 01A2:C1C5
cs=0x1a2;eip=0x00c1c7; 	T(ax = 7;);	// 30212                  mov     ax, 7 ;~ 01A2:C1C7
loc_1c1ca:
	// 6246 
cs=0x1a2;eip=0x00c1ca; 	T(cl = 0x14;);	// 30215                  mov     cl, 14h ;~ 01A2:C1CA
cs=0x1a2;eip=0x00c1cc; 	X(PUSH(si));	// 30216                  push    si ;~ 01A2:C1CC
cs=0x1a2;eip=0x00c1cd; 	J(CALL(sub_1c3e8,0));	// 30217                  call    sub_1C3E8 ;~ 01A2:C1CD
cs=0x1a2;eip=0x00c1d0; 	X(POP(si));	// 30218                  pop     si ;~ 01A2:C1D0
cs=0x1a2;eip=0x00c1d1; 	T(XOR(ax, ax));	// 30219                  xor     ax, ax ;~ 01A2:C1D1
cs=0x1a2;eip=0x00c1d3; 	X(word_1f72c = ax;);	// 30220                  mov     ds:word_1F72C, ax ;~ 01A2:C1D3
loc_1c1d6:
	// 6247 
cs=0x1a2;eip=0x00c1d6; 	J(CALL(sub_1dec8,0));	// 30224                  call    sub_1DEC8 ;~ 01A2:C1D6
cs=0x1a2;eip=0x00c1d9; 	T(ah = 0;);	// 30225                  mov     ah, 0 ;~ 01A2:C1D9
cs=0x1a2;eip=0x00c1db; 	S(_INT(0x16));	// 30226                  int     16h             ; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY ;~ 01A2:C1DB
cs=0x1a2;eip=0x00c1dd; 	T(al = ah;);	// 30228                  mov     al, ah ;~ 01A2:C1DD
cs=0x1a2;eip=0x00c1df; 	T(bx = word_1f8f0;);	// 30229                  mov     bx, ds:word_1F8F0 ;~ 01A2:C1DF
cs=0x1a2;eip=0x00c1e3; 	T(OR(bx, bx));	// 30230                  or      bx, bx ;~ 01A2:C1E3
cs=0x1a2;eip=0x00c1e5; 	J(JNS(loc_1c21d));	// 30231                  jns     short loc_1C21D ;~ 01A2:C1E5
cs=0x1a2;eip=0x00c1e7; 	T(CMP(al, 0x4C));	// 30232                  cmp     al, 4Ch ; 'L' ;~ 01A2:C1E7
cs=0x1a2;eip=0x00c1e9; 	J(JNZ(loc_1c1f3));	// 30233                  jnz     short loc_1C1F3 ;~ 01A2:C1E9
cs=0x1a2;eip=0x00c1eb; 	J(CALL(sub_1c72f,0));	// 30234                  call    sub_1C72F ;~ 01A2:C1EB
cs=0x1a2;eip=0x00c1ee; 	T(XOR(al, al));	// 30236                  xor     al, al ;~ 01A2:C1EE
cs=0x1a2;eip=0x00c1f0; 	X(byte_1f886 = al;);	// 30237                  mov     ds:byte_1F886, al ;~ 01A2:C1F0
loc_1c1f3:
	// 6248 
cs=0x1a2;eip=0x00c1f3; 	T(CMP(al, 1));	// 30240                  cmp     al, 1 ;~ 01A2:C1F3
cs=0x1a2;eip=0x00c1f5; 	J(JNZ(loc_1c202));	// 30241                  jnz     short loc_1C202 ;~ 01A2:C1F5
cs=0x1a2;eip=0x00c1f7; 	T(CMP(byte_2ea25, 0x0FF));	// 30242                  cmp     ds:byte_2EA25, 0FFh ;~ 01A2:C1F7
cs=0x1a2;eip=0x00c1fc; 	J({;});	// 30243                  jnz     short $+2 ;~ 01A2:C1FC
loc_1c1fe:
	// 6249 
cs=0x1a2;eip=0x00c1fe; 	T(XOR(ax, ax));	// 30246                  xor     ax, ax ;~ 01A2:C1FE
cs=0x1a2;eip=0x00c200; 	J(JMP(locret_1c237));	// 30247                  jmp     short locret_1C237 ;~ 01A2:C200
loc_1c202:
	// 6250 
cs=0x1a2;eip=0x00c202; 	T(CMP(al, 2));	// 30251                  cmp     al, 2 ;~ 01A2:C202
cs=0x1a2;eip=0x00c204; 	J(JC(loc_1c1d6));	// 30252                  jb      short loc_1C1D6 ;~ 01A2:C204
cs=0x1a2;eip=0x00c206; 	T(CMP(al, 0x0C));	// 30253                  cmp     al, 0Ch ;~ 01A2:C206
cs=0x1a2;eip=0x00c208; 	J(JNC(loc_1c1d6));	// 30254                  jnb     short loc_1C1D6 ;~ 01A2:C208
cs=0x1a2;eip=0x00c20a; 	T(ADD(al, 0x2F));	// 30255                  add     al, 2Fh ; '/' ;~ 01A2:C20A
cs=0x1a2;eip=0x00c20c; 	T(CMP(al, 0x3A));	// 30256                  cmp     al, 3Ah ; ':' ;~ 01A2:C20C
cs=0x1a2;eip=0x00c20e; 	J(JNZ(loc_1c212));	// 30257                  jnz     short loc_1C212 ;~ 01A2:C20E
cs=0x1a2;eip=0x00c210; 	T(al = 0x30;);	// 30258                  mov     al, 30h ; '0' ;~ 01A2:C210
loc_1c212:
	// 6251 
cs=0x1a2;eip=0x00c212; 	T(bx = ax;);	// 30261                  mov     bx, ax ;~ 01A2:C212
cs=0x1a2;eip=0x00c214; 	T(CMP(byte_2ea25, 0x0FF));	// 30262                  cmp     ds:byte_2EA25, 0FFh ;~ 01A2:C214
cs=0x1a2;eip=0x00c219; 	J(JNZ(loc_1c21d));	// 30263                  jnz     short loc_1C21D ;~ 01A2:C219
cs=0x1a2;eip=0x00c21b; 	T(bx = ax;);	// 30264                  mov     bx, ax ;~ 01A2:C21B
loc_1c21d:
	// 6252 
cs=0x1a2;eip=0x00c21d; 	X(PUSH(bx));	// 30268                  push    bx ;~ 01A2:C21D
cs=0x1a2;eip=0x00c21e; 	X(PUSH(si));	// 30269                  push    si ;~ 01A2:C21E
cs=0x1a2;eip=0x00c21f; 	J(CALL(sub_19d33,0));	// 30270                  call    sub_19D33 ;~ 01A2:C21F
cs=0x1a2;eip=0x00c222; 	J(CALL(sub_13514,0));	// 30271                  call    sub_13514 ;~ 01A2:C222
cs=0x1a2;eip=0x00c225; 	J(CALL(sub_13618,0));	// 30272                  call    sub_13618 ;~ 01A2:C225
cs=0x1a2;eip=0x00c228; 	X(POP(ax));	// 30273                  pop     ax ;~ 01A2:C228
cs=0x1a2;eip=0x00c229; 	T(cl = 0x14;);	// 30274                  mov     cl, 14h ;~ 01A2:C229
cs=0x1a2;eip=0x00c22b; 	J(CALL(sub_1c3e8,0));	// 30275                  call    sub_1C3E8 ;~ 01A2:C22B
cs=0x1a2;eip=0x00c22e; 	T(ax = 0x0FFFF;);	// 30276                  mov     ax, 0FFFFh ;~ 01A2:C22E
cs=0x1a2;eip=0x00c231; 	X(word_1f8f0 = ax;);	// 30277                  mov     ds:word_1F8F0, ax ;~ 01A2:C231
cs=0x1a2;eip=0x00c234; 	T(OR(ax, ax));	// 30278                  or      ax, ax ;~ 01A2:C234
cs=0x1a2;eip=0x00c236; 	X(POP(bx));	// 30279                  pop     bx ;~ 01A2:C236
locret_1c237:
	// 6253 
cs=0x1a2;eip=0x00c237; 	J(RETN(0));	// 30282                  retn ;~ 01A2:C237

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1c1ca: 	goto loc_1c1ca;
        case m2c::kloc_1c1d6: 	goto loc_1c1d6;
        case m2c::kloc_1c1f3: 	goto loc_1c1f3;
        case m2c::kloc_1c1fe: 	goto loc_1c1fe;
        case m2c::kloc_1c202: 	goto loc_1c202;
        case m2c::kloc_1c212: 	goto loc_1c212;
        case m2c::kloc_1c21d: 	goto loc_1c21d;
        case m2c::klocret_1c237: 	goto locret_1c237;
        case m2c::ksub_1c1ab: 	goto sub_1c1ab;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1c238(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1c238:
    _begin:
cs=0x1a2;eip=0x00c238; 	J(CALL(sub_13514,0));	// 30291                  call    sub_13514 ;~ 01A2:C238
cs=0x1a2;eip=0x00c23b; 	J(CALL(sub_13618,0));	// 30292                  call    sub_13618 ;~ 01A2:C23B
loc_1c23e:
	// 6254 
cs=0x1a2;eip=0x00c23e; 	T(CMP(word_1f8f0, 0x0FFFE));	// 30295                  cmp     ds:word_1F8F0, 0FFFEh ;~ 01A2:C23E
cs=0x1a2;eip=0x00c243; 	J(JNZ(loc_1c24a));	// 30296                  jnz     short loc_1C24A ;~ 01A2:C243
cs=0x1a2;eip=0x00c245; 	T(ax = 0x0B;);	// 30297                  mov     ax, 0Bh ;~ 01A2:C245
cs=0x1a2;eip=0x00c248; 	J(JMP(loc_1c24d));	// 30298                  jmp     short loc_1C24D ;~ 01A2:C248
loc_1c24a:
	// 6255 
cs=0x1a2;eip=0x00c24a; 	T(ax = 0;);	// 30302                  mov     ax, 0 ;~ 01A2:C24A
loc_1c24d:
	// 6256 
cs=0x1a2;eip=0x00c24d; 	T(si = 1;);	// 30305                  mov     si, 1 ;~ 01A2:C24D
cs=0x1a2;eip=0x00c250; 	T(cl = 0x0FF;);	// 30306                  mov     cl, 0FFh ;~ 01A2:C250
cs=0x1a2;eip=0x00c252; 	J(CALL(sub_1c1ab,0));	// 30307                  call    sub_1C1AB ;~ 01A2:C252
cs=0x1a2;eip=0x00c255; 	J(JNZ(loc_1c25a));	// 30308                  jnz     short loc_1C25A ;~ 01A2:C255
cs=0x1a2;eip=0x00c257; 	J(JMP(loc_1c347));	// 30309                  jmp     loc_1C347 ;~ 01A2:C257
loc_1c25a:
	// 6257 
cs=0x1a2;eip=0x00c25a; 	T(CMP(word_1f8f0, 0x0FFFE));	// 30313                  cmp     ds:word_1F8F0, 0FFFEh ;~ 01A2:C25A
cs=0x1a2;eip=0x00c25f; 	J(JNZ(loc_1c267));	// 30314                  jnz     short loc_1C267 ;~ 01A2:C25F
cs=0x1a2;eip=0x00c261; 	X(word_1f8f0 = 0x0FFFF;);	// 30315                  mov     ds:word_1F8F0, 0FFFFh ;~ 01A2:C261
loc_1c267:
	// 6258 
cs=0x1a2;eip=0x00c267; 	X(byte_70d92 = bl;);	// 30318                  mov     ss:byte_70D92, bl ;~ 01A2:C267
cs=0x1a2;eip=0x00c26c; 	T(CMP(byte_2ea25, 0));	// 30319                  cmp     ds:byte_2EA25, 0 ;~ 01A2:C26C
cs=0x1a2;eip=0x00c271; 	J(JNZ(loc_1c279));	// 30320                  jnz     short loc_1C279 ;~ 01A2:C271
cs=0x1a2;eip=0x00c273; 	X(ADD(byte_70d92, 0x11));	// 30321                  add     ss:byte_70D92, 11h ;~ 01A2:C273
loc_1c279:
	// 6259 
cs=0x1a2;eip=0x00c279; 	X(PUSH(ax));	// 30324                  push    ax ;~ 01A2:C279
cs=0x1a2;eip=0x00c27a; 	X(PUSH(bx));	// 30325                  push    bx ;~ 01A2:C27A
cs=0x1a2;eip=0x00c27b; 	X(PUSH(cx));	// 30326                  push    cx ;~ 01A2:C27B
cs=0x1a2;eip=0x00c27c; 	X(PUSH(dx));	// 30327                  push    dx ;~ 01A2:C27C
cs=0x1a2;eip=0x00c27d; 	X(PUSH(bp));	// 30328                  push    bp ;~ 01A2:C27D
cs=0x1a2;eip=0x00c27e; 	X(PUSH(si));	// 30329                  push    si ;~ 01A2:C27E
cs=0x1a2;eip=0x00c27f; 	X(PUSH(di));	// 30330                  push    di ;~ 01A2:C27F
cs=0x1a2;eip=0x00c280; 	X(PUSH(es));	// 30331                  push    es ;~ 01A2:C280
cs=0x1a2;eip=0x00c281; 	X(PUSH(ds));	// 30332                  push    ds ;~ 01A2:C281
cs=0x1a2;eip=0x00c282; 	X(PUSH(es));	// 30333                  push    es ;~ 01A2:C282
cs=0x1a2;eip=0x00c283; 	X(PUSH(ds));	// 30334                  push    ds ;~ 01A2:C283
cs=0x1a2;eip=0x00c284; 	T(ax = ds;);	// 30335                  mov     ax, ds ;~ 01A2:C284
cs=0x1a2;eip=0x00c286; 	T(es = ax;);	// 30336                  mov     es, ax ;~ 01A2:C286
cs=0x1a2;eip=0x00c288; 	T(ax = ss;);	// 30337                  mov     ax, ss ;~ 01A2:C288
cs=0x1a2;eip=0x00c28a; 	T(ds = ax;);	// 30338                  mov     ds, ax ;~ 01A2:C28A
cs=0x1a2;eip=0x00c28c; 	T(dx = 0x4D09;);	// 30340                  mov     dx, 4D09h ;~ 01A2:C28C
cs=0x1a2;eip=0x00c28f; 	T(CLC);	// 30341                  clc ;~ 01A2:C28F
cs=0x1a2;eip=0x00c290; 	J(CALL(sub_1c44a,0));	// 30342                  call    sub_1C44A ;~ 01A2:C290
cs=0x1a2;eip=0x00c293; 	X(POP(ds));	// 30343                  pop     ds ;~ 01A2:C293
cs=0x1a2;eip=0x00c294; 	X(POP(es));	// 30345                  pop     es ;~ 01A2:C294
cs=0x1a2;eip=0x00c295; 	J(JNC(loc_1c29a));	// 30347                  jnb     short loc_1C29A ;~ 01A2:C295
cs=0x1a2;eip=0x00c297; 	J(JMP(loc_1c365));	// 30348                  jmp     loc_1C365 ;~ 01A2:C297
loc_1c29a:
	// 6260 
cs=0x1a2;eip=0x00c29a; 	T(dx = 0x0A62;);	// 30352                  mov     dx, 0A62h ;~ 01A2:C29A
cs=0x1a2;eip=0x00c29d; 	T(cx = 4;);	// 30353                  mov     cx, 4 ;~ 01A2:C29D
cs=0x1a2;eip=0x00c2a0; 	T(MOV(bx, *(dw*)(raddr(ds,0x77E))));	// 30354                  mov     bx, ds:77Eh ;~ 01A2:C2A0
cs=0x1a2;eip=0x00c2a4; 	J(CALL(sub_1c7d1,0));	// 30355                  call    near ptr sub_1C7D1 ;~ 01A2:C2A4
cs=0x1a2;eip=0x00c2a7; 	T(si = 0x0A62;);	// 30356                  mov     si, 0A62h ;~ 01A2:C2A7
cs=0x1a2;eip=0x00c2aa; 	T(LODSB);	// 30357                  lodsb ;~ 01A2:C2AA
cs=0x1a2;eip=0x00c2ab; 	T(CMP(al, 0x44));	// 30358                  cmp     al, 44h ; 'D' ;~ 01A2:C2AB
cs=0x1a2;eip=0x00c2ad; 	J(JZ(loc_1c2b2));	// 30359                  jz      short loc_1C2B2 ;~ 01A2:C2AD
cs=0x1a2;eip=0x00c2af; 	J(JMP(loc_1c365));	// 30360                  jmp     loc_1C365 ;~ 01A2:C2AF
loc_1c2b2:
	// 6261 
cs=0x1a2;eip=0x00c2b2; 	T(LODSB);	// 30364                  lodsb ;~ 01A2:C2B2
cs=0x1a2;eip=0x00c2b3; 	T(CMP(al, 0x41));	// 30365                  cmp     al, 41h ; 'A' ;~ 01A2:C2B3
cs=0x1a2;eip=0x00c2b5; 	J(JZ(loc_1c2ba));	// 30366                  jz      short loc_1C2BA ;~ 01A2:C2B5
cs=0x1a2;eip=0x00c2b7; 	J(JMP(loc_1c365));	// 30367                  jmp     loc_1C365 ;~ 01A2:C2B7
loc_1c2ba:
	// 6262 
cs=0x1a2;eip=0x00c2ba; 	T(LODSB);	// 30371                  lodsb ;~ 01A2:C2BA
cs=0x1a2;eip=0x00c2bb; 	T(CMP(al, 0x43));	// 30372                  cmp     al, 43h ; 'C' ;~ 01A2:C2BB
cs=0x1a2;eip=0x00c2bd; 	J(JZ(loc_1c2c2));	// 30373                  jz      short loc_1C2C2 ;~ 01A2:C2BD
cs=0x1a2;eip=0x00c2bf; 	J(JMP(loc_1c365));	// 30374                  jmp     loc_1C365 ;~ 01A2:C2BF
loc_1c2c2:
	// 6263 
cs=0x1a2;eip=0x00c2c2; 	X(POP(ds));	// 30378                  pop     ds ;~ 01A2:C2C2
cs=0x1a2;eip=0x00c2c3; 	X(POP(es));	// 30379                  pop     es ;~ 01A2:C2C3
cs=0x1a2;eip=0x00c2c4; 	X(POP(di));	// 30380                  pop     di ;~ 01A2:C2C4
cs=0x1a2;eip=0x00c2c5; 	X(POP(si));	// 30381                  pop     si ;~ 01A2:C2C5
cs=0x1a2;eip=0x00c2c6; 	X(POP(bp));	// 30382                  pop     bp ;~ 01A2:C2C6
cs=0x1a2;eip=0x00c2c7; 	X(POP(dx));	// 30383                  pop     dx ;~ 01A2:C2C7
cs=0x1a2;eip=0x00c2c8; 	X(POP(cx));	// 30384                  pop     cx ;~ 01A2:C2C8
cs=0x1a2;eip=0x00c2c9; 	X(POP(bx));	// 30385                  pop     bx ;~ 01A2:C2C9
cs=0x1a2;eip=0x00c2ca; 	X(POP(ax));	// 30386                  pop     ax ;~ 01A2:C2CA
cs=0x1a2;eip=0x00c2cb; 	T(MOV(al, *(raddr(ds,0x0A65))));	// 30387                  mov     al, ds:0A65h ;~ 01A2:C2CB
cs=0x1a2;eip=0x00c2ce; 	T(CMP(al, *(raddr(ds,0x708))));	// 30388                  cmp     al, ds:708h ;~ 01A2:C2CE
cs=0x1a2;eip=0x00c2d2; 	J(JZ(loc_1c2fa));	// 30389                  jz      short loc_1C2FA ;~ 01A2:C2D2
cs=0x1a2;eip=0x00c2d4; 	J(CALL(nullsub_6,0));	// 30390                  call    nullsub_6 ;~ 01A2:C2D4
cs=0x1a2;eip=0x00c2d7; 	T(XOR(bh, bh));	// 30391                  xor     bh, bh ;~ 01A2:C2D7
cs=0x1a2;eip=0x00c2d9; 	X(MOV(*(dw*)(raddr(ds,0x780)), bx));	// 30392                  mov     ds:780h, bx ;~ 01A2:C2D9
cs=0x1a2;eip=0x00c2dd; 	X(MOV(*(raddr(ds,0x708)), al));	// 30393                  mov     ds:708h, al ;~ 01A2:C2DD
cs=0x1a2;eip=0x00c2e0; 	X(MOV(*(raddr(ds,0x702)), 0x0FF));	// 30394                  mov     byte ptr ds:702h, 0FFh ;~ 01A2:C2E0
cs=0x1a2;eip=0x00c2e5; 	X(MOV(*(raddr(ds,0x709)), 0));	// 30395                  mov     byte ptr ds:709h, 0 ;~ 01A2:C2E5
cs=0x1a2;eip=0x00c2ea; 	X(MOV(*(raddr(ds,0x70A)), 1));	// 30396                  mov     byte ptr ds:70Ah, 1 ;~ 01A2:C2EA
cs=0x1a2;eip=0x00c2ef; 	T(MOV(bx, *(dw*)(raddr(ds,0x77E))));	// 30397                  mov     bx, ds:77Eh ;~ 01A2:C2EF
cs=0x1a2;eip=0x00c2f3; 	T(ah = 0x3E;);	// 30398                  mov     ah, 3Eh ;~ 01A2:C2F3
cs=0x1a2;eip=0x00c2f5; 	S(_INT(0x21));	// 30399                  int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE ;~ 01A2:C2F5
cs=0x1a2;eip=0x00c2f7; 	J(return start(m2c::kloc_10097, _state););	// 30401                  jmp     loc_10097 ;~ 01A2:C2F7
loc_1c2fa:
	// 6264 
cs=0x1a2;eip=0x00c2fa; 	T(al = 9;);	// 30405                  mov     al, 9 ;~ 01A2:C2FA
cs=0x1a2;eip=0x00c2fc; 	J(CALL(sub_14275,0));	// 30406                  call    sub_14275 ;~ 01A2:C2FC
cs=0x1a2;eip=0x00c2ff; 	T(al = 3;);	// 30407                  mov     al, 3 ;~ 01A2:C2FF
cs=0x1a2;eip=0x00c301; 	J(CALL(sub_14628,0));	// 30408                  call    sub_14628 ;~ 01A2:C301
cs=0x1a2;eip=0x00c304; 	T(al = 4;);	// 30409                  mov     al, 4 ;~ 01A2:C304
cs=0x1a2;eip=0x00c306; 	J(CALL(sub_14628,0));	// 30410                  call    sub_14628 ;~ 01A2:C306
cs=0x1a2;eip=0x00c309; 	T(al = 5;);	// 30411                  mov     al, 5 ;~ 01A2:C309
cs=0x1a2;eip=0x00c30b; 	J(CALL(sub_14628,0));	// 30412                  call    sub_14628 ;~ 01A2:C30B
cs=0x1a2;eip=0x00c30e; 	T(al = 8;);	// 30413                  mov     al, 8 ;~ 01A2:C30E
cs=0x1a2;eip=0x00c310; 	J(CALL(sub_14628,0));	// 30414                  call    sub_14628 ;~ 01A2:C310
cs=0x1a2;eip=0x00c313; 	T(al = 6;);	// 30415                  mov     al, 6 ;~ 01A2:C313
cs=0x1a2;eip=0x00c315; 	J(CALL(sub_14628,0));	// 30416                  call    sub_14628 ;~ 01A2:C315
cs=0x1a2;eip=0x00c318; 	T(dx = 0x20C;);	// 30417                  mov     dx, 20Ch ;~ 01A2:C318
cs=0x1a2;eip=0x00c31b; 	T(cx = 0x6F8;);	// 30418                  mov     cx, 6F8h ;~ 01A2:C31B
cs=0x1a2;eip=0x00c31e; 	T(SUB(cx, dx));	// 30419                  sub     cx, dx ;~ 01A2:C31E
cs=0x1a2;eip=0x00c320; 	X(PUSH(ax));	// 30420                  push    ax ;~ 01A2:C320
cs=0x1a2;eip=0x00c321; 	X(PUSH(bx));	// 30421                  push    bx ;~ 01A2:C321
cs=0x1a2;eip=0x00c322; 	X(PUSH(cx));	// 30422                  push    cx ;~ 01A2:C322
cs=0x1a2;eip=0x00c323; 	X(PUSH(dx));	// 30423                  push    dx ;~ 01A2:C323
cs=0x1a2;eip=0x00c324; 	X(PUSH(bp));	// 30424                  push    bp ;~ 01A2:C324
cs=0x1a2;eip=0x00c325; 	X(PUSH(si));	// 30425                  push    si ;~ 01A2:C325
cs=0x1a2;eip=0x00c326; 	X(PUSH(di));	// 30426                  push    di ;~ 01A2:C326
cs=0x1a2;eip=0x00c327; 	X(PUSH(es));	// 30427                  push    es ;~ 01A2:C327
cs=0x1a2;eip=0x00c328; 	X(PUSH(ds));	// 30428                  push    ds ;~ 01A2:C328
cs=0x1a2;eip=0x00c329; 	T(cx = cx;);	// 30429                  mov     cx, cx ;~ 01A2:C329
cs=0x1a2;eip=0x00c32b; 	T(MOV(bx, *(dw*)(raddr(ds,0x77E))));	// 30430                  mov     bx, ds:77Eh ;~ 01A2:C32B
cs=0x1a2;eip=0x00c32f; 	J(CALL(sub_1c7d1,0));	// 30431                  call    near ptr sub_1C7D1 ;~ 01A2:C32F
cs=0x1a2;eip=0x00c332; 	T(MOV(bx, *(dw*)(raddr(ds,0x77E))));	// 30432                  mov     bx, ds:77Eh ;~ 01A2:C332
cs=0x1a2;eip=0x00c336; 	T(ah = 0x3E;);	// 30433                  mov     ah, 3Eh ;~ 01A2:C336
cs=0x1a2;eip=0x00c338; 	S(_INT(0x21));	// 30434                  int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE ;~ 01A2:C338
cs=0x1a2;eip=0x00c33a; 	X(POP(ds));	// 30436                  pop     ds ;~ 01A2:C33A
cs=0x1a2;eip=0x00c33b; 	X(POP(es));	// 30437                  pop     es ;~ 01A2:C33B
cs=0x1a2;eip=0x00c33c; 	X(POP(di));	// 30438                  pop     di ;~ 01A2:C33C
cs=0x1a2;eip=0x00c33d; 	X(POP(si));	// 30439                  pop     si ;~ 01A2:C33D
cs=0x1a2;eip=0x00c33e; 	X(POP(bp));	// 30440                  pop     bp ;~ 01A2:C33E
cs=0x1a2;eip=0x00c33f; 	X(POP(dx));	// 30441                  pop     dx ;~ 01A2:C33F
cs=0x1a2;eip=0x00c340; 	X(POP(cx));	// 30442                  pop     cx ;~ 01A2:C340
cs=0x1a2;eip=0x00c341; 	X(POP(bx));	// 30443                  pop     bx ;~ 01A2:C341
cs=0x1a2;eip=0x00c342; 	X(POP(ax));	// 30444                  pop     ax ;~ 01A2:C342
cs=0x1a2;eip=0x00c343; 	T(XOR(ax, ax));	// 30445                  xor     ax, ax ;~ 01A2:C343
cs=0x1a2;eip=0x00c345; 	J(JMP(loc_1c357));	// 30446                  jmp     short loc_1C357 ;~ 01A2:C345
loc_1c347:
	// 6265 
cs=0x1a2;eip=0x00c347; 	T(CMP(word_1f8f0, 0x0FFFE));	// 30451                  cmp     ds:word_1F8F0, 0FFFEh ;~ 01A2:C347
cs=0x1a2;eip=0x00c34c; 	J(JNZ(loc_1c354));	// 30452                  jnz     short loc_1C354 ;~ 01A2:C34C
cs=0x1a2;eip=0x00c34e; 	X(word_1f8f0 = 0x0FFFF;);	// 30453                  mov     ds:word_1F8F0, 0FFFFh ;~ 01A2:C34E
loc_1c354:
	// 6266 
cs=0x1a2;eip=0x00c354; 	T(ax = 0x0FFFF;);	// 30456                  mov     ax, 0FFFFh ;~ 01A2:C354
loc_1c357:
	// 6267 
cs=0x1a2;eip=0x00c357; 	X(PUSH(ax));	// 30459                  push    ax ;~ 01A2:C357
cs=0x1a2;eip=0x00c358; 	J(CALL(sub_1d7cc,0));	// 30460                  call    sub_1D7CC ;~ 01A2:C358
cs=0x1a2;eip=0x00c35b; 	J(CALL(sub_13514,0));	// 30462                  call    sub_13514 ;~ 01A2:C35B
cs=0x1a2;eip=0x00c35e; 	J(CALL(sub_13618,0));	// 30464                  call    sub_13618 ;~ 01A2:C35E
cs=0x1a2;eip=0x00c361; 	X(POP(ax));	// 30465                  pop     ax ;~ 01A2:C361
cs=0x1a2;eip=0x00c362; 	T(OR(ax, ax));	// 30466                  or      ax, ax ;~ 01A2:C362
cs=0x1a2;eip=0x00c364; 	J(RETN(0));	// 30467                  retn ;~ 01A2:C364
loc_1c365:
	// 6268 
cs=0x1a2;eip=0x00c365; 	J(CALL(sub_1d7cc,0));	// 30472                  call    sub_1D7CC ;~ 01A2:C365
cs=0x1a2;eip=0x00c368; 	X(POP(ds));	// 30473                  pop     ds ;~ 01A2:C368
cs=0x1a2;eip=0x00c369; 	X(POP(es));	// 30475                  pop     es ;~ 01A2:C369
cs=0x1a2;eip=0x00c36a; 	X(POP(di));	// 30477                  pop     di ;~ 01A2:C36A
cs=0x1a2;eip=0x00c36b; 	X(POP(si));	// 30478                  pop     si ;~ 01A2:C36B
cs=0x1a2;eip=0x00c36c; 	X(POP(bp));	// 30479                  pop     bp ;~ 01A2:C36C
cs=0x1a2;eip=0x00c36d; 	X(POP(dx));	// 30480                  pop     dx ;~ 01A2:C36D
cs=0x1a2;eip=0x00c36e; 	X(POP(cx));	// 30481                  pop     cx ;~ 01A2:C36E
cs=0x1a2;eip=0x00c36f; 	X(POP(bx));	// 30482                  pop     bx ;~ 01A2:C36F
cs=0x1a2;eip=0x00c370; 	X(POP(ax));	// 30483                  pop     ax ;~ 01A2:C370
cs=0x1a2;eip=0x00c371; 	J(CALL(sub_1c18a,0));	// 30484                  call    sub_1C18A ;~ 01A2:C371
cs=0x1a2;eip=0x00c374; 	J(JMP(loc_1c23e));	// 30485                  jmp     loc_1C23E ;~ 01A2:C374

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1c23e: 	goto loc_1c23e;
        case m2c::kloc_1c24a: 	goto loc_1c24a;
        case m2c::kloc_1c24d: 	goto loc_1c24d;
        case m2c::kloc_1c25a: 	goto loc_1c25a;
        case m2c::kloc_1c267: 	goto loc_1c267;
        case m2c::kloc_1c279: 	goto loc_1c279;
        case m2c::kloc_1c29a: 	goto loc_1c29a;
        case m2c::kloc_1c2b2: 	goto loc_1c2b2;
        case m2c::kloc_1c2ba: 	goto loc_1c2ba;
        case m2c::kloc_1c2c2: 	goto loc_1c2c2;
        case m2c::kloc_1c2fa: 	goto loc_1c2fa;
        case m2c::kloc_1c347: 	goto loc_1c347;
        case m2c::kloc_1c354: 	goto loc_1c354;
        case m2c::kloc_1c357: 	goto loc_1c357;
        case m2c::kloc_1c365: 	goto loc_1c365;
        case m2c::ksub_1c238: 	goto sub_1c238;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1c377(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1c377:
    _begin:
cs=0x1a2;eip=0x00c377; 	T(XOR(dx, dx));	// 30494                  xor     dx, dx ;~ 01A2:C377
cs=0x1a2;eip=0x00c379; 	T(ax = 6;);	// 30495                  mov     ax, 6 ;~ 01A2:C379
cs=0x1a2;eip=0x00c37c; 	J(CALL(sub_1410e,0));	// 30496                  call    sub_1410E ;~ 01A2:C37C
cs=0x1a2;eip=0x00c37f; 	X(MOV(*(dw*)(raddr(ds,0x5C)), di));	// 30497                  mov     ds:5Ch, di ;~ 01A2:C37F
cs=0x1a2;eip=0x00c383; 	T(si = di;);	// 30498                  mov     si, di ;~ 01A2:C383
cs=0x1a2;eip=0x00c385; 	T(MOV(cl, *(raddr(ds,si))));	// 30499                  mov     cl, [si] ;~ 01A2:C385
cs=0x1a2;eip=0x00c387; 	T(MOV(dl, *(raddr(ds,si+1))));	// 30500                  mov     dl, [si+1] ;~ 01A2:C387
cs=0x1a2;eip=0x00c38a; 	T(MOV(bl, *(raddr(ds,si+2))));	// 30501                  mov     bl, [si+2] ;~ 01A2:C38A
cs=0x1a2;eip=0x00c38d; 	X(PUSH(cx));	// 30502                  push    cx ;~ 01A2:C38D
cs=0x1a2;eip=0x00c38e; 	X(PUSH(dx));	// 30503                  push    dx ;~ 01A2:C38E
cs=0x1a2;eip=0x00c38f; 	X(PUSH(bx));	// 30504                  push    bx ;~ 01A2:C38F
cs=0x1a2;eip=0x00c390; 	T(MOV(dx, *(dw*)(raddr(ds,0x232))));	// 30505                  mov     dx, ds:232h ;~ 01A2:C390
cs=0x1a2;eip=0x00c394; 	T(ax = 3;);	// 30506                  mov     ax, 3 ;~ 01A2:C394
cs=0x1a2;eip=0x00c397; 	J(CALL(sub_1410e,0));	// 30507                  call    sub_1410E ;~ 01A2:C397
cs=0x1a2;eip=0x00c39a; 	X(POP(bx));	// 30508                  pop     bx ;~ 01A2:C39A
cs=0x1a2;eip=0x00c39b; 	X(POP(dx));	// 30509                  pop     dx ;~ 01A2:C39B
cs=0x1a2;eip=0x00c39c; 	X(POP(cx));	// 30510                  pop     cx ;~ 01A2:C39C
cs=0x1a2;eip=0x00c39d; 	T(XOR(ax, ax));	// 30511                  xor     ax, ax ;~ 01A2:C39D
cs=0x1a2;eip=0x00c39f; 	T(al = cl;);	// 30512                  mov     al, cl ;~ 01A2:C39F
cs=0x1a2;eip=0x00c3a1; 	T(AND(cl, 7));	// 30513                  and     cl, 7 ;~ 01A2:C3A1
cs=0x1a2;eip=0x00c3a4; 	X(MOV(*(raddr(ds,si)), cl));	// 30514                  mov     [si], cl ;~ 01A2:C3A4
cs=0x1a2;eip=0x00c3a6; 	T(SHR(al, 1));	// 30515                  shr     al, 1 ;~ 01A2:C3A6
cs=0x1a2;eip=0x00c3a8; 	T(SHR(al, 1));	// 30516                  shr     al, 1 ;~ 01A2:C3A8
cs=0x1a2;eip=0x00c3aa; 	T(SHR(al, 1));	// 30517                  shr     al, 1 ;~ 01A2:C3AA
cs=0x1a2;eip=0x00c3ac; 	T(ADD(al, *(raddr(ds,di+1))));	// 30518                  add     al, [di+1] ;~ 01A2:C3AC
cs=0x1a2;eip=0x00c3af; 	X(MOV(*(dw*)(raddr(ds,0x592)), ax));	// 30519                  mov     ds:592h, ax ;~ 01A2:C3AF
cs=0x1a2;eip=0x00c3b2; 	T(al = dl;);	// 30520                  mov     al, dl ;~ 01A2:C3B2
cs=0x1a2;eip=0x00c3b4; 	T(AND(dl, 7));	// 30521                  and     dl, 7 ;~ 01A2:C3B4
cs=0x1a2;eip=0x00c3b7; 	X(MOV(*(raddr(ds,si+1)), dl));	// 30522                  mov     [si+1], dl ;~ 01A2:C3B7
cs=0x1a2;eip=0x00c3ba; 	T(SHR(al, 1));	// 30523                  shr     al, 1 ;~ 01A2:C3BA
cs=0x1a2;eip=0x00c3bc; 	T(SHR(al, 1));	// 30524                  shr     al, 1 ;~ 01A2:C3BC
cs=0x1a2;eip=0x00c3be; 	T(SHR(al, 1));	// 30525                  shr     al, 1 ;~ 01A2:C3BE
cs=0x1a2;eip=0x00c3c0; 	T(ADD(al, *(raddr(ds,di+3))));	// 30526                  add     al, [di+3] ;~ 01A2:C3C0
cs=0x1a2;eip=0x00c3c3; 	X(MOV(*(dw*)(raddr(ds,0x594)), ax));	// 30527                  mov     ds:594h, ax ;~ 01A2:C3C3
cs=0x1a2;eip=0x00c3c6; 	T(al = bl;);	// 30528                  mov     al, bl ;~ 01A2:C3C6
cs=0x1a2;eip=0x00c3c8; 	T(AND(bl, 0x0F));	// 30529                  and     bl, 0Fh ;~ 01A2:C3C8
cs=0x1a2;eip=0x00c3cb; 	X(MOV(*(dw*)(raddr(ds,0x596)), bx));	// 30530                  mov     ds:596h, bx ;~ 01A2:C3CB
cs=0x1a2;eip=0x00c3cf; 	T(SHR(ax, 1));	// 30531                  shr     ax, 1 ;~ 01A2:C3CF
cs=0x1a2;eip=0x00c3d1; 	T(SHR(ax, 1));	// 30532                  shr     ax, 1 ;~ 01A2:C3D1
cs=0x1a2;eip=0x00c3d3; 	T(SHR(ax, 1));	// 30533                  shr     ax, 1 ;~ 01A2:C3D3
cs=0x1a2;eip=0x00c3d5; 	T(SHR(ax, 1));	// 30534                  shr     ax, 1 ;~ 01A2:C3D5
cs=0x1a2;eip=0x00c3d7; 	T(ADD(al, *(raddr(ds,di+0x1E))));	// 30535                  add     al, [di+1Eh] ;~ 01A2:C3D7
cs=0x1a2;eip=0x00c3da; 	X(MOV(*(raddr(ds,si+2)), al));	// 30536                  mov     [si+2], al ;~ 01A2:C3DA
cs=0x1a2;eip=0x00c3dd; 	J(CALL(sub_18888,0));	// 30537                  call    sub_18888 ;~ 01A2:C3DD
cs=0x1a2;eip=0x00c3e0; 	J(CALL(sub_1d445,0));	// 30538                  call    sub_1D445 ;~ 01A2:C3E0
cs=0x1a2;eip=0x00c3e3; 	J(return _group34(m2c::ksub_1da60, _state););	// 30539                  jmp     sub_1DA60 ;~ 01A2:C3E3

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1c377: 	goto sub_1c377;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_c3e6_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_c3e6_proc:
    _begin:
cs=0x1a2;eip=0x00c3e6; 	J(RETN(0));	// 30543                  retn ;~ 01A2:C3E6
ret_1a2_c3e7:
	// 6269 
cs=0x1a2;eip=0x00c3e7; 	J(RETN(0));	// 30545                  retn ;~ 01A2:C3E7

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kret_1a2_c3e7: 	goto ret_1a2_c3e7;
        case m2c::kseg000_c3e6_proc: 	goto seg000_c3e6_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1c3e8(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1c3e8:
    _begin:
cs=0x1a2;eip=0x00c3e8; 	X(PUSH(ax));	// 30553                  push    ax ;~ 01A2:C3E8
cs=0x1a2;eip=0x00c3e9; 	X(PUSH(bx));	// 30554                  push    bx ;~ 01A2:C3E9
cs=0x1a2;eip=0x00c3ea; 	X(PUSH(cx));	// 30555                  push    cx ;~ 01A2:C3EA
cs=0x1a2;eip=0x00c3eb; 	X(PUSH(dx));	// 30556                  push    dx ;~ 01A2:C3EB
cs=0x1a2;eip=0x00c3ec; 	X(PUSH(bp));	// 30557                  push    bp ;~ 01A2:C3EC
cs=0x1a2;eip=0x00c3ed; 	X(PUSH(si));	// 30558                  push    si ;~ 01A2:C3ED
cs=0x1a2;eip=0x00c3ee; 	X(PUSH(di));	// 30559                  push    di ;~ 01A2:C3EE
cs=0x1a2;eip=0x00c3ef; 	X(PUSH(es));	// 30560                  push    es ;~ 01A2:C3EF
cs=0x1a2;eip=0x00c3f0; 	X(PUSH(ds));	// 30561                  push    ds ;~ 01A2:C3F0
cs=0x1a2;eip=0x00c3f1; 	T(si = 0x4034;);	// 30562                  mov     si, 4034h ;~ 01A2:C3F1
cs=0x1a2;eip=0x00c3f4; 	T(SHL(ax, 1));	// 30563                  shl     ax, 1 ;~ 01A2:C3F4
cs=0x1a2;eip=0x00c3f6; 	T(ADD(si, ax));	// 30564                  add     si, ax ;~ 01A2:C3F6
cs=0x1a2;eip=0x00c3f8; 	T(MOV(si, *(dw*)(raddr(ss,si))));	// 30565                  mov     si, ss:[si] ;~ 01A2:C3F8
cs=0x1a2;eip=0x00c3fb; 	T(ch = byte_1f87b;);	// 30566                  mov     ch, ds:byte_1F87B ;~ 01A2:C3FB
cs=0x1a2;eip=0x00c3ff; 	T(OR(ch, ch));	// 30567                  or      ch, ch ;~ 01A2:C3FF
cs=0x1a2;eip=0x00c401; 	J(JZ(loc_1c416));	// 30568                  jz      short loc_1C416 ;~ 01A2:C401
cs=0x1a2;eip=0x00c403; 	T(DEC(ch));	// 30569                  dec     ch ;~ 01A2:C403
loc_1c405:
	// 6270 
cs=0x1a2;eip=0x00c405; 	T(ax = ss;);	// 30572                  mov     ax, ss ;~ 01A2:C405
cs=0x1a2;eip=0x00c407; 	X(*(dw*)(&unk_1f8b8) = ax;);	// 30573                  mov     word ptr ds:unk_1F8B8, ax ;~ 01A2:C407
cs=0x1a2;eip=0x00c40a; 	T(XOR(bl, bl));	// 30574                  xor     bl, bl ;~ 01A2:C40A
cs=0x1a2;eip=0x00c40c; 	X(PUSH(cx));	// 30575                  push    cx ;~ 01A2:C40C
cs=0x1a2;eip=0x00c40d; 	J(CALL(sub_19cc9,0));	// 30576                  call    sub_19CC9 ;~ 01A2:C40D
cs=0x1a2;eip=0x00c410; 	X(POP(cx));	// 30577                  pop     cx ;~ 01A2:C410
cs=0x1a2;eip=0x00c411; 	T(INC(si));	// 30578                  inc     si ;~ 01A2:C411
cs=0x1a2;eip=0x00c412; 	T(DEC(ch));	// 30579                  dec     ch ;~ 01A2:C412
cs=0x1a2;eip=0x00c414; 	J(JNS(loc_1c405));	// 30580                  jns     short loc_1C405 ;~ 01A2:C414
loc_1c416:
	// 6271 
cs=0x1a2;eip=0x00c416; 	T(ax = ds;);	// 30583                  mov     ax, ds ;~ 01A2:C416
cs=0x1a2;eip=0x00c418; 	T(es = ax;);	// 30584                  mov     es, ax ;~ 01A2:C418
cs=0x1a2;eip=0x00c41a; 	T(ax = ss;);	// 30585                  mov     ax, ss ;~ 01A2:C41A
cs=0x1a2;eip=0x00c41c; 	T(ds = ax;);	// 30586                  mov     ds, ax ;~ 01A2:C41C
cs=0x1a2;eip=0x00c41e; 	T(di = 0x7B0;);	// 30588                  mov     di, 7B0h ;~ 01A2:C41E
loc_1c421:
	// 6272 
cs=0x1a2;eip=0x00c421; 	T(LODSB);	// 30591                  lodsb ;~ 01A2:C421
cs=0x1a2;eip=0x00c422; 	X(STOSB);	// 30592                  stosb ;~ 01A2:C422
cs=0x1a2;eip=0x00c423; 	T(OR(al, al));	// 30593                  or      al, al ;~ 01A2:C423
cs=0x1a2;eip=0x00c425; 	J(JNZ(loc_1c421));	// 30594                  jnz     short loc_1C421 ;~ 01A2:C425
cs=0x1a2;eip=0x00c427; 	T(ax = es;);	// 30595                  mov     ax, es ;~ 01A2:C427
cs=0x1a2;eip=0x00c429; 	T(ds = ax;);	// 30596                  mov     ds, ax ;~ 01A2:C429
cs=0x1a2;eip=0x00c42b; 	T(si = 0x7B0;);	// 30598                  mov     si, 7B0h ;~ 01A2:C42B
cs=0x1a2;eip=0x00c42e; 	J(CALL(sub_13555,0));	// 30599                  call    sub_13555 ;~ 01A2:C42E
cs=0x1a2;eip=0x00c431; 	X(POP(ds));	// 30600                  pop     ds ;~ 01A2:C431
cs=0x1a2;eip=0x00c432; 	X(POP(es));	// 30601                  pop     es ;~ 01A2:C432
cs=0x1a2;eip=0x00c433; 	X(POP(di));	// 30602                  pop     di ;~ 01A2:C433
cs=0x1a2;eip=0x00c434; 	X(POP(si));	// 30603                  pop     si ;~ 01A2:C434
cs=0x1a2;eip=0x00c435; 	X(POP(bp));	// 30604                  pop     bp ;~ 01A2:C435
cs=0x1a2;eip=0x00c436; 	X(POP(dx));	// 30605                  pop     dx ;~ 01A2:C436
cs=0x1a2;eip=0x00c437; 	X(POP(cx));	// 30606                  pop     cx ;~ 01A2:C437
cs=0x1a2;eip=0x00c438; 	X(POP(bx));	// 30607                  pop     bx ;~ 01A2:C438
cs=0x1a2;eip=0x00c439; 	X(POP(ax));	// 30608                  pop     ax ;~ 01A2:C439
cs=0x1a2;eip=0x00c43a; 	J(RETN(0));	// 30609                  retn ;~ 01A2:C43A

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1c405: 	goto loc_1c405;
        case m2c::kloc_1c416: 	goto loc_1c416;
        case m2c::kloc_1c421: 	goto loc_1c421;
        case m2c::ksub_1c3e8: 	goto sub_1c3e8;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1c43b(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1c43b:
    _begin:
cs=0x1a2;eip=0x00c43b; 	X(PUSH(ax));	// 30617                  push    ax ;~ 01A2:C43B
cs=0x1a2;eip=0x00c43c; 	J(CALL(sub_1d4a0,0));	// 30618                  call    sub_1D4A0 ;~ 01A2:C43C
cs=0x1a2;eip=0x00c43f; 	J(CALL(sub_13514,0));	// 30620                  call    sub_13514 ;~ 01A2:C43F
cs=0x1a2;eip=0x00c442; 	J(CALL(sub_13618,0));	// 30622                  call    sub_13618 ;~ 01A2:C442
cs=0x1a2;eip=0x00c445; 	X(POP(ax));	// 30623                  pop     ax ;~ 01A2:C445
cs=0x1a2;eip=0x00c446; 	T(cl = 0x14;);	// 30624                  mov     cl, 14h ;~ 01A2:C446
cs=0x1a2;eip=0x00c448; 	J(return sub_1c3e8(0, _state););	// 30625                  jmp     short sub_1C3E8 ;~ 01A2:C448

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1c43b: 	goto sub_1c43b;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1c44a(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1c44a:
    _begin:
cs=0x1a2;eip=0x00c44a; 	J(JNC(loc_1c4b4));	// 30635                  jnb     short loc_1C4B4 ;~ 01A2:C44A
loc_1c44c:
	// 6273 
cs=0x1a2;eip=0x00c44c; 	X(PUSH(ax));	// 30638                  push    ax ;~ 01A2:C44C
cs=0x1a2;eip=0x00c44d; 	X(PUSH(bx));	// 30639                  push    bx ;~ 01A2:C44D
cs=0x1a2;eip=0x00c44e; 	X(PUSH(cx));	// 30640                  push    cx ;~ 01A2:C44E
cs=0x1a2;eip=0x00c44f; 	X(PUSH(dx));	// 30641                  push    dx ;~ 01A2:C44F
cs=0x1a2;eip=0x00c450; 	X(PUSH(bp));	// 30642                  push    bp ;~ 01A2:C450
cs=0x1a2;eip=0x00c451; 	X(PUSH(si));	// 30643                  push    si ;~ 01A2:C451
cs=0x1a2;eip=0x00c452; 	X(PUSH(di));	// 30644                  push    di ;~ 01A2:C452
cs=0x1a2;eip=0x00c453; 	X(PUSH(es));	// 30645                  push    es ;~ 01A2:C453
cs=0x1a2;eip=0x00c454; 	X(PUSH(ds));	// 30646                  push    ds ;~ 01A2:C454
cs=0x1a2;eip=0x00c455; 	T(al = byte_1f878;);	// 30647                  mov     al, es:byte_1F878 ;~ 01A2:C455
cs=0x1a2;eip=0x00c459; 	T(bp = 0x190;);	// 30648                  mov     bp, 190h ;~ 01A2:C459
cs=0x1a2;eip=0x00c45c; 	T(XOR(ah, ah));	// 30649                  xor     ah, ah ;~ 01A2:C45C
cs=0x1a2;eip=0x00c45e; 	T(ADD(bp, ax));	// 30650                  add     bp, ax ;~ 01A2:C45E
cs=0x1a2;eip=0x00c460; 	T(MOV(al, *(raddr(ss,bp+0x0A))));	// 30651                  mov     al, [bp+0Ah] ;~ 01A2:C460
cs=0x1a2;eip=0x00c463; 	X(PUSH(ax));	// 30652                  push    ax ;~ 01A2:C463
cs=0x1a2;eip=0x00c464; 	T(dx = sp;);	// 30653                  mov     dx, sp ;~ 01A2:C464
cs=0x1a2;eip=0x00c466; 	X(word_1117b = 0;);	// 30654                  mov     cs:word_1117B, 0 ;~ 01A2:C466
cs=0x1a2;eip=0x00c46d; 	T(ax = 0x3D00;);	// 30655                  mov     ax, 3D00h ;~ 01A2:C46D
cs=0x1a2;eip=0x00c470; 	S(_INT(0x21));	// 30656                  int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE ;~ 01A2:C470
cs=0x1a2;eip=0x00c472; 	J(JC(loc_1c47c));	// 30660                  jb      short loc_1C47C ;~ 01A2:C472
cs=0x1a2;eip=0x00c474; 	T(CMP(word_1117b, 0));	// 30661                  cmp     cs:word_1117B, 0 ;~ 01A2:C474
cs=0x1a2;eip=0x00c47a; 	J(JZ(loc_1c4a6));	// 30662                  jz      short loc_1C4A6 ;~ 01A2:C47A
loc_1c47c:
	// 6274 
cs=0x1a2;eip=0x00c47c; 	T(al = byte_1f878;);	// 30665                  mov     al, es:byte_1F878 ;~ 01A2:C47C
cs=0x1a2;eip=0x00c480; 	T(ADD(al, al));	// 30666                  add     al, al ;~ 01A2:C480
cs=0x1a2;eip=0x00c482; 	T(bp = 0x190;);	// 30667                  mov     bp, 190h ;~ 01A2:C482
cs=0x1a2;eip=0x00c485; 	T(XOR(ah, ah));	// 30668                  xor     ah, ah ;~ 01A2:C485
cs=0x1a2;eip=0x00c487; 	T(ADD(bp, ax));	// 30669                  add     bp, ax ;~ 01A2:C487
cs=0x1a2;eip=0x00c489; 	X(PUSH(ds));	// 30670                  push    ds ;~ 01A2:C489
cs=0x1a2;eip=0x00c48a; 	T(ax = es;);	// 30671                  mov     ax, es ;~ 01A2:C48A
cs=0x1a2;eip=0x00c48c; 	T(ds = ax;);	// 30672                  mov     ds, ax ;~ 01A2:C48C
cs=0x1a2;eip=0x00c48e; 	T(MOV(ax, *(dw*)(raddr(ss,bp+0))));	// 30674                  mov     ax, [bp+0] ;~ 01A2:C48E
cs=0x1a2;eip=0x00c491; 	T(cl = 0x0D;);	// 30675                  mov     cl, 0Dh ;~ 01A2:C491
cs=0x1a2;eip=0x00c493; 	J(CALL(sub_1c3e8,0));	// 30676                  call    sub_1C3E8 ;~ 01A2:C493
cs=0x1a2;eip=0x00c496; 	J(CALL(sub_19ce8,0));	// 30677                  call    sub_19CE8 ;~ 01A2:C496
cs=0x1a2;eip=0x00c499; 	X(POP(ds));	// 30678                  pop     ds ;~ 01A2:C499
cs=0x1a2;eip=0x00c49a; 	X(POP(ax));	// 30680                  pop     ax ;~ 01A2:C49A
cs=0x1a2;eip=0x00c49b; 	X(POP(ds));	// 30681                  pop     ds ;~ 01A2:C49B
cs=0x1a2;eip=0x00c49c; 	X(POP(es));	// 30682                  pop     es ;~ 01A2:C49C
cs=0x1a2;eip=0x00c49d; 	X(POP(di));	// 30684                  pop     di ;~ 01A2:C49D
cs=0x1a2;eip=0x00c49e; 	X(POP(si));	// 30685                  pop     si ;~ 01A2:C49E
cs=0x1a2;eip=0x00c49f; 	X(POP(bp));	// 30686                  pop     bp ;~ 01A2:C49F
cs=0x1a2;eip=0x00c4a0; 	X(POP(dx));	// 30687                  pop     dx ;~ 01A2:C4A0
cs=0x1a2;eip=0x00c4a1; 	X(POP(cx));	// 30688                  pop     cx ;~ 01A2:C4A1
cs=0x1a2;eip=0x00c4a2; 	X(POP(bx));	// 30689                  pop     bx ;~ 01A2:C4A2
cs=0x1a2;eip=0x00c4a3; 	X(POP(ax));	// 30690                  pop     ax ;~ 01A2:C4A3
cs=0x1a2;eip=0x00c4a4; 	J(JMP(loc_1c44c));	// 30691                  jmp     short loc_1C44C ;~ 01A2:C4A4
loc_1c4a6:
	// 6275 
cs=0x1a2;eip=0x00c4a6; 	T(ah = 0x3E;);	// 30696                  mov     ah, 3Eh ;~ 01A2:C4A6
cs=0x1a2;eip=0x00c4a8; 	S(_INT(0x21));	// 30697                  int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE ;~ 01A2:C4A8
cs=0x1a2;eip=0x00c4aa; 	X(POP(ax));	// 30699                  pop     ax ;~ 01A2:C4AA
cs=0x1a2;eip=0x00c4ab; 	X(POP(ds));	// 30700                  pop     ds ;~ 01A2:C4AB
cs=0x1a2;eip=0x00c4ac; 	X(POP(es));	// 30701                  pop     es ;~ 01A2:C4AC
cs=0x1a2;eip=0x00c4ad; 	X(POP(di));	// 30702                  pop     di ;~ 01A2:C4AD
cs=0x1a2;eip=0x00c4ae; 	X(POP(si));	// 30703                  pop     si ;~ 01A2:C4AE
cs=0x1a2;eip=0x00c4af; 	X(POP(bp));	// 30704                  pop     bp ;~ 01A2:C4AF
cs=0x1a2;eip=0x00c4b0; 	X(POP(dx));	// 30705                  pop     dx ;~ 01A2:C4B0
cs=0x1a2;eip=0x00c4b1; 	X(POP(cx));	// 30706                  pop     cx ;~ 01A2:C4B1
cs=0x1a2;eip=0x00c4b2; 	X(POP(bx));	// 30707                  pop     bx ;~ 01A2:C4B2
cs=0x1a2;eip=0x00c4b3; 	X(POP(ax));	// 30708                  pop     ax ;~ 01A2:C4B3
loc_1c4b4:
	// 6276 
cs=0x1a2;eip=0x00c4b4; 	X(PUSH(si));	// 30711                  push    si ;~ 01A2:C4B4
cs=0x1a2;eip=0x00c4b5; 	X(word_1c8e3 = 0;);	// 30712                  mov     cs:word_1C8E3, 0 ;~ 01A2:C4B5
cs=0x1a2;eip=0x00c4bc; 	T(XOR(ah, ah));	// 30713                  xor     ah, ah ;~ 01A2:C4BC
cs=0x1a2;eip=0x00c4be; 	T(si = dx;);	// 30714                  mov     si, dx ;~ 01A2:C4BE
loc_1c4c0:
	// 6277 
cs=0x1a2;eip=0x00c4c0; 	T(LODSB);	// 30718                  lodsb ;~ 01A2:C4C0
cs=0x1a2;eip=0x00c4c1; 	T(OR(al, al));	// 30719                  or      al, al ;~ 01A2:C4C1
cs=0x1a2;eip=0x00c4c3; 	J(JZ(loc_1c4d7));	// 30720                  jz      short loc_1C4D7 ;~ 01A2:C4C3
cs=0x1a2;eip=0x00c4c5; 	T(CMP(al, 0x3F));	// 30721                  cmp     al, 3Fh ; '?' ;~ 01A2:C4C5
cs=0x1a2;eip=0x00c4c7; 	J(JNZ(loc_1c4c0));	// 30722                  jnz     short loc_1C4C0 ;~ 01A2:C4C7
cs=0x1a2;eip=0x00c4c9; 	T(INC(ah));	// 30723                  inc     ah ;~ 01A2:C4C9
cs=0x1a2;eip=0x00c4cb; 	T(al = byte_1f878;);	// 30724                  mov     al, es:byte_1F878 ;~ 01A2:C4CB
cs=0x1a2;eip=0x00c4cf; 	T(ADD(al, 0x31));	// 30725                  add     al, 31h ; '1' ;~ 01A2:C4CF
cs=0x1a2;eip=0x00c4d1; 	X(MOV(*(raddr(ds,si-1)), al));	// 30726                  mov     [si-1], al ;~ 01A2:C4D1
cs=0x1a2;eip=0x00c4d4; 	X(PUSH(si));	// 30727                  push    si ;~ 01A2:C4D4
cs=0x1a2;eip=0x00c4d5; 	J(JMP(loc_1c4c0));	// 30728                  jmp     short loc_1C4C0 ;~ 01A2:C4D5
loc_1c4d7:
	// 6278 
cs=0x1a2;eip=0x00c4d7; 	T(OR(ah, ah));	// 30732                  or      ah, ah ;~ 01A2:C4D7
cs=0x1a2;eip=0x00c4d9; 	J(JZ(loc_1c52a));	// 30733                  jz      short loc_1C52A ;~ 01A2:C4D9
cs=0x1a2;eip=0x00c4db; 	X(word_1117b = 0;);	// 30734                  mov     cs:word_1117B, 0 ;~ 01A2:C4DB
cs=0x1a2;eip=0x00c4e2; 	T(ax = 0x3D00;);	// 30735                  mov     ax, 3D00h ;~ 01A2:C4E2
cs=0x1a2;eip=0x00c4e5; 	S(_INT(0x21));	// 30736                  int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE ;~ 01A2:C4E5
cs=0x1a2;eip=0x00c4e7; 	J(JC(loc_1c51d));	// 30740                  jb      short loc_1C51D ;~ 01A2:C4E7
cs=0x1a2;eip=0x00c4e9; 	T(CMP(word_1117b, 0));	// 30741                  cmp     cs:word_1117B, 0 ;~ 01A2:C4E9
cs=0x1a2;eip=0x00c4ef; 	J(JS(loc_1c51d));	// 30742                  js      short loc_1C51D ;~ 01A2:C4EF
cs=0x1a2;eip=0x00c4f1; 	X(word_1f8ee = ax;);	// 30743                  mov     es:word_1F8EE, ax ;~ 01A2:C4F1
cs=0x1a2;eip=0x00c4f5; 	T(bx = ax;);	// 30744                  mov     bx, ax ;~ 01A2:C4F5
cs=0x1a2;eip=0x00c4f7; 	T(dx = 0x0C8F1;);	// 30745                  mov     dx, 0C8F1h ;~ 01A2:C4F7
cs=0x1a2;eip=0x00c4fa; 	X(PUSH(ds));	// 30746                  push    ds ;~ 01A2:C4FA
cs=0x1a2;eip=0x00c4fb; 	T(ax = cs;);	// 30747                  mov     ax, cs ;~ 01A2:C4FB
cs=0x1a2;eip=0x00c4fd; 	T(ds = ax;);	// 30748                  mov     ds, ax ;~ 01A2:C4FD
cs=0x1a2;eip=0x00c4ff; 	T(cx = 4;);	// 30750                  mov     cx, 4 ;~ 01A2:C4FF
cs=0x1a2;eip=0x00c502; 	T(ah = 0x3F;);	// 30751                  mov     ah, 3Fh ;~ 01A2:C502
cs=0x1a2;eip=0x00c504; 	S(_INT(0x21));	// 30752                  int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE ;~ 01A2:C504
cs=0x1a2;eip=0x00c506; 	X(POP(ds));	// 30755                  pop     ds ;~ 01A2:C506
cs=0x1a2;eip=0x00c507; 	J(JC(loc_1c51d));	// 30757                  jb      short loc_1C51D ;~ 01A2:C507
cs=0x1a2;eip=0x00c509; 	T(CMP(word_1117b, 0));	// 30758                  cmp     cs:word_1117B, 0 ;~ 01A2:C509
cs=0x1a2;eip=0x00c50f; 	J(JS(loc_1c51d));	// 30759                  js      short loc_1C51D ;~ 01A2:C50F
cs=0x1a2;eip=0x00c511; 	X(POP(si));	// 30760                  pop     si ;~ 01A2:C511
cs=0x1a2;eip=0x00c512; 	X(MOV(*(raddr(ds,si-1)), 0x3F));	// 30761                  mov     byte ptr [si-1], 3Fh ; '?' ;~ 01A2:C512
cs=0x1a2;eip=0x00c516; 	X(POP(si));	// 30762                  pop     si ;~ 01A2:C516
cs=0x1a2;eip=0x00c517; 	X(MOV(*(raddr(ds,si-1)), 0x3F));	// 30763                  mov     byte ptr [si-1], 3Fh ; '?' ;~ 01A2:C517
cs=0x1a2;eip=0x00c51b; 	X(POP(si));	// 30764                  pop     si ;~ 01A2:C51B
cs=0x1a2;eip=0x00c51c; 	J(RETN(0));	// 30765                  retn ;~ 01A2:C51C
loc_1c51d:
	// 6279 
cs=0x1a2;eip=0x00c51d; 	X(POP(si));	// 30770                  pop     si ;~ 01A2:C51D
cs=0x1a2;eip=0x00c51e; 	X(MOV(*(raddr(ds,si-1)), 0x3F));	// 30771                  mov     byte ptr [si-1], 3Fh ; '?' ;~ 01A2:C51E
cs=0x1a2;eip=0x00c522; 	X(POP(si));	// 30772                  pop     si ;~ 01A2:C522
cs=0x1a2;eip=0x00c523; 	X(MOV(*(raddr(ds,si-1)), 0x3F));	// 30773                  mov     byte ptr [si-1], 3Fh ; '?' ;~ 01A2:C523
cs=0x1a2;eip=0x00c527; 	X(POP(si));	// 30774                  pop     si ;~ 01A2:C527
cs=0x1a2;eip=0x00c528; 	T(STC);	// 30775                  stc ;~ 01A2:C528
cs=0x1a2;eip=0x00c529; 	J(RETN(0));	// 30776                  retn ;~ 01A2:C529
loc_1c52a:
	// 6280 
cs=0x1a2;eip=0x00c52a; 	X(word_1117b = 0;);	// 30780                  mov     cs:word_1117B, 0 ;~ 01A2:C52A
cs=0x1a2;eip=0x00c531; 	T(ax = 0x3D00;);	// 30781                  mov     ax, 3D00h ;~ 01A2:C531
cs=0x1a2;eip=0x00c534; 	S(_INT(0x21));	// 30782                  int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE ;~ 01A2:C534
cs=0x1a2;eip=0x00c536; 	J(JC(loc_1c563));	// 30786                  jb      short loc_1C563 ;~ 01A2:C536
cs=0x1a2;eip=0x00c538; 	T(CMP(word_1117b, 0));	// 30787                  cmp     cs:word_1117B, 0 ;~ 01A2:C538
cs=0x1a2;eip=0x00c53e; 	J(JS(loc_1c563));	// 30788                  js      short loc_1C563 ;~ 01A2:C53E
cs=0x1a2;eip=0x00c540; 	X(word_1f8ee = ax;);	// 30789                  mov     es:word_1F8EE, ax ;~ 01A2:C540
cs=0x1a2;eip=0x00c544; 	T(bx = ax;);	// 30790                  mov     bx, ax ;~ 01A2:C544
cs=0x1a2;eip=0x00c546; 	T(dx = 0x0C8F1;);	// 30791                  mov     dx, 0C8F1h ;~ 01A2:C546
cs=0x1a2;eip=0x00c549; 	X(PUSH(ds));	// 30792                  push    ds ;~ 01A2:C549
cs=0x1a2;eip=0x00c54a; 	T(ax = cs;);	// 30793                  mov     ax, cs ;~ 01A2:C54A
cs=0x1a2;eip=0x00c54c; 	T(ds = ax;);	// 30794                  mov     ds, ax ;~ 01A2:C54C
cs=0x1a2;eip=0x00c54e; 	T(cx = 4;);	// 30796                  mov     cx, 4 ;~ 01A2:C54E
cs=0x1a2;eip=0x00c551; 	T(ah = 0x3F;);	// 30797                  mov     ah, 3Fh ;~ 01A2:C551
cs=0x1a2;eip=0x00c553; 	S(_INT(0x21));	// 30798                  int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE ;~ 01A2:C553
cs=0x1a2;eip=0x00c555; 	X(POP(ds));	// 30801                  pop     ds ;~ 01A2:C555
cs=0x1a2;eip=0x00c556; 	J(JC(loc_1c563));	// 30803                  jb      short loc_1C563 ;~ 01A2:C556
cs=0x1a2;eip=0x00c558; 	T(CMP(word_1117b, 0));	// 30804                  cmp     cs:word_1117B, 0 ;~ 01A2:C558
cs=0x1a2;eip=0x00c55e; 	J(JS(loc_1c563));	// 30805                  js      short loc_1C563 ;~ 01A2:C55E
cs=0x1a2;eip=0x00c560; 	X(POP(si));	// 30806                  pop     si ;~ 01A2:C560
cs=0x1a2;eip=0x00c561; 	T(CLC);	// 30807                  clc ;~ 01A2:C561
cs=0x1a2;eip=0x00c562; 	J(RETN(0));	// 30808                  retn ;~ 01A2:C562
loc_1c563:
	// 6281 
cs=0x1a2;eip=0x00c563; 	X(POP(si));	// 30813                  pop     si ;~ 01A2:C563
cs=0x1a2;eip=0x00c564; 	T(STC);	// 30814                  stc ;~ 01A2:C564
cs=0x1a2;eip=0x00c565; 	J(RETN(0));	// 30815                  retn ;~ 01A2:C565

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1c44c: 	goto loc_1c44c;
        case m2c::kloc_1c47c: 	goto loc_1c47c;
        case m2c::kloc_1c4a6: 	goto loc_1c4a6;
        case m2c::kloc_1c4b4: 	goto loc_1c4b4;
        case m2c::kloc_1c4c0: 	goto loc_1c4c0;
        case m2c::kloc_1c4d7: 	goto loc_1c4d7;
        case m2c::kloc_1c51d: 	goto loc_1c51d;
        case m2c::kloc_1c52a: 	goto loc_1c52a;
        case m2c::kloc_1c563: 	goto loc_1c563;
        case m2c::ksub_1c44a: 	goto sub_1c44a;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1c566(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1c566:
    _begin:
cs=0x1a2;eip=0x00c566; 	T(CMP(byte_2ea25, 0));	// 30825                  cmp     ds:byte_2EA25, 0 ;~ 01A2:C566
cs=0x1a2;eip=0x00c56b; 	J(JZ(loc_1c5ac));	// 30826                  jz      short loc_1C5AC ;~ 01A2:C56B
cs=0x1a2;eip=0x00c56d; 	J(CALL(sub_1c77c,0));	// 30827                  call    sub_1C77C ;~ 01A2:C56D
cs=0x1a2;eip=0x00c570; 	X(PUSH(ax));	// 30828                  push    ax ;~ 01A2:C570
cs=0x1a2;eip=0x00c571; 	T(LAHF);	// 30829                  lahf ;~ 01A2:C571
cs=0x1a2;eip=0x00c572; 	T(CMP(byte_2ea25, 0));	// 30830                  cmp     ds:byte_2EA25, 0 ;~ 01A2:C572
cs=0x1a2;eip=0x00c577; 	J(JS(loc_1c5a9));	// 30831                  js      short loc_1C5A9 ;~ 01A2:C577
cs=0x1a2;eip=0x00c579; 	X(PUSH(ax));	// 30832                  push    ax ;~ 01A2:C579
cs=0x1a2;eip=0x00c57a; 	X(PUSH(bx));	// 30833                  push    bx ;~ 01A2:C57A
cs=0x1a2;eip=0x00c57b; 	X(PUSH(cx));	// 30834                  push    cx ;~ 01A2:C57B
cs=0x1a2;eip=0x00c57c; 	X(PUSH(dx));	// 30835                  push    dx ;~ 01A2:C57C
cs=0x1a2;eip=0x00c57d; 	X(PUSH(bp));	// 30836                  push    bp ;~ 01A2:C57D
cs=0x1a2;eip=0x00c57e; 	X(PUSH(si));	// 30837                  push    si ;~ 01A2:C57E
cs=0x1a2;eip=0x00c57f; 	X(PUSH(di));	// 30838                  push    di ;~ 01A2:C57F
cs=0x1a2;eip=0x00c580; 	X(PUSH(es));	// 30839                  push    es ;~ 01A2:C580
cs=0x1a2;eip=0x00c581; 	X(PUSH(ds));	// 30840                  push    ds ;~ 01A2:C581
cs=0x1a2;eip=0x00c582; 	X(byte_2ea28 = ah;);	// 30841                  mov     ds:byte_2EA28, ah ;~ 01A2:C582
cs=0x1a2;eip=0x00c586; 	T(dx = 0x0F8B8;);	// 30842                  mov     dx, 0F8B8h ;~ 01A2:C586
cs=0x1a2;eip=0x00c589; 	T(bx = *(dw*)(&byte_2ea26););	// 30843                  mov     bx, word ptr ds:byte_2EA26 ;~ 01A2:C589
cs=0x1a2;eip=0x00c58d; 	T(cx = 1;);	// 30844                  mov     cx, 1 ;~ 01A2:C58D
cs=0x1a2;eip=0x00c590; 	X(word_1117b = 0;);	// 30845                  mov     cs:word_1117B, 0 ;~ 01A2:C590
cs=0x1a2;eip=0x00c597; 	X(ADD(*(dw*)(&unk_6fb90), cx));	// 30846                  add     word ptr ss:unk_6FB90, cx ;~ 01A2:C597
cs=0x1a2;eip=0x00c59c; 	T(ah = 0x40;);	// 30847                  mov     ah, 40h ;~ 01A2:C59C
cs=0x1a2;eip=0x00c59e; 	S(_INT(0x21));	// 30848                  int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE ;~ 01A2:C59E
cs=0x1a2;eip=0x00c5a0; 	X(POP(ds));	// 30850                  pop     ds ;~ 01A2:C5A0
cs=0x1a2;eip=0x00c5a1; 	X(POP(es));	// 30852                  pop     es ;~ 01A2:C5A1
cs=0x1a2;eip=0x00c5a2; 	X(POP(di));	// 30854                  pop     di ;~ 01A2:C5A2
cs=0x1a2;eip=0x00c5a3; 	X(POP(si));	// 30855                  pop     si ;~ 01A2:C5A3
cs=0x1a2;eip=0x00c5a4; 	X(POP(bp));	// 30856                  pop     bp ;~ 01A2:C5A4
cs=0x1a2;eip=0x00c5a5; 	X(POP(dx));	// 30857                  pop     dx ;~ 01A2:C5A5
cs=0x1a2;eip=0x00c5a6; 	X(POP(cx));	// 30858                  pop     cx ;~ 01A2:C5A6
cs=0x1a2;eip=0x00c5a7; 	X(POP(bx));	// 30859                  pop     bx ;~ 01A2:C5A7
cs=0x1a2;eip=0x00c5a8; 	X(POP(ax));	// 30860                  pop     ax ;~ 01A2:C5A8
loc_1c5a9:
	// 6282 
cs=0x1a2;eip=0x00c5a9; 	T(SAHF);	// 30864                  sahf ;~ 01A2:C5A9
cs=0x1a2;eip=0x00c5aa; 	X(POP(ax));	// 30865                  pop     ax ;~ 01A2:C5AA
cs=0x1a2;eip=0x00c5ab; 	J(RETN(0));	// 30866                  retn ;~ 01A2:C5AB
loc_1c5ac:
	// 6283 
cs=0x1a2;eip=0x00c5ac; 	X(PUSH(ax));	// 30870                  push    ax ;~ 01A2:C5AC
cs=0x1a2;eip=0x00c5ad; 	X(PUSH(ax));	// 30871                  push    ax ;~ 01A2:C5AD
cs=0x1a2;eip=0x00c5ae; 	X(PUSH(bx));	// 30872                  push    bx ;~ 01A2:C5AE
cs=0x1a2;eip=0x00c5af; 	X(PUSH(cx));	// 30873                  push    cx ;~ 01A2:C5AF
cs=0x1a2;eip=0x00c5b0; 	X(PUSH(dx));	// 30874                  push    dx ;~ 01A2:C5B0
cs=0x1a2;eip=0x00c5b1; 	X(PUSH(bp));	// 30875                  push    bp ;~ 01A2:C5B1
cs=0x1a2;eip=0x00c5b2; 	X(PUSH(si));	// 30876                  push    si ;~ 01A2:C5B2
cs=0x1a2;eip=0x00c5b3; 	X(PUSH(di));	// 30877                  push    di ;~ 01A2:C5B3
cs=0x1a2;eip=0x00c5b4; 	X(PUSH(es));	// 30878                  push    es ;~ 01A2:C5B4
cs=0x1a2;eip=0x00c5b5; 	X(PUSH(ds));	// 30879                  push    ds ;~ 01A2:C5B5
cs=0x1a2;eip=0x00c5b6; 	T(dx = 0x0F8B8;);	// 30880                  mov     dx, 0F8B8h ;~ 01A2:C5B6
cs=0x1a2;eip=0x00c5b9; 	T(bx = *(dw*)(&byte_2ea26););	// 30881                  mov     bx, word ptr ds:byte_2EA26 ;~ 01A2:C5B9
cs=0x1a2;eip=0x00c5bd; 	T(cx = 1;);	// 30882                  mov     cx, 1 ;~ 01A2:C5BD
cs=0x1a2;eip=0x00c5c0; 	J(CALL(sub_1c7d1,0));	// 30883                  call    near ptr sub_1C7D1 ;~ 01A2:C5C0
cs=0x1a2;eip=0x00c5c3; 	T(OR(ax, ax));	// 30884                  or      ax, ax ;~ 01A2:C5C3
cs=0x1a2;eip=0x00c5c5; 	X(POP(ds));	// 30885                  pop     ds ;~ 01A2:C5C5
cs=0x1a2;eip=0x00c5c6; 	X(POP(es));	// 30887                  pop     es ;~ 01A2:C5C6
cs=0x1a2;eip=0x00c5c7; 	X(POP(di));	// 30888                  pop     di ;~ 01A2:C5C7
cs=0x1a2;eip=0x00c5c8; 	X(POP(si));	// 30889                  pop     si ;~ 01A2:C5C8
cs=0x1a2;eip=0x00c5c9; 	X(POP(bp));	// 30890                  pop     bp ;~ 01A2:C5C9
cs=0x1a2;eip=0x00c5ca; 	X(POP(dx));	// 30891                  pop     dx ;~ 01A2:C5CA
cs=0x1a2;eip=0x00c5cb; 	X(POP(cx));	// 30892                  pop     cx ;~ 01A2:C5CB
cs=0x1a2;eip=0x00c5cc; 	X(POP(bx));	// 30893                  pop     bx ;~ 01A2:C5CC
cs=0x1a2;eip=0x00c5cd; 	X(POP(ax));	// 30894                  pop     ax ;~ 01A2:C5CD
cs=0x1a2;eip=0x00c5ce; 	J(JNZ(loc_1c5d6));	// 30895                  jnz     short loc_1C5D6 ;~ 01A2:C5CE
cs=0x1a2;eip=0x00c5d0; 	X(POP(ax));	// 30896                  pop     ax ;~ 01A2:C5D0
cs=0x1a2;eip=0x00c5d1; 	J(CALL(sub_1c75a,0));	// 30897                  call    sub_1C75A ;~ 01A2:C5D1
cs=0x1a2;eip=0x00c5d4; 	J(JMP(sub_1c566));	// 30898                  jmp     short sub_1C566 ;~ 01A2:C5D4
loc_1c5d6:
	// 6284 
cs=0x1a2;eip=0x00c5d6; 	T(MOV(ah, *(raddr(ds,0x0F8B8))));	// 30902                  mov     ah, ds:0F8B8h ;~ 01A2:C5D6
cs=0x1a2;eip=0x00c5da; 	T(SAHF);	// 30903                  sahf ;~ 01A2:C5DA
cs=0x1a2;eip=0x00c5db; 	X(POP(ax));	// 30904                  pop     ax ;~ 01A2:C5DB
cs=0x1a2;eip=0x00c5dc; 	J(RETN(0));	// 30905                  retn ;~ 01A2:C5DC

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1c5a9: 	goto loc_1c5a9;
        case m2c::kloc_1c5ac: 	goto loc_1c5ac;
        case m2c::kloc_1c5d6: 	goto loc_1c5d6;
        case m2c::ksub_1c566: 	goto sub_1c566;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1c5dd(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1c5dd:
    _begin:
cs=0x1a2;eip=0x00c5dd; 	T(CMP(byte_2ea25, 0));	// 30915                  cmp     ds:byte_2EA25, 0 ;~ 01A2:C5DD
cs=0x1a2;eip=0x00c5e2; 	J(JZ(loc_1c62c));	// 30916                  jz      short loc_1C62C ;~ 01A2:C5E2
cs=0x1a2;eip=0x00c5e4; 	J(CALL(sub_1c7ad,0));	// 30917                  call    sub_1C7AD ;~ 01A2:C5E4
cs=0x1a2;eip=0x00c5e7; 	T(CMP(al, 0x2B));	// 30918                  cmp     al, 2Bh ; '+' ;~ 01A2:C5E7
cs=0x1a2;eip=0x00c5e9; 	J(JNZ(loc_1c5ee));	// 30919                  jnz     short loc_1C5EE ;~ 01A2:C5E9
cs=0x1a2;eip=0x00c5eb; 	J(return sub_1c75a(0, _state););	// 30920                  jmp     sub_1C75A ;~ 01A2:C5EB
loc_1c5ee:
	// 6285 
cs=0x1a2;eip=0x00c5ee; 	T(CMP(al, 0x58));	// 30924                  cmp     al, 58h ; 'X' ;~ 01A2:C5EE
cs=0x1a2;eip=0x00c5f0; 	J(JNZ(loc_1c5f5));	// 30925                  jnz     short loc_1C5F5 ;~ 01A2:C5F0
cs=0x1a2;eip=0x00c5f2; 	J(return _group21(m2c::kloc_18206, _state););	// 30926                  jmp     loc_18206 ;~ 01A2:C5F2
loc_1c5f5:
	// 6286 
cs=0x1a2;eip=0x00c5f5; 	T(CMP(byte_2ea25, 0));	// 30930                  cmp     ds:byte_2EA25, 0 ;~ 01A2:C5F5
cs=0x1a2;eip=0x00c5fa; 	J(JS(locret_1c62b));	// 30931                  js      short locret_1C62B ;~ 01A2:C5FA
cs=0x1a2;eip=0x00c5fc; 	X(PUSH(ax));	// 30932                  push    ax ;~ 01A2:C5FC
cs=0x1a2;eip=0x00c5fd; 	X(PUSH(bx));	// 30933                  push    bx ;~ 01A2:C5FD
cs=0x1a2;eip=0x00c5fe; 	X(PUSH(cx));	// 30934                  push    cx ;~ 01A2:C5FE
cs=0x1a2;eip=0x00c5ff; 	X(PUSH(dx));	// 30935                  push    dx ;~ 01A2:C5FF
cs=0x1a2;eip=0x00c600; 	X(PUSH(bp));	// 30936                  push    bp ;~ 01A2:C600
cs=0x1a2;eip=0x00c601; 	X(PUSH(si));	// 30937                  push    si ;~ 01A2:C601
cs=0x1a2;eip=0x00c602; 	X(PUSH(di));	// 30938                  push    di ;~ 01A2:C602
cs=0x1a2;eip=0x00c603; 	X(PUSH(es));	// 30939                  push    es ;~ 01A2:C603
cs=0x1a2;eip=0x00c604; 	X(PUSH(ds));	// 30940                  push    ds ;~ 01A2:C604
cs=0x1a2;eip=0x00c605; 	X(byte_2ea28 = al;);	// 30941                  mov     ds:byte_2EA28, al ;~ 01A2:C605
cs=0x1a2;eip=0x00c608; 	T(dx = 0x0F8B8;);	// 30942                  mov     dx, 0F8B8h ;~ 01A2:C608
cs=0x1a2;eip=0x00c60b; 	T(bx = *(dw*)(&byte_2ea26););	// 30943                  mov     bx, word ptr ds:byte_2EA26 ;~ 01A2:C60B
cs=0x1a2;eip=0x00c60f; 	T(cx = 1;);	// 30944                  mov     cx, 1 ;~ 01A2:C60F
cs=0x1a2;eip=0x00c612; 	X(word_1117b = 0;);	// 30945                  mov     cs:word_1117B, 0 ;~ 01A2:C612
cs=0x1a2;eip=0x00c619; 	X(ADD(*(dw*)(&unk_6fb90), cx));	// 30946                  add     word ptr ss:unk_6FB90, cx ;~ 01A2:C619
cs=0x1a2;eip=0x00c61e; 	T(ah = 0x40;);	// 30947                  mov     ah, 40h ;~ 01A2:C61E
cs=0x1a2;eip=0x00c620; 	S(_INT(0x21));	// 30948                  int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE ;~ 01A2:C620
cs=0x1a2;eip=0x00c622; 	X(POP(ds));	// 30950                  pop     ds ;~ 01A2:C622
cs=0x1a2;eip=0x00c623; 	X(POP(es));	// 30952                  pop     es ;~ 01A2:C623
cs=0x1a2;eip=0x00c624; 	X(POP(di));	// 30953                  pop     di ;~ 01A2:C624
cs=0x1a2;eip=0x00c625; 	X(POP(si));	// 30954                  pop     si ;~ 01A2:C625
cs=0x1a2;eip=0x00c626; 	X(POP(bp));	// 30955                  pop     bp ;~ 01A2:C626
cs=0x1a2;eip=0x00c627; 	X(POP(dx));	// 30956                  pop     dx ;~ 01A2:C627
cs=0x1a2;eip=0x00c628; 	X(POP(cx));	// 30957                  pop     cx ;~ 01A2:C628
cs=0x1a2;eip=0x00c629; 	X(POP(bx));	// 30958                  pop     bx ;~ 01A2:C629
cs=0x1a2;eip=0x00c62a; 	X(POP(ax));	// 30959                  pop     ax ;~ 01A2:C62A
locret_1c62b:
	// 6287 
cs=0x1a2;eip=0x00c62b; 	J(RETN(0));	// 30963                  retn ;~ 01A2:C62B
loc_1c62c:
	// 6288 
cs=0x1a2;eip=0x00c62c; 	X(PUSH(ax));	// 30967                  push    ax ;~ 01A2:C62C
cs=0x1a2;eip=0x00c62d; 	X(PUSH(bx));	// 30968                  push    bx ;~ 01A2:C62D
cs=0x1a2;eip=0x00c62e; 	X(PUSH(cx));	// 30969                  push    cx ;~ 01A2:C62E
cs=0x1a2;eip=0x00c62f; 	X(PUSH(dx));	// 30970                  push    dx ;~ 01A2:C62F
cs=0x1a2;eip=0x00c630; 	X(PUSH(bp));	// 30971                  push    bp ;~ 01A2:C630
cs=0x1a2;eip=0x00c631; 	X(PUSH(si));	// 30972                  push    si ;~ 01A2:C631
cs=0x1a2;eip=0x00c632; 	X(PUSH(di));	// 30973                  push    di ;~ 01A2:C632
cs=0x1a2;eip=0x00c633; 	X(PUSH(es));	// 30974                  push    es ;~ 01A2:C633
cs=0x1a2;eip=0x00c634; 	X(PUSH(ds));	// 30975                  push    ds ;~ 01A2:C634
cs=0x1a2;eip=0x00c635; 	T(dx = 0x0F8B8;);	// 30976                  mov     dx, 0F8B8h ;~ 01A2:C635
cs=0x1a2;eip=0x00c638; 	T(bx = *(dw*)(&byte_2ea26););	// 30977                  mov     bx, word ptr ds:byte_2EA26 ;~ 01A2:C638
cs=0x1a2;eip=0x00c63c; 	T(cx = 1;);	// 30978                  mov     cx, 1 ;~ 01A2:C63C
cs=0x1a2;eip=0x00c63f; 	J(CALL(sub_1c7d1,0));	// 30979                  call    near ptr sub_1C7D1 ;~ 01A2:C63F
cs=0x1a2;eip=0x00c642; 	T(OR(ax, ax));	// 30980                  or      ax, ax ;~ 01A2:C642
cs=0x1a2;eip=0x00c644; 	X(POP(ds));	// 30981                  pop     ds ;~ 01A2:C644
cs=0x1a2;eip=0x00c645; 	X(POP(es));	// 30983                  pop     es ;~ 01A2:C645
cs=0x1a2;eip=0x00c646; 	X(POP(di));	// 30984                  pop     di ;~ 01A2:C646
cs=0x1a2;eip=0x00c647; 	X(POP(si));	// 30985                  pop     si ;~ 01A2:C647
cs=0x1a2;eip=0x00c648; 	X(POP(bp));	// 30986                  pop     bp ;~ 01A2:C648
cs=0x1a2;eip=0x00c649; 	X(POP(dx));	// 30987                  pop     dx ;~ 01A2:C649
cs=0x1a2;eip=0x00c64a; 	X(POP(cx));	// 30988                  pop     cx ;~ 01A2:C64A
cs=0x1a2;eip=0x00c64b; 	X(POP(bx));	// 30989                  pop     bx ;~ 01A2:C64B
cs=0x1a2;eip=0x00c64c; 	X(POP(ax));	// 30990                  pop     ax ;~ 01A2:C64C
cs=0x1a2;eip=0x00c64d; 	J(JNZ(loc_1c654));	// 30991                  jnz     short loc_1C654 ;~ 01A2:C64D
cs=0x1a2;eip=0x00c64f; 	J(CALL(sub_1c75a,0));	// 30992                  call    sub_1C75A ;~ 01A2:C64F
cs=0x1a2;eip=0x00c652; 	T(al = 0x5C;);	// 30993                  mov     al, 5Ch ; '\' ;~ 01A2:C652
loc_1c654:
	// 6289 
cs=0x1a2;eip=0x00c654; 	T(MOV(al, *(raddr(ds,0x0F8B8))));	// 30996                  mov     al, ds:0F8B8h ;~ 01A2:C654
cs=0x1a2;eip=0x00c657; 	J(RETN(0));	// 30997                  retn ;~ 01A2:C657

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1c5ee: 	goto loc_1c5ee;
        case m2c::kloc_1c5f5: 	goto loc_1c5f5;
        case m2c::kloc_1c62c: 	goto loc_1c62c;
        case m2c::kloc_1c654: 	goto loc_1c654;
        case m2c::klocret_1c62b: 	goto locret_1c62b;
        case m2c::ksub_1c5dd: 	goto sub_1c5dd;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1c658(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1c658:
    _begin:
cs=0x1a2;eip=0x00c658; 	T(CMP(byte_2ea25, 0));	// 31006                  cmp     ds:byte_2EA25, 0 ;~ 01A2:C658
cs=0x1a2;eip=0x00c65d; 	J(JZ(loc_1c698));	// 31007                  jz      short loc_1C698 ;~ 01A2:C65D
cs=0x1a2;eip=0x00c65f; 	T(CMP(byte_2ea25, 0));	// 31008                  cmp     ds:byte_2EA25, 0 ;~ 01A2:C65F
cs=0x1a2;eip=0x00c664; 	J(JS(locret_1c697));	// 31009                  js      short locret_1C697 ;~ 01A2:C664
cs=0x1a2;eip=0x00c666; 	X(PUSH(ax));	// 31010                  push    ax ;~ 01A2:C666
cs=0x1a2;eip=0x00c667; 	X(PUSH(bx));	// 31011                  push    bx ;~ 01A2:C667
cs=0x1a2;eip=0x00c668; 	X(PUSH(cx));	// 31012                  push    cx ;~ 01A2:C668
cs=0x1a2;eip=0x00c669; 	X(PUSH(dx));	// 31013                  push    dx ;~ 01A2:C669
cs=0x1a2;eip=0x00c66a; 	X(PUSH(bp));	// 31014                  push    bp ;~ 01A2:C66A
cs=0x1a2;eip=0x00c66b; 	X(PUSH(si));	// 31015                  push    si ;~ 01A2:C66B
cs=0x1a2;eip=0x00c66c; 	X(PUSH(di));	// 31016                  push    di ;~ 01A2:C66C
cs=0x1a2;eip=0x00c66d; 	X(PUSH(es));	// 31017                  push    es ;~ 01A2:C66D
cs=0x1a2;eip=0x00c66e; 	X(PUSH(ds));	// 31018                  push    ds ;~ 01A2:C66E
cs=0x1a2;eip=0x00c66f; 	T(ah = dl;);	// 31019                  mov     ah, dl ;~ 01A2:C66F
cs=0x1a2;eip=0x00c671; 	X(*(dw*)(&byte_2ea28) = ax;);	// 31020                  mov     word ptr ds:byte_2EA28, ax ;~ 01A2:C671
cs=0x1a2;eip=0x00c674; 	T(dx = 0x0F8B8;);	// 31021                  mov     dx, 0F8B8h ;~ 01A2:C674
cs=0x1a2;eip=0x00c677; 	T(bx = *(dw*)(&byte_2ea26););	// 31022                  mov     bx, word ptr ds:byte_2EA26 ;~ 01A2:C677
cs=0x1a2;eip=0x00c67b; 	T(cx = 2;);	// 31023                  mov     cx, 2 ;~ 01A2:C67B
cs=0x1a2;eip=0x00c67e; 	X(word_1117b = 0;);	// 31024                  mov     cs:word_1117B, 0 ;~ 01A2:C67E
cs=0x1a2;eip=0x00c685; 	X(ADD(*(dw*)(&unk_6fb90), cx));	// 31025                  add     word ptr ss:unk_6FB90, cx ;~ 01A2:C685
cs=0x1a2;eip=0x00c68a; 	T(ah = 0x40;);	// 31026                  mov     ah, 40h ;~ 01A2:C68A
cs=0x1a2;eip=0x00c68c; 	S(_INT(0x21));	// 31027                  int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE ;~ 01A2:C68C
cs=0x1a2;eip=0x00c68e; 	X(POP(ds));	// 31029                  pop     ds ;~ 01A2:C68E
cs=0x1a2;eip=0x00c68f; 	X(POP(es));	// 31031                  pop     es ;~ 01A2:C68F
cs=0x1a2;eip=0x00c690; 	X(POP(di));	// 31032                  pop     di ;~ 01A2:C690
cs=0x1a2;eip=0x00c691; 	X(POP(si));	// 31033                  pop     si ;~ 01A2:C691
cs=0x1a2;eip=0x00c692; 	X(POP(bp));	// 31034                  pop     bp ;~ 01A2:C692
cs=0x1a2;eip=0x00c693; 	X(POP(dx));	// 31035                  pop     dx ;~ 01A2:C693
cs=0x1a2;eip=0x00c694; 	X(POP(cx));	// 31036                  pop     cx ;~ 01A2:C694
cs=0x1a2;eip=0x00c695; 	X(POP(bx));	// 31037                  pop     bx ;~ 01A2:C695
cs=0x1a2;eip=0x00c696; 	X(POP(ax));	// 31038                  pop     ax ;~ 01A2:C696
locret_1c697:
	// 6290 
cs=0x1a2;eip=0x00c697; 	J(RETN(0));	// 31042                  retn ;~ 01A2:C697
loc_1c698:
	// 6291 
cs=0x1a2;eip=0x00c698; 	J(CALL(sub_1c77c,0));	// 31046                  call    sub_1C77C ;~ 01A2:C698
cs=0x1a2;eip=0x00c69b; 	J(JNZ(loc_1c6ae));	// 31047                  jnz     short loc_1C6AE ;~ 01A2:C69B
cs=0x1a2;eip=0x00c69d; 	J(CALL(sub_1c7ad,0));	// 31048                  call    sub_1C7AD ;~ 01A2:C69D
cs=0x1a2;eip=0x00c6a0; 	T(CMP(al, 0x71));	// 31049                  cmp     al, 71h ; 'q' ;~ 01A2:C6A0
cs=0x1a2;eip=0x00c6a2; 	J(JZ(loc_1c6a8));	// 31050                  jz      short loc_1C6A8 ;~ 01A2:C6A2
cs=0x1a2;eip=0x00c6a4; 	T(CMP(al, 0x51));	// 31051                  cmp     al, 51h ; 'Q' ;~ 01A2:C6A4
cs=0x1a2;eip=0x00c6a6; 	J(JNZ(loc_1c6ae));	// 31052                  jnz     short loc_1C6AE ;~ 01A2:C6A6
loc_1c6a8:
	// 6292 
cs=0x1a2;eip=0x00c6a8; 	J(CALL(sub_1c75a,0));	// 31055                  call    sub_1C75A ;~ 01A2:C6A8
cs=0x1a2;eip=0x00c6ab; 	J(return _group21(m2c::kloc_18206, _state););	// 31056                  jmp     loc_18206 ;~ 01A2:C6AB
loc_1c6ae:
	// 6293 
cs=0x1a2;eip=0x00c6ae; 	X(PUSH(ax));	// 31061                  push    ax ;~ 01A2:C6AE
cs=0x1a2;eip=0x00c6af; 	X(PUSH(bx));	// 31062                  push    bx ;~ 01A2:C6AF
cs=0x1a2;eip=0x00c6b0; 	X(PUSH(cx));	// 31063                  push    cx ;~ 01A2:C6B0
cs=0x1a2;eip=0x00c6b1; 	X(PUSH(dx));	// 31064                  push    dx ;~ 01A2:C6B1
cs=0x1a2;eip=0x00c6b2; 	X(PUSH(bp));	// 31065                  push    bp ;~ 01A2:C6B2
cs=0x1a2;eip=0x00c6b3; 	X(PUSH(si));	// 31066                  push    si ;~ 01A2:C6B3
cs=0x1a2;eip=0x00c6b4; 	X(PUSH(di));	// 31067                  push    di ;~ 01A2:C6B4
cs=0x1a2;eip=0x00c6b5; 	X(PUSH(es));	// 31068                  push    es ;~ 01A2:C6B5
cs=0x1a2;eip=0x00c6b6; 	X(PUSH(ds));	// 31069                  push    ds ;~ 01A2:C6B6
cs=0x1a2;eip=0x00c6b7; 	T(dx = 0x0F8B8;);	// 31070                  mov     dx, 0F8B8h ;~ 01A2:C6B7
cs=0x1a2;eip=0x00c6ba; 	T(bx = *(dw*)(&byte_2ea26););	// 31071                  mov     bx, word ptr ds:byte_2EA26 ;~ 01A2:C6BA
cs=0x1a2;eip=0x00c6be; 	T(cx = 2;);	// 31072                  mov     cx, 2 ;~ 01A2:C6BE
cs=0x1a2;eip=0x00c6c1; 	J(CALL(sub_1c7d1,0));	// 31073                  call    near ptr sub_1C7D1 ;~ 01A2:C6C1
cs=0x1a2;eip=0x00c6c4; 	T(OR(ax, ax));	// 31074                  or      ax, ax ;~ 01A2:C6C4
cs=0x1a2;eip=0x00c6c6; 	X(POP(ds));	// 31075                  pop     ds ;~ 01A2:C6C6
cs=0x1a2;eip=0x00c6c7; 	X(POP(es));	// 31077                  pop     es ;~ 01A2:C6C7
cs=0x1a2;eip=0x00c6c8; 	X(POP(di));	// 31078                  pop     di ;~ 01A2:C6C8
cs=0x1a2;eip=0x00c6c9; 	X(POP(si));	// 31079                  pop     si ;~ 01A2:C6C9
cs=0x1a2;eip=0x00c6ca; 	X(POP(bp));	// 31080                  pop     bp ;~ 01A2:C6CA
cs=0x1a2;eip=0x00c6cb; 	X(POP(dx));	// 31081                  pop     dx ;~ 01A2:C6CB
cs=0x1a2;eip=0x00c6cc; 	X(POP(cx));	// 31082                  pop     cx ;~ 01A2:C6CC
cs=0x1a2;eip=0x00c6cd; 	X(POP(bx));	// 31083                  pop     bx ;~ 01A2:C6CD
cs=0x1a2;eip=0x00c6ce; 	X(POP(ax));	// 31084                  pop     ax ;~ 01A2:C6CE
cs=0x1a2;eip=0x00c6cf; 	J(JNZ(loc_1c6da));	// 31085                  jnz     short loc_1C6DA ;~ 01A2:C6CF
cs=0x1a2;eip=0x00c6d1; 	J(CALL(sub_1c75a,0));	// 31086                  call    sub_1C75A ;~ 01A2:C6D1
cs=0x1a2;eip=0x00c6d4; 	X(MOV(*(dw*)(raddr(ds,0x0F8B8)), 0));	// 31087                  mov     word ptr ds:0F8B8h, 0 ;~ 01A2:C6D4
loc_1c6da:
	// 6294 
cs=0x1a2;eip=0x00c6da; 	T(MOV(ax, *(dw*)(raddr(ds,0x0F8B8))));	// 31090                  mov     ax, ds:0F8B8h ;~ 01A2:C6DA
cs=0x1a2;eip=0x00c6dd; 	X(MOV(*(raddr(ds,0x715)), ah));	// 31091                  mov     ds:715h, ah ;~ 01A2:C6DD
cs=0x1a2;eip=0x00c6e1; 	X(MOV(*(raddr(ds,0x714)), al));	// 31092                  mov     ds:714h, al ;~ 01A2:C6E1
cs=0x1a2;eip=0x00c6e4; 	J(RETN(0));	// 31093                  retn ;~ 01A2:C6E4

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1c698: 	goto loc_1c698;
        case m2c::kloc_1c6a8: 	goto loc_1c6a8;
        case m2c::kloc_1c6ae: 	goto loc_1c6ae;
        case m2c::kloc_1c6da: 	goto loc_1c6da;
        case m2c::klocret_1c697: 	goto locret_1c697;
        case m2c::ksub_1c658: 	goto sub_1c658;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_c6e5_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_c6e5_proc:
    _begin:
cs=0x1a2;eip=0x00c6e5; 	X(PUSH(ax));	// 31097                  push    ax ;~ 01A2:C6E5
cs=0x1a2;eip=0x00c6e6; 	X(PUSH(bx));	// 31098                  push    bx ;~ 01A2:C6E6
cs=0x1a2;eip=0x00c6e7; 	X(PUSH(cx));	// 31099                  push    cx ;~ 01A2:C6E7
cs=0x1a2;eip=0x00c6e8; 	X(PUSH(dx));	// 31100                  push    dx ;~ 01A2:C6E8
cs=0x1a2;eip=0x00c6e9; 	X(PUSH(bp));	// 31101                  push    bp ;~ 01A2:C6E9
cs=0x1a2;eip=0x00c6ea; 	X(PUSH(si));	// 31102                  push    si ;~ 01A2:C6EA
cs=0x1a2;eip=0x00c6eb; 	X(PUSH(di));	// 31103                  push    di ;~ 01A2:C6EB
cs=0x1a2;eip=0x00c6ec; 	X(PUSH(es));	// 31104                  push    es ;~ 01A2:C6EC
cs=0x1a2;eip=0x00c6ed; 	X(PUSH(ds));	// 31105                  push    ds ;~ 01A2:C6ED
cs=0x1a2;eip=0x00c6ee; 	T(dx = 0x0F8BF;);	// 31106                  mov     dx, 0F8BFh ;~ 01A2:C6EE
cs=0x1a2;eip=0x00c6f1; 	T(cx = 0;);	// 31107                  mov     cx, 0 ;~ 01A2:C6F1
cs=0x1a2;eip=0x00c6f4; 	T(ax = 0x3C00;);	// 31108                  mov     ax, 3C00h ;~ 01A2:C6F4
cs=0x1a2;eip=0x00c6f7; 	S(_INT(0x21));	// 31109                  int     21h             ; DOS - 2+ - CREATE A FILE WITH HANDLE (CREAT) ;~ 01A2:C6F7
cs=0x1a2;eip=0x00c6f9; 	X(MOV(*(dw*)(raddr(ds,0x0F8B6)), ax));	// 31112                  mov     ds:0F8B6h, ax ;~ 01A2:C6F9
cs=0x1a2;eip=0x00c6fc; 	X(MOV(*(raddr(ds,0x0F8B5)), 1));	// 31113                  mov     byte ptr ds:0F8B5h, 1 ;~ 01A2:C6FC
cs=0x1a2;eip=0x00c701; 	J(CALL(sub_18868,0));	// 31114                  call    sub_18868 ;~ 01A2:C701
cs=0x1a2;eip=0x00c704; 	T(dx = 2;);	// 31116                  mov     dx, 2 ;~ 01A2:C704
cs=0x1a2;eip=0x00c707; 	T(MOV(bx, *(dw*)(raddr(ds,0x0F8B6))));	// 31117                  mov     bx, ds:0F8B6h ;~ 01A2:C707
cs=0x1a2;eip=0x00c70b; 	X(PUSH(ds));	// 31118                  push    ds ;~ 01A2:C70B
cs=0x1a2;eip=0x00c70c; 	T(ax = seg_offset(seg045););	// 31119                  mov     ax, seg seg045 ;~ 01A2:C70C
cs=0x1a2;eip=0x00c70f; 	T(ds = ax;);	// 31120                  mov     ds, ax ;~ 01A2:C70F
cs=0x1a2;eip=0x00c711; 	T(cx = 4;);	// 31122                  mov     cx, 4 ;~ 01A2:C711
cs=0x1a2;eip=0x00c714; 	X(word_1117b = 0;);	// 31123                  mov     cs:word_1117B, 0 ;~ 01A2:C714
cs=0x1a2;eip=0x00c71b; 	X(ADD(*(dw*)(&unk_6fb90), cx));	// 31124                  add     word ptr ss:unk_6FB90, cx ;~ 01A2:C71B
cs=0x1a2;eip=0x00c720; 	T(ah = 0x40;);	// 31125                  mov     ah, 40h ;~ 01A2:C720
cs=0x1a2;eip=0x00c722; 	S(_INT(0x21));	// 31126                  int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE ;~ 01A2:C722
cs=0x1a2;eip=0x00c724; 	X(POP(ds));	// 31128                  pop     ds ;~ 01A2:C724
cs=0x1a2;eip=0x00c725; 	X(POP(ds));	// 31130                  pop     ds ;~ 01A2:C725
cs=0x1a2;eip=0x00c726; 	X(POP(es));	// 31131                  pop     es ;~ 01A2:C726
cs=0x1a2;eip=0x00c727; 	X(POP(di));	// 31132                  pop     di ;~ 01A2:C727
cs=0x1a2;eip=0x00c728; 	X(POP(si));	// 31133                  pop     si ;~ 01A2:C728
cs=0x1a2;eip=0x00c729; 	X(POP(bp));	// 31134                  pop     bp ;~ 01A2:C729
cs=0x1a2;eip=0x00c72a; 	X(POP(dx));	// 31135                  pop     dx ;~ 01A2:C72A
cs=0x1a2;eip=0x00c72b; 	X(POP(cx));	// 31136                  pop     cx ;~ 01A2:C72B
cs=0x1a2;eip=0x00c72c; 	X(POP(bx));	// 31137                  pop     bx ;~ 01A2:C72C
cs=0x1a2;eip=0x00c72d; 	X(POP(ax));	// 31138                  pop     ax ;~ 01A2:C72D
cs=0x1a2;eip=0x00c72e; 	J(RETN(0));	// 31139                  retn ;~ 01A2:C72E

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kseg000_c6e5_proc: 	goto seg000_c6e5_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group33(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group33:
    _begin:
sub_1c72f:
	// 31145 
cs=0x1a2;eip=0x00c72f; 	T(dx = 0x0F8BF;);	// 31146                  mov     dx, 0F8BFh ;~ 01A2:C72F
cs=0x1a2;eip=0x00c732; 	T(cx = 0;);	// 31147                  mov     cx, 0 ;~ 01A2:C732
cs=0x1a2;eip=0x00c735; 	T(ax = 0x3D00;);	// 31148                  mov     ax, 3D00h ;~ 01A2:C735
cs=0x1a2;eip=0x00c738; 	S(_INT(0x21));	// 31149                  int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE ;~ 01A2:C738
cs=0x1a2;eip=0x00c73a; 	X(MOV(*(dw*)(raddr(ds,0x0F8B6)), ax));	// 31153                  mov     ds:0F8B6h, ax ;~ 01A2:C73A
cs=0x1a2;eip=0x00c73d; 	X(MOV(*(raddr(ds,0x0F8B5)), 0));	// 31154                  mov     byte ptr ds:0F8B5h, 0 ;~ 01A2:C73D
cs=0x1a2;eip=0x00c742; 	J(CALL(sub_18868,0));	// 31155                  call    sub_18868 ;~ 01A2:C742
seg000_c745_proc:
	// 31159 
cs=0x1a2;eip=0x00c745; 	T(dx = 2;);	// 31159                  mov     dx, 2 ;~ 01A2:C745
cs=0x1a2;eip=0x00c748; 	T(MOV(bx, *(dw*)(raddr(ds,0x0F8B6))));	// 31160                  mov     bx, ds:0F8B6h ;~ 01A2:C748
cs=0x1a2;eip=0x00c74c; 	X(PUSH(ds));	// 31161                  push    ds ;~ 01A2:C74C
cs=0x1a2;eip=0x00c74d; 	T(ax = seg_offset(seg045););	// 31162                  mov     ax, seg seg045 ;~ 01A2:C74D
cs=0x1a2;eip=0x00c750; 	T(ds = ax;);	// 31163                  mov     ds, ax ;~ 01A2:C750
cs=0x1a2;eip=0x00c752; 	T(cx = 4;);	// 31165                  mov     cx, 4 ;~ 01A2:C752
cs=0x1a2;eip=0x00c755; 	J(CALL(sub_1c7d1,0));	// 31166                  call    near ptr sub_1C7D1 ;~ 01A2:C755
cs=0x1a2;eip=0x00c758; 	X(POP(ds));	// 31167                  pop     ds ;~ 01A2:C758
cs=0x1a2;eip=0x00c759; 	J(RETN(0));	// 31169                  retn ;~ 01A2:C759

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kseg000_c745_proc: 	goto seg000_c745_proc;
        case m2c::ksub_1c72f: 	goto sub_1c72f;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1c75a(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1c75a:
    _begin:
cs=0x1a2;eip=0x00c75a; 	X(PUSH(ax));	// 31176                  push    ax ;~ 01A2:C75A
cs=0x1a2;eip=0x00c75b; 	X(PUSH(bx));	// 31177                  push    bx ;~ 01A2:C75B
cs=0x1a2;eip=0x00c75c; 	X(PUSH(cx));	// 31178                  push    cx ;~ 01A2:C75C
cs=0x1a2;eip=0x00c75d; 	X(PUSH(dx));	// 31179                  push    dx ;~ 01A2:C75D
cs=0x1a2;eip=0x00c75e; 	X(PUSH(bp));	// 31180                  push    bp ;~ 01A2:C75E
cs=0x1a2;eip=0x00c75f; 	X(PUSH(si));	// 31181                  push    si ;~ 01A2:C75F
cs=0x1a2;eip=0x00c760; 	X(PUSH(di));	// 31182                  push    di ;~ 01A2:C760
cs=0x1a2;eip=0x00c761; 	X(PUSH(es));	// 31183                  push    es ;~ 01A2:C761
cs=0x1a2;eip=0x00c762; 	X(PUSH(ds));	// 31184                  push    ds ;~ 01A2:C762
cs=0x1a2;eip=0x00c763; 	T(MOV(bx, *(dw*)(raddr(ds,0x0F8B6))));	// 31185                  mov     bx, ds:0F8B6h ;~ 01A2:C763
cs=0x1a2;eip=0x00c767; 	T(ah = 0x3E;);	// 31186                  mov     ah, 3Eh ;~ 01A2:C767
cs=0x1a2;eip=0x00c769; 	S(_INT(0x21));	// 31187                  int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE ;~ 01A2:C769
cs=0x1a2;eip=0x00c76b; 	X(MOV(*(raddr(ds,0x0F8B5)), 0x0FF));	// 31189                  mov     byte ptr ds:0F8B5h, 0FFh ;~ 01A2:C76B
cs=0x1a2;eip=0x00c770; 	X(POP(ds));	// 31190                  pop     ds ;~ 01A2:C770
cs=0x1a2;eip=0x00c771; 	X(POP(es));	// 31191                  pop     es ;~ 01A2:C771
cs=0x1a2;eip=0x00c772; 	X(POP(di));	// 31192                  pop     di ;~ 01A2:C772
cs=0x1a2;eip=0x00c773; 	X(POP(si));	// 31193                  pop     si ;~ 01A2:C773
cs=0x1a2;eip=0x00c774; 	X(POP(bp));	// 31194                  pop     bp ;~ 01A2:C774
cs=0x1a2;eip=0x00c775; 	X(POP(dx));	// 31195                  pop     dx ;~ 01A2:C775
cs=0x1a2;eip=0x00c776; 	X(POP(cx));	// 31196                  pop     cx ;~ 01A2:C776
cs=0x1a2;eip=0x00c777; 	X(POP(bx));	// 31197                  pop     bx ;~ 01A2:C777
cs=0x1a2;eip=0x00c778; 	X(POP(ax));	// 31198                  pop     ax ;~ 01A2:C778
cs=0x1a2;eip=0x00c779; 	T(al = 0x5C;);	// 31199                  mov     al, 5Ch ; '\' ;~ 01A2:C779
cs=0x1a2;eip=0x00c77b; 	J(RETN(0));	// 31200                  retn ;~ 01A2:C77B

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1c75a: 	goto sub_1c75a;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1c77c(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1c77c:
    _begin:
cs=0x1a2;eip=0x00c77c; 	X(PUSH(ax));	// 31213                  push    ax ;~ 01A2:C77C
cs=0x1a2;eip=0x00c77d; 	T(CMP(byte_1f919, 0));	// 31214                  cmp     ds:byte_1F919, 0 ;~ 01A2:C77D
cs=0x1a2;eip=0x00c782; 	J(JZ(loc_1c79b));	// 31215                  jz      short loc_1C79B ;~ 01A2:C782
cs=0x1a2;eip=0x00c784; 	T(CMP(byte_1f919, 0x10));	// 31216                  cmp     ds:byte_1F919, 10h ;~ 01A2:C784
cs=0x1a2;eip=0x00c789; 	J(JZ(loc_1c78e));	// 31217                  jz      short loc_1C78E ;~ 01A2:C789
cs=0x1a2;eip=0x00c78b; 	J(return _group2(m2c::kloc_11187, _state););	// 31218                  jmp     loc_11187 ;~ 01A2:C78B
loc_1c78e:
	// 6295 
cs=0x1a2;eip=0x00c78e; 	X(byte_1f919 = 0;);	// 31222                  mov     ds:byte_1F919, 0 ;~ 01A2:C78E
cs=0x1a2;eip=0x00c793; 	X(byte_1f91a = 0;);	// 31223                  mov     ds:byte_1F91A, 0 ;~ 01A2:C793
cs=0x1a2;eip=0x00c798; 	J(return start(m2c::kloc_10071, _state););	// 31224                  jmp     loc_10071 ;~ 01A2:C798
loc_1c79b:
	// 6296 
cs=0x1a2;eip=0x00c79b; 	T(CMP(byte_1f887, 0));	// 31228                  cmp     ds:byte_1F887, 0 ;~ 01A2:C79B
cs=0x1a2;eip=0x00c7a0; 	J(JZ(loc_1c7a6));	// 31229                  jz      short loc_1C7A6 ;~ 01A2:C7A0
cs=0x1a2;eip=0x00c7a2; 	T(XOR(ax, ax));	// 31230                  xor     ax, ax ;~ 01A2:C7A2
cs=0x1a2;eip=0x00c7a4; 	J(JMP(loc_1c7a9));	// 31231                  jmp     short loc_1C7A9 ;~ 01A2:C7A4
loc_1c7a6:
	// 6297 
cs=0x1a2;eip=0x00c7a6; 	T(ax = 1;);	// 31235                  mov     ax, 1 ;~ 01A2:C7A6
loc_1c7a9:
	// 6298 
cs=0x1a2;eip=0x00c7a9; 	T(OR(ax, ax));	// 31238                  or      ax, ax ;~ 01A2:C7A9
cs=0x1a2;eip=0x00c7ab; 	X(POP(ax));	// 31239                  pop     ax ;~ 01A2:C7AB
cs=0x1a2;eip=0x00c7ac; 	J(RETN(0));	// 31240                  retn ;~ 01A2:C7AC

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1c78e: 	goto loc_1c78e;
        case m2c::kloc_1c79b: 	goto loc_1c79b;
        case m2c::kloc_1c7a6: 	goto loc_1c7a6;
        case m2c::kloc_1c7a9: 	goto loc_1c7a9;
        case m2c::ksub_1c77c: 	goto sub_1c77c;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1c7ad(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1c7ad:
    _begin:
cs=0x1a2;eip=0x00c7ad; 	T(CMP(byte_1f919, 0));	// 31252                  cmp     ds:byte_1F919, 0 ;~ 01A2:C7AD
cs=0x1a2;eip=0x00c7b2; 	J(JZ(loc_1c7cd));	// 31253                  jz      short loc_1C7CD ;~ 01A2:C7B2
cs=0x1a2;eip=0x00c7b4; 	T(CMP(byte_1f919, 0x10));	// 31255                  cmp     ds:byte_1F919, 10h ;~ 01A2:C7B4
cs=0x1a2;eip=0x00c7b9; 	J(JZ(loc_1c7be));	// 31256                  jz      short loc_1C7BE ;~ 01A2:C7B9
cs=0x1a2;eip=0x00c7bb; 	J(return _group2(m2c::kloc_11187, _state););	// 31257                  jmp     loc_11187 ;~ 01A2:C7BB
loc_1c7be:
	// 6299 
cs=0x1a2;eip=0x00c7be; 	T(XOR(al, al));	// 31261                  xor     al, al ;~ 01A2:C7BE
cs=0x1a2;eip=0x00c7c0; 	X(byte_1f919 = 0;);	// 31262                  mov     ds:byte_1F919, 0 ;~ 01A2:C7C0
cs=0x1a2;eip=0x00c7c5; 	X(byte_1f91a = 0;);	// 31263                  mov     ds:byte_1F91A, 0 ;~ 01A2:C7C5
cs=0x1a2;eip=0x00c7ca; 	J(return start(m2c::kloc_10071, _state););	// 31264                  jmp     loc_10071 ;~ 01A2:C7CA
loc_1c7cd:
	// 6300 
cs=0x1a2;eip=0x00c7cd; 	T(al = byte_1f887;);	// 31268                  mov     al, ds:byte_1F887 ;~ 01A2:C7CD
cs=0x1a2;eip=0x00c7d0; 	J(RETN(0));	// 31269                  retn ;~ 01A2:C7D0

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1c7be: 	goto loc_1c7be;
        case m2c::kloc_1c7cd: 	goto loc_1c7cd;
        case m2c::ksub_1c7ad: 	goto sub_1c7ad;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1c7d1(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1c7d1:
    _begin:
cs=0x1a2;eip=0x00c7d1; 	X(ADD(*(dw*)(&unk_6fb90), cx));	// 31278                  add     word ptr ss:unk_6FB90, cx ;~ 01A2:C7D1
cs=0x1a2;eip=0x00c7d6; 	T(CMP(word_1c8f3, 0x316D));	// 31279                  cmp     cs:word_1C8F3, 316Dh ;~ 01A2:C7D6
cs=0x1a2;eip=0x00c7dd; 	J(JNZ(loc_1c851));	// 31280                  jnz     short loc_1C851 ;~ 01A2:C7DD
cs=0x1a2;eip=0x00c7df; 	X(PUSH(ds));	// 31281                  push    ds ;~ 01A2:C7DF
cs=0x1a2;eip=0x00c7e0; 	T(ax = ds;);	// 31282                  mov     ax, ds ;~ 01A2:C7E0
cs=0x1a2;eip=0x00c7e2; 	X(word_1c8e9 = cx;);	// 31283                  mov     cs:word_1C8E9, cx ;~ 01A2:C7E2
cs=0x1a2;eip=0x00c7e7; 	X(seg_1c8eb = ax;);	// 31284                  mov     cs:seg_1C8EB, ax ;~ 01A2:C7E7
cs=0x1a2;eip=0x00c7eb; 	X(word_1c8ed = dx;);	// 31285                  mov     cs:word_1C8ED, dx ;~ 01A2:C7EB
cs=0x1a2;eip=0x00c7f0; 	X(word_1c8ef = 0;);	// 31286                  mov     cs:word_1C8EF, 0 ;~ 01A2:C7F0
cs=0x1a2;eip=0x00c7f7; 	T(CLI);	// 31287                  cli ;~ 01A2:C7F7
cs=0x1a2;eip=0x00c7f8; 	X(word_1c8e7 = sp;);	// 31288                  mov     cs:word_1C8E7, sp ;~ 01A2:C7F8
cs=0x1a2;eip=0x00c7fd; 	T(CMP(word_1c8e3, 0));	// 31289                  cmp     cs:word_1C8E3, 0 ;~ 01A2:C7FD
cs=0x1a2;eip=0x00c803; 	J(JNZ(loc_1c861));	// 31290                  jnz     short loc_1C861 ;~ 01A2:C803
cs=0x1a2;eip=0x00c805; 	X(word_1c8e5 = 0;);	// 31291                  mov     cs:word_1C8E5, 0 ;~ 01A2:C805
cs=0x1a2;eip=0x00c80c; 	X(word_1c8e3 = 1;);	// 31292                  mov     cs:word_1C8E3, 1 ;~ 01A2:C80C
cs=0x1a2;eip=0x00c813; 	T(sp = 0x3B0E;);	// 31293                  mov     sp, 3B0Eh ;~ 01A2:C813
cs=0x1a2;eip=0x00c816; 	T(STI);	// 31294                  sti ;~ 01A2:C816
cs=0x1a2;eip=0x00c817; 	T(ax = seg_offset(seg045););	// 31295                  mov     ax, seg seg045 ;~ 01A2:C817
cs=0x1a2;eip=0x00c81a; 	T(ds = ax;);	// 31296                  mov     ds, ax ;~ 01A2:C81A
cs=0x1a2;eip=0x00c81c; 	T(ax = 0x0C934;);	// 31298                  mov     ax, 0C934h ;~ 01A2:C81C
cs=0x1a2;eip=0x00c81f; 	X(PUSH(cs));	// 31299                  push    cs ;~ 01A2:C81F
cs=0x1a2;eip=0x00c820; 	X(PUSH(ax));	// 31300                  push    ax ;~ 01A2:C820
cs=0x1a2;eip=0x00c821; 	T(ax = 0x0C8FB;);	// 31301                  mov     ax, 0C8FBh ;~ 01A2:C821
cs=0x1a2;eip=0x00c824; 	X(PUSH(cs));	// 31302                  push    cs ;~ 01A2:C824
cs=0x1a2;eip=0x00c825; 	X(PUSH(ax));	// 31303                  push    ax ;~ 01A2:C825
cs=0x1a2;eip=0x00c826; 	T(ax = 0x1F0;);	// 31304                  mov     ax, 1F0h ;~ 01A2:C826
cs=0x1a2;eip=0x00c829; 	X(PUSH(ss));	// 31305                  push    ss ;~ 01A2:C829
cs=0x1a2;eip=0x00c82a; 	X(PUSH(ax));	// 31306                  push    ax ;~ 01A2:C82A
cs=0x1a2;eip=0x00c82b; 	T(ax = 0x0D03;);	// 31307                  mov     ax, 0D03h ;~ 01A2:C82B
cs=0x1a2;eip=0x00c82e; 	J(CALLF(sub_1ecd3,0));	// 31308                  call    sub_1ECD3 ;~ 01A2:C82E
cs=0x1a2;eip=0x00c833; 	T(OR(ax, ax));	// 31310                  or      ax, ax ;~ 01A2:C833
cs=0x1a2;eip=0x00c835; 	J(JNZ(loc_1c845));	// 31311                  jnz     short loc_1C845 ;~ 01A2:C835
cs=0x1a2;eip=0x00c837; 	T(CLI);	// 31312                  cli ;~ 01A2:C837
cs=0x1a2;eip=0x00c838; 	T(sp = word_1c8e7;);	// 31313                  mov     sp, cs:word_1C8E7 ;~ 01A2:C838
cs=0x1a2;eip=0x00c83d; 	T(STI);	// 31314                  sti ;~ 01A2:C83D
cs=0x1a2;eip=0x00c83e; 	T(ax = word_1c8ef;);	// 31315                  mov     ax, cs:word_1C8EF ;~ 01A2:C83E
cs=0x1a2;eip=0x00c842; 	X(POP(ds));	// 31316                  pop     ds ;~ 01A2:C842
loc_1c843:
	// 6301 
cs=0x1a2;eip=0x00c843; 	T(CLC);	// 31321                  clc ;~ 01A2:C843
cs=0x1a2;eip=0x00c844; 	J(RETN(0));	// 31322                  retn ;~ 01A2:C844
loc_1c845:
	// 6302 
cs=0x1a2;eip=0x00c845; 	T(CLI);	// 31326                  cli ;~ 01A2:C845
cs=0x1a2;eip=0x00c846; 	T(sp = word_1c8e7;);	// 31327                  mov     sp, cs:word_1C8E7 ;~ 01A2:C846
cs=0x1a2;eip=0x00c84b; 	T(STI);	// 31328                  sti ;~ 01A2:C84B
cs=0x1a2;eip=0x00c84c; 	T(XOR(ax, ax));	// 31329                  xor     ax, ax ;~ 01A2:C84C
cs=0x1a2;eip=0x00c84e; 	X(POP(ds));	// 31330                  pop     ds ;~ 01A2:C84E
loc_1c84f:
	// 6303 
cs=0x1a2;eip=0x00c84f; 	T(STC);	// 31333                  stc ;~ 01A2:C84F
cs=0x1a2;eip=0x00c850; 	J(RETN(0));	// 31334                  retn ;~ 01A2:C850
loc_1c851:
	// 6304 
cs=0x1a2;eip=0x00c851; 	T(ah = 0x3F;);	// 31339                  mov     ah, 3Fh ;~ 01A2:C851
cs=0x1a2;eip=0x00c853; 	S(_INT(0x21));	// 31340                  int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE ;~ 01A2:C853
cs=0x1a2;eip=0x00c855; 	J(JC(loc_1c843));	// 31343                  jb      short loc_1C843 ;~ 01A2:C855
cs=0x1a2;eip=0x00c857; 	T(CMP(word_1117b, 0));	// 31344                  cmp     cs:word_1117B, 0 ;~ 01A2:C857
cs=0x1a2;eip=0x00c85d; 	J(JS(loc_1c84f));	// 31345                  js      short loc_1C84F ;~ 01A2:C85D
cs=0x1a2;eip=0x00c85f; 	J(JMP(loc_1c843));	// 31346                  jmp     short loc_1C843 ;~ 01A2:C85F
loc_1c861:
	// 6305 
cs=0x1a2;eip=0x00c861; 	T(cx = word_1c8e9;);	// 31351                  mov     cx, cs:word_1C8E9 ;~ 01A2:C861
cs=0x1a2;eip=0x00c866; 	T(ax = word_1c8e5;);	// 31352                  mov     ax, cs:word_1C8E5 ;~ 01A2:C866
cs=0x1a2;eip=0x00c86a; 	T(OR(ax, ax));	// 31353                  or      ax, ax ;~ 01A2:C86A
cs=0x1a2;eip=0x00c86c; 	J(JZ(loc_1c8a7));	// 31354                  jz      short loc_1C8A7 ;~ 01A2:C86C
cs=0x1a2;eip=0x00c86e; 	T(CMP(cx, ax));	// 31355                  cmp     cx, ax ;~ 01A2:C86E
cs=0x1a2;eip=0x00c870; 	J(JBE(loc_1c8b5));	// 31356                  jbe     short loc_1C8B5 ;~ 01A2:C870
cs=0x1a2;eip=0x00c872; 	T(cx = ax;);	// 31357                  mov     cx, ax ;~ 01A2:C872
cs=0x1a2;eip=0x00c874; 	X(SUB(word_1c8e9, ax));	// 31358                  sub     cs:word_1C8E9, ax ;~ 01A2:C874
cs=0x1a2;eip=0x00c879; 	X(word_1c8e5 = 0;);	// 31359                  mov     cs:word_1C8E5, 0 ;~ 01A2:C879
cs=0x1a2;eip=0x00c880; 	T(es = seg_1c8eb;);	// 31360                  mov     es, cs:seg_1C8EB ;~ 01A2:C880
cs=0x1a2;eip=0x00c885; 	T(di = word_1c8ed;);	// 31362                  mov     di, cs:word_1C8ED ;~ 01A2:C885
cs=0x1a2;eip=0x00c88a; 	T(ds = seg_1c8f7;);	// 31363                  mov     ds, cs:seg_1C8F7 ;~ 01A2:C88A
cs=0x1a2;eip=0x00c88f; 	T(si = word_1c8f5;);	// 31365                  mov     si, cs:word_1C8F5 ;~ 01A2:C88F
cs=0x1a2;eip=0x00c894; 	X(ADD(word_1c8ef, cx));	// 31366                  add     cs:word_1C8EF, cx ;~ 01A2:C894
	// 31367                  rep movsb ;~ 01A2:C899
cs=0x1a2;eip=0x00c899; 	X(	REP MOVSB);	// 31367                  rep movsb ;~ 01A2:C899
cs=0x1a2;eip=0x00c89b; 	X(word_1c8f5 = si;);	// 31368                  mov     cs:word_1C8F5, si ;~ 01A2:C89B
cs=0x1a2;eip=0x00c8a0; 	X(word_1c8ed = di;);	// 31369                  mov     cs:word_1C8ED, di ;~ 01A2:C8A0
cs=0x1a2;eip=0x00c8a5; 	J(JMP(loc_1c861));	// 31370                  jmp     short loc_1C861 ;~ 01A2:C8A5
loc_1c8a7:
	// 6306 
cs=0x1a2;eip=0x00c8a7; 	T(CLI);	// 31374                  cli ;~ 01A2:C8A7
cs=0x1a2;eip=0x00c8a8; 	X(word_1c8e7 = sp;);	// 31375                  mov     cs:word_1C8E7, sp ;~ 01A2:C8A8
cs=0x1a2;eip=0x00c8ad; 	T(sp = word_1c8f9;);	// 31376                  mov     sp, cs:word_1C8F9 ;~ 01A2:C8AD
cs=0x1a2;eip=0x00c8b2; 	T(STI);	// 31377                  sti ;~ 01A2:C8B2
cs=0x1a2;eip=0x00c8b3; 	J(JMP(loc_1c92d));	// 31378                  jmp     short loc_1C92D ;~ 01A2:C8B3
loc_1c8b5:
	// 6307 
cs=0x1a2;eip=0x00c8b5; 	T(ax = cx;);	// 31382                  mov     ax, cx ;~ 01A2:C8B5
cs=0x1a2;eip=0x00c8b7; 	X(SUB(word_1c8e5, ax));	// 31383                  sub     cs:word_1C8E5, ax ;~ 01A2:C8B7
cs=0x1a2;eip=0x00c8bc; 	T(es = seg_1c8eb;);	// 31384                  mov     es, cs:seg_1C8EB ;~ 01A2:C8BC
cs=0x1a2;eip=0x00c8c1; 	T(di = word_1c8ed;);	// 31385                  mov     di, cs:word_1C8ED ;~ 01A2:C8C1
cs=0x1a2;eip=0x00c8c6; 	T(ds = seg_1c8f7;);	// 31386                  mov     ds, cs:seg_1C8F7 ;~ 01A2:C8C6
cs=0x1a2;eip=0x00c8cb; 	T(si = word_1c8f5;);	// 31387                  mov     si, cs:word_1C8F5 ;~ 01A2:C8CB
cs=0x1a2;eip=0x00c8d0; 	X(ADD(word_1c8ef, cx));	// 31388                  add     cs:word_1C8EF, cx ;~ 01A2:C8D0
	// 31389                  rep movsb ;~ 01A2:C8D5
cs=0x1a2;eip=0x00c8d5; 	X(	REP MOVSB);	// 31389                  rep movsb ;~ 01A2:C8D5
cs=0x1a2;eip=0x00c8d7; 	X(word_1c8f5 = si;);	// 31390                  mov     cs:word_1C8F5, si ;~ 01A2:C8D7
cs=0x1a2;eip=0x00c8dc; 	T(ax = word_1c8ef;);	// 31391                  mov     ax, cs:word_1C8EF ;~ 01A2:C8DC
cs=0x1a2;eip=0x00c8e0; 	X(POP(ds));	// 31392                  pop     ds ;~ 01A2:C8E0
cs=0x1a2;eip=0x00c8e1; 	T(CLC);	// 31394                  clc ;~ 01A2:C8E1
cs=0x1a2;eip=0x00c8e2; 	J(RETN(0));	// 31395                  retn ;~ 01A2:C8E2
ret_1a2_c8fb:
	// 6308 
cs=0x1a2;eip=0x00c8fb; 	X(PUSH(bp));	// 31422                  push    bp ;~ 01A2:C8FB
cs=0x1a2;eip=0x00c8fc; 	T(bp = sp;);	// 31423                  mov     bp, sp ;~ 01A2:C8FC
cs=0x1a2;eip=0x00c8fe; 	X(PUSH(ds));	// 31424                  push    ds ;~ 01A2:C8FE
cs=0x1a2;eip=0x00c8ff; 	T(LES(bx, *(dw*)(raddr(ss,bp+6))));	// 31425                  les     bx, [bp+6] ;~ 01A2:C8FF
cs=0x1a2;eip=0x00c902; 	T(MOV(cx, *(dw*)(raddr(es,bx))));	// 31426                  mov     cx, es:[bx] ;~ 01A2:C902
cs=0x1a2;eip=0x00c905; 	T(LDS(dx, *(dw*)(raddr(ss,bp+0x0A))));	// 31427                  lds     dx, [bp+0Ah] ;~ 01A2:C905
cs=0x1a2;eip=0x00c908; 	T(es = seg_1c8eb;);	// 31429                  mov     es, cs:seg_1C8EB ;~ 01A2:C908
cs=0x1a2;eip=0x00c90d; 	X(PUSH(si));	// 31431                  push    si ;~ 01A2:C90D
cs=0x1a2;eip=0x00c90e; 	X(PUSH(di));	// 31432                  push    di ;~ 01A2:C90E
cs=0x1a2;eip=0x00c90f; 	T(CLI);	// 31433                  cli ;~ 01A2:C90F
cs=0x1a2;eip=0x00c910; 	X(word_1c8f5 = dx;);	// 31434                  mov     cs:word_1C8F5, dx ;~ 01A2:C910
cs=0x1a2;eip=0x00c915; 	X(seg_1c8f7 = ds;);	// 31435                  mov     cs:seg_1C8F7, ds ;~ 01A2:C915
cs=0x1a2;eip=0x00c91a; 	X(word_1c8e5 = cx;);	// 31436                  mov     cs:word_1C8E5, cx ;~ 01A2:C91A
cs=0x1a2;eip=0x00c91f; 	X(word_1c8f9 = sp;);	// 31437                  mov     cs:word_1C8F9, sp ;~ 01A2:C91F
cs=0x1a2;eip=0x00c924; 	T(sp = word_1c8e7;);	// 31438                  mov     sp, cs:word_1C8E7 ;~ 01A2:C924
cs=0x1a2;eip=0x00c929; 	T(STI);	// 31439                  sti ;~ 01A2:C929
cs=0x1a2;eip=0x00c92a; 	J(JMP(loc_1c861));	// 31440                  jmp     loc_1C861 ;~ 01A2:C92A
loc_1c92d:
	// 6309 
cs=0x1a2;eip=0x00c92d; 	X(POP(di));	// 31444                  pop     di ;~ 01A2:C92D
cs=0x1a2;eip=0x00c92e; 	X(POP(si));	// 31445                  pop     si ;~ 01A2:C92E
cs=0x1a2;eip=0x00c92f; 	X(POP(ds));	// 31446                  pop     ds ;~ 01A2:C92F
cs=0x1a2;eip=0x00c930; 	X(POP(bp));	// 31448                  pop     bp ;~ 01A2:C930
cs=0x1a2;eip=0x00c931; 	J(RETF(8));	// 31449                  retf    8 ;~ 01A2:C931

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1c843: 	goto loc_1c843;
        case m2c::kloc_1c845: 	goto loc_1c845;
        case m2c::kloc_1c84f: 	goto loc_1c84f;
        case m2c::kloc_1c851: 	goto loc_1c851;
        case m2c::kloc_1c861: 	goto loc_1c861;
        case m2c::kloc_1c8a7: 	goto loc_1c8a7;
        case m2c::kloc_1c8b5: 	goto loc_1c8b5;
        case m2c::kloc_1c92d: 	goto loc_1c92d;
        case m2c::kret_1a2_c8fb: 	goto ret_1a2_c8fb;
        case m2c::ksub_1c7d1: 	goto sub_1c7d1;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1c934(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1c934:
    _begin:
#undef arg_0
#define arg_0 6
	// 31460 arg_0           = dword ptr  6 ;~ 01A2:C934
#undef arg_4
#define arg_4 0x0A
	// 31461 arg_4           = dword ptr  0Ah ;~ 01A2:C934
cs=0x1a2;eip=0x00c934; 	X(PUSH(bp));	// 31463                  push    bp ;~ 01A2:C934
cs=0x1a2;eip=0x00c935; 	T(bp = sp;);	// 31464                  mov     bp, sp ;~ 01A2:C935
cs=0x1a2;eip=0x00c937; 	X(PUSH(ds));	// 31465                  push    ds ;~ 01A2:C937
cs=0x1a2;eip=0x00c938; 	T(LES(bx, *(dd*)(raddr(ss,bp+arg_0))));	// 31466                  les     bx, [bp+arg_0] ;~ 01A2:C938
cs=0x1a2;eip=0x00c93b; 	T(MOV(cx, *(dw*)(raddr(es,bx))));	// 31467                  mov     cx, es:[bx] ;~ 01A2:C93B
cs=0x1a2;eip=0x00c93e; 	T(ax = seg_offset(seg002););	// 31468                  mov     ax, seg seg002 ;~ 01A2:C93E
cs=0x1a2;eip=0x00c941; 	T(ds = ax;);	// 31469                  mov     ds, ax ;~ 01A2:C941
cs=0x1a2;eip=0x00c943; 	T(bx = word_1f8ee;);	// 31471                  mov     bx, ds:word_1F8EE ;~ 01A2:C943
cs=0x1a2;eip=0x00c947; 	T(LDS(dx, *(dd*)(raddr(ss,bp+arg_4))));	// 31472                  lds     dx, [bp+arg_4] ;~ 01A2:C947
cs=0x1a2;eip=0x00c94a; 	T(ah = 0x3F;);	// 31474                  mov     ah, 3Fh ;~ 01A2:C94A
cs=0x1a2;eip=0x00c94c; 	S(_INT(0x21));	// 31475                  int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE ;~ 01A2:C94C
cs=0x1a2;eip=0x00c94e; 	J(JC(loc_1c95d));	// 31478                  jb      short loc_1C95D ;~ 01A2:C94E
cs=0x1a2;eip=0x00c950; 	T(CMP(word_1117b, 0));	// 31479                  cmp     cs:word_1117B, 0 ;~ 01A2:C950
cs=0x1a2;eip=0x00c956; 	J(JS(loc_1c95d));	// 31480                  js      short loc_1C95D ;~ 01A2:C956
cs=0x1a2;eip=0x00c958; 	X(POP(ds));	// 31481                  pop     ds ;~ 01A2:C958
cs=0x1a2;eip=0x00c959; 	X(POP(bp));	// 31483                  pop     bp ;~ 01A2:C959
cs=0x1a2;eip=0x00c95a; 	J(RETF(8));	// 31484                  retf    8 ;~ 01A2:C95A
loc_1c95d:
	// 6310 
cs=0x1a2;eip=0x00c95d; 	T(XOR(ax, ax));	// 31489                  xor     ax, ax ;~ 01A2:C95D
cs=0x1a2;eip=0x00c95f; 	X(POP(ds));	// 31490                  pop     ds ;~ 01A2:C95F
cs=0x1a2;eip=0x00c960; 	X(POP(bp));	// 31492                  pop     bp ;~ 01A2:C960
cs=0x1a2;eip=0x00c961; 	J(RETF(8));	// 31493                  retf    8 ;~ 01A2:C961

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1c95d: 	goto loc_1c95d;
        case m2c::ksub_1c934: 	goto sub_1c934;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_c964_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_c964_proc:
    _begin:
cs=0x1a2;eip=0x00c964; 	T(ax = ds;);	// 31497                  mov     ax, ds ;~ 01A2:C964
cs=0x1a2;eip=0x00c966; 	T(es = ax;);	// 31498                  mov     es, ax ;~ 01A2:C966
cs=0x1a2;eip=0x00c968; 	T(di = 0x0FFA6;);	// 31500                  mov     di, 0FFA6h ;~ 01A2:C968
cs=0x1a2;eip=0x00c96b; 	T(al = 0x0F;);	// 31501                  mov     al, 0Fh ;~ 01A2:C96B
cs=0x1a2;eip=0x00c96d; 	J(CALL(sub_15dcb,0));	// 31502                  call    sub_15DCB ;~ 01A2:C96D
cs=0x1a2;eip=0x00c970; 	J(CALL(sub_1dec8,0));	// 31503                  call    sub_1DEC8 ;~ 01A2:C970
cs=0x1a2;eip=0x00c973; 	J(CALL(sub_1dee4,0));	// 31504                  call    sub_1DEE4 ;~ 01A2:C973
cs=0x1a2;eip=0x00c976; 	J(CALL(sub_1887b,0));	// 31505                  call    sub_1887B ;~ 01A2:C976
cs=0x1a2;eip=0x00c979; 	T(XOR(cx, cx));	// 31506                  xor     cx, cx ;~ 01A2:C979
cs=0x1a2;eip=0x00c97b; 	T(dx = cx;);	// 31507                  mov     dx, cx ;~ 01A2:C97B
cs=0x1a2;eip=0x00c97d; 	X(PUSH(ds));	// 31508                  push    ds ;~ 01A2:C97D
cs=0x1a2;eip=0x00c97e; 	X(PUSH(es));	// 31509                  push    es ;~ 01A2:C97E
cs=0x1a2;eip=0x00c97f; 	X(PUSH(cx));	// 31510                  push    cx ;~ 01A2:C97F
cs=0x1a2;eip=0x00c980; 	X(PUSH(si));	// 31511                  push    si ;~ 01A2:C980
cs=0x1a2;eip=0x00c981; 	X(PUSH(di));	// 31512                  push    di ;~ 01A2:C981
cs=0x1a2;eip=0x00c982; 	X(PUSH(bp));	// 31513                  push    bp ;~ 01A2:C982
cs=0x1a2;eip=0x00c983; 	T(XOR(si, si));	// 31514                  xor     si, si ;~ 01A2:C983
cs=0x1a2;eip=0x00c985; 	T(ds = si;);	// 31515                  mov     ds, si ;~ 01A2:C985
loc_1c987:
	// 6311 
cs=0x1a2;eip=0x00c987; 	X(PUSH(*(dw*)(raddr(ds,si))));	// 31519                  push    word ptr [si] ;~ 01A2:C987
cs=0x1a2;eip=0x00c989; 	T(ADD(si, 2));	// 31520                  add     si, 2 ;~ 01A2:C989
cs=0x1a2;eip=0x00c98c; 	T(CMP(si, 0x14));	// 31521                  cmp     si, 14h ;~ 01A2:C98C
cs=0x1a2;eip=0x00c98f; 	J(JNZ(loc_1c987));	// 31522                  jnz     short loc_1C987 ;~ 01A2:C98F
cs=0x1a2;eip=0x00c991; 	X(PUSHF);	// 31523                  pushf ;~ 01A2:C991
cs=0x1a2;eip=0x00c992; 	T(CLI);	// 31524                  cli ;~ 01A2:C992
assert(0);
//cs=0x1a2;eip=0x00c993; 	J(CALL(__dispatch_call,$+3));	// 31525                  call    $+3 ;~ 01A2:C993
cs=0x1a2;eip=0x00c996; 	X(POP(*(dw*)(raddr(ds,0x0C))));	// 31526                  pop     word ptr ds:0Ch ;~ 01A2:C996
cs=0x1a2;eip=0x00c99a; 	X(ADD(*(dw*)(raddr(ds,0x0C)), 0x75A));	// 31527                  add     word ptr ds:0Ch, 75Ah ;~ 01A2:C99A
cs=0x1a2;eip=0x00c9a0; 	X(PUSH(cs));	// 31528                  push    cs ;~ 01A2:C9A0
cs=0x1a2;eip=0x00c9a1; 	X(POP(si));	// 31529                  pop     si ;~ 01A2:C9A1
cs=0x1a2;eip=0x00c9a2; 	X(MOV(*(dw*)(raddr(ds,0x0E)), si));	// 31530                  mov     ds:0Eh, si ;~ 01A2:C9A2
cs=0x1a2;eip=0x00c9a6; 	X(POPF);	// 31531                  popf ;~ 01A2:C9A6
cs=0x1a2;eip=0x00c9a7; 	X(PUSH(ss));	// 31532                  push    ss ;~ 01A2:C9A7
cs=0x1a2;eip=0x00c9a8; 	X(POP(ds));	// 31533                  pop     ds ;~ 01A2:C9A8
cs=0x1a2;eip=0x00c9a9; 	S(_INT(3));	// 31535                  int     3               ; Trap to Debugger ;~ 01A2:C9A9
cs=0x1a2;eip=0x00c9aa; 	T(NOP);	// 31536                  nop ;~ 01A2:C9AA
cs=0x1a2;eip=0x00c9ab; 	T(ds = si;);	// 31537                  mov     ds, si ;~ 01A2:C9AB
cs=0x1a2;eip=0x00c9ad; 	X(ADD(*(raddr(ss,bp+di)), bl));	// 31539                  add     [bp+di], bl ;~ 01A2:C9AD
cs=0x1a2;eip=0x00c9af; 	T(CLI);	// 31540                  cli ;~ 01A2:C9AF
cs=0x1a2;eip=0x00c9b0; 	X(ROL(*(raddr(ss,bp+di)), cl));	// 31541                  rol     byte ptr [bp+di], cl ;~ 01A2:C9B0
cs=0x1a2;eip=0x00c9b2; 	J(RETF(0));	// 31542                  retf ;~ 01A2:C9B2

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1c987: 	goto loc_1c987;
        case m2c::kseg000_c964_proc: 	goto seg000_c964_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1d1b0(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1d1b0:
    _begin:
cs=0x1a2;eip=0x00d1b0; 	T(bp = word_1f1a2;);	// 33595                  mov     bp, word_1F1A2 ;~ 01A2:D1B0
loc_1d1b4:
	// 6312 
cs=0x1a2;eip=0x00d1b4; 	T(MOV(si, *(dw*)(raddr(ss,bp+0x0C))));	// 33598                  mov     si, [bp+0Ch] ;~ 01A2:D1B4
cs=0x1a2;eip=0x00d1b7; 	T(CMP(si, 0x0FFFF));	// 33599                  cmp     si, 0FFFFh ;~ 01A2:D1B7
cs=0x1a2;eip=0x00d1ba; 	J(JZ(locret_1d1f9));	// 33600                  jz      short locret_1D1F9 ;~ 01A2:D1BA
cs=0x1a2;eip=0x00d1bc; 	T(MOV(ax, *(dw*)(raddr(ss,bp+0x0E))));	// 33601                  mov     ax, [bp+0Eh] ;~ 01A2:D1BC
cs=0x1a2;eip=0x00d1bf; 	X(*(dw*)(&unk_6fb96) = ax;);	// 33602                  mov     word ptr ss:unk_6FB96, ax ;~ 01A2:D1BF
cs=0x1a2;eip=0x00d1c3; 	T(MOV(ch, *(raddr(ss,bp+3))));	// 33603                  mov     ch, [bp+3] ;~ 01A2:D1C3
cs=0x1a2;eip=0x00d1c6; 	T(MOV(di, *(dw*)(raddr(ss,bp+8))));	// 33604                  mov     di, [bp+8] ;~ 01A2:D1C6
cs=0x1a2;eip=0x00d1c9; 	T(OR(di, di));	// 33605                  or      di, di ;~ 01A2:D1C9
cs=0x1a2;eip=0x00d1cb; 	J(JS(loc_1d1f4));	// 33606                  js      short loc_1D1F4 ;~ 01A2:D1CB
cs=0x1a2;eip=0x00d1cd; 	T(XOR(cl, cl));	// 33607                  xor     cl, cl ;~ 01A2:D1CD
cs=0x1a2;eip=0x00d1cf; 	X(byte_1f74c = 0;);	// 33608                  mov     ds:byte_1F74C, 0 ;~ 01A2:D1CF
cs=0x1a2;eip=0x00d1d4; 	T(MOV(dl, *(raddr(ss,bp+2))));	// 33609                  mov     dl, [bp+2] ;~ 01A2:D1D4
cs=0x1a2;eip=0x00d1d7; 	T(CMP(dl, 2));	// 33610                  cmp     dl, 2 ;~ 01A2:D1D7
cs=0x1a2;eip=0x00d1da; 	J(JZ(loc_1d1e9));	// 33611                  jz      short loc_1D1E9 ;~ 01A2:D1DA
cs=0x1a2;eip=0x00d1dc; 	T(MOV(ax, *(dw*)(raddr(ss,bp+0x0A))));	// 33613                  mov     ax, [bp+0Ah] ;~ 01A2:D1DC
cs=0x1a2;eip=0x00d1df; 	X(*(dw*)(((db*)&off_1f8c8)+2) = ax;);	// 33614                  mov     word ptr ds:off_1F8C8+2, ax ;~ 01A2:D1DF
cs=0x1a2;eip=0x00d1e2; 	X(PUSH(bp));	// 33615                  push    bp ;~ 01A2:D1E2
cs=0x1a2;eip=0x00d1e3; 	J(CALL(sub_192ff,0));	// 33616                  call    sub_192FF ;~ 01A2:D1E3
cs=0x1a2;eip=0x00d1e6; 	X(POP(bp));	// 33618                  pop     bp ;~ 01A2:D1E6
cs=0x1a2;eip=0x00d1e7; 	J(JMP(loc_1d1f4));	// 33619                  jmp     short loc_1D1F4 ;~ 01A2:D1E7
loc_1d1e9:
	// 6313 
cs=0x1a2;eip=0x00d1e9; 	T(ax = seg_1f182;);	// 33623                  mov     ax, seg_1F182 ;~ 01A2:D1E9
cs=0x1a2;eip=0x00d1ec; 	X(*(dw*)(((db*)&off_1f8c8)+2) = ax;);	// 33624                  mov     word ptr ds:off_1F8C8+2, ax ;~ 01A2:D1EC
cs=0x1a2;eip=0x00d1ef; 	X(PUSH(bp));	// 33625                  push    bp ;~ 01A2:D1EF
cs=0x1a2;eip=0x00d1f0; 	J(CALL(sub_19080,0));	// 33626                  call    sub_19080 ;~ 01A2:D1F0
cs=0x1a2;eip=0x00d1f3; 	X(POP(bp));	// 33628                  pop     bp ;~ 01A2:D1F3
loc_1d1f4:
	// 6314 
cs=0x1a2;eip=0x00d1f4; 	T(ADD(bp, 0x10));	// 33632                  add     bp, 10h ;~ 01A2:D1F4
cs=0x1a2;eip=0x00d1f7; 	J(JMP(loc_1d1b4));	// 33633                  jmp     short loc_1D1B4 ;~ 01A2:D1F7
locret_1d1f9:
	// 6315 
cs=0x1a2;eip=0x00d1f9; 	J(RETN(0));	// 33637                  retn ;~ 01A2:D1F9

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1d1b4: 	goto loc_1d1b4;
        case m2c::kloc_1d1e9: 	goto loc_1d1e9;
        case m2c::kloc_1d1f4: 	goto loc_1d1f4;
        case m2c::klocret_1d1f9: 	goto locret_1d1f9;
        case m2c::ksub_1d1b0: 	goto sub_1d1b0;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1d1fa(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1d1fa:
    _begin:
cs=0x1a2;eip=0x00d1fa; 	T(si = word_1f1ce;);	// 33645                  mov     si, word_1F1CE ;~ 01A2:D1FA
cs=0x1a2;eip=0x00d1fe; 	T(bp = word_1f1a4;);	// 33646                  mov     bp, word_1F1A4 ;~ 01A2:D1FE
cs=0x1a2;eip=0x00d202; 	X(MOV(*(dw*)(raddr(ss,bp+0x0A)), 0x0FFFF));	// 33647                  mov     word ptr [bp+0Ah], 0FFFFh ;~ 01A2:D202
cs=0x1a2;eip=0x00d207; 	T(di = word_1f1c8;);	// 33648                  mov     di, word_1F1C8 ;~ 01A2:D207
cs=0x1a2;eip=0x00d20b; 	T(MOV(cl, *(raddr(ds,si+4))));	// 33649                  mov     cl, [si+4] ;~ 01A2:D20B
cs=0x1a2;eip=0x00d20e; 	T(MOV(ch, *(raddr(ds,si+5))));	// 33650                  mov     ch, [si+5] ;~ 01A2:D20E
cs=0x1a2;eip=0x00d211; 	T(bx = word_1f1a8;);	// 33651                  mov     bx, word_1F1A8 ;~ 01A2:D211
loc_1d215:
	// 6316 
cs=0x1a2;eip=0x00d215; 	X(PUSH(di));	// 33654                  push    di ;~ 01A2:D215
cs=0x1a2;eip=0x00d216; 	X(PUSH(cx));	// 33655                  push    cx ;~ 01A2:D216
loc_1d217:
	// 6317 
cs=0x1a2;eip=0x00d217; 	T(si = word_1f180;);	// 33658                  mov     si, word_1F180 ;~ 01A2:D217
cs=0x1a2;eip=0x00d21b; 	T(XOR(ax, ax));	// 33659                  xor     ax, ax ;~ 01A2:D21B
cs=0x1a2;eip=0x00d21d; 	T(MOV(al, *(raddr(ds,bx))));	// 33660                  mov     al, [bx] ;~ 01A2:D21D
cs=0x1a2;eip=0x00d21f; 	T(INC(bx));	// 33661                  inc     bx ;~ 01A2:D21F
cs=0x1a2;eip=0x00d220; 	X(PUSH(di));	// 33662                  push    di ;~ 01A2:D220
cs=0x1a2;eip=0x00d221; 	X(PUSH(bx));	// 33663                  push    bx ;~ 01A2:D221
cs=0x1a2;eip=0x00d222; 	T(OR(al, al));	// 33664                  or      al, al ;~ 01A2:D222
cs=0x1a2;eip=0x00d224; 	J(JNZ(loc_1d229));	// 33665                  jnz     short loc_1D229 ;~ 01A2:D224
cs=0x1a2;eip=0x00d226; 	J(JMP(loc_1d2aa));	// 33666                  jmp     loc_1D2AA ;~ 01A2:D226
loc_1d229:
	// 6318 
cs=0x1a2;eip=0x00d229; 	T(bx = 0x168;);	// 33670                  mov     bx, 168h ;~ 01A2:D229
cs=0x1a2;eip=0x00d22c; 	T(MUL1_2(bx));	// 33671                  mul     bx ;~ 01A2:D22C
cs=0x1a2;eip=0x00d22e; 	T(ADD(si, ax));	// 33672                  add     si, ax ;~ 01A2:D22E
cs=0x1a2;eip=0x00d230; 	T(ax = seg_1f17e;);	// 33673                  mov     ax, seg_1F17E ;~ 01A2:D230
cs=0x1a2;eip=0x00d233; 	X(MOV(*(dw*)(raddr(ss,bp+0x0A)), ax));	// 33674                  mov     [bp+0Ah], ax ;~ 01A2:D233
cs=0x1a2;eip=0x00d236; 	X(MOV(*(dw*)(raddr(ss,bp+0x0C)), si));	// 33675                  mov     [bp+0Ch], si ;~ 01A2:D236
cs=0x1a2;eip=0x00d239; 	X(MOV(*(raddr(ss,bp+3)), 0x12));	// 33676                  mov     byte ptr [bp+3], 12h ;~ 01A2:D239
cs=0x1a2;eip=0x00d23d; 	X(MOV(*(raddr(ss,bp+2)), 2));	// 33677                  mov     byte ptr [bp+2], 2 ;~ 01A2:D23D
cs=0x1a2;eip=0x00d241; 	X(MOV(*(dw*)(raddr(ss,bp+0x0E)), 0));	// 33678                  mov     word ptr [bp+0Eh], 0 ;~ 01A2:D241
cs=0x1a2;eip=0x00d246; 	X(MOV(*(dw*)(raddr(ss,bp+8)), di));	// 33679                  mov     [bp+8], di ;~ 01A2:D246
cs=0x1a2;eip=0x00d249; 	T(ax = di;);	// 33680                  mov     ax, di ;~ 01A2:D249
cs=0x1a2;eip=0x00d24b; 	T(OR(ax, ax));	// 33681                  or      ax, ax ;~ 01A2:D24B
cs=0x1a2;eip=0x00d24d; 	J(JZ(loc_1d254));	// 33682                  jz      short loc_1D254 ;~ 01A2:D24D
cs=0x1a2;eip=0x00d24f; 	T(bx = 0x28;);	// 33683                  mov     bx, 28h ; '(' ;~ 01A2:D24F
cs=0x1a2;eip=0x00d252; 	T(DIV2(bx));	// 33684                  div     bx ;~ 01A2:D252
loc_1d254:
	// 6319 
cs=0x1a2;eip=0x00d254; 	X(MOV(*(raddr(ss,bp+0)), al));	// 33687                  mov     [bp+0], al ;~ 01A2:D254
cs=0x1a2;eip=0x00d257; 	T(ADD(ax, 0x12));	// 33688                  add     ax, 12h ;~ 01A2:D257
cs=0x1a2;eip=0x00d25a; 	X(MOV(*(raddr(ss,bp+1)), al));	// 33689                  mov     [bp+1], al ;~ 01A2:D25A
cs=0x1a2;eip=0x00d25d; 	T(ax = dx;);	// 33690                  mov     ax, dx ;~ 01A2:D25D
cs=0x1a2;eip=0x00d25f; 	T(SHL(ax, 1));	// 33691                  shl     ax, 1 ;~ 01A2:D25F
cs=0x1a2;eip=0x00d261; 	T(SHL(ax, 1));	// 33692                  shl     ax, 1 ;~ 01A2:D261
cs=0x1a2;eip=0x00d263; 	X(MOV(*(dw*)(raddr(ss,bp+4)), ax));	// 33693                  mov     [bp+4], ax ;~ 01A2:D263
cs=0x1a2;eip=0x00d266; 	T(ADD(ax, 0x20));	// 33694                  add     ax, 20h ; ' ' ;~ 01A2:D266
cs=0x1a2;eip=0x00d269; 	X(MOV(*(dw*)(raddr(ss,bp+6)), ax));	// 33695                  mov     [bp+6], ax ;~ 01A2:D269
cs=0x1a2;eip=0x00d26c; 	X(PUSH(ax));	// 33696                  push    ax ;~ 01A2:D26C
cs=0x1a2;eip=0x00d26d; 	X(PUSH(bx));	// 33697                  push    bx ;~ 01A2:D26D
cs=0x1a2;eip=0x00d26e; 	X(PUSH(cx));	// 33698                  push    cx ;~ 01A2:D26E
cs=0x1a2;eip=0x00d26f; 	X(PUSH(dx));	// 33699                  push    dx ;~ 01A2:D26F
cs=0x1a2;eip=0x00d270; 	X(PUSH(bp));	// 33700                  push    bp ;~ 01A2:D270
cs=0x1a2;eip=0x00d271; 	X(PUSH(si));	// 33701                  push    si ;~ 01A2:D271
cs=0x1a2;eip=0x00d272; 	X(PUSH(di));	// 33702                  push    di ;~ 01A2:D272
cs=0x1a2;eip=0x00d273; 	X(PUSH(es));	// 33703                  push    es ;~ 01A2:D273
cs=0x1a2;eip=0x00d274; 	X(PUSH(ds));	// 33704                  push    ds ;~ 01A2:D274
cs=0x1a2;eip=0x00d275; 	T(MOV(ax, *(dw*)(raddr(ss,bp+0x0E))));	// 33705                  mov     ax, [bp+0Eh] ;~ 01A2:D275
cs=0x1a2;eip=0x00d278; 	X(*(dw*)(&unk_6fb96) = ax;);	// 33706                  mov     word ptr ss:unk_6FB96, ax ;~ 01A2:D278
cs=0x1a2;eip=0x00d27c; 	T(MOV(ch, *(raddr(ss,bp+3))));	// 33707                  mov     ch, [bp+3] ;~ 01A2:D27C
cs=0x1a2;eip=0x00d27f; 	T(MOV(di, *(dw*)(raddr(ss,bp+8))));	// 33708                  mov     di, [bp+8] ;~ 01A2:D27F
cs=0x1a2;eip=0x00d282; 	T(OR(di, di));	// 33709                  or      di, di ;~ 01A2:D282
cs=0x1a2;eip=0x00d284; 	J(JS(loc_1d299));	// 33710                  js      short loc_1D299 ;~ 01A2:D284
cs=0x1a2;eip=0x00d286; 	T(XOR(cl, cl));	// 33711                  xor     cl, cl ;~ 01A2:D286
cs=0x1a2;eip=0x00d288; 	X(byte_1f74c = 0;);	// 33712                  mov     ds:byte_1F74C, 0 ;~ 01A2:D288
cs=0x1a2;eip=0x00d28d; 	T(MOV(si, *(dw*)(raddr(ss,bp+0x0C))));	// 33713                  mov     si, [bp+0Ch] ;~ 01A2:D28D
cs=0x1a2;eip=0x00d290; 	T(ax = seg_1f17e;);	// 33714                  mov     ax, seg_1F17E ;~ 01A2:D290
cs=0x1a2;eip=0x00d293; 	X(*(dw*)(((db*)&off_1f8c8)+2) = ax;);	// 33715                  mov     word ptr ds:off_1F8C8+2, ax ;~ 01A2:D293
cs=0x1a2;eip=0x00d296; 	J(CALL(sub_19080,0));	// 33716                  call    sub_19080 ;~ 01A2:D296
loc_1d299:
	// 6320 
cs=0x1a2;eip=0x00d299; 	X(POP(ds));	// 33720                  pop     ds ;~ 01A2:D299
cs=0x1a2;eip=0x00d29a; 	X(POP(es));	// 33721                  pop     es ;~ 01A2:D29A
cs=0x1a2;eip=0x00d29b; 	X(POP(di));	// 33723                  pop     di ;~ 01A2:D29B
cs=0x1a2;eip=0x00d29c; 	X(POP(si));	// 33724                  pop     si ;~ 01A2:D29C
cs=0x1a2;eip=0x00d29d; 	X(POP(bp));	// 33725                  pop     bp ;~ 01A2:D29D
cs=0x1a2;eip=0x00d29e; 	X(POP(dx));	// 33726                  pop     dx ;~ 01A2:D29E
cs=0x1a2;eip=0x00d29f; 	X(POP(cx));	// 33727                  pop     cx ;~ 01A2:D29F
cs=0x1a2;eip=0x00d2a0; 	X(POP(bx));	// 33728                  pop     bx ;~ 01A2:D2A0
cs=0x1a2;eip=0x00d2a1; 	X(POP(ax));	// 33729                  pop     ax ;~ 01A2:D2A1
cs=0x1a2;eip=0x00d2a2; 	T(ADD(bp, 0x10));	// 33730                  add     bp, 10h ;~ 01A2:D2A2
cs=0x1a2;eip=0x00d2a5; 	X(MOV(*(dw*)(raddr(ss,bp+0x0A)), 0x0FFFF));	// 33731                  mov     word ptr [bp+0Ah], 0FFFFh ;~ 01A2:D2A5
loc_1d2aa:
	// 6321 
cs=0x1a2;eip=0x00d2aa; 	X(POP(bx));	// 33734                  pop     bx ;~ 01A2:D2AA
cs=0x1a2;eip=0x00d2ab; 	X(POP(di));	// 33735                  pop     di ;~ 01A2:D2AB
cs=0x1a2;eip=0x00d2ac; 	T(ADD(di, 0x142));	// 33736                  add     di, 142h ;~ 01A2:D2AC
cs=0x1a2;eip=0x00d2b0; 	T(DEC(cl));	// 33737                  dec     cl ;~ 01A2:D2B0
cs=0x1a2;eip=0x00d2b2; 	J(JS(loc_1d2b7));	// 33738                  js      short loc_1D2B7 ;~ 01A2:D2B2
cs=0x1a2;eip=0x00d2b4; 	J(JMP(loc_1d217));	// 33739                  jmp     loc_1D217 ;~ 01A2:D2B4
loc_1d2b7:
	// 6322 
cs=0x1a2;eip=0x00d2b7; 	X(POP(cx));	// 33743                  pop     cx ;~ 01A2:D2B7
cs=0x1a2;eip=0x00d2b8; 	X(POP(di));	// 33744                  pop     di ;~ 01A2:D2B8
cs=0x1a2;eip=0x00d2b9; 	T(ADD(di, 0x13E));	// 33745                  add     di, 13Eh ;~ 01A2:D2B9
cs=0x1a2;eip=0x00d2bd; 	T(DEC(ch));	// 33746                  dec     ch ;~ 01A2:D2BD
cs=0x1a2;eip=0x00d2bf; 	J(JS(locret_1d2c4));	// 33747                  js      short locret_1D2C4 ;~ 01A2:D2BF
cs=0x1a2;eip=0x00d2c1; 	J(JMP(loc_1d215));	// 33748                  jmp     loc_1D215 ;~ 01A2:D2C1
locret_1d2c4:
	// 6323 
cs=0x1a2;eip=0x00d2c4; 	J(RETN(0));	// 33752                  retn ;~ 01A2:D2C4

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1d215: 	goto loc_1d215;
        case m2c::kloc_1d217: 	goto loc_1d217;
        case m2c::kloc_1d229: 	goto loc_1d229;
        case m2c::kloc_1d254: 	goto loc_1d254;
        case m2c::kloc_1d299: 	goto loc_1d299;
        case m2c::kloc_1d2aa: 	goto loc_1d2aa;
        case m2c::kloc_1d2b7: 	goto loc_1d2b7;
        case m2c::klocret_1d2c4: 	goto locret_1d2c4;
        case m2c::ksub_1d1fa: 	goto sub_1d1fa;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1d2c5(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1d2c5:
    _begin:
cs=0x1a2;eip=0x00d2c5; 	T(si = word_1f1ce;);	// 33760                  mov     si, word_1F1CE ;~ 01A2:D2C5
cs=0x1a2;eip=0x00d2c9; 	T(MOV(bl, *(raddr(ds,si+4))));	// 33761                  mov     bl, [si+4] ;~ 01A2:D2C9
cs=0x1a2;eip=0x00d2cc; 	T(MOV(bh, *(raddr(ds,si+5))));	// 33762                  mov     bh, [si+5] ;~ 01A2:D2CC
cs=0x1a2;eip=0x00d2cf; 	T(XOR(ah, ah));	// 33763                  xor     ah, ah ;~ 01A2:D2CF
cs=0x1a2;eip=0x00d2d1; 	T(XOR(dh, dh));	// 33764                  xor     dh, dh ;~ 01A2:D2D1
cs=0x1a2;eip=0x00d2d3; 	T(al = bl;);	// 33765                  mov     al, bl ;~ 01A2:D2D3
cs=0x1a2;eip=0x00d2d5; 	T(dl = bh;);	// 33766                  mov     dl, bh ;~ 01A2:D2D5
cs=0x1a2;eip=0x00d2d7; 	T(SUB(ax, 3));	// 33767                  sub     ax, 3 ;~ 01A2:D2D7
cs=0x1a2;eip=0x00d2da; 	T(SUB(dx, 3));	// 33768                  sub     dx, 3 ;~ 01A2:D2DA
cs=0x1a2;eip=0x00d2dd; 	T(SHL(dx, 1));	// 33769                  shl     dx, 1 ;~ 01A2:D2DD
cs=0x1a2;eip=0x00d2df; 	T(SHL(dx, 1));	// 33770                  shl     dx, 1 ;~ 01A2:D2DF
cs=0x1a2;eip=0x00d2e1; 	T(SHL(dx, 1));	// 33771                  shl     dx, 1 ;~ 01A2:D2E1
cs=0x1a2;eip=0x00d2e3; 	T(SHL(dx, 1));	// 33772                  shl     dx, 1 ;~ 01A2:D2E3
cs=0x1a2;eip=0x00d2e5; 	T(SHL(ax, 1));	// 33773                  shl     ax, 1 ;~ 01A2:D2E5
cs=0x1a2;eip=0x00d2e7; 	T(si = 0x4D30;);	// 33774                  mov     si, 4D30h ;~ 01A2:D2E7
cs=0x1a2;eip=0x00d2ea; 	T(ADD(si, dx));	// 33775                  add     si, dx ;~ 01A2:D2EA
cs=0x1a2;eip=0x00d2ec; 	T(ADD(si, ax));	// 33776                  add     si, ax ;~ 01A2:D2EC
cs=0x1a2;eip=0x00d2ee; 	T(MOV(si, *(dw*)(raddr(ss,si))));	// 33777                  mov     si, ss:[si] ;~ 01A2:D2EE
cs=0x1a2;eip=0x00d2f1; 	X(word_1f1c8 = si;);	// 33778                  mov     word_1F1C8, si ;~ 01A2:D2F1
cs=0x1a2;eip=0x00d2f5; 	T(di = 0x8DC;);	// 33779                  mov     di, 8DCh ;~ 01A2:D2F5
cs=0x1a2;eip=0x00d2f8; 	T(es = seg_1f8f4;);	// 33780                  mov     es, ds:seg_1F8F4 ;~ 01A2:D2F8
loc_1d2fc:
	// 6324 
cs=0x1a2;eip=0x00d2fc; 	T(ax = si;);	// 33784                  mov     ax, si ;~ 01A2:D2FC
cs=0x1a2;eip=0x00d2fe; 	T(cl = bl;);	// 33785                  mov     cl, bl ;~ 01A2:D2FE
cs=0x1a2;eip=0x00d300; 	T(XOR(ch, ch));	// 33786                  xor     ch, ch ;~ 01A2:D300
loc_1d302:
	// 6325 
cs=0x1a2;eip=0x00d302; 	X(STOSW);	// 33789                  stosw ;~ 01A2:D302
cs=0x1a2;eip=0x00d303; 	T(ADD(ax, 0x142));	// 33790                  add     ax, 142h ;~ 01A2:D303
cs=0x1a2;eip=0x00d306; 	J(LOOP(loc_1d302));	// 33791                  loop    loc_1D302 ;~ 01A2:D306
cs=0x1a2;eip=0x00d308; 	T(ADD(si, 0x13E));	// 33792                  add     si, 13Eh ;~ 01A2:D308
cs=0x1a2;eip=0x00d30c; 	T(DEC(bh));	// 33793                  dec     bh ;~ 01A2:D30C
cs=0x1a2;eip=0x00d30e; 	J(JNZ(loc_1d2fc));	// 33794                  jnz     short loc_1D2FC ;~ 01A2:D30E
cs=0x1a2;eip=0x00d310; 	J(RETN(0));	// 33795                  retn ;~ 01A2:D310

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1d2fc: 	goto loc_1d2fc;
        case m2c::kloc_1d302: 	goto loc_1d302;
        case m2c::ksub_1d2c5: 	goto sub_1d2c5;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_d311_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_d311_proc:
    _begin:
loc_1d311:
	// 6326 
cs=0x1a2;eip=0x00d311; 	X(PUSH(cx));	// 33802                  push    cx ;~ 01A2:D311
cs=0x1a2;eip=0x00d312; 	X(PUSH(ds));	// 33803                  push    ds ;~ 01A2:D312
cs=0x1a2;eip=0x00d313; 	X(POP(es));	// 33804                  pop     es ;~ 01A2:D313
cs=0x1a2;eip=0x00d314; 	T(ax = 0x0F812;);	// 33805                  mov     ax, 0F812h ;~ 01A2:D314
cs=0x1a2;eip=0x00d317; 	T(CMP(ax, si));	// 33806                  cmp     ax, si ;~ 01A2:D317
cs=0x1a2;eip=0x00d319; 	J(JNZ(loc_1d31e));	// 33807                  jnz     short loc_1D31E ;~ 01A2:D319
cs=0x1a2;eip=0x00d31b; 	T(si = 0x0F832;);	// 33808                  mov     si, 0F832h ;~ 01A2:D31B
loc_1d31e:
	// 6327 
cs=0x1a2;eip=0x00d31e; 	T(cx = 0x10;);	// 33811                  mov     cx, 10h ;~ 01A2:D31E
cs=0x1a2;eip=0x00d321; 	T(dx = 0x0FF0F;);	// 33812                  mov     dx, 0FF0Fh ;~ 01A2:D321
cs=0x1a2;eip=0x00d324; 	T(di = dx;);	// 33813                  mov     di, dx ;~ 01A2:D324
loc_1d326:
	// 6328 
cs=0x1a2;eip=0x00d326; 	J(CALL(sub_1d335,0));	// 33816                  call    sub_1D335 ;~ 01A2:D326
cs=0x1a2;eip=0x00d329; 	T(al = bl;);	// 33817                  mov     al, bl ;~ 01A2:D329
cs=0x1a2;eip=0x00d32b; 	X(STOSB);	// 33818                  stosb ;~ 01A2:D32B
cs=0x1a2;eip=0x00d32c; 	J(LOOP(loc_1d326));	// 33819                  loop    loc_1D326 ;~ 01A2:D32C
cs=0x1a2;eip=0x00d32e; 	T(ax = 0x1002;);	// 33820                  mov     ax, 1002h ;~ 01A2:D32E
cs=0x1a2;eip=0x00d331; 	S(_INT(0x10));	// 33821                  int     10h             ; - VIDEO - SET ALL PALETTE REGISTERS (Jr, PS, TANDY 1000, EGA, VGA) ;~ 01A2:D331
cs=0x1a2;eip=0x00d333; 	X(POP(cx));	// 33823                  pop     cx ;~ 01A2:D333
cs=0x1a2;eip=0x00d334; 	J(RETN(0));	// 33824                  retn ;~ 01A2:D334

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1d311: 	goto loc_1d311;
        case m2c::kloc_1d31e: 	goto loc_1d31e;
        case m2c::kloc_1d326: 	goto loc_1d326;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1d335(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1d335:
    _begin:
cs=0x1a2;eip=0x00d335; 	T(bl = 0;);	// 33831                  mov     bl, 0 ;~ 01A2:D335
cs=0x1a2;eip=0x00d337; 	T(LODSW);	// 33832                  lodsw ;~ 01A2:D337
cs=0x1a2;eip=0x00d338; 	T(ADD(ax, ax));	// 33833                  add     ax, ax ;~ 01A2:D338
cs=0x1a2;eip=0x00d33a; 	T(XCHG(al, ah));	// 33834                  xchg    al, ah ;~ 01A2:D33A
cs=0x1a2;eip=0x00d33c; 	T(TEST(al, 4));	// 33835                  test    al, 4 ;~ 01A2:D33C
cs=0x1a2;eip=0x00d33e; 	J(JZ(loc_1d343));	// 33836                  jz      short loc_1D343 ;~ 01A2:D33E
cs=0x1a2;eip=0x00d340; 	T(OR(bl, 4));	// 33837                  or      bl, 4 ;~ 01A2:D340
loc_1d343:
	// 6329 
cs=0x1a2;eip=0x00d343; 	T(TEST(al, 2));	// 33840                  test    al, 2 ;~ 01A2:D343
cs=0x1a2;eip=0x00d345; 	J(JZ(loc_1d34a));	// 33841                  jz      short loc_1D34A ;~ 01A2:D345
cs=0x1a2;eip=0x00d347; 	T(OR(bl, 0x20));	// 33842                  or      bl, 20h ;~ 01A2:D347
loc_1d34a:
	// 6330 
cs=0x1a2;eip=0x00d34a; 	T(TEST(ah, 0x40));	// 33845                  test    ah, 40h ;~ 01A2:D34A
cs=0x1a2;eip=0x00d34d; 	J(JZ(loc_1d352));	// 33846                  jz      short loc_1D352 ;~ 01A2:D34D
cs=0x1a2;eip=0x00d34f; 	T(OR(bl, 2));	// 33847                  or      bl, 2 ;~ 01A2:D34F
loc_1d352:
	// 6331 
cs=0x1a2;eip=0x00d352; 	T(TEST(ah, 0x20));	// 33850                  test    ah, 20h ;~ 01A2:D352
cs=0x1a2;eip=0x00d355; 	J(JZ(loc_1d35a));	// 33851                  jz      short loc_1D35A ;~ 01A2:D355
cs=0x1a2;eip=0x00d357; 	T(OR(bl, 0x10));	// 33852                  or      bl, 10h ;~ 01A2:D357
loc_1d35a:
	// 6332 
cs=0x1a2;eip=0x00d35a; 	T(TEST(ah, 4));	// 33855                  test    ah, 4 ;~ 01A2:D35A
cs=0x1a2;eip=0x00d35d; 	J(JZ(loc_1d362));	// 33856                  jz      short loc_1D362 ;~ 01A2:D35D
cs=0x1a2;eip=0x00d35f; 	T(OR(bl, 1));	// 33857                  or      bl, 1 ;~ 01A2:D35F
loc_1d362:
	// 6333 
cs=0x1a2;eip=0x00d362; 	T(TEST(ah, 2));	// 33860                  test    ah, 2 ;~ 01A2:D362
cs=0x1a2;eip=0x00d365; 	J(JZ(locret_1d36a));	// 33861                  jz      short locret_1D36A ;~ 01A2:D365
cs=0x1a2;eip=0x00d367; 	T(OR(bl, 8));	// 33862                  or      bl, 8 ;~ 01A2:D367
locret_1d36a:
	// 6334 
cs=0x1a2;eip=0x00d36a; 	J(RETN(0));	// 33865                  retn ;~ 01A2:D36A

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1d343: 	goto loc_1d343;
        case m2c::kloc_1d34a: 	goto loc_1d34a;
        case m2c::kloc_1d352: 	goto loc_1d352;
        case m2c::kloc_1d35a: 	goto loc_1d35a;
        case m2c::kloc_1d362: 	goto loc_1d362;
        case m2c::klocret_1d36a: 	goto locret_1d36a;
        case m2c::ksub_1d335: 	goto sub_1d335;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1d36b(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1d36b:
    _begin:
cs=0x1a2;eip=0x00d36b; 	T(ax = 0x10;);	// 33873                  mov     ax, 10h ;~ 01A2:D36B
cs=0x1a2;eip=0x00d36e; 	S(_INT(0x10));	// 33874                  int     10h             ; - VIDEO - SET VIDEO MODE ;~ 01A2:D36E
cs=0x1a2;eip=0x00d370; 	T(dx = 0x3DA;);	// 33876                  mov     dx, 3DAh ;~ 01A2:D370
loc_1d373:
	// 6335 
cs=0x1a2;eip=0x00d373; 	S(IN(al, dx));	// 33879                  in      al, dx          ; Video status bits: ;~ 01A2:D373
cs=0x1a2;eip=0x00d374; 	T(TEST(al, 8));	// 33884                  test    al, 8 ;~ 01A2:D374
cs=0x1a2;eip=0x00d376; 	J(JNZ(loc_1d373));	// 33885                  jnz     short loc_1D373 ;~ 01A2:D376
loc_1d378:
	// 6336 
cs=0x1a2;eip=0x00d378; 	S(IN(al, dx));	// 33888                  in      al, dx          ; Video status bits: ;~ 01A2:D378
cs=0x1a2;eip=0x00d379; 	T(TEST(al, 8));	// 33893                  test    al, 8 ;~ 01A2:D379
cs=0x1a2;eip=0x00d37b; 	J(JZ(loc_1d378));	// 33894                  jz      short loc_1D378 ;~ 01A2:D37B
cs=0x1a2;eip=0x00d37d; 	T(CLI);	// 33895                  cli ;~ 01A2:D37D
cs=0x1a2;eip=0x00d37e; 	T(dx = 0x3C2;);	// 33896                  mov     dx, 3C2h ;~ 01A2:D37E
cs=0x1a2;eip=0x00d381; 	T(al = byte_2f0d0;);	// 33897                  mov     al, ds:byte_2F0D0 ;~ 01A2:D381
cs=0x1a2;eip=0x00d384; 	S(OUT(dx, al));	// 33898                  out     dx, al          ; EGA : misc cntl ;~ 01A2:D384
cs=0x1a2;eip=0x00d385; 	T(dx = 0x3C4;);	// 33905                  mov     dx, 3C4h ;~ 01A2:D385
cs=0x1a2;eip=0x00d388; 	T(ax = 0x100;);	// 33906                  mov     ax, 100h ;~ 01A2:D388
cs=0x1a2;eip=0x00d38b; 	S(OUT(dx, ax));	// 33907                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D38B
cs=0x1a2;eip=0x00d38c; 	T(al = 1;);	// 33909                  mov     al, 1 ;~ 01A2:D38C
cs=0x1a2;eip=0x00d38e; 	T(ah = byte_2f0cf;);	// 33910                  mov     ah, ds:byte_2F0CF ;~ 01A2:D38E
cs=0x1a2;eip=0x00d392; 	S(OUT(dx, ax));	// 33911                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D392
cs=0x1a2;eip=0x00d393; 	T(ax = 0x300;);	// 33914                  mov     ax, 300h ;~ 01A2:D393
cs=0x1a2;eip=0x00d396; 	S(OUT(dx, ax));	// 33915                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D396
cs=0x1a2;eip=0x00d397; 	T(si = 0x0FF46;);	// 33917                  mov     si, 0FF46h ;~ 01A2:D397
cs=0x1a2;eip=0x00d39a; 	T(cl = 0;);	// 33918                  mov     cl, 0 ;~ 01A2:D39A
cs=0x1a2;eip=0x00d39c; 	T(dx = 0x3D4;);	// 33919                  mov     dx, 3D4h ;~ 01A2:D39C
cs=0x1a2;eip=0x00d39f; 	T(ax = 0x0E11;);	// 33920                  mov     ax, 0E11h ;~ 01A2:D39F
cs=0x1a2;eip=0x00d3a2; 	S(OUT(dx, ax));	// 33921                  out     dx, ax          ; Video: CRT cntrlr addr ;~ 01A2:D3A2
loc_1d3a3:
	// 6337 
cs=0x1a2;eip=0x00d3a3; 	T(LODSB);	// 33925                  lodsb ;~ 01A2:D3A3
cs=0x1a2;eip=0x00d3a4; 	T(ah = al;);	// 33926                  mov     ah, al ;~ 01A2:D3A4
cs=0x1a2;eip=0x00d3a6; 	T(al = cl;);	// 33927                  mov     al, cl ;~ 01A2:D3A6
cs=0x1a2;eip=0x00d3a8; 	S(OUT(dx, ax));	// 33928                  out     dx, ax          ; Video: CRT cntrlr addr ;~ 01A2:D3A8
cs=0x1a2;eip=0x00d3a9; 	T(INC(cl));	// 33930                  inc     cl ;~ 01A2:D3A9
cs=0x1a2;eip=0x00d3ab; 	T(CMP(si, 0x0FF5F));	// 33931                  cmp     si, 0FF5Fh ;~ 01A2:D3AB
cs=0x1a2;eip=0x00d3af; 	J(JC(loc_1d3a3));	// 33932                  jb      short loc_1D3A3 ;~ 01A2:D3AF
cs=0x1a2;eip=0x00d3b1; 	T(STI);	// 33933                  sti ;~ 01A2:D3B1
cs=0x1a2;eip=0x00d3b2; 	J(RETN(0));	// 33934                  retn ;~ 01A2:D3B2

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1d373: 	goto loc_1d373;
        case m2c::kloc_1d378: 	goto loc_1d378;
        case m2c::kloc_1d3a3: 	goto loc_1d3a3;
        case m2c::ksub_1d36b: 	goto sub_1d36b;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1d3b3(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1d3b3:
    _begin:
cs=0x1a2;eip=0x00d3b3; 	T(ax = 0x10;);	// 33942                  mov     ax, 10h ;~ 01A2:D3B3
cs=0x1a2;eip=0x00d3b6; 	S(_INT(0x10));	// 33943                  int     10h             ; - VIDEO - SET VIDEO MODE ;~ 01A2:D3B6
cs=0x1a2;eip=0x00d3b8; 	T(dx = 0x3DA;);	// 33945                  mov     dx, 3DAh ;~ 01A2:D3B8
loc_1d3bb:
	// 6338 
cs=0x1a2;eip=0x00d3bb; 	S(IN(al, dx));	// 33948                  in      al, dx          ; Video status bits: ;~ 01A2:D3BB
cs=0x1a2;eip=0x00d3bc; 	T(TEST(al, 8));	// 33953                  test    al, 8 ;~ 01A2:D3BC
cs=0x1a2;eip=0x00d3be; 	J(JNZ(loc_1d3bb));	// 33954                  jnz     short loc_1D3BB ;~ 01A2:D3BE
loc_1d3c0:
	// 6339 
cs=0x1a2;eip=0x00d3c0; 	S(IN(al, dx));	// 33957                  in      al, dx          ; Video status bits: ;~ 01A2:D3C0
cs=0x1a2;eip=0x00d3c1; 	T(TEST(al, 8));	// 33962                  test    al, 8 ;~ 01A2:D3C1
cs=0x1a2;eip=0x00d3c3; 	J(JZ(loc_1d3c0));	// 33963                  jz      short loc_1D3C0 ;~ 01A2:D3C3
cs=0x1a2;eip=0x00d3c5; 	T(CLI);	// 33964                  cli ;~ 01A2:D3C5
cs=0x1a2;eip=0x00d3c6; 	T(dx = 0x3C2;);	// 33965                  mov     dx, 3C2h ;~ 01A2:D3C6
cs=0x1a2;eip=0x00d3c9; 	T(al = byte_2f0eb;);	// 33966                  mov     al, ds:byte_2F0EB ;~ 01A2:D3C9
cs=0x1a2;eip=0x00d3cc; 	S(OUT(dx, al));	// 33967                  out     dx, al          ; EGA : misc cntl ;~ 01A2:D3CC
cs=0x1a2;eip=0x00d3cd; 	T(dx = 0x3C4;);	// 33974                  mov     dx, 3C4h ;~ 01A2:D3CD
cs=0x1a2;eip=0x00d3d0; 	T(ax = 0x100;);	// 33975                  mov     ax, 100h ;~ 01A2:D3D0
cs=0x1a2;eip=0x00d3d3; 	S(OUT(dx, ax));	// 33976                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D3D3
cs=0x1a2;eip=0x00d3d4; 	T(al = 1;);	// 33978                  mov     al, 1 ;~ 01A2:D3D4
cs=0x1a2;eip=0x00d3d6; 	T(ah = byte_2f0ea;);	// 33979                  mov     ah, ds:byte_2F0EA ;~ 01A2:D3D6
cs=0x1a2;eip=0x00d3da; 	S(OUT(dx, ax));	// 33980                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D3DA
cs=0x1a2;eip=0x00d3db; 	T(ax = 0x300;);	// 33983                  mov     ax, 300h ;~ 01A2:D3DB
cs=0x1a2;eip=0x00d3de; 	S(OUT(dx, ax));	// 33984                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D3DE
cs=0x1a2;eip=0x00d3df; 	T(si = 0x0FF61;);	// 33986                  mov     si, 0FF61h ;~ 01A2:D3DF
cs=0x1a2;eip=0x00d3e2; 	T(cl = 0;);	// 33987                  mov     cl, 0 ;~ 01A2:D3E2
cs=0x1a2;eip=0x00d3e4; 	T(dx = 0x3D4;);	// 33988                  mov     dx, 3D4h ;~ 01A2:D3E4
cs=0x1a2;eip=0x00d3e7; 	T(ax = 0x0E11;);	// 33989                  mov     ax, 0E11h ;~ 01A2:D3E7
cs=0x1a2;eip=0x00d3ea; 	S(OUT(dx, ax));	// 33990                  out     dx, ax          ; Video: CRT cntrlr addr ;~ 01A2:D3EA
loc_1d3eb:
	// 6340 
cs=0x1a2;eip=0x00d3eb; 	T(LODSB);	// 33994                  lodsb ;~ 01A2:D3EB
cs=0x1a2;eip=0x00d3ec; 	T(ah = al;);	// 33995                  mov     ah, al ;~ 01A2:D3EC
cs=0x1a2;eip=0x00d3ee; 	T(al = cl;);	// 33996                  mov     al, cl ;~ 01A2:D3EE
cs=0x1a2;eip=0x00d3f0; 	S(OUT(dx, ax));	// 33997                  out     dx, ax          ; Video: CRT cntrlr addr ;~ 01A2:D3F0
cs=0x1a2;eip=0x00d3f1; 	T(INC(cl));	// 33999                  inc     cl ;~ 01A2:D3F1
cs=0x1a2;eip=0x00d3f3; 	T(CMP(si, 0x0FF7A));	// 34000                  cmp     si, 0FF7Ah ;~ 01A2:D3F3
cs=0x1a2;eip=0x00d3f7; 	J(JC(loc_1d3eb));	// 34001                  jb      short loc_1D3EB ;~ 01A2:D3F7
cs=0x1a2;eip=0x00d3f9; 	T(STI);	// 34002                  sti ;~ 01A2:D3F9
cs=0x1a2;eip=0x00d3fa; 	J(RETN(0));	// 34003                  retn ;~ 01A2:D3FA

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1d3bb: 	goto loc_1d3bb;
        case m2c::kloc_1d3c0: 	goto loc_1d3c0;
        case m2c::kloc_1d3eb: 	goto loc_1d3eb;
        case m2c::ksub_1d3b3: 	goto sub_1d3b3;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1d3fb(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1d3fb:
    _begin:
cs=0x1a2;eip=0x00d3fb; 	T(ax = ds;);	// 34012                  mov     ax, ds ;~ 01A2:D3FB
cs=0x1a2;eip=0x00d3fd; 	T(es = ax;);	// 34013                  mov     es, ax ;~ 01A2:D3FD
cs=0x1a2;eip=0x00d3ff; 	T(ah = 0x0F;);	// 34015                  mov     ah, 0Fh ;~ 01A2:D3FF
cs=0x1a2;eip=0x00d401; 	S(_INT(0x10));	// 34016                  int     10h             ; - VIDEO - GET CURRENT VIDEO MODE ;~ 01A2:D401
cs=0x1a2;eip=0x00d403; 	X(byte_1f8e1 = al;);	// 34020                  mov     ds:byte_1F8E1, al ;~ 01A2:D403
cs=0x1a2;eip=0x00d406; 	T(CMP(byte_1f91b, 0x45));	// 34021                  cmp     ds:byte_1F91B, 45h ; 'E' ;~ 01A2:D406
cs=0x1a2;eip=0x00d40b; 	J(JNZ(loc_1d412));	// 34022                  jnz     short loc_1D412 ;~ 01A2:D40B
cs=0x1a2;eip=0x00d40d; 	J(CALL(sub_1d36b,0));	// 34023                  call    sub_1D36B ;~ 01A2:D40D
cs=0x1a2;eip=0x00d410; 	J(JMP(loc_1d423));	// 34024                  jmp     short loc_1D423 ;~ 01A2:D410
loc_1d412:
	// 6341 
cs=0x1a2;eip=0x00d412; 	T(CMP(byte_1f91b, 0x69));	// 34028                  cmp     ds:byte_1F91B, 69h ; 'i' ;~ 01A2:D412
cs=0x1a2;eip=0x00d417; 	J(JNZ(loc_1d41e));	// 34029                  jnz     short loc_1D41E ;~ 01A2:D417
cs=0x1a2;eip=0x00d419; 	J(CALL(sub_1d3b3,0));	// 34030                  call    sub_1D3B3 ;~ 01A2:D419
cs=0x1a2;eip=0x00d41c; 	J(JMP(loc_1d423));	// 34031                  jmp     short loc_1D423 ;~ 01A2:D41C
loc_1d41e:
	// 6342 
cs=0x1a2;eip=0x00d41e; 	T(ax = 0x0D;);	// 34035                  mov     ax, 0Dh ;~ 01A2:D41E
cs=0x1a2;eip=0x00d421; 	S(_INT(0x10));	// 34036                  int     10h             ; - VIDEO - SET VIDEO MODE ;~ 01A2:D421
loc_1d423:
	// 6343 
cs=0x1a2;eip=0x00d423; 	X(word_1f18a = 0x0A000;);	// 34041                  mov     word_1F18A, 0A000h ;~ 01A2:D423
cs=0x1a2;eip=0x00d429; 	X(*(dw*)(((db*)&seg_1f171)+1) = 0x0A000;);	// 34042                  mov     seg_1F171+1, 0A000h ;~ 01A2:D429
cs=0x1a2;eip=0x00d42f; 	X(word_1f18c = 0x0A200;);	// 34043                  mov     word_1F18C, 0A200h ;~ 01A2:D42F
cs=0x1a2;eip=0x00d435; 	X(*(dw*)(&unk_1f170) = 0x0A200;);	// 34044                  mov     word ptr unk_1F170, 0A200h ;~ 01A2:D435
cs=0x1a2;eip=0x00d43b; 	X(word_1f91e = 0x0A400;);	// 34045                  mov     ds:word_1F91E, 0A400h ;~ 01A2:D43B
cs=0x1a2;eip=0x00d441; 	J(CALL(sub_1d448,0));	// 34046                  call    sub_1D448 ;~ 01A2:D441
cs=0x1a2;eip=0x00d444; 	J(RETN(0));	// 34047                  retn ;~ 01A2:D444

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1d412: 	goto loc_1d412;
        case m2c::kloc_1d41e: 	goto loc_1d41e;
        case m2c::kloc_1d423: 	goto loc_1d423;
        case m2c::ksub_1d3fb: 	goto sub_1d3fb;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1d445(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1d445:
    _begin:
cs=0x1a2;eip=0x00d445; 	J(return sub_186f2(0, _state););	// 34057                  jmp     sub_186F2 ;~ 01A2:D445

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1d445: 	goto sub_1d445;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1d448(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1d448:
    _begin:
cs=0x1a2;eip=0x00d448; 	T(ax = *(dw*)(((db*)&seg_1f171)+1););	// 34066                  mov     ax, seg_1F171+1 ;~ 01A2:D448
cs=0x1a2;eip=0x00d44b; 	T(AND(ah, 0x0F));	// 34067                  and     ah, 0Fh ;~ 01A2:D44B
cs=0x1a2;eip=0x00d44e; 	T(SHL(ah, 1));	// 34068                  shl     ah, 1 ;~ 01A2:D44E
cs=0x1a2;eip=0x00d450; 	T(SHL(ah, 1));	// 34069                  shl     ah, 1 ;~ 01A2:D450
cs=0x1a2;eip=0x00d452; 	T(SHL(ah, 1));	// 34070                  shl     ah, 1 ;~ 01A2:D452
cs=0x1a2;eip=0x00d454; 	T(SHL(ah, 1));	// 34071                  shl     ah, 1 ;~ 01A2:D454
cs=0x1a2;eip=0x00d456; 	T(cl = ah;);	// 34072                  mov     cl, ah ;~ 01A2:D456
cs=0x1a2;eip=0x00d458; 	T(dx = 0x3D4;);	// 34073                  mov     dx, 3D4h ;~ 01A2:D458
cs=0x1a2;eip=0x00d45b; 	T(ax = 0x0D;);	// 34074                  mov     ax, 0Dh ;~ 01A2:D45B
cs=0x1a2;eip=0x00d45e; 	S(OUT(dx, ax));	// 34075                  out     dx, ax          ; Video: CRT cntrlr addr ;~ 01A2:D45E
cs=0x1a2;eip=0x00d45f; 	T(dx = 0x3D4;);	// 34077                  mov     dx, 3D4h ;~ 01A2:D45F
cs=0x1a2;eip=0x00d462; 	T(al = 0x0C;);	// 34078                  mov     al, 0Ch ;~ 01A2:D462
cs=0x1a2;eip=0x00d464; 	T(ah = cl;);	// 34079                  mov     ah, cl ;~ 01A2:D464
cs=0x1a2;eip=0x00d466; 	S(OUT(dx, ax));	// 34080                  out     dx, ax          ; Video: CRT cntrlr addr ;~ 01A2:D466
cs=0x1a2;eip=0x00d467; 	J(RETN(0));	// 34082                  retn ;~ 01A2:D467

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1d448: 	goto sub_1d448;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_d468_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_d468_proc:
    _begin:
loc_1d468:
	// 6344 
cs=0x1a2;eip=0x00d468; 	T(dx = 0x3C4;);	// 34088                  mov     dx, 3C4h ;~ 01A2:D468
cs=0x1a2;eip=0x00d46b; 	T(ax = 0x0F02;);	// 34089                  mov     ax, 0F02h ;~ 01A2:D46B
cs=0x1a2;eip=0x00d46e; 	S(OUT(dx, ax));	// 34090                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D46E
cs=0x1a2;eip=0x00d46f; 	T(dx = 0x3CE;);	// 34092                  mov     dx, 3CEh ;~ 01A2:D46F
cs=0x1a2;eip=0x00d472; 	T(ax = 0x105;);	// 34093                  mov     ax, 105h ;~ 01A2:D472
cs=0x1a2;eip=0x00d475; 	S(OUT(dx, ax));	// 34094                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D475
cs=0x1a2;eip=0x00d476; 	T(ax = 7;);	// 34096                  mov     ax, 7 ;~ 01A2:D476
cs=0x1a2;eip=0x00d479; 	S(OUT(dx, ax));	// 34097                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D479
cs=0x1a2;eip=0x00d47a; 	T(ax = 3;);	// 34100                  mov     ax, 3 ;~ 01A2:D47A
cs=0x1a2;eip=0x00d47d; 	S(OUT(dx, ax));	// 34101                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D47D
cs=0x1a2;eip=0x00d47e; 	T(ax = ds;);	// 34106                  mov     ax, ds ;~ 01A2:D47E
cs=0x1a2;eip=0x00d480; 	T(es = *(dw*)(((db*)&seg_1f171)+1););	// 34107                  mov     es, seg_1F171+1 ;~ 01A2:D480
cs=0x1a2;eip=0x00d484; 	T(ds = *(dw*)(&unk_1f170););	// 34109                  mov     ds, word ptr unk_1F170 ;~ 01A2:D484
cs=0x1a2;eip=0x00d488; 	T(XOR(si, si));	// 34111                  xor     si, si ;~ 01A2:D488
cs=0x1a2;eip=0x00d48a; 	T(XOR(di, di));	// 34112                  xor     di, di ;~ 01A2:D48A
cs=0x1a2;eip=0x00d48c; 	T(dl = 0x0C8;);	// 34113                  mov     dl, 0C8h ;~ 01A2:D48C
loc_1d48e:
	// 6345 
cs=0x1a2;eip=0x00d48e; 	T(cx = 0x1A;);	// 34116                  mov     cx, 1Ah ;~ 01A2:D48E
	// 34117                  rep movsb ;~ 01A2:D491
cs=0x1a2;eip=0x00d491; 	X(	REP MOVSB);	// 34117                  rep movsb ;~ 01A2:D491
cs=0x1a2;eip=0x00d493; 	T(ADD(si, 0x0E));	// 34118                  add     si, 0Eh ;~ 01A2:D493
cs=0x1a2;eip=0x00d496; 	T(ADD(di, 0x0E));	// 34119                  add     di, 0Eh ;~ 01A2:D496
cs=0x1a2;eip=0x00d499; 	T(DEC(dl));	// 34120                  dec     dl ;~ 01A2:D499
cs=0x1a2;eip=0x00d49b; 	J(JNZ(loc_1d48e));	// 34121                  jnz     short loc_1D48E ;~ 01A2:D49B
cs=0x1a2;eip=0x00d49d; 	T(ds = ax;);	// 34122                  mov     ds, ax ;~ 01A2:D49D
cs=0x1a2;eip=0x00d49f; 	J(RETN(0));	// 34123                  retn ;~ 01A2:D49F

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1d468: 	goto loc_1d468;
        case m2c::kloc_1d48e: 	goto loc_1d48e;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1d4a0(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1d4a0:
    _begin:
cs=0x1a2;eip=0x00d4a0; 	T(XOR(di, di));	// 34131                  xor     di, di ;~ 01A2:D4A0
cs=0x1a2;eip=0x00d4a2; 	T(cx = 0x0FA0;);	// 34132                  mov     cx, 0FA0h ;~ 01A2:D4A2
cs=0x1a2;eip=0x00d4a5; 	J({;});	// 34133                  jmp     short $+2 ;~ 01A2:D4A5
loc_1d4a7:
	// 6346 
cs=0x1a2;eip=0x00d4a7; 	T(dx = 0x3C4;);	// 34137                  mov     dx, 3C4h ;~ 01A2:D4A7
cs=0x1a2;eip=0x00d4aa; 	T(ax = 0x0F02;);	// 34138                  mov     ax, 0F02h ;~ 01A2:D4AA
cs=0x1a2;eip=0x00d4ad; 	S(OUT(dx, ax));	// 34139                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D4AD
cs=0x1a2;eip=0x00d4ae; 	T(dx = 0x3CE;);	// 34141                  mov     dx, 3CEh ;~ 01A2:D4AE
cs=0x1a2;eip=0x00d4b1; 	T(ax = 0x805;);	// 34142                  mov     ax, 805h ;~ 01A2:D4B1
cs=0x1a2;eip=0x00d4b4; 	S(OUT(dx, ax));	// 34143                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D4B4
cs=0x1a2;eip=0x00d4b5; 	T(ax = 7;);	// 34145                  mov     ax, 7 ;~ 01A2:D4B5
cs=0x1a2;eip=0x00d4b8; 	S(OUT(dx, ax));	// 34146                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D4B8
cs=0x1a2;eip=0x00d4b9; 	T(ax = 3;);	// 34149                  mov     ax, 3 ;~ 01A2:D4B9
cs=0x1a2;eip=0x00d4bc; 	S(OUT(dx, ax));	// 34150                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D4BC
cs=0x1a2;eip=0x00d4bd; 	T(es = *(dw*)(((db*)&seg_1f171)+1););	// 34155                  mov     es, seg_1F171+1 ;~ 01A2:D4BD
cs=0x1a2;eip=0x00d4c1; 	T(XOR(ax, ax));	// 34156                  xor     ax, ax ;~ 01A2:D4C1
	// 34157                  rep stosw ;~ 01A2:D4C3
cs=0x1a2;eip=0x00d4c3; 	X(	REP STOSW);	// 34157                  rep stosw ;~ 01A2:D4C3
cs=0x1a2;eip=0x00d4c5; 	J(RETN(0));	// 34158                  retn ;~ 01A2:D4C5

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1d4a7: 	goto loc_1d4a7;
        case m2c::ksub_1d4a0: 	goto sub_1d4a0;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1d4c6(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1d4c6:
    _begin:
cs=0x1a2;eip=0x00d4c6; 	T(CMP(byte_1f91b, 0x43));	// 34170                  cmp     ds:byte_1F91B, 43h ; 'C' ;~ 01A2:D4C6
cs=0x1a2;eip=0x00d4cb; 	J(JZ(loc_1d4d0));	// 34171                  jz      short loc_1D4D0 ;~ 01A2:D4CB
cs=0x1a2;eip=0x00d4cd; 	J(return seg000_d311_proc(m2c::kloc_1d311, _state););	// 34172                  jmp     loc_1D311 ;~ 01A2:D4CD
loc_1d4d0:
	// 6347 
cs=0x1a2;eip=0x00d4d0; 	X(PUSH(cx));	// 34176                  push    cx ;~ 01A2:D4D0
cs=0x1a2;eip=0x00d4d1; 	T(es = seg_1f8f4;);	// 34177                  mov     es, ds:seg_1F8F4 ;~ 01A2:D4D1
cs=0x1a2;eip=0x00d4d5; 	T(di = 0x0FF0F;);	// 34179                  mov     di, 0FF0Fh ;~ 01A2:D4D5
cs=0x1a2;eip=0x00d4d8; 	T(cx = 0x10;);	// 34180                  mov     cx, 10h ;~ 01A2:D4D8
loc_1d4db:
	// 6348 
cs=0x1a2;eip=0x00d4db; 	T(LODSW);	// 34183                  lodsw ;~ 01A2:D4DB
cs=0x1a2;eip=0x00d4dc; 	T(XCHG(ah, al));	// 34184                  xchg    ah, al ;~ 01A2:D4DC
cs=0x1a2;eip=0x00d4de; 	T(bx = ax;);	// 34185                  mov     bx, ax ;~ 01A2:D4DE
cs=0x1a2;eip=0x00d4e0; 	J(CALL(sub_1d515,0));	// 34186                  call    sub_1D515 ;~ 01A2:D4E0
cs=0x1a2;eip=0x00d4e3; 	T(al = bh;);	// 34187                  mov     al, bh ;~ 01A2:D4E3
cs=0x1a2;eip=0x00d4e5; 	T(SHR(al, 1));	// 34188                  shr     al, 1 ;~ 01A2:D4E5
cs=0x1a2;eip=0x00d4e7; 	T(SHR(al, 1));	// 34189                  shr     al, 1 ;~ 01A2:D4E7
cs=0x1a2;eip=0x00d4e9; 	T(SHR(al, 1));	// 34190                  shr     al, 1 ;~ 01A2:D4E9
cs=0x1a2;eip=0x00d4eb; 	T(SHR(al, 1));	// 34191                  shr     al, 1 ;~ 01A2:D4EB
cs=0x1a2;eip=0x00d4ed; 	J(CALL(sub_1d515,0));	// 34192                  call    sub_1D515 ;~ 01A2:D4ED
cs=0x1a2;eip=0x00d4f0; 	T(al = bh;);	// 34193                  mov     al, bh ;~ 01A2:D4F0
cs=0x1a2;eip=0x00d4f2; 	T(AND(al, 7));	// 34194                  and     al, 7 ;~ 01A2:D4F2
cs=0x1a2;eip=0x00d4f4; 	J(CALL(sub_1d515,0));	// 34195                  call    sub_1D515 ;~ 01A2:D4F4
cs=0x1a2;eip=0x00d4f7; 	J(LOOP(loc_1d4db));	// 34196                  loop    loc_1D4DB ;~ 01A2:D4F7
cs=0x1a2;eip=0x00d4f9; 	T(ax = ds;);	// 34197                  mov     ax, ds ;~ 01A2:D4F9
cs=0x1a2;eip=0x00d4fb; 	T(es = ax;);	// 34198                  mov     es, ax ;~ 01A2:D4FB
cs=0x1a2;eip=0x00d4fd; 	T(dx = 0x0FEFE;);	// 34199                  mov     dx, 0FEFEh ;~ 01A2:D4FD
cs=0x1a2;eip=0x00d500; 	T(ax = 0x1002;);	// 34200                  mov     ax, 1002h ;~ 01A2:D500
cs=0x1a2;eip=0x00d503; 	S(_INT(0x10));	// 34201                  int     10h             ; - VIDEO - SET ALL PALETTE REGISTERS (Jr, PS, TANDY 1000, EGA, VGA) ;~ 01A2:D503
cs=0x1a2;eip=0x00d505; 	T(bx = 0;);	// 34203                  mov     bx, 0 ;~ 01A2:D505
cs=0x1a2;eip=0x00d508; 	T(cx = 0x30;);	// 34204                  mov     cx, 30h ; '0' ;~ 01A2:D508
cs=0x1a2;eip=0x00d50b; 	T(dx = 0x0FF0F;);	// 34205                  mov     dx, 0FF0Fh ;~ 01A2:D50B
cs=0x1a2;eip=0x00d50e; 	T(ax = 0x1012;);	// 34206                  mov     ax, 1012h ;~ 01A2:D50E
cs=0x1a2;eip=0x00d511; 	S(_INT(0x10));	// 34207                  int     10h             ; - VIDEO - SET BLOCK OF DAC REGISTERS (EGA, VGA/MCGA) ;~ 01A2:D511
cs=0x1a2;eip=0x00d513; 	X(POP(cx));	// 34211                  pop     cx ;~ 01A2:D513
cs=0x1a2;eip=0x00d514; 	J(RETN(0));	// 34212                  retn ;~ 01A2:D514

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1d4d0: 	goto loc_1d4d0;
        case m2c::kloc_1d4db: 	goto loc_1d4db;
        case m2c::ksub_1d4c6: 	goto sub_1d4c6;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1d515(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1d515:
    _begin:
cs=0x1a2;eip=0x00d515; 	T(AND(al, al));	// 34221                  and     al, al ;~ 01A2:D515
cs=0x1a2;eip=0x00d517; 	J(JZ(loc_1d521));	// 34222                  jz      short loc_1D521 ;~ 01A2:D517
cs=0x1a2;eip=0x00d519; 	T(dl = 0x3F;);	// 34223                  mov     dl, 3Fh ; '?' ;~ 01A2:D519
cs=0x1a2;eip=0x00d51b; 	T(MUL1_1(dl));	// 34224                  mul     dl ;~ 01A2:D51B
cs=0x1a2;eip=0x00d51d; 	T(dl = 7;);	// 34225                  mov     dl, 7 ;~ 01A2:D51D
cs=0x1a2;eip=0x00d51f; 	T(DIV1(dl));	// 34226                  div     dl ;~ 01A2:D51F
loc_1d521:
	// 6349 
cs=0x1a2;eip=0x00d521; 	X(STOSB);	// 34229                  stosb ;~ 01A2:D521
cs=0x1a2;eip=0x00d522; 	J(RETN(0));	// 34230                  retn ;~ 01A2:D522

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1d521: 	goto loc_1d521;
        case m2c::ksub_1d515: 	goto sub_1d515;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1d523(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1d523:
    _begin:
cs=0x1a2;eip=0x00d523; 	X(PUSH(ds));	// 34240                  push    ds ;~ 01A2:D523
cs=0x1a2;eip=0x00d524; 	X(byte_1f76b = al;);	// 34241                  mov     ds:byte_1F76B, al ;~ 01A2:D524
cs=0x1a2;eip=0x00d527; 	T(si = word_1f1bc;);	// 34242                  mov     si, word_1F1BC ;~ 01A2:D527
cs=0x1a2;eip=0x00d52b; 	T(es = *(dw*)(((db*)&seg_1f171)+1););	// 34243                  mov     es, seg_1F171+1 ;~ 01A2:D52B
cs=0x1a2;eip=0x00d52f; 	T(ax = seg_offset(seg010););	// 34245                  mov     ax, seg seg010 ;~ 01A2:D52F
cs=0x1a2;eip=0x00d532; 	T(ds = ax;);	// 34246                  mov     ds, ax ;~ 01A2:D532
cs=0x1a2;eip=0x00d534; 	T(di = 0x11F8;);	// 34248                  mov     di, 11F8h ;~ 01A2:D534
cs=0x1a2;eip=0x00d537; 	X(byte_70098 = 0x73;);	// 34249                  mov     ss:byte_70098, 73h ; 's' ;~ 01A2:D537
cs=0x1a2;eip=0x00d53d; 	T(cl = 0x0FF;);	// 34250                  mov     cl, 0FFh ;~ 01A2:D53D
cs=0x1a2;eip=0x00d53f; 	X(*(dw*)(&unk_7009e) = 0x24;);	// 34251                  mov     word ptr ss:unk_7009E, 24h ; '$' ;~ 01A2:D53F
cs=0x1a2;eip=0x00d546; 	T(XOR(bp, bp));	// 34252                  xor     bp, bp ;~ 01A2:D546
loc_1d548:
	// 6350 
cs=0x1a2;eip=0x00d548; 	T(DEC(bp));	// 34255                  dec     bp ;~ 01A2:D548
cs=0x1a2;eip=0x00d549; 	T(bx = bp;);	// 34256                  mov     bx, bp ;~ 01A2:D549
loc_1d54b:
	// 6351 
cs=0x1a2;eip=0x00d54b; 	T(ch = cl;);	// 34259                  mov     ch, cl ;~ 01A2:D54B
cs=0x1a2;eip=0x00d54d; 	T(OR(cl, cl));	// 34260                  or      cl, cl ;~ 01A2:D54D
cs=0x1a2;eip=0x00d54f; 	J(JNS(loc_1d554));	// 34261                  jns     short loc_1D554 ;~ 01A2:D54F
cs=0x1a2;eip=0x00d551; 	J(JMP(loc_1d5de));	// 34262                  jmp     loc_1D5DE ;~ 01A2:D551
loc_1d554:
	// 6352 
cs=0x1a2;eip=0x00d554; 	T(ADD(si, *(dw*)(&unk_7009a)));	// 34266                  add     si, word ptr ss:unk_7009A ;~ 01A2:D554
cs=0x1a2;eip=0x00d559; 	T(dx = 0x3C4;);	// 34267                  mov     dx, 3C4h ;~ 01A2:D559
cs=0x1a2;eip=0x00d55c; 	T(ax = 0x102;);	// 34268                  mov     ax, 102h ;~ 01A2:D55C
cs=0x1a2;eip=0x00d55f; 	S(OUT(dx, ax));	// 34269                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D55F
cs=0x1a2;eip=0x00d560; 	T(dx = 0x3CE;);	// 34271                  mov     dx, 3CEh ;~ 01A2:D560
cs=0x1a2;eip=0x00d563; 	T(ax = 5;);	// 34272                  mov     ax, 5 ;~ 01A2:D563
cs=0x1a2;eip=0x00d566; 	S(OUT(dx, ax));	// 34273                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D566
cs=0x1a2;eip=0x00d567; 	T(ax = 3;);	// 34280                  mov     ax, 3 ;~ 01A2:D567
cs=0x1a2;eip=0x00d56a; 	S(OUT(dx, ax));	// 34281                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D56A
cs=0x1a2;eip=0x00d56b; 	T(ax = 4;);	// 34286                  mov     ax, 4 ;~ 01A2:D56B
cs=0x1a2;eip=0x00d56e; 	S(OUT(dx, ax));	// 34287                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D56E
cs=0x1a2;eip=0x00d56f; 	T(al = ch;);	// 34290                  mov     al, ch ;~ 01A2:D56F
cs=0x1a2;eip=0x00d571; 	X(PUSH(si));	// 34291                  push    si ;~ 01A2:D571
cs=0x1a2;eip=0x00d572; 	X(PUSH(di));	// 34292                  push    di ;~ 01A2:D572
loc_1d573:
	// 6353 
cs=0x1a2;eip=0x00d573; 	X(MOVSW);	// 34295                  movsw ;~ 01A2:D573
cs=0x1a2;eip=0x00d574; 	T(ADD(si, 6));	// 34296                  add     si, 6 ;~ 01A2:D574
cs=0x1a2;eip=0x00d577; 	T(DEC(al));	// 34297                  dec     al ;~ 01A2:D577
cs=0x1a2;eip=0x00d579; 	J(JNS(loc_1d573));	// 34298                  jns     short loc_1D573 ;~ 01A2:D579
cs=0x1a2;eip=0x00d57b; 	X(POP(di));	// 34299                  pop     di ;~ 01A2:D57B
cs=0x1a2;eip=0x00d57c; 	X(POP(si));	// 34300                  pop     si ;~ 01A2:D57C
cs=0x1a2;eip=0x00d57d; 	T(ADD(si, 2));	// 34301                  add     si, 2 ;~ 01A2:D57D
cs=0x1a2;eip=0x00d580; 	T(dx = 0x3CE;);	// 34302                  mov     dx, 3CEh ;~ 01A2:D580
cs=0x1a2;eip=0x00d583; 	T(ax = 0x104;);	// 34303                  mov     ax, 104h ;~ 01A2:D583
cs=0x1a2;eip=0x00d586; 	S(OUT(dx, ax));	// 34304                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D586
cs=0x1a2;eip=0x00d587; 	T(dx = 0x3C4;);	// 34306                  mov     dx, 3C4h ;~ 01A2:D587
cs=0x1a2;eip=0x00d58a; 	T(ax = 0x202;);	// 34307                  mov     ax, 202h ;~ 01A2:D58A
cs=0x1a2;eip=0x00d58d; 	S(OUT(dx, ax));	// 34308                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D58D
cs=0x1a2;eip=0x00d58e; 	T(al = ch;);	// 34310                  mov     al, ch ;~ 01A2:D58E
cs=0x1a2;eip=0x00d590; 	X(PUSH(si));	// 34311                  push    si ;~ 01A2:D590
cs=0x1a2;eip=0x00d591; 	X(PUSH(di));	// 34312                  push    di ;~ 01A2:D591
loc_1d592:
	// 6354 
cs=0x1a2;eip=0x00d592; 	X(MOVSW);	// 34315                  movsw ;~ 01A2:D592
cs=0x1a2;eip=0x00d593; 	T(ADD(si, 6));	// 34316                  add     si, 6 ;~ 01A2:D593
cs=0x1a2;eip=0x00d596; 	T(DEC(al));	// 34317                  dec     al ;~ 01A2:D596
cs=0x1a2;eip=0x00d598; 	J(JNS(loc_1d592));	// 34318                  jns     short loc_1D592 ;~ 01A2:D598
cs=0x1a2;eip=0x00d59a; 	X(POP(di));	// 34319                  pop     di ;~ 01A2:D59A
cs=0x1a2;eip=0x00d59b; 	X(POP(si));	// 34320                  pop     si ;~ 01A2:D59B
cs=0x1a2;eip=0x00d59c; 	T(ADD(si, 2));	// 34321                  add     si, 2 ;~ 01A2:D59C
cs=0x1a2;eip=0x00d59f; 	T(dx = 0x3CE;);	// 34322                  mov     dx, 3CEh ;~ 01A2:D59F
cs=0x1a2;eip=0x00d5a2; 	T(ax = 0x204;);	// 34323                  mov     ax, 204h ;~ 01A2:D5A2
cs=0x1a2;eip=0x00d5a5; 	S(OUT(dx, ax));	// 34324                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D5A5
cs=0x1a2;eip=0x00d5a6; 	T(dx = 0x3C4;);	// 34326                  mov     dx, 3C4h ;~ 01A2:D5A6
cs=0x1a2;eip=0x00d5a9; 	T(ax = 0x402;);	// 34327                  mov     ax, 402h ;~ 01A2:D5A9
cs=0x1a2;eip=0x00d5ac; 	S(OUT(dx, ax));	// 34328                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D5AC
cs=0x1a2;eip=0x00d5ad; 	T(al = ch;);	// 34330                  mov     al, ch ;~ 01A2:D5AD
cs=0x1a2;eip=0x00d5af; 	X(PUSH(si));	// 34331                  push    si ;~ 01A2:D5AF
cs=0x1a2;eip=0x00d5b0; 	X(PUSH(di));	// 34332                  push    di ;~ 01A2:D5B0
loc_1d5b1:
	// 6355 
cs=0x1a2;eip=0x00d5b1; 	X(MOVSW);	// 34335                  movsw ;~ 01A2:D5B1
cs=0x1a2;eip=0x00d5b2; 	T(ADD(si, 6));	// 34336                  add     si, 6 ;~ 01A2:D5B2
cs=0x1a2;eip=0x00d5b5; 	T(DEC(al));	// 34337                  dec     al ;~ 01A2:D5B5
cs=0x1a2;eip=0x00d5b7; 	J(JNS(loc_1d5b1));	// 34338                  jns     short loc_1D5B1 ;~ 01A2:D5B7
cs=0x1a2;eip=0x00d5b9; 	X(POP(di));	// 34339                  pop     di ;~ 01A2:D5B9
cs=0x1a2;eip=0x00d5ba; 	X(POP(si));	// 34340                  pop     si ;~ 01A2:D5BA
cs=0x1a2;eip=0x00d5bb; 	T(ADD(si, 2));	// 34341                  add     si, 2 ;~ 01A2:D5BB
cs=0x1a2;eip=0x00d5be; 	T(dx = 0x3CE;);	// 34342                  mov     dx, 3CEh ;~ 01A2:D5BE
cs=0x1a2;eip=0x00d5c1; 	T(ax = 0x304;);	// 34343                  mov     ax, 304h ;~ 01A2:D5C1
cs=0x1a2;eip=0x00d5c4; 	S(OUT(dx, ax));	// 34344                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D5C4
cs=0x1a2;eip=0x00d5c5; 	T(dx = 0x3C4;);	// 34346                  mov     dx, 3C4h ;~ 01A2:D5C5
cs=0x1a2;eip=0x00d5c8; 	T(ax = 0x802;);	// 34347                  mov     ax, 802h ;~ 01A2:D5C8
cs=0x1a2;eip=0x00d5cb; 	S(OUT(dx, ax));	// 34348                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D5CB
cs=0x1a2;eip=0x00d5cc; 	T(al = ch;);	// 34350                  mov     al, ch ;~ 01A2:D5CC
loc_1d5ce:
	// 6356 
cs=0x1a2;eip=0x00d5ce; 	X(MOVSW);	// 34353                  movsw ;~ 01A2:D5CE
cs=0x1a2;eip=0x00d5cf; 	T(ADD(si, 6));	// 34354                  add     si, 6 ;~ 01A2:D5CF
cs=0x1a2;eip=0x00d5d2; 	T(DEC(al));	// 34355                  dec     al ;~ 01A2:D5D2
cs=0x1a2;eip=0x00d5d4; 	J(JNS(loc_1d5ce));	// 34356                  jns     short loc_1D5CE ;~ 01A2:D5D4
cs=0x1a2;eip=0x00d5d6; 	T(SUB(si, 6));	// 34357                  sub     si, 6 ;~ 01A2:D5D6
cs=0x1a2;eip=0x00d5d9; 	T(SUB(si, *(dw*)(&unk_7009a)));	// 34358                  sub     si, word ptr ss:unk_7009A ;~ 01A2:D5D9
loc_1d5de:
	// 6357 
cs=0x1a2;eip=0x00d5de; 	T(dx = 0x3C4;);	// 34361                  mov     dx, 3C4h ;~ 01A2:D5DE
cs=0x1a2;eip=0x00d5e1; 	T(ax = 0x0F02;);	// 34362                  mov     ax, 0F02h ;~ 01A2:D5E1
cs=0x1a2;eip=0x00d5e4; 	S(OUT(dx, ax));	// 34363                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D5E4
cs=0x1a2;eip=0x00d5e5; 	T(dx = 0x3CE;);	// 34365                  mov     dx, 3CEh ;~ 01A2:D5E5
cs=0x1a2;eip=0x00d5e8; 	T(ax = 0x805;);	// 34366                  mov     ax, 805h ;~ 01A2:D5E8
cs=0x1a2;eip=0x00d5eb; 	S(OUT(dx, ax));	// 34367                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D5EB
cs=0x1a2;eip=0x00d5ec; 	T(ax = 0x803;);	// 34369                  mov     ax, 803h ;~ 01A2:D5EC
cs=0x1a2;eip=0x00d5ef; 	S(OUT(dx, ax));	// 34370                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D5EF
cs=0x1a2;eip=0x00d5f0; 	T(ax = 7;);	// 34372                  mov     ax, 7 ;~ 01A2:D5F0
cs=0x1a2;eip=0x00d5f3; 	S(OUT(dx, ax));	// 34373                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D5F3
cs=0x1a2;eip=0x00d5f4; 	X(AND(*(raddr(es,di)), bh));	// 34376                  and     es:[di], bh ;~ 01A2:D5F4
cs=0x1a2;eip=0x00d5f7; 	X(AND(*(raddr(es,di+1)), bl));	// 34377                  and     es:[di+1], bl ;~ 01A2:D5F7
cs=0x1a2;eip=0x00d5fb; 	T(dx = 0x3C4;);	// 34378                  mov     dx, 3C4h ;~ 01A2:D5FB
cs=0x1a2;eip=0x00d5fe; 	T(ax = 0x102;);	// 34379                  mov     ax, 102h ;~ 01A2:D5FE
cs=0x1a2;eip=0x00d601; 	S(OUT(dx, ax));	// 34380                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D601
cs=0x1a2;eip=0x00d602; 	T(dx = 0x3CE;);	// 34382                  mov     dx, 3CEh ;~ 01A2:D602
cs=0x1a2;eip=0x00d605; 	T(ax = 5;);	// 34383                  mov     ax, 5 ;~ 01A2:D605
cs=0x1a2;eip=0x00d608; 	S(OUT(dx, ax));	// 34384                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D608
cs=0x1a2;eip=0x00d609; 	T(ax = 3;);	// 34391                  mov     ax, 3 ;~ 01A2:D609
cs=0x1a2;eip=0x00d60c; 	S(OUT(dx, ax));	// 34392                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D60C
cs=0x1a2;eip=0x00d60d; 	T(ax = 4;);	// 34397                  mov     ax, 4 ;~ 01A2:D60D
cs=0x1a2;eip=0x00d610; 	S(OUT(dx, ax));	// 34398                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D610
cs=0x1a2;eip=0x00d611; 	T(ADD(si, *(dw*)(&unk_7009a)));	// 34401                  add     si, word ptr ss:unk_7009A ;~ 01A2:D611
cs=0x1a2;eip=0x00d616; 	T(LODSW);	// 34402                  lodsw ;~ 01A2:D616
cs=0x1a2;eip=0x00d617; 	X(OR(*(dw*)(raddr(es,di)), ax));	// 34403                  or      es:[di], ax ;~ 01A2:D617
cs=0x1a2;eip=0x00d61a; 	T(dx = 0x3CE;);	// 34404                  mov     dx, 3CEh ;~ 01A2:D61A
cs=0x1a2;eip=0x00d61d; 	T(ax = 0x104;);	// 34405                  mov     ax, 104h ;~ 01A2:D61D
cs=0x1a2;eip=0x00d620; 	S(OUT(dx, ax));	// 34406                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D620
cs=0x1a2;eip=0x00d621; 	T(dx = 0x3C4;);	// 34408                  mov     dx, 3C4h ;~ 01A2:D621
cs=0x1a2;eip=0x00d624; 	T(ax = 0x202;);	// 34409                  mov     ax, 202h ;~ 01A2:D624
cs=0x1a2;eip=0x00d627; 	S(OUT(dx, ax));	// 34410                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D627
cs=0x1a2;eip=0x00d628; 	T(LODSW);	// 34412                  lodsw ;~ 01A2:D628
cs=0x1a2;eip=0x00d629; 	X(OR(*(dw*)(raddr(es,di)), ax));	// 34413                  or      es:[di], ax ;~ 01A2:D629
cs=0x1a2;eip=0x00d62c; 	T(dx = 0x3CE;);	// 34414                  mov     dx, 3CEh ;~ 01A2:D62C
cs=0x1a2;eip=0x00d62f; 	T(ax = 0x204;);	// 34415                  mov     ax, 204h ;~ 01A2:D62F
cs=0x1a2;eip=0x00d632; 	S(OUT(dx, ax));	// 34416                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D632
cs=0x1a2;eip=0x00d633; 	T(dx = 0x3C4;);	// 34418                  mov     dx, 3C4h ;~ 01A2:D633
cs=0x1a2;eip=0x00d636; 	T(ax = 0x402;);	// 34419                  mov     ax, 402h ;~ 01A2:D636
cs=0x1a2;eip=0x00d639; 	S(OUT(dx, ax));	// 34420                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D639
cs=0x1a2;eip=0x00d63a; 	T(LODSW);	// 34422                  lodsw ;~ 01A2:D63A
cs=0x1a2;eip=0x00d63b; 	X(OR(*(dw*)(raddr(es,di)), ax));	// 34423                  or      es:[di], ax ;~ 01A2:D63B
cs=0x1a2;eip=0x00d63e; 	T(dx = 0x3CE;);	// 34424                  mov     dx, 3CEh ;~ 01A2:D63E
cs=0x1a2;eip=0x00d641; 	T(ax = 0x304;);	// 34425                  mov     ax, 304h ;~ 01A2:D641
cs=0x1a2;eip=0x00d644; 	S(OUT(dx, ax));	// 34426                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D644
cs=0x1a2;eip=0x00d645; 	T(dx = 0x3C4;);	// 34428                  mov     dx, 3C4h ;~ 01A2:D645
cs=0x1a2;eip=0x00d648; 	T(ax = 0x802;);	// 34429                  mov     ax, 802h ;~ 01A2:D648
cs=0x1a2;eip=0x00d64b; 	S(OUT(dx, ax));	// 34430                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D64B
cs=0x1a2;eip=0x00d64c; 	T(LODSW);	// 34432                  lodsw ;~ 01A2:D64C
cs=0x1a2;eip=0x00d64d; 	X(OR(*(dw*)(raddr(es,di)), ax));	// 34433                  or      es:[di], ax ;~ 01A2:D64D
cs=0x1a2;eip=0x00d650; 	T(ADD(di, 2));	// 34434                  add     di, 2 ;~ 01A2:D650
cs=0x1a2;eip=0x00d653; 	T(ADD(di, *(dw*)(&unk_7009e)));	// 34435                  add     di, word ptr ss:unk_7009E ;~ 01A2:D653
cs=0x1a2;eip=0x00d658; 	T(SUB(si, *(dw*)(&unk_7009a)));	// 34436                  sub     si, word ptr ss:unk_7009A ;~ 01A2:D658
cs=0x1a2;eip=0x00d65d; 	T(CMP(byte_70099, 0));	// 34437                  cmp     ss:byte_70099, 0 ;~ 01A2:D65D
cs=0x1a2;eip=0x00d663; 	J(JZ(loc_1d66a));	// 34438                  jz      short loc_1D66A ;~ 01A2:D663
cs=0x1a2;eip=0x00d665; 	T(ADD(di, 2));	// 34439                  add     di, 2 ;~ 01A2:D665
cs=0x1a2;eip=0x00d668; 	J(JMP(loc_1d6e8));	// 34440                  jmp     short loc_1D6E8 ;~ 01A2:D668
loc_1d66a:
	// 6358 
cs=0x1a2;eip=0x00d66a; 	T(dx = 0x3C4;);	// 34444                  mov     dx, 3C4h ;~ 01A2:D66A
cs=0x1a2;eip=0x00d66d; 	T(ax = 0x0F02;);	// 34445                  mov     ax, 0F02h ;~ 01A2:D66D
cs=0x1a2;eip=0x00d670; 	S(OUT(dx, ax));	// 34446                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D670
cs=0x1a2;eip=0x00d671; 	T(dx = 0x3CE;);	// 34448                  mov     dx, 3CEh ;~ 01A2:D671
cs=0x1a2;eip=0x00d674; 	T(ax = 0x805;);	// 34449                  mov     ax, 805h ;~ 01A2:D674
cs=0x1a2;eip=0x00d677; 	S(OUT(dx, ax));	// 34450                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D677
cs=0x1a2;eip=0x00d678; 	T(ax = 0x803;);	// 34452                  mov     ax, 803h ;~ 01A2:D678
cs=0x1a2;eip=0x00d67b; 	S(OUT(dx, ax));	// 34453                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D67B
cs=0x1a2;eip=0x00d67c; 	T(ax = 7;);	// 34455                  mov     ax, 7 ;~ 01A2:D67C
cs=0x1a2;eip=0x00d67f; 	S(OUT(dx, ax));	// 34456                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D67F
cs=0x1a2;eip=0x00d680; 	T(ax = bp;);	// 34459                  mov     ax, bp ;~ 01A2:D680
cs=0x1a2;eip=0x00d682; 	X(AND(*(raddr(es,di)), ah));	// 34460                  and     es:[di], ah ;~ 01A2:D682
cs=0x1a2;eip=0x00d685; 	X(AND(*(raddr(es,di+1)), al));	// 34461                  and     es:[di+1], al ;~ 01A2:D685
cs=0x1a2;eip=0x00d689; 	T(dx = 0x3C4;);	// 34462                  mov     dx, 3C4h ;~ 01A2:D689
cs=0x1a2;eip=0x00d68c; 	T(ax = 0x102;);	// 34463                  mov     ax, 102h ;~ 01A2:D68C
cs=0x1a2;eip=0x00d68f; 	S(OUT(dx, ax));	// 34464                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D68F
cs=0x1a2;eip=0x00d690; 	T(dx = 0x3CE;);	// 34466                  mov     dx, 3CEh ;~ 01A2:D690
cs=0x1a2;eip=0x00d693; 	T(ax = 5;);	// 34467                  mov     ax, 5 ;~ 01A2:D693
cs=0x1a2;eip=0x00d696; 	S(OUT(dx, ax));	// 34468                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D696
cs=0x1a2;eip=0x00d697; 	T(ax = 3;);	// 34475                  mov     ax, 3 ;~ 01A2:D697
cs=0x1a2;eip=0x00d69a; 	S(OUT(dx, ax));	// 34476                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D69A
cs=0x1a2;eip=0x00d69b; 	T(ax = 4;);	// 34481                  mov     ax, 4 ;~ 01A2:D69B
cs=0x1a2;eip=0x00d69e; 	S(OUT(dx, ax));	// 34482                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D69E
cs=0x1a2;eip=0x00d69f; 	T(ADD(si, *(dw*)(&unk_7009c)));	// 34485                  add     si, word ptr ss:unk_7009C ;~ 01A2:D69F
cs=0x1a2;eip=0x00d6a4; 	T(LODSW);	// 34486                  lodsw ;~ 01A2:D6A4
cs=0x1a2;eip=0x00d6a5; 	X(OR(*(dw*)(raddr(es,di)), ax));	// 34487                  or      es:[di], ax ;~ 01A2:D6A5
cs=0x1a2;eip=0x00d6a8; 	T(dx = 0x3CE;);	// 34488                  mov     dx, 3CEh ;~ 01A2:D6A8
cs=0x1a2;eip=0x00d6ab; 	T(ax = 0x104;);	// 34489                  mov     ax, 104h ;~ 01A2:D6AB
cs=0x1a2;eip=0x00d6ae; 	S(OUT(dx, ax));	// 34490                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D6AE
cs=0x1a2;eip=0x00d6af; 	T(dx = 0x3C4;);	// 34492                  mov     dx, 3C4h ;~ 01A2:D6AF
cs=0x1a2;eip=0x00d6b2; 	T(ax = 0x202;);	// 34493                  mov     ax, 202h ;~ 01A2:D6B2
cs=0x1a2;eip=0x00d6b5; 	S(OUT(dx, ax));	// 34494                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D6B5
cs=0x1a2;eip=0x00d6b6; 	T(LODSW);	// 34496                  lodsw ;~ 01A2:D6B6
cs=0x1a2;eip=0x00d6b7; 	X(OR(*(dw*)(raddr(es,di)), ax));	// 34497                  or      es:[di], ax ;~ 01A2:D6B7
cs=0x1a2;eip=0x00d6ba; 	T(dx = 0x3CE;);	// 34498                  mov     dx, 3CEh ;~ 01A2:D6BA
cs=0x1a2;eip=0x00d6bd; 	T(ax = 0x204;);	// 34499                  mov     ax, 204h ;~ 01A2:D6BD
cs=0x1a2;eip=0x00d6c0; 	S(OUT(dx, ax));	// 34500                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D6C0
cs=0x1a2;eip=0x00d6c1; 	T(dx = 0x3C4;);	// 34502                  mov     dx, 3C4h ;~ 01A2:D6C1
cs=0x1a2;eip=0x00d6c4; 	T(ax = 0x402;);	// 34503                  mov     ax, 402h ;~ 01A2:D6C4
cs=0x1a2;eip=0x00d6c7; 	S(OUT(dx, ax));	// 34504                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D6C7
cs=0x1a2;eip=0x00d6c8; 	T(LODSW);	// 34506                  lodsw ;~ 01A2:D6C8
cs=0x1a2;eip=0x00d6c9; 	X(OR(*(dw*)(raddr(es,di)), ax));	// 34507                  or      es:[di], ax ;~ 01A2:D6C9
cs=0x1a2;eip=0x00d6cc; 	T(dx = 0x3CE;);	// 34508                  mov     dx, 3CEh ;~ 01A2:D6CC
cs=0x1a2;eip=0x00d6cf; 	T(ax = 0x304;);	// 34509                  mov     ax, 304h ;~ 01A2:D6CF
cs=0x1a2;eip=0x00d6d2; 	S(OUT(dx, ax));	// 34510                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D6D2
cs=0x1a2;eip=0x00d6d3; 	T(dx = 0x3C4;);	// 34512                  mov     dx, 3C4h ;~ 01A2:D6D3
cs=0x1a2;eip=0x00d6d6; 	T(ax = 0x802;);	// 34513                  mov     ax, 802h ;~ 01A2:D6D6
cs=0x1a2;eip=0x00d6d9; 	S(OUT(dx, ax));	// 34514                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D6D9
cs=0x1a2;eip=0x00d6da; 	T(LODSW);	// 34516                  lodsw ;~ 01A2:D6DA
cs=0x1a2;eip=0x00d6db; 	X(OR(*(dw*)(raddr(es,di)), ax));	// 34517                  or      es:[di], ax ;~ 01A2:D6DB
cs=0x1a2;eip=0x00d6de; 	T(ADD(di, 2));	// 34518                  add     di, 2 ;~ 01A2:D6DE
cs=0x1a2;eip=0x00d6e1; 	T(SUB(si, *(dw*)(&unk_7009c)));	// 34519                  sub     si, word ptr ss:unk_7009C ;~ 01A2:D6E1
cs=0x1a2;eip=0x00d6e6; 	J(JMP(loc_1d6eb));	// 34520                  jmp     short loc_1D6EB ;~ 01A2:D6E6
loc_1d6e8:
	// 6359 
cs=0x1a2;eip=0x00d6e8; 	T(ADD(si, 8));	// 34524                  add     si, 8 ;~ 01A2:D6E8
loc_1d6eb:
	// 6360 
cs=0x1a2;eip=0x00d6eb; 	T(ch = cl;);	// 34527                  mov     ch, cl ;~ 01A2:D6EB
cs=0x1a2;eip=0x00d6ed; 	T(OR(cl, cl));	// 34528                  or      cl, cl ;~ 01A2:D6ED
cs=0x1a2;eip=0x00d6ef; 	J(JNS(loc_1d6f4));	// 34529                  jns     short loc_1D6F4 ;~ 01A2:D6EF
cs=0x1a2;eip=0x00d6f1; 	J(JMP(loc_1d799));	// 34530                  jmp     loc_1D799 ;~ 01A2:D6F1
loc_1d6f4:
	// 6361 
cs=0x1a2;eip=0x00d6f4; 	T(CMP(byte_70099, 0));	// 34534                  cmp     ss:byte_70099, 0 ;~ 01A2:D6F4
cs=0x1a2;eip=0x00d6fa; 	J(JZ(loc_1d70f));	// 34535                  jz      short loc_1D70F ;~ 01A2:D6FA
cs=0x1a2;eip=0x00d6fc; 	T(al = ch;);	// 34536                  mov     al, ch ;~ 01A2:D6FC
cs=0x1a2;eip=0x00d6fe; 	T(INC(al));	// 34537                  inc     al ;~ 01A2:D6FE
cs=0x1a2;eip=0x00d700; 	T(XOR(ah, ah));	// 34538                  xor     ah, ah ;~ 01A2:D700
cs=0x1a2;eip=0x00d702; 	T(SHL(ax, 1));	// 34539                  shl     ax, 1 ;~ 01A2:D702
cs=0x1a2;eip=0x00d704; 	T(ADD(di, ax));	// 34540                  add     di, ax ;~ 01A2:D704
cs=0x1a2;eip=0x00d706; 	T(SHL(ax, 1));	// 34541                  shl     ax, 1 ;~ 01A2:D706
cs=0x1a2;eip=0x00d708; 	T(SHL(ax, 1));	// 34542                  shl     ax, 1 ;~ 01A2:D708
cs=0x1a2;eip=0x00d70a; 	T(ADD(si, ax));	// 34543                  add     si, ax ;~ 01A2:D70A
cs=0x1a2;eip=0x00d70c; 	J(JMP(loc_1d799));	// 34544                  jmp     loc_1D799 ;~ 01A2:D70C
loc_1d70f:
	// 6362 
cs=0x1a2;eip=0x00d70f; 	T(ADD(si, *(dw*)(&unk_7009c)));	// 34548                  add     si, word ptr ss:unk_7009C ;~ 01A2:D70F
cs=0x1a2;eip=0x00d714; 	T(dx = 0x3C4;);	// 34549                  mov     dx, 3C4h ;~ 01A2:D714
cs=0x1a2;eip=0x00d717; 	T(ax = 0x102;);	// 34550                  mov     ax, 102h ;~ 01A2:D717
cs=0x1a2;eip=0x00d71a; 	S(OUT(dx, ax));	// 34551                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D71A
cs=0x1a2;eip=0x00d71b; 	T(dx = 0x3CE;);	// 34553                  mov     dx, 3CEh ;~ 01A2:D71B
cs=0x1a2;eip=0x00d71e; 	T(ax = 5;);	// 34554                  mov     ax, 5 ;~ 01A2:D71E
cs=0x1a2;eip=0x00d721; 	S(OUT(dx, ax));	// 34555                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D721
cs=0x1a2;eip=0x00d722; 	T(ax = 3;);	// 34562                  mov     ax, 3 ;~ 01A2:D722
cs=0x1a2;eip=0x00d725; 	S(OUT(dx, ax));	// 34563                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D725
cs=0x1a2;eip=0x00d726; 	T(ax = 4;);	// 34568                  mov     ax, 4 ;~ 01A2:D726
cs=0x1a2;eip=0x00d729; 	S(OUT(dx, ax));	// 34569                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D729
cs=0x1a2;eip=0x00d72a; 	T(al = ch;);	// 34572                  mov     al, ch ;~ 01A2:D72A
cs=0x1a2;eip=0x00d72c; 	X(PUSH(si));	// 34573                  push    si ;~ 01A2:D72C
cs=0x1a2;eip=0x00d72d; 	X(PUSH(di));	// 34574                  push    di ;~ 01A2:D72D
loc_1d72e:
	// 6363 
cs=0x1a2;eip=0x00d72e; 	X(MOVSW);	// 34577                  movsw ;~ 01A2:D72E
cs=0x1a2;eip=0x00d72f; 	T(ADD(si, 6));	// 34578                  add     si, 6 ;~ 01A2:D72F
cs=0x1a2;eip=0x00d732; 	T(DEC(al));	// 34579                  dec     al ;~ 01A2:D732
cs=0x1a2;eip=0x00d734; 	J(JNS(loc_1d72e));	// 34580                  jns     short loc_1D72E ;~ 01A2:D734
cs=0x1a2;eip=0x00d736; 	X(POP(di));	// 34581                  pop     di ;~ 01A2:D736
cs=0x1a2;eip=0x00d737; 	X(POP(si));	// 34582                  pop     si ;~ 01A2:D737
cs=0x1a2;eip=0x00d738; 	T(ADD(si, 2));	// 34583                  add     si, 2 ;~ 01A2:D738
cs=0x1a2;eip=0x00d73b; 	T(dx = 0x3CE;);	// 34584                  mov     dx, 3CEh ;~ 01A2:D73B
cs=0x1a2;eip=0x00d73e; 	T(ax = 0x104;);	// 34585                  mov     ax, 104h ;~ 01A2:D73E
cs=0x1a2;eip=0x00d741; 	S(OUT(dx, ax));	// 34586                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D741
cs=0x1a2;eip=0x00d742; 	T(dx = 0x3C4;);	// 34588                  mov     dx, 3C4h ;~ 01A2:D742
cs=0x1a2;eip=0x00d745; 	T(ax = 0x202;);	// 34589                  mov     ax, 202h ;~ 01A2:D745
cs=0x1a2;eip=0x00d748; 	S(OUT(dx, ax));	// 34590                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D748
cs=0x1a2;eip=0x00d749; 	T(al = ch;);	// 34592                  mov     al, ch ;~ 01A2:D749
cs=0x1a2;eip=0x00d74b; 	X(PUSH(si));	// 34593                  push    si ;~ 01A2:D74B
cs=0x1a2;eip=0x00d74c; 	X(PUSH(di));	// 34594                  push    di ;~ 01A2:D74C
loc_1d74d:
	// 6364 
cs=0x1a2;eip=0x00d74d; 	X(MOVSW);	// 34597                  movsw ;~ 01A2:D74D
cs=0x1a2;eip=0x00d74e; 	T(ADD(si, 6));	// 34598                  add     si, 6 ;~ 01A2:D74E
cs=0x1a2;eip=0x00d751; 	T(DEC(al));	// 34599                  dec     al ;~ 01A2:D751
cs=0x1a2;eip=0x00d753; 	J(JNS(loc_1d74d));	// 34600                  jns     short loc_1D74D ;~ 01A2:D753
cs=0x1a2;eip=0x00d755; 	X(POP(di));	// 34601                  pop     di ;~ 01A2:D755
cs=0x1a2;eip=0x00d756; 	X(POP(si));	// 34602                  pop     si ;~ 01A2:D756
cs=0x1a2;eip=0x00d757; 	T(ADD(si, 2));	// 34603                  add     si, 2 ;~ 01A2:D757
cs=0x1a2;eip=0x00d75a; 	T(dx = 0x3CE;);	// 34604                  mov     dx, 3CEh ;~ 01A2:D75A
cs=0x1a2;eip=0x00d75d; 	T(ax = 0x204;);	// 34605                  mov     ax, 204h ;~ 01A2:D75D
cs=0x1a2;eip=0x00d760; 	S(OUT(dx, ax));	// 34606                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D760
cs=0x1a2;eip=0x00d761; 	T(dx = 0x3C4;);	// 34608                  mov     dx, 3C4h ;~ 01A2:D761
cs=0x1a2;eip=0x00d764; 	T(ax = 0x402;);	// 34609                  mov     ax, 402h ;~ 01A2:D764
cs=0x1a2;eip=0x00d767; 	S(OUT(dx, ax));	// 34610                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D767
cs=0x1a2;eip=0x00d768; 	T(al = ch;);	// 34612                  mov     al, ch ;~ 01A2:D768
cs=0x1a2;eip=0x00d76a; 	X(PUSH(si));	// 34613                  push    si ;~ 01A2:D76A
cs=0x1a2;eip=0x00d76b; 	X(PUSH(di));	// 34614                  push    di ;~ 01A2:D76B
loc_1d76c:
	// 6365 
cs=0x1a2;eip=0x00d76c; 	X(MOVSW);	// 34617                  movsw ;~ 01A2:D76C
cs=0x1a2;eip=0x00d76d; 	T(ADD(si, 6));	// 34618                  add     si, 6 ;~ 01A2:D76D
cs=0x1a2;eip=0x00d770; 	T(DEC(al));	// 34619                  dec     al ;~ 01A2:D770
cs=0x1a2;eip=0x00d772; 	J(JNS(loc_1d76c));	// 34620                  jns     short loc_1D76C ;~ 01A2:D772
cs=0x1a2;eip=0x00d774; 	X(POP(di));	// 34621                  pop     di ;~ 01A2:D774
cs=0x1a2;eip=0x00d775; 	X(POP(si));	// 34622                  pop     si ;~ 01A2:D775
cs=0x1a2;eip=0x00d776; 	T(ADD(si, 2));	// 34623                  add     si, 2 ;~ 01A2:D776
cs=0x1a2;eip=0x00d779; 	T(dx = 0x3CE;);	// 34624                  mov     dx, 3CEh ;~ 01A2:D779
cs=0x1a2;eip=0x00d77c; 	T(ax = 0x304;);	// 34625                  mov     ax, 304h ;~ 01A2:D77C
cs=0x1a2;eip=0x00d77f; 	S(OUT(dx, ax));	// 34626                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D77F
cs=0x1a2;eip=0x00d780; 	T(dx = 0x3C4;);	// 34628                  mov     dx, 3C4h ;~ 01A2:D780
cs=0x1a2;eip=0x00d783; 	T(ax = 0x802;);	// 34629                  mov     ax, 802h ;~ 01A2:D783
cs=0x1a2;eip=0x00d786; 	S(OUT(dx, ax));	// 34630                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D786
cs=0x1a2;eip=0x00d787; 	T(al = ch;);	// 34632                  mov     al, ch ;~ 01A2:D787
loc_1d789:
	// 6366 
cs=0x1a2;eip=0x00d789; 	X(MOVSW);	// 34635                  movsw ;~ 01A2:D789
cs=0x1a2;eip=0x00d78a; 	T(ADD(si, 6));	// 34636                  add     si, 6 ;~ 01A2:D78A
cs=0x1a2;eip=0x00d78d; 	T(DEC(al));	// 34637                  dec     al ;~ 01A2:D78D
cs=0x1a2;eip=0x00d78f; 	J(JNS(loc_1d789));	// 34638                  jns     short loc_1D789 ;~ 01A2:D78F
cs=0x1a2;eip=0x00d791; 	T(SUB(si, 6));	// 34639                  sub     si, 6 ;~ 01A2:D791
cs=0x1a2;eip=0x00d794; 	T(SUB(si, *(dw*)(&unk_7009c)));	// 34640                  sub     si, word ptr ss:unk_7009C ;~ 01A2:D794
loc_1d799:
	// 6367 
cs=0x1a2;eip=0x00d799; 	T(al = byte_70098;);	// 34644                  mov     al, ss:byte_70098 ;~ 01A2:D799
cs=0x1a2;eip=0x00d79d; 	T(INC(al));	// 34645                  inc     al ;~ 01A2:D79D
cs=0x1a2;eip=0x00d79f; 	X(byte_70098 = al;);	// 34646                  mov     ss:byte_70098, al ;~ 01A2:D79F
cs=0x1a2;eip=0x00d7a3; 	T(CMP(al, 0x0C8));	// 34647                  cmp     al, 0C8h ;~ 01A2:D7A3
cs=0x1a2;eip=0x00d7a5; 	J(JZ(loc_1d7bf));	// 34648                  jz      short loc_1D7BF ;~ 01A2:D7A5
cs=0x1a2;eip=0x00d7a7; 	T(SHL(bp, 1));	// 34649                  shl     bp, 1 ;~ 01A2:D7A7
cs=0x1a2;eip=0x00d7a9; 	T(SHL(bp, 1));	// 34650                  shl     bp, 1 ;~ 01A2:D7A9
cs=0x1a2;eip=0x00d7ab; 	T(SHR(bx, 1));	// 34651                  shr     bx, 1 ;~ 01A2:D7AB
cs=0x1a2;eip=0x00d7ad; 	T(SHR(bx, 1));	// 34652                  shr     bx, 1 ;~ 01A2:D7AD
cs=0x1a2;eip=0x00d7af; 	J(JZ(loc_1d7b4));	// 34653                  jz      short loc_1D7B4 ;~ 01A2:D7AF
cs=0x1a2;eip=0x00d7b1; 	J(JMP(loc_1d54b));	// 34654                  jmp     loc_1D54B ;~ 01A2:D7B1
loc_1d7b4:
	// 6368 
cs=0x1a2;eip=0x00d7b4; 	X(SUB(*(dw*)(&unk_7009e), 4));	// 34658                  sub     word ptr ss:unk_7009E, 4 ;~ 01A2:D7B4
cs=0x1a2;eip=0x00d7ba; 	T(INC(cl));	// 34659                  inc     cl ;~ 01A2:D7BA
cs=0x1a2;eip=0x00d7bc; 	J(JMP(loc_1d548));	// 34660                  jmp     loc_1D548 ;~ 01A2:D7BC
loc_1d7bf:
	// 6369 
cs=0x1a2;eip=0x00d7bf; 	X(POP(ds));	// 34664                  pop     ds ;~ 01A2:D7BF
cs=0x1a2;eip=0x00d7c0; 	T(CMP(byte_70099, 0));	// 34666                  cmp     ss:byte_70099, 0 ;~ 01A2:D7C0
cs=0x1a2;eip=0x00d7c6; 	J(JNZ(locret_1d7cb));	// 34667                  jnz     short locret_1D7CB ;~ 01A2:D7C6
cs=0x1a2;eip=0x00d7c8; 	J(CALL(sub_1d8de,0));	// 34668                  call    sub_1D8DE ;~ 01A2:D7C8
locret_1d7cb:
	// 6370 
cs=0x1a2;eip=0x00d7cb; 	J(RETN(0));	// 34671                  retn ;~ 01A2:D7CB

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1d548: 	goto loc_1d548;
        case m2c::kloc_1d54b: 	goto loc_1d54b;
        case m2c::kloc_1d554: 	goto loc_1d554;
        case m2c::kloc_1d573: 	goto loc_1d573;
        case m2c::kloc_1d592: 	goto loc_1d592;
        case m2c::kloc_1d5b1: 	goto loc_1d5b1;
        case m2c::kloc_1d5ce: 	goto loc_1d5ce;
        case m2c::kloc_1d5de: 	goto loc_1d5de;
        case m2c::kloc_1d66a: 	goto loc_1d66a;
        case m2c::kloc_1d6e8: 	goto loc_1d6e8;
        case m2c::kloc_1d6eb: 	goto loc_1d6eb;
        case m2c::kloc_1d6f4: 	goto loc_1d6f4;
        case m2c::kloc_1d70f: 	goto loc_1d70f;
        case m2c::kloc_1d72e: 	goto loc_1d72e;
        case m2c::kloc_1d74d: 	goto loc_1d74d;
        case m2c::kloc_1d76c: 	goto loc_1d76c;
        case m2c::kloc_1d789: 	goto loc_1d789;
        case m2c::kloc_1d799: 	goto loc_1d799;
        case m2c::kloc_1d7b4: 	goto loc_1d7b4;
        case m2c::kloc_1d7bf: 	goto loc_1d7bf;
        case m2c::klocret_1d7cb: 	goto locret_1d7cb;
        case m2c::ksub_1d523: 	goto sub_1d523;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1d7cc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1d7cc:
    _begin:
cs=0x1a2;eip=0x00d7cc; 	T(XOR(si, si));	// 34680                  xor     si, si ;~ 01A2:D7CC
cs=0x1a2;eip=0x00d7ce; 	T(XOR(di, di));	// 34681                  xor     di, di ;~ 01A2:D7CE
cs=0x1a2;eip=0x00d7d0; 	T(cx = 0x1F40;);	// 34682                  mov     cx, 1F40h ;~ 01A2:D7D0
cs=0x1a2;eip=0x00d7d3; 	J({;});	// 34683                  jmp     short $+2 ;~ 01A2:D7D3
loc_1d7d5:
	// 6371 
cs=0x1a2;eip=0x00d7d5; 	J(CALL(sub_1d7e7,0));	// 34688                  call    sub_1D7E7 ;~ 01A2:D7D5
cs=0x1a2;eip=0x00d7d8; 	T(ax = ds;);	// 34689                  mov     ax, ds ;~ 01A2:D7D8
cs=0x1a2;eip=0x00d7da; 	T(es = *(dw*)(((db*)&seg_1f171)+1););	// 34690                  mov     es, seg_1F171+1 ;~ 01A2:D7DA
cs=0x1a2;eip=0x00d7de; 	T(ds = *(dw*)(&unk_1f170););	// 34691                  mov     ds, word ptr unk_1F170 ;~ 01A2:D7DE
	// 34693                  rep movsb ;~ 01A2:D7E2
cs=0x1a2;eip=0x00d7e2; 	X(	REP MOVSB);	// 34693                  rep movsb ;~ 01A2:D7E2
cs=0x1a2;eip=0x00d7e4; 	T(ds = ax;);	// 34694                  mov     ds, ax ;~ 01A2:D7E4
cs=0x1a2;eip=0x00d7e6; 	J(RETN(0));	// 34696                  retn ;~ 01A2:D7E6

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1d7d5: 	goto loc_1d7d5;
        case m2c::ksub_1d7cc: 	goto sub_1d7cc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1d7e7(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1d7e7:
    _begin:
cs=0x1a2;eip=0x00d7e7; 	T(dx = 0x3C4;);	// 34705                  mov     dx, 3C4h ;~ 01A2:D7E7
cs=0x1a2;eip=0x00d7ea; 	T(ax = 0x0F02;);	// 34706                  mov     ax, 0F02h ;~ 01A2:D7EA
cs=0x1a2;eip=0x00d7ed; 	S(OUT(dx, ax));	// 34707                  out     dx, ax          ; EGA: sequencer address reg ;~ 01A2:D7ED
cs=0x1a2;eip=0x00d7ee; 	T(dx = 0x3CE;);	// 34709                  mov     dx, 3CEh ;~ 01A2:D7EE
cs=0x1a2;eip=0x00d7f1; 	T(ax = 0x105;);	// 34710                  mov     ax, 105h ;~ 01A2:D7F1
cs=0x1a2;eip=0x00d7f4; 	S(OUT(dx, ax));	// 34711                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D7F4
cs=0x1a2;eip=0x00d7f5; 	T(ax = 7;);	// 34713                  mov     ax, 7 ;~ 01A2:D7F5
cs=0x1a2;eip=0x00d7f8; 	S(OUT(dx, ax));	// 34714                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D7F8
cs=0x1a2;eip=0x00d7f9; 	T(ax = 3;);	// 34717                  mov     ax, 3 ;~ 01A2:D7F9
cs=0x1a2;eip=0x00d7fc; 	S(OUT(dx, ax));	// 34718                  out     dx, ax          ; EGA: graph 1 and 2 addr reg: ;~ 01A2:D7FC
cs=0x1a2;eip=0x00d7fd; 	J(RETN(0));	// 34723                  retn ;~ 01A2:D7FD

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1d7e7: 	goto sub_1d7e7;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1d7fe(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1d7fe:
    _begin:
cs=0x1a2;eip=0x00d7fe; 	X(PUSH(ax));	// 34731                  push    ax ;~ 01A2:D7FE
cs=0x1a2;eip=0x00d7ff; 	X(PUSH(bx));	// 34732                  push    bx ;~ 01A2:D7FF
cs=0x1a2;eip=0x00d800; 	X(PUSH(cx));	// 34733                  push    cx ;~ 01A2:D800
cs=0x1a2;eip=0x00d801; 	X(PUSH(dx));	// 34734                  push    dx ;~ 01A2:D801
cs=0x1a2;eip=0x00d802; 	X(PUSH(bp));	// 34735                  push    bp ;~ 01A2:D802
cs=0x1a2;eip=0x00d803; 	X(PUSH(si));	// 34736                  push    si ;~ 01A2:D803
cs=0x1a2;eip=0x00d804; 	X(PUSH(di));	// 34737                  push    di ;~ 01A2:D804
cs=0x1a2;eip=0x00d805; 	X(PUSH(es));	// 34738                  push    es ;~ 01A2:D805
cs=0x1a2;eip=0x00d806; 	X(PUSH(ds));	// 34739                  push    ds ;~ 01A2:D806
cs=0x1a2;eip=0x00d807; 	T(SHL(dh, 1));	// 34740                  shl     dh, 1 ;~ 01A2:D807
cs=0x1a2;eip=0x00d809; 	T(XOR(bh, bh));	// 34741                  xor     bh, bh ;~ 01A2:D809
cs=0x1a2;eip=0x00d80b; 	T(si = di;);	// 34742                  mov     si, di ;~ 01A2:D80B
cs=0x1a2;eip=0x00d80d; 	T(bp = di;);	// 34743                  mov     bp, di ;~ 01A2:D80D
cs=0x1a2;eip=0x00d80f; 	T(ch = dl;);	// 34744                  mov     ch, dl ;~ 01A2:D80F
cs=0x1a2;eip=0x00d811; 	T(dl = dh;);	// 34745                  mov     dl, dh ;~ 01A2:D811
cs=0x1a2;eip=0x00d813; 	T(XOR(dh, dh));	// 34746                  xor     dh, dh ;~ 01A2:D813
loc_1d815:
	// 6372 
cs=0x1a2;eip=0x00d815; 	T(ax = 0x80;);	// 34749                  mov     ax, 80h ;~ 01A2:D815
cs=0x1a2;eip=0x00d818; 	T(bl = 0x0F;);	// 34750                  mov     bl, 0Fh ;~ 01A2:D818
loc_1d81a:
	// 6373 
cs=0x1a2;eip=0x00d81a; 	T(cl = ch;);	// 34753                  mov     cl, ch ;~ 01A2:D81A
cs=0x1a2;eip=0x00d81c; 	T(di = si;);	// 34754                  mov     di, si ;~ 01A2:D81C
loc_1d81e:
	// 6374 
cs=0x1a2;eip=0x00d81e; 	T(TEST(*(dw*)(raddr(es,di)), ax));	// 34757                  test    es:[di], ax ;~ 01A2:D81E
cs=0x1a2;eip=0x00d821; 	J(JNZ(loc_1d83a));	// 34758                  jnz     short loc_1D83A ;~ 01A2:D821
cs=0x1a2;eip=0x00d823; 	T(ADD(di, dx));	// 34759                  add     di, dx ;~ 01A2:D823
cs=0x1a2;eip=0x00d825; 	T(DEC(cl));	// 34760                  dec     cl ;~ 01A2:D825
cs=0x1a2;eip=0x00d827; 	J(JNZ(loc_1d81e));	// 34761                  jnz     short loc_1D81E ;~ 01A2:D827
cs=0x1a2;eip=0x00d829; 	T(SHR(ax, 1));	// 34762                  shr     ax, 1 ;~ 01A2:D829
cs=0x1a2;eip=0x00d82b; 	J(JNC(loc_1d82f));	// 34763                  jnb     short loc_1D82F ;~ 01A2:D82B
cs=0x1a2;eip=0x00d82d; 	T(ah = 0x80;);	// 34764                  mov     ah, 80h ;~ 01A2:D82D
loc_1d82f:
	// 6375 
cs=0x1a2;eip=0x00d82f; 	T(INC(bh));	// 34767                  inc     bh ;~ 01A2:D82F
cs=0x1a2;eip=0x00d831; 	T(DEC(bl));	// 34768                  dec     bl ;~ 01A2:D831
cs=0x1a2;eip=0x00d833; 	J(JNS(loc_1d81a));	// 34769                  jns     short loc_1D81A ;~ 01A2:D833
cs=0x1a2;eip=0x00d835; 	T(ADD(si, 2));	// 34770                  add     si, 2 ;~ 01A2:D835
cs=0x1a2;eip=0x00d838; 	J(JMP(loc_1d815));	// 34771                  jmp     short loc_1D815 ;~ 01A2:D838
loc_1d83a:
	// 6376 
cs=0x1a2;eip=0x00d83a; 	X(PUSH(bx));	// 34775                  push    bx ;~ 01A2:D83A
cs=0x1a2;eip=0x00d83b; 	T(ADD(bp, dx));	// 34776                  add     bp, dx ;~ 01A2:D83B
cs=0x1a2;eip=0x00d83d; 	T(SUB(bp, 2));	// 34777                  sub     bp, 2 ;~ 01A2:D83D
cs=0x1a2;eip=0x00d840; 	T(si = bp;);	// 34778                  mov     si, bp ;~ 01A2:D840
cs=0x1a2;eip=0x00d842; 	T(XOR(bh, bh));	// 34779                  xor     bh, bh ;~ 01A2:D842
loc_1d844:
	// 6377 
cs=0x1a2;eip=0x00d844; 	T(ah = 1;);	// 34782                  mov     ah, 1 ;~ 01A2:D844
cs=0x1a2;eip=0x00d846; 	T(XOR(al, al));	// 34783                  xor     al, al ;~ 01A2:D846
cs=0x1a2;eip=0x00d848; 	T(bl = 0x0F;);	// 34784                  mov     bl, 0Fh ;~ 01A2:D848
loc_1d84a:
	// 6378 
cs=0x1a2;eip=0x00d84a; 	T(cl = ch;);	// 34787                  mov     cl, ch ;~ 01A2:D84A
cs=0x1a2;eip=0x00d84c; 	T(di = si;);	// 34788                  mov     di, si ;~ 01A2:D84C
loc_1d84e:
	// 6379 
cs=0x1a2;eip=0x00d84e; 	T(TEST(*(dw*)(raddr(es,di)), ax));	// 34791                  test    es:[di], ax ;~ 01A2:D84E
cs=0x1a2;eip=0x00d851; 	J(JNZ(loc_1d86a));	// 34792                  jnz     short loc_1D86A ;~ 01A2:D851
cs=0x1a2;eip=0x00d853; 	T(ADD(di, dx));	// 34793                  add     di, dx ;~ 01A2:D853
cs=0x1a2;eip=0x00d855; 	T(DEC(cl));	// 34794                  dec     cl ;~ 01A2:D855
cs=0x1a2;eip=0x00d857; 	J(JNZ(loc_1d84e));	// 34795                  jnz     short loc_1D84E ;~ 01A2:D857
cs=0x1a2;eip=0x00d859; 	T(SHL(ax, 1));	// 34796                  shl     ax, 1 ;~ 01A2:D859
cs=0x1a2;eip=0x00d85b; 	J(JNC(loc_1d85f));	// 34797                  jnb     short loc_1D85F ;~ 01A2:D85B
cs=0x1a2;eip=0x00d85d; 	T(al = 1;);	// 34798                  mov     al, 1 ;~ 01A2:D85D
loc_1d85f:
	// 6380 
cs=0x1a2;eip=0x00d85f; 	T(INC(bh));	// 34801                  inc     bh ;~ 01A2:D85F
cs=0x1a2;eip=0x00d861; 	T(DEC(bl));	// 34802                  dec     bl ;~ 01A2:D861
cs=0x1a2;eip=0x00d863; 	J(JNS(loc_1d84a));	// 34803                  jns     short loc_1D84A ;~ 01A2:D863
cs=0x1a2;eip=0x00d865; 	T(SUB(si, 2));	// 34804                  sub     si, 2 ;~ 01A2:D865
cs=0x1a2;eip=0x00d868; 	J(JMP(loc_1d844));	// 34805                  jmp     short loc_1D844 ;~ 01A2:D868
loc_1d86a:
	// 6381 
cs=0x1a2;eip=0x00d86a; 	T(SHL(dx, 1));	// 34809                  shl     dx, 1 ;~ 01A2:D86A
cs=0x1a2;eip=0x00d86c; 	T(SHL(dx, 1));	// 34810                  shl     dx, 1 ;~ 01A2:D86C
cs=0x1a2;eip=0x00d86e; 	T(SHL(dx, 1));	// 34811                  shl     dx, 1 ;~ 01A2:D86E
cs=0x1a2;eip=0x00d870; 	X(POP(ax));	// 34812                  pop     ax ;~ 01A2:D870
cs=0x1a2;eip=0x00d871; 	T(ADD(ah, bh));	// 34813                  add     ah, bh ;~ 01A2:D871
cs=0x1a2;eip=0x00d873; 	T(al = ah;);	// 34814                  mov     al, ah ;~ 01A2:D873
cs=0x1a2;eip=0x00d875; 	T(XOR(ah, ah));	// 34815                  xor     ah, ah ;~ 01A2:D875
cs=0x1a2;eip=0x00d877; 	T(SUB(dx, ax));	// 34816                  sub     dx, ax ;~ 01A2:D877
cs=0x1a2;eip=0x00d879; 	X(word_1f3d6 = dx;);	// 34817                  mov     ds:word_1F3D6, dx ;~ 01A2:D879
cs=0x1a2;eip=0x00d87d; 	X(POP(ds));	// 34818                  pop     ds ;~ 01A2:D87D
cs=0x1a2;eip=0x00d87e; 	X(POP(es));	// 34820                  pop     es ;~ 01A2:D87E
cs=0x1a2;eip=0x00d87f; 	X(POP(di));	// 34821                  pop     di ;~ 01A2:D87F
cs=0x1a2;eip=0x00d880; 	X(POP(si));	// 34822                  pop     si ;~ 01A2:D880
cs=0x1a2;eip=0x00d881; 	X(POP(bp));	// 34823                  pop     bp ;~ 01A2:D881
cs=0x1a2;eip=0x00d882; 	X(POP(dx));	// 34824                  pop     dx ;~ 01A2:D882
cs=0x1a2;eip=0x00d883; 	X(POP(cx));	// 34825                  pop     cx ;~ 01A2:D883
cs=0x1a2;eip=0x00d884; 	X(POP(bx));	// 34826                  pop     bx ;~ 01A2:D884
cs=0x1a2;eip=0x00d885; 	X(POP(ax));	// 34827                  pop     ax ;~ 01A2:D885
cs=0x1a2;eip=0x00d886; 	J(RETN(0));	// 34828                  retn ;~ 01A2:D886

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1d815: 	goto loc_1d815;
        case m2c::kloc_1d81a: 	goto loc_1d81a;
        case m2c::kloc_1d81e: 	goto loc_1d81e;
        case m2c::kloc_1d82f: 	goto loc_1d82f;
        case m2c::kloc_1d83a: 	goto loc_1d83a;
        case m2c::kloc_1d844: 	goto loc_1d844;
        case m2c::kloc_1d84a: 	goto loc_1d84a;
        case m2c::kloc_1d84e: 	goto loc_1d84e;
        case m2c::kloc_1d85f: 	goto loc_1d85f;
        case m2c::kloc_1d86a: 	goto loc_1d86a;
        case m2c::ksub_1d7fe: 	goto sub_1d7fe;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1d887(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1d887:
    _begin:
cs=0x1a2;eip=0x00d887; 	X(PUSH(ax));	// 34837                  push    ax ;~ 01A2:D887
cs=0x1a2;eip=0x00d888; 	X(PUSH(bx));	// 34838                  push    bx ;~ 01A2:D888
cs=0x1a2;eip=0x00d889; 	T(ax = *(dw*)(((db*)&seg_1f171)+1););	// 34839                  mov     ax, seg_1F171+1 ;~ 01A2:D889
cs=0x1a2;eip=0x00d88c; 	T(CMP(ax, word_1f18a));	// 34840                  cmp     ax, word_1F18A ;~ 01A2:D88C
cs=0x1a2;eip=0x00d890; 	J(JNZ(loc_1d89b));	// 34841                  jnz     short loc_1D89B ;~ 01A2:D890
cs=0x1a2;eip=0x00d892; 	T(bx = word_1f18a;);	// 34842                  mov     bx, word_1F18A ;~ 01A2:D892
cs=0x1a2;eip=0x00d896; 	T(ax = word_1f91e;);	// 34843                  mov     ax, ds:word_1F91E ;~ 01A2:D896
cs=0x1a2;eip=0x00d899; 	J(JMP(loc_1d8b1));	// 34844                  jmp     short loc_1D8B1 ;~ 01A2:D899
loc_1d89b:
	// 6382 
cs=0x1a2;eip=0x00d89b; 	T(CMP(ax, word_1f91e));	// 34848                  cmp     ax, ds:word_1F91E ;~ 01A2:D89B
cs=0x1a2;eip=0x00d89f; 	J(JNZ(loc_1d8aa));	// 34849                  jnz     short loc_1D8AA ;~ 01A2:D89F
cs=0x1a2;eip=0x00d8a1; 	T(bx = word_1f91e;);	// 34850                  mov     bx, ds:word_1F91E ;~ 01A2:D8A1
cs=0x1a2;eip=0x00d8a5; 	T(ax = word_1f18c;);	// 34851                  mov     ax, word_1F18C ;~ 01A2:D8A5
cs=0x1a2;eip=0x00d8a8; 	J(JMP(loc_1d8b1));	// 34852                  jmp     short loc_1D8B1 ;~ 01A2:D8A8
loc_1d8aa:
	// 6383 
cs=0x1a2;eip=0x00d8aa; 	T(bx = word_1f18c;);	// 34856                  mov     bx, word_1F18C ;~ 01A2:D8AA
cs=0x1a2;eip=0x00d8ae; 	T(ax = word_1f18a;);	// 34857                  mov     ax, word_1F18A ;~ 01A2:D8AE
loc_1d8b1:
	// 6384 
cs=0x1a2;eip=0x00d8b1; 	X(*(dw*)(((db*)&seg_1f171)+1) = ax;);	// 34861                  mov     seg_1F171+1, ax ;~ 01A2:D8B1
cs=0x1a2;eip=0x00d8b4; 	X(*(dw*)(&unk_1f170) = bx;);	// 34862                  mov     word ptr unk_1F170, bx ;~ 01A2:D8B4
cs=0x1a2;eip=0x00d8b8; 	X(POP(bx));	// 34863                  pop     bx ;~ 01A2:D8B8
cs=0x1a2;eip=0x00d8b9; 	X(POP(ax));	// 34864                  pop     ax ;~ 01A2:D8B9
cs=0x1a2;eip=0x00d8ba; 	J(RETN(0));	// 34865                  retn ;~ 01A2:D8BA

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1d89b: 	goto loc_1d89b;
        case m2c::kloc_1d8aa: 	goto loc_1d8aa;
        case m2c::kloc_1d8b1: 	goto loc_1d8b1;
        case m2c::ksub_1d887: 	goto sub_1d887;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool nullsub_6(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    nullsub_6:
    _begin:
cs=0x1a2;eip=0x00d8bb; 	J(RETN(0));	// 34874                  retn ;~ 01A2:D8BB

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::knullsub_6: 	goto nullsub_6;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_d8bc_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_d8bc_proc:
    _begin:
cs=0x1a2;eip=0x00d8bc; 	T(si = 0x0F812;);	// 34878                  mov     si, 0F812h ;~ 01A2:D8BC
cs=0x1a2;eip=0x00d8bf; 	J(CALL(sub_1d4c6,0));	// 34879                  call    sub_1D4C6 ;~ 01A2:D8BF
cs=0x1a2;eip=0x00d8c2; 	J(RETN(0));	// 34880                  retn ;~ 01A2:D8C2

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kseg000_d8bc_proc: 	goto seg000_d8bc_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1d8c3(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1d8c3:
    _begin:
cs=0x1a2;eip=0x00d8c3; 	X(PUSH(ax));	// 34888                  push    ax ;~ 01A2:D8C3
cs=0x1a2;eip=0x00d8c4; 	X(PUSH(cx));	// 34889                  push    cx ;~ 01A2:D8C4
cs=0x1a2;eip=0x00d8c5; 	X(PUSH(dx));	// 34890                  push    dx ;~ 01A2:D8C5
cs=0x1a2;eip=0x00d8c6; 	X(PUSH(bx));	// 34891                  push    bx ;~ 01A2:D8C6
cs=0x1a2;eip=0x00d8c7; 	T(cx = 0x16;);	// 34892                  mov     cx, 16h ;~ 01A2:D8C7
cs=0x1a2;eip=0x00d8ca; 	T(bh = 0;);	// 34893                  mov     bh, 0 ;~ 01A2:D8CA
cs=0x1a2;eip=0x00d8cc; 	T(dh = 6;);	// 34894                  mov     dh, 6 ;~ 01A2:D8CC
cs=0x1a2;eip=0x00d8ce; 	T(dl = 0x8F;);	// 34895                  mov     dl, 8Fh ;~ 01A2:D8CE
cs=0x1a2;eip=0x00d8d0; 	T(ax = 0x115;);	// 34896                  mov     ax, 115h ;~ 01A2:D8D0
cs=0x1a2;eip=0x00d8d3; 	J(CALL(sub_15d80,0));	// 34897                  call    sub_15D80 ;~ 01A2:D8D3
cs=0x1a2;eip=0x00d8d6; 	J(CALL(sub_1d8de,0));	// 34898                  call    sub_1D8DE ;~ 01A2:D8D6
cs=0x1a2;eip=0x00d8d9; 	X(POP(bx));	// 34899                  pop     bx ;~ 01A2:D8D9
cs=0x1a2;eip=0x00d8da; 	X(POP(dx));	// 34900                  pop     dx ;~ 01A2:D8DA
cs=0x1a2;eip=0x00d8db; 	X(POP(cx));	// 34901                  pop     cx ;~ 01A2:D8DB
cs=0x1a2;eip=0x00d8dc; 	X(POP(ax));	// 34902                  pop     ax ;~ 01A2:D8DC
cs=0x1a2;eip=0x00d8dd; 	J(RETN(0));	// 34903                  retn ;~ 01A2:D8DD

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1d8c3: 	goto sub_1d8c3;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1d8de(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1d8de:
    _begin:
cs=0x1a2;eip=0x00d8de; 	T(bx = word_1f3aa;);	// 34912                  mov     bx, ds:word_1F3AA ;~ 01A2:D8DE
cs=0x1a2;eip=0x00d8e2; 	T(OR(bx, bx));	// 34913                  or      bx, bx ;~ 01A2:D8E2
cs=0x1a2;eip=0x00d8e4; 	J(JZ(locret_1d8ff));	// 34914                  jz      short locret_1D8FF ;~ 01A2:D8E4
cs=0x1a2;eip=0x00d8e6; 	T(ax = 0x16;);	// 34915                  mov     ax, 16h ;~ 01A2:D8E6
cs=0x1a2;eip=0x00d8e9; 	T(MUL1_2(bx));	// 34916                  mul     bx ;~ 01A2:D8E9
cs=0x1a2;eip=0x00d8eb; 	T(bx = word_1f870;);	// 34917                  mov     bx, ds:word_1F870 ;~ 01A2:D8EB
cs=0x1a2;eip=0x00d8ef; 	T(DIV2(bx));	// 34918                  div     bx ;~ 01A2:D8EF
cs=0x1a2;eip=0x00d8f1; 	T(cx = ax;);	// 34919                  mov     cx, ax ;~ 01A2:D8F1
cs=0x1a2;eip=0x00d8f3; 	T(bh = 4;);	// 34920                  mov     bh, 4 ;~ 01A2:D8F3
cs=0x1a2;eip=0x00d8f5; 	T(dh = 6;);	// 34921                  mov     dh, 6 ;~ 01A2:D8F5
cs=0x1a2;eip=0x00d8f7; 	T(dl = 0x8F;);	// 34922                  mov     dl, 8Fh ;~ 01A2:D8F7
cs=0x1a2;eip=0x00d8f9; 	T(ax = 0x115;);	// 34923                  mov     ax, 115h ;~ 01A2:D8F9
cs=0x1a2;eip=0x00d8fc; 	J(CALL(sub_15d80,0));	// 34924                  call    sub_15D80 ;~ 01A2:D8FC
locret_1d8ff:
	// 6385 
cs=0x1a2;eip=0x00d8ff; 	J(RETN(0));	// 34927                  retn ;~ 01A2:D8FF

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::klocret_1d8ff: 	goto locret_1d8ff;
        case m2c::ksub_1d8de: 	goto sub_1d8de;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_d900_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_d900_proc:
    _begin:
cs=0x1a2;eip=0x00d900; 	X(PUSH(ax));	// 34931                  push    ax ;~ 01A2:D900
cs=0x1a2;eip=0x00d901; 	X(PUSH(bx));	// 34932                  push    bx ;~ 01A2:D901
cs=0x1a2;eip=0x00d902; 	X(PUSH(cx));	// 34933                  push    cx ;~ 01A2:D902
cs=0x1a2;eip=0x00d903; 	X(PUSH(dx));	// 34934                  push    dx ;~ 01A2:D903
cs=0x1a2;eip=0x00d904; 	X(PUSH(bp));	// 34935                  push    bp ;~ 01A2:D904
cs=0x1a2;eip=0x00d905; 	X(PUSH(si));	// 34936                  push    si ;~ 01A2:D905
cs=0x1a2;eip=0x00d906; 	X(PUSH(di));	// 34937                  push    di ;~ 01A2:D906
cs=0x1a2;eip=0x00d907; 	X(PUSH(es));	// 34938                  push    es ;~ 01A2:D907
cs=0x1a2;eip=0x00d908; 	X(PUSH(ds));	// 34939                  push    ds ;~ 01A2:D908
cs=0x1a2;eip=0x00d909; 	T(ax = 0x777;);	// 34940                  mov     ax, 777h ;~ 01A2:D909
cs=0x1a2;eip=0x00d90c; 	T(dx = 0x333;);	// 34941                  mov     dx, 333h ;~ 01A2:D90C
cs=0x1a2;eip=0x00d90f; 	J(JMP(loc_1d932));	// 34942                  jmp     short loc_1D932 ;~ 01A2:D90F
ret_1a2_d911:
	// 6386 
cs=0x1a2;eip=0x00d911; 	J(RETN(0));	// 34944                  retn ;~ 01A2:D911
ret_1a2_d912:
	// 6387 
cs=0x1a2;eip=0x00d912; 	X(PUSH(ax));	// 34946                  push    ax ;~ 01A2:D912
cs=0x1a2;eip=0x00d913; 	X(PUSH(bx));	// 34947                  push    bx ;~ 01A2:D913
cs=0x1a2;eip=0x00d914; 	X(PUSH(cx));	// 34948                  push    cx ;~ 01A2:D914
cs=0x1a2;eip=0x00d915; 	X(PUSH(dx));	// 34949                  push    dx ;~ 01A2:D915
cs=0x1a2;eip=0x00d916; 	X(PUSH(bp));	// 34950                  push    bp ;~ 01A2:D916
cs=0x1a2;eip=0x00d917; 	X(PUSH(si));	// 34951                  push    si ;~ 01A2:D917
cs=0x1a2;eip=0x00d918; 	X(PUSH(di));	// 34952                  push    di ;~ 01A2:D918
cs=0x1a2;eip=0x00d919; 	X(PUSH(es));	// 34953                  push    es ;~ 01A2:D919
cs=0x1a2;eip=0x00d91a; 	X(PUSH(ds));	// 34954                  push    ds ;~ 01A2:D91A
cs=0x1a2;eip=0x00d91b; 	T(ax = 0x777;);	// 34955                  mov     ax, 777h ;~ 01A2:D91B
cs=0x1a2;eip=0x00d91e; 	T(dx = 0;);	// 34956                  mov     dx, 0 ;~ 01A2:D91E
cs=0x1a2;eip=0x00d921; 	J(JMP(loc_1d932));	// 34957                  jmp     short loc_1D932 ;~ 01A2:D921
ret_1a2_d923:
	// 6388 
cs=0x1a2;eip=0x00d923; 	X(PUSH(ax));	// 34959                  push    ax ;~ 01A2:D923
cs=0x1a2;eip=0x00d924; 	X(PUSH(bx));	// 34960                  push    bx ;~ 01A2:D924
cs=0x1a2;eip=0x00d925; 	X(PUSH(cx));	// 34961                  push    cx ;~ 01A2:D925
cs=0x1a2;eip=0x00d926; 	X(PUSH(dx));	// 34962                  push    dx ;~ 01A2:D926
cs=0x1a2;eip=0x00d927; 	X(PUSH(bp));	// 34963                  push    bp ;~ 01A2:D927
cs=0x1a2;eip=0x00d928; 	X(PUSH(si));	// 34964                  push    si ;~ 01A2:D928
cs=0x1a2;eip=0x00d929; 	X(PUSH(di));	// 34965                  push    di ;~ 01A2:D929
cs=0x1a2;eip=0x00d92a; 	X(PUSH(es));	// 34966                  push    es ;~ 01A2:D92A
cs=0x1a2;eip=0x00d92b; 	X(PUSH(ds));	// 34967                  push    ds ;~ 01A2:D92B
cs=0x1a2;eip=0x00d92c; 	T(ax = 0x700;);	// 34968                  mov     ax, 700h ;~ 01A2:D92C
cs=0x1a2;eip=0x00d92f; 	T(dx = 0;);	// 34969                  mov     dx, 0 ;~ 01A2:D92F
loc_1d932:
	// 6389 
cs=0x1a2;eip=0x00d932; 	T(di = 0x89C;);	// 34973                  mov     di, 89Ch ;~ 01A2:D932
cs=0x1a2;eip=0x00d935; 	T(cx = 8;);	// 34974                  mov     cx, 8 ;~ 01A2:D935
loc_1d938:
	// 6390 
cs=0x1a2;eip=0x00d938; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 34977                  mov     [di], ax ;~ 01A2:D938
cs=0x1a2;eip=0x00d93a; 	X(MOV(*(dw*)(raddr(ds,di+0x22)), ax));	// 34978                  mov     [di+22h], ax ;~ 01A2:D93A
cs=0x1a2;eip=0x00d93d; 	X(MOV(*(dw*)(raddr(ds,di+2)), dx));	// 34979                  mov     [di+2], dx ;~ 01A2:D93D
cs=0x1a2;eip=0x00d940; 	X(MOV(*(dw*)(raddr(ds,di+0x20)), dx));	// 34980                  mov     [di+20h], dx ;~ 01A2:D940
cs=0x1a2;eip=0x00d943; 	T(ADD(di, 4));	// 34981                  add     di, 4 ;~ 01A2:D943
cs=0x1a2;eip=0x00d946; 	J(LOOP(loc_1d938));	// 34982                  loop    loc_1D938 ;~ 01A2:D946
cs=0x1a2;eip=0x00d948; 	T(cx = 3;);	// 34983                  mov     cx, 3 ;~ 01A2:D948
loc_1d94b:
	// 6391 
cs=0x1a2;eip=0x00d94b; 	T(si = 0x89C;);	// 34986                  mov     si, 89Ch ;~ 01A2:D94B
cs=0x1a2;eip=0x00d94e; 	J(CALL(sub_1d4c6,0));	// 34987                  call    sub_1D4C6 ;~ 01A2:D94E
cs=0x1a2;eip=0x00d951; 	T(si = 0x8BC;);	// 34988                  mov     si, 8BCh ;~ 01A2:D951
cs=0x1a2;eip=0x00d954; 	J(CALL(sub_1d4c6,0));	// 34989                  call    sub_1D4C6 ;~ 01A2:D954
cs=0x1a2;eip=0x00d957; 	J(LOOP(loc_1d94b));	// 34990                  loop    loc_1D94B ;~ 01A2:D957
cs=0x1a2;eip=0x00d959; 	T(si = 0x0F812;);	// 34991                  mov     si, 0F812h ;~ 01A2:D959
cs=0x1a2;eip=0x00d95c; 	J(CALL(sub_1d4c6,0));	// 34992                  call    sub_1D4C6 ;~ 01A2:D95C
cs=0x1a2;eip=0x00d95f; 	X(POP(ds));	// 34993                  pop     ds ;~ 01A2:D95F
cs=0x1a2;eip=0x00d960; 	X(POP(es));	// 34995                  pop     es ;~ 01A2:D960
cs=0x1a2;eip=0x00d961; 	X(POP(di));	// 34997                  pop     di ;~ 01A2:D961
cs=0x1a2;eip=0x00d962; 	X(POP(si));	// 34998                  pop     si ;~ 01A2:D962
cs=0x1a2;eip=0x00d963; 	X(POP(bp));	// 34999                  pop     bp ;~ 01A2:D963
cs=0x1a2;eip=0x00d964; 	X(POP(dx));	// 35000                  pop     dx ;~ 01A2:D964
cs=0x1a2;eip=0x00d965; 	X(POP(cx));	// 35001                  pop     cx ;~ 01A2:D965
cs=0x1a2;eip=0x00d966; 	X(POP(bx));	// 35002                  pop     bx ;~ 01A2:D966
cs=0x1a2;eip=0x00d967; 	X(POP(ax));	// 35003                  pop     ax ;~ 01A2:D967
cs=0x1a2;eip=0x00d968; 	J(RETN(0));	// 35004                  retn ;~ 01A2:D968
loc_1d969:
	// 6392 
cs=0x1a2;eip=0x00d969; 	X(PUSH(ax));	// 35008                  push    ax ;~ 01A2:D969
cs=0x1a2;eip=0x00d96a; 	X(PUSH(bx));	// 35009                  push    bx ;~ 01A2:D96A
cs=0x1a2;eip=0x00d96b; 	X(PUSH(cx));	// 35010                  push    cx ;~ 01A2:D96B
cs=0x1a2;eip=0x00d96c; 	X(PUSH(dx));	// 35011                  push    dx ;~ 01A2:D96C
cs=0x1a2;eip=0x00d96d; 	X(PUSH(bp));	// 35012                  push    bp ;~ 01A2:D96D
cs=0x1a2;eip=0x00d96e; 	X(PUSH(si));	// 35013                  push    si ;~ 01A2:D96E
cs=0x1a2;eip=0x00d96f; 	X(PUSH(di));	// 35014                  push    di ;~ 01A2:D96F
cs=0x1a2;eip=0x00d970; 	X(PUSH(es));	// 35015                  push    es ;~ 01A2:D970
cs=0x1a2;eip=0x00d971; 	X(PUSH(ds));	// 35016                  push    ds ;~ 01A2:D971
cs=0x1a2;eip=0x00d972; 	X(*(dw*)(&unk_7009a) = 0;);	// 35017                  mov     word ptr ss:unk_7009A, 0 ;~ 01A2:D972
cs=0x1a2;eip=0x00d979; 	X(*(dw*)(&unk_7009c) = 0x1EF0;);	// 35018                  mov     word ptr ss:unk_7009C, 1EF0h ;~ 01A2:D979
cs=0x1a2;eip=0x00d980; 	T(ax = 0;);	// 35019                  mov     ax, 0 ;~ 01A2:D980
cs=0x1a2;eip=0x00d983; 	X(byte_70099 = 0;);	// 35020                  mov     ss:byte_70099, 0 ;~ 01A2:D983
cs=0x1a2;eip=0x00d989; 	J(CALL(sub_1d523,0));	// 35021                  call    sub_1D523 ;~ 01A2:D989
cs=0x1a2;eip=0x00d98c; 	X(POP(ds));	// 35022                  pop     ds ;~ 01A2:D98C
cs=0x1a2;eip=0x00d98d; 	X(POP(es));	// 35023                  pop     es ;~ 01A2:D98D
cs=0x1a2;eip=0x00d98e; 	X(POP(di));	// 35024                  pop     di ;~ 01A2:D98E
cs=0x1a2;eip=0x00d98f; 	X(POP(si));	// 35025                  pop     si ;~ 01A2:D98F
cs=0x1a2;eip=0x00d990; 	X(POP(bp));	// 35026                  pop     bp ;~ 01A2:D990
cs=0x1a2;eip=0x00d991; 	X(POP(dx));	// 35027                  pop     dx ;~ 01A2:D991
cs=0x1a2;eip=0x00d992; 	X(POP(cx));	// 35028                  pop     cx ;~ 01A2:D992
cs=0x1a2;eip=0x00d993; 	X(POP(bx));	// 35029                  pop     bx ;~ 01A2:D993
cs=0x1a2;eip=0x00d994; 	X(POP(ax));	// 35030                  pop     ax ;~ 01A2:D994
cs=0x1a2;eip=0x00d995; 	J(RETN(0));	// 35031                  retn ;~ 01A2:D995

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1d932: 	goto loc_1d932;
        case m2c::kloc_1d938: 	goto loc_1d938;
        case m2c::kloc_1d94b: 	goto loc_1d94b;
        case m2c::kloc_1d969: 	goto loc_1d969;
        case m2c::kret_1a2_d911: 	goto ret_1a2_d911;
        case m2c::kret_1a2_d912: 	goto ret_1a2_d912;
        case m2c::kret_1a2_d923: 	goto ret_1a2_d923;
        case m2c::kseg000_d900_proc: 	goto seg000_d900_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1d996(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1d996:
    _begin:
cs=0x1a2;eip=0x00d996; 	X(PUSH(ax));	// 35038                  push    ax ;~ 01A2:D996
cs=0x1a2;eip=0x00d997; 	X(PUSH(bx));	// 35039                  push    bx ;~ 01A2:D997
cs=0x1a2;eip=0x00d998; 	X(PUSH(cx));	// 35040                  push    cx ;~ 01A2:D998
cs=0x1a2;eip=0x00d999; 	X(PUSH(dx));	// 35041                  push    dx ;~ 01A2:D999
cs=0x1a2;eip=0x00d99a; 	X(PUSH(bp));	// 35042                  push    bp ;~ 01A2:D99A
cs=0x1a2;eip=0x00d99b; 	X(PUSH(si));	// 35043                  push    si ;~ 01A2:D99B
cs=0x1a2;eip=0x00d99c; 	X(PUSH(di));	// 35044                  push    di ;~ 01A2:D99C
cs=0x1a2;eip=0x00d99d; 	X(PUSH(es));	// 35045                  push    es ;~ 01A2:D99D
cs=0x1a2;eip=0x00d99e; 	X(PUSH(ds));	// 35046                  push    ds ;~ 01A2:D99E
cs=0x1a2;eip=0x00d99f; 	X(*(dw*)(&unk_7009a) = 0;);	// 35047                  mov     word ptr ss:unk_7009A, 0 ;~ 01A2:D99F
cs=0x1a2;eip=0x00d9a6; 	X(*(dw*)(&unk_7009c) = 0;);	// 35048                  mov     word ptr ss:unk_7009C, 0 ;~ 01A2:D9A6
cs=0x1a2;eip=0x00d9ad; 	T(ax = 0;);	// 35049                  mov     ax, 0 ;~ 01A2:D9AD
cs=0x1a2;eip=0x00d9b0; 	X(byte_70099 = 0;);	// 35050                  mov     ss:byte_70099, 0 ;~ 01A2:D9B0
cs=0x1a2;eip=0x00d9b6; 	J(CALL(sub_1d523,0));	// 35051                  call    sub_1D523 ;~ 01A2:D9B6
cs=0x1a2;eip=0x00d9b9; 	X(POP(ds));	// 35052                  pop     ds ;~ 01A2:D9B9
cs=0x1a2;eip=0x00d9ba; 	X(POP(es));	// 35053                  pop     es ;~ 01A2:D9BA
cs=0x1a2;eip=0x00d9bb; 	X(POP(di));	// 35054                  pop     di ;~ 01A2:D9BB
cs=0x1a2;eip=0x00d9bc; 	X(POP(si));	// 35055                  pop     si ;~ 01A2:D9BC
cs=0x1a2;eip=0x00d9bd; 	X(POP(bp));	// 35056                  pop     bp ;~ 01A2:D9BD
cs=0x1a2;eip=0x00d9be; 	X(POP(dx));	// 35057                  pop     dx ;~ 01A2:D9BE
cs=0x1a2;eip=0x00d9bf; 	X(POP(cx));	// 35058                  pop     cx ;~ 01A2:D9BF
cs=0x1a2;eip=0x00d9c0; 	X(POP(bx));	// 35059                  pop     bx ;~ 01A2:D9C0
cs=0x1a2;eip=0x00d9c1; 	X(POP(ax));	// 35060                  pop     ax ;~ 01A2:D9C1
cs=0x1a2;eip=0x00d9c2; 	J(RETN(0));	// 35061                  retn ;~ 01A2:D9C2

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1d996: 	goto sub_1d996;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1d9c3(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1d9c3:
    _begin:
cs=0x1a2;eip=0x00d9c3; 	X(PUSH(ax));	// 35070                  push    ax ;~ 01A2:D9C3
cs=0x1a2;eip=0x00d9c4; 	X(PUSH(bx));	// 35071                  push    bx ;~ 01A2:D9C4
cs=0x1a2;eip=0x00d9c5; 	X(PUSH(cx));	// 35072                  push    cx ;~ 01A2:D9C5
cs=0x1a2;eip=0x00d9c6; 	X(PUSH(dx));	// 35073                  push    dx ;~ 01A2:D9C6
cs=0x1a2;eip=0x00d9c7; 	X(PUSH(bp));	// 35074                  push    bp ;~ 01A2:D9C7
cs=0x1a2;eip=0x00d9c8; 	X(PUSH(si));	// 35075                  push    si ;~ 01A2:D9C8
cs=0x1a2;eip=0x00d9c9; 	X(PUSH(di));	// 35076                  push    di ;~ 01A2:D9C9
cs=0x1a2;eip=0x00d9ca; 	X(PUSH(es));	// 35077                  push    es ;~ 01A2:D9CA
cs=0x1a2;eip=0x00d9cb; 	X(PUSH(ds));	// 35078                  push    ds ;~ 01A2:D9CB
cs=0x1a2;eip=0x00d9cc; 	X(*(dw*)(&unk_7009a) = 0;);	// 35079                  mov     word ptr ss:unk_7009A, 0 ;~ 01A2:D9CC
cs=0x1a2;eip=0x00d9d3; 	X(*(dw*)(&unk_7009c) = 0;);	// 35080                  mov     word ptr ss:unk_7009C, 0 ;~ 01A2:D9D3
cs=0x1a2;eip=0x00d9da; 	T(ax = 0;);	// 35081                  mov     ax, 0 ;~ 01A2:D9DA
cs=0x1a2;eip=0x00d9dd; 	X(byte_70099 = 1;);	// 35082                  mov     ss:byte_70099, 1 ;~ 01A2:D9DD
cs=0x1a2;eip=0x00d9e3; 	J(CALL(sub_1d523,0));	// 35083                  call    sub_1D523 ;~ 01A2:D9E3
cs=0x1a2;eip=0x00d9e6; 	X(POP(ds));	// 35084                  pop     ds ;~ 01A2:D9E6
cs=0x1a2;eip=0x00d9e7; 	X(POP(es));	// 35086                  pop     es ;~ 01A2:D9E7
cs=0x1a2;eip=0x00d9e8; 	X(POP(di));	// 35088                  pop     di ;~ 01A2:D9E8
cs=0x1a2;eip=0x00d9e9; 	X(POP(si));	// 35089                  pop     si ;~ 01A2:D9E9
cs=0x1a2;eip=0x00d9ea; 	X(POP(bp));	// 35090                  pop     bp ;~ 01A2:D9EA
cs=0x1a2;eip=0x00d9eb; 	X(POP(dx));	// 35091                  pop     dx ;~ 01A2:D9EB
cs=0x1a2;eip=0x00d9ec; 	X(POP(cx));	// 35092                  pop     cx ;~ 01A2:D9EC
cs=0x1a2;eip=0x00d9ed; 	X(POP(bx));	// 35093                  pop     bx ;~ 01A2:D9ED
cs=0x1a2;eip=0x00d9ee; 	X(POP(ax));	// 35094                  pop     ax ;~ 01A2:D9EE
cs=0x1a2;eip=0x00d9ef; 	J(RETN(0));	// 35095                  retn ;~ 01A2:D9EF

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1d9c3: 	goto sub_1d9c3;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_d9f0_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_d9f0_proc:
    _begin:
loc_1d9f0:
	// 6393 
cs=0x1a2;eip=0x00d9f0; 	X(PUSH(ax));	// 35101                  push    ax ;~ 01A2:D9F0
cs=0x1a2;eip=0x00d9f1; 	X(PUSH(bx));	// 35102                  push    bx ;~ 01A2:D9F1
cs=0x1a2;eip=0x00d9f2; 	X(PUSH(cx));	// 35103                  push    cx ;~ 01A2:D9F2
cs=0x1a2;eip=0x00d9f3; 	X(PUSH(dx));	// 35104                  push    dx ;~ 01A2:D9F3
cs=0x1a2;eip=0x00d9f4; 	X(PUSH(bp));	// 35105                  push    bp ;~ 01A2:D9F4
cs=0x1a2;eip=0x00d9f5; 	X(PUSH(si));	// 35106                  push    si ;~ 01A2:D9F5
cs=0x1a2;eip=0x00d9f6; 	X(PUSH(di));	// 35107                  push    di ;~ 01A2:D9F6
cs=0x1a2;eip=0x00d9f7; 	X(PUSH(es));	// 35108                  push    es ;~ 01A2:D9F7
cs=0x1a2;eip=0x00d9f8; 	X(PUSH(ds));	// 35109                  push    ds ;~ 01A2:D9F8
cs=0x1a2;eip=0x00d9f9; 	X(*(dw*)(&unk_7009a) = 0x1EF0;);	// 35110                  mov     word ptr ss:unk_7009A, 1EF0h ;~ 01A2:D9F9
cs=0x1a2;eip=0x00da00; 	X(*(dw*)(&unk_7009c) = 0;);	// 35111                  mov     word ptr ss:unk_7009C, 0 ;~ 01A2:DA00
cs=0x1a2;eip=0x00da07; 	T(ax = 1;);	// 35112                  mov     ax, 1 ;~ 01A2:DA07
cs=0x1a2;eip=0x00da0a; 	X(byte_70099 = 1;);	// 35113                  mov     ss:byte_70099, 1 ;~ 01A2:DA0A
cs=0x1a2;eip=0x00da10; 	J(CALL(sub_1d523,0));	// 35114                  call    sub_1D523 ;~ 01A2:DA10
cs=0x1a2;eip=0x00da13; 	X(POP(ds));	// 35115                  pop     ds ;~ 01A2:DA13
cs=0x1a2;eip=0x00da14; 	X(POP(es));	// 35116                  pop     es ;~ 01A2:DA14
cs=0x1a2;eip=0x00da15; 	X(POP(di));	// 35117                  pop     di ;~ 01A2:DA15
cs=0x1a2;eip=0x00da16; 	X(POP(si));	// 35118                  pop     si ;~ 01A2:DA16
cs=0x1a2;eip=0x00da17; 	X(POP(bp));	// 35119                  pop     bp ;~ 01A2:DA17
cs=0x1a2;eip=0x00da18; 	X(POP(dx));	// 35120                  pop     dx ;~ 01A2:DA18
cs=0x1a2;eip=0x00da19; 	X(POP(cx));	// 35121                  pop     cx ;~ 01A2:DA19
cs=0x1a2;eip=0x00da1a; 	X(POP(bx));	// 35122                  pop     bx ;~ 01A2:DA1A
cs=0x1a2;eip=0x00da1b; 	X(POP(ax));	// 35123                  pop     ax ;~ 01A2:DA1B
cs=0x1a2;eip=0x00da1c; 	J(RETN(0));	// 35124                  retn ;~ 01A2:DA1C

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1d9f0: 	goto loc_1d9f0;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool nullsub_7(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    nullsub_7:
    _begin:
cs=0x1a2;eip=0x00da1d; 	J(RETN(0));	// 35131                  retn ;~ 01A2:DA1D

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::knullsub_7: 	goto nullsub_7;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool nullsub_9(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    nullsub_9:
    _begin:
cs=0x1a2;eip=0x00da1e; 	J(RETN(0));	// 35140                  retn ;~ 01A2:DA1E

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::knullsub_9: 	goto nullsub_9;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1da1f(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1da1f:
    _begin:
cs=0x1a2;eip=0x00da1f; 	X(byte_1f776 = 0;);	// 35149                  mov     ds:byte_1F776, 0 ;~ 01A2:DA1F
cs=0x1a2;eip=0x00da24; 	T(XOR(dx, dx));	// 35150                  xor     dx, dx ;~ 01A2:DA24
cs=0x1a2;eip=0x00da26; 	T(ax = 3;);	// 35151                  mov     ax, 3 ;~ 01A2:DA26
cs=0x1a2;eip=0x00da29; 	J(CALL(sub_1410e,0));	// 35152                  call    sub_1410E ;~ 01A2:DA29
cs=0x1a2;eip=0x00da2c; 	X(word_1f1ce = di;);	// 35153                  mov     word_1F1CE, di ;~ 01A2:DA2C
cs=0x1a2;eip=0x00da30; 	T(dx = 1;);	// 35154                  mov     dx, 1 ;~ 01A2:DA30
cs=0x1a2;eip=0x00da33; 	T(cx = 2;);	// 35155                  mov     cx, 2 ;~ 01A2:DA33
cs=0x1a2;eip=0x00da36; 	T(XOR(bp, bp));	// 35156                  xor     bp, bp ;~ 01A2:DA36
loc_1da38:
	// 6394 
cs=0x1a2;eip=0x00da38; 	T(al = 3;);	// 35159                  mov     al, 3 ;~ 01A2:DA38
cs=0x1a2;eip=0x00da3a; 	J(CALL(sub_1415c,0));	// 35160                  call    sub_1415C ;~ 01A2:DA3A
cs=0x1a2;eip=0x00da3d; 	T(OR(dx, dx));	// 35161                  or      dx, dx ;~ 01A2:DA3D
cs=0x1a2;eip=0x00da3f; 	J(JS(locret_1da58));	// 35162                  js      short locret_1DA58 ;~ 01A2:DA3F
cs=0x1a2;eip=0x00da41; 	X(INC(*(raddr(ds,di+0x1B))));	// 35163                  inc     byte ptr [di+1Bh] ;~ 01A2:DA41
cs=0x1a2;eip=0x00da44; 	X(INC(*(raddr(ds,di+0x1D))));	// 35164                  inc     byte ptr [di+1Dh] ;~ 01A2:DA44
cs=0x1a2;eip=0x00da47; 	T(XOR(di, di));	// 35165                  xor     di, di ;~ 01A2:DA47
cs=0x1a2;eip=0x00da49; 	T(al = 5;);	// 35166                  mov     al, 5 ;~ 01A2:DA49
cs=0x1a2;eip=0x00da4b; 	J(CALL(sub_1440a,0));	// 35167                  call    sub_1440A ;~ 01A2:DA4B
cs=0x1a2;eip=0x00da4e; 	T(di = *(dw*)(&off_1f194););	// 35168                  mov     di, word ptr off_1F194 ;~ 01A2:DA4E
cs=0x1a2;eip=0x00da52; 	X(MOV(*(raddr(ds,di)), 0));	// 35169                  mov     byte ptr [di], 0 ;~ 01A2:DA52
cs=0x1a2;eip=0x00da55; 	T(INC(dx));	// 35170                  inc     dx ;~ 01A2:DA55
cs=0x1a2;eip=0x00da56; 	J(JMP(loc_1da38));	// 35171                  jmp     short loc_1DA38 ;~ 01A2:DA56
locret_1da58:
	// 6395 
cs=0x1a2;eip=0x00da58; 	J(RETN(0));	// 35175                  retn ;~ 01A2:DA58

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1da38: 	goto loc_1da38;
        case m2c::klocret_1da58: 	goto locret_1da58;
        case m2c::ksub_1da1f: 	goto sub_1da1f;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group34(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group34:
    _begin:
seg000_da59_proc:
	// 35180 
loc_1da59:
	// 6396 
cs=0x1a2;eip=0x00da59; 	X(byte_1f776 = 0x0FF;);	// 35181                  mov     ds:byte_1F776, 0FFh ;~ 01A2:DA59
cs=0x1a2;eip=0x00da5e; 	J({;});	// 35182                  jmp     short $+2 ;~ 01A2:DA5E
sub_1da60:
	// 35187 
cs=0x1a2;eip=0x00da60; 	J(CALL(sub_11664,0));	// 35189                  call    sub_11664 ;~ 01A2:DA60
cs=0x1a2;eip=0x00da63; 	J(CALL(sub_1de52,0));	// 35190                  call    sub_1DE52 ;~ 01A2:DA63
cs=0x1a2;eip=0x00da66; 	J(CALL(sub_1de82,0));	// 35192                  call    sub_1DE82 ;~ 01A2:DA66
cs=0x1a2;eip=0x00da69; 	T(XOR(dx, dx));	// 35193                  xor     dx, dx ;~ 01A2:DA69
cs=0x1a2;eip=0x00da6b; 	T(ax = 6;);	// 35194                  mov     ax, 6 ;~ 01A2:DA6B
cs=0x1a2;eip=0x00da6e; 	J(CALL(sub_1410e,0));	// 35195                  call    sub_1410E ;~ 01A2:DA6E
cs=0x1a2;eip=0x00da71; 	X(word_1f1cc = di;);	// 35196                  mov     word_1F1CC, di ;~ 01A2:DA71
cs=0x1a2;eip=0x00da75; 	T(MOV(ax, *(dw*)(raddr(ds,di+6))));	// 35197                  mov     ax, [di+6] ;~ 01A2:DA75
cs=0x1a2;eip=0x00da78; 	J(CALL(sub_12188,0));	// 35198                  call    sub_12188 ;~ 01A2:DA78
cs=0x1a2;eip=0x00da7b; 	T(dx = word_1f3a2;);	// 35199                  mov     dx, ds:word_1F3A2 ;~ 01A2:DA7B
cs=0x1a2;eip=0x00da7f; 	T(OR(dx, dx));	// 35200                  or      dx, dx ;~ 01A2:DA7F
cs=0x1a2;eip=0x00da81; 	J(JNZ(loc_1da8a));	// 35201                  jnz     short loc_1DA8A ;~ 01A2:DA81
cs=0x1a2;eip=0x00da83; 	T(dx = 0;);	// 35202                  mov     dx, 0 ;~ 01A2:DA83
cs=0x1a2;eip=0x00da86; 	X(word_1f3a2 = dx;);	// 35203                  mov     ds:word_1F3A2, dx ;~ 01A2:DA86
loc_1da8a:
	// 6397 
cs=0x1a2;eip=0x00da8a; 	T(ax = 3;);	// 35206                  mov     ax, 3 ;~ 01A2:DA8A
cs=0x1a2;eip=0x00da8d; 	J(CALL(sub_1410e,0));	// 35207                  call    sub_1410E ;~ 01A2:DA8D
cs=0x1a2;eip=0x00da90; 	T(MOV(al, *(raddr(ds,di+2))));	// 35208                  mov     al, [di+2] ;~ 01A2:DA90
cs=0x1a2;eip=0x00da93; 	X(*(db*)(&off_1f831) = al;);	// 35209                  mov     byte ptr ds:off_1F831, al ;~ 01A2:DA93
cs=0x1a2;eip=0x00da96; 	T(MOV(al, *(raddr(ds,di+2))));	// 35210                  mov     al, [di+2] ;~ 01A2:DA96
cs=0x1a2;eip=0x00da99; 	X(*(db*)(((db*)&off_1f831)+1) = al;);	// 35211                  mov     byte ptr ds:off_1F831+1, al ;~ 01A2:DA99
cs=0x1a2;eip=0x00da9c; 	T(MOV(al, *(raddr(ds,di+4))));	// 35212                  mov     al, [di+4] ;~ 01A2:DA9C
cs=0x1a2;eip=0x00da9f; 	X(byte_1f76a = al;);	// 35213                  mov     ds:byte_1F76A, al ;~ 01A2:DA9F
cs=0x1a2;eip=0x00daa2; 	T(TEST(*(raddr(ds,di+0x17)), 0x40));	// 35214                  test    byte ptr [di+17h], 40h ;~ 01A2:DAA2
cs=0x1a2;eip=0x00daa6; 	X(PUSHF);	// 35215                  pushf ;~ 01A2:DAA6
cs=0x1a2;eip=0x00daa7; 	X(OR(*(raddr(ds,di+0x17)), 0x40));	// 35216                  or      byte ptr [di+17h], 40h ;~ 01A2:DAA7
cs=0x1a2;eip=0x00daab; 	X(POPF);	// 35217                  popf ;~ 01A2:DAAB
cs=0x1a2;eip=0x00daac; 	J(JNZ(loc_1dacf));	// 35218                  jnz     short loc_1DACF ;~ 01A2:DAAC
cs=0x1a2;eip=0x00daae; 	X(PUSH(si));	// 35219                  push    si ;~ 01A2:DAAE
cs=0x1a2;eip=0x00daaf; 	T(si = word_1f1f4;);	// 35220                  mov     si, word_1F1F4 ;~ 01A2:DAAF
cs=0x1a2;eip=0x00dab3; 	X(MOV(*(dw*)(raddr(ds,si)), 0x401C));	// 35221                  mov     word ptr [si], 401Ch ;~ 01A2:DAB3
cs=0x1a2;eip=0x00dab7; 	T(ADD(si, 2));	// 35222                  add     si, 2 ;~ 01A2:DAB7
cs=0x1a2;eip=0x00daba; 	X(MOV(*(dw*)(raddr(ds,si)), di));	// 35223                  mov     [si], di ;~ 01A2:DABA
cs=0x1a2;eip=0x00dabc; 	T(ADD(si, 2));	// 35224                  add     si, 2 ;~ 01A2:DABC
cs=0x1a2;eip=0x00dabf; 	T(ADD(si, 2));	// 35225                  add     si, 2 ;~ 01A2:DABF
cs=0x1a2;eip=0x00dac2; 	X(word_1f1f4 = si;);	// 35226                  mov     word_1F1F4, si ;~ 01A2:DAC2
cs=0x1a2;eip=0x00dac6; 	X(INC(word_1f396));	// 35227                  inc     ds:word_1F396 ;~ 01A2:DAC6
cs=0x1a2;eip=0x00daca; 	X(POP(si));	// 35228                  pop     si ;~ 01A2:DACA
cs=0x1a2;eip=0x00dacb; 	X(INC(word_1f6f2));	// 35229                  inc     ds:word_1F6F2 ;~ 01A2:DACB
loc_1dacf:
	// 6398 
cs=0x1a2;eip=0x00dacf; 	T(CMP(byte_1f776, 0));	// 35232                  cmp     ds:byte_1F776, 0 ;~ 01A2:DACF
cs=0x1a2;eip=0x00dad4; 	J(JNZ(loc_1dad9));	// 35233                  jnz     short loc_1DAD9 ;~ 01A2:DAD4
cs=0x1a2;eip=0x00dad6; 	J(JMP(loc_1db78));	// 35234                  jmp     loc_1DB78 ;~ 01A2:DAD6
loc_1dad9:
	// 6399 
cs=0x1a2;eip=0x00dad9; 	J(JNS(loc_1dade));	// 35238                  jns     short loc_1DADE ;~ 01A2:DAD9
cs=0x1a2;eip=0x00dadb; 	J(JMP(loc_1db78));	// 35239                  jmp     loc_1DB78 ;~ 01A2:DADB
loc_1dade:
	// 6400 
cs=0x1a2;eip=0x00dade; 	T(MOV(dl, *(raddr(ds,di+1))));	// 35243                  mov     dl, [di+1] ;~ 01A2:DADE
cs=0x1a2;eip=0x00dae1; 	T(MOV(dh, *(raddr(ds,di+3))));	// 35244                  mov     dh, [di+3] ;~ 01A2:DAE1
cs=0x1a2;eip=0x00dae4; 	T(es = *(dw*)(((db*)&off_1f194)+2););	// 35245                  mov     es, word ptr off_1F194+2 ;~ 01A2:DAE4
cs=0x1a2;eip=0x00dae8; 	T(bx = word_1f198;);	// 35247                  mov     bx, word_1F198 ;~ 01A2:DAE8
cs=0x1a2;eip=0x00daec; 	T(si = word_1f1cc;);	// 35248                  mov     si, word_1F1CC ;~ 01A2:DAEC
cs=0x1a2;eip=0x00daf0; 	T(cx = word_1f702;);	// 35249                  mov     cx, ds:word_1F702 ;~ 01A2:DAF0
cs=0x1a2;eip=0x00daf4; 	T(OR(cx, cx));	// 35250                  or      cx, cx ;~ 01A2:DAF4
cs=0x1a2;eip=0x00daf6; 	J(JNS(loc_1db17));	// 35251                  jns     short loc_1DB17 ;~ 01A2:DAF6
cs=0x1a2;eip=0x00daf8; 	T(XOR(dl, dl));	// 35252                  xor     dl, dl ;~ 01A2:DAF8
cs=0x1a2;eip=0x00dafa; 	T(CMP(cx, 0x0FFFE));	// 35253                  cmp     cx, 0FFFEh ;~ 01A2:DAFA
cs=0x1a2;eip=0x00dafd; 	J(JZ(loc_1db0a));	// 35254                  jz      short loc_1DB0A ;~ 01A2:DAFD
cs=0x1a2;eip=0x00daff; 	T(MOV(dl, *(raddr(ds,di+0x15))));	// 35255                  mov     dl, [di+15h] ;~ 01A2:DAFF
cs=0x1a2;eip=0x00db02; 	T(MOV(ax, *(dw*)(raddr(es,bx+0x10))));	// 35256                  mov     ax, es:[bx+10h] ;~ 01A2:DB02
cs=0x1a2;eip=0x00db06; 	T(ADD(dl, al));	// 35257                  add     dl, al ;~ 01A2:DB06
cs=0x1a2;eip=0x00db08; 	J(JMP(loc_1db26));	// 35258                  jmp     short loc_1DB26 ;~ 01A2:DB08
loc_1db0a:
	// 6401 
cs=0x1a2;eip=0x00db0a; 	T(MOV(dl, *(raddr(ds,di+4))));	// 35262                  mov     dl, [di+4] ;~ 01A2:DB0A
cs=0x1a2;eip=0x00db0d; 	T(SHL(dl, 1));	// 35263                  shl     dl, 1 ;~ 01A2:DB0D
cs=0x1a2;eip=0x00db0f; 	T(SHL(dl, 1));	// 35264                  shl     dl, 1 ;~ 01A2:DB0F
cs=0x1a2;eip=0x00db11; 	T(SHL(dl, 1));	// 35265                  shl     dl, 1 ;~ 01A2:DB11
cs=0x1a2;eip=0x00db13; 	T(DEC(dl));	// 35266                  dec     dl ;~ 01A2:DB13
cs=0x1a2;eip=0x00db15; 	J(JMP(loc_1db26));	// 35267                  jmp     short loc_1DB26 ;~ 01A2:DB15
loc_1db17:
	// 6402 
cs=0x1a2;eip=0x00db17; 	T(SUB(cl, dl));	// 35271                  sub     cl, dl ;~ 01A2:DB17
cs=0x1a2;eip=0x00db19; 	T(MOV(dl, *(raddr(ds,si))));	// 35272                  mov     dl, [si] ;~ 01A2:DB19
cs=0x1a2;eip=0x00db1b; 	T(AND(dl, 7));	// 35273                  and     dl, 7 ;~ 01A2:DB1B
cs=0x1a2;eip=0x00db1e; 	T(SHL(cl, 1));	// 35274                  shl     cl, 1 ;~ 01A2:DB1E
cs=0x1a2;eip=0x00db20; 	T(SHL(cl, 1));	// 35275                  shl     cl, 1 ;~ 01A2:DB20
cs=0x1a2;eip=0x00db22; 	T(SHL(cl, 1));	// 35276                  shl     cl, 1 ;~ 01A2:DB22
cs=0x1a2;eip=0x00db24; 	T(ADD(dl, cl));	// 35277                  add     dl, cl ;~ 01A2:DB24
loc_1db26:
	// 6403 
cs=0x1a2;eip=0x00db26; 	X(MOV(*(raddr(ds,si)), dl));	// 35281                  mov     [si], dl ;~ 01A2:DB26
cs=0x1a2;eip=0x00db28; 	T(cx = word_1f704;);	// 35282                  mov     cx, ds:word_1F704 ;~ 01A2:DB28
cs=0x1a2;eip=0x00db2c; 	T(OR(cx, cx));	// 35283                  or      cx, cx ;~ 01A2:DB2C
cs=0x1a2;eip=0x00db2e; 	J(JNS(loc_1db4f));	// 35284                  jns     short loc_1DB4F ;~ 01A2:DB2E
cs=0x1a2;eip=0x00db30; 	T(XOR(dh, dh));	// 35285                  xor     dh, dh ;~ 01A2:DB30
cs=0x1a2;eip=0x00db32; 	T(CMP(cx, 0x0FFFE));	// 35286                  cmp     cx, 0FFFEh ;~ 01A2:DB32
cs=0x1a2;eip=0x00db35; 	J(JZ(loc_1db42));	// 35287                  jz      short loc_1DB42 ;~ 01A2:DB35
cs=0x1a2;eip=0x00db37; 	T(MOV(dh, *(raddr(ds,di+0x14))));	// 35288                  mov     dh, [di+14h] ;~ 01A2:DB37
cs=0x1a2;eip=0x00db3a; 	T(MOV(ax, *(dw*)(raddr(es,bx+0x12))));	// 35289                  mov     ax, es:[bx+12h] ;~ 01A2:DB3A
cs=0x1a2;eip=0x00db3e; 	T(ADD(dh, al));	// 35290                  add     dh, al ;~ 01A2:DB3E
cs=0x1a2;eip=0x00db40; 	J(JMP(loc_1db5f));	// 35291                  jmp     short loc_1DB5F ;~ 01A2:DB40
loc_1db42:
	// 6404 
cs=0x1a2;eip=0x00db42; 	T(MOV(dh, *(raddr(ds,di+5))));	// 35295                  mov     dh, [di+5] ;~ 01A2:DB42
cs=0x1a2;eip=0x00db45; 	T(SHL(dh, 1));	// 35296                  shl     dh, 1 ;~ 01A2:DB45
cs=0x1a2;eip=0x00db47; 	T(SHL(dh, 1));	// 35297                  shl     dh, 1 ;~ 01A2:DB47
cs=0x1a2;eip=0x00db49; 	T(SHL(dh, 1));	// 35298                  shl     dh, 1 ;~ 01A2:DB49
cs=0x1a2;eip=0x00db4b; 	T(DEC(dh));	// 35299                  dec     dh ;~ 01A2:DB4B
cs=0x1a2;eip=0x00db4d; 	J(JMP(loc_1db5f));	// 35300                  jmp     short loc_1DB5F ;~ 01A2:DB4D
loc_1db4f:
	// 6405 
cs=0x1a2;eip=0x00db4f; 	T(SUB(cl, dh));	// 35304                  sub     cl, dh ;~ 01A2:DB4F
cs=0x1a2;eip=0x00db51; 	T(MOV(dh, *(raddr(ds,si+1))));	// 35305                  mov     dh, [si+1] ;~ 01A2:DB51
cs=0x1a2;eip=0x00db54; 	T(AND(dh, 7));	// 35306                  and     dh, 7 ;~ 01A2:DB54
cs=0x1a2;eip=0x00db57; 	T(SHL(cl, 1));	// 35307                  shl     cl, 1 ;~ 01A2:DB57
cs=0x1a2;eip=0x00db59; 	T(SHL(cl, 1));	// 35308                  shl     cl, 1 ;~ 01A2:DB59
cs=0x1a2;eip=0x00db5b; 	T(SHL(cl, 1));	// 35309                  shl     cl, 1 ;~ 01A2:DB5B
cs=0x1a2;eip=0x00db5d; 	T(ADD(dh, cl));	// 35310                  add     dh, cl ;~ 01A2:DB5D
loc_1db5f:
	// 6406 
cs=0x1a2;eip=0x00db5f; 	X(MOV(*(raddr(ds,si+1)), dh));	// 35314                  mov     [si+1], dh ;~ 01A2:DB5F
cs=0x1a2;eip=0x00db62; 	T(MOV(dl, *(raddr(ds,si+2))));	// 35315                  mov     dl, [si+2] ;~ 01A2:DB62
cs=0x1a2;eip=0x00db65; 	T(SUB(dl, *(raddr(ds,di+0x1E))));	// 35316                  sub     dl, [di+1Eh] ;~ 01A2:DB65
cs=0x1a2;eip=0x00db68; 	T(SHL(dl, 1));	// 35317                  shl     dl, 1 ;~ 01A2:DB68
cs=0x1a2;eip=0x00db6a; 	T(SHL(dl, 1));	// 35318                  shl     dl, 1 ;~ 01A2:DB6A
cs=0x1a2;eip=0x00db6c; 	T(SHL(dl, 1));	// 35319                  shl     dl, 1 ;~ 01A2:DB6C
cs=0x1a2;eip=0x00db6e; 	T(SHL(dl, 1));	// 35320                  shl     dl, 1 ;~ 01A2:DB6E
cs=0x1a2;eip=0x00db70; 	T(ax = word_1f706;);	// 35321                  mov     ax, ds:word_1F706 ;~ 01A2:DB70
cs=0x1a2;eip=0x00db73; 	T(ADD(dl, al));	// 35322                  add     dl, al ;~ 01A2:DB73
cs=0x1a2;eip=0x00db75; 	X(MOV(*(raddr(ds,si+2)), dl));	// 35323                  mov     [si+2], dl ;~ 01A2:DB75
loc_1db78:
	// 6407 
cs=0x1a2;eip=0x00db78; 	X(word_1f1ce = di;);	// 35327                  mov     word_1F1CE, di ;~ 01A2:DB78
cs=0x1a2;eip=0x00db7c; 	J(CALL(sub_11a29,0));	// 35328                  call    sub_11A29 ;~ 01A2:DB7C
cs=0x1a2;eip=0x00db7f; 	J(CALL(sub_1d2c5,0));	// 35329                  call    sub_1D2C5 ;~ 01A2:DB7F
cs=0x1a2;eip=0x00db82; 	J(CALL(sub_14a00,0));	// 35331                  call    sub_14A00 ;~ 01A2:DB82
cs=0x1a2;eip=0x00db85; 	T(CMP(byte_1f776, 0));	// 35332                  cmp     ds:byte_1F776, 0 ;~ 01A2:DB85
cs=0x1a2;eip=0x00db8a; 	J(JNZ(loc_1db8f));	// 35333                  jnz     short loc_1DB8F ;~ 01A2:DB8A
cs=0x1a2;eip=0x00db8c; 	J(JMP(loc_1dcb6));	// 35334                  jmp     loc_1DCB6 ;~ 01A2:DB8C
loc_1db8f:
	// 6408 
cs=0x1a2;eip=0x00db8f; 	T(si = word_1f1cc;);	// 35339                  mov     si, word_1F1CC ;~ 01A2:DB8F
cs=0x1a2;eip=0x00db93; 	T(es = *(dw*)(((db*)&off_1f194)+2););	// 35340                  mov     es, word ptr off_1F194+2 ;~ 01A2:DB93
cs=0x1a2;eip=0x00db97; 	T(di = word_1f198;);	// 35342                  mov     di, word_1F198 ;~ 01A2:DB97
cs=0x1a2;eip=0x00db9b; 	T(MOV(dl, *(raddr(ds,si))));	// 35343                  mov     dl, [si] ;~ 01A2:DB9B
cs=0x1a2;eip=0x00db9d; 	T(MOV(dh, *(raddr(ds,si+1))));	// 35344                  mov     dh, [si+1] ;~ 01A2:DB9D
cs=0x1a2;eip=0x00dba0; 	T(MOV(ch, *(raddr(ds,si+2))));	// 35345                  mov     ch, [si+2] ;~ 01A2:DBA0
cs=0x1a2;eip=0x00dba3; 	J(CALL(sub_116e0,0));	// 35346                  call    sub_116E0 ;~ 01A2:DBA3
cs=0x1a2;eip=0x00dba6; 	J(JNZ(loc_1dbab));	// 35347                  jnz     short loc_1DBAB ;~ 01A2:DBA6
cs=0x1a2;eip=0x00dba8; 	J(JMP(loc_1dcb6));	// 35348                  jmp     loc_1DCB6 ;~ 01A2:DBA8
loc_1dbab:
	// 6409 
cs=0x1a2;eip=0x00dbab; 	J(JNS(loc_1dbb0));	// 35352                  jns     short loc_1DBB0 ;~ 01A2:DBAB
cs=0x1a2;eip=0x00dbad; 	J(JMP(loc_1dd2a));	// 35353                  jmp     loc_1DD2A ;~ 01A2:DBAD
loc_1dbb0:
	// 6410 
cs=0x1a2;eip=0x00dbb0; 	T(bx = word_1f1ac;);	// 35357                  mov     bx, word_1F1AC ;~ 01A2:DBB0
cs=0x1a2;eip=0x00dbb4; 	T(MOV(cl, *(raddr(ds,bx+1))));	// 35358                  mov     cl, [bx+1] ;~ 01A2:DBB4
cs=0x1a2;eip=0x00dbb7; 	T(CMP(cl, 0x0FD));	// 35359                  cmp     cl, 0FDh ;~ 01A2:DBB7
cs=0x1a2;eip=0x00dbba; 	J(JNZ(loc_1dbbf));	// 35360                  jnz     short loc_1DBBF ;~ 01A2:DBBA
cs=0x1a2;eip=0x00dbbc; 	J(JMP(loc_1dd2a));	// 35361                  jmp     loc_1DD2A ;~ 01A2:DBBC
loc_1dbbf:
	// 6411 
cs=0x1a2;eip=0x00dbbf; 	T(ADD(bx, 2));	// 35365                  add     bx, 2 ;~ 01A2:DBBF
cs=0x1a2;eip=0x00dbc2; 	T(si = word_1f1c2;);	// 35366                  mov     si, word_1F1C2 ;~ 01A2:DBC2
cs=0x1a2;eip=0x00dbc6; 	T(bp = 0x0F;);	// 35367                  mov     bp, 0Fh ;~ 01A2:DBC6
cs=0x1a2;eip=0x00dbc9; 	T(CMP(byte_1f77a, 0));	// 35368                  cmp     ds:byte_1F77A, 0 ;~ 01A2:DBC9
cs=0x1a2;eip=0x00dbce; 	J(JZ(loc_1dbe4));	// 35369                  jz      short loc_1DBE4 ;~ 01A2:DBCE
cs=0x1a2;eip=0x00dbd0; 	T(TEST(byte_1f778, 1));	// 35370                  test    ds:byte_1F778, 1 ;~ 01A2:DBD0
cs=0x1a2;eip=0x00dbd5; 	J(JZ(loc_1dbdf));	// 35371                  jz      short loc_1DBDF ;~ 01A2:DBD5
cs=0x1a2;eip=0x00dbd7; 	T(XOR(bp, 2));	// 35372                  xor     bp, 2 ;~ 01A2:DBD7
cs=0x1a2;eip=0x00dbda; 	T(MOV(dh, *(raddr(ds,si+3))));	// 35373                  mov     dh, [si+3] ;~ 01A2:DBDA
cs=0x1a2;eip=0x00dbdd; 	J(JMP(loc_1dbf6));	// 35374                  jmp     short loc_1DBF6 ;~ 01A2:DBDD
loc_1dbdf:
	// 6412 
cs=0x1a2;eip=0x00dbdf; 	T(XOR(bp, 1));	// 35378                  xor     bp, 1 ;~ 01A2:DBDF
cs=0x1a2;eip=0x00dbe2; 	J(JMP(loc_1dbf6));	// 35379                  jmp     short loc_1DBF6 ;~ 01A2:DBE2
loc_1dbe4:
	// 6413 
cs=0x1a2;eip=0x00dbe4; 	T(TEST(byte_1f778, 8));	// 35383                  test    ds:byte_1F778, 8 ;~ 01A2:DBE4
cs=0x1a2;eip=0x00dbe9; 	J(JZ(loc_1dbf0));	// 35384                  jz      short loc_1DBF0 ;~ 01A2:DBE9
cs=0x1a2;eip=0x00dbeb; 	T(XOR(bp, 4));	// 35385                  xor     bp, 4 ;~ 01A2:DBEB
cs=0x1a2;eip=0x00dbee; 	J(JMP(loc_1dbf6));	// 35386                  jmp     short loc_1DBF6 ;~ 01A2:DBEE
loc_1dbf0:
	// 6414 
cs=0x1a2;eip=0x00dbf0; 	T(XOR(bp, 8));	// 35390                  xor     bp, 8 ;~ 01A2:DBF0
cs=0x1a2;eip=0x00dbf3; 	T(MOV(dl, *(raddr(ds,si+2))));	// 35391                  mov     dl, [si+2] ;~ 01A2:DBF3
loc_1dbf6:
	// 6415 
cs=0x1a2;eip=0x00dbf6; 	X(byte_1f77b = dl;);	// 35395                  mov     ds:byte_1F77B, dl ;~ 01A2:DBF6
cs=0x1a2;eip=0x00dbfa; 	X(byte_1f77c = dh;);	// 35396                  mov     ds:byte_1F77C, dh ;~ 01A2:DBFA
cs=0x1a2;eip=0x00dbfe; 	X(byte_1f77d = ch;);	// 35397                  mov     ds:byte_1F77D, ch ;~ 01A2:DBFE
loc_1dc02:
	// 6416 
cs=0x1a2;eip=0x00dc02; 	T(MOV(si, *(dw*)(raddr(ds,bx))));	// 35400                  mov     si, [bx] ;~ 01A2:DC02
cs=0x1a2;eip=0x00dc04; 	T(ADD(bx, 2));	// 35401                  add     bx, 2 ;~ 01A2:DC04
cs=0x1a2;eip=0x00dc07; 	T(MOV(di, *(dw*)(raddr(ds,si+8))));	// 35402                  mov     di, [si+8] ;~ 01A2:DC07
cs=0x1a2;eip=0x00dc0a; 	T(MOV(es, *(dw*)(raddr(ds,di+6))));	// 35403                  mov     es, word ptr [di+6] ;~ 01A2:DC0A
cs=0x1a2;eip=0x00dc0d; 	X(PUSH(bx));	// 35405                  push    bx ;~ 01A2:DC0D
cs=0x1a2;eip=0x00dc0e; 	X(PUSH(cx));	// 35406                  push    cx ;~ 01A2:DC0E
cs=0x1a2;eip=0x00dc0f; 	X(PUSH(di));	// 35407                  push    di ;~ 01A2:DC0F
cs=0x1a2;eip=0x00dc10; 	X(PUSH(si));	// 35408                  push    si ;~ 01A2:DC10
cs=0x1a2;eip=0x00dc11; 	X(PUSH(bp));	// 35409                  push    bp ;~ 01A2:DC11
cs=0x1a2;eip=0x00dc12; 	T(MOV(di, *(dw*)(raddr(ds,di+8))));	// 35410                  mov     di, [di+8] ;~ 01A2:DC12
cs=0x1a2;eip=0x00dc15; 	T(dl = byte_1f77b;);	// 35411                  mov     dl, ds:byte_1F77B ;~ 01A2:DC15
cs=0x1a2;eip=0x00dc19; 	T(dh = byte_1f77c;);	// 35412                  mov     dh, ds:byte_1F77C ;~ 01A2:DC19
cs=0x1a2;eip=0x00dc1d; 	T(ch = byte_1f77d;);	// 35413                  mov     ch, ds:byte_1F77D ;~ 01A2:DC1D
cs=0x1a2;eip=0x00dc21; 	J(CALL(sub_11cc1,0));	// 35414                  call    sub_11CC1 ;~ 01A2:DC21
cs=0x1a2;eip=0x00dc24; 	J(JZ(loc_1dc46));	// 35415                  jz      short loc_1DC46 ;~ 01A2:DC24
cs=0x1a2;eip=0x00dc26; 	X(POP(bp));	// 35416                  pop     bp ;~ 01A2:DC26
cs=0x1a2;eip=0x00dc27; 	X(POP(si));	// 35417                  pop     si ;~ 01A2:DC27
cs=0x1a2;eip=0x00dc28; 	X(POP(di));	// 35418                  pop     di ;~ 01A2:DC28
cs=0x1a2;eip=0x00dc29; 	X(MOV(*(raddr(ds,si)), dl));	// 35419                  mov     [si], dl ;~ 01A2:DC29
cs=0x1a2;eip=0x00dc2b; 	X(MOV(*(raddr(ds,si+1)), dh));	// 35420                  mov     [si+1], dh ;~ 01A2:DC2B
cs=0x1a2;eip=0x00dc2e; 	X(MOV(*(raddr(ds,si+2)), ch));	// 35421                  mov     [si+2], ch ;~ 01A2:DC2E
cs=0x1a2;eip=0x00dc31; 	X(MOV(*(raddr(ds,di)), dl));	// 35422                  mov     [di], dl ;~ 01A2:DC31
cs=0x1a2;eip=0x00dc33; 	X(MOV(*(raddr(ds,di+1)), dh));	// 35423                  mov     [di+1], dh ;~ 01A2:DC33
cs=0x1a2;eip=0x00dc36; 	X(MOV(*(raddr(ds,di+4)), bh));	// 35424                  mov     [di+4], bh ;~ 01A2:DC36
cs=0x1a2;eip=0x00dc39; 	X(MOV(*(raddr(ds,di+5)), ch));	// 35425                  mov     [di+5], ch ;~ 01A2:DC39
cs=0x1a2;eip=0x00dc3c; 	X(MOV(*(raddr(ds,di+2)), cl));	// 35426                  mov     [di+2], cl ;~ 01A2:DC3C
cs=0x1a2;eip=0x00dc3f; 	X(MOV(*(raddr(ds,di+3)), bl));	// 35427                  mov     [di+3], bl ;~ 01A2:DC3F
cs=0x1a2;eip=0x00dc42; 	X(POP(cx));	// 35428                  pop     cx ;~ 01A2:DC42
cs=0x1a2;eip=0x00dc43; 	X(POP(bx));	// 35429                  pop     bx ;~ 01A2:DC43
cs=0x1a2;eip=0x00dc44; 	J(JMP(loc_1dc95));	// 35430                  jmp     short loc_1DC95 ;~ 01A2:DC44
loc_1dc46:
	// 6417 
cs=0x1a2;eip=0x00dc46; 	X(POP(bp));	// 35434                  pop     bp ;~ 01A2:DC46
cs=0x1a2;eip=0x00dc47; 	X(POP(si));	// 35435                  pop     si ;~ 01A2:DC47
cs=0x1a2;eip=0x00dc48; 	X(POP(di));	// 35436                  pop     di ;~ 01A2:DC48
cs=0x1a2;eip=0x00dc49; 	X(POP(cx));	// 35437                  pop     cx ;~ 01A2:DC49
cs=0x1a2;eip=0x00dc4a; 	X(POP(bx));	// 35438                  pop     bx ;~ 01A2:DC4A
cs=0x1a2;eip=0x00dc4b; 	T(MOV(di, *(dw*)(raddr(ds,si+8))));	// 35439                  mov     di, [si+8] ;~ 01A2:DC4B
cs=0x1a2;eip=0x00dc4e; 	T(MOV(es, *(dw*)(raddr(ds,di+6))));	// 35440                  mov     es, word ptr [di+6] ;~ 01A2:DC4E
cs=0x1a2;eip=0x00dc51; 	X(PUSH(bx));	// 35441                  push    bx ;~ 01A2:DC51
cs=0x1a2;eip=0x00dc52; 	X(PUSH(cx));	// 35442                  push    cx ;~ 01A2:DC52
cs=0x1a2;eip=0x00dc53; 	X(PUSH(di));	// 35443                  push    di ;~ 01A2:DC53
cs=0x1a2;eip=0x00dc54; 	X(PUSH(si));	// 35444                  push    si ;~ 01A2:DC54
cs=0x1a2;eip=0x00dc55; 	X(PUSH(bp));	// 35445                  push    bp ;~ 01A2:DC55
cs=0x1a2;eip=0x00dc56; 	T(MOV(di, *(dw*)(raddr(ds,di+8))));	// 35446                  mov     di, [di+8] ;~ 01A2:DC56
cs=0x1a2;eip=0x00dc59; 	T(dl = byte_1f77b;);	// 35447                  mov     dl, ds:byte_1F77B ;~ 01A2:DC59
cs=0x1a2;eip=0x00dc5d; 	T(dh = byte_1f77c;);	// 35448                  mov     dh, ds:byte_1F77C ;~ 01A2:DC5D
cs=0x1a2;eip=0x00dc61; 	T(ch = byte_1f77d;);	// 35449                  mov     ch, ds:byte_1F77D ;~ 01A2:DC61
cs=0x1a2;eip=0x00dc65; 	T(bp = 0x3F;);	// 35450                  mov     bp, 3Fh ; '?' ;~ 01A2:DC65
cs=0x1a2;eip=0x00dc68; 	J(CALL(sub_11cc1,0));	// 35451                  call    sub_11CC1 ;~ 01A2:DC68
cs=0x1a2;eip=0x00dc6b; 	J(JZ(loc_1dc8d));	// 35452                  jz      short loc_1DC8D ;~ 01A2:DC6B
cs=0x1a2;eip=0x00dc6d; 	X(POP(bp));	// 35453                  pop     bp ;~ 01A2:DC6D
cs=0x1a2;eip=0x00dc6e; 	X(POP(si));	// 35454                  pop     si ;~ 01A2:DC6E
cs=0x1a2;eip=0x00dc6f; 	X(POP(di));	// 35455                  pop     di ;~ 01A2:DC6F
cs=0x1a2;eip=0x00dc70; 	X(MOV(*(raddr(ds,si)), dl));	// 35456                  mov     [si], dl ;~ 01A2:DC70
cs=0x1a2;eip=0x00dc72; 	X(MOV(*(raddr(ds,si+1)), dh));	// 35457                  mov     [si+1], dh ;~ 01A2:DC72
cs=0x1a2;eip=0x00dc75; 	X(MOV(*(raddr(ds,si+2)), ch));	// 35458                  mov     [si+2], ch ;~ 01A2:DC75
cs=0x1a2;eip=0x00dc78; 	X(MOV(*(raddr(ds,di)), dl));	// 35459                  mov     [di], dl ;~ 01A2:DC78
cs=0x1a2;eip=0x00dc7a; 	X(MOV(*(raddr(ds,di+1)), dh));	// 35460                  mov     [di+1], dh ;~ 01A2:DC7A
cs=0x1a2;eip=0x00dc7d; 	X(MOV(*(raddr(ds,di+4)), bh));	// 35461                  mov     [di+4], bh ;~ 01A2:DC7D
cs=0x1a2;eip=0x00dc80; 	X(MOV(*(raddr(ds,di+5)), ch));	// 35462                  mov     [di+5], ch ;~ 01A2:DC80
cs=0x1a2;eip=0x00dc83; 	X(MOV(*(raddr(ds,di+2)), cl));	// 35463                  mov     [di+2], cl ;~ 01A2:DC83
cs=0x1a2;eip=0x00dc86; 	X(MOV(*(raddr(ds,di+3)), bl));	// 35464                  mov     [di+3], bl ;~ 01A2:DC86
cs=0x1a2;eip=0x00dc89; 	X(POP(cx));	// 35465                  pop     cx ;~ 01A2:DC89
cs=0x1a2;eip=0x00dc8a; 	X(POP(bx));	// 35466                  pop     bx ;~ 01A2:DC8A
cs=0x1a2;eip=0x00dc8b; 	J(JMP(loc_1dc95));	// 35467                  jmp     short loc_1DC95 ;~ 01A2:DC8B
loc_1dc8d:
	// 6418 
cs=0x1a2;eip=0x00dc8d; 	X(POP(bp));	// 35471                  pop     bp ;~ 01A2:DC8D
cs=0x1a2;eip=0x00dc8e; 	X(POP(si));	// 35472                  pop     si ;~ 01A2:DC8E
cs=0x1a2;eip=0x00dc8f; 	X(POP(di));	// 35473                  pop     di ;~ 01A2:DC8F
cs=0x1a2;eip=0x00dc90; 	X(POP(cx));	// 35474                  pop     cx ;~ 01A2:DC90
cs=0x1a2;eip=0x00dc91; 	X(POP(bx));	// 35475                  pop     bx ;~ 01A2:DC91
cs=0x1a2;eip=0x00dc92; 	J(JMP(loc_1dd35));	// 35476                  jmp     loc_1DD35 ;~ 01A2:DC92
loc_1dc95:
	// 6419 
cs=0x1a2;eip=0x00dc95; 	X(PUSH(ax));	// 35481                  push    ax ;~ 01A2:DC95
cs=0x1a2;eip=0x00dc96; 	X(PUSH(bx));	// 35482                  push    bx ;~ 01A2:DC96
cs=0x1a2;eip=0x00dc97; 	X(PUSH(cx));	// 35483                  push    cx ;~ 01A2:DC97
cs=0x1a2;eip=0x00dc98; 	X(PUSH(dx));	// 35484                  push    dx ;~ 01A2:DC98
cs=0x1a2;eip=0x00dc99; 	X(PUSH(bp));	// 35485                  push    bp ;~ 01A2:DC99
cs=0x1a2;eip=0x00dc9a; 	X(PUSH(si));	// 35486                  push    si ;~ 01A2:DC9A
cs=0x1a2;eip=0x00dc9b; 	X(PUSH(di));	// 35487                  push    di ;~ 01A2:DC9B
cs=0x1a2;eip=0x00dc9c; 	X(PUSH(es));	// 35488                  push    es ;~ 01A2:DC9C
cs=0x1a2;eip=0x00dc9d; 	X(PUSH(ds));	// 35489                  push    ds ;~ 01A2:DC9D
cs=0x1a2;eip=0x00dc9e; 	T(di = si;);	// 35490                  mov     di, si ;~ 01A2:DC9E
cs=0x1a2;eip=0x00dca0; 	J(CALL(sub_1530e,0));	// 35491                  call    sub_1530E ;~ 01A2:DCA0
cs=0x1a2;eip=0x00dca3; 	X(POP(ds));	// 35492                  pop     ds ;~ 01A2:DCA3
cs=0x1a2;eip=0x00dca4; 	X(POP(es));	// 35494                  pop     es ;~ 01A2:DCA4
cs=0x1a2;eip=0x00dca5; 	X(POP(di));	// 35495                  pop     di ;~ 01A2:DCA5
cs=0x1a2;eip=0x00dca6; 	X(POP(si));	// 35496                  pop     si ;~ 01A2:DCA6
cs=0x1a2;eip=0x00dca7; 	X(POP(bp));	// 35497                  pop     bp ;~ 01A2:DCA7
cs=0x1a2;eip=0x00dca8; 	X(POP(dx));	// 35498                  pop     dx ;~ 01A2:DCA8
cs=0x1a2;eip=0x00dca9; 	X(POP(cx));	// 35499                  pop     cx ;~ 01A2:DCA9
cs=0x1a2;eip=0x00dcaa; 	X(POP(bx));	// 35500                  pop     bx ;~ 01A2:DCAA
cs=0x1a2;eip=0x00dcab; 	X(POP(ax));	// 35501                  pop     ax ;~ 01A2:DCAB
cs=0x1a2;eip=0x00dcac; 	T(DEC(cl));	// 35502                  dec     cl ;~ 01A2:DCAC
cs=0x1a2;eip=0x00dcae; 	J(JS(loc_1dcb3));	// 35503                  js      short loc_1DCB3 ;~ 01A2:DCAE
cs=0x1a2;eip=0x00dcb0; 	J(JMP(loc_1dc02));	// 35504                  jmp     loc_1DC02 ;~ 01A2:DCB0
loc_1dcb3:
	// 6420 
cs=0x1a2;eip=0x00dcb3; 	J(JMP(loc_1db8f));	// 35508                  jmp     loc_1DB8F ;~ 01A2:DCB3
loc_1dcb6:
	// 6421 
cs=0x1a2;eip=0x00dcb6; 	T(CMP(byte_1f776, 0));	// 35514                  cmp     ds:byte_1F776, 0 ;~ 01A2:DCB6
cs=0x1a2;eip=0x00dcbb; 	J(JS(loc_1dd1f));	// 35515                  js      short loc_1DD1F ;~ 01A2:DCBB
cs=0x1a2;eip=0x00dcbd; 	T(ax = *(dw*)(&unk_1f170););	// 35516                  mov     ax, word ptr unk_1F170 ;~ 01A2:DCBD
cs=0x1a2;eip=0x00dcc0; 	T(CMP(ax, *(dw*)(((db*)&seg_1f171)+1)));	// 35517                  cmp     ax, seg_1F171+1 ;~ 01A2:DCC0
cs=0x1a2;eip=0x00dcc4; 	J(JNZ(loc_1dcd8));	// 35518                  jnz     short loc_1DCD8 ;~ 01A2:DCC4
cs=0x1a2;eip=0x00dcc6; 	T(cx = word_1f18a;);	// 35519                  mov     cx, word_1F18A ;~ 01A2:DCC6
cs=0x1a2;eip=0x00dcca; 	T(bx = word_1f18c;);	// 35520                  mov     bx, word_1F18C ;~ 01A2:DCCA
cs=0x1a2;eip=0x00dcce; 	T(CMP(ax, cx));	// 35521                  cmp     ax, cx ;~ 01A2:DCCE
cs=0x1a2;eip=0x00dcd0; 	J(JNZ(loc_1dcd4));	// 35522                  jnz     short loc_1DCD4 ;~ 01A2:DCD0
cs=0x1a2;eip=0x00dcd2; 	T(XCHG(cx, bx));	// 35523                  xchg    cx, bx ;~ 01A2:DCD2
loc_1dcd4:
	// 6422 
cs=0x1a2;eip=0x00dcd4; 	X(*(dw*)(((db*)&seg_1f171)+1) = cx;);	// 35526                  mov     seg_1F171+1, cx ;~ 01A2:DCD4
loc_1dcd8:
	// 6423 
cs=0x1a2;eip=0x00dcd8; 	T(ax = word_1f1ce;);	// 35529                  mov     ax, word_1F1CE ;~ 01A2:DCD8
cs=0x1a2;eip=0x00dcdb; 	X(PUSH(si));	// 35530                  push    si ;~ 01A2:DCDB
cs=0x1a2;eip=0x00dcdc; 	T(si = word_1f1f4;);	// 35531                  mov     si, word_1F1F4 ;~ 01A2:DCDC
cs=0x1a2;eip=0x00dce0; 	X(MOV(*(dw*)(raddr(ds,si)), 0x4006));	// 35532                  mov     word ptr [si], 4006h ;~ 01A2:DCE0
cs=0x1a2;eip=0x00dce4; 	T(ADD(si, 2));	// 35533                  add     si, 2 ;~ 01A2:DCE4
cs=0x1a2;eip=0x00dce7; 	X(MOV(*(dw*)(raddr(ds,si)), ax));	// 35534                  mov     [si], ax ;~ 01A2:DCE7
cs=0x1a2;eip=0x00dce9; 	T(ADD(si, 2));	// 35535                  add     si, 2 ;~ 01A2:DCE9
cs=0x1a2;eip=0x00dcec; 	T(ADD(si, 2));	// 35536                  add     si, 2 ;~ 01A2:DCEC
cs=0x1a2;eip=0x00dcef; 	X(word_1f1f4 = si;);	// 35537                  mov     word_1F1F4, si ;~ 01A2:DCEF
cs=0x1a2;eip=0x00dcf3; 	X(INC(word_1f396));	// 35538                  inc     ds:word_1F396 ;~ 01A2:DCF3
cs=0x1a2;eip=0x00dcf7; 	X(POP(si));	// 35539                  pop     si ;~ 01A2:DCF7
cs=0x1a2;eip=0x00dcf8; 	J(CALL(sub_1d4a0,0));	// 35540                  call    sub_1D4A0 ;~ 01A2:DCF8
cs=0x1a2;eip=0x00dcfb; 	J(CALL(sub_1d1fa,0));	// 35541                  call    sub_1D1FA ;~ 01A2:DCFB
cs=0x1a2;eip=0x00dcfe; 	J(CALL(sub_1d1b0,0));	// 35542                  call    sub_1D1B0 ;~ 01A2:DCFE
cs=0x1a2;eip=0x00dd01; 	J(CALL(sub_1570b,0));	// 35544                  call    sub_1570B ;~ 01A2:DD01
cs=0x1a2;eip=0x00dd04; 	J(CALL(sub_1d996,0));	// 35545                  call    sub_1D996 ;~ 01A2:DD04
cs=0x1a2;eip=0x00dd07; 	T(CMP(word_1f3ea, 0));	// 35546                  cmp     ds:word_1F3EA, 0 ;~ 01A2:DD07
cs=0x1a2;eip=0x00dd0c; 	J(JZ(loc_1dd11));	// 35547                  jz      short loc_1DD11 ;~ 01A2:DD0C
cs=0x1a2;eip=0x00dd0e; 	J(CALL(sub_124aa,0));	// 35548                  call    sub_124AA ;~ 01A2:DD0E
loc_1dd11:
	// 6424 
cs=0x1a2;eip=0x00dd11; 	J(CALL(sub_1dd40,0));	// 35551                  call    sub_1DD40 ;~ 01A2:DD11
cs=0x1a2;eip=0x00dd14; 	T(si = *(dw*)(((db*)&seg_1f171)+1););	// 35552                  mov     si, seg_1F171+1 ;~ 01A2:DD14
cs=0x1a2;eip=0x00dd18; 	T(di = word_1f190;);	// 35553                  mov     di, word_1F190 ;~ 01A2:DD18
cs=0x1a2;eip=0x00dd1c; 	J(CALL(sub_188ac,0));	// 35554                  call    sub_188AC ;~ 01A2:DD1C
loc_1dd1f:
	// 6425 
cs=0x1a2;eip=0x00dd1f; 	X(byte_1f776 = 1;);	// 35558                  mov     ds:byte_1F776, 1 ;~ 01A2:DD1F
cs=0x1a2;eip=0x00dd24; 	J(CALL(nullsub_7,0));	// 35559                  call    nullsub_7 ;~ 01A2:DD24
cs=0x1a2;eip=0x00dd27; 	T(XOR(ax, ax));	// 35560                  xor     ax, ax ;~ 01A2:DD27
cs=0x1a2;eip=0x00dd29; 	J(RETN(0));	// 35561                  retn ;~ 01A2:DD29
loc_1dd2a:
	// 6426 
cs=0x1a2;eip=0x00dd2a; 	X(byte_1f776 = 1;);	// 35566                  mov     ds:byte_1F776, 1 ;~ 01A2:DD2A
cs=0x1a2;eip=0x00dd2f; 	T(ax = 0x0FFFD;);	// 35567                  mov     ax, 0FFFDh ;~ 01A2:DD2F
cs=0x1a2;eip=0x00dd32; 	T(OR(ax, ax));	// 35568                  or      ax, ax ;~ 01A2:DD32
cs=0x1a2;eip=0x00dd34; 	J(RETN(0));	// 35569                  retn ;~ 01A2:DD34
loc_1dd35:
	// 6427 
cs=0x1a2;eip=0x00dd35; 	X(byte_1f776 = 1;);	// 35573                  mov     ds:byte_1F776, 1 ;~ 01A2:DD35
cs=0x1a2;eip=0x00dd3a; 	T(ax = 0x0FFFD;);	// 35574                  mov     ax, 0FFFDh ;~ 01A2:DD3A
cs=0x1a2;eip=0x00dd3d; 	T(OR(ax, ax));	// 35575                  or      ax, ax ;~ 01A2:DD3D
cs=0x1a2;eip=0x00dd3f; 	J(RETN(0));	// 35576                  retn ;~ 01A2:DD3F

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1da8a: 	goto loc_1da8a;
        case m2c::kloc_1dacf: 	goto loc_1dacf;
        case m2c::kloc_1dad9: 	goto loc_1dad9;
        case m2c::kloc_1dade: 	goto loc_1dade;
        case m2c::kloc_1db0a: 	goto loc_1db0a;
        case m2c::kloc_1db17: 	goto loc_1db17;
        case m2c::kloc_1db26: 	goto loc_1db26;
        case m2c::kloc_1db42: 	goto loc_1db42;
        case m2c::kloc_1db4f: 	goto loc_1db4f;
        case m2c::kloc_1db5f: 	goto loc_1db5f;
        case m2c::kloc_1db78: 	goto loc_1db78;
        case m2c::kloc_1db8f: 	goto loc_1db8f;
        case m2c::kloc_1dbab: 	goto loc_1dbab;
        case m2c::kloc_1dbb0: 	goto loc_1dbb0;
        case m2c::kloc_1dbbf: 	goto loc_1dbbf;
        case m2c::kloc_1dbdf: 	goto loc_1dbdf;
        case m2c::kloc_1dbe4: 	goto loc_1dbe4;
        case m2c::kloc_1dbf0: 	goto loc_1dbf0;
        case m2c::kloc_1dbf6: 	goto loc_1dbf6;
        case m2c::kloc_1dc02: 	goto loc_1dc02;
        case m2c::kloc_1dc46: 	goto loc_1dc46;
        case m2c::kloc_1dc8d: 	goto loc_1dc8d;
        case m2c::kloc_1dc95: 	goto loc_1dc95;
        case m2c::kloc_1dcb3: 	goto loc_1dcb3;
        case m2c::kloc_1dcb6: 	goto loc_1dcb6;
        case m2c::kloc_1dcd4: 	goto loc_1dcd4;
        case m2c::kloc_1dcd8: 	goto loc_1dcd8;
        case m2c::kloc_1dd11: 	goto loc_1dd11;
        case m2c::kloc_1dd1f: 	goto loc_1dd1f;
        case m2c::kloc_1dd2a: 	goto loc_1dd2a;
        case m2c::kloc_1dd35: 	goto loc_1dd35;
        case m2c::kseg000_da59_proc: 	goto seg000_da59_proc;
        case m2c::ksub_1da60: 	goto sub_1da60;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1dd40(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1dd40:
    _begin:
cs=0x1a2;eip=0x00dd40; 	T(bx = 0x7EC;);	// 35585                  mov     bx, 7ECh ;~ 01A2:DD40
cs=0x1a2;eip=0x00dd43; 	T(si = word_1f1ce;);	// 35586                  mov     si, word_1F1CE ;~ 01A2:DD43
cs=0x1a2;eip=0x00dd47; 	T(al = byte_1f87b;);	// 35587                  mov     al, ds:byte_1F87B ;~ 01A2:DD47
cs=0x1a2;eip=0x00dd4a; 	T(CMP(al, 1));	// 35588                  cmp     al, 1 ;~ 01A2:DD4A
cs=0x1a2;eip=0x00dd4c; 	J(JNZ(loc_1dd5a));	// 35589                  jnz     short loc_1DD5A ;~ 01A2:DD4C
cs=0x1a2;eip=0x00dd4e; 	J(CALL(sub_1dd92,0));	// 35590                  call    sub_1DD92 ;~ 01A2:DD4E
cs=0x1a2;eip=0x00dd51; 	X(MOV(*(raddr(ds,bx)), 0x20));	// 35591                  mov     byte ptr [bx], 20h ; ' ' ;~ 01A2:DD51
cs=0x1a2;eip=0x00dd54; 	T(INC(bx));	// 35592                  inc     bx ;~ 01A2:DD54
cs=0x1a2;eip=0x00dd55; 	J(CALL(sub_1dd80,0));	// 35593                  call    sub_1DD80 ;~ 01A2:DD55
cs=0x1a2;eip=0x00dd58; 	J(JMP(loc_1dd64));	// 35594                  jmp     short loc_1DD64 ;~ 01A2:DD58
loc_1dd5a:
	// 6428 
cs=0x1a2;eip=0x00dd5a; 	J(CALL(sub_1dd80,0));	// 35598                  call    sub_1DD80 ;~ 01A2:DD5A
cs=0x1a2;eip=0x00dd5d; 	X(MOV(*(raddr(ds,bx)), 0x20));	// 35599                  mov     byte ptr [bx], 20h ; ' ' ;~ 01A2:DD5D
cs=0x1a2;eip=0x00dd60; 	T(INC(bx));	// 35600                  inc     bx ;~ 01A2:DD60
cs=0x1a2;eip=0x00dd61; 	J(CALL(sub_1dd92,0));	// 35601                  call    sub_1DD92 ;~ 01A2:DD61
loc_1dd64:
	// 6429 
cs=0x1a2;eip=0x00dd64; 	X(MOV(*(raddr(ds,bx)), 0));	// 35604                  mov     byte ptr [bx], 0 ;~ 01A2:DD64
cs=0x1a2;eip=0x00dd67; 	T(di = 0x7EC;);	// 35605                  mov     di, 7ECh ;~ 01A2:DD67
cs=0x1a2;eip=0x00dd6a; 	T(CMP(bx, di));	// 35606                  cmp     bx, di ;~ 01A2:DD6A
cs=0x1a2;eip=0x00dd6c; 	J(JZ(loc_1dd7c));	// 35607                  jz      short loc_1DD7C ;~ 01A2:DD6C
cs=0x1a2;eip=0x00dd6e; 	X(MOV(*(raddr(ds,di+0x0F)), 0));	// 35608                  mov     byte ptr [di+0Fh], 0 ;~ 01A2:DD6E
cs=0x1a2;eip=0x00dd72; 	T(ch = 0x6C;);	// 35609                  mov     ch, 6Ch ; 'l' ;~ 01A2:DD72
cs=0x1a2;eip=0x00dd74; 	T(ax = 0x0CA;);	// 35610                  mov     ax, 0CAh ;~ 01A2:DD74
cs=0x1a2;eip=0x00dd77; 	T(dh = 0x0BA;);	// 35611                  mov     dh, 0BAh ;~ 01A2:DD77
cs=0x1a2;eip=0x00dd79; 	J(CALL(sub_18738,0));	// 35612                  call    sub_18738 ;~ 01A2:DD79
loc_1dd7c:
	// 6430 
cs=0x1a2;eip=0x00dd7c; 	J(CALL(sub_1ddb5,0));	// 35615                  call    sub_1DDB5 ;~ 01A2:DD7C
cs=0x1a2;eip=0x00dd7f; 	J(RETN(0));	// 35616                  retn ;~ 01A2:DD7F

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1dd5a: 	goto loc_1dd5a;
        case m2c::kloc_1dd64: 	goto loc_1dd64;
        case m2c::kloc_1dd7c: 	goto loc_1dd7c;
        case m2c::ksub_1dd40: 	goto sub_1dd40;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1dd80(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1dd80:
    _begin:
cs=0x1a2;eip=0x00dd80; 	T(MOV(dx, *(dw*)(raddr(ds,si+0x18))));	// 35625                  mov     dx, [si+18h] ;~ 01A2:DD80
cs=0x1a2;eip=0x00dd83; 	T(OR(dx, dx));	// 35626                  or      dx, dx ;~ 01A2:DD83
cs=0x1a2;eip=0x00dd85; 	J(JS(locret_1dd91));	// 35627                  js      short locret_1DD91 ;~ 01A2:DD85
cs=0x1a2;eip=0x00dd87; 	J(CALL(sub_175af,0));	// 35628                  call    sub_175AF ;~ 01A2:DD87
cs=0x1a2;eip=0x00dd8a; 	T(XCHG(bx, si));	// 35629                  xchg    bx, si ;~ 01A2:DD8A
cs=0x1a2;eip=0x00dd8c; 	J(CALL(sub_19c97,0));	// 35630                  call    sub_19C97 ;~ 01A2:DD8C
cs=0x1a2;eip=0x00dd8f; 	T(XCHG(bx, si));	// 35631                  xchg    bx, si ;~ 01A2:DD8F
locret_1dd91:
	// 6431 
cs=0x1a2;eip=0x00dd91; 	J(RETN(0));	// 35634                  retn ;~ 01A2:DD91

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::klocret_1dd91: 	goto locret_1dd91;
        case m2c::ksub_1dd80: 	goto sub_1dd80;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1dd92(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1dd92:
    _begin:
cs=0x1a2;eip=0x00dd92; 	T(XOR(ah, ah));	// 35643                  xor     ah, ah ;~ 01A2:DD92
cs=0x1a2;eip=0x00dd94; 	T(MOV(al, *(raddr(ds,si+0x1A))));	// 35644                  mov     al, [si+1Ah] ;~ 01A2:DD94
cs=0x1a2;eip=0x00dd97; 	T(OR(al, al));	// 35645                  or      al, al ;~ 01A2:DD97
cs=0x1a2;eip=0x00dd99; 	J(JS(locret_1ddb4));	// 35646                  js      short locret_1DDB4 ;~ 01A2:DD99
cs=0x1a2;eip=0x00dd9b; 	T(dx = 2;);	// 35647                  mov     dx, 2 ;~ 01A2:DD9B
cs=0x1a2;eip=0x00dd9e; 	T(MUL1_2(dx));	// 35648                  mul     dx ;~ 01A2:DD9E
cs=0x1a2;eip=0x00dda0; 	T(di = word_1f1b8;);	// 35649                  mov     di, word_1F1B8 ;~ 01A2:DDA0
cs=0x1a2;eip=0x00dda4; 	T(ADD(di, ax));	// 35650                  add     di, ax ;~ 01A2:DDA4
cs=0x1a2;eip=0x00dda6; 	T(MOV(dx, *(dw*)(raddr(ds,di))));	// 35651                  mov     dx, [di] ;~ 01A2:DDA6
cs=0x1a2;eip=0x00dda8; 	T(XCHG(dl, dh));	// 35652                  xchg    dl, dh ;~ 01A2:DDA8
cs=0x1a2;eip=0x00ddaa; 	J(CALL(sub_175af,0));	// 35653                  call    sub_175AF ;~ 01A2:DDAA
cs=0x1a2;eip=0x00ddad; 	T(XCHG(si, bx));	// 35654                  xchg    si, bx ;~ 01A2:DDAD
cs=0x1a2;eip=0x00ddaf; 	J(CALL(sub_19c97,0));	// 35655                  call    sub_19C97 ;~ 01A2:DDAF
cs=0x1a2;eip=0x00ddb2; 	T(XCHG(si, bx));	// 35656                  xchg    si, bx ;~ 01A2:DDB2
locret_1ddb4:
	// 6432 
cs=0x1a2;eip=0x00ddb4; 	J(RETN(0));	// 35659                  retn ;~ 01A2:DDB4

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::klocret_1ddb4: 	goto locret_1ddb4;
        case m2c::ksub_1dd92: 	goto sub_1dd92;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1ddb5(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1ddb5:
    _begin:
cs=0x1a2;eip=0x00ddb5; 	X(PUSH(ax));	// 35667                  push    ax ;~ 01A2:DDB5
cs=0x1a2;eip=0x00ddb6; 	X(PUSH(bx));	// 35668                  push    bx ;~ 01A2:DDB6
cs=0x1a2;eip=0x00ddb7; 	X(PUSH(cx));	// 35669                  push    cx ;~ 01A2:DDB7
cs=0x1a2;eip=0x00ddb8; 	X(PUSH(dx));	// 35670                  push    dx ;~ 01A2:DDB8
cs=0x1a2;eip=0x00ddb9; 	X(PUSH(bp));	// 35671                  push    bp ;~ 01A2:DDB9
cs=0x1a2;eip=0x00ddba; 	X(PUSH(si));	// 35672                  push    si ;~ 01A2:DDBA
cs=0x1a2;eip=0x00ddbb; 	X(PUSH(di));	// 35673                  push    di ;~ 01A2:DDBB
cs=0x1a2;eip=0x00ddbc; 	X(PUSH(es));	// 35674                  push    es ;~ 01A2:DDBC
cs=0x1a2;eip=0x00ddbd; 	X(PUSH(ds));	// 35675                  push    ds ;~ 01A2:DDBD
cs=0x1a2;eip=0x00ddbe; 	T(ax = 0x0FC;);	// 35676                  mov     ax, 0FCh ;~ 01A2:DDBE
cs=0x1a2;eip=0x00ddc1; 	T(dl = 0x9D;);	// 35677                  mov     dl, 9Dh ;~ 01A2:DDC1
cs=0x1a2;eip=0x00ddc3; 	T(cx = 0x3C;);	// 35678                  mov     cx, 3Ch ; '<' ;~ 01A2:DDC3
cs=0x1a2;eip=0x00ddc6; 	T(dh = 7;);	// 35679                  mov     dh, 7 ;~ 01A2:DDC6
cs=0x1a2;eip=0x00ddc8; 	T(bh = 0;);	// 35680                  mov     bh, 0 ;~ 01A2:DDC8
cs=0x1a2;eip=0x00ddca; 	J(CALL(sub_15d80,0));	// 35681                  call    sub_15D80 ;~ 01A2:DDCA
cs=0x1a2;eip=0x00ddcd; 	T(si = 0x7EC;);	// 35682                  mov     si, 7ECh ;~ 01A2:DDCD
cs=0x1a2;eip=0x00ddd0; 	X(PUSH(si));	// 35683                  push    si ;~ 01A2:DDD0
cs=0x1a2;eip=0x00ddd1; 	T(dx = 0x1D;);	// 35684                  mov     dx, 1Dh ;~ 01A2:DDD1
cs=0x1a2;eip=0x00ddd4; 	J(CALL(sub_175af,0));	// 35685                  call    sub_175AF ;~ 01A2:DDD4
cs=0x1a2;eip=0x00ddd7; 	J(CALL(sub_19c97,0));	// 35686                  call    sub_19C97 ;~ 01A2:DDD7
cs=0x1a2;eip=0x00ddda; 	X(MOV(*(raddr(ds,si)), 0x20));	// 35687                  mov     byte ptr [si], 20h ; ' ' ;~ 01A2:DDDA
cs=0x1a2;eip=0x00dddd; 	T(INC(si));	// 35688                  inc     si ;~ 01A2:DDDD
cs=0x1a2;eip=0x00ddde; 	T(XOR(dh, dh));	// 35689                  xor     dh, dh ;~ 01A2:DDDE
cs=0x1a2;eip=0x00dde0; 	T(dl = byte_1f722;);	// 35690                  mov     dl, ds:byte_1F722 ;~ 01A2:DDE0
cs=0x1a2;eip=0x00dde4; 	T(INC(dx));	// 35691                  inc     dx ;~ 01A2:DDE4
cs=0x1a2;eip=0x00dde5; 	T(cl = 0x0FF;);	// 35692                  mov     cl, 0FFh ;~ 01A2:DDE5
cs=0x1a2;eip=0x00dde7; 	J(CALL(sub_19ba0,m2c::kloc_19bb7));	// 35693                  call    loc_19BB7 ;~ 01A2:DDE7
cs=0x1a2;eip=0x00ddea; 	T(ax = 0x0FC;);	// 35694                  mov     ax, 0FCh ;~ 01A2:DDEA
cs=0x1a2;eip=0x00dded; 	T(dh = 0x9D;);	// 35695                  mov     dh, 9Dh ;~ 01A2:DDED
cs=0x1a2;eip=0x00ddef; 	T(ch = 0x3C;);	// 35696                  mov     ch, 3Ch ; '<' ;~ 01A2:DDEF
cs=0x1a2;eip=0x00ddf1; 	X(POP(di));	// 35697                  pop     di ;~ 01A2:DDF1
cs=0x1a2;eip=0x00ddf2; 	J(CALL(sub_18738,0));	// 35698                  call    sub_18738 ;~ 01A2:DDF2
cs=0x1a2;eip=0x00ddf5; 	X(POP(ds));	// 35699                  pop     ds ;~ 01A2:DDF5
cs=0x1a2;eip=0x00ddf6; 	X(POP(es));	// 35700                  pop     es ;~ 01A2:DDF6
cs=0x1a2;eip=0x00ddf7; 	X(POP(di));	// 35701                  pop     di ;~ 01A2:DDF7
cs=0x1a2;eip=0x00ddf8; 	X(POP(si));	// 35702                  pop     si ;~ 01A2:DDF8
cs=0x1a2;eip=0x00ddf9; 	X(POP(bp));	// 35703                  pop     bp ;~ 01A2:DDF9
cs=0x1a2;eip=0x00ddfa; 	X(POP(dx));	// 35704                  pop     dx ;~ 01A2:DDFA
cs=0x1a2;eip=0x00ddfb; 	X(POP(cx));	// 35705                  pop     cx ;~ 01A2:DDFB
cs=0x1a2;eip=0x00ddfc; 	X(POP(bx));	// 35706                  pop     bx ;~ 01A2:DDFC
cs=0x1a2;eip=0x00ddfd; 	X(POP(ax));	// 35707                  pop     ax ;~ 01A2:DDFD
cs=0x1a2;eip=0x00ddfe; 	J(RETN(0));	// 35708                  retn ;~ 01A2:DDFE

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1ddb5: 	goto sub_1ddb5;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_ddff_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_ddff_proc:
    _begin:
loc_1ddff:
	// 6433 
cs=0x1a2;eip=0x00ddff; 	T(TEST(*(raddr(es,di+0x0C)), 4));	// 35714                  test    byte ptr es:[di+0Ch], 4 ;~ 01A2:DDFF
cs=0x1a2;eip=0x00de04; 	J(JNZ(loc_1de0b));	// 35715                  jnz     short loc_1DE0B ;~ 01A2:DE04
loc_1de06:
	// 6434 
cs=0x1a2;eip=0x00de06; 	T(ADD(di, 0x20));	// 35718                  add     di, 20h ; ' ' ;~ 01A2:DE06
cs=0x1a2;eip=0x00de09; 	J(JMP(loc_1de15));	// 35719                  jmp     short loc_1DE15 ;~ 01A2:DE09
loc_1de0b:
	// 6435 
cs=0x1a2;eip=0x00de0b; 	T(TEST(*(raddr(es,di+0x0C)), 0x20));	// 35723                  test    byte ptr es:[di+0Ch], 20h ;~ 01A2:DE0B
cs=0x1a2;eip=0x00de10; 	J(JNZ(loc_1de06));	// 35724                  jnz     short loc_1DE06 ;~ 01A2:DE10
cs=0x1a2;eip=0x00de12; 	J(CALL(sub_13b10,0));	// 35725                  call    sub_13B10 ;~ 01A2:DE12
loc_1de15:
	// 6436 
cs=0x1a2;eip=0x00de15; 	X(PUSH(ax));	// 35728                  push    ax ;~ 01A2:DE15
cs=0x1a2;eip=0x00de16; 	X(PUSH(dx));	// 35729                  push    dx ;~ 01A2:DE16
cs=0x1a2;eip=0x00de17; 	X(PUSH(cx));	// 35730                  push    cx ;~ 01A2:DE17
cs=0x1a2;eip=0x00de18; 	T(MOV(ax, *(dw*)(raddr(es,di))));	// 35731                  mov     ax, es:[di] ;~ 01A2:DE18
cs=0x1a2;eip=0x00de1b; 	T(dh = al;);	// 35732                  mov     dh, al ;~ 01A2:DE1B
cs=0x1a2;eip=0x00de1d; 	T(MOV(ax, *(dw*)(raddr(es,di+2))));	// 35733                  mov     ax, es:[di+2] ;~ 01A2:DE1D
cs=0x1a2;eip=0x00de21; 	T(ADD(di, 4));	// 35734                  add     di, 4 ;~ 01A2:DE21
cs=0x1a2;eip=0x00de24; 	T(dl = al;);	// 35735                  mov     dl, al ;~ 01A2:DE24
cs=0x1a2;eip=0x00de26; 	T(bl = al;);	// 35736                  mov     bl, al ;~ 01A2:DE26
cs=0x1a2;eip=0x00de28; 	J(CALL(sub_1d7fe,0));	// 35737                  call    sub_1D7FE ;~ 01A2:DE28
cs=0x1a2;eip=0x00de2b; 	X(POP(cx));	// 35738                  pop     cx ;~ 01A2:DE2B
cs=0x1a2;eip=0x00de2c; 	X(POP(dx));	// 35739                  pop     dx ;~ 01A2:DE2C
cs=0x1a2;eip=0x00de2d; 	T(SUB(cx, word_1f3d6));	// 35740                  sub     cx, ds:word_1F3D6 ;~ 01A2:DE2D
cs=0x1a2;eip=0x00de31; 	T(SHR(cx, 1));	// 35741                  shr     cx, 1 ;~ 01A2:DE31
cs=0x1a2;eip=0x00de33; 	X(POP(ax));	// 35742                  pop     ax ;~ 01A2:DE33
cs=0x1a2;eip=0x00de34; 	T(ADD(ax, cx));	// 35743                  add     ax, cx ;~ 01A2:DE34
cs=0x1a2;eip=0x00de36; 	T(SUB(dh, bl));	// 35744                  sub     dh, bl ;~ 01A2:DE36
cs=0x1a2;eip=0x00de38; 	T(SHR(dh, 1));	// 35745                  shr     dh, 1 ;~ 01A2:DE38
cs=0x1a2;eip=0x00de3a; 	T(ADD(dl, dh));	// 35746                  add     dl, dh ;~ 01A2:DE3A
cs=0x1a2;eip=0x00de3c; 	T(XOR(dh, dh));	// 35747                  xor     dh, dh ;~ 01A2:DE3C
cs=0x1a2;eip=0x00de3e; 	T(si = di;);	// 35748                  mov     si, di ;~ 01A2:DE3E
cs=0x1a2;eip=0x00de40; 	T(MOV(cx, *(dw*)(raddr(es,di-4))));	// 35749                  mov     cx, es:[di-4] ;~ 01A2:DE40
cs=0x1a2;eip=0x00de44; 	T(MOV(bx, *(dw*)(raddr(es,di-2))));	// 35750                  mov     bx, es:[di-2] ;~ 01A2:DE44
cs=0x1a2;eip=0x00de48; 	T(ch = bl;);	// 35751                  mov     ch, bl ;~ 01A2:DE48
cs=0x1a2;eip=0x00de4a; 	X(*(dw*)(((db*)&off_1f8c8)+2) = es;);	// 35752                  mov     word ptr ds:off_1F8C8+2, es ;~ 01A2:DE4A
cs=0x1a2;eip=0x00de4e; 	J(CALL(sub_18e26,0));	// 35753                  call    sub_18E26 ;~ 01A2:DE4E
cs=0x1a2;eip=0x00de51; 	J(RETN(0));	// 35754                  retn ;~ 01A2:DE51

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1ddff: 	goto loc_1ddff;
        case m2c::kloc_1de06: 	goto loc_1de06;
        case m2c::kloc_1de0b: 	goto loc_1de0b;
        case m2c::kloc_1de15: 	goto loc_1de15;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1de52(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1de52:
    _begin:
cs=0x1a2;eip=0x00de52; 	T(si = word_1f19a;);	// 35760                  mov     si, word_1F19A ;~ 01A2:DE52
cs=0x1a2;eip=0x00de56; 	T(di = word_1f19c;);	// 35761                  mov     di, word_1F19C ;~ 01A2:DE56
cs=0x1a2;eip=0x00de5a; 	T(bx = di;);	// 35762                  mov     bx, di ;~ 01A2:DE5A
cs=0x1a2;eip=0x00de5c; 	T(es = seg_1f8f4;);	// 35763                  mov     es, ds:seg_1F8F4 ;~ 01A2:DE5C
cs=0x1a2;eip=0x00de60; 	T(XOR(ax, ax));	// 35765                  xor     ax, ax ;~ 01A2:DE60
cs=0x1a2;eip=0x00de62; 	X(STOSW);	// 35766                  stosw ;~ 01A2:DE62
cs=0x1a2;eip=0x00de63; 	T(cx = word_1f394;);	// 35767                  mov     cx, ds:word_1F394 ;~ 01A2:DE63
cs=0x1a2;eip=0x00de67; 	T(OR(cx, cx));	// 35768                  or      cx, cx ;~ 01A2:DE67
cs=0x1a2;eip=0x00de69; 	J(JZ(locret_1de81));	// 35769                  jz      short locret_1DE81 ;~ 01A2:DE69
loc_1de6b:
	// 6437 
cs=0x1a2;eip=0x00de6b; 	T(CMP(*(dw*)(raddr(ds,si)), 0));	// 35772                  cmp     word ptr [si], 0 ;~ 01A2:DE6B
cs=0x1a2;eip=0x00de6e; 	J(JS(loc_1de7c));	// 35773                  js      short loc_1DE7C ;~ 01A2:DE6E
cs=0x1a2;eip=0x00de70; 	T(XOR(ah, ah));	// 35774                  xor     ah, ah ;~ 01A2:DE70
cs=0x1a2;eip=0x00de72; 	T(MOV(al, *(raddr(ds,si+0x12))));	// 35775                  mov     al, [si+12h] ;~ 01A2:DE72
cs=0x1a2;eip=0x00de75; 	X(STOSW);	// 35776                  stosw ;~ 01A2:DE75
cs=0x1a2;eip=0x00de76; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x2E))));	// 35777                  mov     ax, [si+2Eh] ;~ 01A2:DE76
cs=0x1a2;eip=0x00de79; 	X(STOSW);	// 35778                  stosw ;~ 01A2:DE79
cs=0x1a2;eip=0x00de7a; 	X(INC(*(dw*)(raddr(ds,bx))));	// 35779                  inc     word ptr [bx] ;~ 01A2:DE7A
loc_1de7c:
	// 6438 
cs=0x1a2;eip=0x00de7c; 	T(ADD(si, 0x32));	// 35782                  add     si, 32h ; '2' ;~ 01A2:DE7C
cs=0x1a2;eip=0x00de7f; 	J(LOOP(loc_1de6b));	// 35783                  loop    loc_1DE6B ;~ 01A2:DE7F
locret_1de81:
	// 6439 
cs=0x1a2;eip=0x00de81; 	J(RETN(0));	// 35786                  retn ;~ 01A2:DE81

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1de6b: 	goto loc_1de6b;
        case m2c::kloc_1de7c: 	goto loc_1de7c;
        case m2c::klocret_1de81: 	goto locret_1de81;
        case m2c::ksub_1de52: 	goto sub_1de52;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1de82(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1de82:
    _begin:
cs=0x1a2;eip=0x00de82; 	T(TEST(byte_1f84b, 1));	// 35794                  test    ds:byte_1F84B, 1 ;~ 01A2:DE82
cs=0x1a2;eip=0x00de87; 	X(PUSHF);	// 35795                  pushf ;~ 01A2:DE87
cs=0x1a2;eip=0x00de88; 	X(AND(byte_1f84b, 0x0FE));	// 35796                  and     ds:byte_1F84B, 0FEh ;~ 01A2:DE88
cs=0x1a2;eip=0x00de8d; 	X(POPF);	// 35797                  popf ;~ 01A2:DE8D
cs=0x1a2;eip=0x00de8e; 	J(JNZ(locret_1dec7));	// 35798                  jnz     short locret_1DEC7 ;~ 01A2:DE8E
cs=0x1a2;eip=0x00de90; 	X(PUSH(ax));	// 35799                  push    ax ;~ 01A2:DE90
cs=0x1a2;eip=0x00de91; 	X(PUSH(bx));	// 35800                  push    bx ;~ 01A2:DE91
cs=0x1a2;eip=0x00de92; 	X(PUSH(cx));	// 35801                  push    cx ;~ 01A2:DE92
cs=0x1a2;eip=0x00de93; 	X(PUSH(dx));	// 35802                  push    dx ;~ 01A2:DE93
cs=0x1a2;eip=0x00de94; 	X(PUSH(bp));	// 35803                  push    bp ;~ 01A2:DE94
cs=0x1a2;eip=0x00de95; 	X(PUSH(si));	// 35804                  push    si ;~ 01A2:DE95
cs=0x1a2;eip=0x00de96; 	X(PUSH(di));	// 35805                  push    di ;~ 01A2:DE96
cs=0x1a2;eip=0x00de97; 	X(PUSH(es));	// 35806                  push    es ;~ 01A2:DE97
cs=0x1a2;eip=0x00de98; 	X(PUSH(ds));	// 35807                  push    ds ;~ 01A2:DE98
cs=0x1a2;eip=0x00de99; 	T(si = word_1f19c;);	// 35808                  mov     si, word_1F19C ;~ 01A2:DE99
cs=0x1a2;eip=0x00de9d; 	T(LODSW);	// 35809                  lodsw ;~ 01A2:DE9D
cs=0x1a2;eip=0x00de9e; 	T(cx = ax;);	// 35810                  mov     cx, ax ;~ 01A2:DE9E
cs=0x1a2;eip=0x00dea0; 	T(OR(ax, ax));	// 35811                  or      ax, ax ;~ 01A2:DEA0
cs=0x1a2;eip=0x00dea2; 	J(JZ(loc_1debe));	// 35812                  jz      short loc_1DEBE ;~ 01A2:DEA2
loc_1dea4:
	// 6440 
cs=0x1a2;eip=0x00dea4; 	T(TEST(*(raddr(ds,si)), 0x40));	// 35815                  test    byte ptr [si], 40h ;~ 01A2:DEA4
cs=0x1a2;eip=0x00dea7; 	J(JNZ(loc_1deae));	// 35816                  jnz     short loc_1DEAE ;~ 01A2:DEA7
cs=0x1a2;eip=0x00dea9; 	T(TEST(*(raddr(ds,si)), 0x80));	// 35817                  test    byte ptr [si], 80h ;~ 01A2:DEA9
cs=0x1a2;eip=0x00deac; 	J(JZ(loc_1deb9));	// 35818                  jz      short loc_1DEB9 ;~ 01A2:DEAC
loc_1deae:
	// 6441 
cs=0x1a2;eip=0x00deae; 	T(MOV(dx, *(dw*)(raddr(ds,si+2))));	// 35821                  mov     dx, [si+2] ;~ 01A2:DEAE
cs=0x1a2;eip=0x00deb1; 	J(CALL(sub_13e6d,0));	// 35822                  call    sub_13E6D ;~ 01A2:DEB1
cs=0x1a2;eip=0x00deb4; 	T(al = 6;);	// 35823                  mov     al, 6 ;~ 01A2:DEB4
cs=0x1a2;eip=0x00deb6; 	J(CALL(sub_1438a,0));	// 35824                  call    sub_1438A ;~ 01A2:DEB6
loc_1deb9:
	// 6442 
cs=0x1a2;eip=0x00deb9; 	T(ADD(si, 4));	// 35827                  add     si, 4 ;~ 01A2:DEB9
cs=0x1a2;eip=0x00debc; 	J(LOOP(loc_1dea4));	// 35828                  loop    loc_1DEA4 ;~ 01A2:DEBC
loc_1debe:
	// 6443 
cs=0x1a2;eip=0x00debe; 	X(POP(ds));	// 35831                  pop     ds ;~ 01A2:DEBE
cs=0x1a2;eip=0x00debf; 	X(POP(es));	// 35832                  pop     es ;~ 01A2:DEBF
cs=0x1a2;eip=0x00dec0; 	X(POP(di));	// 35833                  pop     di ;~ 01A2:DEC0
cs=0x1a2;eip=0x00dec1; 	X(POP(si));	// 35834                  pop     si ;~ 01A2:DEC1
cs=0x1a2;eip=0x00dec2; 	X(POP(bp));	// 35835                  pop     bp ;~ 01A2:DEC2
cs=0x1a2;eip=0x00dec3; 	X(POP(dx));	// 35836                  pop     dx ;~ 01A2:DEC3
cs=0x1a2;eip=0x00dec4; 	X(POP(cx));	// 35837                  pop     cx ;~ 01A2:DEC4
cs=0x1a2;eip=0x00dec5; 	X(POP(bx));	// 35838                  pop     bx ;~ 01A2:DEC5
cs=0x1a2;eip=0x00dec6; 	X(POP(ax));	// 35839                  pop     ax ;~ 01A2:DEC6
locret_1dec7:
	// 6444 
cs=0x1a2;eip=0x00dec7; 	J(RETN(0));	// 35842                  retn ;~ 01A2:DEC7

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1dea4: 	goto loc_1dea4;
        case m2c::kloc_1deae: 	goto loc_1deae;
        case m2c::kloc_1deb9: 	goto loc_1deb9;
        case m2c::kloc_1debe: 	goto loc_1debe;
        case m2c::klocret_1dec7: 	goto locret_1dec7;
        case m2c::ksub_1de82: 	goto sub_1de82;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1dec8(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1dec8:
    _begin:
cs=0x1a2;eip=0x00dec8; 	X(PUSH(ax));	// 35851                  push    ax ;~ 01A2:DEC8
cs=0x1a2;eip=0x00dec9; 	X(PUSH(ds));	// 35852                  push    ds ;~ 01A2:DEC9
cs=0x1a2;eip=0x00deca; 	T(ds = seg_1dfd3;);	// 35853                  mov     ds, cs:seg_1DFD3 ;~ 01A2:DECA
loc_1decf:
	// 6445 
cs=0x1a2;eip=0x00decf; 	T(ah = *(db*)(&off_6b850););	// 35857                  mov     ah, byte ptr off_6B850 ;~ 01A2:DECF
cs=0x1a2;eip=0x00ded3; 	T(INC(ah));	// 35858                  inc     ah ;~ 01A2:DED3
cs=0x1a2;eip=0x00ded5; 	S(_INT(0x16));	// 35859                  int     16h             ; KEYBOARD - CHECK BUFFER, DO NOT CLEAR ;~ 01A2:DED5
cs=0x1a2;eip=0x00ded7; 	J(JZ(loc_1dee1));	// 35863                  jz      short loc_1DEE1 ;~ 01A2:DED7
cs=0x1a2;eip=0x00ded9; 	T(ah = *(db*)(&off_6b850););	// 35864                  mov     ah, byte ptr off_6B850 ;~ 01A2:DED9
cs=0x1a2;eip=0x00dedd; 	S(_INT(0x16));	// 35865                  int     16h             ; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY ;~ 01A2:DEDD
cs=0x1a2;eip=0x00dedf; 	J(JMP(loc_1decf));	// 35867                  jmp     short loc_1DECF ;~ 01A2:DEDF
loc_1dee1:
	// 6446 
cs=0x1a2;eip=0x00dee1; 	X(POP(ds));	// 35871                  pop     ds ;~ 01A2:DEE1
cs=0x1a2;eip=0x00dee2; 	X(POP(ax));	// 35873                  pop     ax ;~ 01A2:DEE2
cs=0x1a2;eip=0x00dee3; 	J(RETN(0));	// 35874                  retn ;~ 01A2:DEE3

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1decf: 	goto loc_1decf;
        case m2c::kloc_1dee1: 	goto loc_1dee1;
        case m2c::ksub_1dec8: 	goto sub_1dec8;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1dee4(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1dee4:
    _begin:
cs=0x1a2;eip=0x00dee4; 	X(PUSH(bx));	// 35882                  push    bx ;~ 01A2:DEE4
cs=0x1a2;eip=0x00dee5; 	X(PUSH(ds));	// 35883                  push    ds ;~ 01A2:DEE5
cs=0x1a2;eip=0x00dee6; 	T(ds = seg_1dfd3;);	// 35884                  mov     ds, cs:seg_1DFD3 ;~ 01A2:DEE6
cs=0x1a2;eip=0x00deeb; 	T(XCHG(ax, bx));	// 35886                  xchg    ax, bx ;~ 01A2:DEEB
loc_1deec:
	// 6447 
cs=0x1a2;eip=0x00deec; 	T(ah = *(db*)(&off_6b850););	// 35889                  mov     ah, byte ptr off_6B850 ;~ 01A2:DEEC
cs=0x1a2;eip=0x00def0; 	T(INC(ah));	// 35890                  inc     ah ;~ 01A2:DEF0
cs=0x1a2;eip=0x00def2; 	S(_INT(0x16));	// 35891                  int     16h             ; KEYBOARD - CHECK BUFFER, DO NOT CLEAR ;~ 01A2:DEF2
cs=0x1a2;eip=0x00def4; 	J(JNZ(loc_1defa));	// 35895                  jnz     short loc_1DEFA ;~ 01A2:DEF4
cs=0x1a2;eip=0x00def6; 	S(_INT(0x28));	// 35896                  int     28h             ; DOS 2+ internal - KEYBOARD BUSY LOOP ;~ 01A2:DEF6
cs=0x1a2;eip=0x00def8; 	J(JMP(loc_1deec));	// 35897                  jmp     short loc_1DEEC ;~ 01A2:DEF8
loc_1defa:
	// 6448 
cs=0x1a2;eip=0x00defa; 	T(ah = *(db*)(&off_6b850););	// 35901                  mov     ah, byte ptr off_6B850 ;~ 01A2:DEFA
cs=0x1a2;eip=0x00defe; 	S(_INT(0x16));	// 35902                  int     16h             ; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY ;~ 01A2:DEFE
cs=0x1a2;eip=0x00df00; 	T(TEST(ax, ax));	// 35904                  test    ax, ax ;~ 01A2:DF00
cs=0x1a2;eip=0x00df02; 	J(JZ(loc_1df10));	// 35905                  jz      short loc_1DF10 ;~ 01A2:DF02
cs=0x1a2;eip=0x00df04; 	T(TEST(ah, ah));	// 35906                  test    ah, ah ;~ 01A2:DF04
cs=0x1a2;eip=0x00df06; 	J(JZ(loc_1df13));	// 35907                  jz      short loc_1DF13 ;~ 01A2:DF06
cs=0x1a2;eip=0x00df08; 	T(CMP(al, 0x0E0));	// 35908                  cmp     al, 0E0h ;~ 01A2:DF08
cs=0x1a2;eip=0x00df0a; 	J(JZ(loc_1df10));	// 35909                  jz      short loc_1DF10 ;~ 01A2:DF0A
cs=0x1a2;eip=0x00df0c; 	T(TEST(al, al));	// 35910                  test    al, al ;~ 01A2:DF0C
cs=0x1a2;eip=0x00df0e; 	J(JNZ(loc_1df13));	// 35911                  jnz     short loc_1DF13 ;~ 01A2:DF0E
loc_1df10:
	// 6449 
cs=0x1a2;eip=0x00df10; 	T(STC);	// 35915                  stc ;~ 01A2:DF10
cs=0x1a2;eip=0x00df11; 	T(al = ah;);	// 35916                  mov     al, ah ;~ 01A2:DF11
loc_1df13:
	// 6450 
cs=0x1a2;eip=0x00df13; 	T(LAHF);	// 35920                  lahf ;~ 01A2:DF13
cs=0x1a2;eip=0x00df14; 	T(XOR(ah, 0x40));	// 35921                  xor     ah, 40h ;~ 01A2:DF14
cs=0x1a2;eip=0x00df17; 	T(SAHF);	// 35922                  sahf ;~ 01A2:DF17
cs=0x1a2;eip=0x00df18; 	T(ah = bh;);	// 35923                  mov     ah, bh ;~ 01A2:DF18
cs=0x1a2;eip=0x00df1a; 	X(POP(ds));	// 35924                  pop     ds ;~ 01A2:DF1A
cs=0x1a2;eip=0x00df1b; 	X(POP(bx));	// 35926                  pop     bx ;~ 01A2:DF1B
cs=0x1a2;eip=0x00df1c; 	J(RETN(0));	// 35927                  retn ;~ 01A2:DF1C

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1deec: 	goto loc_1deec;
        case m2c::kloc_1defa: 	goto loc_1defa;
        case m2c::kloc_1df10: 	goto loc_1df10;
        case m2c::kloc_1df13: 	goto loc_1df13;
        case m2c::ksub_1dee4: 	goto sub_1dee4;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1df1d(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1df1d:
    _begin:
cs=0x1a2;eip=0x00df1d; 	X(PUSH(bx));	// 35935                  push    bx ;~ 01A2:DF1D
cs=0x1a2;eip=0x00df1e; 	X(PUSH(ax));	// 35936                  push    ax ;~ 01A2:DF1E
cs=0x1a2;eip=0x00df1f; 	X(PUSH(dx));	// 35937                  push    dx ;~ 01A2:DF1F
cs=0x1a2;eip=0x00df20; 	X(PUSH(cx));	// 35938                  push    cx ;~ 01A2:DF20
cs=0x1a2;eip=0x00df21; 	X(PUSH(bp));	// 35939                  push    bp ;~ 01A2:DF21
cs=0x1a2;eip=0x00df22; 	T(XOR(bh, bh));	// 35940                  xor     bh, bh ;~ 01A2:DF22
cs=0x1a2;eip=0x00df24; 	T(XOR(bp, bp));	// 35941                  xor     bp, bp ;~ 01A2:DF24
cs=0x1a2;eip=0x00df26; 	T(CMP(bl, 2));	// 35942                  cmp     bl, 2 ;~ 01A2:DF26
cs=0x1a2;eip=0x00df29; 	J(JC(loc_1df45));	// 35943                  jb      short loc_1DF45 ;~ 01A2:DF29
loc_1df2b:
	// 6451 
cs=0x1a2;eip=0x00df2b; 	J(CALL(sub_1df68,0));	// 35946                  call    sub_1DF68 ;~ 01A2:DF2B
cs=0x1a2;eip=0x00df2e; 	X(PUSH(cx));	// 35947                  push    cx ;~ 01A2:DF2E
cs=0x1a2;eip=0x00df2f; 	T(INC(bp));	// 35948                  inc     bp ;~ 01A2:DF2F
cs=0x1a2;eip=0x00df30; 	T(cx = dx;);	// 35949                  mov     cx, dx ;~ 01A2:DF30
cs=0x1a2;eip=0x00df32; 	T(OR(cx, ax));	// 35950                  or      cx, ax ;~ 01A2:DF32
cs=0x1a2;eip=0x00df34; 	J(JNZ(loc_1df2b));	// 35951                  jnz     short loc_1DF2B ;~ 01A2:DF34
loc_1df36:
	// 6452 
cs=0x1a2;eip=0x00df36; 	X(POP(ax));	// 35954                  pop     ax ;~ 01A2:DF36
cs=0x1a2;eip=0x00df37; 	T(ADD(al, 0x30));	// 35955                  add     al, 30h ; '0' ;~ 01A2:DF37
cs=0x1a2;eip=0x00df39; 	T(CMP(al, 0x39));	// 35956                  cmp     al, 39h ; '9' ;~ 01A2:DF39
cs=0x1a2;eip=0x00df3b; 	J(JBE(loc_1df3f));	// 35957                  jbe     short loc_1DF3F ;~ 01A2:DF3B
cs=0x1a2;eip=0x00df3d; 	T(ADD(al, 7));	// 35958                  add     al, 7 ;~ 01A2:DF3D
loc_1df3f:
	// 6453 
cs=0x1a2;eip=0x00df3f; 	X(MOV(*(raddr(ds,si)), al));	// 35961                  mov     [si], al ;~ 01A2:DF3F
cs=0x1a2;eip=0x00df41; 	T(INC(si));	// 35962                  inc     si ;~ 01A2:DF41
cs=0x1a2;eip=0x00df42; 	T(DEC(bp));	// 35963                  dec     bp ;~ 01A2:DF42
cs=0x1a2;eip=0x00df43; 	J(JNZ(loc_1df36));	// 35964                  jnz     short loc_1DF36 ;~ 01A2:DF43
loc_1df45:
	// 6454 
cs=0x1a2;eip=0x00df45; 	X(POP(bp));	// 35967                  pop     bp ;~ 01A2:DF45
cs=0x1a2;eip=0x00df46; 	X(POP(cx));	// 35968                  pop     cx ;~ 01A2:DF46
cs=0x1a2;eip=0x00df47; 	X(POP(dx));	// 35969                  pop     dx ;~ 01A2:DF47
cs=0x1a2;eip=0x00df48; 	X(POP(ax));	// 35970                  pop     ax ;~ 01A2:DF48
cs=0x1a2;eip=0x00df49; 	X(POP(bx));	// 35971                  pop     bx ;~ 01A2:DF49
cs=0x1a2;eip=0x00df4a; 	J(RETN(0));	// 35972                  retn ;~ 01A2:DF4A

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1df2b: 	goto loc_1df2b;
        case m2c::kloc_1df36: 	goto loc_1df36;
        case m2c::kloc_1df3f: 	goto loc_1df3f;
        case m2c::kloc_1df45: 	goto loc_1df45;
        case m2c::ksub_1df1d: 	goto sub_1df1d;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_df4b_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_df4b_proc:
    _begin:
loc_1df4b:
	// 6455 
cs=0x1a2;eip=0x00df4b; 	X(PUSH(bx));	// 35978                  push    bx ;~ 01A2:DF4B
cs=0x1a2;eip=0x00df4c; 	X(PUSH(si));	// 35979                  push    si ;~ 01A2:DF4C
cs=0x1a2;eip=0x00df4d; 	T(bl = 0x0A;);	// 35980                  mov     bl, 0Ah ;~ 01A2:DF4D
cs=0x1a2;eip=0x00df4f; 	J(CALL(sub_1df1d,0));	// 35981                  call    sub_1DF1D ;~ 01A2:DF4F
cs=0x1a2;eip=0x00df52; 	X(MOV(*(raddr(ds,si)), 0));	// 35982                  mov     byte ptr [si], 0 ;~ 01A2:DF52
cs=0x1a2;eip=0x00df55; 	X(POP(si));	// 35983                  pop     si ;~ 01A2:DF55
cs=0x1a2;eip=0x00df56; 	X(POP(bx));	// 35984                  pop     bx ;~ 01A2:DF56
cs=0x1a2;eip=0x00df57; 	J(RETN(0));	// 35985                  retn ;~ 01A2:DF57

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kseg000_df4b_proc: 	goto seg000_df4b_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1df58(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1df58:
    _begin:
cs=0x1a2;eip=0x00df58; 	X(PUSH(ds));	// 35992                  push    ds ;~ 01A2:DF58
cs=0x1a2;eip=0x00df59; 	T(XOR(ax, ax));	// 35993                  xor     ax, ax ;~ 01A2:DF59
cs=0x1a2;eip=0x00df5b; 	T(ds = ax;);	// 35994                  mov     ds, ax ;~ 01A2:DF5B
cs=0x1a2;eip=0x00df5d; 	T(CLI);	// 35996                  cli ;~ 01A2:DF5D
cs=0x1a2;eip=0x00df5e; 	T(MOV(ax, *(dw*)(raddr(ds,0x46C))));	// 35997                  mov     ax, ds:46Ch ;~ 01A2:DF5E
cs=0x1a2;eip=0x00df61; 	T(MOV(dx, *(dw*)(raddr(ds,0x46E))));	// 35998                  mov     dx, ds:46Eh ;~ 01A2:DF61
cs=0x1a2;eip=0x00df65; 	T(STI);	// 35999                  sti ;~ 01A2:DF65
cs=0x1a2;eip=0x00df66; 	X(POP(ds));	// 36000                  pop     ds ;~ 01A2:DF66
cs=0x1a2;eip=0x00df67; 	J(RETN(0));	// 36002                  retn ;~ 01A2:DF67

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1df58: 	goto sub_1df58;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1df68(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1df68:
    _begin:
cs=0x1a2;eip=0x00df68; 	T(OR(bx, bx));	// 36010                  or      bx, bx ;~ 01A2:DF68
cs=0x1a2;eip=0x00df6a; 	J(JZ(locret_1df7b));	// 36011                  jz      short locret_1DF7B ;~ 01A2:DF6A
cs=0x1a2;eip=0x00df6c; 	T(XOR(cx, cx));	// 36012                  xor     cx, cx ;~ 01A2:DF6C
cs=0x1a2;eip=0x00df6e; 	T(CMP(dx, bx));	// 36013                  cmp     dx, bx ;~ 01A2:DF6E
cs=0x1a2;eip=0x00df70; 	J(JC(loc_1df77));	// 36014                  jb      short loc_1DF77 ;~ 01A2:DF70
cs=0x1a2;eip=0x00df72; 	T(XCHG(ax, cx));	// 36015                  xchg    ax, cx ;~ 01A2:DF72
cs=0x1a2;eip=0x00df73; 	T(XCHG(ax, dx));	// 36016                  xchg    ax, dx ;~ 01A2:DF73
cs=0x1a2;eip=0x00df74; 	T(DIV2(bx));	// 36017                  div     bx ;~ 01A2:DF74
cs=0x1a2;eip=0x00df76; 	T(XCHG(ax, cx));	// 36018                  xchg    ax, cx ;~ 01A2:DF76
loc_1df77:
	// 6456 
cs=0x1a2;eip=0x00df77; 	T(DIV2(bx));	// 36021                  div     bx ;~ 01A2:DF77
cs=0x1a2;eip=0x00df79; 	T(XCHG(dx, cx));	// 36022                  xchg    dx, cx ;~ 01A2:DF79
locret_1df7b:
	// 6457 
cs=0x1a2;eip=0x00df7b; 	J(RETN(0));	// 36025                  retn ;~ 01A2:DF7B

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1df77: 	goto loc_1df77;
        case m2c::klocret_1df7b: 	goto locret_1df7b;
        case m2c::ksub_1df68: 	goto sub_1df68;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1df7c(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1df7c:
    _begin:
cs=0x1a2;eip=0x00df7c; 	X(PUSH(ax));	// 36035                  push    ax ;~ 01A2:DF7C
cs=0x1a2;eip=0x00df7d; 	X(PUSH(dx));	// 36036                  push    dx ;~ 01A2:DF7D
cs=0x1a2;eip=0x00df7e; 	X(PUSH(ds));	// 36037                  push    ds ;~ 01A2:DF7E
cs=0x1a2;eip=0x00df7f; 	T(ds = seg_1dfd3;);	// 36038                  mov     ds, cs:seg_1DFD3 ;~ 01A2:DF7F
cs=0x1a2;eip=0x00df84; 	J(CALL(sub_1df58,0));	// 36040                  call    sub_1DF58 ;~ 01A2:DF84
cs=0x1a2;eip=0x00df87; 	T(OR(al, 1));	// 36041                  or      al, 1 ;~ 01A2:DF87
cs=0x1a2;eip=0x00df89; 	X(*(dw*)(((db*)&off_6b850)+2) = ax;);	// 36042                  mov     word ptr off_6B850+2, ax ;~ 01A2:DF89
cs=0x1a2;eip=0x00df8c; 	X(word_6b854 = dx;);	// 36043                  mov     word_6B854, dx ;~ 01A2:DF8C
cs=0x1a2;eip=0x00df90; 	X(POP(ds));	// 36044                  pop     ds ;~ 01A2:DF90
cs=0x1a2;eip=0x00df91; 	X(POP(dx));	// 36046                  pop     dx ;~ 01A2:DF91
cs=0x1a2;eip=0x00df92; 	X(POP(ax));	// 36047                  pop     ax ;~ 01A2:DF92
cs=0x1a2;eip=0x00df93; 	J(RETN(0));	// 36048                  retn ;~ 01A2:DF93

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::ksub_1df7c: 	goto sub_1df7c;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group35(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group35:
    _begin:
sub_1df94:
	// 36056 
cs=0x1a2;eip=0x00df94; 	X(PUSH(dx));	// 36057                  push    dx ;~ 01A2:DF94
cs=0x1a2;eip=0x00df95; 	J(CALL(sub_1dfa3,0));	// 36058                  call    sub_1DFA3 ;~ 01A2:DF95
seg000_df98_proc:
	// 36062 
cs=0x1a2;eip=0x00df98; 	T(TEST(bx, bx));	// 36062                  test    bx, bx ;~ 01A2:DF98
cs=0x1a2;eip=0x00df9a; 	J(JZ(loc_1dfa1));	// 36063                  jz      short loc_1DFA1 ;~ 01A2:DF9A
cs=0x1a2;eip=0x00df9c; 	T(XOR(dx, dx));	// 36064                  xor     dx, dx ;~ 01A2:DF9C
cs=0x1a2;eip=0x00df9e; 	T(DIV2(bx));	// 36065                  div     bx ;~ 01A2:DF9E
cs=0x1a2;eip=0x00dfa0; 	T(XCHG(ax, dx));	// 36066                  xchg    ax, dx ;~ 01A2:DFA0
loc_1dfa1:
	// 6458 
cs=0x1a2;eip=0x00dfa1; 	X(POP(dx));	// 36069                  pop     dx ;~ 01A2:DFA1
cs=0x1a2;eip=0x00dfa2; 	J(RETN(0));	// 36070                  retn ;~ 01A2:DFA2

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kloc_1dfa1: 	goto loc_1dfa1;
        case m2c::kseg000_df98_proc: 	goto seg000_df98_proc;
        case m2c::ksub_1df94: 	goto sub_1df94;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group36(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group36:
    _begin:
sub_1dfa3:
	// 36076 
cs=0x1a2;eip=0x00dfa3; 	X(PUSH(bx));	// 36078                  push    bx ;~ 01A2:DFA3
cs=0x1a2;eip=0x00dfa4; 	X(PUSH(cx));	// 36079                  push    cx ;~ 01A2:DFA4
cs=0x1a2;eip=0x00dfa5; 	X(PUSH(dx));	// 36080                  push    dx ;~ 01A2:DFA5
cs=0x1a2;eip=0x00dfa6; 	X(PUSH(ds));	// 36081                  push    ds ;~ 01A2:DFA6
cs=0x1a2;eip=0x00dfa7; 	T(ds = seg_1dfd3;);	// 36082                  mov     ds, cs:seg_1DFD3 ;~ 01A2:DFA7
cs=0x1a2;eip=0x00dfac; 	T(bx = *(dw*)(&unk_6b856););	// 36084                  mov     bx, word ptr unk_6B856 ;~ 01A2:DFAC
cs=0x1a2;eip=0x00dfb0; 	T(cx = bx;);	// 36085                  mov     cx, bx ;~ 01A2:DFB0
cs=0x1a2;eip=0x00dfb2; 	T(ax = word_6b858;);	// 36086                  mov     ax, word_6B858 ;~ 01A2:DFB2
cs=0x1a2;eip=0x00dfb5; 	X(MUL1_2(*(dw*)(((db*)&off_6b850)+2)));	// 36087                  mul     word ptr off_6B850+2 ;~ 01A2:DFB5
cs=0x1a2;eip=0x00dfb9; 	T(XCHG(ax, bx));	// 36088                  xchg    ax, bx ;~ 01A2:DFB9
cs=0x1a2;eip=0x00dfba; 	X(MUL1_2(*(dw*)(((db*)&off_6b850)+2)));	// 36089                  mul     word ptr off_6B850+2 ;~ 01A2:DFBA
cs=0x1a2;eip=0x00dfbe; 	T(ADD(bx, dx));	// 36090                  add     bx, dx ;~ 01A2:DFBE
cs=0x1a2;eip=0x00dfc0; 	T(XCHG(ax, cx));	// 36091                  xchg    ax, cx ;~ 01A2:DFC0
cs=0x1a2;eip=0x00dfc1; 	X(MUL1_2(word_6b854));	// 36092                  mul     word_6B854 ;~ 01A2:DFC1
cs=0x1a2;eip=0x00dfc5; 	T(ADD(ax, bx));	// 36093                  add     ax, bx ;~ 01A2:DFC5
cs=0x1a2;eip=0x00dfc7; 	X(*(dw*)(((db*)&off_6b850)+2) = cx;);	// 36094                  mov     word ptr off_6B850+2, cx ;~ 01A2:DFC7
cs=0x1a2;eip=0x00dfcb; 	X(word_6b854 = ax;);	// 36095                  mov     word_6B854, ax ;~ 01A2:DFCB
cs=0x1a2;eip=0x00dfce; 	X(POP(ds));	// 36096                  pop     ds ;~ 01A2:DFCE
cs=0x1a2;eip=0x00dfcf; 	X(POP(dx));	// 36098                  pop     dx ;~ 01A2:DFCF
cs=0x1a2;eip=0x00dfd0; 	X(POP(cx));	// 36099                  pop     cx ;~ 01A2:DFD0
cs=0x1a2;eip=0x00dfd1; 	X(POP(bx));	// 36100                  pop     bx ;~ 01A2:DFD1
seg000_dfd2_proc:
	// 36103 
cs=0x1a2;eip=0x00dfd2; 	J(RETN(0));	// 36103                  retn ;~ 01A2:DFD2

            assert(0);
            __dispatch_call:
        #ifdef DOSBOX_CUSTOM
            if ((__disp >> 16) == 0xf000)
            {cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
        #endif
            if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
            switch (__disp) {
                case m2c::kseg000_dfd2_proc: 	goto seg000_dfd2_proc;
        case m2c::ksub_1dfa3: 	goto sub_1dfa3;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}

