/* PLEASE DO NOT MODIFY THIS FILE. ALL CHANGES WILL BE LOST! LOOK FOR README FOR DETAILS */

/* 
 *
 */

                #include "iplay.h"

                

 bool _group1(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group1:
    _begin:
_moduleread:
	// 33 
cs=0x1a2;eip=0x000000; 	X(PUSH(ds));	// 35 push    ds ;~ 01A2:0000
cs=0x1a2;eip=0x000001; 	X(PUSH(dx));	// 36 push    dx ;~ 01A2:0001
cs=0x1a2;eip=0x000002; 	X(PUSH(cs));	// 37 push    cs ;~ 01A2:0002
cs=0x1a2;eip=0x000003; 	J(CALL(_snd_offx,0));	// 38 call    near ptr _snd_offx ;~ 01A2:0003
cs=0x1a2;eip=0x000006; 	X(PUSH(cs));	// 39 push    cs ;~ 01A2:0006
cs=0x1a2;eip=0x000007; 	J(CALL(_memfree_125da,0));	// 40 call    near ptr _memfree_125DA ;~ 01A2:0007
cs=0x1a2;eip=0x00000a; 	X(POP(dx));	// 41 pop     dx ;~ 01A2:000A
cs=0x1a2;eip=0x00000b; 	T(MOV(ax, 0x3D00));	// 42 mov     ax, 3D00h ;~ 01A2:000B
cs=0x1a2;eip=0x00000e; 	S(_INT(0x21));	// 43 int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE ;~ 01A2:000E
cs=0x1a2;eip=0x000010; 	T(MOV(bx, seg_offset(seg003)));	// 47 mov     bx, seg seg003 ;~ 01A2:0010
cs=0x1a2;eip=0x000013; 	T(MOV(ds, bx));	// 48 mov     ds, bx ;~ 01A2:0013
cs=0x1a2;eip=0x000015; 	X(MOV(_savesp_245d0, sp));	// 50 mov     _savesp_245D0, sp ;~ 01A2:0015
cs=0x1a2;eip=0x000019; 	X(MOV(_fhandle_module, ax));	// 51 mov     _fhandle_module, ax ;~ 01A2:0019
cs=0x1a2;eip=0x00001c; 	T(MOV(dx, offset(seg003,_emodulenotfound)));	// 52 mov     dx, offset _eModuleNotFound ; "Module not found\r\n" ;~ 01A2:001C
cs=0x1a2;eip=0x00001f; 	T(MOV(ax, 0x0FFFF));	// 53 mov     ax, 0FFFFh ;~ 01A2:001F
cs=0x1a2;eip=0x000022; 	J(JC(_lfreaderr));	// 54 jb      short _lfreaderr ;~ 01A2:0022
cs=0x1a2;eip=0x000024; 	J(CALL(_ems_save_mapctx,0));	// 55 call    _ems_save_mapctx ;~ 01A2:0024
cs=0x1a2;eip=0x000027; 	T(CLD);	// 56 cld ;~ 01A2:0027
cs=0x1a2;eip=0x000028; 	X(MOV(byte_2461b, 0));	// 57 mov     byte_2461B, 0 ;~ 01A2:0028
cs=0x1a2;eip=0x00002d; 	X(MOV(word_24662, 0));	// 58 mov     word_24662, 0 ;~ 01A2:002D
cs=0x1a2;eip=0x000033; 	T(MOV(dx, offset(seg003,_chrin)));	// 59 mov     dx, offset _chrin ;~ 01A2:0033
cs=0x1a2;eip=0x000036; 	T(MOV(cx, 1084));	// 60 mov     cx, 1084 ;~ 01A2:0036
cs=0x1a2;eip=0x000039; 	J(CALL(_dosfread,0));	// 61 call    _dosfread ;~ 01A2:0039
cs=0x1a2;eip=0x00003c; 	X(PUSH(cs));	// 62 push    cs ;~ 01A2:003C
cs=0x1a2;eip=0x00003d; 	J(CALL(_clean_11c43,0));	// 63 call    near ptr _clean_11C43 ;~ 01A2:003D
cs=0x1a2;eip=0x000040; 	T(MOV(bx, offset(seg003,off_25326)));	// 64 mov     bx, offset off_25326 ;~ 01A2:0040
cs=0x1a2;eip=0x000043; 	T(MOV(dl, 23));	// 65 mov     dl, 23 ;~ 01A2:0043
loc_10045:
	// 4369 
cs=0x1a2;eip=0x000045; 	T(MOVZX(cx, *(raddr(ds,bx+4))));	// 68 movzx   cx, byte ptr [bx+4] ;~ 01A2:0045
cs=0x1a2;eip=0x000049; 	T(MOV(di, offset(seg003,_chrin)));	// 69 mov     di, offset _chrin ;~ 01A2:0049
cs=0x1a2;eip=0x00004c; 	T(ADD(di, *(dw*)(raddr(ds,bx+2))));	// 70 add     di, [bx+2] ;~ 01A2:004C
cs=0x1a2;eip=0x00004f; 	T(si = bx+5);	// 71 lea     si, [bx+5] ;~ 01A2:004F
cs=0x1a2;eip=0x000052; 	T(MOV(ax, *(dw*)(raddr(ds,bx))));	// 72 mov     ax, [bx] ;~ 01A2:0052
cs=0x1a2;eip=0x000054; 	T(MOV(bx, si));	// 73 mov     bx, si ;~ 01A2:0054
cs=0x1a2;eip=0x000056; 	T(ADD(bx, cx));	// 74 add     bx, cx ;~ 01A2:0056
cs=0x1a2;eip=0x000058; 	T(CLD);	// 75 cld ;~ 01A2:0058
	// 76 repe cmpsb ;~ 01A2:0059
cs=0x1a2;eip=0x000059; 	T(	REPE CMPSB);	// 76 repe cmpsb ;~ 01A2:0059
cs=0x1a2;eip=0x00005b; 	J(JZ(loc_10064));	// 77 jz      short loc_10064 ;~ 01A2:005B
cs=0x1a2;eip=0x00005d; 	T(DEC(dl));	// 78 dec     dl ;~ 01A2:005D
cs=0x1a2;eip=0x00005f; 	J(JNZ(loc_10045));	// 79 jnz     short loc_10045 ;~ 01A2:005F
cs=0x1a2;eip=0x000061; 	T(MOV(ax, m2c::k_mod_n_t_module));	// 80 mov     ax, offset _mod_n_t_module ;~ 01A2:0061
loc_10064:
	// 4370 
cs=0x1a2;eip=0x000064; 	X(MOV(byte_24665, 1));	// 83 mov     byte_24665, 1 ;~ 01A2:0064
cs=0x1a2;eip=0x000069; 	J(CALL(__dispatch_call,ax));	// 84 call    ax ;~ 01A2:0069
cs=0x1a2;eip=0x00006b; 	T(MOV(bx, _fhandle_module));	// 85 mov     bx, _fhandle_module ;~ 01A2:006B
cs=0x1a2;eip=0x00006f; 	T(MOV(ah, 0x3E));	// 86 mov     ah, 3Eh ;~ 01A2:006F
cs=0x1a2;eip=0x000071; 	S(_INT(0x21));	// 87 int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE ;~ 01A2:0071
cs=0x1a2;eip=0x000073; 	X(ADC(word_24662, 0));	// 89 adc     word_24662, 0 ;~ 01A2:0073
cs=0x1a2;eip=0x000078; 	J(CALL(_ems_restore_mapctx,0));	// 90 call    _ems_restore_mapctx ;~ 01A2:0078
cs=0x1a2;eip=0x00007b; 	T(MOVZX(ax, byte_2461b));	// 91 movzx   ax, byte_2461B ;~ 01A2:007B
cs=0x1a2;eip=0x000080; 	T(INC(ax));	// 92 inc     ax ;~ 01A2:0080
cs=0x1a2;eip=0x000081; 	T(CMP(ax, word_245d4));	// 93 cmp     ax, word_245D4 ;~ 01A2:0081
cs=0x1a2;eip=0x000085; 	J(JBE(loc_1008a));	// 94 jbe     short loc_1008A ;~ 01A2:0085
cs=0x1a2;eip=0x000087; 	T(MOV(ax, word_245d4));	// 95 mov     ax, word_245D4 ;~ 01A2:0087
loc_1008a:
	// 4371 
cs=0x1a2;eip=0x00008a; 	X(PUSH(cs));	// 98 push    cs ;~ 01A2:008A
cs=0x1a2;eip=0x00008b; 	J(CALL(sub_12b83,0));	// 99 call    near ptr sub_12B83 ;~ 01A2:008B
cs=0x1a2;eip=0x00008e; 	T(MOV(si, offset(seg003,dword_27bc8)));	// 100 mov     si, offset dword_27BC8 ;~ 01A2:008E
cs=0x1a2;eip=0x000091; 	X(PUSH(cs));	// 101 push    cs ;~ 01A2:0091
cs=0x1a2;eip=0x000092; 	J(CALL(sub_12b18,0));	// 102 call    near ptr sub_12B18 ;~ 01A2:0092
cs=0x1a2;eip=0x000095; 	T(XOR(ax, ax));	// 103 xor     ax, ax ;~ 01A2:0095
cs=0x1a2;eip=0x000097; 	X(POP(ds));	// 104 pop     ds ;~ 01A2:0097
cs=0x1a2;eip=0x000098; 	J(RETF(0));	// 105 retf ;~ 01A2:0098
loc_10099:
	// 4372 
cs=0x1a2;eip=0x000099; 	T(MOV(dx, offset(seg003,_anotenoughmemory)));	// 110 mov     dx, offset _aNotEnoughMemory ; "Not enough Memory available\r\n" ;~ 01A2:0099
cs=0x1a2;eip=0x00009c; 	T(MOV(ax, 0x0FFFE));	// 111 mov     ax, 0FFFEh ;~ 01A2:009C
_lfreaderr:
	// 4373 
cs=0x1a2;eip=0x00009f; 	X(PUSH(ax));	// 115 push    ax ;~ 01A2:009F
cs=0x1a2;eip=0x0000a0; 	X(PUSH(dx));	// 116 push    dx ;~ 01A2:00A0
cs=0x1a2;eip=0x0000a1; 	T(MOV(bx, _fhandle_module));	// 117 mov     bx, _fhandle_module ;~ 01A2:00A1
cs=0x1a2;eip=0x0000a5; 	T(MOV(ah, 0x3E));	// 118 mov     ah, 3Eh ;~ 01A2:00A5
cs=0x1a2;eip=0x0000a7; 	S(_INT(0x21));	// 119 int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE ;~ 01A2:00A7
cs=0x1a2;eip=0x0000a9; 	J(CALL(_ems_restore_mapctx,0));	// 121 call    _ems_restore_mapctx ;~ 01A2:00A9
cs=0x1a2;eip=0x0000ac; 	X(PUSH(cs));	// 122 push    cs ;~ 01A2:00AC
cs=0x1a2;eip=0x0000ad; 	J(CALL(_memfree_125da,0));	// 123 call    near ptr _memfree_125DA ;~ 01A2:00AD
cs=0x1a2;eip=0x0000b0; 	T(MOV(ax, ds));	// 124 mov     ax, ds ;~ 01A2:00B0
cs=0x1a2;eip=0x0000b2; 	T(MOV(fs, ax));	// 125 mov     fs, ax ;~ 01A2:00B2
cs=0x1a2;eip=0x0000b4; 	X(POP(dx));	// 127 pop     dx ;~ 01A2:00B4
cs=0x1a2;eip=0x0000b5; 	X(POP(ax));	// 128 pop     ax ;~ 01A2:00B5
assert(0);
cs=0x1a2;eip=0x0000b6; 	T(MOV(sp, _savesp_245d0));	// 129 mov     sp, _savesp_245D0 ;~ 01A2:00B6
cs=0x1a2;eip=0x0000ba; 	X(POP(ds));	// 130 pop     ds ;~ 01A2:00BA
cs=0x1a2;eip=0x0000bb; 	T(STC);	// 131 stc ;~ 01A2:00BB
cs=0x1a2;eip=0x0000bc; 	J(RETF(0));	// 132 retf ;~ 01A2:00BC
_mod_n_t_module:
	// 139 
cs=0x1a2;eip=0x0000bd; 	X(MOV(_module_type_text, 0x2E542E4E));	// 140 mov     _module_type_text, 2E542E4Eh ;~ 01A2:00BD
cs=0x1a2;eip=0x0000c6; 	X(MOV(word_245d2, 0x0F));	// 141 mov     word_245D2, 0Fh ;~ 01A2:00C6
cs=0x1a2;eip=0x0000cc; 	X(MOV(word_245d4, 4));	// 142 mov     word_245D4, 4 ;~ 01A2:00CC
cs=0x1a2;eip=0x0000d2; 	T(MOV(si, offset(seg003,byte_306de)));	// 143 mov     si, offset byte_306DE ;~ 01A2:00D2
cs=0x1a2;eip=0x0000d5; 	J(CALL(_mod_1021e,0));	// 144 call    _mod_1021E ;~ 01A2:00D5
cs=0x1a2;eip=0x0000d8; 	J(CALL(_mod_102f5,0));	// 145 call    _mod_102F5 ;~ 01A2:00D8
cs=0x1a2;eip=0x0000db; 	T(MOV(dx, 0x258));	// 146 mov     dx, 258h ;~ 01A2:00DB
cs=0x1a2;eip=0x0000de; 	T(XOR(cx, cx));	// 147 xor     cx, cx ;~ 01A2:00DE
cs=0x1a2;eip=0x0000e0; 	T(MOV(bx, _fhandle_module));	// 148 mov     bx, _fhandle_module ;~ 01A2:00E0
cs=0x1a2;eip=0x0000e4; 	T(MOV(ax, 0x4200));	// 149 mov     ax, 4200h ;~ 01A2:00E4
cs=0x1a2;eip=0x0000e7; 	S(_INT(0x21));	// 150 int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK) ;~ 01A2:00E7
cs=0x1a2;eip=0x0000e9; 	X(ADC(word_24662, 0));	// 152 adc     word_24662, 0 ;~ 01A2:00E9
cs=0x1a2;eip=0x0000ee; 	J(JMP(loc_101b7));	// 153 jmp     loc_101B7 ;~ 01A2:00EE
_mod_flt8_module:
	// 4374 
cs=0x1a2;eip=0x0000f1; 	X(MOV(_module_type_text, 0x38544C46));	// 157 mov     _module_type_text, 38544C46h ; FLT8 ;~ 01A2:00F1
cs=0x1a2;eip=0x0000fa; 	X(MOV(_moduleflag_246d0, 0x3));	// 158 mov     _moduleflag_246D0, 11b ;~ 01A2:00FA
cs=0x1a2;eip=0x000100; 	X(MOV(word_245d2, 0x1F));	// 159 mov     word_245D2, 1Fh ;~ 01A2:0100
cs=0x1a2;eip=0x000106; 	X(MOV(word_245d4, 8));	// 160 mov     word_245D4, 8 ;~ 01A2:0106
cs=0x1a2;eip=0x00010c; 	T(MOV(si, offset(seg003,byte_308be)));	// 161 mov     si, offset byte_308BE ;~ 01A2:010C
cs=0x1a2;eip=0x00010f; 	J(CALL(_mod_1021e,0));	// 162 call    _mod_1021E ;~ 01A2:010F
cs=0x1a2;eip=0x000112; 	T(MOV(si, offset(seg003,byte_27fe8)));	// 163 mov     si, offset byte_27FE8 ;~ 01A2:0112
cs=0x1a2;eip=0x000115; 	T(MOV(cx, 0x80));	// 164 mov     cx, 80h ; '€' ;~ 01A2:0115
loc_10118:
	// 4375 
cs=0x1a2;eip=0x000118; 	X(SHR(*(raddr(ds,si)), 1));	// 167 shr     byte ptr [si], 1 ;~ 01A2:0118
cs=0x1a2;eip=0x00011a; 	T(INC(si));	// 168 inc     si ;~ 01A2:011A
cs=0x1a2;eip=0x00011b; 	T(DEC(cx));	// 169 dec     cx ;~ 01A2:011B
cs=0x1a2;eip=0x00011c; 	J(JNZ(loc_10118));	// 170 jnz     short loc_10118 ;~ 01A2:011C
cs=0x1a2;eip=0x00011e; 	J(CALL(_mod_1024a,0));	// 171 call    _mod_1024A ;~ 01A2:011E
cs=0x1a2;eip=0x000121; 	J(CALL(_mod_102f5,0));	// 172 call    _mod_102F5 ;~ 01A2:0121
cs=0x1a2;eip=0x000124; 	J(CALL(_mod_read_10311,0));	// 173 call    _mod_read_10311 ;~ 01A2:0124
cs=0x1a2;eip=0x000127; 	J(CALL(_mod_readfile_11f4e,0));	// 174 call    near ptr _mod_readfile_11F4E ;~ 01A2:0127
cs=0x1a2;eip=0x00012a; 	J(JC(loc_10099));	// 175 jb      loc_10099 ;~ 01A2:012A
cs=0x1a2;eip=0x00012e; 	J(RETN(0));	// 176 retn ;~ 01A2:012E
_mod_tdz_module:
	// 4376 
cs=0x1a2;eip=0x00012f; 	T(MOV(al, byte_30943));	// 180 mov     al, byte_30943 ;~ 01A2:012F
cs=0x1a2;eip=0x000132; 	J(JMP(loc_10137));	// 181 jmp     short loc_10137 ;~ 01A2:0132
_mod_chn_module:
	// 4377 
cs=0x1a2;eip=0x000134; 	T(MOV(al, byte_30940));	// 185 mov     al, byte_30940 ;~ 01A2:0134
loc_10137:
	// 4378 
cs=0x1a2;eip=0x000137; 	T(XOR(ah, ah));	// 188 xor     ah, ah ;~ 01A2:0137
cs=0x1a2;eip=0x000139; 	X(INC(word_24662));	// 189 inc     word_24662 ;~ 01A2:0139
cs=0x1a2;eip=0x00013d; 	T(SUB(al, 0x30));	// 190 sub     al, 30h ; '0' ;~ 01A2:013D
cs=0x1a2;eip=0x00013f; 	J(JBE(locret_10154));	// 191 jbe     short locret_10154 ;~ 01A2:013F
cs=0x1a2;eip=0x000141; 	T(CMP(al, 9));	// 192 cmp     al, 9 ;~ 01A2:0141
cs=0x1a2;eip=0x000143; 	J(JA(locret_10154));	// 193 ja      short locret_10154 ;~ 01A2:0143
cs=0x1a2;eip=0x000145; 	X(DEC(word_24662));	// 194 dec     word_24662 ;~ 01A2:0145
cs=0x1a2;eip=0x000149; 	X(MOV(word_245d2, 0x1F));	// 195 mov     word_245D2, 1Fh ;~ 01A2:0149
cs=0x1a2;eip=0x00014f; 	X(MOV(word_245d4, ax));	// 196 mov     word_245D4, ax ;~ 01A2:014F
cs=0x1a2;eip=0x000152; 	J(JMP(loc_101a6));	// 197 jmp     short loc_101A6 ;~ 01A2:0152
locret_10154:
	// 4379 
cs=0x1a2;eip=0x000154; 	J(RETN(0));	// 202 retn ;~ 01A2:0154
_mod_ch_module:
	// 4380 
cs=0x1a2;eip=0x000155; 	X(INC(word_24662));	// 206 inc     word_24662 ;~ 01A2:0155
cs=0x1a2;eip=0x000159; 	T(MOVZX(ax, byte_30940));	// 207 movzx   ax, byte_30940 ;~ 01A2:0159
cs=0x1a2;eip=0x00015e; 	T(SUB(al, '0'));	// 208 sub     al, '0' ;~ 01A2:015E
cs=0x1a2;eip=0x000160; 	J(JC(locret_10154));	// 209 jb      short locret_10154 ;~ 01A2:0160
cs=0x1a2;eip=0x000162; 	T(CMP(al, 9));	// 210 cmp     al, 9 ;~ 01A2:0162
cs=0x1a2;eip=0x000164; 	J(JA(locret_10154));	// 211 ja      short locret_10154 ;~ 01A2:0164
cs=0x1a2;eip=0x000166; 	T(IMUL3_2(dx,ax,10));	// 212 imul    dx, ax, 10 ;~ 01A2:0166
cs=0x1a2;eip=0x000169; 	T(MOV(al, unk_30941));	// 213 mov     al, byte ptr unk_30941 ;~ 01A2:0169
cs=0x1a2;eip=0x00016c; 	T(SUB(al, '0'));	// 214 sub     al, '0' ;~ 01A2:016C
cs=0x1a2;eip=0x00016e; 	J(JC(locret_10154));	// 215 jb      short locret_10154 ;~ 01A2:016E
cs=0x1a2;eip=0x000170; 	T(CMP(al, 9));	// 216 cmp     al, 9 ;~ 01A2:0170
cs=0x1a2;eip=0x000172; 	J(JA(locret_10154));	// 217 ja      short locret_10154 ;~ 01A2:0172
cs=0x1a2;eip=0x000174; 	T(ADD(ax, dx));	// 218 add     ax, dx ;~ 01A2:0174
cs=0x1a2;eip=0x000176; 	J(JZ(locret_10154));	// 219 jz      short locret_10154 ;~ 01A2:0176
cs=0x1a2;eip=0x000178; 	T(CMP(ax, ' '));	// 220 cmp     ax, ' ' ;~ 01A2:0178
cs=0x1a2;eip=0x00017b; 	J(JA(locret_10154));	// 221 ja      short locret_10154 ;~ 01A2:017B
cs=0x1a2;eip=0x00017d; 	X(DEC(word_24662));	// 222 dec     word_24662 ;~ 01A2:017D
cs=0x1a2;eip=0x000181; 	X(MOV(word_245d2, 0x1F));	// 223 mov     word_245D2, 1Fh ;~ 01A2:0181
cs=0x1a2;eip=0x000187; 	X(MOV(word_245d4, ax));	// 224 mov     word_245D4, ax ;~ 01A2:0187
cs=0x1a2;eip=0x00018a; 	J(JMP(loc_101a6));	// 225 jmp     short loc_101A6 ;~ 01A2:018A
_mod_cd81_module:
	// 4381 
cs=0x1a2;eip=0x00018c; 	X(MOV(word_245d2, 0x1F));	// 230 mov     word_245D2, 1Fh ;~ 01A2:018C
cs=0x1a2;eip=0x000192; 	X(MOV(word_245d4, 8));	// 231 mov     word_245D4, 8 ;~ 01A2:0192
cs=0x1a2;eip=0x000198; 	J(JMP(loc_101a6));	// 232 jmp     short loc_101A6 ;~ 01A2:0198
_mod_mk_module:
	// 4382 
cs=0x1a2;eip=0x00019a; 	X(MOV(word_245d2, 0x1F));	// 237 mov     word_245D2, 1Fh ;~ 01A2:019A
cs=0x1a2;eip=0x0001a0; 	X(MOV(word_245d4, 4));	// 238 mov     word_245D4, 4 ;~ 01A2:01A0
loc_101a6:
	// 4383 
cs=0x1a2;eip=0x0001a6; 	T(MOV(eax, *(dd*)((&byte_30940))));	// 242 mov     eax, dword ptr byte_30940 ;~ 01A2:01A6
cs=0x1a2;eip=0x0001aa; 	X(MOV(_module_type_text, eax));	// 243 mov     _module_type_text, eax ;~ 01A2:01AA
cs=0x1a2;eip=0x0001ae; 	T(MOV(si, offset(seg003,byte_308be)));	// 244 mov     si, offset byte_308BE ;~ 01A2:01AE
cs=0x1a2;eip=0x0001b1; 	J(CALL(_mod_1021e,0));	// 245 call    _mod_1021E ;~ 01A2:01B1
cs=0x1a2;eip=0x0001b4; 	J(CALL(_mod_102f5,0));	// 246 call    _mod_102F5 ;~ 01A2:01B4
loc_101b7:
	// 4384 
cs=0x1a2;eip=0x0001b7; 	J(CALL(_mod_1024a,0));	// 249 call    _mod_1024A ;~ 01A2:01B7
cs=0x1a2;eip=0x0001ba; 	T(CMP(_module_type_text, 0x2E4B2E4D));	// 250 cmp     _module_type_text, 2E4B2E4Dh ; M.K. ;~ 01A2:01BA
cs=0x1a2;eip=0x0001c3; 	J(JNZ(loc_10213));	// 251 jnz     short loc_10213 ;~ 01A2:01C3
cs=0x1a2;eip=0x0001c5; 	T(XOR(dx, dx));	// 252 xor     dx, dx ;~ 01A2:01C5
cs=0x1a2;eip=0x0001c7; 	T(XOR(cx, cx));	// 253 xor     cx, cx ;~ 01A2:01C7
cs=0x1a2;eip=0x0001c9; 	T(MOV(bx, _fhandle_module));	// 254 mov     bx, _fhandle_module ;~ 01A2:01C9
cs=0x1a2;eip=0x0001cd; 	T(MOV(ax, 0x4202));	// 255 mov     ax, 4202h ;~ 01A2:01CD
cs=0x1a2;eip=0x0001d0; 	S(_INT(0x21));	// 256 int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK) ;~ 01A2:01D0
cs=0x1a2;eip=0x0001d2; 	T(SHL(edx, 0x10));	// 258 shl     edx, 10h ;~ 01A2:01D2
cs=0x1a2;eip=0x0001d6; 	T(MOV(dx, ax));	// 259 mov     dx, ax ;~ 01A2:01D6
cs=0x1a2;eip=0x0001d8; 	X(PUSH(edx));	// 260 push    edx ;~ 01A2:01D8
cs=0x1a2;eip=0x0001da; 	T(MOV(dx, 1084));	// 261 mov     dx, 1084 ;~ 01A2:01DA
cs=0x1a2;eip=0x0001dd; 	T(XOR(cx, cx));	// 262 xor     cx, cx ;~ 01A2:01DD
cs=0x1a2;eip=0x0001df; 	T(MOV(bx, _fhandle_module));	// 263 mov     bx, _fhandle_module ;~ 01A2:01DF
cs=0x1a2;eip=0x0001e3; 	T(MOV(ax, 0x4200));	// 264 mov     ax, 4200h ;~ 01A2:01E3
cs=0x1a2;eip=0x0001e6; 	S(_INT(0x21));	// 265 int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK) ;~ 01A2:01E6
cs=0x1a2;eip=0x0001e8; 	X(POP(edx));	// 267 pop     edx ;~ 01A2:01E8
cs=0x1a2;eip=0x0001ea; 	T(MOVZX(eax, word_245f2));	// 268 movzx   eax, word_245F2 ;~ 01A2:01EA
cs=0x1a2;eip=0x0001f0; 	T(SHL(eax, 0x0B));	// 269 shl     eax, 0Bh ;~ 01A2:01F0
cs=0x1a2;eip=0x0001f4; 	T(ADD(eax, dword_245c4));	// 270 add     eax, dword_245C4 ;~ 01A2:01F4
cs=0x1a2;eip=0x0001f9; 	T(ADD(eax, 1084));	// 271 add     eax, 1084 ;~ 01A2:01F9
cs=0x1a2;eip=0x0001ff; 	T(CMP(eax, edx));	// 272 cmp     eax, edx ;~ 01A2:01FF
cs=0x1a2;eip=0x000202; 	J(JNZ(loc_10213));	// 273 jnz     short loc_10213 ;~ 01A2:0202
cs=0x1a2;eip=0x000204; 	X(MOV(word_245d4, 8));	// 274 mov     word_245D4, 8 ;~ 01A2:0204
cs=0x1a2;eip=0x00020a; 	X(MOV(_module_type_text, 0x20574F57));	// 275 mov     _module_type_text, 20574F57h ; WOW ;~ 01A2:020A
loc_10213:
	// 4385 
cs=0x1a2;eip=0x000213; 	J(CALL(_mod_read_10311,0));	// 279 call    _mod_read_10311 ;~ 01A2:0213
cs=0x1a2;eip=0x000216; 	J(CALL(_mod_readfile_11f4e,0));	// 280 call    near ptr _mod_readfile_11F4E ;~ 01A2:0216
cs=0x1a2;eip=0x000219; 	J(JC(loc_10099));	// 281 jb      loc_10099 ;~ 01A2:0219
cs=0x1a2;eip=0x00021d; 	J(RETN(0));	// 282 retn ;~ 01A2:021D
__2stm_module:
	// 531 
cs=0x1a2;eip=0x0003eb; 	X(MOV(_module_type_text, 0x4D545332));	// 532 mov     _module_type_text, 4D545332h ;~ 01A2:03EB
cs=0x1a2;eip=0x0003f4; 	J(JMP(loc_103ff));	// 533 jmp     short loc_103FF ;~ 01A2:03F4
_stm_module:
	// 4401 
cs=0x1a2;eip=0x0003f6; 	X(MOV(_module_type_text, 0x204D5453));	// 537 mov     _module_type_text, 204D5453h ; STM ;~ 01A2:03F6
loc_103ff:
	// 4402 
cs=0x1a2;eip=0x0003ff; 	X(MOV(_moduleflag_246d0, 0x8));	// 540 mov     _moduleflag_246D0, 1000b ;~ 01A2:03FF
cs=0x1a2;eip=0x000405; 	X(MOV(word_245d4, 4));	// 541 mov     word_245D4, 4 ;~ 01A2:0405
cs=0x1a2;eip=0x00040b; 	X(MOV(word_245d2, 0x1F));	// 542 mov     word_245D2, 1Fh ;~ 01A2:040B
cs=0x1a2;eip=0x000411; 	X(MOV(_freq_245de, 8448));	// 543 mov     _freq_245DE, 8448 ;~ 01A2:0411
cs=0x1a2;eip=0x000417; 	T(MOV(al, 0x60));	// 544 mov     al, 60h ; '`' ;~ 01A2:0417
cs=0x1a2;eip=0x000419; 	J(CALL(sub_13e9b,0));	// 545 call    sub_13E9B ;~ 01A2:0419
cs=0x1a2;eip=0x00041c; 	X(MOV(byte_24679, ah));	// 546 mov     byte_24679, ah ;~ 01A2:041C
cs=0x1a2;eip=0x000420; 	X(MOV(byte_2467a, al));	// 547 mov     byte_2467A, al ;~ 01A2:0420
cs=0x1a2;eip=0x000423; 	T(MOVZX(ax, byte_30529));	// 548 movzx   ax, byte_30529 ;~ 01A2:0423
cs=0x1a2;eip=0x000428; 	X(MOV(word_245f2, ax));	// 549 mov     word_245F2, ax ;~ 01A2:0428
cs=0x1a2;eip=0x00042b; 	T(MOV(ax, ds));	// 550 mov     ax, ds ;~ 01A2:042B
cs=0x1a2;eip=0x00042d; 	T(MOV(es, ax));	// 551 mov     es, ax ;~ 01A2:042D
cs=0x1a2;eip=0x00042f; 	T(MOV(si, offset(seg003,_chrin)));	// 552 mov     si, offset _chrin ; in ;~ 01A2:042F
cs=0x1a2;eip=0x000432; 	T(MOV(di, offset(seg003,out_)));	// 553 mov     di, offset out_ ; "                                " ;~ 01A2:0432
cs=0x1a2;eip=0x000435; 	T(MOV(cx, 0x14));	// 554 mov     cx, 14h         ; count ;~ 01A2:0435
cs=0x1a2;eip=0x000438; 	J(CALL(_copy_printable,0));	// 555 call    _copy_printable ;~ 01A2:0438
cs=0x1a2;eip=0x00043b; 	T(MOV(si, offset(seg003,_my_in)));	// 556 mov     si, offset _my_in ; in ;~ 01A2:043B
cs=0x1a2;eip=0x00043e; 	T(MOV(di, offset(seg003,_myout)));	// 557 mov     di, offset _myout ; out ;~ 01A2:043E
cs=0x1a2;eip=0x000441; 	T(MOV(cx, word_245d2));	// 558 mov     cx, word_245D2 ;~ 01A2:0441
loc_10445:
	// 4403 
cs=0x1a2;eip=0x000445; 	X(PUSH(cx));	// 561 push    cx ;~ 01A2:0445
cs=0x1a2;eip=0x000446; 	T(MOV(cx, 0x0C));	// 562 mov     cx, 0Ch         ; count ;~ 01A2:0446
cs=0x1a2;eip=0x000449; 	J(CALL(_copy_printable,0));	// 563 call    _copy_printable ;~ 01A2:0449
cs=0x1a2;eip=0x00044c; 	X(POP(cx));	// 564 pop     cx ;~ 01A2:044C
cs=0x1a2;eip=0x00044d; 	T(MOVZX(eax, *(dw*)(raddr(ds,si+0x10))));	// 565 movzx   eax, word ptr [si+10h] ;~ 01A2:044D
cs=0x1a2;eip=0x000452; 	T(MOV(edx, eax));	// 566 mov     edx, eax ;~ 01A2:0452
cs=0x1a2;eip=0x000455; 	T(ADD(eax, 0x0F));	// 567 add     eax, 0Fh ;~ 01A2:0455
cs=0x1a2;eip=0x000459; 	T(AND(al, 0x0F0));	// 568 and     al, 0F0h ;~ 01A2:0459
cs=0x1a2;eip=0x00045b; 	T(CMP(eax, 0x100000));	// 569 cmp     eax, 100000h ;~ 01A2:045B
cs=0x1a2;eip=0x000461; 	T(CMC);	// 570 cmc ;~ 01A2:0461
cs=0x1a2;eip=0x000462; 	X(ADC(word_24662, 0));	// 571 adc     word_24662, 0 ;~ 01A2:0462
cs=0x1a2;eip=0x000467; 	X(MOV(*(dd*)(raddr(ds,di+0x20)), eax));	// 572 mov     [di+20h], eax ;~ 01A2:0467
cs=0x1a2;eip=0x00046b; 	X(ADD(dword_245c4, eax));	// 573 add     dword_245C4, eax ;~ 01A2:046B
cs=0x1a2;eip=0x000470; 	T(MOVZX(eax, *(dw*)(raddr(ds,si+0x0E))));	// 574 movzx   eax, word ptr [si+0Eh] ;~ 01A2:0470
cs=0x1a2;eip=0x000475; 	T(SHL(eax, 4));	// 575 shl     eax, 4 ;~ 01A2:0475
cs=0x1a2;eip=0x000479; 	X(MOV(*(dd*)(raddr(ds,di+0x38)), eax));	// 576 mov     [di+38h], eax ;~ 01A2:0479
cs=0x1a2;eip=0x00047d; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x18))));	// 577 mov     ax, [si+18h] ;~ 01A2:047D
cs=0x1a2;eip=0x000480; 	T(OR(ax, ax));	// 578 or      ax, ax ;~ 01A2:0480
cs=0x1a2;eip=0x000482; 	J(JNZ(loc_10487));	// 579 jnz     short loc_10487 ;~ 01A2:0482
cs=0x1a2;eip=0x000484; 	T(MOV(ax, _freq_245de));	// 580 mov     ax, _freq_245DE ;~ 01A2:0484
loc_10487:
	// 4404 
cs=0x1a2;eip=0x000487; 	X(MOV(*(dw*)(raddr(ds,di+0x36)), ax));	// 583 mov     [di+36h], ax ;~ 01A2:0487
cs=0x1a2;eip=0x00048a; 	T(MOV(al, *(raddr(ds,si+0x16))));	// 584 mov     al, [si+16h] ;~ 01A2:048A
cs=0x1a2;eip=0x00048d; 	X(MOV(*(raddr(ds,di+0x3D)), al));	// 585 mov     [di+3Dh], al ;~ 01A2:048D
cs=0x1a2;eip=0x000490; 	T(MOVZX(ebx, *(dw*)(raddr(ds,si+0x12))));	// 586 movzx   ebx, word ptr [si+12h] ;~ 01A2:0490
cs=0x1a2;eip=0x000495; 	X(MOV(*(dd*)(raddr(ds,di+0x24)), ebx));	// 587 mov     [di+24h], ebx ;~ 01A2:0495
cs=0x1a2;eip=0x000499; 	T(MOVZX(eax, *(dw*)(raddr(ds,si+0x14))));	// 588 movzx   eax, word ptr [si+14h] ;~ 01A2:0499
cs=0x1a2;eip=0x00049e; 	T(CMP(ax, 0x0FFFF));	// 589 cmp     ax, 0FFFFh ;~ 01A2:049E
cs=0x1a2;eip=0x0004a1; 	J(JNZ(loc_104b6));	// 590 jnz     short loc_104B6 ;~ 01A2:04A1
cs=0x1a2;eip=0x0004a3; 	T(XOR(eax, eax));	// 591 xor     eax, eax ;~ 01A2:04A3
cs=0x1a2;eip=0x0004a6; 	X(MOV(*(dd*)(raddr(ds,di+0x24)), eax));	// 592 mov     [di+24h], eax ;~ 01A2:04A6
cs=0x1a2;eip=0x0004aa; 	X(MOV(*(dd*)(raddr(ds,di+0x28)), eax));	// 593 mov     [di+28h], eax ;~ 01A2:04AA
cs=0x1a2;eip=0x0004ae; 	T(DEC(edx));	// 594 dec     edx ;~ 01A2:04AE
cs=0x1a2;eip=0x0004b0; 	X(MOV(*(dd*)(raddr(ds,di+0x2C)), edx));	// 595 mov     [di+2Ch], edx ;~ 01A2:04B0
cs=0x1a2;eip=0x0004b4; 	J(JMP(loc_104c7));	// 596 jmp     short loc_104C7 ;~ 01A2:04B4
loc_104b6:
	// 4405 
cs=0x1a2;eip=0x0004b6; 	X(MOV(*(dd*)(raddr(ds,di+0x2C)), eax));	// 600 mov     [di+2Ch], eax ;~ 01A2:04B6
cs=0x1a2;eip=0x0004ba; 	T(SUB(eax, ebx));	// 601 sub     eax, ebx ;~ 01A2:04BA
cs=0x1a2;eip=0x0004bd; 	T(INC(eax));	// 602 inc     eax ;~ 01A2:04BD
cs=0x1a2;eip=0x0004bf; 	X(MOV(*(dd*)(raddr(ds,di+0x28)), eax));	// 603 mov     [di+28h], eax ;~ 01A2:04BF
cs=0x1a2;eip=0x0004c3; 	X(OR(*(raddr(ds,di+0x3C)), 8));	// 604 or      byte ptr [di+3Ch], 8 ;~ 01A2:04C3
loc_104c7:
	// 4406 
cs=0x1a2;eip=0x0004c7; 	T(ADD(si, 0x20));	// 607 add     si, 20h ; ' ' ;~ 01A2:04C7
cs=0x1a2;eip=0x0004ca; 	T(ADD(di, 0x40));	// 608 add     di, 40h ; '@' ;~ 01A2:04CA
cs=0x1a2;eip=0x0004cd; 	T(DEC(cx));	// 609 dec     cx ;~ 01A2:04CD
cs=0x1a2;eip=0x0004ce; 	J(JNZ(loc_10445));	// 610 jnz     loc_10445 ;~ 01A2:04CE
cs=0x1a2;eip=0x0004d2; 	T(MOV(dx, offset(seg003,byte_27fe8)));	// 611 mov     dx, offset byte_27FE8 ;~ 01A2:04D2
cs=0x1a2;eip=0x0004d5; 	T(MOV(cx, 0x80));	// 612 mov     cx, 80h ; '€' ;~ 01A2:04D5
cs=0x1a2;eip=0x0004d8; 	T(MOV(eax, 0x410));	// 613 mov     eax, 410h ;~ 01A2:04D8
cs=0x1a2;eip=0x0004de; 	J(CALL(_dosseek,0));	// 614 call    _dosseek ;~ 01A2:04DE
cs=0x1a2;eip=0x0004e1; 	T(MOV(si, offset(seg003,byte_27fe8)));	// 615 mov     si, offset byte_27FE8 ;~ 01A2:04E1
cs=0x1a2;eip=0x0004e4; 	T(XOR(ax, ax));	// 616 xor     ax, ax ;~ 01A2:04E4
loc_104e6:
	// 4407 
cs=0x1a2;eip=0x0004e6; 	T(CMP(*(raddr(ds,si)), 0x63));	// 619 cmp     byte ptr [si], 63h ; 'c' ;~ 01A2:04E6
cs=0x1a2;eip=0x0004e9; 	J(JNC(loc_104f2));	// 620 jnb     short loc_104F2 ;~ 01A2:04E9
cs=0x1a2;eip=0x0004eb; 	T(INC(ax));	// 621 inc     ax ;~ 01A2:04EB
cs=0x1a2;eip=0x0004ec; 	T(INC(si));	// 622 inc     si ;~ 01A2:04EC
cs=0x1a2;eip=0x0004ed; 	T(CMP(ax, 0x80));	// 623 cmp     ax, 80h ; '€' ;~ 01A2:04ED
cs=0x1a2;eip=0x0004f0; 	J(JC(loc_104e6));	// 624 jb      short loc_104E6 ;~ 01A2:04F0
loc_104f2:
	// 4408 
cs=0x1a2;eip=0x0004f2; 	X(MOV(word_245fa, ax));	// 627 mov     word_245FA, ax ;~ 01A2:04F2
cs=0x1a2;eip=0x0004f5; 	T(MOV(cx, word_245f2));	// 628 mov     cx, word_245F2 ;~ 01A2:04F5
loc_104f9:
	// 4409 
cs=0x1a2;eip=0x0004f9; 	X(PUSH(cx));	// 631 push    cx ;~ 01A2:04F9
cs=0x1a2;eip=0x0004fa; 	T(MOV(dx, offset(seg003,_chrin)));	// 632 mov     dx, offset _chrin ;~ 01A2:04FA
cs=0x1a2;eip=0x0004fd; 	T(MOV(cx, 0x400));	// 633 mov     cx, 400h ;~ 01A2:04FD
cs=0x1a2;eip=0x000500; 	J(CALL(_dosfread,0));	// 634 call    _dosfread ;~ 01A2:0500
cs=0x1a2;eip=0x000503; 	J(CALL(_memalloc12k,0));	// 635 call    _memalloc12k ;~ 01A2:0503
cs=0x1a2;eip=0x000506; 	T(MOV(si, offset(seg003,_chrin)));	// 636 mov     si, offset _chrin ;~ 01A2:0506
cs=0x1a2;eip=0x000509; 	T(MOV(cx, 0x40));	// 637 mov     cx, 40h ; '@' ;~ 01A2:0509
loc_1050c:
	// 4410 
cs=0x1a2;eip=0x00050c; 	X(PUSH(cx));	// 640 push    cx ;~ 01A2:050C
cs=0x1a2;eip=0x00050d; 	T(MOV(cx, word_245d4));	// 641 mov     cx, word_245D4 ;~ 01A2:050D
cs=0x1a2;eip=0x000511; 	T(XOR(ch, ch));	// 642 xor     ch, ch ;~ 01A2:0511
loc_10513:
	// 4411 
cs=0x1a2;eip=0x000513; 	X(PUSH(cx));	// 645 push    cx ;~ 01A2:0513
cs=0x1a2;eip=0x000514; 	T(XOR(bx, bx));	// 646 xor     bx, bx ;~ 01A2:0514
cs=0x1a2;eip=0x000516; 	T(XOR(dx, dx));	// 647 xor     dx, dx ;~ 01A2:0516
cs=0x1a2;eip=0x000518; 	T(XOR(cl, cl));	// 648 xor     cl, cl ;~ 01A2:0518
cs=0x1a2;eip=0x00051a; 	T(MOV(al, *(raddr(ds,si))));	// 649 mov     al, [si] ;~ 01A2:051A
cs=0x1a2;eip=0x00051c; 	T(CMP(al, 0x0FE));	// 650 cmp     al, 0FEh ; 'þ' ;~ 01A2:051C
cs=0x1a2;eip=0x00051e; 	J(JZ(loc_10565));	// 651 jz      short loc_10565 ;~ 01A2:051E
cs=0x1a2;eip=0x000520; 	T(MOV(cl, 0x0FF));	// 652 mov     cl, 0FFh ;~ 01A2:0520
cs=0x1a2;eip=0x000522; 	T(CMP(al, 0x0FF));	// 653 cmp     al, 0FFh ;~ 01A2:0522
cs=0x1a2;eip=0x000524; 	J(JZ(loc_1052e));	// 654 jz      short loc_1052E ;~ 01A2:0524
cs=0x1a2;eip=0x000526; 	T(CMP(al, 0x0FB));	// 655 cmp     al, 0FBh ; 'û' ;~ 01A2:0526
cs=0x1a2;eip=0x000528; 	J(JNC(loc_10565));	// 656 jnb     short loc_10565 ;~ 01A2:0528
cs=0x1a2;eip=0x00052a; 	T(INC(al));	// 657 inc     al ;~ 01A2:052A
cs=0x1a2;eip=0x00052c; 	T(MOV(bl, al));	// 658 mov     bl, al ;~ 01A2:052C
loc_1052e:
	// 4412 
cs=0x1a2;eip=0x00052e; 	T(MOV(bh, *(raddr(ds,si+1))));	// 661 mov     bh, [si+1] ;~ 01A2:052E
cs=0x1a2;eip=0x000531; 	T(SHR(bh, 3));	// 662 shr     bh, 3 ;~ 01A2:0531
cs=0x1a2;eip=0x000534; 	T(MOV(ax, *(dw*)(raddr(ds,si+1))));	// 663 mov     ax, [si+1] ;~ 01A2:0534
cs=0x1a2;eip=0x000537; 	T(AND(ax, 0x0F007));	// 664 and     ax, 0F007h ;~ 01A2:0537
cs=0x1a2;eip=0x00053a; 	T(SHR(ah, 1));	// 665 shr     ah, 1 ;~ 01A2:053A
cs=0x1a2;eip=0x00053c; 	T(OR(al, ah));	// 666 or      al, ah ;~ 01A2:053C
cs=0x1a2;eip=0x00053e; 	T(CMP(al, 0x40));	// 667 cmp     al, 40h ; '@' ;~ 01A2:053E
cs=0x1a2;eip=0x000540; 	J(JBE(loc_10544));	// 668 jbe     short loc_10544 ;~ 01A2:0540
cs=0x1a2;eip=0x000542; 	T(MOV(al, 0x0FF));	// 669 mov     al, 0FFh ;~ 01A2:0542
loc_10544:
	// 4413 
cs=0x1a2;eip=0x000544; 	T(MOV(cl, al));	// 672 mov     cl, al ;~ 01A2:0544
cs=0x1a2;eip=0x000546; 	T(MOV(ax, *(dw*)(raddr(ds,si+2))));	// 673 mov     ax, [si+2] ;~ 01A2:0546
cs=0x1a2;eip=0x000549; 	T(AND(al, 0x0F));	// 674 and     al, 0Fh ;~ 01A2:0549
cs=0x1a2;eip=0x00054b; 	J(JZ(loc_10565));	// 675 jz      short loc_10565 ;~ 01A2:054B
cs=0x1a2;eip=0x00054d; 	T(CMP(al, 0x0A));	// 676 cmp     al, 0Ah ;~ 01A2:054D
cs=0x1a2;eip=0x00054f; 	J(JA(loc_10565));	// 677 ja      short loc_10565 ;~ 01A2:054F
cs=0x1a2;eip=0x000551; 	T(MOV(dh, ah));	// 678 mov     dh, ah ;~ 01A2:0551
cs=0x1a2;eip=0x000553; 	T(ROL(ebx, 0x10));	// 679 rol     ebx, 10h ;~ 01A2:0553
cs=0x1a2;eip=0x000557; 	T(MOV(bl, al));	// 680 mov     bl, al ;~ 01A2:0557
cs=0x1a2;eip=0x000559; 	T(AND(bx, 0x0F));	// 681 and     bx, 0Fh ;~ 01A2:0559
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00055c; 	T(MOV(dl, *((asc_1058c)+bx)));	// 682 mov     dl, byte ptr cs:asc_1058C[bx] ; "\x00\x18\v\r\n\x02\x01\x03\x04\a" ;~ 01A2:055C
cs=0x1a2;eip=0x000561; 	T(ROR(ebx, 0x10));	// 683 ror     ebx, 10h ;~ 01A2:0561
loc_10565:
	// 4414 
cs=0x1a2;eip=0x000565; 	J(CALL(sub_11ba6,0));	// 687 call    sub_11BA6 ;~ 01A2:0565
cs=0x1a2;eip=0x000568; 	T(ADD(si, 4));	// 688 add     si, 4 ;~ 01A2:0568
cs=0x1a2;eip=0x00056b; 	X(POP(cx));	// 689 pop     cx ;~ 01A2:056B
cs=0x1a2;eip=0x00056c; 	T(INC(ch));	// 690 inc     ch ;~ 01A2:056C
cs=0x1a2;eip=0x00056e; 	T(CMP(ch, cl));	// 691 cmp     ch, cl ;~ 01A2:056E
cs=0x1a2;eip=0x000570; 	J(JC(loc_10513));	// 692 jb      short loc_10513 ;~ 01A2:0570
cs=0x1a2;eip=0x000572; 	X(MOV(*(raddr(es,di)), 0));	// 693 mov     byte ptr es:[di], 0 ;~ 01A2:0572
cs=0x1a2;eip=0x000576; 	T(INC(di));	// 694 inc     di ;~ 01A2:0576
cs=0x1a2;eip=0x000577; 	X(POP(cx));	// 695 pop     cx ;~ 01A2:0577
cs=0x1a2;eip=0x000578; 	T(DEC(cx));	// 696 dec     cx ;~ 01A2:0578
cs=0x1a2;eip=0x000579; 	J(JNZ(loc_1050c));	// 697 jnz     short loc_1050C ;~ 01A2:0579
cs=0x1a2;eip=0x00057b; 	J(CALL(_mem_reallocx,0));	// 698 call    _mem_reallocx ;~ 01A2:057B
cs=0x1a2;eip=0x00057e; 	X(POP(cx));	// 699 pop     cx ;~ 01A2:057E
cs=0x1a2;eip=0x00057f; 	T(DEC(cx));	// 700 dec     cx ;~ 01A2:057F
cs=0x1a2;eip=0x000580; 	J(JNZ(loc_104f9));	// 701 jnz     loc_104F9 ;~ 01A2:0580
cs=0x1a2;eip=0x000584; 	J(CALL(_mod_readfile_11f4e,0));	// 702 call    near ptr _mod_readfile_11F4E ;~ 01A2:0584
cs=0x1a2;eip=0x000587; 	J(JC(loc_10099));	// 703 jb      loc_10099 ;~ 01A2:0587
cs=0x1a2;eip=0x00058b; 	J(RETN(0));	// 704 retn ;~ 01A2:058B
_s3m_module:
	// 714 
cs=0x1a2;eip=0x000597; 	X(MOV(_module_type_text, 0x204D3353));	// 715 mov     _module_type_text, 204D3353h ;~ 01A2:0597
cs=0x1a2;eip=0x0005a0; 	X(MOV(_moduleflag_246d0, 0x10));	// 716 mov     _moduleflag_246D0, 10000b ;~ 01A2:05A0
cs=0x1a2;eip=0x0005a6; 	X(MOV(byte_2467e, 1));	// 717 mov     byte_2467E, 1 ;~ 01A2:05A6
cs=0x1a2;eip=0x0005ab; 	X(MOV(byte_24673, 0x80));	// 718 mov     byte_24673, 80h ; '€' ;~ 01A2:05AB
cs=0x1a2;eip=0x0005b0; 	X(MOV(_freq_245de, 8363));	// 719 mov     _freq_245DE, 8363 ;~ 01A2:05B0
cs=0x1a2;eip=0x0005b6; 	X(MOV(byte_2461a, 2));	// 720 mov     byte_2461A, 2 ;~ 01A2:05B6
cs=0x1a2;eip=0x0005bb; 	T(CMP(word_30532, 2));	// 721 cmp     word_30532, 2 ;~ 01A2:05BB
cs=0x1a2;eip=0x0005c0; 	J(JNC(loc_105c7));	// 722 jnb     short loc_105C7 ;~ 01A2:05C0
cs=0x1a2;eip=0x0005c2; 	X(MOV(byte_24673, 0));	// 723 mov     byte_24673, 0 ;~ 01A2:05C2
loc_105c7:
	// 4415 
cs=0x1a2;eip=0x0005c7; 	T(MOV(ax, ds));	// 726 mov     ax, ds ;~ 01A2:05C7
cs=0x1a2;eip=0x0005c9; 	T(MOV(es, ax));	// 727 mov     es, ax ;~ 01A2:05C9
cs=0x1a2;eip=0x0005cb; 	T(MOV(si, offset(seg003,_chrin)));	// 728 mov     si, offset _chrin ; in ;~ 01A2:05CB
cs=0x1a2;eip=0x0005ce; 	T(MOV(di, offset(seg003,out_)));	// 729 mov     di, offset out_ ; "                                " ;~ 01A2:05CE
cs=0x1a2;eip=0x0005d1; 	T(MOV(cx, 0x1C));	// 730 mov     cx, 1Ch         ; count ;~ 01A2:05D1
cs=0x1a2;eip=0x0005d4; 	J(CALL(_copy_printable,0));	// 731 call    _copy_printable ;~ 01A2:05D4
cs=0x1a2;eip=0x0005d7; 	T(TEST(*(db*)(((db*)&_config_word)+1), 0x20));	// 732 test    byte ptr _config_word+1, 20h ;~ 01A2:05D7
cs=0x1a2;eip=0x0005dc; 	J(JZ(loc_1061e));	// 733 jz      short loc_1061E ;~ 01A2:05DC
cs=0x1a2;eip=0x0005de; 	T(MOV(dx, 0x64));	// 734 mov     dx, 64h ; 'd' ;~ 01A2:05DE
cs=0x1a2;eip=0x0005e1; 	T(MOV(cl, byte_3053b));	// 735 mov     cl, byte_3053B ;~ 01A2:05E1
cs=0x1a2;eip=0x0005e5; 	T(AND(cx, 0x7F));	// 736 and     cx, 7Fh ;~ 01A2:05E5
cs=0x1a2;eip=0x0005e8; 	J(JZ(loc_10618));	// 737 jz      short loc_10618 ;~ 01A2:05E8
cs=0x1a2;eip=0x0005ea; 	T(TEST(byte_3053b, 0x80));	// 738 test    byte_3053B, 80h ;~ 01A2:05EA
cs=0x1a2;eip=0x0005ef; 	J(JZ(loc_105ff));	// 739 jz      short loc_105FF ;~ 01A2:05EF
cs=0x1a2;eip=0x0005f1; 	T(MOV(ax, 0x0B));	// 740 mov     ax, 0Bh ;~ 01A2:05F1
cs=0x1a2;eip=0x0005f4; 	T(MUL1_2(cx));	// 741 mul     cx ;~ 01A2:05F4
cs=0x1a2;eip=0x0005f6; 	T(SHRD(ax, dx, 3));	// 742 shrd    ax, dx, 3 ;~ 01A2:05F6
cs=0x1a2;eip=0x0005fa; 	T(SUB(ax, 2));	// 743 sub     ax, 2 ;~ 01A2:05FA
cs=0x1a2;eip=0x0005fd; 	T(MOV(cx, ax));	// 744 mov     cx, ax ;~ 01A2:05FD
loc_105ff:
	// 4416 
cs=0x1a2;eip=0x0005ff; 	T(MOV(ax, 100));	// 747 mov     ax, 100 ;~ 01A2:05FF
cs=0x1a2;eip=0x000602; 	T(MUL1_2(cx));	// 748 mul     cx ;~ 01A2:0602
cs=0x1a2;eip=0x000604; 	T(MOV(cx, '0'));	// 749 mov     cx, '0' ;~ 01A2:0604
cs=0x1a2;eip=0x000607; 	T(DIV2(cx));	// 750 div     cx ;~ 01A2:0607
cs=0x1a2;eip=0x000609; 	T(MOV(dx, 100));	// 751 mov     dx, 100 ;~ 01A2:0609
cs=0x1a2;eip=0x00060c; 	T(CMP(ax, 100));	// 752 cmp     ax, 100 ;~ 01A2:060C
cs=0x1a2;eip=0x00060f; 	J(JBE(loc_10618));	// 753 jbe     short loc_10618 ;~ 01A2:060F
cs=0x1a2;eip=0x000611; 	T(CMP(ax, 2500));	// 754 cmp     ax, 2500 ;~ 01A2:0611
cs=0x1a2;eip=0x000614; 	J(JA(loc_10618));	// 755 ja      short loc_10618 ;~ 01A2:0614
cs=0x1a2;eip=0x000616; 	T(MOV(dx, ax));	// 756 mov     dx, ax ;~ 01A2:0616
loc_10618:
	// 4417 
cs=0x1a2;eip=0x000618; 	T(MOV(ax, dx));	// 760 mov     ax, dx ;~ 01A2:0618
cs=0x1a2;eip=0x00061a; 	X(PUSH(cs));	// 761 push    cs ;~ 01A2:061A
cs=0x1a2;eip=0x00061b; 	J(CALL(_change_amplif,0));	// 762 call    near ptr _change_amplif ;~ 01A2:061B
loc_1061e:
	// 4418 
cs=0x1a2;eip=0x00061e; 	T(XOR(si, si));	// 765 xor     si, si ;~ 01A2:061E
cs=0x1a2;eip=0x000620; 	T(MOV(di, offset(seg003,_volume_25908)));	// 766 mov     di, offset _volume_25908 ;~ 01A2:0620
cs=0x1a2;eip=0x000623; 	T(XOR(dx, dx));	// 767 xor     dx, dx ;~ 01A2:0623
cs=0x1a2;eip=0x000625; 	T(MOV(cx, 0x20));	// 768 mov     cx, 20h ; ' ' ;~ 01A2:0625
loc_10628:
	// 4419 
cs=0x1a2;eip=0x000628; 	T(MOV(al, *((&byte_30548)+si)));	// 771 mov     al, byte_30548[si] ;~ 01A2:0628
cs=0x1a2;eip=0x00062c; 	T(CMP(al, 0x0FF));	// 772 cmp     al, 0FFh ;~ 01A2:062C
cs=0x1a2;eip=0x00062e; 	J(JZ(loc_10640));	// 773 jz      short loc_10640 ;~ 01A2:062E
cs=0x1a2;eip=0x000630; 	T(MOV(dx, si));	// 774 mov     dx, si ;~ 01A2:0630
cs=0x1a2;eip=0x000632; 	T(SHR(al, 4));	// 775 shr     al, 4 ;~ 01A2:0632
cs=0x1a2;eip=0x000635; 	T(MOV(ah, 1));	// 776 mov     ah, 1 ;~ 01A2:0635
cs=0x1a2;eip=0x000637; 	T(CMP(al, 1));	// 777 cmp     al, 1 ;~ 01A2:0637
cs=0x1a2;eip=0x000639; 	J(JZ(loc_1063d));	// 778 jz      short loc_1063D ;~ 01A2:0639
cs=0x1a2;eip=0x00063b; 	T(MOV(ah, 0));	// 779 mov     ah, 0 ;~ 01A2:063B
loc_1063d:
	// 4420 
cs=0x1a2;eip=0x00063d; 	X(MOV(*(raddr(ds,di+0x1D)), ah));	// 782 mov     [di+1Dh], ah ;~ 01A2:063D
loc_10640:
	// 4421 
cs=0x1a2;eip=0x000640; 	T(INC(si));	// 785 inc     si ;~ 01A2:0640
cs=0x1a2;eip=0x000641; 	T(ADD(di, 0x50));	// 786 add     di, 50h ; 'P' ;~ 01A2:0641
cs=0x1a2;eip=0x000644; 	T(DEC(cx));	// 787 dec     cx ;~ 01A2:0644
cs=0x1a2;eip=0x000645; 	J(JNZ(loc_10628));	// 788 jnz     short loc_10628 ;~ 01A2:0645
cs=0x1a2;eip=0x000647; 	T(INC(dx));	// 789 inc     dx ;~ 01A2:0647
cs=0x1a2;eip=0x000648; 	X(MOV(word_245d4, dx));	// 790 mov     word_245D4, dx ;~ 01A2:0648
cs=0x1a2;eip=0x00064c; 	T(MOV(cx, word_245d4));	// 791 mov     cx, word_245D4 ;~ 01A2:064C
cs=0x1a2;eip=0x000650; 	T(XOR(si, si));	// 792 xor     si, si ;~ 01A2:0650
loc_10652:
	// 4422 
cs=0x1a2;eip=0x000652; 	T(MOV(al, byte_2461e));	// 795 mov     al, byte_2461E ;~ 01A2:0652
cs=0x1a2;eip=0x000655; 	T(TEST(*((&byte_30548)+si), 8));	// 796 test    byte_30548[si], 8 ;~ 01A2:0655
cs=0x1a2;eip=0x00065a; 	J(JZ(loc_1065f));	// 797 jz      short loc_1065F ;~ 01A2:065A
cs=0x1a2;eip=0x00065c; 	T(MOV(al, byte_2461f));	// 798 mov     al, byte_2461F ;~ 01A2:065C
loc_1065f:
	// 4423 
cs=0x1a2;eip=0x00065f; 	X(MOV(*(db*)(((db*)&dword_27bc8)+si), al));	// 801 mov     byte ptr dword_27BC8[si], al ;~ 01A2:065F
cs=0x1a2;eip=0x000663; 	T(INC(si));	// 802 inc     si ;~ 01A2:0663
cs=0x1a2;eip=0x000664; 	T(DEC(cx));	// 803 dec     cx ;~ 01A2:0664
cs=0x1a2;eip=0x000665; 	J(JNZ(loc_10652));	// 804 jnz     short loc_10652 ;~ 01A2:0665
cs=0x1a2;eip=0x000667; 	T(MOV(ax, word_3052a));	// 805 mov     ax, word_3052A ;~ 01A2:0667
cs=0x1a2;eip=0x00066a; 	T(CMP(ax, 0x63));	// 806 cmp     ax, 63h ; 'c' ;~ 01A2:066A
cs=0x1a2;eip=0x00066d; 	J(JC(loc_10672));	// 807 jb      short loc_10672 ;~ 01A2:066D
cs=0x1a2;eip=0x00066f; 	T(MOV(ax, 0x63));	// 808 mov     ax, 63h ; 'c' ;~ 01A2:066F
loc_10672:
	// 4424 
cs=0x1a2;eip=0x000672; 	X(MOV(word_245d2, ax));	// 811 mov     word_245D2, ax ;~ 01A2:0672
cs=0x1a2;eip=0x000675; 	T(MOV(ax, word_3052c));	// 812 mov     ax, word_3052C ;~ 01A2:0675
cs=0x1a2;eip=0x000678; 	T(CMP(ax, 0x100));	// 813 cmp     ax, 100h ;~ 01A2:0678
cs=0x1a2;eip=0x00067b; 	J(JC(loc_10680));	// 814 jb      short loc_10680 ;~ 01A2:067B
cs=0x1a2;eip=0x00067d; 	T(MOV(ax, 0x100));	// 815 mov     ax, 100h ;~ 01A2:067D
loc_10680:
	// 4425 
cs=0x1a2;eip=0x000680; 	X(MOV(word_245f2, ax));	// 818 mov     word_245F2, ax ;~ 01A2:0680
cs=0x1a2;eip=0x000683; 	T(MOV(al, byte_30539));	// 819 mov     al, byte_30539 ;~ 01A2:0683
cs=0x1a2;eip=0x000686; 	X(MOV(byte_24679, al));	// 820 mov     byte_24679, al ;~ 01A2:0686
cs=0x1a2;eip=0x000689; 	T(MOV(al, byte_3053a));	// 821 mov     al, byte_3053A ;~ 01A2:0689
cs=0x1a2;eip=0x00068c; 	X(MOV(byte_2467a, al));	// 822 mov     byte_2467A, al ;~ 01A2:068C
cs=0x1a2;eip=0x00068f; 	T(MOV(ax, ds));	// 823 mov     ax, ds ;~ 01A2:068F
cs=0x1a2;eip=0x000691; 	T(MOV(es, ax));	// 824 mov     es, ax ;~ 01A2:0691
cs=0x1a2;eip=0x000693; 	T(MOV(di, offset(seg003,_myout)));	// 825 mov     di, offset _myout ; out ;~ 01A2:0693
cs=0x1a2;eip=0x000696; 	T(MOV(bx, offset(seg003,dword_30566)+2));	// 826 mov     bx, (offset dword_30566+2) ;~ 01A2:0696
cs=0x1a2;eip=0x000699; 	T(ADD(bx, *(dw*)((&unk_30528))));	// 827 add     bx, word ptr unk_30528 ;~ 01A2:0699
cs=0x1a2;eip=0x00069d; 	T(MOVZX(ecx, word_245d2));	// 828 movzx   ecx, word_245D2 ;~ 01A2:069D
loc_106a3:
	// 4426 
cs=0x1a2;eip=0x0006a3; 	X(PUSH(bx));	// 831 push    bx ;~ 01A2:06A3
cs=0x1a2;eip=0x0006a4; 	X(PUSH(cx));	// 832 push    cx ;~ 01A2:06A4
cs=0x1a2;eip=0x0006a5; 	T(MOV(dx, offset(seg003,in_)));	// 833 mov     dx, offset in_ ;~ 01A2:06A5
cs=0x1a2;eip=0x0006a8; 	T(MOV(cx, 0x50));	// 834 mov     cx, 50h ; 'P' ;~ 01A2:06A8
cs=0x1a2;eip=0x0006ab; 	T(MOVZX(eax, *(dw*)(raddr(ds,bx))));	// 835 movzx   eax, word ptr [bx] ;~ 01A2:06AB
cs=0x1a2;eip=0x0006af; 	T(SHL(eax, 4));	// 836 shl     eax, 4 ;~ 01A2:06AF
cs=0x1a2;eip=0x0006b3; 	J(CALL(_dosseek,0));	// 837 call    _dosseek ;~ 01A2:06B3
cs=0x1a2;eip=0x0006b6; 	T(MOV(si, offset(seg003,in_)));	// 838 mov     si, offset in_ ;~ 01A2:06B6
cs=0x1a2;eip=0x0006b9; 	T(XOR(eax, eax));	// 839 xor     eax, eax ;~ 01A2:06B9
cs=0x1a2;eip=0x0006bc; 	T(XOR(edx, edx));	// 840 xor     edx, edx ;~ 01A2:06BC
cs=0x1a2;eip=0x0006bf; 	T(CMP(*(raddr(ds,si)), 1));	// 841 cmp     byte ptr [si], 1 ;~ 01A2:06BF
cs=0x1a2;eip=0x0006c2; 	J(JNZ(loc_106d8));	// 842 jnz     short loc_106D8 ;~ 01A2:06C2
cs=0x1a2;eip=0x0006c4; 	T(MOVZX(eax, *(dw*)(raddr(ds,si+0x10))));	// 843 movzx   eax, word ptr [si+10h] ;~ 01A2:06C4
cs=0x1a2;eip=0x0006c9; 	T(MOV(edx, eax));	// 844 mov     edx, eax ;~ 01A2:06C9
cs=0x1a2;eip=0x0006cc; 	T(CMP(eax, 0x100000));	// 845 cmp     eax, 100000h ;~ 01A2:06CC
cs=0x1a2;eip=0x0006d2; 	T(CMC);	// 846 cmc ;~ 01A2:06D2
cs=0x1a2;eip=0x0006d3; 	X(ADC(word_24662, 0));	// 847 adc     word_24662, 0 ;~ 01A2:06D3
loc_106d8:
	// 4427 
cs=0x1a2;eip=0x0006d8; 	X(MOV(*(dd*)(raddr(ds,di+0x20)), eax));	// 850 mov     [di+20h], eax ;~ 01A2:06D8
cs=0x1a2;eip=0x0006dc; 	X(ADD(dword_245c4, eax));	// 851 add     dword_245C4, eax ;~ 01A2:06DC
cs=0x1a2;eip=0x0006e1; 	T(MOVZX(eax, *(dw*)(raddr(ds,si+0x0E))));	// 852 movzx   eax, word ptr [si+0Eh] ;~ 01A2:06E1
cs=0x1a2;eip=0x0006e6; 	T(SHL(eax, 4));	// 853 shl     eax, 4 ;~ 01A2:06E6
cs=0x1a2;eip=0x0006ea; 	X(MOV(*(dd*)(raddr(ds,di+0x38)), eax));	// 854 mov     [di+38h], eax ;~ 01A2:06EA
cs=0x1a2;eip=0x0006ee; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x20))));	// 855 mov     ax, [si+20h] ;~ 01A2:06EE
cs=0x1a2;eip=0x0006f1; 	T(OR(ax, ax));	// 856 or      ax, ax ;~ 01A2:06F1
cs=0x1a2;eip=0x0006f3; 	J(JNZ(loc_106f8));	// 857 jnz     short loc_106F8 ;~ 01A2:06F3
cs=0x1a2;eip=0x0006f5; 	T(MOV(ax, _freq_245de));	// 858 mov     ax, _freq_245DE ;~ 01A2:06F5
loc_106f8:
	// 4428 
cs=0x1a2;eip=0x0006f8; 	X(MOV(*(dw*)(raddr(ds,di+0x36)), ax));	// 861 mov     [di+36h], ax ;~ 01A2:06F8
cs=0x1a2;eip=0x0006fb; 	T(MOV(al, *(raddr(ds,si+0x1C))));	// 862 mov     al, [si+1Ch] ;~ 01A2:06FB
cs=0x1a2;eip=0x0006fe; 	T(CMP(al, 0x3F));	// 863 cmp     al, 3Fh ; '?' ;~ 01A2:06FE
cs=0x1a2;eip=0x000700; 	J(JC(loc_10704));	// 864 jb      short loc_10704 ;~ 01A2:0700
cs=0x1a2;eip=0x000702; 	T(MOV(al, 0x3F));	// 865 mov     al, 3Fh ; '?' ;~ 01A2:0702
loc_10704:
	// 4429 
cs=0x1a2;eip=0x000704; 	X(MOV(*(raddr(ds,di+0x3D)), al));	// 868 mov     [di+3Dh], al ;~ 01A2:0704
cs=0x1a2;eip=0x000707; 	T(TEST(*(raddr(ds,si+0x1F)), 1));	// 869 test    byte ptr [si+1Fh], 1 ;~ 01A2:0707
cs=0x1a2;eip=0x00070b; 	J(JNZ(loc_10720));	// 870 jnz     short loc_10720 ;~ 01A2:070B
loc_1070d:
	// 4430 
cs=0x1a2;eip=0x00070d; 	T(XOR(eax, eax));	// 874 xor     eax, eax ;~ 01A2:070D
cs=0x1a2;eip=0x000710; 	X(MOV(*(dd*)(raddr(ds,di+0x24)), eax));	// 875 mov     [di+24h], eax ;~ 01A2:0710
cs=0x1a2;eip=0x000714; 	X(MOV(*(dd*)(raddr(ds,di+0x28)), eax));	// 876 mov     [di+28h], eax ;~ 01A2:0714
cs=0x1a2;eip=0x000718; 	T(DEC(edx));	// 877 dec     edx ;~ 01A2:0718
cs=0x1a2;eip=0x00071a; 	X(MOV(*(dd*)(raddr(ds,di+0x2C)), edx));	// 878 mov     [di+2Ch], edx ;~ 01A2:071A
cs=0x1a2;eip=0x00071e; 	J(JMP(loc_1074f));	// 879 jmp     short loc_1074F ;~ 01A2:071E
loc_10720:
	// 4431 
cs=0x1a2;eip=0x000720; 	T(CMP(*(dw*)(raddr(ds,si+0x14)), 0x0FFFF));	// 883 cmp     word ptr [si+14h], 0FFFFh ;~ 01A2:0720
cs=0x1a2;eip=0x000724; 	J(JZ(loc_1070d));	// 884 jz      short loc_1070D ;~ 01A2:0724
cs=0x1a2;eip=0x000726; 	T(MOVZX(edx, *(dw*)(raddr(ds,si+0x14))));	// 885 movzx   edx, word ptr [si+14h] ;~ 01A2:0726
cs=0x1a2;eip=0x00072b; 	X(MOV(*(dd*)(raddr(ds,di+0x24)), edx));	// 886 mov     [di+24h], edx ;~ 01A2:072B
cs=0x1a2;eip=0x00072f; 	T(MOVZX(eax, *(dw*)(raddr(ds,si+0x18))));	// 887 movzx   eax, word ptr [si+18h] ;~ 01A2:072F
cs=0x1a2;eip=0x000734; 	T(OR(eax, eax));	// 888 or      eax, eax ;~ 01A2:0734
cs=0x1a2;eip=0x000737; 	J(JZ(loc_1070d));	// 889 jz      short loc_1070D ;~ 01A2:0737
cs=0x1a2;eip=0x000739; 	T(DEC(eax));	// 890 dec     eax ;~ 01A2:0739
cs=0x1a2;eip=0x00073b; 	J(JZ(loc_1070d));	// 891 jz      short loc_1070D ;~ 01A2:073B
cs=0x1a2;eip=0x00073d; 	X(MOV(*(dd*)(raddr(ds,di+0x2C)), eax));	// 892 mov     [di+2Ch], eax ;~ 01A2:073D
cs=0x1a2;eip=0x000741; 	T(INC(eax));	// 893 inc     eax ;~ 01A2:0741
cs=0x1a2;eip=0x000743; 	T(SUB(eax, *(dd*)(raddr(ds,di+0x24))));	// 894 sub     eax, [di+24h] ;~ 01A2:0743
cs=0x1a2;eip=0x000747; 	X(MOV(*(dd*)(raddr(ds,di+0x28)), eax));	// 895 mov     [di+28h], eax ;~ 01A2:0747
cs=0x1a2;eip=0x00074b; 	X(OR(*(raddr(ds,di+0x3C)), 8));	// 896 or      byte ptr [di+3Ch], 8 ;~ 01A2:074B
loc_1074f:
	// 4432 
cs=0x1a2;eip=0x00074f; 	T(ADD(si, 0x30));	// 899 add     si, 30h ; '0'   ; in ;~ 01A2:074F
cs=0x1a2;eip=0x000752; 	T(MOV(cx, 0x1C));	// 900 mov     cx, 1Ch         ; count ;~ 01A2:0752
cs=0x1a2;eip=0x000755; 	J(CALL(_copy_printable,0));	// 901 call    _copy_printable ;~ 01A2:0755
cs=0x1a2;eip=0x000758; 	X(POP(cx));	// 902 pop     cx ;~ 01A2:0758
cs=0x1a2;eip=0x000759; 	X(POP(bx));	// 903 pop     bx ;~ 01A2:0759
cs=0x1a2;eip=0x00075a; 	T(ADD(di, 0x40));	// 904 add     di, 40h ; '@' ;~ 01A2:075A
cs=0x1a2;eip=0x00075d; 	T(ADD(bx, 2));	// 905 add     bx, 2 ;~ 01A2:075D
cs=0x1a2;eip=0x000760; 	T(DEC(cx));	// 906 dec     cx ;~ 01A2:0760
cs=0x1a2;eip=0x000761; 	J(JNZ(loc_106a3));	// 907 jnz     loc_106A3 ;~ 01A2:0761
cs=0x1a2;eip=0x000765; 	T(MOV(si, offset(seg003,dword_30566)+2));	// 908 mov     si, (offset dword_30566+2) ;~ 01A2:0765
cs=0x1a2;eip=0x000768; 	T(XOR(di, di));	// 909 xor     di, di ;~ 01A2:0768
cs=0x1a2;eip=0x00076a; 	T(XOR(bx, bx));	// 910 xor     bx, bx ;~ 01A2:076A
cs=0x1a2;eip=0x00076c; 	T(MOV(ax, *(dw*)((&unk_30528))));	// 911 mov     ax, word ptr unk_30528 ;~ 01A2:076C
cs=0x1a2;eip=0x00076f; 	T(CMP(ax, 0x80));	// 912 cmp     ax, 80h ; '€' ;~ 01A2:076F
cs=0x1a2;eip=0x000772; 	T(MOV(ah, al));	// 913 mov     ah, al ;~ 01A2:0772
cs=0x1a2;eip=0x000774; 	J(JA(loc_1079a));	// 914 ja      short loc_1079A ;~ 01A2:0774
cs=0x1a2;eip=0x000776; 	T(XOR(cl, cl));	// 915 xor     cl, cl ;~ 01A2:0776
loc_10778:
	// 4433 
cs=0x1a2;eip=0x000778; 	T(MOV(al, *(raddr(ds,si))));	// 918 mov     al, [si] ;~ 01A2:0778
cs=0x1a2;eip=0x00077a; 	T(CMP(al, 0x0F0));	// 919 cmp     al, 0F0h ; 'ð' ;~ 01A2:077A
cs=0x1a2;eip=0x00077c; 	J(JNC(loc_1078f));	// 920 jnb     short loc_1078F ;~ 01A2:077C
cs=0x1a2;eip=0x00077e; 	X(MOV(*((byte_27fe8)+di), al));	// 921 mov     byte_27FE8[di], al ;~ 01A2:077E
cs=0x1a2;eip=0x000782; 	T(INC(bl));	// 922 inc     bl ;~ 01A2:0782
cs=0x1a2;eip=0x000784; 	T(INC(di));	// 923 inc     di ;~ 01A2:0784
cs=0x1a2;eip=0x000785; 	T(CMP(cl, 0x0F0));	// 924 cmp     cl, 0F0h ; 'ð' ;~ 01A2:0785
cs=0x1a2;eip=0x000788; 	J(JC(loc_1078f));	// 925 jb      short loc_1078F ;~ 01A2:0788
cs=0x1a2;eip=0x00078a; 	X(MOV(*((&byte_280e7)+di), 0x0FF));	// 926 mov     byte_280E7[di], 0FFh ;~ 01A2:078A
loc_1078f:
	// 4434 
cs=0x1a2;eip=0x00078f; 	T(MOV(cl, al));	// 930 mov     cl, al ;~ 01A2:078F
cs=0x1a2;eip=0x000791; 	T(INC(si));	// 931 inc     si ;~ 01A2:0791
cs=0x1a2;eip=0x000792; 	T(INC(bh));	// 932 inc     bh ;~ 01A2:0792
cs=0x1a2;eip=0x000794; 	T(CMP(bh, ah));	// 933 cmp     bh, ah ;~ 01A2:0794
cs=0x1a2;eip=0x000796; 	J(JC(loc_10778));	// 934 jb      short loc_10778 ;~ 01A2:0796
cs=0x1a2;eip=0x000798; 	J(JMP(loc_107ac));	// 935 jmp     short loc_107AC ;~ 01A2:0798
loc_1079a:
	// 4435 
cs=0x1a2;eip=0x00079a; 	T(MOV(al, *(raddr(ds,si))));	// 940 mov     al, [si] ;~ 01A2:079A
cs=0x1a2;eip=0x00079c; 	T(CMP(al, 0x0FF));	// 941 cmp     al, 0FFh ;~ 01A2:079C
cs=0x1a2;eip=0x00079e; 	J(JZ(loc_107ac));	// 942 jz      short loc_107AC ;~ 01A2:079E
cs=0x1a2;eip=0x0007a0; 	X(MOV(*((byte_27fe8)+di), al));	// 943 mov     byte_27FE8[di], al ;~ 01A2:07A0
cs=0x1a2;eip=0x0007a4; 	T(INC(bl));	// 944 inc     bl ;~ 01A2:07A4
cs=0x1a2;eip=0x0007a6; 	T(INC(di));	// 945 inc     di ;~ 01A2:07A6
cs=0x1a2;eip=0x0007a7; 	T(INC(si));	// 946 inc     si ;~ 01A2:07A7
cs=0x1a2;eip=0x0007a8; 	T(CMP(bl, ah));	// 947 cmp     bl, ah ;~ 01A2:07A8
cs=0x1a2;eip=0x0007aa; 	J(JC(loc_1079a));	// 948 jb      short loc_1079A ;~ 01A2:07AA
loc_107ac:
	// 4436 
cs=0x1a2;eip=0x0007ac; 	T(XOR(bh, bh));	// 952 xor     bh, bh ;~ 01A2:07AC
cs=0x1a2;eip=0x0007ae; 	X(MOV(word_245fa, bx));	// 953 mov     word_245FA, bx ;~ 01A2:07AE
cs=0x1a2;eip=0x0007b2; 	T(XOR(ax, ax));	// 954 xor     ax, ax ;~ 01A2:07B2
loc_107b4:
	// 4437 
cs=0x1a2;eip=0x0007b4; 	X(PUSH(ax));	// 957 push    ax ;~ 01A2:07B4
cs=0x1a2;eip=0x0007b5; 	T(MOV(bx, offset(seg003,dword_30566)+2));	// 958 mov     bx, (offset dword_30566+2) ;~ 01A2:07B5
cs=0x1a2;eip=0x0007b8; 	T(ADD(bx, *(dw*)((&unk_30528))));	// 959 add     bx, word ptr unk_30528 ;~ 01A2:07B8
cs=0x1a2;eip=0x0007bc; 	T(ADD(ax, word_3052a));	// 960 add     ax, word_3052A ;~ 01A2:07BC
cs=0x1a2;eip=0x0007c0; 	T(SHL(ax, 1));	// 961 shl     ax, 1 ;~ 01A2:07C0
cs=0x1a2;eip=0x0007c2; 	T(ADD(bx, ax));	// 962 add     bx, ax ;~ 01A2:07C2
cs=0x1a2;eip=0x0007c4; 	T(MOV(dx, offset(seg003,in_)));	// 963 mov     dx, offset in_ ;~ 01A2:07C4
cs=0x1a2;eip=0x0007c7; 	T(MOV(cx, 2));	// 964 mov     cx, 2 ;~ 01A2:07C7
cs=0x1a2;eip=0x0007ca; 	T(MOVZX(eax, *(dw*)(raddr(ds,bx))));	// 965 movzx   eax, word ptr [bx] ;~ 01A2:07CA
cs=0x1a2;eip=0x0007ce; 	T(OR(ax, ax));	// 966 or      ax, ax ;~ 01A2:07CE
cs=0x1a2;eip=0x0007d0; 	J(JNZ(loc_107e0));	// 967 jnz     short loc_107E0 ;~ 01A2:07D0
loc_107d2:
	// 4438 
cs=0x1a2;eip=0x0007d2; 	J(CALL(_memalloc12k,0));	// 970 call    _memalloc12k ;~ 01A2:07D2
cs=0x1a2;eip=0x0007d5; 	T(MOV(cx, 0x40));	// 971 mov     cx, 40h ; '@' ;~ 01A2:07D5
cs=0x1a2;eip=0x0007d8; 	T(XOR(al, al));	// 972 xor     al, al ;~ 01A2:07D8
cs=0x1a2;eip=0x0007da; 	T(CLD);	// 973 cld ;~ 01A2:07DA
	// 974 rep stosb ;~ 01A2:07DB
cs=0x1a2;eip=0x0007db; 	X(	REP STOSB);	// 974 rep stosb ;~ 01A2:07DB
cs=0x1a2;eip=0x0007dd; 	J(JMP(loc_108b1));	// 975 jmp     loc_108B1 ;~ 01A2:07DD
loc_107e0:
	// 4439 
cs=0x1a2;eip=0x0007e0; 	T(SHL(eax, 4));	// 979 shl     eax, 4 ;~ 01A2:07E0
cs=0x1a2;eip=0x0007e4; 	J(CALL(_dosseek,0));	// 980 call    _dosseek ;~ 01A2:07E4
cs=0x1a2;eip=0x0007e7; 	T(MOV(dx, offset(seg003,in_)));	// 981 mov     dx, offset in_ ;~ 01A2:07E7
cs=0x1a2;eip=0x0007ea; 	T(MOV(cx, in_));	// 982 mov     cx, in_ ;~ 01A2:07EA
cs=0x1a2;eip=0x0007ee; 	T(CMP(cx, 0x308F));	// 983 cmp     cx, 308Fh ;~ 01A2:07EE
cs=0x1a2;eip=0x0007f2; 	J(JNC(loc_107d2));	// 984 jnb     short loc_107D2 ;~ 01A2:07F2
cs=0x1a2;eip=0x0007f4; 	T(ADD(cx, 0x0F));	// 985 add     cx, 0Fh ;~ 01A2:07F4
cs=0x1a2;eip=0x0007f7; 	T(AND(cl, 0x0F0));	// 986 and     cl, 0F0h ;~ 01A2:07F7
cs=0x1a2;eip=0x0007fa; 	T(SUB(cx, 2));	// 987 sub     cx, 2 ;~ 01A2:07FA
cs=0x1a2;eip=0x0007fd; 	J(CALL(_dosfread,0));	// 988 call    _dosfread ;~ 01A2:07FD
cs=0x1a2;eip=0x000800; 	J(CALL(_memalloc12k,0));	// 989 call    _memalloc12k ;~ 01A2:0800
cs=0x1a2;eip=0x000803; 	T(MOV(si, offset(seg003,in_)));	// 990 mov     si, offset in_ ;~ 01A2:0803
cs=0x1a2;eip=0x000806; 	T(MOV(cx, 0x40));	// 991 mov     cx, 40h ; '@' ;~ 01A2:0806
loc_10809:
	// 4440 
cs=0x1a2;eip=0x000809; 	X(PUSH(cx));	// 994 push    cx ;~ 01A2:0809
cs=0x1a2;eip=0x00080a; 	T(LODSB);	// 995 lodsb ;~ 01A2:080A
cs=0x1a2;eip=0x00080b; 	T(OR(al, al));	// 996 or      al, al ;~ 01A2:080B
cs=0x1a2;eip=0x00080d; 	J(JZ(loc_108a6));	// 997 jz      loc_108A6 ;~ 01A2:080D
loc_10811:
	// 4441 
cs=0x1a2;eip=0x000811; 	T(XOR(bx, bx));	// 1000 xor     bx, bx ;~ 01A2:0811
cs=0x1a2;eip=0x000813; 	T(MOV(ch, al));	// 1001 mov     ch, al ;~ 01A2:0813
cs=0x1a2;eip=0x000815; 	T(TEST(ch, 0x20));	// 1002 test    ch, 20h ;~ 01A2:0815
cs=0x1a2;eip=0x000818; 	J(JZ(loc_1082d));	// 1003 jz      short loc_1082D ;~ 01A2:0818
cs=0x1a2;eip=0x00081a; 	T(MOV(bx, *(dw*)(raddr(ds,si))));	// 1004 mov     bx, [si] ;~ 01A2:081A
cs=0x1a2;eip=0x00081c; 	T(ADD(si, 2));	// 1005 add     si, 2 ;~ 01A2:081C
cs=0x1a2;eip=0x00081f; 	T(CMP(bl, 0x0FE));	// 1006 cmp     bl, 0FEh ; 'þ' ;~ 01A2:081F
cs=0x1a2;eip=0x000822; 	J(JNC(loc_10826));	// 1007 jnb     short loc_10826 ;~ 01A2:0822
cs=0x1a2;eip=0x000824; 	T(INC(bl));	// 1008 inc     bl ;~ 01A2:0824
loc_10826:
	// 4442 
cs=0x1a2;eip=0x000826; 	T(CMP(bh, 0x63));	// 1011 cmp     bh, 63h ; 'c' ;~ 01A2:0826
cs=0x1a2;eip=0x000829; 	J(JBE(loc_1082d));	// 1012 jbe     short loc_1082D ;~ 01A2:0829
cs=0x1a2;eip=0x00082b; 	T(XOR(bh, bh));	// 1013 xor     bh, bh ;~ 01A2:082B
loc_1082d:
	// 4443 
cs=0x1a2;eip=0x00082d; 	T(MOV(cl, 0x0FF));	// 1017 mov     cl, 0FFh ;~ 01A2:082D
cs=0x1a2;eip=0x00082f; 	T(TEST(ch, 0x40));	// 1018 test    ch, 40h ;~ 01A2:082F
cs=0x1a2;eip=0x000832; 	J(JZ(loc_1083e));	// 1019 jz      short loc_1083E ;~ 01A2:0832
cs=0x1a2;eip=0x000834; 	T(MOV(cl, *(raddr(ds,si))));	// 1020 mov     cl, [si] ;~ 01A2:0834
cs=0x1a2;eip=0x000836; 	T(INC(si));	// 1021 inc     si ;~ 01A2:0836
cs=0x1a2;eip=0x000837; 	T(CMP(cl, 0x40));	// 1022 cmp     cl, 40h ; '@' ;~ 01A2:0837
cs=0x1a2;eip=0x00083a; 	J(JBE(loc_1083e));	// 1023 jbe     short loc_1083E ;~ 01A2:083A
cs=0x1a2;eip=0x00083c; 	T(MOV(cl, 0x0FF));	// 1024 mov     cl, 0FFh ;~ 01A2:083C
loc_1083e:
	// 4444 
cs=0x1a2;eip=0x00083e; 	T(TEST(ch, 0x80));	// 1028 test    ch, 80h ;~ 01A2:083E
cs=0x1a2;eip=0x000841; 	J(JZ(loc_1088d));	// 1029 jz      short loc_1088D ;~ 01A2:0841
cs=0x1a2;eip=0x000843; 	T(MOV(dx, *(dw*)(raddr(ds,si))));	// 1030 mov     dx, [si] ;~ 01A2:0843
cs=0x1a2;eip=0x000845; 	T(ADD(si, 2));	// 1031 add     si, 2 ;~ 01A2:0845
cs=0x1a2;eip=0x000848; 	T(CMP(dl, 0x19));	// 1032 cmp     dl, 19h ;~ 01A2:0848
cs=0x1a2;eip=0x00084b; 	J(JA(loc_1088d));	// 1033 ja      short loc_1088D ;~ 01A2:084B
cs=0x1a2;eip=0x00084d; 	T(ROL(ebx, 0x10));	// 1034 rol     ebx, 10h ;~ 01A2:084D
cs=0x1a2;eip=0x000851; 	T(MOVZX(bx, dl));	// 1035 movzx   bx, dl ;~ 01A2:0851
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x000854; 	T(MOV(dl, *((_s3mtable_108d6)+bx)));	// 1036 mov     dl, cs:_s3mtable_108D6[bx] ;~ 01A2:0854
cs=0x1a2;eip=0x000859; 	T(CMP(dl, 0x0FF));	// 1037 cmp     dl, 0FFh ;~ 01A2:0859
cs=0x1a2;eip=0x00085c; 	J(JZ(loc_10885));	// 1038 jz      short loc_10885 ;~ 01A2:085C
cs=0x1a2;eip=0x00085e; 	T(CMP(dl, 0x0F));	// 1039 cmp     dl, 0Fh ;~ 01A2:085E
cs=0x1a2;eip=0x000861; 	J(JZ(loc_10880));	// 1040 jz      short loc_10880 ;~ 01A2:0861
cs=0x1a2;eip=0x000863; 	T(CMP(dl, 0x0E));	// 1041 cmp     dl, 0Eh ;~ 01A2:0863
cs=0x1a2;eip=0x000866; 	J(JNZ(loc_10887));	// 1042 jnz     short loc_10887 ;~ 01A2:0866
cs=0x1a2;eip=0x000868; 	T(MOV(bl, dh));	// 1043 mov     bl, dh ;~ 01A2:0868
cs=0x1a2;eip=0x00086a; 	T(SHR(bl, 4));	// 1044 shr     bl, 4 ;~ 01A2:086A
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00086d; 	T(MOV(al, *((_s3mtable_108f0)+bx)));	// 1045 mov     al, cs:_s3mtable_108F0[bx] ;~ 01A2:086D
cs=0x1a2;eip=0x000872; 	T(CMP(al, 0x0FF));	// 1046 cmp     al, 0FFh ;~ 01A2:0872
cs=0x1a2;eip=0x000874; 	J(JZ(loc_10885));	// 1047 jz      short loc_10885 ;~ 01A2:0874
cs=0x1a2;eip=0x000876; 	T(SHL(al, 4));	// 1048 shl     al, 4 ;~ 01A2:0876
cs=0x1a2;eip=0x000879; 	T(AND(dh, 0x0F));	// 1049 and     dh, 0Fh ;~ 01A2:0879
cs=0x1a2;eip=0x00087c; 	T(OR(dh, al));	// 1050 or      dh, al ;~ 01A2:087C
cs=0x1a2;eip=0x00087e; 	J(JMP(loc_10887));	// 1051 jmp     short loc_10887 ;~ 01A2:087E
loc_10880:
	// 4445 
cs=0x1a2;eip=0x000880; 	T(CMP(dh, 0x20));	// 1055 cmp     dh, 20h ; ' ' ;~ 01A2:0880
cs=0x1a2;eip=0x000883; 	J(JA(loc_10887));	// 1056 ja      short loc_10887 ;~ 01A2:0883
loc_10885:
	// 4446 
cs=0x1a2;eip=0x000885; 	T(XOR(dx, dx));	// 1060 xor     dx, dx ;~ 01A2:0885
loc_10887:
	// 4447 
cs=0x1a2;eip=0x000887; 	T(ROR(ebx, 0x10));	// 1064 ror     ebx, 10h ;~ 01A2:0887
cs=0x1a2;eip=0x00088b; 	J(JMP(loc_1088f));	// 1065 jmp     short loc_1088F ;~ 01A2:088B
loc_1088d:
	// 4448 
cs=0x1a2;eip=0x00088d; 	T(XOR(dx, dx));	// 1070 xor     dx, dx ;~ 01A2:088D
loc_1088f:
	// 4449 
cs=0x1a2;eip=0x00088f; 	T(AND(ch, 0x1F));	// 1073 and     ch, 1Fh ;~ 01A2:088F
cs=0x1a2;eip=0x000892; 	T(CMP(*(db*)(((db*)&word_245d4)+1), ch));	// 1074 cmp     byte ptr word_245D4+1, ch ;~ 01A2:0892
cs=0x1a2;eip=0x000896; 	J(JNC(loc_1089c));	// 1075 jnb     short loc_1089C ;~ 01A2:0896
cs=0x1a2;eip=0x000898; 	X(MOV(*(db*)(((db*)&word_245d4)+1), ch));	// 1076 mov     byte ptr word_245D4+1, ch ;~ 01A2:0898
loc_1089c:
	// 4450 
cs=0x1a2;eip=0x00089c; 	J(CALL(sub_11ba6,0));	// 1079 call    sub_11BA6 ;~ 01A2:089C
cs=0x1a2;eip=0x00089f; 	T(LODSB);	// 1080 lodsb ;~ 01A2:089F
cs=0x1a2;eip=0x0008a0; 	T(OR(al, al));	// 1081 or      al, al ;~ 01A2:08A0
cs=0x1a2;eip=0x0008a2; 	J(JNZ(loc_10811));	// 1082 jnz     loc_10811 ;~ 01A2:08A2
loc_108a6:
	// 4451 
cs=0x1a2;eip=0x0008a6; 	X(MOV(*(raddr(es,di)), 0));	// 1085 mov     byte ptr es:[di], 0 ;~ 01A2:08A6
cs=0x1a2;eip=0x0008aa; 	T(INC(di));	// 1086 inc     di ;~ 01A2:08AA
cs=0x1a2;eip=0x0008ab; 	X(POP(cx));	// 1087 pop     cx ;~ 01A2:08AB
cs=0x1a2;eip=0x0008ac; 	T(DEC(cx));	// 1088 dec     cx ;~ 01A2:08AC
cs=0x1a2;eip=0x0008ad; 	J(JNZ(loc_10809));	// 1089 jnz     loc_10809 ;~ 01A2:08AD
loc_108b1:
	// 4452 
cs=0x1a2;eip=0x0008b1; 	J(CALL(_mem_reallocx,0));	// 1092 call    _mem_reallocx ;~ 01A2:08B1
cs=0x1a2;eip=0x0008b4; 	X(POP(ax));	// 1093 pop     ax ;~ 01A2:08B4
cs=0x1a2;eip=0x0008b5; 	T(INC(ax));	// 1094 inc     ax ;~ 01A2:08B5
cs=0x1a2;eip=0x0008b6; 	T(CMP(ax, word_245f2));	// 1095 cmp     ax, word_245F2 ;~ 01A2:08B6
cs=0x1a2;eip=0x0008ba; 	J(JC(loc_107b4));	// 1096 jb      loc_107B4 ;~ 01A2:08BA
cs=0x1a2;eip=0x0008be; 	T(MOV(ax, word_245d4));	// 1097 mov     ax, word_245D4 ;~ 01A2:08BE
cs=0x1a2;eip=0x0008c1; 	T(INC(ah));	// 1098 inc     ah ;~ 01A2:08C1
cs=0x1a2;eip=0x0008c3; 	T(CMP(al, ah));	// 1099 cmp     al, ah ;~ 01A2:08C3
cs=0x1a2;eip=0x0008c5; 	J(JC(loc_108c9));	// 1100 jb      short loc_108C9 ;~ 01A2:08C5
cs=0x1a2;eip=0x0008c7; 	T(MOV(al, ah));	// 1101 mov     al, ah ;~ 01A2:08C7
loc_108c9:
	// 4453 
cs=0x1a2;eip=0x0008c9; 	T(XOR(ah, ah));	// 1104 xor     ah, ah ;~ 01A2:08C9
cs=0x1a2;eip=0x0008cb; 	X(MOV(word_245d4, ax));	// 1105 mov     word_245D4, ax ;~ 01A2:08CB
cs=0x1a2;eip=0x0008ce; 	J(CALL(_mod_readfile_11f4e,0));	// 1106 call    near ptr _mod_readfile_11F4E ;~ 01A2:08CE
cs=0x1a2;eip=0x0008d1; 	J(JC(loc_10099));	// 1107 jb      loc_10099 ;~ 01A2:08D1
cs=0x1a2;eip=0x0008d5; 	J(RETN(0));	// 1108 retn ;~ 01A2:08D5
_e669_module:
	// 1123 
cs=0x1a2;eip=0x000900; 	X(MOV(_module_type_text, 0x39363645));	// 1124 mov     _module_type_text, 39363645h ;~ 01A2:0900
cs=0x1a2;eip=0x000909; 	J(JMP(loc_10914));	// 1125 jmp     short loc_10914 ;~ 01A2:0909
__669_module:
	// 4454 
cs=0x1a2;eip=0x00090b; 	X(MOV(_module_type_text, 0x20393636));	// 1129 mov     _module_type_text, 20393636h ; 669 ;~ 01A2:090B
loc_10914:
	// 4455 
cs=0x1a2;eip=0x000914; 	X(MOV(_moduleflag_246d0, 0x4));	// 1132 mov     _moduleflag_246D0, 100b ;~ 01A2:0914
cs=0x1a2;eip=0x00091a; 	X(MOV(byte_24673, 0x80));	// 1133 mov     byte_24673, 80h ; '€' ;~ 01A2:091A
cs=0x1a2;eip=0x00091f; 	X(MOV(byte_2467e, 2));	// 1134 mov     byte_2467E, 2 ;~ 01A2:091F
cs=0x1a2;eip=0x000924; 	X(MOV(word_245d4, 8));	// 1135 mov     word_245D4, 8 ;~ 01A2:0924
cs=0x1a2;eip=0x00092a; 	T(MOVZX(ax, byte_30576));	// 1136 movzx   ax, byte_30576 ;~ 01A2:092A
cs=0x1a2;eip=0x00092f; 	X(MOV(word_245d2, ax));	// 1137 mov     word_245D2, ax ;~ 01A2:092F
cs=0x1a2;eip=0x000932; 	T(MOV(al, byte_30577));	// 1138 mov     al, byte_30577 ;~ 01A2:0932
cs=0x1a2;eip=0x000935; 	X(MOV(word_245f2, ax));	// 1139 mov     word_245F2, ax ;~ 01A2:0935
cs=0x1a2;eip=0x000938; 	T(MOV(ah, byte_2461f));	// 1140 mov     ah, byte_2461F ;~ 01A2:0938
cs=0x1a2;eip=0x00093c; 	T(MOV(al, byte_2461e));	// 1141 mov     al, byte_2461E ;~ 01A2:093C
cs=0x1a2;eip=0x00093f; 	T(SHL(eax, 0x10));	// 1142 shl     eax, 10h ;~ 01A2:093F
cs=0x1a2;eip=0x000943; 	T(MOV(ah, byte_2461f));	// 1143 mov     ah, byte_2461F ;~ 01A2:0943
cs=0x1a2;eip=0x000947; 	T(MOV(al, byte_2461e));	// 1144 mov     al, byte_2461E ;~ 01A2:0947
cs=0x1a2;eip=0x00094a; 	X(MOV(dword_27bc8, eax));	// 1145 mov     dword_27BC8, eax ;~ 01A2:094A
cs=0x1a2;eip=0x00094e; 	X(MOV(dword_27bcc, eax));	// 1146 mov     dword_27BCC, eax ;~ 01A2:094E
cs=0x1a2;eip=0x000952; 	T(MOV(ax, ds));	// 1147 mov     ax, ds ;~ 01A2:0952
cs=0x1a2;eip=0x000954; 	T(MOV(es, ax));	// 1148 mov     es, ax ;~ 01A2:0954
cs=0x1a2;eip=0x000956; 	T(MOV(si, offset(seg003,_chrin)+1));	// 1149 mov     si, (offset _chrin+1) ;~ 01A2:0956
cs=0x1a2;eip=0x000959; 	T(MOV(cx, 0x4C));	// 1150 mov     cx, 4Ch ; 'L' ;~ 01A2:0959
loc_1095c:
	// 4456 
cs=0x1a2;eip=0x00095c; 	T(INC(si));	// 1153 inc     si              ; in ;~ 01A2:095C
cs=0x1a2;eip=0x00095d; 	T(CMP(*(raddr(ds,si)), 0x20));	// 1154 cmp     byte ptr [si], 20h ; ' ' ;~ 01A2:095D
cs=0x1a2;eip=0x000960; 	J(LOOPE(loc_1095c));	// 1155 loope   loc_1095C ;~ 01A2:0960
cs=0x1a2;eip=0x000962; 	T(MOV(di, offset(seg003,out_)));	// 1156 mov     di, offset out_ ; "                                " ;~ 01A2:0962
cs=0x1a2;eip=0x000965; 	T(MOV(cx, 0x20));	// 1157 mov     cx, 20h ; ' '   ; count ;~ 01A2:0965
cs=0x1a2;eip=0x000968; 	J(CALL(_copy_printable,0));	// 1158 call    _copy_printable ;~ 01A2:0968
cs=0x1a2;eip=0x00096b; 	T(XOR(si, si));	// 1159 xor     si, si ;~ 01A2:096B
cs=0x1a2;eip=0x00096d; 	T(XOR(bh, bh));	// 1160 xor     bh, bh ;~ 01A2:096D
loc_1096f:
	// 4457 
cs=0x1a2;eip=0x00096f; 	T(MOV(bl, *((byte_30579)+si)));	// 1163 mov     bl, byte_30579[si] ;~ 01A2:096F
cs=0x1a2;eip=0x000973; 	T(CMP(bl, 0x0FF));	// 1164 cmp     bl, 0FFh ;~ 01A2:0973
cs=0x1a2;eip=0x000976; 	J(JZ(loc_10993));	// 1165 jz      short loc_10993 ;~ 01A2:0976
cs=0x1a2;eip=0x000978; 	X(MOV(*((byte_27fe8)+si), bl));	// 1166 mov     byte_27FE8[si], bl ;~ 01A2:0978
cs=0x1a2;eip=0x00097c; 	T(MOV(al, *((byte_305f9)+bx)));	// 1167 mov     al, byte_305F9[bx] ;~ 01A2:097C
cs=0x1a2;eip=0x000980; 	X(MOV(*((byte_280e8)+si), al));	// 1168 mov     byte_280E8[si], al ;~ 01A2:0980
cs=0x1a2;eip=0x000984; 	T(MOV(al, *((byte_30679)+bx)));	// 1169 mov     al, byte_30679[bx] ;~ 01A2:0984
cs=0x1a2;eip=0x000988; 	X(MOV(*((byte_281e8)+si), al));	// 1170 mov     byte_281E8[si], al ;~ 01A2:0988
cs=0x1a2;eip=0x00098c; 	T(INC(si));	// 1171 inc     si ;~ 01A2:098C
cs=0x1a2;eip=0x00098d; 	T(CMP(si, 0x80));	// 1172 cmp     si, 80h ; '€' ;~ 01A2:098D
cs=0x1a2;eip=0x000991; 	J(JC(loc_1096f));	// 1173 jb      short loc_1096F ;~ 01A2:0991
loc_10993:
	// 4458 
cs=0x1a2;eip=0x000993; 	X(MOV(word_245fa, si));	// 1176 mov     word_245FA, si ;~ 01A2:0993
cs=0x1a2;eip=0x000997; 	T(MOV(al, *(byte_280e8)));	// 1177 mov     al, byte_280E8 ;~ 01A2:0997
cs=0x1a2;eip=0x00099a; 	X(MOV(byte_24679, al));	// 1178 mov     byte_24679, al ;~ 01A2:099A
cs=0x1a2;eip=0x00099d; 	X(MOV(byte_2467a, 0x50));	// 1179 mov     byte_2467A, 50h ; 'P' ;~ 01A2:099D
cs=0x1a2;eip=0x0009a2; 	T(MOV(dx, offset(seg003,_chrin)));	// 1180 mov     dx, offset _chrin ;~ 01A2:09A2
cs=0x1a2;eip=0x0009a5; 	T(IMUL3_2(cx,word_245d2,25));	// 1181 imul    cx, word_245D2, 25 ;~ 01A2:09A5
cs=0x1a2;eip=0x0009aa; 	T(MOV(eax, 497));	// 1182 mov     eax, 497 ;~ 01A2:09AA
cs=0x1a2;eip=0x0009b0; 	J(CALL(_dosseek,0));	// 1183 call    _dosseek ;~ 01A2:09B0
cs=0x1a2;eip=0x0009b3; 	T(MOV(si, offset(seg003,_chrin)));	// 1184 mov     si, offset _chrin ; in ;~ 01A2:09B3
cs=0x1a2;eip=0x0009b6; 	T(MOV(di, offset(seg003,_myout)));	// 1185 mov     di, offset _myout ; out ;~ 01A2:09B6
cs=0x1a2;eip=0x0009b9; 	T(MOV(cx, word_245d2));	// 1186 mov     cx, word_245D2 ;~ 01A2:09B9
loc_109bd:
	// 4459 
cs=0x1a2;eip=0x0009bd; 	X(PUSH(cx));	// 1189 push    cx ;~ 01A2:09BD
cs=0x1a2;eip=0x0009be; 	T(MOV(cx, 0x0D));	// 1190 mov     cx, 0Dh         ; count ;~ 01A2:09BE
cs=0x1a2;eip=0x0009c1; 	J(CALL(_copy_printable,0));	// 1191 call    _copy_printable ;~ 01A2:09C1
cs=0x1a2;eip=0x0009c4; 	X(POP(cx));	// 1192 pop     cx ;~ 01A2:09C4
cs=0x1a2;eip=0x0009c5; 	T(MOV(edx, *(dd*)(raddr(ds,si+0x0D))));	// 1193 mov     edx, [si+0Dh] ;~ 01A2:09C5
cs=0x1a2;eip=0x0009c9; 	T(CMP(edx, 0x100000));	// 1194 cmp     edx, 100000h ;~ 01A2:09C9
cs=0x1a2;eip=0x0009d0; 	T(CMC);	// 1195 cmc ;~ 01A2:09D0
cs=0x1a2;eip=0x0009d1; 	X(ADC(word_24662, 0));	// 1196 adc     word_24662, 0 ;~ 01A2:09D1
cs=0x1a2;eip=0x0009d6; 	X(MOV(*(dd*)(raddr(ds,di+0x20)), edx));	// 1197 mov     [di+20h], edx ;~ 01A2:09D6
cs=0x1a2;eip=0x0009da; 	X(ADD(dword_245c4, edx));	// 1198 add     dword_245C4, edx ;~ 01A2:09DA
cs=0x1a2;eip=0x0009df; 	X(MOV(*(raddr(ds,di+0x3D)), 0x3F));	// 1199 mov     byte ptr [di+3Dh], 3Fh ; '?' ;~ 01A2:09DF
cs=0x1a2;eip=0x0009e3; 	X(MOV(*(dw*)(raddr(ds,di+0x36)), 0x2100));	// 1200 mov     word ptr [di+36h], 2100h ;~ 01A2:09E3
cs=0x1a2;eip=0x0009e8; 	T(MOV(ebx, *(dd*)(raddr(ds,si+0x11))));	// 1201 mov     ebx, [si+11h] ;~ 01A2:09E8
cs=0x1a2;eip=0x0009ec; 	X(MOV(*(dd*)(raddr(ds,di+0x24)), ebx));	// 1202 mov     [di+24h], ebx ;~ 01A2:09EC
cs=0x1a2;eip=0x0009f0; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x15))));	// 1203 mov     eax, [si+15h] ;~ 01A2:09F0
cs=0x1a2;eip=0x0009f4; 	T(CMP(eax, 0x0FFFFF));	// 1204 cmp     eax, 0FFFFFh ;~ 01A2:09F4
cs=0x1a2;eip=0x0009fa; 	J(JC(loc_10a0f));	// 1205 jb      short loc_10A0F ;~ 01A2:09FA
cs=0x1a2;eip=0x0009fc; 	T(XOR(eax, eax));	// 1206 xor     eax, eax ;~ 01A2:09FC
cs=0x1a2;eip=0x0009ff; 	X(MOV(*(dd*)(raddr(ds,di+0x24)), eax));	// 1207 mov     [di+24h], eax ;~ 01A2:09FF
cs=0x1a2;eip=0x000a03; 	X(MOV(*(dd*)(raddr(ds,di+0x28)), eax));	// 1208 mov     [di+28h], eax ;~ 01A2:0A03
cs=0x1a2;eip=0x000a07; 	T(DEC(edx));	// 1209 dec     edx ;~ 01A2:0A07
cs=0x1a2;eip=0x000a09; 	X(MOV(*(dd*)(raddr(ds,di+0x2C)), edx));	// 1210 mov     [di+2Ch], edx ;~ 01A2:0A09
cs=0x1a2;eip=0x000a0d; 	J(JMP(loc_10a20));	// 1211 jmp     short loc_10A20 ;~ 01A2:0A0D
loc_10a0f:
	// 4460 
cs=0x1a2;eip=0x000a0f; 	X(MOV(*(dd*)(raddr(ds,di+0x2C)), eax));	// 1215 mov     [di+2Ch], eax ;~ 01A2:0A0F
cs=0x1a2;eip=0x000a13; 	T(SUB(eax, ebx));	// 1216 sub     eax, ebx ;~ 01A2:0A13
cs=0x1a2;eip=0x000a16; 	T(INC(eax));	// 1217 inc     eax ;~ 01A2:0A16
cs=0x1a2;eip=0x000a18; 	X(MOV(*(dd*)(raddr(ds,di+0x28)), eax));	// 1218 mov     [di+28h], eax ;~ 01A2:0A18
cs=0x1a2;eip=0x000a1c; 	X(OR(*(raddr(ds,di+0x3C)), 8));	// 1219 or      byte ptr [di+3Ch], 8 ;~ 01A2:0A1C
loc_10a20:
	// 4461 
cs=0x1a2;eip=0x000a20; 	T(ADD(si, 0x19));	// 1222 add     si, 19h ;~ 01A2:0A20
cs=0x1a2;eip=0x000a23; 	T(ADD(di, 0x40));	// 1223 add     di, 40h ; '@' ;~ 01A2:0A23
cs=0x1a2;eip=0x000a26; 	T(DEC(cx));	// 1224 dec     cx ;~ 01A2:0A26
cs=0x1a2;eip=0x000a27; 	J(JNZ(loc_109bd));	// 1225 jnz     short loc_109BD ;~ 01A2:0A27
cs=0x1a2;eip=0x000a29; 	T(MOV(cx, word_245f2));	// 1226 mov     cx, word_245F2 ;~ 01A2:0A29
loc_10a2d:
	// 4462 
cs=0x1a2;eip=0x000a2d; 	X(PUSH(cx));	// 1229 push    cx ;~ 01A2:0A2D
cs=0x1a2;eip=0x000a2e; 	T(MOV(dx, offset(seg003,in_)));	// 1230 mov     dx, offset in_ ;~ 01A2:0A2E
cs=0x1a2;eip=0x000a31; 	T(MOV(cx, 0x600));	// 1231 mov     cx, 600h ;~ 01A2:0A31
cs=0x1a2;eip=0x000a34; 	J(CALL(_dosfread,0));	// 1232 call    _dosfread ;~ 01A2:0A34
cs=0x1a2;eip=0x000a37; 	J(CALL(_memalloc12k,0));	// 1233 call    _memalloc12k ;~ 01A2:0A37
cs=0x1a2;eip=0x000a3a; 	T(MOV(si, offset(seg003,in_)));	// 1234 mov     si, offset in_ ;~ 01A2:0A3A
cs=0x1a2;eip=0x000a3d; 	T(MOV(cx, 0x40));	// 1235 mov     cx, 40h ; '@' ;~ 01A2:0A3D
loc_10a40:
	// 4463 
cs=0x1a2;eip=0x000a40; 	X(PUSH(cx));	// 1238 push    cx ;~ 01A2:0A40
cs=0x1a2;eip=0x000a41; 	T(MOV(cx, word_245d4));	// 1239 mov     cx, word_245D4 ;~ 01A2:0A41
cs=0x1a2;eip=0x000a45; 	T(XOR(ch, ch));	// 1240 xor     ch, ch ;~ 01A2:0A45
loc_10a47:
	// 4464 
cs=0x1a2;eip=0x000a47; 	X(PUSH(cx));	// 1243 push    cx ;~ 01A2:0A47
cs=0x1a2;eip=0x000a48; 	T(MOV(al, *(raddr(ds,si))));	// 1244 mov     al, [si] ;~ 01A2:0A48
cs=0x1a2;eip=0x000a4a; 	T(XOR(bx, bx));	// 1245 xor     bx, bx ;~ 01A2:0A4A
cs=0x1a2;eip=0x000a4c; 	T(MOV(cl, 0x0FF));	// 1246 mov     cl, 0FFh ;~ 01A2:0A4C
cs=0x1a2;eip=0x000a4e; 	T(CMP(al, 0x0FF));	// 1247 cmp     al, 0FFh ;~ 01A2:0A4E
cs=0x1a2;eip=0x000a50; 	J(JZ(loc_10a83));	// 1248 jz      short loc_10A83 ;~ 01A2:0A50
cs=0x1a2;eip=0x000a52; 	T(CMP(al, 0x0FE));	// 1249 cmp     al, 0FEh ; 'þ' ;~ 01A2:0A52
cs=0x1a2;eip=0x000a54; 	J(JZ(loc_10a75));	// 1250 jz      short loc_10A75 ;~ 01A2:0A54
cs=0x1a2;eip=0x000a56; 	T(SHR(al, 2));	// 1251 shr     al, 2 ;~ 01A2:0A56
cs=0x1a2;eip=0x000a59; 	T(XOR(ah, ah));	// 1252 xor     ah, ah ;~ 01A2:0A59
cs=0x1a2;eip=0x000a5b; 	T(MOV(dl, 0x0C));	// 1253 mov     dl, 0Ch ;~ 01A2:0A5B
cs=0x1a2;eip=0x000a5d; 	T(DIV1(dl));	// 1254 div     dl ;~ 01A2:0A5D
cs=0x1a2;eip=0x000a5f; 	T(INC(ah));	// 1255 inc     ah ;~ 01A2:0A5F
cs=0x1a2;eip=0x000a61; 	T(SHL(al, 4));	// 1256 shl     al, 4 ;~ 01A2:0A61
cs=0x1a2;eip=0x000a64; 	T(OR(al, ah));	// 1257 or      al, ah ;~ 01A2:0A64
cs=0x1a2;eip=0x000a66; 	T(MOV(bl, al));	// 1258 mov     bl, al ;~ 01A2:0A66
cs=0x1a2;eip=0x000a68; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 1259 mov     ax, [si] ;~ 01A2:0A68
cs=0x1a2;eip=0x000a6a; 	T(XCHG(al, ah));	// 1260 xchg    al, ah ;~ 01A2:0A6A
cs=0x1a2;eip=0x000a6c; 	T(SHR(ax, 4));	// 1261 shr     ax, 4 ;~ 01A2:0A6C
cs=0x1a2;eip=0x000a6f; 	T(AND(al, 0x3F));	// 1262 and     al, 3Fh ;~ 01A2:0A6F
cs=0x1a2;eip=0x000a71; 	T(INC(al));	// 1263 inc     al ;~ 01A2:0A71
cs=0x1a2;eip=0x000a73; 	T(MOV(bh, al));	// 1264 mov     bh, al ;~ 01A2:0A73
loc_10a75:
	// 4465 
cs=0x1a2;eip=0x000a75; 	T(MOV(al, *(raddr(ds,si+1))));	// 1267 mov     al, [si+1] ;~ 01A2:0A75
cs=0x1a2;eip=0x000a78; 	T(AND(al, 0x0F));	// 1268 and     al, 0Fh ;~ 01A2:0A78
cs=0x1a2;eip=0x000a7a; 	T(MOV(ah, 0x44));	// 1269 mov     ah, 44h ; 'D' ;~ 01A2:0A7A
cs=0x1a2;eip=0x000a7c; 	T(MUL1_1(ah));	// 1270 mul     ah ;~ 01A2:0A7C
cs=0x1a2;eip=0x000a7e; 	T(SHR(ax, 4));	// 1271 shr     ax, 4 ;~ 01A2:0A7E
cs=0x1a2;eip=0x000a81; 	T(MOV(cl, al));	// 1272 mov     cl, al ;~ 01A2:0A81
loc_10a83:
	// 4466 
cs=0x1a2;eip=0x000a83; 	T(MOV(al, *(raddr(ds,si+2))));	// 1275 mov     al, [si+2] ;~ 01A2:0A83
cs=0x1a2;eip=0x000a86; 	T(MOV(ah, al));	// 1276 mov     ah, al ;~ 01A2:0A86
cs=0x1a2;eip=0x000a88; 	T(AND(ah, 0x0F));	// 1277 and     ah, 0Fh ;~ 01A2:0A88
cs=0x1a2;eip=0x000a8b; 	T(MOV(dh, ah));	// 1278 mov     dh, ah ;~ 01A2:0A8B
cs=0x1a2;eip=0x000a8d; 	T(SHR(al, 4));	// 1279 shr     al, 4 ;~ 01A2:0A8D
cs=0x1a2;eip=0x000a90; 	T(CMP(al, 5));	// 1280 cmp     al, 5 ;~ 01A2:0A90
cs=0x1a2;eip=0x000a92; 	J(JA(loc_10aaa));	// 1281 ja      short loc_10AAA ;~ 01A2:0A92
cs=0x1a2;eip=0x000a94; 	T(MOV(dl, 0x0F));	// 1282 mov     dl, 0Fh ;~ 01A2:0A94
cs=0x1a2;eip=0x000a96; 	J(JZ(loc_10aac));	// 1283 jz      short loc_10AAC ;~ 01A2:0A96
cs=0x1a2;eip=0x000a98; 	T(CMP(al, 4));	// 1284 cmp     al, 4 ;~ 01A2:0A98
cs=0x1a2;eip=0x000a9a; 	J(JZ(loc_10aaa));	// 1285 jz      short loc_10AAA ;~ 01A2:0A9A
cs=0x1a2;eip=0x000a9c; 	T(CMP(al, 2));	// 1286 cmp     al, 2 ;~ 01A2:0A9C
cs=0x1a2;eip=0x000a9e; 	J(JZ(loc_10aaa));	// 1287 jz      short loc_10AAA ;~ 01A2:0A9E
cs=0x1a2;eip=0x000aa0; 	T(CMP(al, 3));	// 1288 cmp     al, 3 ;~ 01A2:0AA0
cs=0x1a2;eip=0x000aa2; 	J(JNZ(loc_10aaa));	// 1289 jnz     short loc_10AAA ;~ 01A2:0AA2
cs=0x1a2;eip=0x000aa4; 	T(MOV(dl, 1));	// 1290 mov     dl, 1 ;~ 01A2:0AA4
cs=0x1a2;eip=0x000aa6; 	T(MOV(dh, ah));	// 1291 mov     dh, ah ;~ 01A2:0AA6
cs=0x1a2;eip=0x000aa8; 	J(JMP(loc_10aac));	// 1292 jmp     short loc_10AAC ;~ 01A2:0AA8
loc_10aaa:
	// 4467 
cs=0x1a2;eip=0x000aaa; 	T(XOR(dx, dx));	// 1297 xor     dx, dx ;~ 01A2:0AAA
loc_10aac:
	// 4468 
cs=0x1a2;eip=0x000aac; 	J(CALL(sub_11ba6,0));	// 1301 call    sub_11BA6 ;~ 01A2:0AAC
cs=0x1a2;eip=0x000aaf; 	T(ADD(si, 3));	// 1302 add     si, 3 ;~ 01A2:0AAF
cs=0x1a2;eip=0x000ab2; 	X(POP(cx));	// 1303 pop     cx ;~ 01A2:0AB2
cs=0x1a2;eip=0x000ab3; 	T(INC(ch));	// 1304 inc     ch ;~ 01A2:0AB3
cs=0x1a2;eip=0x000ab5; 	T(CMP(ch, cl));	// 1305 cmp     ch, cl ;~ 01A2:0AB5
cs=0x1a2;eip=0x000ab7; 	J(JC(loc_10a47));	// 1306 jb      short loc_10A47 ;~ 01A2:0AB7
cs=0x1a2;eip=0x000ab9; 	X(MOV(*(raddr(es,di)), 0));	// 1307 mov     byte ptr es:[di], 0 ;~ 01A2:0AB9
cs=0x1a2;eip=0x000abd; 	T(INC(di));	// 1308 inc     di ;~ 01A2:0ABD
cs=0x1a2;eip=0x000abe; 	X(POP(cx));	// 1309 pop     cx ;~ 01A2:0ABE
cs=0x1a2;eip=0x000abf; 	T(DEC(cx));	// 1310 dec     cx ;~ 01A2:0ABF
cs=0x1a2;eip=0x000ac0; 	J(JNZ(loc_10a40));	// 1311 jnz     loc_10A40 ;~ 01A2:0AC0
cs=0x1a2;eip=0x000ac4; 	J(CALL(_mem_reallocx,0));	// 1312 call    _mem_reallocx ;~ 01A2:0AC4
cs=0x1a2;eip=0x000ac7; 	X(POP(cx));	// 1313 pop     cx ;~ 01A2:0AC7
cs=0x1a2;eip=0x000ac8; 	T(DEC(cx));	// 1314 dec     cx ;~ 01A2:0AC8
cs=0x1a2;eip=0x000ac9; 	J(JNZ(loc_10a2d));	// 1315 jnz     loc_10A2D ;~ 01A2:0AC9
cs=0x1a2;eip=0x000acd; 	J(CALL(_mod_readfile_11f4e,0));	// 1316 call    near ptr _mod_readfile_11F4E ;~ 01A2:0ACD
cs=0x1a2;eip=0x000ad0; 	J(JC(loc_10099));	// 1317 jb      loc_10099 ;~ 01A2:0AD0
cs=0x1a2;eip=0x000ad4; 	J(RETN(0));	// 1318 retn ;~ 01A2:0AD4
seg000_b5a_proc:
	// 1372 
loc_10b5a:
	// 4471 
cs=0x1a2;eip=0x000b5a; 	X(PUSH(cx));	// 1373 push    cx ;~ 01A2:0B5A
cs=0x1a2;eip=0x000b5b; 	T(MOV(cx, 0x16));	// 1374 mov     cx, 16h         ; count ;~ 01A2:0B5B
cs=0x1a2;eip=0x000b5e; 	J(CALL(_copy_printable,0));	// 1375 call    _copy_printable ;~ 01A2:0B5E
cs=0x1a2;eip=0x000b61; 	X(POP(cx));	// 1376 pop     cx ;~ 01A2:0B61
cs=0x1a2;eip=0x000b62; 	T(MOV(edx, *(dd*)(raddr(ds,si+0x16))));	// 1377 mov     edx, [si+16h] ;~ 01A2:0B62
cs=0x1a2;eip=0x000b66; 	T(CMP(edx, 0x100000));	// 1378 cmp     edx, 100000h ;~ 01A2:0B66
cs=0x1a2;eip=0x000b6d; 	T(CMC);	// 1379 cmc ;~ 01A2:0B6D
cs=0x1a2;eip=0x000b6e; 	X(ADC(word_24662, 0));	// 1380 adc     word_24662, 0 ;~ 01A2:0B6E
cs=0x1a2;eip=0x000b73; 	X(MOV(*(dd*)(raddr(ds,di+0x20)), edx));	// 1381 mov     [di+20h], edx ;~ 01A2:0B73
cs=0x1a2;eip=0x000b77; 	X(ADD(dword_245c4, edx));	// 1382 add     dword_245C4, edx ;~ 01A2:0B77
cs=0x1a2;eip=0x000b7c; 	T(MOV(al, *(raddr(ds,si+0x23))));	// 1383 mov     al, [si+23h] ;~ 01A2:0B7C
cs=0x1a2;eip=0x000b7f; 	X(MOV(*(raddr(ds,di+0x3D)), al));	// 1384 mov     [di+3Dh], al ;~ 01A2:0B7F
cs=0x1a2;eip=0x000b82; 	T(MOV(al, *(raddr(ds,si+0x22))));	// 1385 mov     al, [si+22h] ;~ 01A2:0B82
cs=0x1a2;eip=0x000b85; 	T(AND(al, 0x0F));	// 1386 and     al, 0Fh ;~ 01A2:0B85
cs=0x1a2;eip=0x000b87; 	X(MOV(*(raddr(ds,di+0x3E)), al));	// 1387 mov     [di+3Eh], al ;~ 01A2:0B87
cs=0x1a2;eip=0x000b8a; 	T(MOV(ax, _freq_245de));	// 1388 mov     ax, _freq_245DE ;~ 01A2:0B8A
cs=0x1a2;eip=0x000b8d; 	X(MOV(*(dw*)(raddr(ds,di+0x36)), ax));	// 1389 mov     [di+36h], ax ;~ 01A2:0B8D
cs=0x1a2;eip=0x000b90; 	T(MOV(ebx, *(dd*)(raddr(ds,si+0x1A))));	// 1390 mov     ebx, [si+1Ah] ;~ 01A2:0B90
cs=0x1a2;eip=0x000b94; 	X(MOV(*(dd*)(raddr(ds,di+0x24)), ebx));	// 1391 mov     [di+24h], ebx ;~ 01A2:0B94
cs=0x1a2;eip=0x000b98; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x1E))));	// 1392 mov     eax, [si+1Eh] ;~ 01A2:0B98
cs=0x1a2;eip=0x000b9c; 	T(CMP(eax, 2));	// 1393 cmp     eax, 2 ;~ 01A2:0B9C
cs=0x1a2;eip=0x000ba0; 	J(JA(loc_10bb5));	// 1394 ja      short loc_10BB5 ;~ 01A2:0BA0
cs=0x1a2;eip=0x000ba2; 	T(XOR(eax, eax));	// 1395 xor     eax, eax ;~ 01A2:0BA2
cs=0x1a2;eip=0x000ba5; 	X(MOV(*(dd*)(raddr(ds,di+0x24)), eax));	// 1396 mov     [di+24h], eax ;~ 01A2:0BA5
cs=0x1a2;eip=0x000ba9; 	X(MOV(*(dd*)(raddr(ds,di+0x28)), eax));	// 1397 mov     [di+28h], eax ;~ 01A2:0BA9
cs=0x1a2;eip=0x000bad; 	T(DEC(edx));	// 1398 dec     edx ;~ 01A2:0BAD
cs=0x1a2;eip=0x000baf; 	X(MOV(*(dd*)(raddr(ds,di+0x2C)), edx));	// 1399 mov     [di+2Ch], edx ;~ 01A2:0BAF
cs=0x1a2;eip=0x000bb3; 	J(JMP(loc_10bc6));	// 1400 jmp     short loc_10BC6 ;~ 01A2:0BB3
loc_10bb5:
	// 4472 
cs=0x1a2;eip=0x000bb5; 	X(MOV(*(dd*)(raddr(ds,di+0x2C)), eax));	// 1404 mov     [di+2Ch], eax ;~ 01A2:0BB5
cs=0x1a2;eip=0x000bb9; 	T(SUB(eax, ebx));	// 1405 sub     eax, ebx ;~ 01A2:0BB9
cs=0x1a2;eip=0x000bbc; 	T(INC(eax));	// 1406 inc     eax ;~ 01A2:0BBC
cs=0x1a2;eip=0x000bbe; 	X(MOV(*(dd*)(raddr(ds,di+0x28)), eax));	// 1407 mov     [di+28h], eax ;~ 01A2:0BBE
cs=0x1a2;eip=0x000bc2; 	X(OR(*(raddr(ds,di+0x3C)), 8));	// 1408 or      byte ptr [di+3Ch], 8 ;~ 01A2:0BC2
loc_10bc6:
	// 4473 
cs=0x1a2;eip=0x000bc6; 	T(ADD(si, 0x25));	// 1411 add     si, 25h ; '%' ;~ 01A2:0BC6
cs=0x1a2;eip=0x000bc9; 	T(ADD(di, 0x40));	// 1412 add     di, 40h ; '@' ;~ 01A2:0BC9
cs=0x1a2;eip=0x000bcc; 	T(DEC(cx));	// 1413 dec     cx ;~ 01A2:0BCC
cs=0x1a2;eip=0x000bcd; 	J(JNZ(loc_10b5a));	// 1414 jnz     short loc_10B5A ;~ 01A2:0BCD
cs=0x1a2;eip=0x000bcf; 	T(MOV(di, offset(seg003,byte_27fe8)));	// 1415 mov     di, offset byte_27FE8 ;~ 01A2:0BCF
cs=0x1a2;eip=0x000bd2; 	T(MOV(cx, 0x20));	// 1416 mov     cx, 20h ; ' ' ;~ 01A2:0BD2
cs=0x1a2;eip=0x000bd5; 	T(CLD);	// 1417 cld ;~ 01A2:0BD5
	// 1418 rep movsd ;~ 01A2:0BD6
cs=0x1a2;eip=0x000bd6; 	X(	REP MOVSD);	// 1418 rep movsd ;~ 01A2:0BD6
cs=0x1a2;eip=0x000bd9; 	T(IMUL3_2(ax,word_245d2,37));	// 1419 imul    ax, word_245D2, 37 ;~ 01A2:0BD9
cs=0x1a2;eip=0x000bde; 	T(ADD(ax, 0x0C2));	// 1420 add     ax, 0C2h ; 'Â' ;~ 01A2:0BDE
cs=0x1a2;eip=0x000be1; 	T(MOVZX(eax, ax));	// 1421 movzx   eax, ax ;~ 01A2:0BE1
cs=0x1a2;eip=0x000be5; 	X(MOV(_chrin, eax));	// 1422 mov     _chrin, eax ;~ 01A2:0BE5
cs=0x1a2;eip=0x000be9; 	T(MOVZX(eax, word_30520));	// 1423 movzx   eax, word_30520 ;~ 01A2:0BE9
cs=0x1a2;eip=0x000bef; 	T(IMUL2_4(eax,192));	// 1424 imul    eax, 192 ;~ 01A2:0BEF
cs=0x1a2;eip=0x000bf6; 	T(ADD(eax, _chrin));	// 1425 add     eax, _chrin ;~ 01A2:0BF6
cs=0x1a2;eip=0x000bfb; 	T(MOV(dx, offset(seg003,byte_33508)));	// 1426 mov     dx, offset byte_33508 ;~ 01A2:0BFB
cs=0x1a2;eip=0x000bfe; 	T(MOV(cx, word_245f2));	// 1427 mov     cx, word_245F2 ;~ 01A2:0BFE
cs=0x1a2;eip=0x000c02; 	T(SHL(cx, 6));	// 1428 shl     cx, 6 ;~ 01A2:0C02
cs=0x1a2;eip=0x000c05; 	J(CALL(_dosseek,0));	// 1429 call    _dosseek ;~ 01A2:0C05
cs=0x1a2;eip=0x000c08; 	T(MOV(si, offset(seg003,byte_33508)));	// 1430 mov     si, offset byte_33508 ;~ 01A2:0C08
cs=0x1a2;eip=0x000c0b; 	T(MOV(cx, word_245f2));	// 1431 mov     cx, word_245F2 ;~ 01A2:0C0B
cs=0x1a2;eip=0x000c0f; 	T(MOV(ax, 4));	// 1432 mov     ax, 4 ;~ 01A2:0C0F
loc_10c12:
	// 4474 
cs=0x1a2;eip=0x000c12; 	T(MOV(bp, 1));	// 1435 mov     bp, 1 ;~ 01A2:0C12
loc_10c15:
	// 4475 
cs=0x1a2;eip=0x000c15; 	T(CMP(*(dw*)(raddr(ds,si)), 0));	// 1438 cmp     word ptr [si], 0 ;~ 01A2:0C15
cs=0x1a2;eip=0x000c18; 	J(JZ(loc_10c20));	// 1439 jz      short loc_10C20 ;~ 01A2:0C18
cs=0x1a2;eip=0x000c1a; 	T(CMP(bp, ax));	// 1440 cmp     bp, ax ;~ 01A2:0C1A
cs=0x1a2;eip=0x000c1c; 	J(JC(loc_10c20));	// 1441 jb      short loc_10C20 ;~ 01A2:0C1C
cs=0x1a2;eip=0x000c1e; 	T(MOV(ax, bp));	// 1442 mov     ax, bp ;~ 01A2:0C1E
loc_10c20:
	// 4476 
cs=0x1a2;eip=0x000c20; 	T(ADD(si, 2));	// 1446 add     si, 2 ;~ 01A2:0C20
cs=0x1a2;eip=0x000c23; 	T(INC(bp));	// 1447 inc     bp ;~ 01A2:0C23
cs=0x1a2;eip=0x000c24; 	T(CMP(bp, 0x20));	// 1448 cmp     bp, 20h ; ' ' ;~ 01A2:0C24
cs=0x1a2;eip=0x000c27; 	J(JBE(loc_10c15));	// 1449 jbe     short loc_10C15 ;~ 01A2:0C27
cs=0x1a2;eip=0x000c29; 	T(DEC(cx));	// 1450 dec     cx ;~ 01A2:0C29
cs=0x1a2;eip=0x000c2a; 	J(JNZ(loc_10c12));	// 1451 jnz     short loc_10C12 ;~ 01A2:0C2A
cs=0x1a2;eip=0x000c2c; 	X(MOV(word_245d4, ax));	// 1452 mov     word_245D4, ax ;~ 01A2:0C2C
cs=0x1a2;eip=0x000c2f; 	T(MOV(bx, offset(seg003,byte_33508)));	// 1453 mov     bx, offset byte_33508 ;~ 01A2:0C2F
cs=0x1a2;eip=0x000c32; 	T(MOV(cx, word_245f2));	// 1454 mov     cx, word_245F2 ;~ 01A2:0C32
loc_10c36:
	// 4477 
cs=0x1a2;eip=0x000c36; 	X(PUSH(bx));	// 1457 push    bx ;~ 01A2:0C36
cs=0x1a2;eip=0x000c37; 	X(PUSH(cx));	// 1458 push    cx ;~ 01A2:0C37
cs=0x1a2;eip=0x000c38; 	T(MOV(si, offset(seg003,in_)));	// 1459 mov     si, offset in_ ;~ 01A2:0C38
cs=0x1a2;eip=0x000c3b; 	T(MOV(cx, word_245d4));	// 1460 mov     cx, word_245D4 ;~ 01A2:0C3B
loc_10c3f:
	// 4478 
cs=0x1a2;eip=0x000c3f; 	X(PUSH(bx));	// 1463 push    bx ;~ 01A2:0C3F
cs=0x1a2;eip=0x000c40; 	X(PUSH(cx));	// 1464 push    cx ;~ 01A2:0C40
cs=0x1a2;eip=0x000c41; 	X(PUSH(si));	// 1465 push    si ;~ 01A2:0C41
cs=0x1a2;eip=0x000c42; 	T(MOV(ax, *(dw*)(raddr(ds,bx))));	// 1466 mov     ax, [bx] ;~ 01A2:0C42
cs=0x1a2;eip=0x000c44; 	T(OR(ax, ax));	// 1467 or      ax, ax ;~ 01A2:0C44
cs=0x1a2;eip=0x000c46; 	J(JNZ(loc_10c5a));	// 1468 jnz     short loc_10C5A ;~ 01A2:0C46
cs=0x1a2;eip=0x000c48; 	T(MOV(ax, ds));	// 1469 mov     ax, ds ;~ 01A2:0C48
cs=0x1a2;eip=0x000c4a; 	T(MOV(es, ax));	// 1470 mov     es, ax ;~ 01A2:0C4A
cs=0x1a2;eip=0x000c4c; 	T(MOV(di, si));	// 1471 mov     di, si ;~ 01A2:0C4C
cs=0x1a2;eip=0x000c4e; 	T(MOV(cx, 48));	// 1472 mov     cx, 48 ;~ 01A2:0C4E
cs=0x1a2;eip=0x000c51; 	T(XOR(eax, eax));	// 1473 xor     eax, eax ;~ 01A2:0C51
cs=0x1a2;eip=0x000c54; 	T(CLD);	// 1474 cld ;~ 01A2:0C54
	// 1475 rep stosd ;~ 01A2:0C55
cs=0x1a2;eip=0x000c55; 	X(	REP STOSD);	// 1475 rep stosd ;~ 01A2:0C55
cs=0x1a2;eip=0x000c58; 	J(JMP(loc_10c73));	// 1476 jmp     short loc_10C73 ;~ 01A2:0C58
loc_10c5a:
	// 4479 
cs=0x1a2;eip=0x000c5a; 	T(DEC(ax));	// 1480 dec     ax ;~ 01A2:0C5A
cs=0x1a2;eip=0x000c5b; 	T(MOVZX(eax, ax));	// 1481 movzx   eax, ax ;~ 01A2:0C5B
cs=0x1a2;eip=0x000c5f; 	T(IMUL2_4(eax,192));	// 1482 imul    eax, 192 ;~ 01A2:0C5F
cs=0x1a2;eip=0x000c66; 	T(ADD(eax, _chrin));	// 1483 add     eax, _chrin ;~ 01A2:0C66
cs=0x1a2;eip=0x000c6b; 	T(MOV(dx, si));	// 1484 mov     dx, si ;~ 01A2:0C6B
cs=0x1a2;eip=0x000c6d; 	T(MOV(cx, 192));	// 1485 mov     cx, 192 ;~ 01A2:0C6D
cs=0x1a2;eip=0x000c70; 	J(CALL(_dosseek,0));	// 1486 call    _dosseek ;~ 01A2:0C70
loc_10c73:
	// 4480 
cs=0x1a2;eip=0x000c73; 	X(POP(si));	// 1489 pop     si ;~ 01A2:0C73
cs=0x1a2;eip=0x000c74; 	X(POP(cx));	// 1490 pop     cx ;~ 01A2:0C74
cs=0x1a2;eip=0x000c75; 	X(POP(bx));	// 1491 pop     bx ;~ 01A2:0C75
cs=0x1a2;eip=0x000c76; 	T(ADD(bx, 2));	// 1492 add     bx, 2 ;~ 01A2:0C76
cs=0x1a2;eip=0x000c79; 	T(ADD(si, 192));	// 1493 add     si, 192 ;~ 01A2:0C79
cs=0x1a2;eip=0x000c7d; 	T(DEC(cx));	// 1494 dec     cx ;~ 01A2:0C7D
cs=0x1a2;eip=0x000c7e; 	J(JNZ(loc_10c3f));	// 1495 jnz     short loc_10C3F ;~ 01A2:0C7E
cs=0x1a2;eip=0x000c80; 	J(CALL(_memalloc12k,0));	// 1496 call    _memalloc12k ;~ 01A2:0C80
cs=0x1a2;eip=0x000c83; 	T(MOV(si, offset(seg003,in_)));	// 1497 mov     si, offset in_ ;~ 01A2:0C83
cs=0x1a2;eip=0x000c86; 	T(MOV(cx, 0x40));	// 1498 mov     cx, 40h ; '@' ;~ 01A2:0C86
loc_10c89:
	// 4481 
cs=0x1a2;eip=0x000c89; 	X(PUSH(cx));	// 1501 push    cx ;~ 01A2:0C89
cs=0x1a2;eip=0x000c8a; 	X(PUSH(si));	// 1502 push    si ;~ 01A2:0C8A
cs=0x1a2;eip=0x000c8b; 	T(MOV(cx, word_245d4));	// 1503 mov     cx, word_245D4 ;~ 01A2:0C8B
cs=0x1a2;eip=0x000c8f; 	T(XOR(ch, ch));	// 1504 xor     ch, ch ;~ 01A2:0C8F
loc_10c91:
	// 4482 
cs=0x1a2;eip=0x000c91; 	X(PUSH(cx));	// 1507 push    cx ;~ 01A2:0C91
cs=0x1a2;eip=0x000c92; 	T(XOR(bx, bx));	// 1508 xor     bx, bx ;~ 01A2:0C92
cs=0x1a2;eip=0x000c94; 	T(MOV(al, *(raddr(ds,si))));	// 1509 mov     al, [si] ;~ 01A2:0C94
cs=0x1a2;eip=0x000c96; 	T(SHR(al, 2));	// 1510 shr     al, 2 ;~ 01A2:0C96
cs=0x1a2;eip=0x000c99; 	J(JZ(loc_10caa));	// 1511 jz      short loc_10CAA ;~ 01A2:0C99
cs=0x1a2;eip=0x000c9b; 	T(XOR(ah, ah));	// 1512 xor     ah, ah ;~ 01A2:0C9B
cs=0x1a2;eip=0x000c9d; 	T(MOV(dl, 0x0C));	// 1513 mov     dl, 0Ch ;~ 01A2:0C9D
cs=0x1a2;eip=0x000c9f; 	T(DIV1(dl));	// 1514 div     dl ;~ 01A2:0C9F
cs=0x1a2;eip=0x000ca1; 	T(INC(ah));	// 1515 inc     ah ;~ 01A2:0CA1
cs=0x1a2;eip=0x000ca3; 	T(SHL(al, 4));	// 1516 shl     al, 4 ;~ 01A2:0CA3
cs=0x1a2;eip=0x000ca6; 	T(OR(al, ah));	// 1517 or      al, ah ;~ 01A2:0CA6
cs=0x1a2;eip=0x000ca8; 	T(MOV(bl, al));	// 1518 mov     bl, al ;~ 01A2:0CA8
loc_10caa:
	// 4483 
cs=0x1a2;eip=0x000caa; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 1521 mov     ax, [si] ;~ 01A2:0CAA
cs=0x1a2;eip=0x000cac; 	T(MOV(dl, ah));	// 1522 mov     dl, ah ;~ 01A2:0CAC
cs=0x1a2;eip=0x000cae; 	T(XCHG(al, ah));	// 1523 xchg    al, ah ;~ 01A2:0CAE
cs=0x1a2;eip=0x000cb0; 	T(SHR(ax, 4));	// 1524 shr     ax, 4 ;~ 01A2:0CB0
cs=0x1a2;eip=0x000cb3; 	T(AND(al, 0x3F));	// 1525 and     al, 3Fh ;~ 01A2:0CB3
cs=0x1a2;eip=0x000cb5; 	T(MOV(bh, al));	// 1526 mov     bh, al ;~ 01A2:0CB5
cs=0x1a2;eip=0x000cb7; 	T(AND(dl, 0x0F));	// 1527 and     dl, 0Fh ;~ 01A2:0CB7
cs=0x1a2;eip=0x000cba; 	T(MOV(dh, *(raddr(ds,si+2))));	// 1528 mov     dh, [si+2] ;~ 01A2:0CBA
cs=0x1a2;eip=0x000cbd; 	T(MOV(cl, 0x0FF));	// 1529 mov     cl, 0FFh ;~ 01A2:0CBD
cs=0x1a2;eip=0x000cbf; 	J(CALL(sub_11ba6,0));	// 1530 call    sub_11BA6 ;~ 01A2:0CBF
cs=0x1a2;eip=0x000cc2; 	T(ADD(si, 192));	// 1531 add     si, 192 ;~ 01A2:0CC2
cs=0x1a2;eip=0x000cc6; 	X(POP(cx));	// 1532 pop     cx ;~ 01A2:0CC6
cs=0x1a2;eip=0x000cc7; 	T(INC(ch));	// 1533 inc     ch ;~ 01A2:0CC7
cs=0x1a2;eip=0x000cc9; 	T(CMP(ch, cl));	// 1534 cmp     ch, cl ;~ 01A2:0CC9
cs=0x1a2;eip=0x000ccb; 	J(JC(loc_10c91));	// 1535 jb      short loc_10C91 ;~ 01A2:0CCB
cs=0x1a2;eip=0x000ccd; 	X(MOV(*(raddr(es,di)), 0));	// 1536 mov     byte ptr es:[di], 0 ;~ 01A2:0CCD
cs=0x1a2;eip=0x000cd1; 	T(INC(di));	// 1537 inc     di ;~ 01A2:0CD1
cs=0x1a2;eip=0x000cd2; 	X(POP(si));	// 1538 pop     si ;~ 01A2:0CD2
cs=0x1a2;eip=0x000cd3; 	X(POP(cx));	// 1539 pop     cx ;~ 01A2:0CD3
cs=0x1a2;eip=0x000cd4; 	T(ADD(si, 3));	// 1540 add     si, 3 ;~ 01A2:0CD4
cs=0x1a2;eip=0x000cd7; 	T(DEC(cx));	// 1541 dec     cx ;~ 01A2:0CD7
cs=0x1a2;eip=0x000cd8; 	J(JNZ(loc_10c89));	// 1542 jnz     short loc_10C89 ;~ 01A2:0CD8
cs=0x1a2;eip=0x000cda; 	J(CALL(_mem_reallocx,0));	// 1543 call    _mem_reallocx ;~ 01A2:0CDA
cs=0x1a2;eip=0x000cdd; 	X(POP(cx));	// 1544 pop     cx ;~ 01A2:0CDD
cs=0x1a2;eip=0x000cde; 	X(POP(bx));	// 1545 pop     bx ;~ 01A2:0CDE
cs=0x1a2;eip=0x000cdf; 	T(ADD(bx, 0x40));	// 1546 add     bx, 40h ; '@' ;~ 01A2:0CDF
cs=0x1a2;eip=0x000ce2; 	T(DEC(cx));	// 1547 dec     cx ;~ 01A2:0CE2
cs=0x1a2;eip=0x000ce3; 	J(JNZ(loc_10c36));	// 1548 jnz     loc_10C36 ;~ 01A2:0CE3
cs=0x1a2;eip=0x000ce7; 	T(MOV(ax, 192));	// 1549 mov     ax, 192 ;~ 01A2:0CE7
cs=0x1a2;eip=0x000cea; 	X(MUL1_2(word_30520));	// 1550 mul     word_30520 ;~ 01A2:0CEA
cs=0x1a2;eip=0x000cee; 	T(MOV(cx, dx));	// 1551 mov     cx, dx ;~ 01A2:0CEE
cs=0x1a2;eip=0x000cf0; 	T(IMUL3_2(dx,word_245d2,37));	// 1552 imul    dx, word_245D2, 37 ;~ 01A2:0CF0
cs=0x1a2;eip=0x000cf5; 	T(ADD(dx, 0x0C2));	// 1553 add     dx, 0C2h ; 'Â' ;~ 01A2:0CF5
cs=0x1a2;eip=0x000cf9; 	T(ADD(dx, word_30524));	// 1554 add     dx, word_30524 ;~ 01A2:0CF9
cs=0x1a2;eip=0x000cfd; 	T(ADC(cx, 0));	// 1555 adc     cx, 0 ;~ 01A2:0CFD
cs=0x1a2;eip=0x000d00; 	T(ADD(dx, ax));	// 1556 add     dx, ax ;~ 01A2:0D00
cs=0x1a2;eip=0x000d02; 	T(ADC(cx, 0));	// 1557 adc     cx, 0 ;~ 01A2:0D02
cs=0x1a2;eip=0x000d05; 	T(MOV(ax, word_245f2));	// 1558 mov     ax, word_245F2 ;~ 01A2:0D05
cs=0x1a2;eip=0x000d08; 	T(SHL(ax, 6));	// 1559 shl     ax, 6 ;~ 01A2:0D08
cs=0x1a2;eip=0x000d0b; 	T(ADD(dx, ax));	// 1560 add     dx, ax ;~ 01A2:0D0B
cs=0x1a2;eip=0x000d0d; 	T(ADC(cx, 0));	// 1561 adc     cx, 0 ;~ 01A2:0D0D
cs=0x1a2;eip=0x000d10; 	T(MOV(bx, _fhandle_module));	// 1562 mov     bx, _fhandle_module ;~ 01A2:0D10
cs=0x1a2;eip=0x000d14; 	T(MOV(ax, 0x4200));	// 1563 mov     ax, 4200h ;~ 01A2:0D14
cs=0x1a2;eip=0x000d17; 	S(_INT(0x21));	// 1564 int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK) ;~ 01A2:0D17
cs=0x1a2;eip=0x000d19; 	X(ADC(word_24662, 0));	// 1566 adc     word_24662, 0 ;~ 01A2:0D19
cs=0x1a2;eip=0x000d1e; 	J(CALL(_mod_readfile_11f4e,0));	// 1567 call    near ptr _mod_readfile_11F4E ;~ 01A2:0D1E
cs=0x1a2;eip=0x000d21; 	J(JC(loc_10099));	// 1568 jb      loc_10099 ;~ 01A2:0D21
cs=0x1a2;eip=0x000d25; 	J(RETN(0));	// 1569 retn ;~ 01A2:0D25
_psm_module:
	// 1574 
cs=0x1a2;eip=0x000d26; 	X(MOV(_module_type_text, 0x204D5350));	// 1575 mov     _module_type_text, 204D5350h ;~ 01A2:0D26
cs=0x1a2;eip=0x000d2f; 	X(MOV(_moduleflag_246d0, 0x40));	// 1576 mov     _moduleflag_246D0, 1000000b ;~ 01A2:0D2F
cs=0x1a2;eip=0x000d35; 	T(MOV(ax, word_30556));	// 1577 mov     ax, word_30556 ;~ 01A2:0D35
cs=0x1a2;eip=0x000d38; 	X(MOV(word_245d4, ax));	// 1578 mov     word_245D4, ax ;~ 01A2:0D38
cs=0x1a2;eip=0x000d3b; 	T(MOV(ax, word_30554));	// 1579 mov     ax, word_30554 ;~ 01A2:0D3B
cs=0x1a2;eip=0x000d3e; 	X(MOV(word_245d2, ax));	// 1580 mov     word_245D2, ax ;~ 01A2:0D3E
cs=0x1a2;eip=0x000d41; 	X(MOV(_freq_245de, 8448));	// 1581 mov     _freq_245DE, 8448 ;~ 01A2:0D41
cs=0x1a2;eip=0x000d47; 	T(MOV(al, byte_3054b));	// 1582 mov     al, byte_3054B ;~ 01A2:0D47
cs=0x1a2;eip=0x000d4a; 	X(MOV(byte_24679, al));	// 1583 mov     byte_24679, al ;~ 01A2:0D4A
cs=0x1a2;eip=0x000d4d; 	T(MOV(al, byte_3054c));	// 1584 mov     al, byte_3054C ;~ 01A2:0D4D
cs=0x1a2;eip=0x000d50; 	X(MOV(byte_2467a, al));	// 1585 mov     byte_2467A, al ;~ 01A2:0D50
cs=0x1a2;eip=0x000d53; 	T(MOVZX(ax, byte_30550));	// 1586 movzx   ax, byte_30550 ;~ 01A2:0D53
cs=0x1a2;eip=0x000d58; 	X(MOV(word_245fa, ax));	// 1587 mov     word_245FA, ax ;~ 01A2:0D58
cs=0x1a2;eip=0x000d5b; 	T(MOV(ax, word_30552));	// 1588 mov     ax, word_30552 ;~ 01A2:0D5B
cs=0x1a2;eip=0x000d5e; 	X(MOV(word_245f2, ax));	// 1589 mov     word_245F2, ax ;~ 01A2:0D5E
cs=0x1a2;eip=0x000d61; 	T(MOV(ax, ds));	// 1590 mov     ax, ds ;~ 01A2:0D61
cs=0x1a2;eip=0x000d63; 	T(MOV(es, ax));	// 1591 mov     es, ax ;~ 01A2:0D63
cs=0x1a2;eip=0x000d65; 	T(MOV(si, offset(seg003,_myin)));	// 1592 mov     si, offset _myin ; in ;~ 01A2:0D65
cs=0x1a2;eip=0x000d68; 	T(MOV(di, offset(seg003,out_)));	// 1593 mov     di, offset out_ ; "                                " ;~ 01A2:0D68
cs=0x1a2;eip=0x000d6b; 	T(MOV(cx, 30));	// 1594 mov     cx, 30          ; count ;~ 01A2:0D6B
cs=0x1a2;eip=0x000d6e; 	J(CALL(_copy_printable,0));	// 1595 call    _copy_printable ;~ 01A2:0D6E
cs=0x1a2;eip=0x000d71; 	T(MOV(dx, offset(seg003,byte_3059a)));	// 1596 mov     dx, offset byte_3059A ;~ 01A2:0D71
cs=0x1a2;eip=0x000d74; 	T(MOV(cx, word_245d2));	// 1597 mov     cx, word_245D2 ;~ 01A2:0D74
cs=0x1a2;eip=0x000d78; 	T(SHL(cx, 6));	// 1598 shl     cx, 6 ;~ 01A2:0D78
cs=0x1a2;eip=0x000d7b; 	T(MOV(eax, dword_30566));	// 1599 mov     eax, dword_30566 ;~ 01A2:0D7B
cs=0x1a2;eip=0x000d7f; 	J(CALL(_dosseek,0));	// 1600 call    _dosseek ;~ 01A2:0D7F
cs=0x1a2;eip=0x000d82; 	T(MOV(si, offset(seg003,byte_3059a)));	// 1601 mov     si, offset byte_3059A ;~ 01A2:0D82
cs=0x1a2;eip=0x000d85; 	T(MOV(di, offset(seg003,_myout)));	// 1602 mov     di, offset _myout ; out ;~ 01A2:0D85
cs=0x1a2;eip=0x000d88; 	T(MOV(cx, word_245d2));	// 1603 mov     cx, word_245D2 ;~ 01A2:0D88
loc_10d8c:
	// 4484 
cs=0x1a2;eip=0x000d8c; 	X(PUSH(cx));	// 1606 push    cx ;~ 01A2:0D8C
cs=0x1a2;eip=0x000d8d; 	X(PUSH(si));	// 1607 push    si ;~ 01A2:0D8D
cs=0x1a2;eip=0x000d8e; 	T(ADD(si, 0x0D));	// 1608 add     si, 0Dh         ; in ;~ 01A2:0D8E
cs=0x1a2;eip=0x000d91; 	T(MOV(cx, 0x16));	// 1609 mov     cx, 16h         ; count ;~ 01A2:0D91
cs=0x1a2;eip=0x000d94; 	J(CALL(_copy_printable,0));	// 1610 call    _copy_printable ;~ 01A2:0D94
cs=0x1a2;eip=0x000d97; 	X(POP(si));	// 1611 pop     si ;~ 01A2:0D97
cs=0x1a2;eip=0x000d98; 	X(POP(cx));	// 1612 pop     cx ;~ 01A2:0D98
cs=0x1a2;eip=0x000d99; 	T(MOV(edx, *(dd*)(raddr(ds,si+0x30))));	// 1613 mov     edx, [si+30h] ;~ 01A2:0D99
cs=0x1a2;eip=0x000d9d; 	T(CMP(edx, 0x100000));	// 1614 cmp     edx, 100000h ;~ 01A2:0D9D
cs=0x1a2;eip=0x000da4; 	T(CMC);	// 1615 cmc ;~ 01A2:0DA4
cs=0x1a2;eip=0x000da5; 	X(ADC(word_24662, 0));	// 1616 adc     word_24662, 0 ;~ 01A2:0DA5
cs=0x1a2;eip=0x000daa; 	X(MOV(*(dd*)(raddr(ds,di+0x20)), edx));	// 1617 mov     [di+20h], edx ;~ 01A2:0DAA
cs=0x1a2;eip=0x000dae; 	X(ADD(dword_245c4, edx));	// 1618 add     dword_245C4, edx ;~ 01A2:0DAE
cs=0x1a2;eip=0x000db3; 	X(MOV(*(raddr(ds,di+0x3F)), 1));	// 1619 mov     byte ptr [di+3Fh], 1 ;~ 01A2:0DB3
cs=0x1a2;eip=0x000db7; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x25))));	// 1620 mov     eax, [si+25h] ;~ 01A2:0DB7
cs=0x1a2;eip=0x000dbb; 	X(MOV(*(dd*)(raddr(ds,di+0x38)), eax));	// 1621 mov     [di+38h], eax ;~ 01A2:0DBB
cs=0x1a2;eip=0x000dbf; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x3E))));	// 1622 mov     ax, [si+3Eh] ;~ 01A2:0DBF
cs=0x1a2;eip=0x000dc2; 	J(JNZ(loc_10dc7));	// 1623 jnz     short loc_10DC7 ;~ 01A2:0DC2
cs=0x1a2;eip=0x000dc4; 	T(MOV(ax, _freq_245de));	// 1624 mov     ax, _freq_245DE ;~ 01A2:0DC4
loc_10dc7:
	// 4485 
cs=0x1a2;eip=0x000dc7; 	X(MOV(*(dw*)(raddr(ds,di+0x36)), ax));	// 1627 mov     [di+36h], ax ;~ 01A2:0DC7
cs=0x1a2;eip=0x000dca; 	T(MOV(al, *(raddr(ds,si+0x3D))));	// 1628 mov     al, [si+3Dh] ;~ 01A2:0DCA
cs=0x1a2;eip=0x000dcd; 	X(MOV(*(raddr(ds,di+0x3D)), al));	// 1629 mov     [di+3Dh], al ;~ 01A2:0DCD
cs=0x1a2;eip=0x000dd0; 	T(MOV(ebx, *(dd*)(raddr(ds,si+0x34))));	// 1630 mov     ebx, [si+34h] ;~ 01A2:0DD0
cs=0x1a2;eip=0x000dd4; 	X(MOV(*(dd*)(raddr(ds,di+0x24)), ebx));	// 1631 mov     [di+24h], ebx ;~ 01A2:0DD4
cs=0x1a2;eip=0x000dd8; 	T(OR(ebx, ebx));	// 1632 or      ebx, ebx ;~ 01A2:0DD8
cs=0x1a2;eip=0x000ddb; 	J(JNZ(loc_10df0));	// 1633 jnz     short loc_10DF0 ;~ 01A2:0DDB
cs=0x1a2;eip=0x000ddd; 	T(XOR(eax, eax));	// 1634 xor     eax, eax ;~ 01A2:0DDD
cs=0x1a2;eip=0x000de0; 	X(MOV(*(dd*)(raddr(ds,di+0x24)), eax));	// 1635 mov     [di+24h], eax ;~ 01A2:0DE0
cs=0x1a2;eip=0x000de4; 	X(MOV(*(dd*)(raddr(ds,di+0x28)), eax));	// 1636 mov     [di+28h], eax ;~ 01A2:0DE4
cs=0x1a2;eip=0x000de8; 	T(DEC(edx));	// 1637 dec     edx ;~ 01A2:0DE8
cs=0x1a2;eip=0x000dea; 	X(MOV(*(dd*)(raddr(ds,di+0x2C)), edx));	// 1638 mov     [di+2Ch], edx ;~ 01A2:0DEA
cs=0x1a2;eip=0x000dee; 	J(JMP(loc_10e19));	// 1639 jmp     short loc_10E19 ;~ 01A2:0DEE
loc_10df0:
	// 4486 
cs=0x1a2;eip=0x000df0; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x38))));	// 1643 mov     eax, [si+38h] ;~ 01A2:0DF0
cs=0x1a2;eip=0x000df4; 	X(MOV(*(dd*)(raddr(ds,di+0x28)), eax));	// 1644 mov     [di+28h], eax ;~ 01A2:0DF4
cs=0x1a2;eip=0x000df8; 	T(ADD(eax, ebx));	// 1645 add     eax, ebx ;~ 01A2:0DF8
cs=0x1a2;eip=0x000dfb; 	T(DEC(eax));	// 1646 dec     eax ;~ 01A2:0DFB
cs=0x1a2;eip=0x000dfd; 	X(MOV(*(dd*)(raddr(ds,di+0x2C)), eax));	// 1647 mov     [di+2Ch], eax ;~ 01A2:0DFD
cs=0x1a2;eip=0x000e01; 	T(CMP(eax, edx));	// 1648 cmp     eax, edx ;~ 01A2:0E01
cs=0x1a2;eip=0x000e04; 	J(JC(loc_10e15));	// 1649 jb      short loc_10E15 ;~ 01A2:0E04
cs=0x1a2;eip=0x000e06; 	T(DEC(edx));	// 1650 dec     edx ;~ 01A2:0E06
cs=0x1a2;eip=0x000e08; 	X(MOV(*(dd*)(raddr(ds,di+0x2C)), edx));	// 1651 mov     [di+2Ch], edx ;~ 01A2:0E08
cs=0x1a2;eip=0x000e0c; 	T(SUB(edx, ebx));	// 1652 sub     edx, ebx ;~ 01A2:0E0C
cs=0x1a2;eip=0x000e0f; 	T(INC(edx));	// 1653 inc     edx ;~ 01A2:0E0F
cs=0x1a2;eip=0x000e11; 	X(MOV(*(dd*)(raddr(ds,di+0x28)), edx));	// 1654 mov     [di+28h], edx ;~ 01A2:0E11
loc_10e15:
	// 4487 
cs=0x1a2;eip=0x000e15; 	X(OR(*(raddr(ds,di+0x3C)), 8));	// 1657 or      byte ptr [di+3Ch], 8 ;~ 01A2:0E15
loc_10e19:
	// 4488 
cs=0x1a2;eip=0x000e19; 	T(ADD(si, 0x40));	// 1660 add     si, 40h ; '@' ;~ 01A2:0E19
cs=0x1a2;eip=0x000e1c; 	T(ADD(di, 0x40));	// 1661 add     di, 40h ; '@' ;~ 01A2:0E1C
cs=0x1a2;eip=0x000e1f; 	T(DEC(cx));	// 1662 dec     cx ;~ 01A2:0E1F
cs=0x1a2;eip=0x000e20; 	J(JNZ(loc_10d8c));	// 1663 jnz     loc_10D8C ;~ 01A2:0E20
cs=0x1a2;eip=0x000e24; 	T(MOV(dx, offset(seg003,byte_27fe8)));	// 1664 mov     dx, offset byte_27FE8 ;~ 01A2:0E24
cs=0x1a2;eip=0x000e27; 	T(MOV(cx, word_245fa));	// 1665 mov     cx, word_245FA ;~ 01A2:0E27
cs=0x1a2;eip=0x000e2b; 	T(MOV(eax, dword_3055a));	// 1666 mov     eax, dword_3055A ;~ 01A2:0E2B
cs=0x1a2;eip=0x000e2f; 	J(CALL(_dosseek,0));	// 1667 call    _dosseek ;~ 01A2:0E2F
cs=0x1a2;eip=0x000e32; 	T(MOV(dx, word_30562));	// 1668 mov     dx, word_30562 ;~ 01A2:0E32
cs=0x1a2;eip=0x000e36; 	T(MOV(cx, word_30564));	// 1669 mov     cx, word_30564 ;~ 01A2:0E36
cs=0x1a2;eip=0x000e3a; 	T(MOV(bx, _fhandle_module));	// 1670 mov     bx, _fhandle_module ;~ 01A2:0E3A
cs=0x1a2;eip=0x000e3e; 	T(MOV(ax, 0x4200));	// 1671 mov     ax, 4200h ;~ 01A2:0E3E
cs=0x1a2;eip=0x000e41; 	S(_INT(0x21));	// 1672 int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK) ;~ 01A2:0E41
cs=0x1a2;eip=0x000e43; 	X(ADC(word_24662, 0));	// 1674 adc     word_24662, 0 ;~ 01A2:0E43
cs=0x1a2;eip=0x000e48; 	T(MOV(cx, word_245f2));	// 1675 mov     cx, word_245F2 ;~ 01A2:0E48
loc_10e4c:
	// 4489 
cs=0x1a2;eip=0x000e4c; 	X(PUSH(cx));	// 1678 push    cx ;~ 01A2:0E4C
cs=0x1a2;eip=0x000e4d; 	T(MOV(dx, offset(seg003,in_)));	// 1679 mov     dx, offset in_ ;~ 01A2:0E4D
cs=0x1a2;eip=0x000e50; 	T(MOV(cx, 4));	// 1680 mov     cx, 4 ;~ 01A2:0E50
cs=0x1a2;eip=0x000e53; 	J(CALL(_dosfread,0));	// 1681 call    _dosfread ;~ 01A2:0E53
cs=0x1a2;eip=0x000e56; 	T(XOR(si, si));	// 1682 xor     si, si ;~ 01A2:0E56
cs=0x1a2;eip=0x000e58; 	T(MOV(cx, word_245fa));	// 1683 mov     cx, word_245FA ;~ 01A2:0E58
cs=0x1a2;eip=0x000e5c; 	T(MOV(ax, _my_seg_index));	// 1684 mov     ax, _my_seg_index ;~ 01A2:0E5C
cs=0x1a2;eip=0x000e5f; 	T(MOV(dl, byte_3150a));	// 1685 mov     dl, byte_3150A ;~ 01A2:0E5F
cs=0x1a2;eip=0x000e63; 	T(DEC(dl));	// 1686 dec     dl ;~ 01A2:0E63
cs=0x1a2;eip=0x000e65; 	T(AND(dl, 0x3F));	// 1687 and     dl, 3Fh ;~ 01A2:0E65
loc_10e68:
	// 4490 
cs=0x1a2;eip=0x000e68; 	T(CMP(*((byte_27fe8)+si), al));	// 1690 cmp     byte_27FE8[si], al ;~ 01A2:0E68
cs=0x1a2;eip=0x000e6c; 	J(JNZ(loc_10e72));	// 1691 jnz     short loc_10E72 ;~ 01A2:0E6C
cs=0x1a2;eip=0x000e6e; 	X(MOV(*((byte_281e8)+si), dl));	// 1692 mov     byte_281E8[si], dl ;~ 01A2:0E6E
loc_10e72:
	// 4491 
cs=0x1a2;eip=0x000e72; 	T(INC(si));	// 1695 inc     si ;~ 01A2:0E72
cs=0x1a2;eip=0x000e73; 	T(DEC(cx));	// 1696 dec     cx ;~ 01A2:0E73
cs=0x1a2;eip=0x000e74; 	J(JNZ(loc_10e68));	// 1697 jnz     short loc_10E68 ;~ 01A2:0E74
cs=0x1a2;eip=0x000e76; 	T(MOV(dx, offset(seg003,byte_3150c)));	// 1698 mov     dx, offset byte_3150C ;~ 01A2:0E76
cs=0x1a2;eip=0x000e79; 	T(MOV(cx, in_));	// 1699 mov     cx, in_ ;~ 01A2:0E79
cs=0x1a2;eip=0x000e7d; 	T(SUB(cx, 4));	// 1700 sub     cx, 4 ;~ 01A2:0E7D
cs=0x1a2;eip=0x000e80; 	J(CALL(_dosfread,0));	// 1701 call    _dosfread ;~ 01A2:0E80
cs=0x1a2;eip=0x000e83; 	J(CALL(_memalloc12k,0));	// 1702 call    _memalloc12k ;~ 01A2:0E83
cs=0x1a2;eip=0x000e86; 	T(MOV(si, offset(seg003,byte_3150c)));	// 1703 mov     si, offset byte_3150C ;~ 01A2:0E86
cs=0x1a2;eip=0x000e89; 	T(MOV(cx, 0x40));	// 1704 mov     cx, 40h ; '@' ;~ 01A2:0E89
loc_10e8c:
	// 4492 
cs=0x1a2;eip=0x000e8c; 	X(PUSH(cx));	// 1707 push    cx ;~ 01A2:0E8C
cs=0x1a2;eip=0x000e8d; 	T(LODSB);	// 1708 lodsb ;~ 01A2:0E8D
cs=0x1a2;eip=0x000e8e; 	T(OR(al, al));	// 1709 or      al, al ;~ 01A2:0E8E
cs=0x1a2;eip=0x000e90; 	J(JZ(loc_10ef4));	// 1710 jz      short loc_10EF4 ;~ 01A2:0E90
loc_10e92:
	// 4493 
cs=0x1a2;eip=0x000e92; 	T(XOR(bx, bx));	// 1713 xor     bx, bx ;~ 01A2:0E92
cs=0x1a2;eip=0x000e94; 	T(MOV(ch, al));	// 1714 mov     ch, al ;~ 01A2:0E94
cs=0x1a2;eip=0x000e96; 	T(TEST(ch, 0x80));	// 1715 test    ch, 80h ;~ 01A2:0E96
cs=0x1a2;eip=0x000e99; 	J(JZ(loc_10ebd));	// 1716 jz      short loc_10EBD ;~ 01A2:0E99
cs=0x1a2;eip=0x000e9b; 	T(MOV(bx, *(dw*)(raddr(ds,si))));	// 1717 mov     bx, [si] ;~ 01A2:0E9B
cs=0x1a2;eip=0x000e9d; 	T(ADD(si, 2));	// 1718 add     si, 2 ;~ 01A2:0E9D
cs=0x1a2;eip=0x000ea0; 	T(OR(bl, bl));	// 1719 or      bl, bl ;~ 01A2:0EA0
cs=0x1a2;eip=0x000ea2; 	J(JZ(loc_10eb6));	// 1720 jz      short loc_10EB6 ;~ 01A2:0EA2
cs=0x1a2;eip=0x000ea4; 	T(DEC(bl));	// 1721 dec     bl ;~ 01A2:0EA4
cs=0x1a2;eip=0x000ea6; 	T(MOVZX(ax, bl));	// 1722 movzx   ax, bl ;~ 01A2:0EA6
cs=0x1a2;eip=0x000ea9; 	T(MOV(bl, 0x0C));	// 1723 mov     bl, 0Ch ;~ 01A2:0EA9
cs=0x1a2;eip=0x000eab; 	T(DIV1(bl));	// 1724 div     bl ;~ 01A2:0EAB
cs=0x1a2;eip=0x000ead; 	T(INC(ah));	// 1725 inc     ah ;~ 01A2:0EAD
cs=0x1a2;eip=0x000eaf; 	T(SHL(al, 4));	// 1726 shl     al, 4 ;~ 01A2:0EAF
cs=0x1a2;eip=0x000eb2; 	T(OR(al, ah));	// 1727 or      al, ah ;~ 01A2:0EB2
cs=0x1a2;eip=0x000eb4; 	T(MOV(bl, al));	// 1728 mov     bl, al ;~ 01A2:0EB4
loc_10eb6:
	// 4494 
cs=0x1a2;eip=0x000eb6; 	T(CMP(bh, 0x63));	// 1731 cmp     bh, 63h ; 'c' ;~ 01A2:0EB6
cs=0x1a2;eip=0x000eb9; 	J(JBE(loc_10ebd));	// 1732 jbe     short loc_10EBD ;~ 01A2:0EB9
cs=0x1a2;eip=0x000ebb; 	T(XOR(bh, bh));	// 1733 xor     bh, bh ;~ 01A2:0EBB
loc_10ebd:
	// 4495 
cs=0x1a2;eip=0x000ebd; 	T(MOV(cl, 0x0FF));	// 1737 mov     cl, 0FFh ;~ 01A2:0EBD
cs=0x1a2;eip=0x000ebf; 	T(TEST(ch, 0x40));	// 1738 test    ch, 40h ;~ 01A2:0EBF
cs=0x1a2;eip=0x000ec2; 	J(JZ(loc_10ece));	// 1739 jz      short loc_10ECE ;~ 01A2:0EC2
cs=0x1a2;eip=0x000ec4; 	T(MOV(cl, *(raddr(ds,si))));	// 1740 mov     cl, [si] ;~ 01A2:0EC4
cs=0x1a2;eip=0x000ec6; 	T(INC(si));	// 1741 inc     si ;~ 01A2:0EC6
cs=0x1a2;eip=0x000ec7; 	T(CMP(cl, 0x40));	// 1742 cmp     cl, 40h ; '@' ;~ 01A2:0EC7
cs=0x1a2;eip=0x000eca; 	J(JBE(loc_10ece));	// 1743 jbe     short loc_10ECE ;~ 01A2:0ECA
cs=0x1a2;eip=0x000ecc; 	T(MOV(cl, 0x0FF));	// 1744 mov     cl, 0FFh ;~ 01A2:0ECC
loc_10ece:
	// 4496 
cs=0x1a2;eip=0x000ece; 	T(TEST(ch, 0x20));	// 1748 test    ch, 20h ;~ 01A2:0ECE
cs=0x1a2;eip=0x000ed1; 	J(JZ(loc_10edd));	// 1749 jz      short loc_10EDD ;~ 01A2:0ED1
cs=0x1a2;eip=0x000ed3; 	T(MOV(dx, *(dw*)(raddr(ds,si))));	// 1750 mov     dx, [si] ;~ 01A2:0ED3
cs=0x1a2;eip=0x000ed5; 	T(ADD(si, 2));	// 1751 add     si, 2 ;~ 01A2:0ED5
cs=0x1a2;eip=0x000ed8; 	T(CMP(dl, 0x0F));	// 1752 cmp     dl, 0Fh ;~ 01A2:0ED8
cs=0x1a2;eip=0x000edb; 	J(JBE(loc_10edf));	// 1753 jbe     short loc_10EDF ;~ 01A2:0EDB
loc_10edd:
	// 4497 
cs=0x1a2;eip=0x000edd; 	T(XOR(dx, dx));	// 1756 xor     dx, dx ;~ 01A2:0EDD
loc_10edf:
	// 4498 
cs=0x1a2;eip=0x000edf; 	T(AND(ch, 0x1F));	// 1759 and     ch, 1Fh ;~ 01A2:0EDF
cs=0x1a2;eip=0x000ee2; 	T(CMP(*(db*)(((db*)&word_245d4)+1), ch));	// 1760 cmp     byte ptr word_245D4+1, ch ;~ 01A2:0EE2
cs=0x1a2;eip=0x000ee6; 	J(JNC(loc_10eec));	// 1761 jnb     short loc_10EEC ;~ 01A2:0EE6
cs=0x1a2;eip=0x000ee8; 	X(MOV(*(db*)(((db*)&word_245d4)+1), ch));	// 1762 mov     byte ptr word_245D4+1, ch ;~ 01A2:0EE8
loc_10eec:
	// 4499 
cs=0x1a2;eip=0x000eec; 	J(CALL(sub_11ba6,0));	// 1765 call    sub_11BA6 ;~ 01A2:0EEC
cs=0x1a2;eip=0x000eef; 	T(LODSB);	// 1766 lodsb ;~ 01A2:0EEF
cs=0x1a2;eip=0x000ef0; 	T(OR(al, al));	// 1767 or      al, al ;~ 01A2:0EF0
cs=0x1a2;eip=0x000ef2; 	J(JNZ(loc_10e92));	// 1768 jnz     short loc_10E92 ;~ 01A2:0EF2
loc_10ef4:
	// 4500 
cs=0x1a2;eip=0x000ef4; 	X(MOV(*(raddr(es,di)), 0));	// 1771 mov     byte ptr es:[di], 0 ;~ 01A2:0EF4
cs=0x1a2;eip=0x000ef8; 	T(INC(di));	// 1772 inc     di ;~ 01A2:0EF8
cs=0x1a2;eip=0x000ef9; 	X(POP(cx));	// 1773 pop     cx ;~ 01A2:0EF9
cs=0x1a2;eip=0x000efa; 	T(DEC(cx));	// 1774 dec     cx ;~ 01A2:0EFA
cs=0x1a2;eip=0x000efb; 	J(JNZ(loc_10e8c));	// 1775 jnz     short loc_10E8C ;~ 01A2:0EFB
cs=0x1a2;eip=0x000efd; 	J(CALL(_mem_reallocx,0));	// 1776 call    _mem_reallocx ;~ 01A2:0EFD
cs=0x1a2;eip=0x000f00; 	X(POP(cx));	// 1777 pop     cx ;~ 01A2:0F00
cs=0x1a2;eip=0x000f01; 	T(DEC(cx));	// 1778 dec     cx ;~ 01A2:0F01
cs=0x1a2;eip=0x000f02; 	J(JNZ(loc_10e4c));	// 1779 jnz     loc_10E4C ;~ 01A2:0F02
cs=0x1a2;eip=0x000f06; 	T(MOV(ax, word_245d4));	// 1780 mov     ax, word_245D4 ;~ 01A2:0F06
cs=0x1a2;eip=0x000f09; 	T(INC(ah));	// 1781 inc     ah ;~ 01A2:0F09
cs=0x1a2;eip=0x000f0b; 	T(CMP(al, ah));	// 1782 cmp     al, ah ;~ 01A2:0F0B
cs=0x1a2;eip=0x000f0d; 	J(JC(loc_10f11));	// 1783 jb      short loc_10F11 ;~ 01A2:0F0D
cs=0x1a2;eip=0x000f0f; 	T(MOV(al, ah));	// 1784 mov     al, ah ;~ 01A2:0F0F
loc_10f11:
	// 4501 
cs=0x1a2;eip=0x000f11; 	T(XOR(ah, ah));	// 1787 xor     ah, ah ;~ 01A2:0F11
cs=0x1a2;eip=0x000f13; 	X(MOV(word_245d4, ax));	// 1788 mov     word_245D4, ax ;~ 01A2:0F13
cs=0x1a2;eip=0x000f16; 	J(CALL(_mod_readfile_11f4e,0));	// 1789 call    near ptr _mod_readfile_11F4E ;~ 01A2:0F16
cs=0x1a2;eip=0x000f19; 	J(JC(loc_10099));	// 1790 jb      loc_10099 ;~ 01A2:0F19
cs=0x1a2;eip=0x000f1d; 	J(RETN(0));	// 1791 retn ;~ 01A2:0F1D
_far_module:
	// 1798 
cs=0x1a2;eip=0x000f1e; 	X(MOV(_module_type_text, 0x20524146));	// 1799 mov     _module_type_text, 20524146h ;~ 01A2:0F1E
cs=0x1a2;eip=0x000f27; 	X(MOV(_moduleflag_246d0, 0x80));	// 1800 mov     _moduleflag_246D0, 10000000b ;~ 01A2:0F27
cs=0x1a2;eip=0x000f2d; 	X(MOV(byte_24673, 0));	// 1801 mov     byte_24673, 0 ;~ 01A2:0F2D
cs=0x1a2;eip=0x000f32; 	X(MOV(byte_2467e, 2));	// 1802 mov     byte_2467E, 2 ;~ 01A2:0F32
cs=0x1a2;eip=0x000f37; 	X(MOV(word_245d4, 0x10));	// 1803 mov     word_245D4, 10h ;~ 01A2:0F37
cs=0x1a2;eip=0x000f3d; 	T(MOV(al, *(db*)(((db*)&word_30552)+1)));	// 1804 mov     al, byte ptr word_30552+1 ;~ 01A2:0F3D
cs=0x1a2;eip=0x000f40; 	T(AND(ax, 0x0F));	// 1805 and     ax, 0Fh ;~ 01A2:0F40
cs=0x1a2;eip=0x000f43; 	T(MOV(di, ax));	// 1806 mov     di, ax ;~ 01A2:0F43
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x000f45; 	T(MOV(al, *((_table_14057)+di)));	// 1807 mov     al, cs:_table_14057[di] ;~ 01A2:0F45
cs=0x1a2;eip=0x000f4a; 	X(MOV(byte_2467b, al));	// 1808 mov     byte_2467B, al ;~ 01A2:0F4A
cs=0x1a2;eip=0x000f4d; 	X(MOV(byte_2467c, 0));	// 1809 mov     byte_2467C, 0 ;~ 01A2:0F4D
cs=0x1a2;eip=0x000f52; 	J(CALL(_calc_14043,0));	// 1810 call    _calc_14043 ;~ 01A2:0F52
cs=0x1a2;eip=0x000f55; 	X(MOV(byte_2467a, al));	// 1811 mov     byte_2467A, al ;~ 01A2:0F55
cs=0x1a2;eip=0x000f58; 	X(MOV(byte_24679, 4));	// 1812 mov     byte_24679, 4 ;~ 01A2:0F58
cs=0x1a2;eip=0x000f5d; 	T(CMP(_sndcard_type, 0));	// 1813 cmp     _sndcard_type, 0 ;~ 01A2:0F5D
cs=0x1a2;eip=0x000f62; 	J(JNZ(loc_10f80));	// 1814 jnz     short loc_10F80 ;~ 01A2:0F62
cs=0x1a2;eip=0x000f64; 	T(XOR(si, si));	// 1815 xor     si, si ;~ 01A2:0F64
cs=0x1a2;eip=0x000f66; 	T(MOV(cx, word_245d4));	// 1816 mov     cx, word_245D4 ;~ 01A2:0F66
loc_10f6a:
	// 4502 
cs=0x1a2;eip=0x000f6a; 	T(MOV(al, *(db*)(((db*)&word_30554)+si)));	// 1819 mov     al, byte ptr word_30554[si] ;~ 01A2:0F6A
cs=0x1a2;eip=0x000f6e; 	T(MOV(di, ax));	// 1820 mov     di, ax ;~ 01A2:0F6E
cs=0x1a2;eip=0x000f70; 	T(AND(di, 0x0F));	// 1821 and     di, 0Fh ;~ 01A2:0F70
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x000f73; 	T(MOV(al, *((byte_13c54)+di)));	// 1822 mov     al, cs:byte_13C54[di] ;~ 01A2:0F73
cs=0x1a2;eip=0x000f78; 	X(MOV(*(db*)(((db*)&dword_27bc8)+si), al));	// 1823 mov     byte ptr dword_27BC8[si], al ;~ 01A2:0F78
cs=0x1a2;eip=0x000f7c; 	T(INC(si));	// 1824 inc     si ;~ 01A2:0F7C
cs=0x1a2;eip=0x000f7d; 	T(DEC(cx));	// 1825 dec     cx ;~ 01A2:0F7D
cs=0x1a2;eip=0x000f7e; 	J(JNZ(loc_10f6a));	// 1826 jnz     short loc_10F6A ;~ 01A2:0F7E
loc_10f80:
	// 4503 
cs=0x1a2;eip=0x000f80; 	T(MOV(ax, ds));	// 1829 mov     ax, ds ;~ 01A2:0F80
cs=0x1a2;eip=0x000f82; 	T(MOV(es, ax));	// 1830 mov     es, ax ;~ 01A2:0F82
cs=0x1a2;eip=0x000f84; 	T(MOV(si, offset(seg003,_myin)));	// 1831 mov     si, offset _myin ; in ;~ 01A2:0F84
cs=0x1a2;eip=0x000f87; 	T(MOV(di, offset(seg003,out_)));	// 1832 mov     di, offset out_ ; "                                " ;~ 01A2:0F87
cs=0x1a2;eip=0x000f8a; 	T(MOV(cx, 0x20));	// 1833 mov     cx, 20h ; ' '   ; count ;~ 01A2:0F8A
cs=0x1a2;eip=0x000f8d; 	J(CALL(_copy_printable,0));	// 1834 call    _copy_printable ;~ 01A2:0F8D
cs=0x1a2;eip=0x000f90; 	T(MOV(dx, offset(seg003,dword_30566)+2));	// 1835 mov     dx, (offset dword_30566+2) ;~ 01A2:0F90
cs=0x1a2;eip=0x000f93; 	T(MOV(cx, 0x303));	// 1836 mov     cx, 303h ;~ 01A2:0F93
cs=0x1a2;eip=0x000f96; 	T(MOVZX(eax, *(dw*)(((db*)&dword_30566)+2)));	// 1837 movzx   eax, word ptr dword_30566+2 ;~ 01A2:0F96
cs=0x1a2;eip=0x000f9c; 	T(ADD(eax, 0x62));	// 1838 add     eax, 62h ; 'b' ;~ 01A2:0F9C
cs=0x1a2;eip=0x000fa0; 	J(CALL(_dosseek,0));	// 1839 call    _dosseek ;~ 01A2:0FA0
cs=0x1a2;eip=0x000fa3; 	T(MOVZX(ax, byte_30669));	// 1840 movzx   ax, byte_30669 ;~ 01A2:0FA3
cs=0x1a2;eip=0x000fa8; 	T(CMP(ax, 0x100));	// 1841 cmp     ax, 100h ;~ 01A2:0FA8
cs=0x1a2;eip=0x000fab; 	J(JC(loc_10fb0));	// 1842 jb      short loc_10FB0 ;~ 01A2:0FAB
cs=0x1a2;eip=0x000fad; 	T(MOV(ax, 0x100));	// 1843 mov     ax, 100h ;~ 01A2:0FAD
loc_10fb0:
	// 4504 
cs=0x1a2;eip=0x000fb0; 	X(MOV(word_245fa, ax));	// 1846 mov     word_245FA, ax ;~ 01A2:0FB0
cs=0x1a2;eip=0x000fb3; 	T(MOVZX(ax, byte_3066a));	// 1847 movzx   ax, byte_3066A ;~ 01A2:0FB3
cs=0x1a2;eip=0x000fb8; 	X(MOV(word_245f8, ax));	// 1848 mov     word_245F8, ax ;~ 01A2:0FB8
cs=0x1a2;eip=0x000fbb; 	T(MOV(si, offset(seg003,dword_30566)+2));	// 1849 mov     si, (offset dword_30566+2) ;~ 01A2:0FBB
cs=0x1a2;eip=0x000fbe; 	T(MOV(di, offset(seg003,byte_27fe8)));	// 1850 mov     di, offset byte_27FE8 ;~ 01A2:0FBE
cs=0x1a2;eip=0x000fc1; 	T(MOV(cx, word_245fa));	// 1851 mov     cx, word_245FA ;~ 01A2:0FC1
cs=0x1a2;eip=0x000fc5; 	T(CLD);	// 1852 cld ;~ 01A2:0FC5
	// 1853 rep movsb ;~ 01A2:0FC6
cs=0x1a2;eip=0x000fc6; 	X(	REP MOVSB);	// 1853 rep movsb ;~ 01A2:0FC6
cs=0x1a2;eip=0x000fc8; 	T(MOV(bx, offset(seg003,byte_3066b)));	// 1854 mov     bx, offset byte_3066B ;~ 01A2:0FC8
cs=0x1a2;eip=0x000fcb; 	T(XOR(ax, ax));	// 1855 xor     ax, ax ;~ 01A2:0FCB
cs=0x1a2;eip=0x000fcd; 	T(XOR(dx, dx));	// 1856 xor     dx, dx ;~ 01A2:0FCD
loc_10fcf:
	// 4505 
cs=0x1a2;eip=0x000fcf; 	T(INC(dx));	// 1859 inc     dx ;~ 01A2:0FCF
cs=0x1a2;eip=0x000fd0; 	T(CMP(*(dw*)(raddr(ds,bx)), 0));	// 1860 cmp     word ptr [bx], 0 ;~ 01A2:0FD0
cs=0x1a2;eip=0x000fd3; 	J(JZ(loc_10fd7));	// 1861 jz      short loc_10FD7 ;~ 01A2:0FD3
cs=0x1a2;eip=0x000fd5; 	T(MOV(ax, dx));	// 1862 mov     ax, dx ;~ 01A2:0FD5
loc_10fd7:
	// 4506 
cs=0x1a2;eip=0x000fd7; 	T(ADD(bx, 2));	// 1865 add     bx, 2 ;~ 01A2:0FD7
cs=0x1a2;eip=0x000fda; 	T(CMP(dx, 0x100));	// 1866 cmp     dx, 100h ;~ 01A2:0FDA
cs=0x1a2;eip=0x000fde; 	J(JC(loc_10fcf));	// 1867 jb      short loc_10FCF ;~ 01A2:0FDE
cs=0x1a2;eip=0x000fe0; 	T(OR(ax, ax));	// 1868 or      ax, ax ;~ 01A2:0FE0
cs=0x1a2;eip=0x000fe2; 	T(STC);	// 1869 stc ;~ 01A2:0FE2
cs=0x1a2;eip=0x000fe3; 	J(JZ(loc_10099));	// 1870 jz      loc_10099 ;~ 01A2:0FE3
cs=0x1a2;eip=0x000fe7; 	T(CMP(ax, 0x100));	// 1871 cmp     ax, 100h ;~ 01A2:0FE7
cs=0x1a2;eip=0x000fea; 	J(JC(loc_10fef));	// 1872 jb      short loc_10FEF ;~ 01A2:0FEA
cs=0x1a2;eip=0x000fec; 	T(MOV(ax, 0x100));	// 1873 mov     ax, 100h ;~ 01A2:0FEC
loc_10fef:
	// 4507 
cs=0x1a2;eip=0x000fef; 	X(MOV(word_245f2, ax));	// 1876 mov     word_245F2, ax ;~ 01A2:0FEF
cs=0x1a2;eip=0x000ff2; 	X(MOV(*(db*)(((db*)&_chrin)+3), 0));	// 1877 mov     byte ptr _chrin+3, 0 ;~ 01A2:0FF2
cs=0x1a2;eip=0x000ff7; 	T(MOV(si, offset(seg003,byte_3066b)));	// 1878 mov     si, offset byte_3066B ;~ 01A2:0FF7
cs=0x1a2;eip=0x000ffa; 	T(MOV(cx, word_245f2));	// 1879 mov     cx, word_245F2 ;~ 01A2:0FFA
loc_10ffe:
	// 4508 
cs=0x1a2;eip=0x000ffe; 	X(PUSH(cx));	// 1882 push    cx ;~ 01A2:0FFE
cs=0x1a2;eip=0x000fff; 	X(PUSH(si));	// 1883 push    si ;~ 01A2:0FFF
cs=0x1a2;eip=0x001000; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 1884 mov     ax, [si] ;~ 01A2:1000
cs=0x1a2;eip=0x001002; 	T(OR(ax, ax));	// 1885 or      ax, ax ;~ 01A2:1002
cs=0x1a2;eip=0x001004; 	J(JNZ(loc_1100f));	// 1886 jnz     short loc_1100F ;~ 01A2:1004
cs=0x1a2;eip=0x001006; 	J(CALL(_memalloc12k,0));	// 1887 call    _memalloc12k ;~ 01A2:1006
cs=0x1a2;eip=0x001009; 	T(MOV(cx, 0x40));	// 1888 mov     cx, 40h ; '@' ;~ 01A2:1009
cs=0x1a2;eip=0x00100c; 	J(JMP(loc_11120));	// 1889 jmp     loc_11120 ;~ 01A2:100C
loc_1100f:
	// 4509 
cs=0x1a2;eip=0x00100f; 	T(SUB(ax, 2));	// 1893 sub     ax, 2 ;~ 01A2:100F
cs=0x1a2;eip=0x001012; 	T(SHR(ax, 2));	// 1894 shr     ax, 2 ;~ 01A2:1012
cs=0x1a2;eip=0x001015; 	T(XOR(dx, dx));	// 1895 xor     dx, dx ;~ 01A2:1015
cs=0x1a2;eip=0x001017; 	X(DIV2(word_245d4));	// 1896 div     word_245D4 ;~ 01A2:1017
cs=0x1a2;eip=0x00101b; 	X(PUSH(ax));	// 1897 push    ax ;~ 01A2:101B
cs=0x1a2;eip=0x00101c; 	T(DEC(al));	// 1898 dec     al ;~ 01A2:101C
cs=0x1a2;eip=0x00101e; 	T(AND(al, 0x3F));	// 1899 and     al, 3Fh ;~ 01A2:101E
cs=0x1a2;eip=0x001020; 	X(MOV(*(db*)(((db*)&_chrin)), al));	// 1900 mov     byte ptr _chrin, al ;~ 01A2:1020
cs=0x1a2;eip=0x001023; 	T(XOR(di, di));	// 1901 xor     di, di ;~ 01A2:1023
cs=0x1a2;eip=0x001025; 	T(MOV(cx, word_245fa));	// 1902 mov     cx, word_245FA ;~ 01A2:1025
cs=0x1a2;eip=0x001029; 	T(MOV(ah, *(db*)(((db*)&_chrin)+3)));	// 1903 mov     ah, byte ptr _chrin+3 ;~ 01A2:1029
loc_1102d:
	// 4510 
cs=0x1a2;eip=0x00102d; 	T(CMP(ah, *((byte_27fe8)+di)));	// 1906 cmp     ah, byte_27FE8[di] ;~ 01A2:102D
cs=0x1a2;eip=0x001031; 	J(JNZ(loc_11037));	// 1907 jnz     short loc_11037 ;~ 01A2:1031
cs=0x1a2;eip=0x001033; 	X(MOV(*((byte_281e8)+di), al));	// 1908 mov     byte_281E8[di], al ;~ 01A2:1033
loc_11037:
	// 4511 
cs=0x1a2;eip=0x001037; 	T(INC(di));	// 1911 inc     di ;~ 01A2:1037
cs=0x1a2;eip=0x001038; 	T(DEC(cx));	// 1912 dec     cx ;~ 01A2:1038
cs=0x1a2;eip=0x001039; 	J(JNZ(loc_1102d));	// 1913 jnz     short loc_1102D ;~ 01A2:1039
cs=0x1a2;eip=0x00103b; 	T(MOV(dx, offset(seg003,in_)));	// 1914 mov     dx, offset in_ ;~ 01A2:103B
cs=0x1a2;eip=0x00103e; 	T(MOV(cx, *(dw*)(raddr(ds,si))));	// 1915 mov     cx, [si] ;~ 01A2:103E
cs=0x1a2;eip=0x001040; 	J(CALL(_dosfread,0));	// 1916 call    _dosfread ;~ 01A2:1040
cs=0x1a2;eip=0x001043; 	X(MOV(*(db*)(((db*)&_chrin)+1), 0));	// 1917 mov     byte ptr _chrin+1, 0 ;~ 01A2:1043
cs=0x1a2;eip=0x001048; 	J(CALL(_memalloc12k,0));	// 1918 call    _memalloc12k ;~ 01A2:1048
cs=0x1a2;eip=0x00104b; 	X(POP(cx));	// 1919 pop     cx ;~ 01A2:104B
cs=0x1a2;eip=0x00104c; 	T(XOR(ch, ch));	// 1920 xor     ch, ch ;~ 01A2:104C
cs=0x1a2;eip=0x00104e; 	T(MOV(si, offset(seg003,byte_3150a)));	// 1921 mov     si, offset byte_3150A ;~ 01A2:104E
loc_11051:
	// 4512 
cs=0x1a2;eip=0x001051; 	X(PUSH(cx));	// 1924 push    cx ;~ 01A2:1051
cs=0x1a2;eip=0x001052; 	T(MOV(cx, word_245d4));	// 1925 mov     cx, word_245D4 ;~ 01A2:1052
cs=0x1a2;eip=0x001056; 	T(XOR(ch, ch));	// 1926 xor     ch, ch ;~ 01A2:1056
loc_11058:
	// 4513 
cs=0x1a2;eip=0x001058; 	X(PUSH(cx));	// 1929 push    cx ;~ 01A2:1058
cs=0x1a2;eip=0x001059; 	T(XOR(bx, bx));	// 1930 xor     bx, bx ;~ 01A2:1059
cs=0x1a2;eip=0x00105b; 	T(MOV(cl, 0x0FF));	// 1931 mov     cl, 0FFh ;~ 01A2:105B
cs=0x1a2;eip=0x00105d; 	T(MOV(al, *(raddr(ds,si))));	// 1932 mov     al, [si] ;~ 01A2:105D
cs=0x1a2;eip=0x00105f; 	T(OR(al, al));	// 1933 or      al, al ;~ 01A2:105F
cs=0x1a2;eip=0x001061; 	J(JZ(loc_11082));	// 1934 jz      short loc_11082 ;~ 01A2:1061
cs=0x1a2;eip=0x001063; 	T(DEC(al));	// 1935 dec     al ;~ 01A2:1063
cs=0x1a2;eip=0x001065; 	T(XOR(ah, ah));	// 1936 xor     ah, ah ;~ 01A2:1065
cs=0x1a2;eip=0x001067; 	T(MOV(dl, 0x0C));	// 1937 mov     dl, 0Ch ;~ 01A2:1067
cs=0x1a2;eip=0x001069; 	T(DIV1(dl));	// 1938 div     dl ;~ 01A2:1069
cs=0x1a2;eip=0x00106b; 	T(INC(al));	// 1939 inc     al ;~ 01A2:106B
cs=0x1a2;eip=0x00106d; 	T(INC(ah));	// 1940 inc     ah ;~ 01A2:106D
cs=0x1a2;eip=0x00106f; 	T(SHL(al, 4));	// 1941 shl     al, 4 ;~ 01A2:106F
cs=0x1a2;eip=0x001072; 	T(OR(al, ah));	// 1942 or      al, ah ;~ 01A2:1072
cs=0x1a2;eip=0x001074; 	T(MOV(bl, al));	// 1943 mov     bl, al ;~ 01A2:1074
cs=0x1a2;eip=0x001076; 	T(MOV(bh, *(raddr(ds,si+1))));	// 1944 mov     bh, [si+1] ;~ 01A2:1076
cs=0x1a2;eip=0x001079; 	T(INC(bh));	// 1945 inc     bh ;~ 01A2:1079
cs=0x1a2;eip=0x00107b; 	T(CMP(bh, 0x63));	// 1946 cmp     bh, 63h ; 'c' ;~ 01A2:107B
cs=0x1a2;eip=0x00107e; 	J(JC(loc_11082));	// 1947 jb      short loc_11082 ;~ 01A2:107E
cs=0x1a2;eip=0x001080; 	T(XOR(bh, bh));	// 1948 xor     bh, bh ;~ 01A2:1080
loc_11082:
	// 4514 
cs=0x1a2;eip=0x001082; 	T(MOV(cl, 0x0FF));	// 1952 mov     cl, 0FFh ;~ 01A2:1082
cs=0x1a2;eip=0x001084; 	T(MOV(al, *(raddr(ds,si+2))));	// 1953 mov     al, [si+2] ;~ 01A2:1084
cs=0x1a2;eip=0x001087; 	T(OR(al, al));	// 1954 or      al, al ;~ 01A2:1087
cs=0x1a2;eip=0x001089; 	J(JZ(loc_11094));	// 1955 jz      short loc_11094 ;~ 01A2:1089
cs=0x1a2;eip=0x00108b; 	T(DEC(al));	// 1956 dec     al ;~ 01A2:108B
cs=0x1a2;eip=0x00108d; 	T(AND(al, 0x0F));	// 1957 and     al, 0Fh ;~ 01A2:108D
cs=0x1a2;eip=0x00108f; 	T(SHL(al, 2));	// 1958 shl     al, 2 ;~ 01A2:108F
cs=0x1a2;eip=0x001092; 	T(MOV(cl, al));	// 1959 mov     cl, al ;~ 01A2:1092
loc_11094:
	// 4515 
cs=0x1a2;eip=0x001094; 	T(MOV(dl, *(raddr(ds,si+3))));	// 1962 mov     dl, [si+3] ;~ 01A2:1094
cs=0x1a2;eip=0x001097; 	T(MOV(dh, dl));	// 1963 mov     dh, dl ;~ 01A2:1097
cs=0x1a2;eip=0x001099; 	T(SHR(dl, 4));	// 1964 shr     dl, 4 ;~ 01A2:1099
cs=0x1a2;eip=0x00109c; 	T(AND(dh, 0x0F));	// 1965 and     dh, 0Fh ;~ 01A2:109C
cs=0x1a2;eip=0x00109f; 	T(CMP(dl, 3));	// 1966 cmp     dl, 3 ;~ 01A2:109F
cs=0x1a2;eip=0x0010a2; 	J(JZ(loc_110cb));	// 1967 jz      short loc_110CB ;~ 01A2:10A2
cs=0x1a2;eip=0x0010a4; 	T(CMP(dl, 4));	// 1968 cmp     dl, 4 ;~ 01A2:10A4
loc_110a7:
	// 4516 
cs=0x1a2;eip=0x0010a7; 	J(JZ(loc_110e4));	// 1972 jz      short loc_110E4 ;~ 01A2:10A7
cs=0x1a2;eip=0x0010a9; 	T(CMP(dl, 5));	// 1973 cmp     dl, 5 ;~ 01A2:10A9
cs=0x1a2;eip=0x0010ac; 	J(JZ(loc_110cf));	// 1974 jz      short loc_110CF ;~ 01A2:10AC
cs=0x1a2;eip=0x0010ae; 	T(CMP(dl, 6));	// 1975 cmp     dl, 6 ;~ 01A2:10AE
cs=0x1a2;eip=0x0010b1; 	J(JZ(loc_110d9));	// 1976 jz      short loc_110D9 ;~ 01A2:10B1
cs=0x1a2;eip=0x0010b3; 	T(CMP(dl, 0x0B));	// 1977 cmp     dl, 0Bh ;~ 01A2:10B3
cs=0x1a2;eip=0x0010b6; 	J(JZ(loc_110fa));	// 1978 jz      short loc_110FA ;~ 01A2:10B6
cs=0x1a2;eip=0x0010b8; 	T(CMP(dl, 0x0D));	// 1979 cmp     dl, 0Dh ;~ 01A2:10B8
cs=0x1a2;eip=0x0010bb; 	J(JZ(loc_110ef));	// 1980 jz      short loc_110EF ;~ 01A2:10BB
cs=0x1a2;eip=0x0010bd; 	T(CMP(dl, 0x0E));	// 1981 cmp     dl, 0Eh ;~ 01A2:10BD
cs=0x1a2;eip=0x0010c0; 	J(JZ(loc_110f3));	// 1982 jz      short loc_110F3 ;~ 01A2:10C0
cs=0x1a2;eip=0x0010c2; 	T(CMP(dl, 0x0F));	// 1983 cmp     dl, 0Fh ;~ 01A2:10C2
cs=0x1a2;eip=0x0010c5; 	J(JZ(loc_110eb));	// 1984 jz      short loc_110EB ;~ 01A2:10C5
cs=0x1a2;eip=0x0010c7; 	T(XOR(dx, dx));	// 1985 xor     dx, dx ;~ 01A2:10C7
cs=0x1a2;eip=0x0010c9; 	J(JMP(loc_110ff));	// 1986 jmp     short loc_110FF ;~ 01A2:10C9
loc_110cb:
	// 4517 
cs=0x1a2;eip=0x0010cb; 	T(MOV(dl, 0x19));	// 1990 mov     dl, 19h ;~ 01A2:10CB
cs=0x1a2;eip=0x0010cd; 	J(JMP(loc_110ff));	// 1991 jmp     short loc_110FF ;~ 01A2:10CD
loc_110cf:
	// 4518 
cs=0x1a2;eip=0x0010cf; 	T(SHR(dh, 1));	// 1995 shr     dh, 1 ;~ 01A2:10CF
cs=0x1a2;eip=0x0010d1; 	X(MOV(*(db*)(((db*)&_chrin)+1), dh));	// 1996 mov     byte ptr _chrin+1, dh ;~ 01A2:10D1
cs=0x1a2;eip=0x0010d5; 	T(XOR(dx, dx));	// 1997 xor     dx, dx ;~ 01A2:10D5
cs=0x1a2;eip=0x0010d7; 	J(JMP(loc_110ff));	// 1998 jmp     short loc_110FF ;~ 01A2:10D7
loc_110d9:
	// 4519 
cs=0x1a2;eip=0x0010d9; 	T(SHL(dh, 4));	// 2002 shl     dh, 4 ;~ 01A2:10D9
cs=0x1a2;eip=0x0010dc; 	T(OR(dh, *(db*)(((db*)&_chrin)+1)));	// 2003 or      dh, byte ptr _chrin+1 ;~ 01A2:10DC
cs=0x1a2;eip=0x0010e0; 	T(MOV(dl, 4));	// 2004 mov     dl, 4 ;~ 01A2:10E0
cs=0x1a2;eip=0x0010e2; 	J(JMP(loc_110ff));	// 2005 jmp     short loc_110FF ;~ 01A2:10E2
loc_110e4:
	// 4520 
cs=0x1a2;eip=0x0010e4; 	T(MOV(dl, 0x0E));	// 2009 mov     dl, 0Eh ;~ 01A2:10E4
cs=0x1a2;eip=0x0010e6; 	T(OR(dh, 0x90));	// 2010 or      dh, 90h ;~ 01A2:10E6
cs=0x1a2;eip=0x0010e9; 	J(JMP(loc_110ff));	// 2011 jmp     short loc_110FF ;~ 01A2:10E9
loc_110eb:
	// 4521 
cs=0x1a2;eip=0x0010eb; 	T(MOV(dl, 0x1F));	// 2015 mov     dl, 1Fh ;~ 01A2:10EB
cs=0x1a2;eip=0x0010ed; 	J(JMP(loc_110ff));	// 2016 jmp     short loc_110FF ;~ 01A2:10ED
loc_110ef:
	// 4522 
cs=0x1a2;eip=0x0010ef; 	T(MOV(dl, 0x20));	// 2020 mov     dl, 20h ; ' ' ;~ 01A2:10EF
cs=0x1a2;eip=0x0010f1; 	J(JMP(loc_110ff));	// 2021 jmp     short loc_110FF ;~ 01A2:10F1
loc_110f3:
	// 4523 
cs=0x1a2;eip=0x0010f3; 	T(MOV(dl, 0x20));	// 2025 mov     dl, 20h ; ' ' ;~ 01A2:10F3
cs=0x1a2;eip=0x0010f5; 	T(SHL(dh, 4));	// 2026 shl     dh, 4 ;~ 01A2:10F5
cs=0x1a2;eip=0x0010f8; 	J(JMP(loc_110ff));	// 2027 jmp     short loc_110FF ;~ 01A2:10F8
loc_110fa:
	// 4524 
cs=0x1a2;eip=0x0010fa; 	T(MOV(dl, 0x0E));	// 2031 mov     dl, 0Eh ;~ 01A2:10FA
cs=0x1a2;eip=0x0010fc; 	T(OR(dh, 0x80));	// 2032 or      dh, 80h ;~ 01A2:10FC
loc_110ff:
	// 4525 
cs=0x1a2;eip=0x0010ff; 	J(CALL(sub_11ba6,0));	// 2036 call    sub_11BA6 ;~ 01A2:10FF
cs=0x1a2;eip=0x001102; 	T(ADD(si, 4));	// 2037 add     si, 4 ;~ 01A2:1102
cs=0x1a2;eip=0x001105; 	X(POP(cx));	// 2038 pop     cx ;~ 01A2:1105
cs=0x1a2;eip=0x001106; 	T(INC(ch));	// 2039 inc     ch ;~ 01A2:1106
cs=0x1a2;eip=0x001108; 	T(CMP(ch, cl));	// 2040 cmp     ch, cl ;~ 01A2:1108
cs=0x1a2;eip=0x00110a; 	J(JC(loc_11058));	// 2041 jb      loc_11058 ;~ 01A2:110A
cs=0x1a2;eip=0x00110e; 	X(MOV(*(raddr(es,di)), 0));	// 2042 mov     byte ptr es:[di], 0 ;~ 01A2:110E
cs=0x1a2;eip=0x001112; 	T(INC(di));	// 2043 inc     di ;~ 01A2:1112
cs=0x1a2;eip=0x001113; 	X(POP(cx));	// 2044 pop     cx ;~ 01A2:1113
cs=0x1a2;eip=0x001114; 	T(DEC(cx));	// 2045 dec     cx ;~ 01A2:1114
cs=0x1a2;eip=0x001115; 	J(JNZ(loc_11051));	// 2046 jnz     loc_11051 ;~ 01A2:1115
cs=0x1a2;eip=0x001119; 	T(MOV(cx, 0x3F));	// 2047 mov     cx, 3Fh ; '?' ;~ 01A2:1119
cs=0x1a2;eip=0x00111c; 	T(SUB(cl, *(db*)(((db*)&_chrin))));	// 2048 sub     cl, byte ptr _chrin ;~ 01A2:111C
loc_11120:
	// 4526 
cs=0x1a2;eip=0x001120; 	T(XOR(al, al));	// 2051 xor     al, al ;~ 01A2:1120
cs=0x1a2;eip=0x001122; 	T(CLD);	// 2052 cld ;~ 01A2:1122
	// 2053 rep stosb ;~ 01A2:1123
cs=0x1a2;eip=0x001123; 	X(	REP STOSB);	// 2053 rep stosb ;~ 01A2:1123
cs=0x1a2;eip=0x001125; 	J(CALL(_mem_reallocx,0));	// 2054 call    _mem_reallocx ;~ 01A2:1125
cs=0x1a2;eip=0x001128; 	X(POP(si));	// 2055 pop     si ;~ 01A2:1128
cs=0x1a2;eip=0x001129; 	X(POP(cx));	// 2056 pop     cx ;~ 01A2:1129
cs=0x1a2;eip=0x00112a; 	X(INC(*(db*)(((db*)&_chrin)+3)));	// 2057 inc     byte ptr _chrin+3 ;~ 01A2:112A
cs=0x1a2;eip=0x00112e; 	T(ADD(si, 2));	// 2058 add     si, 2 ;~ 01A2:112E
cs=0x1a2;eip=0x001131; 	T(DEC(cx));	// 2059 dec     cx ;~ 01A2:1131
cs=0x1a2;eip=0x001132; 	J(JNZ(loc_10ffe));	// 2060 jnz     loc_10FFE ;~ 01A2:1132
cs=0x1a2;eip=0x001136; 	T(MOV(ax, ds));	// 2061 mov     ax, ds ;~ 01A2:1136
cs=0x1a2;eip=0x001138; 	T(MOV(es, ax));	// 2063 mov     es, ax ;~ 01A2:1138
cs=0x1a2;eip=0x00113a; 	T(MOV(dx, offset(seg003,_myin)));	// 2065 mov     dx, offset _myin ;~ 01A2:113A
cs=0x1a2;eip=0x00113d; 	T(MOV(cx, 8));	// 2066 mov     cx, 8 ;~ 01A2:113D
cs=0x1a2;eip=0x001140; 	J(CALL(_dosfread,0));	// 2067 call    _dosfread ;~ 01A2:1140
cs=0x1a2;eip=0x001143; 	T(MOV(si, offset(seg003,_myin)));	// 2068 mov     si, offset _myin ;~ 01A2:1143
cs=0x1a2;eip=0x001146; 	T(MOV(di, offset(seg003,_myout)));	// 2069 mov     di, offset _myout ;~ 01A2:1146
cs=0x1a2;eip=0x001149; 	T(XOR(ax, ax));	// 2070 xor     ax, ax ;~ 01A2:1149
cs=0x1a2;eip=0x00114b; 	X(MOV(word_245d2, ax));	// 2071 mov     word_245D2, ax ;~ 01A2:114B
cs=0x1a2;eip=0x00114e; 	T(MOV(ch, 8));	// 2072 mov     ch, 8 ;~ 01A2:114E
loc_11150:
	// 4527 
cs=0x1a2;eip=0x001150; 	T(MOV(cl, 8));	// 2075 mov     cl, 8 ;~ 01A2:1150
loc_11152:
	// 4528 
cs=0x1a2;eip=0x001152; 	T(INC(ax));	// 2078 inc     ax ;~ 01A2:1152
cs=0x1a2;eip=0x001153; 	X(SHR(*(raddr(ds,si)), 1));	// 2079 shr     byte ptr [si], 1 ;~ 01A2:1153
cs=0x1a2;eip=0x001155; 	J(JNC(loc_11217));	// 2080 jnb     loc_11217 ;~ 01A2:1155
cs=0x1a2;eip=0x001159; 	X(PUSH(ax));	// 2081 push    ax ;~ 01A2:1159
cs=0x1a2;eip=0x00115a; 	X(PUSH(cx));	// 2082 push    cx ;~ 01A2:115A
cs=0x1a2;eip=0x00115b; 	X(PUSH(si));	// 2083 push    si ;~ 01A2:115B
cs=0x1a2;eip=0x00115c; 	X(PUSH(di));	// 2084 push    di ;~ 01A2:115C
cs=0x1a2;eip=0x00115d; 	X(MOV(word_245d2, ax));	// 2085 mov     word_245D2, ax ;~ 01A2:115D
cs=0x1a2;eip=0x001160; 	X(PUSH(di));	// 2086 push    di ;~ 01A2:1160
cs=0x1a2;eip=0x001161; 	T(MOV(dx, offset(seg003,in_)));	// 2087 mov     dx, offset in_ ;~ 01A2:1161
cs=0x1a2;eip=0x001164; 	T(MOV(cx, 0x30));	// 2088 mov     cx, 30h ; '0' ;~ 01A2:1164
cs=0x1a2;eip=0x001167; 	J(CALL(_dosfread,0));	// 2089 call    _dosfread ;~ 01A2:1167
cs=0x1a2;eip=0x00116a; 	T(XOR(dx, dx));	// 2090 xor     dx, dx ;~ 01A2:116A
cs=0x1a2;eip=0x00116c; 	T(XOR(cx, cx));	// 2091 xor     cx, cx ;~ 01A2:116C
cs=0x1a2;eip=0x00116e; 	T(MOV(bx, _fhandle_module));	// 2092 mov     bx, _fhandle_module ;~ 01A2:116E
cs=0x1a2;eip=0x001172; 	T(MOV(ax, 0x4201));	// 2093 mov     ax, 4201h ;~ 01A2:1172
cs=0x1a2;eip=0x001175; 	S(_INT(0x21));	// 2094 int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK) ;~ 01A2:1175
cs=0x1a2;eip=0x001177; 	X(POP(di));	// 2096 pop     di              ; out ;~ 01A2:1177
cs=0x1a2;eip=0x001178; 	X(MOV(*(dw*)(raddr(ds,di+0x38)), ax));	// 2097 mov     [di+38h], ax ;~ 01A2:1178
cs=0x1a2;eip=0x00117b; 	X(MOV(*(dw*)(raddr(ds,di+0x3A)), dx));	// 2098 mov     [di+3Ah], dx ;~ 01A2:117B
cs=0x1a2;eip=0x00117e; 	T(MOV(si, offset(seg003,in_)));	// 2099 mov     si, offset in_  ; in ;~ 01A2:117E
cs=0x1a2;eip=0x001181; 	T(MOV(edx, *(dd*)(raddr(ds,si+0x20))));	// 2100 mov     edx, [si+20h] ;~ 01A2:1181
cs=0x1a2;eip=0x001185; 	T(CMP(edx, 0x100000));	// 2101 cmp     edx, 100000h ;~ 01A2:1185
cs=0x1a2;eip=0x00118c; 	T(CMC);	// 2102 cmc ;~ 01A2:118C
cs=0x1a2;eip=0x00118d; 	X(ADC(word_24662, 0));	// 2103 adc     word_24662, 0 ;~ 01A2:118D
cs=0x1a2;eip=0x001192; 	X(MOV(*(dd*)(raddr(ds,di+0x20)), edx));	// 2104 mov     [di+20h], edx ;~ 01A2:1192
cs=0x1a2;eip=0x001196; 	X(ADD(dword_245c4, edx));	// 2105 add     dword_245C4, edx ;~ 01A2:1196
cs=0x1a2;eip=0x00119b; 	T(MOV(al, *(raddr(ds,si+0x25))));	// 2106 mov     al, [si+25h] ;~ 01A2:119B
cs=0x1a2;eip=0x00119e; 	T(ROR(al, 4));	// 2107 ror     al, 4 ;~ 01A2:119E
cs=0x1a2;eip=0x0011a1; 	T(SHR(al, 2));	// 2108 shr     al, 2 ;~ 01A2:11A1
cs=0x1a2;eip=0x0011a4; 	X(MOV(*(raddr(ds,di+0x3D)), al));	// 2109 mov     [di+3Dh], al ;~ 01A2:11A4
cs=0x1a2;eip=0x0011a7; 	T(MOV(ax, _freq_245de));	// 2110 mov     ax, _freq_245DE ;~ 01A2:11A7
cs=0x1a2;eip=0x0011aa; 	X(MOV(*(dw*)(raddr(ds,di+0x36)), ax));	// 2111 mov     [di+36h], ax ;~ 01A2:11AA
cs=0x1a2;eip=0x0011ad; 	T(TEST(*(raddr(ds,si+0x2F)), 8));	// 2112 test    byte ptr [si+2Fh], 8 ;~ 01A2:11AD
cs=0x1a2;eip=0x0011b1; 	J(JNZ(loc_111c6));	// 2113 jnz     short loc_111C6 ;~ 01A2:11B1
loc_111b3:
	// 4529 
cs=0x1a2;eip=0x0011b3; 	T(XOR(eax, eax));	// 2116 xor     eax, eax ;~ 01A2:11B3
cs=0x1a2;eip=0x0011b6; 	X(MOV(*(dd*)(raddr(ds,di+0x24)), eax));	// 2117 mov     [di+24h], eax ;~ 01A2:11B6
cs=0x1a2;eip=0x0011ba; 	X(MOV(*(dd*)(raddr(ds,di+0x28)), eax));	// 2118 mov     [di+28h], eax ;~ 01A2:11BA
cs=0x1a2;eip=0x0011be; 	T(DEC(edx));	// 2119 dec     edx ;~ 01A2:11BE
cs=0x1a2;eip=0x0011c0; 	X(MOV(*(dd*)(raddr(ds,di+0x2C)), edx));	// 2120 mov     [di+2Ch], edx ;~ 01A2:11C0
cs=0x1a2;eip=0x0011c4; 	J(JMP(loc_111e8));	// 2121 jmp     short loc_111E8 ;~ 01A2:11C4
loc_111c6:
	// 4530 
cs=0x1a2;eip=0x0011c6; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x2A))));	// 2125 mov     eax, [si+2Ah] ;~ 01A2:11C6
cs=0x1a2;eip=0x0011ca; 	T(OR(eax, eax));	// 2126 or      eax, eax ;~ 01A2:11CA
cs=0x1a2;eip=0x0011cd; 	J(JZ(loc_111b3));	// 2127 jz      short loc_111B3 ;~ 01A2:11CD
cs=0x1a2;eip=0x0011cf; 	X(MOV(*(dd*)(raddr(ds,di+0x2C)), eax));	// 2128 mov     [di+2Ch], eax ;~ 01A2:11CF
cs=0x1a2;eip=0x0011d3; 	T(MOV(ebx, *(dd*)(raddr(ds,si+0x26))));	// 2129 mov     ebx, [si+26h] ;~ 01A2:11D3
cs=0x1a2;eip=0x0011d7; 	X(MOV(*(dd*)(raddr(ds,di+0x24)), ebx));	// 2130 mov     [di+24h], ebx ;~ 01A2:11D7
cs=0x1a2;eip=0x0011db; 	T(SUB(eax, ebx));	// 2131 sub     eax, ebx ;~ 01A2:11DB
cs=0x1a2;eip=0x0011de; 	T(INC(eax));	// 2132 inc     eax ;~ 01A2:11DE
cs=0x1a2;eip=0x0011e0; 	X(MOV(*(dd*)(raddr(ds,di+0x28)), eax));	// 2133 mov     [di+28h], eax ;~ 01A2:11E0
cs=0x1a2;eip=0x0011e4; 	X(OR(*(raddr(ds,di+0x3C)), 8));	// 2134 or      byte ptr [di+3Ch], 8 ;~ 01A2:11E4
loc_111e8:
	// 4531 
cs=0x1a2;eip=0x0011e8; 	T(MOV(cx, 0x20));	// 2137 mov     cx, 20h ; ' '   ; count ;~ 01A2:11E8
cs=0x1a2;eip=0x0011eb; 	J(CALL(_copy_printable,0));	// 2138 call    _copy_printable ;~ 01A2:11EB
cs=0x1a2;eip=0x0011ee; 	T(TEST(*(raddr(ds,si+0x2E)), 1));	// 2139 test    byte ptr [si+2Eh], 1 ;~ 01A2:11EE
cs=0x1a2;eip=0x0011f2; 	J(JZ(loc_11204));	// 2140 jz      short loc_11204 ;~ 01A2:11F2
cs=0x1a2;eip=0x0011f4; 	X(OR(*(raddr(ds,di+0x3C)), 4));	// 2141 or      byte ptr [di+3Ch], 4 ;~ 01A2:11F4
cs=0x1a2;eip=0x0011f8; 	X(SHR(*(dd*)(raddr(ds,di+0x24)), 1));	// 2142 shr     dword ptr [di+24h], 1 ;~ 01A2:11F8
cs=0x1a2;eip=0x0011fc; 	X(SHR(*(dd*)(raddr(ds,di+0x2C)), 1));	// 2143 shr     dword ptr [di+2Ch], 1 ;~ 01A2:11FC
cs=0x1a2;eip=0x001200; 	X(SHR(*(dd*)(raddr(ds,di+0x28)), 1));	// 2144 shr     dword ptr [di+28h], 1 ;~ 01A2:1200
loc_11204:
	// 4532 
cs=0x1a2;eip=0x001204; 	T(MOV(dx, *(dw*)(raddr(ds,si+0x20))));	// 2147 mov     dx, [si+20h] ;~ 01A2:1204
cs=0x1a2;eip=0x001207; 	T(MOV(cx, *(dw*)(raddr(ds,si+0x22))));	// 2148 mov     cx, [si+22h] ;~ 01A2:1207
cs=0x1a2;eip=0x00120a; 	T(MOV(bx, _fhandle_module));	// 2149 mov     bx, _fhandle_module ;~ 01A2:120A
cs=0x1a2;eip=0x00120e; 	T(MOV(ax, 0x4201));	// 2150 mov     ax, 4201h ;~ 01A2:120E
cs=0x1a2;eip=0x001211; 	S(_INT(0x21));	// 2151 int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK) ;~ 01A2:1211
cs=0x1a2;eip=0x001213; 	X(POP(di));	// 2153 pop     di ;~ 01A2:1213
cs=0x1a2;eip=0x001214; 	X(POP(si));	// 2154 pop     si ;~ 01A2:1214
cs=0x1a2;eip=0x001215; 	X(POP(cx));	// 2155 pop     cx ;~ 01A2:1215
cs=0x1a2;eip=0x001216; 	X(POP(ax));	// 2156 pop     ax ;~ 01A2:1216
loc_11217:
	// 4533 
cs=0x1a2;eip=0x001217; 	T(ADD(di, 0x40));	// 2159 add     di, 40h ; '@' ;~ 01A2:1217
cs=0x1a2;eip=0x00121a; 	T(DEC(cl));	// 2160 dec     cl ;~ 01A2:121A
cs=0x1a2;eip=0x00121c; 	J(JNZ(loc_11152));	// 2161 jnz     loc_11152 ;~ 01A2:121C
cs=0x1a2;eip=0x001220; 	T(INC(si));	// 2162 inc     si ;~ 01A2:1220
cs=0x1a2;eip=0x001221; 	T(DEC(ch));	// 2163 dec     ch ;~ 01A2:1221
cs=0x1a2;eip=0x001223; 	J(JNZ(loc_11150));	// 2164 jnz     loc_11150 ;~ 01A2:1223
cs=0x1a2;eip=0x001227; 	T(CMP(word_245d2, 0));	// 2165 cmp     word_245D2, 0 ;~ 01A2:1227
cs=0x1a2;eip=0x00122c; 	T(STC);	// 2166 stc ;~ 01A2:122C
cs=0x1a2;eip=0x00122d; 	J(JZ(loc_10099));	// 2167 jz      loc_10099 ;~ 01A2:122D
cs=0x1a2;eip=0x001231; 	J(CALL(_mod_readfile_11f4e,0));	// 2168 call    near ptr _mod_readfile_11F4E ;~ 01A2:1231
cs=0x1a2;eip=0x001234; 	J(JC(loc_10099));	// 2169 jb      loc_10099 ;~ 01A2:1234
cs=0x1a2;eip=0x001238; 	J(RETN(0));	// 2170 retn ;~ 01A2:1238
_ult_module:
	// 2177 
cs=0x1a2;eip=0x001239; 	X(MOV(_module_type_text, 0x20544C55));	// 2178 mov     _module_type_text, 20544C55h ;~ 01A2:1239
cs=0x1a2;eip=0x001242; 	X(MOV(_moduleflag_246d0, 0x200));	// 2179 mov     _moduleflag_246D0, 1000000000b ;~ 01A2:1242
cs=0x1a2;eip=0x001248; 	X(MOV(byte_24673, 0));	// 2180 mov     byte_24673, 0 ;~ 01A2:1248
cs=0x1a2;eip=0x00124d; 	X(MOV(*(dw*)(((db*)&_chrin)), 0x40));	// 2181 mov     word ptr _chrin, 40h ; '@' ;~ 01A2:124D
cs=0x1a2;eip=0x001253; 	T(MOV(ax, word_30515));	// 2182 mov     ax, word_30515 ;~ 01A2:1253
cs=0x1a2;eip=0x001256; 	T(XCHG(al, ah));	// 2183 xchg    al, ah ;~ 01A2:1256
cs=0x1a2;eip=0x001258; 	X(MOV(word_30515, ax));	// 2184 mov     word_30515, ax ;~ 01A2:1258
cs=0x1a2;eip=0x00125b; 	T(CMP(ax, 0x3034));	// 2185 cmp     ax, 3034h ;~ 01A2:125B
cs=0x1a2;eip=0x00125e; 	J(JC(loc_11265));	// 2186 jb      short loc_11265 ;~ 01A2:125E
cs=0x1a2;eip=0x001260; 	X(ADD(*(dw*)(((db*)&_chrin)), 2));	// 2187 add     word ptr _chrin, 2 ;~ 01A2:1260
loc_11265:
	// 4534 
cs=0x1a2;eip=0x001265; 	X(MOV(byte_24679, 6));	// 2190 mov     byte_24679, 6 ;~ 01A2:1265
cs=0x1a2;eip=0x00126a; 	X(MOV(byte_2467a, 0x7D));	// 2191 mov     byte_2467A, 7Dh ; '}' ;~ 01A2:126A
cs=0x1a2;eip=0x00126f; 	T(MOV(ax, ds));	// 2192 mov     ax, ds ;~ 01A2:126F
cs=0x1a2;eip=0x001271; 	T(MOV(es, ax));	// 2193 mov     es, ax ;~ 01A2:1271
cs=0x1a2;eip=0x001273; 	T(MOV(si, offset(seg003,_myin_0)));	// 2194 mov     si, offset _myin_0 ; in ;~ 01A2:1273
cs=0x1a2;eip=0x001276; 	T(MOV(di, offset(seg003,out_)));	// 2195 mov     di, offset out_ ; "                                " ;~ 01A2:1276
cs=0x1a2;eip=0x001279; 	T(MOV(cx, 0x20));	// 2196 mov     cx, 20h ; ' '   ; count ;~ 01A2:1279
cs=0x1a2;eip=0x00127c; 	J(CALL(_copy_printable,0));	// 2197 call    _copy_printable ;~ 01A2:127C
cs=0x1a2;eip=0x00127f; 	T(MOV(dx, offset(seg003,_my_in)));	// 2198 mov     dx, offset _my_in ;~ 01A2:127F
cs=0x1a2;eip=0x001282; 	T(MOV(cx, 1));	// 2199 mov     cx, 1 ;~ 01A2:1282
cs=0x1a2;eip=0x001285; 	T(MOVZX(eax, byte_30537));	// 2200 movzx   eax, byte_30537 ;~ 01A2:1285
cs=0x1a2;eip=0x00128b; 	T(SHL(eax, 5));	// 2201 shl     eax, 5 ;~ 01A2:128B
cs=0x1a2;eip=0x00128f; 	T(ADD(eax, 0x30));	// 2202 add     eax, 30h ; '0' ;~ 01A2:128F
cs=0x1a2;eip=0x001293; 	J(CALL(_dosseek,0));	// 2203 call    _dosseek ;~ 01A2:1293
cs=0x1a2;eip=0x001296; 	T(MOVZX(ax, _my_in));	// 2204 movzx   ax, _my_in ;~ 01A2:1296
cs=0x1a2;eip=0x00129b; 	X(MOV(word_245d2, ax));	// 2205 mov     word_245D2, ax ;~ 01A2:129B
cs=0x1a2;eip=0x00129e; 	X(MUL1_2(*(dw*)(((db*)&_chrin))));	// 2206 mul     word ptr _chrin ;~ 01A2:129E
cs=0x1a2;eip=0x0012a2; 	T(MOV(cx, ax));	// 2207 mov     cx, ax ;~ 01A2:12A2
cs=0x1a2;eip=0x0012a4; 	T(MOV(dx, offset(seg003,byte_30539)));	// 2208 mov     dx, offset byte_30539 ;~ 01A2:12A4
cs=0x1a2;eip=0x0012a7; 	J(CALL(_dosfread,0));	// 2209 call    _dosfread ;~ 01A2:12A7
cs=0x1a2;eip=0x0012aa; 	T(MOV(si, offset(seg003,byte_30539)));	// 2210 mov     si, offset byte_30539 ; in ;~ 01A2:12AA
cs=0x1a2;eip=0x0012ad; 	T(MOV(di, offset(seg003,_myout)));	// 2211 mov     di, offset _myout ; out ;~ 01A2:12AD
cs=0x1a2;eip=0x0012b0; 	T(MOV(cx, word_245d2));	// 2212 mov     cx, word_245D2 ;~ 01A2:12B0
loc_112b4:
	// 4535 
cs=0x1a2;eip=0x0012b4; 	X(PUSH(cx));	// 2215 push    cx ;~ 01A2:12B4
cs=0x1a2;eip=0x0012b5; 	X(PUSH(si));	// 2216 push    si ;~ 01A2:12B5
cs=0x1a2;eip=0x0012b6; 	X(PUSH(di));	// 2217 push    di ;~ 01A2:12B6
cs=0x1a2;eip=0x0012b7; 	T(MOV(edx, *(dd*)(raddr(ds,si+0x38))));	// 2218 mov     edx, [si+38h] ;~ 01A2:12B7
cs=0x1a2;eip=0x0012bb; 	T(SUB(edx, *(dd*)(raddr(ds,si+0x34))));	// 2219 sub     edx, [si+34h] ;~ 01A2:12BB
cs=0x1a2;eip=0x0012bf; 	J(JNC(loc_112c4));	// 2220 jnb     short loc_112C4 ;~ 01A2:12BF
cs=0x1a2;eip=0x0012c1; 	T(XOR(edx, edx));	// 2221 xor     edx, edx ;~ 01A2:12C1
loc_112c4:
	// 4536 
cs=0x1a2;eip=0x0012c4; 	T(CMP(edx, 0x100000));	// 2224 cmp     edx, 100000h ;~ 01A2:12C4
cs=0x1a2;eip=0x0012cb; 	T(CMC);	// 2225 cmc ;~ 01A2:12CB
cs=0x1a2;eip=0x0012cc; 	X(ADC(word_24662, 0));	// 2226 adc     word_24662, 0 ;~ 01A2:12CC
cs=0x1a2;eip=0x0012d1; 	X(MOV(*(dd*)(raddr(ds,di+0x20)), edx));	// 2227 mov     [di+20h], edx ;~ 01A2:12D1
cs=0x1a2;eip=0x0012d5; 	X(ADD(dword_245c4, edx));	// 2228 add     dword_245C4, edx ;~ 01A2:12D5
cs=0x1a2;eip=0x0012da; 	T(MOV(al, *(raddr(ds,si+0x3C))));	// 2229 mov     al, [si+3Ch] ;~ 01A2:12DA
cs=0x1a2;eip=0x0012dd; 	T(SHR(al, 2));	// 2230 shr     al, 2 ;~ 01A2:12DD
cs=0x1a2;eip=0x0012e0; 	X(MOV(*(raddr(ds,di+0x3D)), al));	// 2231 mov     [di+3Dh], al ;~ 01A2:12E0
cs=0x1a2;eip=0x0012e3; 	T(MOV(ax, _freq_245de));	// 2232 mov     ax, _freq_245DE ;~ 01A2:12E3
cs=0x1a2;eip=0x0012e6; 	T(CMP(word_30515, 0x3034));	// 2233 cmp     word_30515, 3034h ;~ 01A2:12E6
cs=0x1a2;eip=0x0012ec; 	J(JC(loc_112f1));	// 2234 jb      short loc_112F1 ;~ 01A2:12EC
cs=0x1a2;eip=0x0012ee; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x3E))));	// 2235 mov     ax, [si+3Eh] ;~ 01A2:12EE
loc_112f1:
	// 4537 
cs=0x1a2;eip=0x0012f1; 	X(MOV(*(dw*)(raddr(ds,di+0x36)), ax));	// 2238 mov     [di+36h], ax ;~ 01A2:12F1
cs=0x1a2;eip=0x0012f4; 	T(MOV(al, *(raddr(ds,si+0x3D))));	// 2239 mov     al, [si+3Dh] ;~ 01A2:12F4
cs=0x1a2;eip=0x0012f7; 	T(AND(al, 0x1C));	// 2240 and     al, 1Ch ;~ 01A2:12F7
cs=0x1a2;eip=0x0012f9; 	X(MOV(*(raddr(ds,di+0x3C)), al));	// 2241 mov     [di+3Ch], al ;~ 01A2:12F9
cs=0x1a2;eip=0x0012fc; 	T(TEST(al, 4));	// 2242 test    al, 4 ;~ 01A2:12FC
cs=0x1a2;eip=0x0012fe; 	J(JZ(loc_11316));	// 2243 jz      short loc_11316 ;~ 01A2:12FE
cs=0x1a2;eip=0x001300; 	X(ADD(dword_245c4, edx));	// 2244 add     dword_245C4, edx ;~ 01A2:1300
cs=0x1a2;eip=0x001305; 	T(CMP(edx, 0x80000));	// 2245 cmp     edx, 80000h ;~ 01A2:1305
cs=0x1a2;eip=0x00130c; 	T(CMC);	// 2246 cmc ;~ 01A2:130C
cs=0x1a2;eip=0x00130d; 	X(ADC(word_24662, 0));	// 2247 adc     word_24662, 0 ;~ 01A2:130D
cs=0x1a2;eip=0x001312; 	X(SHL(*(dd*)(raddr(ds,di+0x20)), 1));	// 2248 shl     dword ptr [di+20h], 1 ;~ 01A2:1312
loc_11316:
	// 4538 
cs=0x1a2;eip=0x001316; 	T(TEST(al, 8));	// 2251 test    al, 8 ;~ 01A2:1316
cs=0x1a2;eip=0x001318; 	J(JNZ(loc_1132d));	// 2252 jnz     short loc_1132D ;~ 01A2:1318
loc_1131a:
	// 4539 
cs=0x1a2;eip=0x00131a; 	T(XOR(eax, eax));	// 2255 xor     eax, eax ;~ 01A2:131A
cs=0x1a2;eip=0x00131d; 	X(MOV(*(dd*)(raddr(ds,di+0x24)), eax));	// 2256 mov     [di+24h], eax ;~ 01A2:131D
cs=0x1a2;eip=0x001321; 	X(MOV(*(dd*)(raddr(ds,di+0x28)), eax));	// 2257 mov     [di+28h], eax ;~ 01A2:1321
cs=0x1a2;eip=0x001325; 	T(DEC(edx));	// 2258 dec     edx ;~ 01A2:1325
cs=0x1a2;eip=0x001327; 	X(MOV(*(dd*)(raddr(ds,di+0x2C)), edx));	// 2259 mov     [di+2Ch], edx ;~ 01A2:1327
cs=0x1a2;eip=0x00132b; 	J(JMP(loc_11359));	// 2260 jmp     short loc_11359 ;~ 01A2:132B
loc_1132d:
	// 4540 
cs=0x1a2;eip=0x00132d; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x30))));	// 2264 mov     eax, [si+30h] ;~ 01A2:132D
cs=0x1a2;eip=0x001331; 	T(OR(eax, eax));	// 2265 or      eax, eax ;~ 01A2:1331
cs=0x1a2;eip=0x001334; 	J(JZ(loc_1131a));	// 2266 jz      short loc_1131A ;~ 01A2:1334
cs=0x1a2;eip=0x001336; 	T(DEC(eax));	// 2267 dec     eax ;~ 01A2:1336
cs=0x1a2;eip=0x001338; 	T(MOV(ebx, *(dd*)(raddr(ds,si+0x2C))));	// 2268 mov     ebx, [si+2Ch] ;~ 01A2:1338
cs=0x1a2;eip=0x00133c; 	T(TEST(*(raddr(ds,di+0x3C)), 4));	// 2269 test    byte ptr [di+3Ch], 4 ;~ 01A2:133C
cs=0x1a2;eip=0x001340; 	J(JZ(loc_11348));	// 2270 jz      short loc_11348 ;~ 01A2:1340
cs=0x1a2;eip=0x001342; 	T(SHR(ebx, 1));	// 2271 shr     ebx, 1 ;~ 01A2:1342
cs=0x1a2;eip=0x001345; 	T(SHR(eax, 1));	// 2272 shr     eax, 1 ;~ 01A2:1345
loc_11348:
	// 4541 
cs=0x1a2;eip=0x001348; 	X(MOV(*(dd*)(raddr(ds,di+0x24)), ebx));	// 2275 mov     [di+24h], ebx ;~ 01A2:1348
cs=0x1a2;eip=0x00134c; 	X(MOV(*(dd*)(raddr(ds,di+0x2C)), eax));	// 2276 mov     [di+2Ch], eax ;~ 01A2:134C
cs=0x1a2;eip=0x001350; 	T(SUB(eax, ebx));	// 2277 sub     eax, ebx ;~ 01A2:1350
cs=0x1a2;eip=0x001353; 	T(INC(eax));	// 2278 inc     eax ;~ 01A2:1353
cs=0x1a2;eip=0x001355; 	X(MOV(*(dd*)(raddr(ds,di+0x28)), eax));	// 2279 mov     [di+28h], eax ;~ 01A2:1355
loc_11359:
	// 4542 
cs=0x1a2;eip=0x001359; 	T(MOV(cx, 0x20));	// 2282 mov     cx, 20h ; ' '   ; count ;~ 01A2:1359
cs=0x1a2;eip=0x00135c; 	J(CALL(_copy_printable,0));	// 2283 call    _copy_printable ;~ 01A2:135C
cs=0x1a2;eip=0x00135f; 	X(POP(di));	// 2284 pop     di ;~ 01A2:135F
cs=0x1a2;eip=0x001360; 	X(POP(si));	// 2285 pop     si ;~ 01A2:1360
cs=0x1a2;eip=0x001361; 	X(POP(cx));	// 2286 pop     cx ;~ 01A2:1361
cs=0x1a2;eip=0x001362; 	T(ADD(di, 0x40));	// 2287 add     di, 40h ; '@' ;~ 01A2:1362
cs=0x1a2;eip=0x001365; 	T(ADD(si, *(dw*)(((db*)&_chrin))));	// 2288 add     si, word ptr _chrin ;~ 01A2:1365
cs=0x1a2;eip=0x001369; 	T(DEC(cx));	// 2289 dec     cx ;~ 01A2:1369
cs=0x1a2;eip=0x00136a; 	J(JNZ(loc_112b4));	// 2290 jnz     loc_112B4 ;~ 01A2:136A
cs=0x1a2;eip=0x00136e; 	T(MOV(dx, offset(seg003,byte_30539)));	// 2291 mov     dx, offset byte_30539 ;~ 01A2:136E
cs=0x1a2;eip=0x001371; 	T(MOV(cx, 0x102));	// 2292 mov     cx, 102h ;~ 01A2:1371
cs=0x1a2;eip=0x001374; 	J(CALL(_dosfread,0));	// 2293 call    _dosfread ;~ 01A2:1374
cs=0x1a2;eip=0x001377; 	X(MOV(word_245f8, 0));	// 2294 mov     word_245F8, 0 ;~ 01A2:1377
cs=0x1a2;eip=0x00137d; 	T(MOV(si, offset(seg003,byte_30539)));	// 2295 mov     si, offset byte_30539 ;~ 01A2:137D
cs=0x1a2;eip=0x001380; 	T(XOR(ax, ax));	// 2296 xor     ax, ax ;~ 01A2:1380
loc_11382:
	// 4543 
cs=0x1a2;eip=0x001382; 	T(CMP(*(raddr(ds,si)), 0x0FF));	// 2299 cmp     byte ptr [si], 0FFh ;~ 01A2:1382
cs=0x1a2;eip=0x001385; 	J(JZ(loc_1138e));	// 2300 jz      short loc_1138E ;~ 01A2:1385
cs=0x1a2;eip=0x001387; 	T(INC(ax));	// 2301 inc     ax ;~ 01A2:1387
cs=0x1a2;eip=0x001388; 	T(INC(si));	// 2302 inc     si ;~ 01A2:1388
cs=0x1a2;eip=0x001389; 	T(CMP(ax, 0x100));	// 2303 cmp     ax, 100h ;~ 01A2:1389
cs=0x1a2;eip=0x00138c; 	J(JC(loc_11382));	// 2304 jb      short loc_11382 ;~ 01A2:138C
loc_1138e:
	// 4544 
cs=0x1a2;eip=0x00138e; 	X(MOV(word_245fa, ax));	// 2307 mov     word_245FA, ax ;~ 01A2:138E
cs=0x1a2;eip=0x001391; 	T(MOV(ax, ds));	// 2308 mov     ax, ds ;~ 01A2:1391
cs=0x1a2;eip=0x001393; 	T(MOV(es, ax));	// 2309 mov     es, ax ;~ 01A2:1393
cs=0x1a2;eip=0x001395; 	T(MOV(si, offset(seg003,byte_30539)));	// 2310 mov     si, offset byte_30539 ;~ 01A2:1395
cs=0x1a2;eip=0x001398; 	T(MOV(di, offset(seg003,byte_27fe8)));	// 2311 mov     di, offset byte_27FE8 ;~ 01A2:1398
cs=0x1a2;eip=0x00139b; 	T(MOV(cx, word_245fa));	// 2312 mov     cx, word_245FA ;~ 01A2:139B
cs=0x1a2;eip=0x00139f; 	T(CLD);	// 2313 cld ;~ 01A2:139F
	// 2314 rep movsb ;~ 01A2:13A0
cs=0x1a2;eip=0x0013a0; 	X(	REP MOVSB);	// 2314 rep movsb ;~ 01A2:13A0
cs=0x1a2;eip=0x0013a2; 	T(MOVZX(ax, byte_30639));	// 2315 movzx   ax, byte_30639 ;~ 01A2:13A2
cs=0x1a2;eip=0x0013a7; 	T(INC(ax));	// 2316 inc     ax ;~ 01A2:13A7
cs=0x1a2;eip=0x0013a8; 	X(MOV(word_245d4, ax));	// 2317 mov     word_245D4, ax ;~ 01A2:13A8
cs=0x1a2;eip=0x0013ab; 	T(MOVZX(ax, byte_3063a));	// 2318 movzx   ax, byte_3063A ;~ 01A2:13AB
cs=0x1a2;eip=0x0013b0; 	T(INC(ax));	// 2319 inc     ax ;~ 01A2:13B0
cs=0x1a2;eip=0x0013b1; 	X(MOV(word_245f2, ax));	// 2320 mov     word_245F2, ax ;~ 01A2:13B1
cs=0x1a2;eip=0x0013b4; 	X(MOV(byte_2467e, 0));	// 2321 mov     byte_2467E, 0 ;~ 01A2:13B4
cs=0x1a2;eip=0x0013b9; 	T(MOV(ax, word_30515));	// 2322 mov     ax, word_30515 ;~ 01A2:13B9
cs=0x1a2;eip=0x0013bc; 	T(CMP(ax, 0x3031));	// 2323 cmp     ax, 3031h ;~ 01A2:13BC
cs=0x1a2;eip=0x0013bf; 	J(JZ(loc_113c6));	// 2324 jz      short loc_113C6 ;~ 01A2:13BF
cs=0x1a2;eip=0x0013c1; 	X(MOV(byte_2467e, 2));	// 2325 mov     byte_2467E, 2 ;~ 01A2:13C1
loc_113c6:
	// 4545 
cs=0x1a2;eip=0x0013c6; 	T(CMP(ax, 0x3033));	// 2328 cmp     ax, 3033h ;~ 01A2:13C6
cs=0x1a2;eip=0x0013c9; 	J(JC(loc_113f8));	// 2329 jb      short loc_113F8 ;~ 01A2:13C9
cs=0x1a2;eip=0x0013cb; 	T(MOV(dx, offset(seg003,word_3063b)));	// 2330 mov     dx, offset word_3063B ;~ 01A2:13CB
cs=0x1a2;eip=0x0013ce; 	T(MOV(cx, word_245d4));	// 2331 mov     cx, word_245D4 ;~ 01A2:13CE
cs=0x1a2;eip=0x0013d2; 	J(CALL(_dosfread,0));	// 2332 call    _dosfread ;~ 01A2:13D2
cs=0x1a2;eip=0x0013d5; 	T(CMP(_sndcard_type, 0));	// 2333 cmp     _sndcard_type, 0 ;~ 01A2:13D5
cs=0x1a2;eip=0x0013da; 	J(JNZ(loc_113f8));	// 2334 jnz     short loc_113F8 ;~ 01A2:13DA
cs=0x1a2;eip=0x0013dc; 	T(XOR(si, si));	// 2335 xor     si, si ;~ 01A2:13DC
cs=0x1a2;eip=0x0013de; 	T(MOV(cx, word_245d4));	// 2336 mov     cx, word_245D4 ;~ 01A2:13DE
loc_113e2:
	// 4546 
cs=0x1a2;eip=0x0013e2; 	T(MOV(al, *(db*)(((db*)&word_3063b)+si)));	// 2339 mov     al, byte ptr word_3063B[si] ;~ 01A2:13E2
cs=0x1a2;eip=0x0013e6; 	T(MOV(di, ax));	// 2340 mov     di, ax ;~ 01A2:13E6
cs=0x1a2;eip=0x0013e8; 	T(AND(di, 0x0F));	// 2341 and     di, 0Fh ;~ 01A2:13E8
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0013eb; 	T(MOV(al, *((byte_13c54)+di)));	// 2342 mov     al, cs:byte_13C54[di] ;~ 01A2:13EB
cs=0x1a2;eip=0x0013f0; 	X(MOV(*(db*)(((db*)&dword_27bc8)+si), al));	// 2343 mov     byte ptr dword_27BC8[si], al ;~ 01A2:13F0
cs=0x1a2;eip=0x0013f4; 	T(INC(si));	// 2344 inc     si ;~ 01A2:13F4
cs=0x1a2;eip=0x0013f5; 	T(DEC(cx));	// 2345 dec     cx ;~ 01A2:13F5
cs=0x1a2;eip=0x0013f6; 	J(JNZ(loc_113e2));	// 2346 jnz     short loc_113E2 ;~ 01A2:13F6
loc_113f8:
	// 4547 
cs=0x1a2;eip=0x0013f8; 	T(MOV(si, offset(seg003,dword_30518)));	// 2350 mov     si, offset dword_30518 ;~ 01A2:13F8
cs=0x1a2;eip=0x0013fb; 	T(MOV(cx, word_245d4));	// 2351 mov     cx, word_245D4 ;~ 01A2:13FB
loc_113ff:
	// 4548 
cs=0x1a2;eip=0x0013ff; 	X(PUSH(cx));	// 2354 push    cx ;~ 01A2:13FF
cs=0x1a2;eip=0x001400; 	X(PUSH(si));	// 2355 push    si ;~ 01A2:1400
cs=0x1a2;eip=0x001401; 	T(XOR(dx, dx));	// 2356 xor     dx, dx ;~ 01A2:1401
cs=0x1a2;eip=0x001403; 	T(XOR(cx, cx));	// 2357 xor     cx, cx ;~ 01A2:1403
cs=0x1a2;eip=0x001405; 	T(MOV(bx, _fhandle_module));	// 2358 mov     bx, _fhandle_module ;~ 01A2:1405
cs=0x1a2;eip=0x001409; 	T(MOV(ax, 0x4201));	// 2359 mov     ax, 4201h ;~ 01A2:1409
cs=0x1a2;eip=0x00140c; 	S(_INT(0x21));	// 2360 int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK) ;~ 01A2:140C
cs=0x1a2;eip=0x00140e; 	X(MOV(*(dw*)(raddr(ds,si)), ax));	// 2362 mov     [si], ax ;~ 01A2:140E
cs=0x1a2;eip=0x001410; 	X(MOV(*(dw*)(raddr(ds,si+2)), dx));	// 2363 mov     [si+2], dx ;~ 01A2:1410
cs=0x1a2;eip=0x001413; 	T(MOV(cx, word_245f2));	// 2364 mov     cx, word_245F2 ;~ 01A2:1413
loc_11417:
	// 4549 
cs=0x1a2;eip=0x001417; 	X(PUSH(cx));	// 2367 push    cx ;~ 01A2:1417
cs=0x1a2;eip=0x001418; 	X(MOV(*(db*)(((db*)&word_3063b)+1), 1));	// 2368 mov     byte ptr word_3063B+1, 1 ;~ 01A2:1418
cs=0x1a2;eip=0x00141d; 	T(MOV(cx, 0x40));	// 2369 mov     cx, 40h ; '@' ;~ 01A2:141D
loc_11420:
	// 4550 
cs=0x1a2;eip=0x001420; 	X(PUSH(cx));	// 2372 push    cx ;~ 01A2:1420
cs=0x1a2;eip=0x001421; 	J(CALL(_ult_read,0));	// 2373 call    _ult_read ;~ 01A2:1421
cs=0x1a2;eip=0x001424; 	X(POP(cx));	// 2374 pop     cx ;~ 01A2:1424
cs=0x1a2;eip=0x001425; 	T(DEC(cx));	// 2375 dec     cx ;~ 01A2:1425
cs=0x1a2;eip=0x001426; 	J(JNZ(loc_11420));	// 2376 jnz     short loc_11420 ;~ 01A2:1426
cs=0x1a2;eip=0x001428; 	X(POP(cx));	// 2377 pop     cx ;~ 01A2:1428
cs=0x1a2;eip=0x001429; 	T(DEC(cx));	// 2378 dec     cx ;~ 01A2:1429
cs=0x1a2;eip=0x00142a; 	J(JNZ(loc_11417));	// 2379 jnz     short loc_11417 ;~ 01A2:142A
cs=0x1a2;eip=0x00142c; 	X(POP(si));	// 2380 pop     si ;~ 01A2:142C
cs=0x1a2;eip=0x00142d; 	X(POP(cx));	// 2381 pop     cx ;~ 01A2:142D
cs=0x1a2;eip=0x00142e; 	T(ADD(si, 4));	// 2382 add     si, 4 ;~ 01A2:142E
cs=0x1a2;eip=0x001431; 	T(DEC(cx));	// 2383 dec     cx ;~ 01A2:1431
cs=0x1a2;eip=0x001432; 	J(JNZ(loc_113ff));	// 2384 jnz     short loc_113FF ;~ 01A2:1432
cs=0x1a2;eip=0x001434; 	T(MOV(cx, word_245f2));	// 2385 mov     cx, word_245F2 ;~ 01A2:1434
loc_11438:
	// 4551 
cs=0x1a2;eip=0x001438; 	X(PUSH(cx));	// 2388 push    cx ;~ 01A2:1438
cs=0x1a2;eip=0x001439; 	T(MOV(si, offset(seg003,dword_30518)));	// 2389 mov     si, offset dword_30518 ;~ 01A2:1439
cs=0x1a2;eip=0x00143c; 	T(MOV(di, offset(seg003,byte_30908)));	// 2390 mov     di, offset byte_30908 ;~ 01A2:143C
cs=0x1a2;eip=0x00143f; 	T(MOV(cx, word_245d4));	// 2391 mov     cx, word_245D4 ;~ 01A2:143F
loc_11443:
	// 4552 
cs=0x1a2;eip=0x001443; 	X(PUSH(cx));	// 2394 push    cx ;~ 01A2:1443
cs=0x1a2;eip=0x001444; 	T(MOV(dx, *(dw*)(raddr(ds,si))));	// 2395 mov     dx, [si] ;~ 01A2:1444
cs=0x1a2;eip=0x001446; 	T(MOV(cx, *(dw*)(raddr(ds,si+2))));	// 2396 mov     cx, [si+2] ;~ 01A2:1446
cs=0x1a2;eip=0x001449; 	T(MOV(bx, _fhandle_module));	// 2397 mov     bx, _fhandle_module ;~ 01A2:1449
cs=0x1a2;eip=0x00144d; 	T(MOV(ax, 0x4200));	// 2398 mov     ax, 4200h ;~ 01A2:144D
cs=0x1a2;eip=0x001450; 	S(_INT(0x21));	// 2399 int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK) ;~ 01A2:1450
cs=0x1a2;eip=0x001452; 	X(MOV(*(db*)(((db*)&word_3063b)+1), 1));	// 2401 mov     byte ptr word_3063B+1, 1 ;~ 01A2:1452
cs=0x1a2;eip=0x001457; 	T(MOV(cx, 0x40));	// 2402 mov     cx, 40h ; '@' ;~ 01A2:1457
loc_1145a:
	// 4553 
cs=0x1a2;eip=0x00145a; 	X(PUSH(cx));	// 2405 push    cx ;~ 01A2:145A
cs=0x1a2;eip=0x00145b; 	J(CALL(_ult_read,0));	// 2406 call    _ult_read ;~ 01A2:145B
cs=0x1a2;eip=0x00145e; 	T(MOV(eax, dword_3063d));	// 2407 mov     eax, dword_3063D ;~ 01A2:145E
cs=0x1a2;eip=0x001462; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 2408 mov     [di], eax ;~ 01A2:1462
cs=0x1a2;eip=0x001465; 	T(MOV(al, *(byte_30641)));	// 2409 mov     al, byte_30641 ;~ 01A2:1465
cs=0x1a2;eip=0x001468; 	X(MOV(*(raddr(ds,di+4)), al));	// 2410 mov     [di+4], al ;~ 01A2:1468
cs=0x1a2;eip=0x00146b; 	T(ADD(di, 5));	// 2411 add     di, 5 ;~ 01A2:146B
cs=0x1a2;eip=0x00146e; 	X(POP(cx));	// 2412 pop     cx ;~ 01A2:146E
cs=0x1a2;eip=0x00146f; 	T(DEC(cx));	// 2413 dec     cx ;~ 01A2:146F
cs=0x1a2;eip=0x001470; 	J(JNZ(loc_1145a));	// 2414 jnz     short loc_1145A ;~ 01A2:1470
cs=0x1a2;eip=0x001472; 	T(XOR(dx, dx));	// 2415 xor     dx, dx ;~ 01A2:1472
cs=0x1a2;eip=0x001474; 	T(XOR(cx, cx));	// 2416 xor     cx, cx ;~ 01A2:1474
cs=0x1a2;eip=0x001476; 	T(MOV(bx, _fhandle_module));	// 2417 mov     bx, _fhandle_module ;~ 01A2:1476
cs=0x1a2;eip=0x00147a; 	T(MOV(ax, 0x4201));	// 2418 mov     ax, 4201h ;~ 01A2:147A
cs=0x1a2;eip=0x00147d; 	S(_INT(0x21));	// 2419 int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK) ;~ 01A2:147D
cs=0x1a2;eip=0x00147f; 	X(MOV(*(dw*)(raddr(ds,si)), ax));	// 2421 mov     [si], ax ;~ 01A2:147F
cs=0x1a2;eip=0x001481; 	X(MOV(*(dw*)(raddr(ds,si+2)), dx));	// 2422 mov     [si+2], dx ;~ 01A2:1481
cs=0x1a2;eip=0x001484; 	X(POP(cx));	// 2423 pop     cx ;~ 01A2:1484
cs=0x1a2;eip=0x001485; 	T(ADD(si, 4));	// 2424 add     si, 4 ;~ 01A2:1485
cs=0x1a2;eip=0x001488; 	T(DEC(cx));	// 2425 dec     cx ;~ 01A2:1488
cs=0x1a2;eip=0x001489; 	J(JNZ(loc_11443));	// 2426 jnz     short loc_11443 ;~ 01A2:1489
cs=0x1a2;eip=0x00148b; 	J(CALL(_memalloc12k,0));	// 2427 call    _memalloc12k ;~ 01A2:148B
cs=0x1a2;eip=0x00148e; 	T(MOV(si, offset(seg003,byte_30908)));	// 2428 mov     si, offset byte_30908 ;~ 01A2:148E
cs=0x1a2;eip=0x001491; 	T(MOV(cx, 0x40));	// 2429 mov     cx, 40h ; '@' ;~ 01A2:1491
loc_11494:
	// 4554 
cs=0x1a2;eip=0x001494; 	X(PUSH(cx));	// 2432 push    cx ;~ 01A2:1494
cs=0x1a2;eip=0x001495; 	X(PUSH(si));	// 2433 push    si ;~ 01A2:1495
cs=0x1a2;eip=0x001496; 	T(MOV(cx, word_245d4));	// 2434 mov     cx, word_245D4 ;~ 01A2:1496
cs=0x1a2;eip=0x00149a; 	T(XOR(ch, ch));	// 2435 xor     ch, ch ;~ 01A2:149A
loc_1149c:
	// 4555 
cs=0x1a2;eip=0x00149c; 	X(PUSH(cx));	// 2438 push    cx ;~ 01A2:149C
cs=0x1a2;eip=0x00149d; 	T(XOR(bx, bx));	// 2439 xor     bx, bx ;~ 01A2:149D
cs=0x1a2;eip=0x00149f; 	T(MOV(al, *(raddr(ds,si))));	// 2440 mov     al, [si] ;~ 01A2:149F
cs=0x1a2;eip=0x0014a1; 	T(OR(al, al));	// 2441 or      al, al ;~ 01A2:14A1
cs=0x1a2;eip=0x0014a3; 	J(JZ(loc_114c0));	// 2442 jz      short loc_114C0 ;~ 01A2:14A3
cs=0x1a2;eip=0x0014a5; 	T(DEC(al));	// 2443 dec     al ;~ 01A2:14A5
cs=0x1a2;eip=0x0014a7; 	T(XOR(ah, ah));	// 2444 xor     ah, ah ;~ 01A2:14A7
cs=0x1a2;eip=0x0014a9; 	T(MOV(cl, 0x0C));	// 2445 mov     cl, 0Ch ;~ 01A2:14A9
cs=0x1a2;eip=0x0014ab; 	T(DIV1(cl));	// 2446 div     cl ;~ 01A2:14AB
cs=0x1a2;eip=0x0014ad; 	T(SHL(al, 4));	// 2447 shl     al, 4 ;~ 01A2:14AD
cs=0x1a2;eip=0x0014b0; 	T(INC(ah));	// 2448 inc     ah ;~ 01A2:14B0
cs=0x1a2;eip=0x0014b2; 	T(OR(al, ah));	// 2449 or      al, ah ;~ 01A2:14B2
cs=0x1a2;eip=0x0014b4; 	T(MOV(bl, al));	// 2450 mov     bl, al ;~ 01A2:14B4
cs=0x1a2;eip=0x0014b6; 	T(MOV(bh, *(raddr(ds,si+1))));	// 2451 mov     bh, [si+1] ;~ 01A2:14B6
cs=0x1a2;eip=0x0014b9; 	T(CMP(bh, 0x63));	// 2452 cmp     bh, 63h ; 'c' ;~ 01A2:14B9
cs=0x1a2;eip=0x0014bc; 	J(JC(loc_114c0));	// 2453 jb      short loc_114C0 ;~ 01A2:14BC
cs=0x1a2;eip=0x0014be; 	T(XOR(bh, bh));	// 2454 xor     bh, bh ;~ 01A2:14BE
loc_114c0:
	// 4556 
cs=0x1a2;eip=0x0014c0; 	T(MOV(cl, 0x0FF));	// 2458 mov     cl, 0FFh ;~ 01A2:14C0
cs=0x1a2;eip=0x0014c2; 	T(MOV(al, *(raddr(ds,si+2))));	// 2459 mov     al, [si+2] ;~ 01A2:14C2
cs=0x1a2;eip=0x0014c5; 	T(MOV(dl, al));	// 2460 mov     dl, al ;~ 01A2:14C5
cs=0x1a2;eip=0x0014c7; 	T(SHR(al, 4));	// 2461 shr     al, 4 ;~ 01A2:14C7
cs=0x1a2;eip=0x0014ca; 	T(MOV(ah, *(raddr(ds,si+4))));	// 2462 mov     ah, [si+4] ;~ 01A2:14CA
cs=0x1a2;eip=0x0014cd; 	T(AND(dl, 0x0F));	// 2463 and     dl, 0Fh ;~ 01A2:14CD
cs=0x1a2;eip=0x0014d0; 	T(MOV(dh, *(raddr(ds,si+3))));	// 2464 mov     dh, [si+3] ;~ 01A2:14D0
cs=0x1a2;eip=0x0014d3; 	J(CALL(_ult_1150b,0));	// 2465 call    _ult_1150B ;~ 01A2:14D3
cs=0x1a2;eip=0x0014d6; 	T(XCHG(ax, dx));	// 2466 xchg    ax, dx ;~ 01A2:14D6
cs=0x1a2;eip=0x0014d7; 	J(CALL(_ult_1150b,0));	// 2467 call    _ult_1150B ;~ 01A2:14D7
cs=0x1a2;eip=0x0014da; 	T(CMP(dl, al));	// 2468 cmp     dl, al ;~ 01A2:14DA
cs=0x1a2;eip=0x0014dc; 	J(JA(loc_114df));	// 2469 ja      short loc_114DF ;~ 01A2:14DC
cs=0x1a2;eip=0x0014de; 	T(XCHG(ax, dx));	// 2470 xchg    ax, dx ;~ 01A2:14DE
loc_114df:
	// 4557 
cs=0x1a2;eip=0x0014df; 	J(CALL(sub_11ba6,0));	// 2473 call    sub_11BA6 ;~ 01A2:14DF
cs=0x1a2;eip=0x0014e2; 	X(POP(cx));	// 2474 pop     cx ;~ 01A2:14E2
cs=0x1a2;eip=0x0014e3; 	T(ADD(si, 0x140));	// 2475 add     si, 140h ;~ 01A2:14E3
cs=0x1a2;eip=0x0014e7; 	T(INC(ch));	// 2476 inc     ch ;~ 01A2:14E7
cs=0x1a2;eip=0x0014e9; 	T(CMP(ch, cl));	// 2477 cmp     ch, cl ;~ 01A2:14E9
cs=0x1a2;eip=0x0014eb; 	J(JC(loc_1149c));	// 2478 jb      short loc_1149C ;~ 01A2:14EB
cs=0x1a2;eip=0x0014ed; 	X(MOV(*(raddr(es,di)), 0));	// 2479 mov     byte ptr es:[di], 0 ;~ 01A2:14ED
cs=0x1a2;eip=0x0014f1; 	T(INC(di));	// 2480 inc     di ;~ 01A2:14F1
cs=0x1a2;eip=0x0014f2; 	X(POP(si));	// 2481 pop     si ;~ 01A2:14F2
cs=0x1a2;eip=0x0014f3; 	X(POP(cx));	// 2482 pop     cx ;~ 01A2:14F3
cs=0x1a2;eip=0x0014f4; 	T(ADD(si, 5));	// 2483 add     si, 5 ;~ 01A2:14F4
cs=0x1a2;eip=0x0014f7; 	T(DEC(cx));	// 2484 dec     cx ;~ 01A2:14F7
cs=0x1a2;eip=0x0014f8; 	J(JNZ(loc_11494));	// 2485 jnz     short loc_11494 ;~ 01A2:14F8
cs=0x1a2;eip=0x0014fa; 	J(CALL(_mem_reallocx,0));	// 2486 call    _mem_reallocx ;~ 01A2:14FA
cs=0x1a2;eip=0x0014fd; 	X(POP(cx));	// 2487 pop     cx ;~ 01A2:14FD
cs=0x1a2;eip=0x0014fe; 	T(DEC(cx));	// 2488 dec     cx ;~ 01A2:14FE
cs=0x1a2;eip=0x0014ff; 	J(JNZ(loc_11438));	// 2489 jnz     loc_11438 ;~ 01A2:14FF
cs=0x1a2;eip=0x001503; 	J(CALL(_mod_readfile_11f4e,0));	// 2490 call    near ptr _mod_readfile_11F4E ;~ 01A2:1503
cs=0x1a2;eip=0x001506; 	J(JC(loc_10099));	// 2491 jb      loc_10099 ;~ 01A2:1506
cs=0x1a2;eip=0x00150a; 	J(RETN(0));	// 2492 retn ;~ 01A2:150A
_dosseek:
	// 3280 
cs=0x1a2;eip=0x001b45; 	X(PUSH(cx));	// 3282 push    cx ;~ 01A2:1B45
cs=0x1a2;eip=0x001b46; 	X(PUSH(dx));	// 3283 push    dx ;~ 01A2:1B46
cs=0x1a2;eip=0x001b47; 	T(MOV(dx, ax));	// 3284 mov     dx, ax ;~ 01A2:1B47
cs=0x1a2;eip=0x001b49; 	T(SHR(eax, 0x10));	// 3285 shr     eax, 10h ;~ 01A2:1B49
cs=0x1a2;eip=0x001b4d; 	T(MOV(cx, ax));	// 3286 mov     cx, ax ;~ 01A2:1B4D
cs=0x1a2;eip=0x001b4f; 	T(MOV(bx, _fhandle_module));	// 3287 mov     bx, _fhandle_module ;~ 01A2:1B4F
cs=0x1a2;eip=0x001b53; 	T(MOV(ax, 0x4200));	// 3288 mov     ax, 4200h ;~ 01A2:1B53
cs=0x1a2;eip=0x001b56; 	S(_INT(0x21));	// 3289 int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK) ;~ 01A2:1B56
cs=0x1a2;eip=0x001b58; 	X(POP(dx));	// 3291 pop     dx ;~ 01A2:1B58
cs=0x1a2;eip=0x001b59; 	X(POP(cx));	// 3292 pop     cx ;~ 01A2:1B59
cs=0x1a2;eip=0x001b5a; 	T(MOV(ax, 0x0FFFC));	// 3293 mov     ax, 0FFFCh ;~ 01A2:1B5A
cs=0x1a2;eip=0x001b5d; 	J(JC(_lfreaderr));	// 3294 jb      _lfreaderr ;~ 01A2:1B5D
	S(JMP(_dosfread));_dosfread:
	// 3301 
cs=0x1a2;eip=0x001b61; 	T(MOV(bx, _fhandle_module));	// 3303 mov     bx, _fhandle_module ;~ 01A2:1B61
cs=0x1a2;eip=0x001b65; 	T(MOV(ah, 0x3F));	// 3304 mov     ah, 3Fh ;~ 01A2:1B65
cs=0x1a2;eip=0x001b67; 	S(_INT(0x21));	// 3305 int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE ;~ 01A2:1B67
cs=0x1a2;eip=0x001b69; 	T(MOV(cx, ax));	// 3308 mov     cx, ax ;~ 01A2:1B69
cs=0x1a2;eip=0x001b6b; 	T(MOV(ax, 0x0FFFC));	// 3309 mov     ax, 0FFFCh ;~ 01A2:1B6B
cs=0x1a2;eip=0x001b6e; 	J(JC(_lfreaderr));	// 3310 jb      _lfreaderr      ; 1 problem here ;~ 01A2:1B6E
cs=0x1a2;eip=0x001b72; 	J(RETN(0));	// 3311 retn ;~ 01A2:1B72
_memalloc12k:
	// 3318 
cs=0x1a2;eip=0x001b73; 	T(MOV(ebx, 12352));	// 3320 mov     ebx, 12352      ; bytes ;~ 01A2:1B73
cs=0x1a2;eip=0x001b79; 	J(CALL(_memalloc,0));	// 3321 call    _memalloc ;~ 01A2:1B79
cs=0x1a2;eip=0x001b7c; 	J(JC(loc_10099));	// 3322 jb      loc_10099 ;~ 01A2:1B7C
cs=0x1a2;eip=0x001b80; 	T(MOV(es, ax));	// 3323 mov     es, ax ;~ 01A2:1B80
cs=0x1a2;eip=0x001b82; 	T(XOR(di, di));	// 3324 xor     di, di ;~ 01A2:1B82
cs=0x1a2;eip=0x001b84; 	J(RETN(0));	// 3325 retn ;~ 01A2:1B84

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k__2stm_module: 	goto __2stm_module;
        case m2c::k__669_module: 	goto __669_module;
        case m2c::k_dosfread: 	goto _dosfread;
        case m2c::k_dosseek: 	goto _dosseek;
        case m2c::k_e669_module: 	goto _e669_module;
        case m2c::k_far_module: 	goto _far_module;
        case m2c::k_lfreaderr: 	goto _lfreaderr;
        case m2c::k_memalloc12k: 	goto _memalloc12k;
        case m2c::k_mod_cd81_module: 	goto _mod_cd81_module;
        case m2c::k_mod_ch_module: 	goto _mod_ch_module;
        case m2c::k_mod_chn_module: 	goto _mod_chn_module;
        case m2c::k_mod_flt8_module: 	goto _mod_flt8_module;
        case m2c::k_mod_mk_module: 	goto _mod_mk_module;
        case m2c::k_mod_n_t_module: 	goto _mod_n_t_module;
        case m2c::k_mod_tdz_module: 	goto _mod_tdz_module;
        case m2c::k_moduleread: 	goto _moduleread;
        case m2c::k_psm_module: 	goto _psm_module;
        case m2c::k_s3m_module: 	goto _s3m_module;
        case m2c::k_stm_module: 	goto _stm_module;
        case m2c::k_ult_module: 	goto _ult_module;
        case m2c::kloc_10045: 	goto loc_10045;
        case m2c::kloc_10064: 	goto loc_10064;
        case m2c::kloc_1008a: 	goto loc_1008a;
        case m2c::kloc_10099: 	goto loc_10099;
        case m2c::kloc_10118: 	goto loc_10118;
        case m2c::kloc_10137: 	goto loc_10137;
        case m2c::kloc_101a6: 	goto loc_101a6;
        case m2c::kloc_101b7: 	goto loc_101b7;
        case m2c::kloc_10213: 	goto loc_10213;
        case m2c::kloc_103ff: 	goto loc_103ff;
        case m2c::kloc_10445: 	goto loc_10445;
        case m2c::kloc_10487: 	goto loc_10487;
        case m2c::kloc_104b6: 	goto loc_104b6;
        case m2c::kloc_104c7: 	goto loc_104c7;
        case m2c::kloc_104e6: 	goto loc_104e6;
        case m2c::kloc_104f2: 	goto loc_104f2;
        case m2c::kloc_104f9: 	goto loc_104f9;
        case m2c::kloc_1050c: 	goto loc_1050c;
        case m2c::kloc_10513: 	goto loc_10513;
        case m2c::kloc_1052e: 	goto loc_1052e;
        case m2c::kloc_10544: 	goto loc_10544;
        case m2c::kloc_10565: 	goto loc_10565;
        case m2c::kloc_105c7: 	goto loc_105c7;
        case m2c::kloc_105ff: 	goto loc_105ff;
        case m2c::kloc_10618: 	goto loc_10618;
        case m2c::kloc_1061e: 	goto loc_1061e;
        case m2c::kloc_10628: 	goto loc_10628;
        case m2c::kloc_1063d: 	goto loc_1063d;
        case m2c::kloc_10640: 	goto loc_10640;
        case m2c::kloc_10652: 	goto loc_10652;
        case m2c::kloc_1065f: 	goto loc_1065f;
        case m2c::kloc_10672: 	goto loc_10672;
        case m2c::kloc_10680: 	goto loc_10680;
        case m2c::kloc_106a3: 	goto loc_106a3;
        case m2c::kloc_106d8: 	goto loc_106d8;
        case m2c::kloc_106f8: 	goto loc_106f8;
        case m2c::kloc_10704: 	goto loc_10704;
        case m2c::kloc_1070d: 	goto loc_1070d;
        case m2c::kloc_10720: 	goto loc_10720;
        case m2c::kloc_1074f: 	goto loc_1074f;
        case m2c::kloc_10778: 	goto loc_10778;
        case m2c::kloc_1078f: 	goto loc_1078f;
        case m2c::kloc_1079a: 	goto loc_1079a;
        case m2c::kloc_107ac: 	goto loc_107ac;
        case m2c::kloc_107b4: 	goto loc_107b4;
        case m2c::kloc_107d2: 	goto loc_107d2;
        case m2c::kloc_107e0: 	goto loc_107e0;
        case m2c::kloc_10809: 	goto loc_10809;
        case m2c::kloc_10811: 	goto loc_10811;
        case m2c::kloc_10826: 	goto loc_10826;
        case m2c::kloc_1082d: 	goto loc_1082d;
        case m2c::kloc_1083e: 	goto loc_1083e;
        case m2c::kloc_10880: 	goto loc_10880;
        case m2c::kloc_10885: 	goto loc_10885;
        case m2c::kloc_10887: 	goto loc_10887;
        case m2c::kloc_1088d: 	goto loc_1088d;
        case m2c::kloc_1088f: 	goto loc_1088f;
        case m2c::kloc_1089c: 	goto loc_1089c;
        case m2c::kloc_108a6: 	goto loc_108a6;
        case m2c::kloc_108b1: 	goto loc_108b1;
        case m2c::kloc_108c9: 	goto loc_108c9;
        case m2c::kloc_10914: 	goto loc_10914;
        case m2c::kloc_1095c: 	goto loc_1095c;
        case m2c::kloc_1096f: 	goto loc_1096f;
        case m2c::kloc_10993: 	goto loc_10993;
        case m2c::kloc_109bd: 	goto loc_109bd;
        case m2c::kloc_10a0f: 	goto loc_10a0f;
        case m2c::kloc_10a20: 	goto loc_10a20;
        case m2c::kloc_10a2d: 	goto loc_10a2d;
        case m2c::kloc_10a40: 	goto loc_10a40;
        case m2c::kloc_10a47: 	goto loc_10a47;
        case m2c::kloc_10a75: 	goto loc_10a75;
        case m2c::kloc_10a83: 	goto loc_10a83;
        case m2c::kloc_10aaa: 	goto loc_10aaa;
        case m2c::kloc_10aac: 	goto loc_10aac;
        case m2c::kloc_10b5a: 	goto loc_10b5a;
        case m2c::kloc_10bb5: 	goto loc_10bb5;
        case m2c::kloc_10bc6: 	goto loc_10bc6;
        case m2c::kloc_10c12: 	goto loc_10c12;
        case m2c::kloc_10c15: 	goto loc_10c15;
        case m2c::kloc_10c20: 	goto loc_10c20;
        case m2c::kloc_10c36: 	goto loc_10c36;
        case m2c::kloc_10c3f: 	goto loc_10c3f;
        case m2c::kloc_10c5a: 	goto loc_10c5a;
        case m2c::kloc_10c73: 	goto loc_10c73;
        case m2c::kloc_10c89: 	goto loc_10c89;
        case m2c::kloc_10c91: 	goto loc_10c91;
        case m2c::kloc_10caa: 	goto loc_10caa;
        case m2c::kloc_10d8c: 	goto loc_10d8c;
        case m2c::kloc_10dc7: 	goto loc_10dc7;
        case m2c::kloc_10df0: 	goto loc_10df0;
        case m2c::kloc_10e15: 	goto loc_10e15;
        case m2c::kloc_10e19: 	goto loc_10e19;
        case m2c::kloc_10e4c: 	goto loc_10e4c;
        case m2c::kloc_10e68: 	goto loc_10e68;
        case m2c::kloc_10e72: 	goto loc_10e72;
        case m2c::kloc_10e8c: 	goto loc_10e8c;
        case m2c::kloc_10e92: 	goto loc_10e92;
        case m2c::kloc_10eb6: 	goto loc_10eb6;
        case m2c::kloc_10ebd: 	goto loc_10ebd;
        case m2c::kloc_10ece: 	goto loc_10ece;
        case m2c::kloc_10edd: 	goto loc_10edd;
        case m2c::kloc_10edf: 	goto loc_10edf;
        case m2c::kloc_10eec: 	goto loc_10eec;
        case m2c::kloc_10ef4: 	goto loc_10ef4;
        case m2c::kloc_10f11: 	goto loc_10f11;
        case m2c::kloc_10f6a: 	goto loc_10f6a;
        case m2c::kloc_10f80: 	goto loc_10f80;
        case m2c::kloc_10fb0: 	goto loc_10fb0;
        case m2c::kloc_10fcf: 	goto loc_10fcf;
        case m2c::kloc_10fd7: 	goto loc_10fd7;
        case m2c::kloc_10fef: 	goto loc_10fef;
        case m2c::kloc_10ffe: 	goto loc_10ffe;
        case m2c::kloc_1100f: 	goto loc_1100f;
        case m2c::kloc_1102d: 	goto loc_1102d;
        case m2c::kloc_11037: 	goto loc_11037;
        case m2c::kloc_11051: 	goto loc_11051;
        case m2c::kloc_11058: 	goto loc_11058;
        case m2c::kloc_11082: 	goto loc_11082;
        case m2c::kloc_11094: 	goto loc_11094;
        case m2c::kloc_110a7: 	goto loc_110a7;
        case m2c::kloc_110cb: 	goto loc_110cb;
        case m2c::kloc_110cf: 	goto loc_110cf;
        case m2c::kloc_110d9: 	goto loc_110d9;
        case m2c::kloc_110e4: 	goto loc_110e4;
        case m2c::kloc_110eb: 	goto loc_110eb;
        case m2c::kloc_110ef: 	goto loc_110ef;
        case m2c::kloc_110f3: 	goto loc_110f3;
        case m2c::kloc_110fa: 	goto loc_110fa;
        case m2c::kloc_110ff: 	goto loc_110ff;
        case m2c::kloc_11120: 	goto loc_11120;
        case m2c::kloc_11150: 	goto loc_11150;
        case m2c::kloc_11152: 	goto loc_11152;
        case m2c::kloc_111b3: 	goto loc_111b3;
        case m2c::kloc_111c6: 	goto loc_111c6;
        case m2c::kloc_111e8: 	goto loc_111e8;
        case m2c::kloc_11204: 	goto loc_11204;
        case m2c::kloc_11217: 	goto loc_11217;
        case m2c::kloc_11265: 	goto loc_11265;
        case m2c::kloc_112b4: 	goto loc_112b4;
        case m2c::kloc_112c4: 	goto loc_112c4;
        case m2c::kloc_112f1: 	goto loc_112f1;
        case m2c::kloc_11316: 	goto loc_11316;
        case m2c::kloc_1131a: 	goto loc_1131a;
        case m2c::kloc_1132d: 	goto loc_1132d;
        case m2c::kloc_11348: 	goto loc_11348;
        case m2c::kloc_11359: 	goto loc_11359;
        case m2c::kloc_11382: 	goto loc_11382;
        case m2c::kloc_1138e: 	goto loc_1138e;
        case m2c::kloc_113c6: 	goto loc_113c6;
        case m2c::kloc_113e2: 	goto loc_113e2;
        case m2c::kloc_113f8: 	goto loc_113f8;
        case m2c::kloc_113ff: 	goto loc_113ff;
        case m2c::kloc_11417: 	goto loc_11417;
        case m2c::kloc_11420: 	goto loc_11420;
        case m2c::kloc_11438: 	goto loc_11438;
        case m2c::kloc_11443: 	goto loc_11443;
        case m2c::kloc_1145a: 	goto loc_1145a;
        case m2c::kloc_11494: 	goto loc_11494;
        case m2c::kloc_1149c: 	goto loc_1149c;
        case m2c::kloc_114c0: 	goto loc_114c0;
        case m2c::kloc_114df: 	goto loc_114df;
        case m2c::klocret_10154: 	goto locret_10154;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _mod_1021e(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _mod_1021e:
    _begin:
cs=0x1a2;eip=0x00021e; 	T(MOV(ax, ds));	// 291 mov     ax, ds ;~ 01A2:021E
cs=0x1a2;eip=0x000220; 	T(MOV(es, ax));	// 292 mov     es, ax ;~ 01A2:0220
cs=0x1a2;eip=0x000222; 	T(CLD);	// 294 cld ;~ 01A2:0222
cs=0x1a2;eip=0x000223; 	T(LODSB);	// 295 lodsb ;~ 01A2:0223
cs=0x1a2;eip=0x000224; 	T(XOR(ah, ah));	// 296 xor     ah, ah ;~ 01A2:0224
cs=0x1a2;eip=0x000226; 	X(MOV(word_245fa, ax));	// 297 mov     word_245FA, ax ;~ 01A2:0226
cs=0x1a2;eip=0x000229; 	T(LODSB);	// 298 lodsb ;~ 01A2:0229
cs=0x1a2;eip=0x00022a; 	T(CMP(al, 0x78));	// 299 cmp     al, 78h ; 'x' ;~ 01A2:022A
cs=0x1a2;eip=0x00022c; 	J(JC(loc_10230));	// 300 jb      short loc_10230 ;~ 01A2:022C
cs=0x1a2;eip=0x00022e; 	T(XOR(al, al));	// 301 xor     al, al ;~ 01A2:022E
loc_10230:
	// 4386 
cs=0x1a2;eip=0x000230; 	X(MOV(word_245f8, ax));	// 304 mov     word_245F8, ax ;~ 01A2:0230
cs=0x1a2;eip=0x000233; 	T(MOV(di, offset(seg003,byte_27fe8)));	// 305 mov     di, offset byte_27FE8 ;~ 01A2:0233
cs=0x1a2;eip=0x000236; 	T(MOV(cx, 0x20));	// 306 mov     cx, 20h ; ' ' ;~ 01A2:0236
cs=0x1a2;eip=0x000239; 	T(CLD);	// 307 cld ;~ 01A2:0239
	// 308 rep movsd ;~ 01A2:023A
cs=0x1a2;eip=0x00023a; 	X(	REP MOVSD);	// 308 rep movsd ;~ 01A2:023A
cs=0x1a2;eip=0x00023d; 	T(MOV(si, offset(seg003,_chrin)));	// 309 mov     si, offset _chrin ; in ;~ 01A2:023D
cs=0x1a2;eip=0x000240; 	T(MOV(di, offset(seg003,out_)));	// 310 mov     di, offset out_ ; out ;~ 01A2:0240
cs=0x1a2;eip=0x000243; 	T(MOV(cx, 0x14));	// 311 mov     cx, 14h         ; count ;~ 01A2:0243
cs=0x1a2;eip=0x000246; 	J(CALL(_copy_printable,0));	// 312 call    _copy_printable ;~ 01A2:0246
cs=0x1a2;eip=0x000249; 	J(RETN(0));	// 313 retn ;~ 01A2:0249

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_mod_1021e: 	goto _mod_1021e;
        case m2c::kloc_10230: 	goto loc_10230;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _mod_1024a(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _mod_1024a:
    _begin:
cs=0x1a2;eip=0x00024a; 	T(MOV(si, offset(seg003,_chrin)));	// 322 mov     si, offset _chrin ;~ 01A2:024A
cs=0x1a2;eip=0x00024d; 	T(MOV(di, offset(seg003,_myout)));	// 323 mov     di, offset _myout ; out ;~ 01A2:024D
cs=0x1a2;eip=0x000250; 	T(MOV(cx, word_245d2));	// 324 mov     cx, word_245D2 ;~ 01A2:0250
loc_10254:
	// 4387 
cs=0x1a2;eip=0x000254; 	X(PUSH(cx));	// 327 push    cx ;~ 01A2:0254
cs=0x1a2;eip=0x000255; 	T(ADD(si, 20));	// 328 add     si, 20          ; in ;~ 01A2:0255
cs=0x1a2;eip=0x000258; 	T(MOV(cx, 0x16));	// 329 mov     cx, 16h         ; count ;~ 01A2:0258
cs=0x1a2;eip=0x00025b; 	J(CALL(_copy_printable,0));	// 330 call    _copy_printable ;~ 01A2:025B
cs=0x1a2;eip=0x00025e; 	T(SUB(si, 20));	// 331 sub     si, 20 ;~ 01A2:025E
cs=0x1a2;eip=0x000261; 	X(POP(cx));	// 332 pop     cx ;~ 01A2:0261
cs=0x1a2;eip=0x000262; 	T(MOVZX(edx, *(dw*)(raddr(ds,si+0x2A))));	// 333 movzx   edx, word ptr [si+2Ah] ;~ 01A2:0262
cs=0x1a2;eip=0x000267; 	T(XCHG(dl, dh));	// 334 xchg    dl, dh ;~ 01A2:0267
cs=0x1a2;eip=0x000269; 	T(SHL(edx, 1));	// 335 shl     edx, 1 ;~ 01A2:0269
cs=0x1a2;eip=0x00026c; 	T(CMP(edx, 0x100000));	// 336 cmp     edx, 100000h ;~ 01A2:026C
cs=0x1a2;eip=0x000273; 	T(CMC);	// 337 cmc ;~ 01A2:0273
cs=0x1a2;eip=0x000274; 	X(ADC(word_24662, 0));	// 338 adc     word_24662, 0 ;~ 01A2:0274
cs=0x1a2;eip=0x000279; 	X(MOV(*(dd*)(raddr(ds,di+0x20)), edx));	// 339 mov     [di+20h], edx ;~ 01A2:0279
cs=0x1a2;eip=0x00027d; 	X(ADD(dword_245c4, edx));	// 340 add     dword_245C4, edx ;~ 01A2:027D
cs=0x1a2;eip=0x000282; 	T(MOV(al, *(raddr(ds,si+0x2C))));	// 341 mov     al, [si+2Ch] ;~ 01A2:0282
cs=0x1a2;eip=0x000285; 	T(AND(al, 0x0F));	// 342 and     al, 0Fh ;~ 01A2:0285
cs=0x1a2;eip=0x000287; 	X(MOV(*(raddr(ds,di+0x3E)), al));	// 343 mov     [di+3Eh], al ;~ 01A2:0287
cs=0x1a2;eip=0x00028a; 	T(MOV(ax, _freq_245de));	// 344 mov     ax, _freq_245DE ;~ 01A2:028A
cs=0x1a2;eip=0x00028d; 	X(MOV(*(dw*)(raddr(ds,di+0x36)), ax));	// 345 mov     [di+36h], ax ;~ 01A2:028D
cs=0x1a2;eip=0x000290; 	T(MOV(al, *(raddr(ds,si+0x2D))));	// 346 mov     al, [si+2Dh] ;~ 01A2:0290
cs=0x1a2;eip=0x000293; 	X(MOV(*(raddr(ds,di+0x3D)), al));	// 347 mov     [di+3Dh], al ;~ 01A2:0293
cs=0x1a2;eip=0x000296; 	T(MOVZX(ebx, *(dw*)(raddr(ds,si+0x2E))));	// 348 movzx   ebx, word ptr [si+2Eh] ;~ 01A2:0296
cs=0x1a2;eip=0x00029b; 	T(XCHG(bl, bh));	// 349 xchg    bl, bh ;~ 01A2:029B
cs=0x1a2;eip=0x00029d; 	T(SHL(ebx, 1));	// 350 shl     ebx, 1 ;~ 01A2:029D
cs=0x1a2;eip=0x0002a0; 	T(MOVZX(eax, *(dw*)(raddr(ds,si+0x30))));	// 351 movzx   eax, word ptr [si+30h] ;~ 01A2:02A0
cs=0x1a2;eip=0x0002a5; 	T(XCHG(al, ah));	// 352 xchg    al, ah ;~ 01A2:02A5
cs=0x1a2;eip=0x0002a7; 	T(SHL(eax, 1));	// 353 shl     eax, 1 ;~ 01A2:02A7
cs=0x1a2;eip=0x0002aa; 	X(MOV(*(dd*)(raddr(ds,di+0x28)), eax));	// 354 mov     [di+28h], eax ;~ 01A2:02AA
cs=0x1a2;eip=0x0002ae; 	T(CMP(eax, 2));	// 355 cmp     eax, 2 ;~ 01A2:02AE
cs=0x1a2;eip=0x0002b2; 	J(JBE(loc_102dc));	// 356 jbe     short loc_102DC ;~ 01A2:02B2
cs=0x1a2;eip=0x0002b4; 	T(CMP(ebx, edx));	// 357 cmp     ebx, edx ;~ 01A2:02B4
cs=0x1a2;eip=0x0002b7; 	J(JC(loc_102c1));	// 358 jb      short loc_102C1 ;~ 01A2:02B7
cs=0x1a2;eip=0x0002b9; 	T(SHR(ebx, 1));	// 359 shr     ebx, 1 ;~ 01A2:02B9
cs=0x1a2;eip=0x0002bc; 	T(CMP(ebx, edx));	// 360 cmp     ebx, edx ;~ 01A2:02BC
cs=0x1a2;eip=0x0002bf; 	J(JNC(loc_102dc));	// 361 jnb     short loc_102DC ;~ 01A2:02BF
loc_102c1:
	// 4388 
cs=0x1a2;eip=0x0002c1; 	X(OR(*(raddr(ds,di+0x3C)), 8));	// 364 or      byte ptr [di+3Ch], 8 ;~ 01A2:02C1
cs=0x1a2;eip=0x0002c5; 	T(ADD(eax, ebx));	// 365 add     eax, ebx ;~ 01A2:02C5
cs=0x1a2;eip=0x0002c8; 	T(CMP(eax, edx));	// 366 cmp     eax, edx ;~ 01A2:02C8
cs=0x1a2;eip=0x0002cb; 	J(JBE(loc_102df));	// 367 jbe     short loc_102DF ;~ 01A2:02CB
cs=0x1a2;eip=0x0002cd; 	T(MOV(eax, *(dd*)(raddr(ds,di+0x28))));	// 368 mov     eax, [di+28h] ;~ 01A2:02CD
cs=0x1a2;eip=0x0002d1; 	T(SHR(eax, 1));	// 369 shr     eax, 1 ;~ 01A2:02D1
cs=0x1a2;eip=0x0002d4; 	T(ADD(eax, ebx));	// 370 add     eax, ebx ;~ 01A2:02D4
cs=0x1a2;eip=0x0002d7; 	T(CMP(eax, edx));	// 371 cmp     eax, edx ;~ 01A2:02D7
cs=0x1a2;eip=0x0002da; 	J(JBE(loc_102df));	// 372 jbe     short loc_102DF ;~ 01A2:02DA
loc_102dc:
	// 4389 
cs=0x1a2;eip=0x0002dc; 	T(MOV(eax, edx));	// 376 mov     eax, edx ;~ 01A2:02DC
loc_102df:
	// 4390 
cs=0x1a2;eip=0x0002df; 	T(DEC(eax));	// 380 dec     eax ;~ 01A2:02DF
cs=0x1a2;eip=0x0002e1; 	X(MOV(*(dd*)(raddr(ds,di+0x2C)), eax));	// 381 mov     [di+2Ch], eax ;~ 01A2:02E1
cs=0x1a2;eip=0x0002e5; 	X(MOV(*(dd*)(raddr(ds,di+0x24)), ebx));	// 382 mov     [di+24h], ebx ;~ 01A2:02E5
cs=0x1a2;eip=0x0002e9; 	T(ADD(si, 0x1E));	// 383 add     si, 1Eh ;~ 01A2:02E9
cs=0x1a2;eip=0x0002ec; 	T(ADD(di, 0x40));	// 384 add     di, 40h ; '@' ;~ 01A2:02EC
cs=0x1a2;eip=0x0002ef; 	T(DEC(cx));	// 385 dec     cx ;~ 01A2:02EF
cs=0x1a2;eip=0x0002f0; 	J(JNZ(loc_10254));	// 386 jnz     loc_10254 ;~ 01A2:02F0
cs=0x1a2;eip=0x0002f4; 	J(RETN(0));	// 387 retn ;~ 01A2:02F4

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_mod_1024a: 	goto _mod_1024a;
        case m2c::kloc_10254: 	goto loc_10254;
        case m2c::kloc_102c1: 	goto loc_102c1;
        case m2c::kloc_102dc: 	goto loc_102dc;
        case m2c::kloc_102df: 	goto loc_102df;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _mod_102f5(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _mod_102f5:
    _begin:
cs=0x1a2;eip=0x0002f5; 	T(MOV(si, offset(seg003,byte_27fe8)));	// 396 mov     si, offset byte_27FE8 ;~ 01A2:02F5
cs=0x1a2;eip=0x0002f8; 	T(XOR(bx, bx));	// 397 xor     bx, bx ;~ 01A2:02F8
cs=0x1a2;eip=0x0002fa; 	T(MOV(cx, 0x80));	// 398 mov     cx, 80h ; '€' ;~ 01A2:02FA
cs=0x1a2;eip=0x0002fd; 	T(CLD);	// 399 cld ;~ 01A2:02FD
loc_102fe:
	// 4391 
cs=0x1a2;eip=0x0002fe; 	T(LODSB);	// 402 lodsb ;~ 01A2:02FE
cs=0x1a2;eip=0x0002ff; 	T(AND(al, 0x7F));	// 403 and     al, 7Fh ;~ 01A2:02FF
cs=0x1a2;eip=0x000301; 	T(CMP(al, bl));	// 404 cmp     al, bl ;~ 01A2:0301
cs=0x1a2;eip=0x000303; 	J(JC(loc_10307));	// 405 jb      short loc_10307 ;~ 01A2:0303
cs=0x1a2;eip=0x000305; 	T(MOV(bl, al));	// 406 mov     bl, al ;~ 01A2:0305
loc_10307:
	// 4392 
cs=0x1a2;eip=0x000307; 	T(DEC(cx));	// 409 dec     cx ;~ 01A2:0307
cs=0x1a2;eip=0x000308; 	J(JNZ(loc_102fe));	// 410 jnz     short loc_102FE ;~ 01A2:0308
cs=0x1a2;eip=0x00030a; 	T(INC(bl));	// 411 inc     bl ;~ 01A2:030A
cs=0x1a2;eip=0x00030c; 	X(MOV(word_245f2, bx));	// 412 mov     word_245F2, bx ;~ 01A2:030C
cs=0x1a2;eip=0x000310; 	J(RETN(0));	// 413 retn ;~ 01A2:0310

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_mod_102f5: 	goto _mod_102f5;
        case m2c::kloc_102fe: 	goto loc_102fe;
        case m2c::kloc_10307: 	goto loc_10307;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _mod_read_10311(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _mod_read_10311:
    _begin:
cs=0x1a2;eip=0x000311; 	T(MOV(cx, word_245f2));	// 422 mov     cx, word_245F2 ;~ 01A2:0311
loc_10315:
	// 4393 
cs=0x1a2;eip=0x000315; 	X(PUSH(cx));	// 425 push    cx ;~ 01A2:0315
cs=0x1a2;eip=0x000316; 	T(MOV(dx, offset(seg003,in_)));	// 426 mov     dx, offset in_ ;~ 01A2:0316
cs=0x1a2;eip=0x000319; 	T(MOV(cx, word_245d4));	// 427 mov     cx, word_245D4 ;~ 01A2:0319
cs=0x1a2;eip=0x00031d; 	T(SHL(cx, 8));	// 428 shl     cx, 8 ;~ 01A2:031D
cs=0x1a2;eip=0x000320; 	J(CALL(_dosfread,0));	// 429 call    _dosfread ;~ 01A2:0320
cs=0x1a2;eip=0x000323; 	T(TEST(_moduleflag_246d0, 0x2));	// 430 test    _moduleflag_246D0, 10b ;~ 01A2:0323
cs=0x1a2;eip=0x000329; 	J(JZ(loc_1035c));	// 431 jz      short loc_1035C ;~ 01A2:0329
cs=0x1a2;eip=0x00032b; 	T(MOV(ax, ds));	// 432 mov     ax, ds ;~ 01A2:032B
cs=0x1a2;eip=0x00032d; 	T(MOV(es, ax));	// 433 mov     es, ax ;~ 01A2:032D
cs=0x1a2;eip=0x00032f; 	T(MOV(si, offset(seg003,in_)));	// 434 mov     si, offset in_ ;~ 01A2:032F
cs=0x1a2;eip=0x000332; 	T(MOV(di, offset(seg003,byte_31d08)));	// 435 mov     di, offset byte_31D08 ;~ 01A2:0332
cs=0x1a2;eip=0x000335; 	T(MOV(cx, 0x200));	// 436 mov     cx, 200h ;~ 01A2:0335
cs=0x1a2;eip=0x000338; 	T(CLD);	// 437 cld ;~ 01A2:0338
	// 438 rep movsd ;~ 01A2:0339
cs=0x1a2;eip=0x000339; 	X(	REP MOVSD);	// 438 rep movsd ;~ 01A2:0339
cs=0x1a2;eip=0x00033c; 	T(MOV(si, offset(seg003,byte_31d08)));	// 439 mov     si, offset byte_31D08 ;~ 01A2:033C
cs=0x1a2;eip=0x00033f; 	T(MOV(di, offset(seg003,in_)));	// 440 mov     di, offset in_ ;~ 01A2:033F
cs=0x1a2;eip=0x000342; 	T(MOV(bx, 0x40));	// 441 mov     bx, 40h ; '@' ;~ 01A2:0342
loc_10345:
	// 4394 
cs=0x1a2;eip=0x000345; 	T(MOV(cx, 4));	// 444 mov     cx, 4 ;~ 01A2:0345
	// 445 rep movsd ;~ 01A2:0348
cs=0x1a2;eip=0x000348; 	X(	REP MOVSD);	// 445 rep movsd ;~ 01A2:0348
cs=0x1a2;eip=0x00034b; 	T(ADD(si, 0x3F0));	// 446 add     si, 3F0h ;~ 01A2:034B
cs=0x1a2;eip=0x00034f; 	T(MOV(cx, 4));	// 447 mov     cx, 4 ;~ 01A2:034F
	// 448 rep movsd ;~ 01A2:0352
cs=0x1a2;eip=0x000352; 	X(	REP MOVSD);	// 448 rep movsd ;~ 01A2:0352
cs=0x1a2;eip=0x000355; 	T(SUB(si, 0x400));	// 449 sub     si, 400h ;~ 01A2:0355
cs=0x1a2;eip=0x000359; 	T(DEC(bx));	// 450 dec     bx ;~ 01A2:0359
cs=0x1a2;eip=0x00035a; 	J(JNZ(loc_10345));	// 451 jnz     short loc_10345 ;~ 01A2:035A
loc_1035c:
	// 4395 
cs=0x1a2;eip=0x00035c; 	J(CALL(_memalloc12k,0));	// 454 call    _memalloc12k ;~ 01A2:035C
cs=0x1a2;eip=0x00035f; 	T(MOV(si, offset(seg003,in_)));	// 455 mov     si, offset in_ ;~ 01A2:035F
cs=0x1a2;eip=0x000362; 	T(MOV(cx, 0x40));	// 456 mov     cx, 40h ; '@' ;~ 01A2:0362
loc_10365:
	// 4396 
cs=0x1a2;eip=0x000365; 	X(PUSH(cx));	// 459 push    cx ;~ 01A2:0365
cs=0x1a2;eip=0x000366; 	T(MOV(cx, word_245d4));	// 460 mov     cx, word_245D4 ;~ 01A2:0366
cs=0x1a2;eip=0x00036a; 	T(XOR(ch, ch));	// 461 xor     ch, ch ;~ 01A2:036A
loc_1036c:
	// 4397 
cs=0x1a2;eip=0x00036c; 	X(PUSH(cx));	// 464 push    cx ;~ 01A2:036C
cs=0x1a2;eip=0x00036d; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 465 mov     eax, [si] ;~ 01A2:036D
cs=0x1a2;eip=0x000370; 	T(ADD(si, 4));	// 466 add     si, 4 ;~ 01A2:0370
cs=0x1a2;eip=0x000373; 	T(MOV(edx, eax));	// 467 mov     edx, eax ;~ 01A2:0373
cs=0x1a2;eip=0x000376; 	T(XCHG(al, ah));	// 468 xchg    al, ah ;~ 01A2:0376
cs=0x1a2;eip=0x000378; 	T(XOR(bl, bl));	// 469 xor     bl, bl ;~ 01A2:0378
cs=0x1a2;eip=0x00037a; 	T(AND(ax, 0x0FFF));	// 470 and     ax, 0FFFh ;~ 01A2:037A
cs=0x1a2;eip=0x00037d; 	J(JZ(loc_103b9));	// 471 jz      short loc_103B9 ;~ 01A2:037D
cs=0x1a2;eip=0x00037f; 	T(MOV(bx, 72));	// 472 mov     bx, 72 ;~ 01A2:037F
cs=0x1a2;eip=0x000382; 	T(CMP(ax, 214));	// 473 cmp     ax, 214 ;~ 01A2:0382
cs=0x1a2;eip=0x000385; 	J(JBE(loc_10399));	// 474 jbe     short loc_10399 ;~ 01A2:0385
cs=0x1a2;eip=0x000387; 	T(MOV(bx, 48));	// 475 mov     bx, 48 ;~ 01A2:0387
cs=0x1a2;eip=0x00038a; 	T(CMP(ax, 428));	// 476 cmp     ax, 428 ;~ 01A2:038A
cs=0x1a2;eip=0x00038d; 	J(JBE(loc_10399));	// 477 jbe     short loc_10399 ;~ 01A2:038D
cs=0x1a2;eip=0x00038f; 	T(MOV(bx, 24));	// 478 mov     bx, 24 ;~ 01A2:038F
cs=0x1a2;eip=0x000392; 	T(CMP(ax, 856));	// 479 cmp     ax, 856 ;~ 01A2:0392
cs=0x1a2;eip=0x000395; 	J(JBE(loc_10399));	// 480 jbe     short loc_10399 ;~ 01A2:0395
cs=0x1a2;eip=0x000397; 	T(XOR(bx, bx));	// 481 xor     bx, bx ;~ 01A2:0397
loc_10399:
	// 4398 
cs=0x1a2;eip=0x000399; 	T(CMP(ax, *(dw*)(((db*)_table_25118)+bx)));	// 485 cmp     ax, _table_25118[bx] ;~ 01A2:0399
cs=0x1a2;eip=0x00039d; 	J(JNC(loc_103a8));	// 486 jnb     short loc_103A8 ;~ 01A2:039D
cs=0x1a2;eip=0x00039f; 	T(ADD(bx, 2));	// 487 add     bx, 2 ;~ 01A2:039F
cs=0x1a2;eip=0x0003a2; 	T(CMP(bx, 166));	// 488 cmp     bx, 166 ;~ 01A2:03A2
cs=0x1a2;eip=0x0003a6; 	J(JC(loc_10399));	// 489 jb      short loc_10399 ;~ 01A2:03A6
loc_103a8:
	// 4399 
cs=0x1a2;eip=0x0003a8; 	T(MOV(ax, bx));	// 492 mov     ax, bx ;~ 01A2:03A8
cs=0x1a2;eip=0x0003aa; 	T(SHR(ax, 1));	// 493 shr     ax, 1 ;~ 01A2:03AA
cs=0x1a2;eip=0x0003ac; 	T(MOV(bl, 12));	// 494 mov     bl, 12 ;~ 01A2:03AC
cs=0x1a2;eip=0x0003ae; 	T(DIV1(bl));	// 495 div     bl ;~ 01A2:03AE
cs=0x1a2;eip=0x0003b0; 	T(INC(ah));	// 496 inc     ah ;~ 01A2:03B0
cs=0x1a2;eip=0x0003b2; 	T(SHL(al, 4));	// 497 shl     al, 4 ;~ 01A2:03B2
cs=0x1a2;eip=0x0003b5; 	T(OR(al, ah));	// 498 or      al, ah ;~ 01A2:03B5
cs=0x1a2;eip=0x0003b7; 	T(MOV(bl, al));	// 499 mov     bl, al ;~ 01A2:03B7
loc_103b9:
	// 4400 
cs=0x1a2;eip=0x0003b9; 	T(MOV(bh, dl));	// 502 mov     bh, dl ;~ 01A2:03B9
cs=0x1a2;eip=0x0003bb; 	T(AND(bh, 0x30));	// 503 and     bh, 30h ;~ 01A2:03BB
cs=0x1a2;eip=0x0003be; 	T(ROL(edx, 0x10));	// 504 rol     edx, 10h ;~ 01A2:03BE
cs=0x1a2;eip=0x0003c2; 	T(MOV(al, dl));	// 505 mov     al, dl ;~ 01A2:03C2
cs=0x1a2;eip=0x0003c4; 	T(SHR(al, 4));	// 506 shr     al, 4 ;~ 01A2:03C4
cs=0x1a2;eip=0x0003c7; 	T(OR(bh, al));	// 507 or      bh, al ;~ 01A2:03C7
cs=0x1a2;eip=0x0003c9; 	T(AND(dl, 0x0F));	// 508 and     dl, 0Fh ;~ 01A2:03C9
cs=0x1a2;eip=0x0003cc; 	T(MOV(cl, 0x0FF));	// 509 mov     cl, 0FFh ;~ 01A2:03CC
cs=0x1a2;eip=0x0003ce; 	J(CALL(sub_11ba6,0));	// 510 call    sub_11BA6 ;~ 01A2:03CE
cs=0x1a2;eip=0x0003d1; 	X(POP(cx));	// 511 pop     cx ;~ 01A2:03D1
cs=0x1a2;eip=0x0003d2; 	T(INC(ch));	// 512 inc     ch ;~ 01A2:03D2
cs=0x1a2;eip=0x0003d4; 	T(CMP(ch, cl));	// 513 cmp     ch, cl ;~ 01A2:03D4
cs=0x1a2;eip=0x0003d6; 	J(JC(loc_1036c));	// 514 jb      short loc_1036C ;~ 01A2:03D6
cs=0x1a2;eip=0x0003d8; 	X(MOV(*(raddr(es,di)), 0));	// 515 mov     byte ptr es:[di], 0 ;~ 01A2:03D8
cs=0x1a2;eip=0x0003dc; 	T(INC(di));	// 516 inc     di ;~ 01A2:03DC
cs=0x1a2;eip=0x0003dd; 	X(POP(cx));	// 517 pop     cx ;~ 01A2:03DD
cs=0x1a2;eip=0x0003de; 	T(DEC(cx));	// 518 dec     cx ;~ 01A2:03DE
cs=0x1a2;eip=0x0003df; 	J(JNZ(loc_10365));	// 519 jnz     short loc_10365 ;~ 01A2:03DF
cs=0x1a2;eip=0x0003e1; 	J(CALL(_mem_reallocx,0));	// 520 call    _mem_reallocx ;~ 01A2:03E1
cs=0x1a2;eip=0x0003e4; 	X(POP(cx));	// 521 pop     cx ;~ 01A2:03E4
cs=0x1a2;eip=0x0003e5; 	T(DEC(cx));	// 522 dec     cx ;~ 01A2:03E5
cs=0x1a2;eip=0x0003e6; 	J(JNZ(loc_10315));	// 523 jnz     loc_10315 ;~ 01A2:03E6
cs=0x1a2;eip=0x0003ea; 	J(RETN(0));	// 524 retn ;~ 01A2:03EA

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_mod_read_10311: 	goto _mod_read_10311;
        case m2c::kloc_10315: 	goto loc_10315;
        case m2c::kloc_10345: 	goto loc_10345;
        case m2c::kloc_1035c: 	goto loc_1035c;
        case m2c::kloc_10365: 	goto loc_10365;
        case m2c::kloc_1036c: 	goto loc_1036c;
        case m2c::kloc_10399: 	goto loc_10399;
        case m2c::kloc_103a8: 	goto loc_103a8;
        case m2c::kloc_103b9: 	goto loc_103b9;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _mtm_module(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _mtm_module:
    _begin:
cs=0x1a2;eip=0x000ad5; 	X(MOV(_module_type_text, 0x204D544D));	// 1326 mov     _module_type_text, 204D544Dh ;~ 01A2:0AD5
cs=0x1a2;eip=0x000ade; 	X(MOV(_moduleflag_246d0, 0x20));	// 1327 mov     _moduleflag_246D0, 100000b ;~ 01A2:0ADE
cs=0x1a2;eip=0x000ae4; 	X(MOV(byte_24679, 6));	// 1328 mov     byte_24679, 6 ;~ 01A2:0AE4
cs=0x1a2;eip=0x000ae9; 	X(MOV(byte_2467a, 0x7D));	// 1329 mov     byte_2467A, 7Dh ; '}' ;~ 01A2:0AE9
cs=0x1a2;eip=0x000aee; 	X(MOV(byte_24673, 0x80));	// 1330 mov     byte_24673, 80h ; '€' ;~ 01A2:0AEE
cs=0x1a2;eip=0x000af3; 	T(MOV(ax, ds));	// 1331 mov     ax, ds ;~ 01A2:0AF3
cs=0x1a2;eip=0x000af5; 	T(MOV(es, ax));	// 1332 mov     es, ax ;~ 01A2:0AF5
cs=0x1a2;eip=0x000af7; 	T(MOV(si, offset(seg003,_myin)));	// 1333 mov     si, offset _myin ; in ;~ 01A2:0AF7
cs=0x1a2;eip=0x000afa; 	T(MOV(di, offset(seg003,out_)));	// 1334 mov     di, offset out_ ; "                                " ;~ 01A2:0AFA
cs=0x1a2;eip=0x000afd; 	T(MOV(cx, 0x14));	// 1335 mov     cx, 14h         ; count ;~ 01A2:0AFD
cs=0x1a2;eip=0x000b00; 	J(CALL(_copy_printable,0));	// 1336 call    _copy_printable ;~ 01A2:0B00
cs=0x1a2;eip=0x000b03; 	T(CMP(_sndcard_type, 0));	// 1337 cmp     _sndcard_type, 0 ;~ 01A2:0B03
cs=0x1a2;eip=0x000b08; 	J(JNZ(loc_10b25));	// 1338 jnz     short loc_10B25 ;~ 01A2:0B08
cs=0x1a2;eip=0x000b0a; 	T(XOR(si, si));	// 1339 xor     si, si ;~ 01A2:0B0A
cs=0x1a2;eip=0x000b0c; 	T(MOV(cx, 0x10));	// 1340 mov     cx, 10h ;~ 01A2:0B0C
loc_10b0f:
	// 4469 
cs=0x1a2;eip=0x000b0f; 	T(MOV(al, *(db*)(((db*)&word_3052a)+si)));	// 1343 mov     al, byte ptr word_3052A[si] ;~ 01A2:0B0F
cs=0x1a2;eip=0x000b13; 	T(MOV(di, ax));	// 1344 mov     di, ax ;~ 01A2:0B13
cs=0x1a2;eip=0x000b15; 	T(AND(di, 0x0F));	// 1345 and     di, 0Fh ;~ 01A2:0B15
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x000b18; 	T(MOV(al, *((byte_13c54)+di)));	// 1346 mov     al, cs:byte_13C54[di] ;~ 01A2:0B18
cs=0x1a2;eip=0x000b1d; 	X(MOV(*(db*)(((db*)&dword_27bc8)+si), al));	// 1347 mov     byte ptr dword_27BC8[si], al ;~ 01A2:0B1D
cs=0x1a2;eip=0x000b21; 	T(INC(si));	// 1348 inc     si ;~ 01A2:0B21
cs=0x1a2;eip=0x000b22; 	T(DEC(cx));	// 1349 dec     cx ;~ 01A2:0B22
cs=0x1a2;eip=0x000b23; 	J(JNZ(loc_10b0f));	// 1350 jnz     short loc_10B0F ;~ 01A2:0B23
loc_10b25:
	// 4470 
cs=0x1a2;eip=0x000b25; 	T(MOVZX(ax, byte_30526));	// 1353 movzx   ax, byte_30526 ;~ 01A2:0B25
cs=0x1a2;eip=0x000b2a; 	X(MOV(word_245d2, ax));	// 1354 mov     word_245D2, ax ;~ 01A2:0B2A
cs=0x1a2;eip=0x000b2d; 	T(MOV(al, byte_30522));	// 1355 mov     al, byte_30522 ;~ 01A2:0B2D
cs=0x1a2;eip=0x000b30; 	T(INC(al));	// 1356 inc     al ;~ 01A2:0B30
cs=0x1a2;eip=0x000b32; 	X(MOV(word_245f2, ax));	// 1357 mov     word_245F2, ax ;~ 01A2:0B32
cs=0x1a2;eip=0x000b35; 	T(MOVZX(ax, byte_30523));	// 1358 movzx   ax, byte_30523 ;~ 01A2:0B35
cs=0x1a2;eip=0x000b3a; 	T(INC(ax));	// 1359 inc     ax ;~ 01A2:0B3A
cs=0x1a2;eip=0x000b3b; 	X(MOV(word_245fa, ax));	// 1360 mov     word_245FA, ax ;~ 01A2:0B3B
cs=0x1a2;eip=0x000b3e; 	T(MOV(dx, offset(seg003,_chrin)));	// 1361 mov     dx, offset _chrin ;~ 01A2:0B3E
cs=0x1a2;eip=0x000b41; 	T(IMUL3_2(cx,word_245d2,0x25));	// 1362 imul    cx, word_245D2, 25h ; '%' ;~ 01A2:0B41
cs=0x1a2;eip=0x000b46; 	T(ADD(cx, 0x0C2));	// 1363 add     cx, 0C2h ; 'Â' ;~ 01A2:0B46
cs=0x1a2;eip=0x000b4a; 	T(XOR(eax, eax));	// 1364 xor     eax, eax ;~ 01A2:0B4A
cs=0x1a2;eip=0x000b4d; 	J(CALL(_dosseek,0));	// 1365 call    _dosseek ;~ 01A2:0B4D
cs=0x1a2;eip=0x000b50; 	T(MOV(si, offset(seg003,unk_3054a)));	// 1366 mov     si, offset unk_3054A ;~ 01A2:0B50
cs=0x1a2;eip=0x000b53; 	T(MOV(di, offset(seg003,_myout)));	// 1367 mov     di, offset _myout ;~ 01A2:0B53
cs=0x1a2;eip=0x000b56; 	T(MOV(cx, word_245d2));	// 1368 mov     cx, word_245D2 ;~ 01A2:0B56
	return _group1(m2c::kseg000_b5a_proc, _state);
    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_mtm_module: 	goto _mtm_module;
        case m2c::kloc_10b0f: 	goto loc_10b0f;
        case m2c::kloc_10b25: 	goto loc_10b25;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _ult_1150b(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _ult_1150b:
    _begin:
cs=0x1a2;eip=0x00150b; 	T(CMP(al, 5));	// 2501 cmp     al, 5 ;~ 01A2:150B
cs=0x1a2;eip=0x00150d; 	J(JZ(loc_11520));	// 2502 jz      short loc_11520 ;~ 01A2:150D
cs=0x1a2;eip=0x00150f; 	T(CMP(al, 0x0A));	// 2503 cmp     al, 0Ah ;~ 01A2:150F
cs=0x1a2;eip=0x001511; 	J(JZ(loc_11523));	// 2504 jz      short loc_11523 ;~ 01A2:1511
cs=0x1a2;eip=0x001513; 	T(CMP(al, 0x0B));	// 2505 cmp     al, 0Bh ;~ 01A2:1513
cs=0x1a2;eip=0x001515; 	J(JZ(loc_1152a));	// 2506 jz      short loc_1152A ;~ 01A2:1515
cs=0x1a2;eip=0x001517; 	T(CMP(al, 0x0C));	// 2507 cmp     al, 0Ch ;~ 01A2:1517
cs=0x1a2;eip=0x001519; 	J(JZ(loc_11531));	// 2508 jz      short loc_11531 ;~ 01A2:1519
cs=0x1a2;eip=0x00151b; 	T(CMP(al, 0x0E));	// 2509 cmp     al, 0Eh ;~ 01A2:151B
cs=0x1a2;eip=0x00151d; 	J(JZ(loc_11539));	// 2510 jz      short loc_11539 ;~ 01A2:151D
cs=0x1a2;eip=0x00151f; 	J(RETN(0));	// 2511 retn ;~ 01A2:151F
loc_11520:
	// 4558 
cs=0x1a2;eip=0x001520; 	T(XOR(ax, ax));	// 2515 xor     ax, ax ;~ 01A2:1520
cs=0x1a2;eip=0x001522; 	J(RETN(0));	// 2516 retn ;~ 01A2:1522
loc_11523:
	// 4559 
cs=0x1a2;eip=0x001523; 	T(SHR(ah, 2));	// 2520 shr     ah, 2 ;~ 01A2:1523
cs=0x1a2;eip=0x001526; 	T(AND(ah, 0x33));	// 2521 and     ah, 33h ;~ 01A2:1526
cs=0x1a2;eip=0x001529; 	J(RETN(0));	// 2522 retn ;~ 01A2:1529
loc_1152a:
	// 4560 
cs=0x1a2;eip=0x00152a; 	T(AND(ax, 0x0F00));	// 2526 and     ax, 0F00h ;~ 01A2:152A
cs=0x1a2;eip=0x00152d; 	T(OR(ax, 0x800E));	// 2527 or      ax, 800Eh ;~ 01A2:152D
cs=0x1a2;eip=0x001530; 	J(RETN(0));	// 2528 retn ;~ 01A2:1530
loc_11531:
	// 4561 
cs=0x1a2;eip=0x001531; 	T(MOV(cl, ah));	// 2532 mov     cl, ah ;~ 01A2:1531
cs=0x1a2;eip=0x001533; 	T(SHR(cl, 2));	// 2533 shr     cl, 2 ;~ 01A2:1533
cs=0x1a2;eip=0x001536; 	T(XOR(ax, ax));	// 2534 xor     ax, ax ;~ 01A2:1536
cs=0x1a2;eip=0x001538; 	J(RETN(0));	// 2535 retn ;~ 01A2:1538
loc_11539:
	// 4562 
cs=0x1a2;eip=0x001539; 	X(PUSH(dx));	// 2539 push    dx ;~ 01A2:1539
cs=0x1a2;eip=0x00153a; 	T(MOV(dx, ax));	// 2540 mov     dx, ax ;~ 01A2:153A
cs=0x1a2;eip=0x00153c; 	T(SHR(dx, 4));	// 2541 shr     dx, 4 ;~ 01A2:153C
cs=0x1a2;eip=0x00153f; 	T(CMP(dl, 0x0EA));	// 2542 cmp     dl, 0EAh ; 'ê' ;~ 01A2:153F
cs=0x1a2;eip=0x001542; 	J(JZ(loc_1154b));	// 2543 jz      short loc_1154B ;~ 01A2:1542
cs=0x1a2;eip=0x001544; 	T(CMP(dl, 0x0EB));	// 2544 cmp     dl, 0EBh ; 'ë' ;~ 01A2:1544
cs=0x1a2;eip=0x001547; 	J(JZ(loc_1154b));	// 2545 jz      short loc_1154B ;~ 01A2:1547
cs=0x1a2;eip=0x001549; 	X(POP(dx));	// 2546 pop     dx ;~ 01A2:1549
cs=0x1a2;eip=0x00154a; 	J(RETN(0));	// 2547 retn ;~ 01A2:154A
loc_1154b:
	// 4563 
cs=0x1a2;eip=0x00154b; 	T(MOV(dh, ah));	// 2552 mov     dh, ah ;~ 01A2:154B
cs=0x1a2;eip=0x00154d; 	T(AND(dh, 0x0F0));	// 2553 and     dh, 0F0h ;~ 01A2:154D
cs=0x1a2;eip=0x001550; 	T(AND(ah, 0x0F));	// 2554 and     ah, 0Fh ;~ 01A2:1550
cs=0x1a2;eip=0x001553; 	T(SHR(ah, 2));	// 2555 shr     ah, 2 ;~ 01A2:1553
cs=0x1a2;eip=0x001556; 	T(OR(ah, dh));	// 2556 or      ah, dh ;~ 01A2:1556
cs=0x1a2;eip=0x001558; 	X(POP(dx));	// 2557 pop     dx ;~ 01A2:1558
cs=0x1a2;eip=0x001559; 	J(RETN(0));	// 2558 retn ;~ 01A2:1559

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_ult_1150b: 	goto _ult_1150b;
        case m2c::kloc_11520: 	goto loc_11520;
        case m2c::kloc_11523: 	goto loc_11523;
        case m2c::kloc_1152a: 	goto loc_1152a;
        case m2c::kloc_11531: 	goto loc_11531;
        case m2c::kloc_11539: 	goto loc_11539;
        case m2c::kloc_1154b: 	goto loc_1154b;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _ult_read(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _ult_read:
    _begin:
cs=0x1a2;eip=0x00155a; 	X(DEC(*(db*)(((db*)&word_3063b)+1)));	// 2567 dec     byte ptr word_3063B+1 ;~ 01A2:155A
cs=0x1a2;eip=0x00155e; 	J(JNZ(locret_11584));	// 2568 jnz     short locret_11584 ;~ 01A2:155E
cs=0x1a2;eip=0x001560; 	T(MOV(dx, offset(seg003,word_3063b)));	// 2569 mov     dx, offset word_3063B ;~ 01A2:1560
cs=0x1a2;eip=0x001563; 	T(MOV(cx, 2));	// 2570 mov     cx, 2 ;~ 01A2:1563
cs=0x1a2;eip=0x001566; 	J(CALL(_dosfread,0));	// 2571 call    _dosfread ;~ 01A2:1566
cs=0x1a2;eip=0x001569; 	T(CMP(*(db*)(((db*)&word_3063b)), 0x0FC));	// 2572 cmp     byte ptr word_3063B, 0FCh ; 'ü' ;~ 01A2:1569
cs=0x1a2;eip=0x00156e; 	J(JZ(loc_11585));	// 2573 jz      short loc_11585 ;~ 01A2:156E
cs=0x1a2;eip=0x001570; 	T(MOV(ax, word_3063b));	// 2574 mov     ax, word_3063B ;~ 01A2:1570
cs=0x1a2;eip=0x001573; 	X(MOV(*(dw*)(((db*)&dword_3063d)), ax));	// 2575 mov     word ptr dword_3063D, ax ;~ 01A2:1573
cs=0x1a2;eip=0x001576; 	X(MOV(*(db*)(((db*)&word_3063b)+1), 1));	// 2576 mov     byte ptr word_3063B+1, 1 ;~ 01A2:1576
cs=0x1a2;eip=0x00157b; 	T(MOV(dx, offset(seg003,dword_3063d)+2));	// 2577 mov     dx, (offset dword_3063D+2) ;~ 01A2:157B
cs=0x1a2;eip=0x00157e; 	T(MOV(cx, 3));	// 2578 mov     cx, 3 ;~ 01A2:157E
cs=0x1a2;eip=0x001581; 	J(CALL(_dosfread,0));	// 2579 call    _dosfread ;~ 01A2:1581
locret_11584:
	// 4564 
cs=0x1a2;eip=0x001584; 	J(RETN(0));	// 2582 retn ;~ 01A2:1584
loc_11585:
	// 4565 
cs=0x1a2;eip=0x001585; 	T(MOV(dx, offset(seg003,dword_3063d)));	// 2586 mov     dx, offset dword_3063D ;~ 01A2:1585
cs=0x1a2;eip=0x001588; 	T(MOV(cx, 5));	// 2587 mov     cx, 5 ;~ 01A2:1588
cs=0x1a2;eip=0x00158b; 	J(CALL(_dosfread,0));	// 2588 call    _dosfread ;~ 01A2:158B
cs=0x1a2;eip=0x00158e; 	J(RETN(0));	// 2589 retn ;~ 01A2:158E

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_ult_read: 	goto _ult_read;
        case m2c::kloc_11585: 	goto loc_11585;
        case m2c::klocret_11584: 	goto locret_11584;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _useless_doswrite(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _useless_doswrite:
    _begin:
cs=0x1a2;eip=0x00158f; 	X(PUSH(dx));	// 2598 push    dx ;~ 01A2:158F
cs=0x1a2;eip=0x001590; 	X(PUSH(ecx));	// 2599 push    ecx ;~ 01A2:1590
cs=0x1a2;eip=0x001592; 	J(CALL(_useless_doswrite2,0));	// 2600 call    _useless_doswrite2 ;~ 01A2:1592
cs=0x1a2;eip=0x001595; 	X(POP(ecx));	// 2601 pop     ecx ;~ 01A2:1595
cs=0x1a2;eip=0x001597; 	X(POP(dx));	// 2602 pop     dx ;~ 01A2:1597
cs=0x1a2;eip=0x001598; 	J(JC(locret_115a2));	// 2603 jb      short locret_115A2 ;~ 01A2:1598
cs=0x1a2;eip=0x00159a; 	T(MOV(bx, _fhandle_module));	// 2604 mov     bx, _fhandle_module ;~ 01A2:159A
cs=0x1a2;eip=0x00159e; 	T(MOV(ah, 0x40));	// 2605 mov     ah, 40h ;~ 01A2:159E
cs=0x1a2;eip=0x0015a0; 	S(_INT(0x21));	// 2606 int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE ;~ 01A2:15A0
locret_115a2:
	// 4566 
cs=0x1a2;eip=0x0015a2; 	J(RETN(0));	// 2610 retn ;~ 01A2:15A2

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_useless_doswrite: 	goto _useless_doswrite;
        case m2c::klocret_115a2: 	goto locret_115a2;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _useless_doswrite2(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _useless_doswrite2:
    _begin:
cs=0x1a2;eip=0x0015a3; 	X(MOV(_chrin, eax));	// 2619 mov     _chrin, eax ;~ 01A2:15A3
cs=0x1a2;eip=0x0015a7; 	X(MOV(_myin, ecx));	// 2620 mov     _myin, ecx ;~ 01A2:15A7
cs=0x1a2;eip=0x0015ac; 	T(MOV(dx, offset(seg003,_chrin)));	// 2621 mov     dx, offset _chrin ;~ 01A2:15AC
cs=0x1a2;eip=0x0015af; 	T(MOV(cx, 8));	// 2622 mov     cx, 8 ;~ 01A2:15AF
cs=0x1a2;eip=0x0015b2; 	T(MOV(bx, _fhandle_module));	// 2623 mov     bx, _fhandle_module ;~ 01A2:15B2
cs=0x1a2;eip=0x0015b6; 	T(MOV(ah, 0x40));	// 2624 mov     ah, 40h ;~ 01A2:15B6
cs=0x1a2;eip=0x0015b8; 	S(_INT(0x21));	// 2625 int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE ;~ 01A2:15B8
cs=0x1a2;eip=0x0015ba; 	J(RETN(0));	// 2627 retn ;~ 01A2:15BA

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_useless_doswrite2: 	goto _useless_doswrite2;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _useless_writeinr(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _useless_writeinr:
    _begin:
cs=0x1a2;eip=0x0015bb; 	T(MOV(cx, 0x20));	// 2635 mov     cx, 20h ; ' ' ;~ 01A2:15BB
cs=0x1a2;eip=0x0015be; 	T(MOV(ah, 0x3C));	// 2636 mov     ah, 3Ch ;~ 01A2:15BE
cs=0x1a2;eip=0x0015c0; 	S(_INT(0x21));	// 2637 int     21h             ; DOS - 2+ - CREATE A FILE WITH HANDLE (CREAT) ;~ 01A2:15C0
cs=0x1a2;eip=0x0015c2; 	T(MOV(bx, ax));	// 2640 mov     bx, ax ;~ 01A2:15C2
cs=0x1a2;eip=0x0015c4; 	T(MOV(ax, 0x0FFFF));	// 2641 mov     ax, 0FFFFh ;~ 01A2:15C4
cs=0x1a2;eip=0x0015c7; 	J(JC(locret_11786));	// 2642 jb      locret_11786 ;~ 01A2:15C7
cs=0x1a2;eip=0x0015cb; 	X(PUSH(ds));	// 2643 push    ds ;~ 01A2:15CB
cs=0x1a2;eip=0x0015cc; 	T(MOV(ax, seg_offset(seg003)));	// 2644 mov     ax, seg seg003 ;~ 01A2:15CC
cs=0x1a2;eip=0x0015cf; 	T(MOV(ds, ax));	// 2645 mov     ds, ax ;~ 01A2:15CF
cs=0x1a2;eip=0x0015d1; 	T(MOV(es, ax));	// 2646 mov     es, ax ;~ 01A2:15D1
cs=0x1a2;eip=0x0015d3; 	X(MOV(_savesp_245d0, sp));	// 2647 mov     _savesp_245D0, sp ;~ 01A2:15D3
cs=0x1a2;eip=0x0015d7; 	X(MOV(_fhandle_module, bx));	// 2648 mov     _fhandle_module, bx ;~ 01A2:15D7
cs=0x1a2;eip=0x0015db; 	T(MOV(cx, 0x14));	// 2649 mov     cx, 14h ;~ 01A2:15DB
cs=0x1a2;eip=0x0015de; 	T(MOV(esi, offset(seg003,_ainertiamodule_0)));	// 2650 mov     esi, offset _aInertiaModule_0 ; "Inertia Module: " ;~ 01A2:15DE
cs=0x1a2;eip=0x0015e4; 	T(MOV(edi, offset(seg003,_ainertiamodule)));	// 2651 mov     edi, offset _aInertiaModule ; "Inertia Module: " ;~ 01A2:15E4
cs=0x1a2;eip=0x0015ea; 	T(CLD);	// 2652 cld ;~ 01A2:15EA
	// 2653 rep movsd ;~ 01A2:15EB
cs=0x1a2;eip=0x0015eb; 	X(	REP MOVSD);	// 2653 rep movsd ;~ 01A2:15EB
cs=0x1a2;eip=0x0015ee; 	T(MOV(si, offset(seg003,out_)));	// 2654 mov     si, offset out_ ; "                                " ;~ 01A2:15EE
cs=0x1a2;eip=0x0015f1; 	T(MOV(di, offset(seg003,_ainertiamodule)+0x10));	// 2655 mov     di, (offset _aInertiaModule+10h) ; "" ;~ 01A2:15F1
cs=0x1a2;eip=0x0015f4; 	T(MOV(cx, 8));	// 2656 mov     cx, 8 ;~ 01A2:15F4
	// 2657 rep movsd ;~ 01A2:15F7
cs=0x1a2;eip=0x0015f7; 	X(	REP MOVSD);	// 2657 rep movsd ;~ 01A2:15F7
cs=0x1a2;eip=0x0015fa; 	X(MOV(byte_257da, 0x10));	// 2658 mov     byte_257DA, 10h ;~ 01A2:15FA
cs=0x1a2;eip=0x0015ff; 	T(MOV(al, byte_2461a));	// 2659 mov     al, byte_2461A ;~ 01A2:15FF
cs=0x1a2;eip=0x001602; 	X(MOV(byte_257db, al));	// 2660 mov     byte_257DB, al ;~ 01A2:1602
cs=0x1a2;eip=0x001605; 	T(MOV(al, byte_2467e));	// 2661 mov     al, byte_2467E ;~ 01A2:1605
cs=0x1a2;eip=0x001608; 	X(MOV(byte_257dc, al));	// 2662 mov     byte_257DC, al ;~ 01A2:1608
cs=0x1a2;eip=0x00160b; 	T(MOV(ax, word_245d4));	// 2663 mov     ax, word_245D4 ;~ 01A2:160B
cs=0x1a2;eip=0x00160e; 	X(MOV(word_257e6, ax));	// 2664 mov     word_257E6, ax ;~ 01A2:160E
cs=0x1a2;eip=0x001611; 	T(MOV(ax, word_245d2));	// 2665 mov     ax, word_245D2 ;~ 01A2:1611
cs=0x1a2;eip=0x001614; 	X(MOV(word_257e8, ax));	// 2666 mov     word_257E8, ax ;~ 01A2:1614
cs=0x1a2;eip=0x001617; 	T(MOV(ax, word_245f2));	// 2667 mov     ax, word_245F2 ;~ 01A2:1617
cs=0x1a2;eip=0x00161a; 	X(MOV(word_257ea, ax));	// 2668 mov     word_257EA, ax ;~ 01A2:161A
cs=0x1a2;eip=0x00161d; 	T(MOV(ax, _freq_245de));	// 2669 mov     ax, _freq_245DE ;~ 01A2:161D
cs=0x1a2;eip=0x001620; 	X(MOV(word_257ec, ax));	// 2670 mov     word_257EC, ax ;~ 01A2:1620
cs=0x1a2;eip=0x001623; 	T(MOV(ax, word_245fa));	// 2671 mov     ax, word_245FA ;~ 01A2:1623
cs=0x1a2;eip=0x001626; 	X(MOV(word_257ee, ax));	// 2672 mov     word_257EE, ax ;~ 01A2:1626
cs=0x1a2;eip=0x001629; 	T(MOV(ax, word_245f8));	// 2673 mov     ax, word_245F8 ;~ 01A2:1629
cs=0x1a2;eip=0x00162c; 	X(MOV(word_257f0, ax));	// 2674 mov     word_257F0, ax ;~ 01A2:162C
cs=0x1a2;eip=0x00162f; 	T(MOV(al, byte_2467a));	// 2675 mov     al, byte_2467A ;~ 01A2:162F
cs=0x1a2;eip=0x001632; 	X(MOV(byte_257f2, al));	// 2676 mov     byte_257F2, al ;~ 01A2:1632
cs=0x1a2;eip=0x001635; 	T(MOV(al, byte_24679));	// 2677 mov     al, byte_24679 ;~ 01A2:1635
cs=0x1a2;eip=0x001638; 	X(MOV(byte_257f3, al));	// 2678 mov     byte_257F3, al ;~ 01A2:1638
cs=0x1a2;eip=0x00163b; 	T(MOV(dx, offset(seg003,_ainertiamodule)));	// 2679 mov     dx, offset _aInertiaModule ; "Inertia Module: " ;~ 01A2:163B
cs=0x1a2;eip=0x00163e; 	T(MOV(cx, 0x50));	// 2680 mov     cx, 50h ; 'P' ;~ 01A2:163E
cs=0x1a2;eip=0x001641; 	T(MOV(bx, _fhandle_module));	// 2681 mov     bx, _fhandle_module ;~ 01A2:1641
cs=0x1a2;eip=0x001645; 	T(MOV(ah, 0x40));	// 2682 mov     ah, 40h ;~ 01A2:1645
cs=0x1a2;eip=0x001647; 	S(_INT(0x21));	// 2683 int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE ;~ 01A2:1647
cs=0x1a2;eip=0x001649; 	T(MOV(ax, 0x0FFFE));	// 2685 mov     ax, 0FFFEh ;~ 01A2:1649
cs=0x1a2;eip=0x00164c; 	J(JC(loc_11777));	// 2686 jb      loc_11777 ;~ 01A2:164C
cs=0x1a2;eip=0x001650; 	T(MOV(si, offset(seg003,byte_280e8)));	// 2687 mov     si, offset byte_280E8 ;~ 01A2:1650
cs=0x1a2;eip=0x001653; 	T(MOV(cx, word_245fa));	// 2688 mov     cx, word_245FA ;~ 01A2:1653
cs=0x1a2;eip=0x001657; 	T(XOR(al, al));	// 2689 xor     al, al ;~ 01A2:1657
loc_11659:
	// 4567 
cs=0x1a2;eip=0x001659; 	T(OR(al, *(raddr(ds,si))));	// 2692 or      al, [si] ;~ 01A2:1659
cs=0x1a2;eip=0x00165b; 	T(INC(si));	// 2693 inc     si ;~ 01A2:165B
cs=0x1a2;eip=0x00165c; 	T(DEC(cx));	// 2694 dec     cx ;~ 01A2:165C
cs=0x1a2;eip=0x00165d; 	J(JNZ(loc_11659));	// 2695 jnz     short loc_11659 ;~ 01A2:165D
cs=0x1a2;eip=0x00165f; 	T(OR(al, al));	// 2696 or      al, al ;~ 01A2:165F
cs=0x1a2;eip=0x001661; 	J(JZ(loc_1167c));	// 2697 jz      short loc_1167C ;~ 01A2:1661
cs=0x1a2;eip=0x001663; 	T(MOV(dx, offset(seg003,byte_280e8)));	// 2698 mov     dx, offset byte_280E8 ;~ 01A2:1663
cs=0x1a2;eip=0x001666; 	T(MOVZX(ecx, word_245fa));	// 2699 movzx   ecx, word_245FA ;~ 01A2:1666
cs=0x1a2;eip=0x00166c; 	T(MOV(eax, 0x54534C54));	// 2700 mov     eax, 54534C54h  ; TLST ;~ 01A2:166C
cs=0x1a2;eip=0x001672; 	J(CALL(_useless_doswrite,0));	// 2701 call    _useless_doswrite ;~ 01A2:1672
cs=0x1a2;eip=0x001675; 	T(MOV(ax, 0x0FFFE));	// 2702 mov     ax, 0FFFEh ;~ 01A2:1675
cs=0x1a2;eip=0x001678; 	J(JC(loc_11777));	// 2703 jb      loc_11777 ;~ 01A2:1678
loc_1167c:
	// 4568 
cs=0x1a2;eip=0x00167c; 	T(MOV(si, offset(seg003,byte_281e8)));	// 2706 mov     si, offset byte_281E8 ;~ 01A2:167C
cs=0x1a2;eip=0x00167f; 	T(MOV(cx, word_245fa));	// 2707 mov     cx, word_245FA ;~ 01A2:167F
cs=0x1a2;eip=0x001683; 	T(MOV(al, 0x3F));	// 2708 mov     al, 3Fh ; '?' ;~ 01A2:1683
loc_11685:
	// 4569 
cs=0x1a2;eip=0x001685; 	T(AND(al, *(raddr(ds,si))));	// 2711 and     al, [si] ;~ 01A2:1685
cs=0x1a2;eip=0x001687; 	T(INC(si));	// 2712 inc     si ;~ 01A2:1687
cs=0x1a2;eip=0x001688; 	T(DEC(cx));	// 2713 dec     cx ;~ 01A2:1688
cs=0x1a2;eip=0x001689; 	J(JNZ(loc_11685));	// 2714 jnz     short loc_11685 ;~ 01A2:1689
cs=0x1a2;eip=0x00168b; 	T(CMP(al, 0x3F));	// 2715 cmp     al, 3Fh ; '?' ;~ 01A2:168B
cs=0x1a2;eip=0x00168d; 	J(JZ(loc_116a8));	// 2716 jz      short loc_116A8 ;~ 01A2:168D
cs=0x1a2;eip=0x00168f; 	T(MOV(dx, offset(seg003,byte_281e8)));	// 2717 mov     dx, offset byte_281E8 ;~ 01A2:168F
cs=0x1a2;eip=0x001692; 	T(MOVZX(ecx, word_245fa));	// 2718 movzx   ecx, word_245FA ;~ 01A2:1692
cs=0x1a2;eip=0x001698; 	T(MOV(eax, 0x54534C42));	// 2719 mov     eax, 54534C42h  ; BLST ;~ 01A2:1698
cs=0x1a2;eip=0x00169e; 	J(CALL(_useless_doswrite,0));	// 2720 call    _useless_doswrite ;~ 01A2:169E
cs=0x1a2;eip=0x0016a1; 	T(MOV(ax, 0x0FFFE));	// 2721 mov     ax, 0FFFEh ;~ 01A2:16A1
cs=0x1a2;eip=0x0016a4; 	J(JC(loc_11777));	// 2722 jb      loc_11777 ;~ 01A2:16A4
loc_116a8:
	// 4570 
cs=0x1a2;eip=0x0016a8; 	T(MOV(dx, offset(seg003,byte_27fe8)));	// 2725 mov     dx, offset byte_27FE8 ;~ 01A2:16A8
cs=0x1a2;eip=0x0016ab; 	T(MOVZX(ecx, word_245fa));	// 2726 movzx   ecx, word_245FA ;~ 01A2:16AB
cs=0x1a2;eip=0x0016b1; 	T(MOV(eax, 0x54534C50));	// 2727 mov     eax, 54534C50h  ; PLST ;~ 01A2:16B1
cs=0x1a2;eip=0x0016b7; 	J(CALL(_useless_doswrite,0));	// 2728 call    _useless_doswrite ;~ 01A2:16B7
cs=0x1a2;eip=0x0016ba; 	T(MOV(ax, 0x0FFFE));	// 2729 mov     ax, 0FFFEh ;~ 01A2:16BA
cs=0x1a2;eip=0x0016bd; 	J(JC(loc_11777));	// 2730 jb      loc_11777 ;~ 01A2:16BD
cs=0x1a2;eip=0x0016c1; 	X(MOV(word_257a4, 0));	// 2731 mov     word_257A4, 0 ;~ 01A2:16C1
cs=0x1a2;eip=0x0016c7; 	T(MOV(cx, word_245f2));	// 2732 mov     cx, word_245F2 ;~ 01A2:16C7
loc_116cb:
	// 4571 
cs=0x1a2;eip=0x0016cb; 	X(PUSH(cx));	// 2735 push    cx ;~ 01A2:16CB
cs=0x1a2;eip=0x0016cc; 	T(MOV(bx, word_257a4));	// 2736 mov     bx, word_257A4 ;~ 01A2:16CC
cs=0x1a2;eip=0x0016d0; 	T(SHL(bx, 1));	// 2737 shl     bx, 1 ;~ 01A2:16D0
cs=0x1a2;eip=0x0016d2; 	T(MOVZX(ecx, *(dw*)(((db*)_myseg_size)+bx)));	// 2738 movzx   ecx, _myseg_size[bx] ;~ 01A2:16D2
cs=0x1a2;eip=0x0016d8; 	T(CMP(cx, 0x40));	// 2739 cmp     cx, 40h ; '@' ;~ 01A2:16D8
cs=0x1a2;eip=0x0016db; 	J(JA(loc_116e0));	// 2740 ja      short loc_116E0 ;~ 01A2:16DB
cs=0x1a2;eip=0x0016dd; 	T(XOR(ecx, ecx));	// 2741 xor     ecx, ecx ;~ 01A2:16DD
loc_116e0:
	// 4572 
cs=0x1a2;eip=0x0016e0; 	X(PUSH(cx));	// 2744 push    cx ;~ 01A2:16E0
cs=0x1a2;eip=0x0016e1; 	T(MOV(eax, 0x54544150));	// 2745 mov     eax, 54544150h  ; PATT ;~ 01A2:16E1
cs=0x1a2;eip=0x0016e7; 	J(CALL(_useless_doswrite2,0));	// 2746 call    _useless_doswrite2 ;~ 01A2:16E7
cs=0x1a2;eip=0x0016ea; 	X(POP(cx));	// 2747 pop     cx ;~ 01A2:16EA
cs=0x1a2;eip=0x0016eb; 	J(JC(loc_11777));	// 2748 jb      loc_11777 ;~ 01A2:16EB
cs=0x1a2;eip=0x0016ef; 	J(JCXZ(loc_1170b));	// 2749 jcxz    short loc_1170B ;~ 01A2:16EF
cs=0x1a2;eip=0x0016f1; 	T(MOV(bx, word_257a4));	// 2750 mov     bx, word_257A4 ;~ 01A2:16F1
cs=0x1a2;eip=0x0016f5; 	T(SHL(bx, 1));	// 2751 shl     bx, 1 ;~ 01A2:16F5
cs=0x1a2;eip=0x0016f7; 	T(MOV(ax, *(dw*)(((db*)_segs_table)+bx)));	// 2752 mov     ax, _segs_table[bx] ;~ 01A2:16F7
cs=0x1a2;eip=0x0016fb; 	T(XOR(dx, dx));	// 2753 xor     dx, dx ;~ 01A2:16FB
cs=0x1a2;eip=0x0016fd; 	T(MOV(bx, _fhandle_module));	// 2754 mov     bx, _fhandle_module ;~ 01A2:16FD
cs=0x1a2;eip=0x001701; 	X(PUSH(ds));	// 2755 push    ds ;~ 01A2:1701
cs=0x1a2;eip=0x001702; 	T(MOV(ds, ax));	// 2756 mov     ds, ax ;~ 01A2:1702
cs=0x1a2;eip=0x001704; 	T(MOV(ah, 0x40));	// 2757 mov     ah, 40h ;~ 01A2:1704
cs=0x1a2;eip=0x001706; 	S(_INT(0x21));	// 2758 int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE ;~ 01A2:1706
cs=0x1a2;eip=0x001708; 	X(POP(ds));	// 2760 pop     ds ;~ 01A2:1708
cs=0x1a2;eip=0x001709; 	J(JC(loc_11777));	// 2761 jb      short loc_11777 ;~ 01A2:1709
loc_1170b:
	// 4573 
cs=0x1a2;eip=0x00170b; 	X(POP(cx));	// 2764 pop     cx ;~ 01A2:170B
cs=0x1a2;eip=0x00170c; 	X(INC(word_257a4));	// 2765 inc     word_257A4 ;~ 01A2:170C
cs=0x1a2;eip=0x001710; 	T(DEC(cx));	// 2766 dec     cx ;~ 01A2:1710
cs=0x1a2;eip=0x001711; 	J(JNZ(loc_116cb));	// 2767 jnz     short loc_116CB ;~ 01A2:1711
cs=0x1a2;eip=0x001713; 	T(MOV(cx, word_245d2));	// 2768 mov     cx, word_245D2 ;~ 01A2:1713
cs=0x1a2;eip=0x001717; 	X(MOV(word_257a4, 0));	// 2769 mov     word_257A4, 0 ;~ 01A2:1717
loc_1171d:
	// 4574 
cs=0x1a2;eip=0x00171d; 	X(PUSH(cx));	// 2772 push    cx ;~ 01A2:171D
cs=0x1a2;eip=0x00171e; 	T(XOR(cx, cx));	// 2773 xor     cx, cx ;~ 01A2:171E
cs=0x1a2;eip=0x001720; 	T(XOR(dx, dx));	// 2774 xor     dx, dx ;~ 01A2:1720
cs=0x1a2;eip=0x001722; 	T(MOV(bx, _fhandle_module));	// 2775 mov     bx, _fhandle_module ;~ 01A2:1722
cs=0x1a2;eip=0x001726; 	T(MOV(ax, 0x4201));	// 2776 mov     ax, 4201h ;~ 01A2:1726
cs=0x1a2;eip=0x001729; 	S(_INT(0x21));	// 2777 int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK) ;~ 01A2:1729
cs=0x1a2;eip=0x00172b; 	X(MOV(*(dw*)(((db*)&dword_257a0)), ax));	// 2779 mov     word ptr dword_257A0, ax ;~ 01A2:172B
cs=0x1a2;eip=0x00172e; 	X(MOV(*(dw*)(((db*)&dword_257a0)+2), dx));	// 2780 mov     word ptr dword_257A0+2, dx ;~ 01A2:172E
cs=0x1a2;eip=0x001732; 	T(MOV(ax, word_257a4));	// 2781 mov     ax, word_257A4 ;~ 01A2:1732
cs=0x1a2;eip=0x001735; 	T(SHL(ax, 6));	// 2782 shl     ax, 6 ;~ 01A2:1735
cs=0x1a2;eip=0x001738; 	T(MOV(bx, ax));	// 2783 mov     bx, ax ;~ 01A2:1738
cs=0x1a2;eip=0x00173a; 	T(ADD(bx, offset(seg003,_myout)));	// 2784 add     bx, offset _myout ;~ 01A2:173A
cs=0x1a2;eip=0x00173e; 	T(MOV(ecx, 0x78));	// 2785 mov     ecx, 78h ; 'x' ;~ 01A2:173E
cs=0x1a2;eip=0x001744; 	T(ADD(ecx, *(dd*)(raddr(ds,bx+0x20))));	// 2786 add     ecx, [bx+20h] ;~ 01A2:1744
cs=0x1a2;eip=0x001748; 	T(MOV(eax, 0x504D4153));	// 2787 mov     eax, 504D4153h  ; SAMP ;~ 01A2:1748
cs=0x1a2;eip=0x00174e; 	J(CALL(_useless_doswrite2,0));	// 2788 call    _useless_doswrite2 ;~ 01A2:174E
cs=0x1a2;eip=0x001751; 	J(JC(loc_11777));	// 2789 jb      short loc_11777 ;~ 01A2:1751
cs=0x1a2;eip=0x001753; 	T(MOV(dx, word_257a4));	// 2790 mov     dx, word_257A4 ;~ 01A2:1753
cs=0x1a2;eip=0x001757; 	T(MOV(bx, _fhandle_module));	// 2791 mov     bx, _fhandle_module ;~ 01A2:1757
cs=0x1a2;eip=0x00175b; 	X(PUSH(cs));	// 2792 push    cs ;~ 01A2:175B
cs=0x1a2;eip=0x00175c; 	J(CALL(_useless_writeinr_118,0));	// 2793 call    near ptr _useless_writeinr_118 ;~ 01A2:175C
cs=0x1a2;eip=0x00175f; 	X(POP(cx));	// 2794 pop     cx ;~ 01A2:175F
cs=0x1a2;eip=0x001760; 	J(JC(loc_11777));	// 2795 jb      short loc_11777 ;~ 01A2:1760
cs=0x1a2;eip=0x001762; 	X(INC(word_257a4));	// 2796 inc     word_257A4 ;~ 01A2:1762
cs=0x1a2;eip=0x001766; 	T(DEC(cx));	// 2797 dec     cx ;~ 01A2:1766
cs=0x1a2;eip=0x001767; 	J(JNZ(loc_1171d));	// 2798 jnz     short loc_1171D ;~ 01A2:1767
cs=0x1a2;eip=0x001769; 	T(XOR(ecx, ecx));	// 2799 xor     ecx, ecx ;~ 01A2:1769
cs=0x1a2;eip=0x00176c; 	T(MOV(eax, 0x4D444E45));	// 2800 mov     eax, 4D444E45h  ; ENDM ;~ 01A2:176C
cs=0x1a2;eip=0x001772; 	J(CALL(_useless_doswrite2,0));	// 2801 call    _useless_doswrite2 ;~ 01A2:1772
cs=0x1a2;eip=0x001775; 	T(XOR(ax, ax));	// 2802 xor     ax, ax ;~ 01A2:1775
loc_11777:
	// 4575 
cs=0x1a2;eip=0x001777; 	X(PUSH(ax));	// 2806 push    ax ;~ 01A2:1777
cs=0x1a2;eip=0x001778; 	T(MOV(bx, _fhandle_module));	// 2807 mov     bx, _fhandle_module ;~ 01A2:1778
cs=0x1a2;eip=0x00177c; 	T(MOV(ah, 0x3E));	// 2808 mov     ah, 3Eh ;~ 01A2:177C
cs=0x1a2;eip=0x00177e; 	S(_INT(0x21));	// 2809 int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE ;~ 01A2:177E
cs=0x1a2;eip=0x001780; 	X(POP(ax));	// 2811 pop     ax ;~ 01A2:1780
cs=0x1a2;eip=0x001781; 	T(MOV(sp, _savesp_245d0));	// 2812 mov     sp, _savesp_245D0 ;~ 01A2:1781
cs=0x1a2;eip=0x001785; 	X(POP(ds));	// 2813 pop     ds ;~ 01A2:1785
locret_11786:
	// 4576 
cs=0x1a2;eip=0x001786; 	J(RETF(0));	// 2816 retf ;~ 01A2:1786

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_useless_writeinr: 	goto _useless_writeinr;
        case m2c::kloc_11659: 	goto loc_11659;
        case m2c::kloc_1167c: 	goto loc_1167c;
        case m2c::kloc_11685: 	goto loc_11685;
        case m2c::kloc_116a8: 	goto loc_116a8;
        case m2c::kloc_116cb: 	goto loc_116cb;
        case m2c::kloc_116e0: 	goto loc_116e0;
        case m2c::kloc_1170b: 	goto loc_1170b;
        case m2c::kloc_1171d: 	goto loc_1171d;
        case m2c::kloc_11777: 	goto loc_11777;
        case m2c::klocret_11786: 	goto locret_11786;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _useless_11787(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _useless_11787:
    _begin:
cs=0x1a2;eip=0x001787; 	T(MOV(ecx, *(dd*)(raddr(ds,di+0x20))));	// 2824 mov     ecx, [di+20h] ;~ 01A2:1787
cs=0x1a2;eip=0x00178b; 	T(OR(ecx, ecx));	// 2825 or      ecx, ecx ;~ 01A2:178B
cs=0x1a2;eip=0x00178e; 	J(JZ(loc_117dc));	// 2826 jz      short loc_117DC ;~ 01A2:178E
cs=0x1a2;eip=0x001790; 	T(TEST(_sndflags_24622, 4));	// 2827 test    _sndflags_24622, 4 ;~ 01A2:1790
cs=0x1a2;eip=0x001795; 	J(JNZ(locret_1181c));	// 2828 jnz     locret_1181C ;~ 01A2:1795
cs=0x1a2;eip=0x001799; 	T(CMP(*(dw*)(raddr(ds,di+0x32)), 0x0FFFF));	// 2829 cmp     word ptr [di+32h], 0FFFFh ;~ 01A2:1799
cs=0x1a2;eip=0x00179d; 	J(JZ(loc_117de));	// 2830 jz      short loc_117DE ;~ 01A2:179D
cs=0x1a2;eip=0x00179f; 	T(MOV(bx, *(dw*)(raddr(ds,di+0x32))));	// 2831 mov     bx, [di+32h] ;~ 01A2:179F
loc_117a2:
	// 4577 
cs=0x1a2;eip=0x0017a2; 	T(MOV(eax, ecx));	// 2834 mov     eax, ecx ;~ 01A2:17A2
cs=0x1a2;eip=0x0017a5; 	T(CMP(eax, 0x8000));	// 2835 cmp     eax, 8000h ;~ 01A2:17A5
cs=0x1a2;eip=0x0017ab; 	J(JC(loc_117b3));	// 2836 jb      short loc_117B3 ;~ 01A2:17AB
cs=0x1a2;eip=0x0017ad; 	T(MOV(eax, 0x8000));	// 2837 mov     eax, 8000h ;~ 01A2:17AD
loc_117b3:
	// 4578 
cs=0x1a2;eip=0x0017b3; 	T(SUB(ecx, eax));	// 2840 sub     ecx, eax ;~ 01A2:17B3
cs=0x1a2;eip=0x0017b6; 	X(PUSH(ecx));	// 2841 push    ecx ;~ 01A2:17B6
cs=0x1a2;eip=0x0017b8; 	X(PUSH(ds));	// 2842 push    ds ;~ 01A2:17B8
cs=0x1a2;eip=0x0017b9; 	X(PUSH(bx));	// 2843 push    bx ;~ 01A2:17B9
cs=0x1a2;eip=0x0017ba; 	X(PUSH(ax));	// 2844 push    ax ;~ 01A2:17BA
cs=0x1a2;eip=0x0017bb; 	J(CALL(_ems_mapmem,0));	// 2845 call    _ems_mapmem ;~ 01A2:17BB
cs=0x1a2;eip=0x0017be; 	X(POP(cx));	// 2846 pop     cx ;~ 01A2:17BE
cs=0x1a2;eip=0x0017bf; 	T(XOR(dx, dx));	// 2847 xor     dx, dx ;~ 01A2:17BF
cs=0x1a2;eip=0x0017c1; 	T(MOV(bx, _fhandle_module));	// 2848 mov     bx, _fhandle_module ;~ 01A2:17C1
cs=0x1a2;eip=0x0017c5; 	T(MOV(ds, _ems_pageframe));	// 2849 mov     ds, _ems_pageframe ;~ 01A2:17C5
cs=0x1a2;eip=0x0017c9; 	T(MOV(ah, 0x40));	// 2850 mov     ah, 40h ;~ 01A2:17C9
cs=0x1a2;eip=0x0017cb; 	S(_INT(0x21));	// 2851 int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE ;~ 01A2:17CB
cs=0x1a2;eip=0x0017cd; 	X(POP(bx));	// 2853 pop     bx ;~ 01A2:17CD
cs=0x1a2;eip=0x0017ce; 	X(POP(ds));	// 2854 pop     ds ;~ 01A2:17CE
cs=0x1a2;eip=0x0017cf; 	X(POP(ecx));	// 2855 pop     ecx ;~ 01A2:17CF
cs=0x1a2;eip=0x0017d1; 	J(JC(locret_117dd));	// 2856 jb      short locret_117DD ;~ 01A2:17D1
cs=0x1a2;eip=0x0017d3; 	T(ADD(bx, 2));	// 2857 add     bx, 2 ;~ 01A2:17D3
cs=0x1a2;eip=0x0017d6; 	T(CMP(ecx, 0));	// 2858 cmp     ecx, 0 ;~ 01A2:17D6
cs=0x1a2;eip=0x0017da; 	J(JNZ(loc_117a2));	// 2859 jnz     short loc_117A2 ;~ 01A2:17DA
loc_117dc:
	// 4579 
cs=0x1a2;eip=0x0017dc; 	T(CLC);	// 2862 clc ;~ 01A2:17DC
locret_117dd:
	// 4580 
cs=0x1a2;eip=0x0017dd; 	J(RETN(0));	// 2865 retn ;~ 01A2:17DD
loc_117de:
	// 4581 
cs=0x1a2;eip=0x0017de; 	T(MOV(ecx, *(dd*)(raddr(ds,di+0x20))));	// 2869 mov     ecx, [di+20h] ;~ 01A2:17DE
cs=0x1a2;eip=0x0017e2; 	T(MOV(dx, *(dw*)(raddr(ds,di+0x30))));	// 2870 mov     dx, [di+30h] ;~ 01A2:17E2
loc_117e5:
	// 4582 
cs=0x1a2;eip=0x0017e5; 	T(MOV(eax, ecx));	// 2873 mov     eax, ecx ;~ 01A2:17E5
cs=0x1a2;eip=0x0017e8; 	T(CMP(eax, 0x8000));	// 2874 cmp     eax, 8000h ;~ 01A2:17E8
cs=0x1a2;eip=0x0017ee; 	J(JC(loc_117f6));	// 2875 jb      short loc_117F6 ;~ 01A2:17EE
cs=0x1a2;eip=0x0017f0; 	T(MOV(eax, 0x8000));	// 2876 mov     eax, 8000h ;~ 01A2:17F0
loc_117f6:
	// 4583 
cs=0x1a2;eip=0x0017f6; 	T(SUB(ecx, eax));	// 2879 sub     ecx, eax ;~ 01A2:17F6
cs=0x1a2;eip=0x0017f9; 	X(PUSH(ecx));	// 2880 push    ecx ;~ 01A2:17F9
cs=0x1a2;eip=0x0017fb; 	X(PUSH(ds));	// 2881 push    ds ;~ 01A2:17FB
cs=0x1a2;eip=0x0017fc; 	X(PUSH(dx));	// 2882 push    dx ;~ 01A2:17FC
cs=0x1a2;eip=0x0017fd; 	T(MOV(cx, ax));	// 2883 mov     cx, ax ;~ 01A2:17FD
cs=0x1a2;eip=0x0017ff; 	T(MOV(bx, _fhandle_module));	// 2884 mov     bx, _fhandle_module ;~ 01A2:17FF
cs=0x1a2;eip=0x001803; 	T(MOV(ds, dx));	// 2885 mov     ds, dx ;~ 01A2:1803
cs=0x1a2;eip=0x001805; 	T(XOR(dx, dx));	// 2886 xor     dx, dx ;~ 01A2:1805
cs=0x1a2;eip=0x001807; 	T(MOV(ah, 0x40));	// 2887 mov     ah, 40h ;~ 01A2:1807
cs=0x1a2;eip=0x001809; 	S(_INT(0x21));	// 2888 int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE ;~ 01A2:1809
cs=0x1a2;eip=0x00180b; 	X(POP(dx));	// 2890 pop     dx ;~ 01A2:180B
cs=0x1a2;eip=0x00180c; 	X(POP(ds));	// 2891 pop     ds ;~ 01A2:180C
cs=0x1a2;eip=0x00180d; 	X(POP(ecx));	// 2892 pop     ecx ;~ 01A2:180D
cs=0x1a2;eip=0x00180f; 	J(JC(locret_1181b));	// 2893 jb      short locret_1181B ;~ 01A2:180F
cs=0x1a2;eip=0x001811; 	T(ADD(dx, 0x800));	// 2894 add     dx, 800h ;~ 01A2:1811
cs=0x1a2;eip=0x001815; 	T(OR(ecx, ecx));	// 2895 or      ecx, ecx ;~ 01A2:1815
cs=0x1a2;eip=0x001818; 	J(JNZ(loc_117e5));	// 2896 jnz     short loc_117E5 ;~ 01A2:1818
cs=0x1a2;eip=0x00181a; 	T(CLC);	// 2897 clc ;~ 01A2:181A
locret_1181b:
	// 4584 
cs=0x1a2;eip=0x00181b; 	J(RETN(0));	// 2900 retn ;~ 01A2:181B
locret_1181c:
	// 4585 
cs=0x1a2;eip=0x00181c; 	J(RETN(0));	// 2904 retn ;~ 01A2:181C

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_useless_11787: 	goto _useless_11787;
        case m2c::kloc_117a2: 	goto loc_117a2;
        case m2c::kloc_117b3: 	goto loc_117b3;
        case m2c::kloc_117dc: 	goto loc_117dc;
        case m2c::kloc_117de: 	goto loc_117de;
        case m2c::kloc_117e5: 	goto loc_117e5;
        case m2c::kloc_117f6: 	goto loc_117f6;
        case m2c::klocret_117dd: 	goto locret_117dd;
        case m2c::klocret_1181b: 	goto locret_1181b;
        case m2c::klocret_1181c: 	goto locret_1181c;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _useless_writeinr_118(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _useless_writeinr_118:
    _begin:
cs=0x1a2;eip=0x00181d; 	X(PUSH(ds));	// 2912 push    ds ;~ 01A2:181D
cs=0x1a2;eip=0x00181e; 	T(SHL(dx, 6));	// 2913 shl     dx, 6 ;~ 01A2:181E
cs=0x1a2;eip=0x001821; 	T(MOV(ax, seg_offset(seg003)));	// 2914 mov     ax, seg seg003 ;~ 01A2:1821
cs=0x1a2;eip=0x001824; 	T(MOV(ds, ax));	// 2915 mov     ds, ax ;~ 01A2:1824
cs=0x1a2;eip=0x001826; 	T(MOV(es, ax));	// 2916 mov     es, ax ;~ 01A2:1826
cs=0x1a2;eip=0x001828; 	T(MOV(cx, 0x18));	// 2917 mov     cx, 18h ;~ 01A2:1828
cs=0x1a2;eip=0x00182b; 	T(MOV(si, offset(seg003,ainertiasample)));	// 2918 mov     si, offset aInertiaSample ; "Inertia Sample:                        "... ;~ 01A2:182B
cs=0x1a2;eip=0x00182e; 	T(MOV(di, offset(seg003,_ainertiasample)));	// 2919 mov     di, offset _aInertiaSample ; "Inertia Sample: " ;~ 01A2:182E
cs=0x1a2;eip=0x001831; 	T(CLD);	// 2920 cld ;~ 01A2:1831
	// 2921 rep movsd ;~ 01A2:1832
cs=0x1a2;eip=0x001832; 	X(	REP MOVSD);	// 2921 rep movsd ;~ 01A2:1832
cs=0x1a2;eip=0x001835; 	T(MOV(cx, 8));	// 2922 mov     cx, 8 ;~ 01A2:1835
cs=0x1a2;eip=0x001838; 	T(MOV(si, dx));	// 2923 mov     si, dx ;~ 01A2:1838
cs=0x1a2;eip=0x00183a; 	T(ADD(si, offset(seg003,_myout)));	// 2924 add     si, offset _myout ;~ 01A2:183A
cs=0x1a2;eip=0x00183e; 	T(MOV(di, offset(seg003,asc_25856)));	// 2925 mov     di, offset asc_25856 ; "                                \r\n"... ;~ 01A2:183E
	// 2926 rep movsd ;~ 01A2:1841
cs=0x1a2;eip=0x001841; 	X(	REP MOVSD);	// 2926 rep movsd ;~ 01A2:1841
cs=0x1a2;eip=0x001844; 	T(ADD(dx, offset(seg003,_myout)));	// 2927 add     dx, offset _myout ;~ 01A2:1844
cs=0x1a2;eip=0x001848; 	T(MOV(di, dx));	// 2928 mov     di, dx ;~ 01A2:1848
cs=0x1a2;eip=0x00184a; 	T(MOV(eax, *(dd*)(raddr(ds,di+0x24))));	// 2929 mov     eax, [di+24h] ;~ 01A2:184A
cs=0x1a2;eip=0x00184e; 	X(MOV(dword_25892, eax));	// 2930 mov     dword_25892, eax ;~ 01A2:184E
cs=0x1a2;eip=0x001852; 	T(MOV(eax, *(dd*)(raddr(ds,di+0x2C))));	// 2931 mov     eax, [di+2Ch] ;~ 01A2:1852
cs=0x1a2;eip=0x001856; 	X(MOV(dword_25896, eax));	// 2932 mov     dword_25896, eax ;~ 01A2:1856
cs=0x1a2;eip=0x00185a; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x36))));	// 2933 mov     ax, [di+36h] ;~ 01A2:185A
cs=0x1a2;eip=0x00185d; 	X(MOV(word_2588e, ax));	// 2934 mov     word_2588E, ax ;~ 01A2:185D
cs=0x1a2;eip=0x001860; 	T(MOV(al, *(raddr(ds,di+0x3E))));	// 2935 mov     al, [di+3Eh] ;~ 01A2:1860
cs=0x1a2;eip=0x001863; 	X(MOV(byte_2588c, al));	// 2936 mov     byte_2588C, al ;~ 01A2:1863
cs=0x1a2;eip=0x001866; 	T(MOV(al, *(raddr(ds,di+0x3D))));	// 2937 mov     al, [di+3Dh] ;~ 01A2:1866
cs=0x1a2;eip=0x001869; 	X(MOV(byte_2588b, al));	// 2938 mov     byte_2588B, al ;~ 01A2:1869
cs=0x1a2;eip=0x00186c; 	T(MOV(al, *(raddr(ds,di+0x3C))));	// 2939 mov     al, [di+3Ch] ;~ 01A2:186C
cs=0x1a2;eip=0x00186f; 	X(MOV(byte_2588d, al));	// 2940 mov     byte_2588D, al ;~ 01A2:186F
cs=0x1a2;eip=0x001872; 	T(MOV(eax, *(dd*)(raddr(ds,di+0x20))));	// 2941 mov     eax, [di+20h] ;~ 01A2:1872
cs=0x1a2;eip=0x001876; 	X(MOV(dword_25886, eax));	// 2942 mov     dword_25886, eax ;~ 01A2:1876
cs=0x1a2;eip=0x00187a; 	X(PUSH(eax));	// 2943 push    eax ;~ 01A2:187A
cs=0x1a2;eip=0x00187c; 	T(MOV(dx, offset(seg003,_ainertiasample)));	// 2944 mov     dx, offset _aInertiaSample ; "Inertia Sample: " ;~ 01A2:187C
cs=0x1a2;eip=0x00187f; 	T(MOV(cx, 96));	// 2945 mov     cx, 96 ;~ 01A2:187F
cs=0x1a2;eip=0x001882; 	T(MOV(bx, _fhandle_module));	// 2946 mov     bx, _fhandle_module ;~ 01A2:1882
cs=0x1a2;eip=0x001886; 	T(MOV(ah, 0x40));	// 2947 mov     ah, 40h ;~ 01A2:1886
cs=0x1a2;eip=0x001888; 	S(_INT(0x21));	// 2948 int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE ;~ 01A2:1888
cs=0x1a2;eip=0x00188a; 	T(MOV(ax, 0x0FFFE));	// 2950 mov     ax, 0FFFEh ;~ 01A2:188A
cs=0x1a2;eip=0x00188d; 	X(POP(ecx));	// 2951 pop     ecx ;~ 01A2:188D
cs=0x1a2;eip=0x00188f; 	J(JC(loc_118ae));	// 2952 jb      short loc_118AE ;~ 01A2:188F
cs=0x1a2;eip=0x001891; 	X(PUSH(di));	// 2953 push    di ;~ 01A2:1891
cs=0x1a2;eip=0x001892; 	T(MOV(eax, 0x54414453));	// 2954 mov     eax, 54414453h  ; SDAT ;~ 01A2:1892
cs=0x1a2;eip=0x001898; 	J(CALL(_useless_doswrite2,0));	// 2955 call    _useless_doswrite2 ;~ 01A2:1898
cs=0x1a2;eip=0x00189b; 	T(MOV(ax, 0x0FFFE));	// 2956 mov     ax, 0FFFEh ;~ 01A2:189B
cs=0x1a2;eip=0x00189e; 	X(POP(di));	// 2957 pop     di ;~ 01A2:189E
cs=0x1a2;eip=0x00189f; 	J(CALL(_useless_11787,0));	// 2958 call    _useless_11787 ;~ 01A2:189F
cs=0x1a2;eip=0x0018a2; 	T(MOV(eax, 0x53444E45));	// 2959 mov     eax, 53444E45h  ; ENDS ;~ 01A2:18A2
cs=0x1a2;eip=0x0018a8; 	T(XOR(ecx, ecx));	// 2960 xor     ecx, ecx ;~ 01A2:18A8
cs=0x1a2;eip=0x0018ab; 	J(CALL(_useless_doswrite2,0));	// 2961 call    _useless_doswrite2 ;~ 01A2:18AB
loc_118ae:
	// 4586 
cs=0x1a2;eip=0x0018ae; 	X(POP(ds));	// 2964 pop     ds ;~ 01A2:18AE
cs=0x1a2;eip=0x0018af; 	J(RETF(0));	// 2965 retf ;~ 01A2:18AF

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_useless_writeinr_118: 	goto _useless_writeinr_118;
        case m2c::kloc_118ae: 	goto loc_118ae;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _inr_read_118b0(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _inr_read_118b0:
    _begin:
cs=0x1a2;eip=0x0018b0; 	X(PUSH(ds));	// 2973 push    ds ;~ 01A2:18B0
cs=0x1a2;eip=0x0018b1; 	T(MOV(ax, seg_offset(seg003)));	// 2974 mov     ax, seg seg003 ;~ 01A2:18B1
cs=0x1a2;eip=0x0018b4; 	T(MOV(ds, ax));	// 2975 mov     ds, ax ;~ 01A2:18B4
cs=0x1a2;eip=0x0018b6; 	T(MOV(es, ax));	// 2976 mov     es, ax ;~ 01A2:18B6
cs=0x1a2;eip=0x0018b8; 	T(SHL(dx, 6));	// 2977 shl     dx, 6 ;~ 01A2:18B8
cs=0x1a2;eip=0x0018bb; 	T(MOV(ax, dx));	// 2978 mov     ax, dx ;~ 01A2:18BB
cs=0x1a2;eip=0x0018bd; 	T(ADD(ax, offset(seg003,_myout)));	// 2979 add     ax, offset _myout ;~ 01A2:18BD
cs=0x1a2;eip=0x0018c0; 	X(PUSH(ax));	// 2980 push    ax ;~ 01A2:18C0
cs=0x1a2;eip=0x0018c1; 	T(MOV(cx, 96));	// 2981 mov     cx, 96 ;~ 01A2:18C1
cs=0x1a2;eip=0x0018c4; 	T(MOV(bx, _fhandle_module));	// 2982 mov     bx, _fhandle_module ;~ 01A2:18C4
cs=0x1a2;eip=0x0018c8; 	T(MOV(dx, offset(seg003,_ainertiasample)));	// 2983 mov     dx, offset _aInertiaSample ; "Inertia Sample: " ;~ 01A2:18C8
cs=0x1a2;eip=0x0018cb; 	T(MOV(ah, 0x3F));	// 2984 mov     ah, 3Fh ;~ 01A2:18CB
cs=0x1a2;eip=0x0018cd; 	S(_INT(0x21));	// 2985 int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE ;~ 01A2:18CD
cs=0x1a2;eip=0x0018cf; 	X(POP(bx));	// 2988 pop     bx ;~ 01A2:18CF
cs=0x1a2;eip=0x0018d0; 	J(JC(loc_119b2));	// 2989 jb      loc_119B2 ;~ 01A2:18D0
cs=0x1a2;eip=0x0018d4; 	T(di = bx);	// 2990 lea     di, [bx] ;~ 01A2:18D4
cs=0x1a2;eip=0x0018d6; 	T(MOV(si, offset(seg003,asc_25856)));	// 2991 mov     si, offset asc_25856 ; "                                \r\n"... ;~ 01A2:18D6
cs=0x1a2;eip=0x0018d9; 	T(CLD);	// 2992 cld ;~ 01A2:18D9
cs=0x1a2;eip=0x0018da; 	T(MOV(cx, 8));	// 2993 mov     cx, 8 ;~ 01A2:18DA
	// 2994 rep movsd ;~ 01A2:18DD
cs=0x1a2;eip=0x0018dd; 	X(	REP MOVSD);	// 2994 rep movsd ;~ 01A2:18DD
cs=0x1a2;eip=0x0018e0; 	T(MOV(di, bx));	// 2995 mov     di, bx ;~ 01A2:18E0
cs=0x1a2;eip=0x0018e2; 	T(MOV(ecx, dword_25892));	// 2996 mov     ecx, dword_25892 ;~ 01A2:18E2
cs=0x1a2;eip=0x0018e7; 	X(MOV(*(dd*)(raddr(ds,di+0x24)), ecx));	// 2997 mov     [di+24h], ecx ;~ 01A2:18E7
cs=0x1a2;eip=0x0018eb; 	T(MOV(eax, dword_25896));	// 2998 mov     eax, dword_25896 ;~ 01A2:18EB
cs=0x1a2;eip=0x0018ef; 	X(MOV(*(dd*)(raddr(ds,di+0x2C)), eax));	// 2999 mov     [di+2Ch], eax ;~ 01A2:18EF
cs=0x1a2;eip=0x0018f3; 	T(SUB(eax, ecx));	// 3000 sub     eax, ecx ;~ 01A2:18F3
cs=0x1a2;eip=0x0018f6; 	T(INC(eax));	// 3001 inc     eax ;~ 01A2:18F6
cs=0x1a2;eip=0x0018f8; 	X(MOV(*(dd*)(raddr(ds,di+0x28)), eax));	// 3002 mov     [di+28h], eax ;~ 01A2:18F8
cs=0x1a2;eip=0x0018fc; 	T(MOV(ax, word_2588e));	// 3003 mov     ax, word_2588E ;~ 01A2:18FC
cs=0x1a2;eip=0x0018ff; 	X(MOV(*(dw*)(raddr(ds,di+0x36)), ax));	// 3004 mov     [di+36h], ax ;~ 01A2:18FF
cs=0x1a2;eip=0x001902; 	T(MOV(al, byte_2588c));	// 3005 mov     al, byte_2588C ;~ 01A2:1902
cs=0x1a2;eip=0x001905; 	X(MOV(*(raddr(ds,di+0x3E)), al));	// 3006 mov     [di+3Eh], al ;~ 01A2:1905
cs=0x1a2;eip=0x001908; 	T(MOV(al, byte_2588b));	// 3007 mov     al, byte_2588B ;~ 01A2:1908
cs=0x1a2;eip=0x00190b; 	X(MOV(*(raddr(ds,di+0x3D)), al));	// 3008 mov     [di+3Dh], al ;~ 01A2:190B
cs=0x1a2;eip=0x00190e; 	T(MOV(al, byte_2588d));	// 3009 mov     al, byte_2588D ;~ 01A2:190E
cs=0x1a2;eip=0x001911; 	X(MOV(*(raddr(ds,di+0x3C)), al));	// 3010 mov     [di+3Ch], al ;~ 01A2:1911
cs=0x1a2;eip=0x001914; 	T(MOV(eax, dword_25886));	// 3011 mov     eax, dword_25886 ;~ 01A2:1914
cs=0x1a2;eip=0x001918; 	X(MOV(*(dd*)(raddr(ds,di+0x20)), eax));	// 3012 mov     [di+20h], eax ;~ 01A2:1918
loc_1191c:
	// 4587 
cs=0x1a2;eip=0x00191c; 	T(MOV(dx, offset(seg003,_chrin)));	// 3015 mov     dx, offset _chrin ;~ 01A2:191C
cs=0x1a2;eip=0x00191f; 	T(MOV(cx, 8));	// 3016 mov     cx, 8 ;~ 01A2:191F
cs=0x1a2;eip=0x001922; 	T(MOV(bx, _fhandle_module));	// 3017 mov     bx, _fhandle_module ;~ 01A2:1922
cs=0x1a2;eip=0x001926; 	T(MOV(ah, 0x3F));	// 3018 mov     ah, 3Fh ;~ 01A2:1926
cs=0x1a2;eip=0x001928; 	S(_INT(0x21));	// 3019 int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE ;~ 01A2:1928
cs=0x1a2;eip=0x00192a; 	J(JC(loc_119b2));	// 3022 jb      loc_119B2 ;~ 01A2:192A
cs=0x1a2;eip=0x00192e; 	T(MOV(eax, _myin));	// 3023 mov     eax, _myin ;~ 01A2:192E
cs=0x1a2;eip=0x001932; 	X(MOV(dword_257a0, eax));	// 3024 mov     dword_257A0, eax ;~ 01A2:1932
cs=0x1a2;eip=0x001936; 	T(XOR(cx, cx));	// 3025 xor     cx, cx ;~ 01A2:1936
cs=0x1a2;eip=0x001938; 	T(XOR(dx, dx));	// 3026 xor     dx, dx ;~ 01A2:1938
cs=0x1a2;eip=0x00193a; 	T(MOV(bx, _fhandle_module));	// 3027 mov     bx, _fhandle_module ;~ 01A2:193A
cs=0x1a2;eip=0x00193e; 	T(MOV(ax, 0x4201));	// 3028 mov     ax, 4201h ;~ 01A2:193E
cs=0x1a2;eip=0x001941; 	S(_INT(0x21));	// 3029 int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK) ;~ 01A2:1941
cs=0x1a2;eip=0x001943; 	T(SHL(edx, 0x10));	// 3031 shl     edx, 10h ;~ 01A2:1943
cs=0x1a2;eip=0x001947; 	T(MOV(dx, ax));	// 3032 mov     dx, ax ;~ 01A2:1947
cs=0x1a2;eip=0x001949; 	X(ADD(dword_257a0, edx));	// 3033 add     dword_257A0, edx ;~ 01A2:1949
cs=0x1a2;eip=0x00194e; 	T(MOV(eax, _chrin));	// 3034 mov     eax, _chrin ;~ 01A2:194E
cs=0x1a2;eip=0x001952; 	T(CMP(eax, 0x54414453));	// 3035 cmp     eax, 54414453h  ; SDAT ;~ 01A2:1952
cs=0x1a2;eip=0x001958; 	J(JNZ(loc_11967));	// 3036 jnz     short loc_11967 ; SAMP ;~ 01A2:1958
cs=0x1a2;eip=0x00195a; 	X(MOV(*(dd*)(raddr(ds,di+0x38)), edx));	// 3037 mov     [di+38h], edx ;~ 01A2:195A
cs=0x1a2;eip=0x00195e; 	T(TEST(_sndflags_24622, 4));	// 3038 test    _sndflags_24622, 4 ;~ 01A2:195E
cs=0x1a2;eip=0x001963; 	J(JNZ(loc_11999));	// 3039 jnz     short loc_11999 ;~ 01A2:1963
cs=0x1a2;eip=0x001965; 	J(JMP(loc_11999));	// 3040 jmp     short loc_11999 ;~ 01A2:1965
loc_11967:
	// 4588 
cs=0x1a2;eip=0x001967; 	T(CMP(eax, 0x504D4153));	// 3044 cmp     eax, 504D4153h  ; SAMP ;~ 01A2:1967
cs=0x1a2;eip=0x00196d; 	J(JNZ(loc_11991));	// 3045 jnz     short loc_11991 ; ENDS ;~ 01A2:196D
cs=0x1a2;eip=0x00196f; 	T(XOR(cx, cx));	// 3046 xor     cx, cx ;~ 01A2:196F
cs=0x1a2;eip=0x001971; 	T(XOR(dx, dx));	// 3047 xor     dx, dx ;~ 01A2:1971
cs=0x1a2;eip=0x001973; 	T(MOV(bx, _fhandle_module));	// 3048 mov     bx, _fhandle_module ;~ 01A2:1973
cs=0x1a2;eip=0x001977; 	T(MOV(ax, 0x4201));	// 3049 mov     ax, 4201h ;~ 01A2:1977
cs=0x1a2;eip=0x00197a; 	S(_INT(0x21));	// 3050 int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK) ;~ 01A2:197A
cs=0x1a2;eip=0x00197c; 	T(MOV(dx, ax));	// 3052 mov     dx, ax ;~ 01A2:197C
cs=0x1a2;eip=0x00197e; 	T(MOV(cx, dx));	// 3053 mov     cx, dx ;~ 01A2:197E
cs=0x1a2;eip=0x001980; 	T(SUB(dx, 8));	// 3054 sub     dx, 8 ;~ 01A2:1980
cs=0x1a2;eip=0x001983; 	T(SUB(cx, 0));	// 3055 sub     cx, 0 ;~ 01A2:1983
cs=0x1a2;eip=0x001986; 	T(MOV(bx, _fhandle_module));	// 3056 mov     bx, _fhandle_module ;~ 01A2:1986
cs=0x1a2;eip=0x00198a; 	T(MOV(ax, 0x4200));	// 3057 mov     ax, 4200h ;~ 01A2:198A
cs=0x1a2;eip=0x00198d; 	S(_INT(0x21));	// 3058 int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK) ;~ 01A2:198D
cs=0x1a2;eip=0x00198f; 	J(JMP(loc_119af));	// 3060 jmp     short loc_119AF ;~ 01A2:198F
loc_11991:
	// 4589 
cs=0x1a2;eip=0x001991; 	T(CMP(eax, 0x53444E45));	// 3064 cmp     eax, 53444E45h  ; ENDS ;~ 01A2:1991
cs=0x1a2;eip=0x001997; 	J(JZ(loc_119af));	// 3065 jz      short loc_119AF ;~ 01A2:1997
loc_11999:
	// 4590 
cs=0x1a2;eip=0x001999; 	T(MOV(dx, *(dw*)(((db*)&dword_257a0))));	// 3069 mov     dx, word ptr dword_257A0 ;~ 01A2:1999
cs=0x1a2;eip=0x00199d; 	T(MOV(cx, *(dw*)(((db*)&dword_257a0)+2)));	// 3070 mov     cx, word ptr dword_257A0+2 ;~ 01A2:199D
cs=0x1a2;eip=0x0019a1; 	T(MOV(bx, _fhandle_module));	// 3071 mov     bx, _fhandle_module ;~ 01A2:19A1
cs=0x1a2;eip=0x0019a5; 	T(MOV(ax, 0x4200));	// 3072 mov     ax, 4200h ;~ 01A2:19A5
cs=0x1a2;eip=0x0019a8; 	S(_INT(0x21));	// 3073 int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK) ;~ 01A2:19A8
cs=0x1a2;eip=0x0019aa; 	J(JC(loc_119b2));	// 3075 jb      short loc_119B2 ;~ 01A2:19AA
cs=0x1a2;eip=0x0019ac; 	J(JMP(loc_1191c));	// 3076 jmp     loc_1191C ;~ 01A2:19AC
loc_119af:
	// 4591 
cs=0x1a2;eip=0x0019af; 	T(CLC);	// 3081 clc ;~ 01A2:19AF
cs=0x1a2;eip=0x0019b0; 	X(POP(ds));	// 3082 pop     ds ;~ 01A2:19B0
cs=0x1a2;eip=0x0019b1; 	J(RETN(0));	// 3083 retn ;~ 01A2:19B1
loc_119b2:
	// 4592 
cs=0x1a2;eip=0x0019b2; 	T(MOV(ax, 0x0FFFE));	// 3088 mov     ax, 0FFFEh ;~ 01A2:19B2
cs=0x1a2;eip=0x0019b5; 	X(POP(ds));	// 3089 pop     ds ;~ 01A2:19B5
cs=0x1a2;eip=0x0019b6; 	J(RETN(0));	// 3090 retn ;~ 01A2:19B6

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_inr_read_118b0: 	goto _inr_read_118b0;
        case m2c::kloc_1191c: 	goto loc_1191c;
        case m2c::kloc_11967: 	goto loc_11967;
        case m2c::kloc_11991: 	goto loc_11991;
        case m2c::kloc_11999: 	goto loc_11999;
        case m2c::kloc_119af: 	goto loc_119af;
        case m2c::kloc_119b2: 	goto loc_119b2;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _inr_read_119b7(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _inr_read_119b7:
    _begin:
cs=0x1a2;eip=0x0019b7; 	T(MOV(ecx, _myin));	// 3100 mov     ecx, _myin ;~ 01A2:19B7
cs=0x1a2;eip=0x0019bc; 	T(MOV(bx, _fhandle_module));	// 3101 mov     bx, _fhandle_module ;~ 01A2:19BC
cs=0x1a2;eip=0x0019c0; 	T(MOV(dx, di));	// 3102 mov     dx, di ;~ 01A2:19C0
cs=0x1a2;eip=0x0019c2; 	T(MOV(ah, 0x3F));	// 3103 mov     ah, 3Fh ;~ 01A2:19C2
cs=0x1a2;eip=0x0019c4; 	S(_INT(0x21));	// 3104 int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE ;~ 01A2:19C4
cs=0x1a2;eip=0x0019c6; 	J(RETN(0));	// 3107 retn ;~ 01A2:19C6

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_inr_read_119b7: 	goto _inr_read_119b7;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _inr_module(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _inr_module:
    _begin:
cs=0x1a2;eip=0x0019c7; 	X(MOV(_module_type_text, 0x20524E49));	// 3115 mov     _module_type_text, 20524E49h ;~ 01A2:19C7
cs=0x1a2;eip=0x0019d0; 	X(MOV(_moduleflag_246d0, 0x100));	// 3116 mov     _moduleflag_246D0, 100000000b ;~ 01A2:19D0
cs=0x1a2;eip=0x0019d6; 	X(MOV(byte_24673, 0));	// 3117 mov     byte_24673, 0 ;~ 01A2:19D6
cs=0x1a2;eip=0x0019db; 	X(MOV(word_245f2, 0));	// 3118 mov     word_245F2, 0 ;~ 01A2:19DB
cs=0x1a2;eip=0x0019e1; 	X(MOV(word_245d2, 0));	// 3119 mov     word_245D2, 0 ;~ 01A2:19E1
cs=0x1a2;eip=0x0019e7; 	T(MOV(ax, ds));	// 3120 mov     ax, ds ;~ 01A2:19E7
cs=0x1a2;eip=0x0019e9; 	T(MOV(es, ax));	// 3121 mov     es, ax ;~ 01A2:19E9
cs=0x1a2;eip=0x0019eb; 	T(CLD);	// 3122 cld ;~ 01A2:19EB
cs=0x1a2;eip=0x0019ec; 	T(MOV(dx, offset(seg003,_ainertiamodule)));	// 3123 mov     dx, offset _aInertiaModule ; "Inertia Module: " ;~ 01A2:19EC
cs=0x1a2;eip=0x0019ef; 	T(MOV(cx, 0x50));	// 3124 mov     cx, 50h ; 'P' ;~ 01A2:19EF
cs=0x1a2;eip=0x0019f2; 	T(XOR(eax, eax));	// 3125 xor     eax, eax ;~ 01A2:19F2
cs=0x1a2;eip=0x0019f5; 	J(CALL(_dosseek,0));	// 3126 call    _dosseek ;~ 01A2:19F5
cs=0x1a2;eip=0x0019f8; 	T(MOV(si, offset(seg003,_ainertiamodule)+0x10));	// 3127 mov     si, (offset _aInertiaModule+10h) ; "" ;~ 01A2:19F8
cs=0x1a2;eip=0x0019fb; 	T(MOV(di, offset(seg003,out_)));	// 3128 mov     di, offset out_ ; "                                " ;~ 01A2:19FB
cs=0x1a2;eip=0x0019fe; 	T(MOV(cx, 8));	// 3129 mov     cx, 8 ;~ 01A2:19FE
cs=0x1a2;eip=0x001a01; 	T(CLD);	// 3130 cld ;~ 01A2:1A01
	// 3131 rep movsd ;~ 01A2:1A02
cs=0x1a2;eip=0x001a02; 	X(	REP MOVSD);	// 3131 rep movsd ;~ 01A2:1A02
cs=0x1a2;eip=0x001a05; 	T(MOV(al, byte_257db));	// 3132 mov     al, byte_257DB ;~ 01A2:1A05
cs=0x1a2;eip=0x001a08; 	X(MOV(byte_2461a, al));	// 3133 mov     byte_2461A, al ;~ 01A2:1A08
cs=0x1a2;eip=0x001a0b; 	T(MOV(al, byte_257dc));	// 3134 mov     al, byte_257DC ;~ 01A2:1A0B
cs=0x1a2;eip=0x001a0e; 	X(MOV(byte_2467e, al));	// 3135 mov     byte_2467E, al ;~ 01A2:1A0E
cs=0x1a2;eip=0x001a11; 	T(MOV(ax, word_257e6));	// 3136 mov     ax, word_257E6 ;~ 01A2:1A11
cs=0x1a2;eip=0x001a14; 	X(MOV(word_245d4, ax));	// 3137 mov     word_245D4, ax ;~ 01A2:1A14
cs=0x1a2;eip=0x001a17; 	T(DEC(ax));	// 3138 dec     ax ;~ 01A2:1A17
cs=0x1a2;eip=0x001a18; 	X(MOV(byte_2461b, al));	// 3139 mov     byte_2461B, al ;~ 01A2:1A18
cs=0x1a2;eip=0x001a1b; 	T(MOV(ax, word_257ec));	// 3140 mov     ax, word_257EC ;~ 01A2:1A1B
cs=0x1a2;eip=0x001a1e; 	X(MOV(_freq_245de, ax));	// 3141 mov     _freq_245DE, ax ;~ 01A2:1A1E
cs=0x1a2;eip=0x001a21; 	T(MOV(ax, word_257ee));	// 3142 mov     ax, word_257EE ;~ 01A2:1A21
cs=0x1a2;eip=0x001a24; 	X(MOV(word_245fa, ax));	// 3143 mov     word_245FA, ax ;~ 01A2:1A24
cs=0x1a2;eip=0x001a27; 	T(MOV(ax, word_257f0));	// 3144 mov     ax, word_257F0 ;~ 01A2:1A27
cs=0x1a2;eip=0x001a2a; 	X(MOV(word_245f8, ax));	// 3145 mov     word_245F8, ax ;~ 01A2:1A2A
cs=0x1a2;eip=0x001a2d; 	T(MOV(al, byte_257f2));	// 3146 mov     al, byte_257F2 ;~ 01A2:1A2D
cs=0x1a2;eip=0x001a30; 	X(MOV(byte_2467a, al));	// 3147 mov     byte_2467A, al ;~ 01A2:1A30
cs=0x1a2;eip=0x001a33; 	T(MOV(al, byte_257f3));	// 3148 mov     al, byte_257F3 ;~ 01A2:1A33
cs=0x1a2;eip=0x001a36; 	X(MOV(byte_24679, al));	// 3149 mov     byte_24679, al ;~ 01A2:1A36
loc_11a39:
	// 4593 
cs=0x1a2;eip=0x001a39; 	T(MOV(cx, 8));	// 3152 mov     cx, 8 ;~ 01A2:1A39
cs=0x1a2;eip=0x001a3c; 	T(MOV(bx, _fhandle_module));	// 3153 mov     bx, _fhandle_module ;~ 01A2:1A3C
cs=0x1a2;eip=0x001a40; 	T(MOV(dx, offset(seg003,_chrin)));	// 3154 mov     dx, offset _chrin ;~ 01A2:1A40
cs=0x1a2;eip=0x001a43; 	T(MOV(ah, 0x3F));	// 3155 mov     ah, 3Fh ;~ 01A2:1A43
cs=0x1a2;eip=0x001a45; 	S(_INT(0x21));	// 3156 int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE ;~ 01A2:1A45
cs=0x1a2;eip=0x001a47; 	J(JC(loc_11b3d));	// 3159 jb      loc_11B3D ;~ 01A2:1A47
cs=0x1a2;eip=0x001a4b; 	T(MOV(eax, _myin));	// 3160 mov     eax, _myin ;~ 01A2:1A4B
cs=0x1a2;eip=0x001a4f; 	X(MOV(dword_257a0, eax));	// 3161 mov     dword_257A0, eax ;~ 01A2:1A4F
cs=0x1a2;eip=0x001a53; 	T(XOR(cx, cx));	// 3162 xor     cx, cx ;~ 01A2:1A53
cs=0x1a2;eip=0x001a55; 	T(XOR(dx, dx));	// 3163 xor     dx, dx ;~ 01A2:1A55
cs=0x1a2;eip=0x001a57; 	T(MOV(bx, _fhandle_module));	// 3164 mov     bx, _fhandle_module ;~ 01A2:1A57
cs=0x1a2;eip=0x001a5b; 	T(MOV(ax, 0x4201));	// 3165 mov     ax, 4201h ;~ 01A2:1A5B
cs=0x1a2;eip=0x001a5e; 	S(_INT(0x21));	// 3166 int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK) ;~ 01A2:1A5E
cs=0x1a2;eip=0x001a60; 	X(ADD(*(dw*)(((db*)&dword_257a0)), ax));	// 3168 add     word ptr dword_257A0, ax ;~ 01A2:1A60
cs=0x1a2;eip=0x001a64; 	X(ADC(*(dw*)(((db*)&dword_257a0)+2), dx));	// 3169 adc     word ptr dword_257A0+2, dx ;~ 01A2:1A64
cs=0x1a2;eip=0x001a68; 	T(MOV(eax, _chrin));	// 3170 mov     eax, _chrin ;~ 01A2:1A68
cs=0x1a2;eip=0x001a6c; 	T(CMP(eax, 0x54534C54));	// 3171 cmp     eax, 54534C54h  ; TLST ;~ 01A2:1A6C
cs=0x1a2;eip=0x001a72; 	J(JNZ(loc_11a81));	// 3172 jnz     short loc_11A81 ; BLST ;~ 01A2:1A72
cs=0x1a2;eip=0x001a74; 	T(MOV(di, offset(seg003,byte_280e8)));	// 3173 mov     di, offset byte_280E8 ; buffer ;~ 01A2:1A74
cs=0x1a2;eip=0x001a77; 	J(CALL(_inr_read_119b7,0));	// 3174 call    _inr_read_119B7 ;~ 01A2:1A77
cs=0x1a2;eip=0x001a7a; 	J(JC(loc_11b3d));	// 3175 jb      loc_11B3D ;~ 01A2:1A7A
cs=0x1a2;eip=0x001a7e; 	J(JMP(loc_11b28));	// 3176 jmp     loc_11B28 ;~ 01A2:1A7E
loc_11a81:
	// 4594 
cs=0x1a2;eip=0x001a81; 	T(CMP(eax, 0x54534C42));	// 3180 cmp     eax, 54534C42h  ; BLST ;~ 01A2:1A81
cs=0x1a2;eip=0x001a87; 	J(JNZ(loc_11a96));	// 3181 jnz     short loc_11A96 ; PLST ;~ 01A2:1A87
cs=0x1a2;eip=0x001a89; 	T(MOV(di, offset(seg003,byte_281e8)));	// 3182 mov     di, offset byte_281E8 ; buffer ;~ 01A2:1A89
cs=0x1a2;eip=0x001a8c; 	J(CALL(_inr_read_119b7,0));	// 3183 call    _inr_read_119B7 ;~ 01A2:1A8C
cs=0x1a2;eip=0x001a8f; 	J(JC(loc_11b3d));	// 3184 jb      loc_11B3D ;~ 01A2:1A8F
cs=0x1a2;eip=0x001a93; 	J(JMP(loc_11b28));	// 3185 jmp     loc_11B28 ;~ 01A2:1A93
loc_11a96:
	// 4595 
cs=0x1a2;eip=0x001a96; 	T(CMP(eax, 0x54534C50));	// 3189 cmp     eax, 54534C50h  ; PLST ;~ 01A2:1A96
cs=0x1a2;eip=0x001a9c; 	J(JNZ(loc_11aaa));	// 3190 jnz     short loc_11AAA ; PATT ;~ 01A2:1A9C
cs=0x1a2;eip=0x001a9e; 	T(MOV(di, offset(seg003,byte_27fe8)));	// 3191 mov     di, offset byte_27FE8 ; buffer ;~ 01A2:1A9E
cs=0x1a2;eip=0x001aa1; 	J(CALL(_inr_read_119b7,0));	// 3192 call    _inr_read_119B7 ;~ 01A2:1AA1
cs=0x1a2;eip=0x001aa4; 	J(JC(loc_11b3d));	// 3193 jb      loc_11B3D ;~ 01A2:1AA4
cs=0x1a2;eip=0x001aa8; 	J(JMP(loc_11b28));	// 3194 jmp     short loc_11B28 ;~ 01A2:1AA8
loc_11aaa:
	// 4596 
cs=0x1a2;eip=0x001aaa; 	T(CMP(eax, 0x54544150));	// 3198 cmp     eax, 54544150h  ; PATT ;~ 01A2:1AAA
cs=0x1a2;eip=0x001ab0; 	J(JNZ(loc_11b09));	// 3199 jnz     short loc_11B09 ; SAMP ;~ 01A2:1AB0
cs=0x1a2;eip=0x001ab2; 	T(MOV(ebx, _myin));	// 3200 mov     ebx, _myin ;~ 01A2:1AB2
cs=0x1a2;eip=0x001ab7; 	T(CMP(ebx, 0x40));	// 3201 cmp     ebx, 40h ; '@' ;~ 01A2:1AB7
cs=0x1a2;eip=0x001abb; 	J(JA(loc_11ac0));	// 3202 ja      short loc_11AC0 ;~ 01A2:1ABB
cs=0x1a2;eip=0x001abd; 	T(MOV(bx, 0x40));	// 3203 mov     bx, 40h ; '@'   ; bytes ;~ 01A2:1ABD
loc_11ac0:
	// 4597 
cs=0x1a2;eip=0x001ac0; 	J(CALL(_memalloc,0));	// 3206 call    _memalloc ;~ 01A2:1AC0
cs=0x1a2;eip=0x001ac3; 	J(JC(loc_11b3d));	// 3207 jb      short loc_11B3D ;~ 01A2:1AC3
cs=0x1a2;eip=0x001ac5; 	T(MOV(ecx, _myin));	// 3208 mov     ecx, _myin ;~ 01A2:1AC5
cs=0x1a2;eip=0x001aca; 	T(MOV(di, word_245f2));	// 3209 mov     di, word_245F2 ;~ 01A2:1ACA
cs=0x1a2;eip=0x001ace; 	X(INC(word_245f2));	// 3210 inc     word_245F2 ;~ 01A2:1ACE
cs=0x1a2;eip=0x001ad2; 	T(SHL(di, 1));	// 3211 shl     di, 1 ;~ 01A2:1AD2
cs=0x1a2;eip=0x001ad4; 	X(MOV(*(dw*)(((db*)_segs_table)+di), ax));	// 3212 mov     _segs_table[di], ax ;~ 01A2:1AD4
cs=0x1a2;eip=0x001ad8; 	T(CMP(cx, 0x40));	// 3213 cmp     cx, 40h ; '@' ;~ 01A2:1AD8
cs=0x1a2;eip=0x001adb; 	J(JBE(loc_11af3));	// 3214 jbe     short loc_11AF3 ;~ 01A2:1ADB
cs=0x1a2;eip=0x001add; 	X(MOV(*(dw*)(((db*)_myseg_size)+di), cx));	// 3215 mov     _myseg_size[di], cx ;~ 01A2:1ADD
cs=0x1a2;eip=0x001ae1; 	T(XOR(dx, dx));	// 3216 xor     dx, dx ;~ 01A2:1AE1
cs=0x1a2;eip=0x001ae3; 	T(MOV(bx, _fhandle_module));	// 3217 mov     bx, _fhandle_module ;~ 01A2:1AE3
cs=0x1a2;eip=0x001ae7; 	X(PUSH(ds));	// 3218 push    ds ;~ 01A2:1AE7
cs=0x1a2;eip=0x001ae8; 	T(MOV(ds, ax));	// 3219 mov     ds, ax ;~ 01A2:1AE8
cs=0x1a2;eip=0x001aea; 	T(MOV(ah, 0x3F));	// 3220 mov     ah, 3Fh ;~ 01A2:1AEA
cs=0x1a2;eip=0x001aec; 	S(_INT(0x21));	// 3221 int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE ;~ 01A2:1AEC
cs=0x1a2;eip=0x001aee; 	X(POP(ds));	// 3224 pop     ds ;~ 01A2:1AEE
cs=0x1a2;eip=0x001aef; 	J(JC(loc_11b3d));	// 3225 jb      short loc_11B3D ;~ 01A2:1AEF
cs=0x1a2;eip=0x001af1; 	J(JMP(loc_11b28));	// 3226 jmp     short loc_11B28 ;~ 01A2:1AF1
loc_11af3:
	// 4598 
cs=0x1a2;eip=0x001af3; 	X(MOV(*(dw*)(((db*)_myseg_size)+di), 0x40));	// 3230 mov     _myseg_size[di], 40h ; '@' ;~ 01A2:1AF3
cs=0x1a2;eip=0x001af9; 	T(XOR(di, di));	// 3231 xor     di, di ;~ 01A2:1AF9
cs=0x1a2;eip=0x001afb; 	T(MOV(es, ax));	// 3232 mov     es, ax ;~ 01A2:1AFB
cs=0x1a2;eip=0x001afd; 	T(MOV(cx, 0x10));	// 3234 mov     cx, 10h ;~ 01A2:1AFD
cs=0x1a2;eip=0x001b00; 	T(XOR(eax, eax));	// 3235 xor     eax, eax ;~ 01A2:1B00
cs=0x1a2;eip=0x001b03; 	T(CLD);	// 3236 cld ;~ 01A2:1B03
	// 3237 rep stosd ;~ 01A2:1B04
cs=0x1a2;eip=0x001b04; 	X(	REP STOSD);	// 3237 rep stosd ;~ 01A2:1B04
cs=0x1a2;eip=0x001b07; 	J(JMP(loc_11b28));	// 3238 jmp     short loc_11B28 ;~ 01A2:1B07
loc_11b09:
	// 4599 
cs=0x1a2;eip=0x001b09; 	T(CMP(eax, 0x504D4153));	// 3242 cmp     eax, 504D4153h  ; SAMP ;~ 01A2:1B09
cs=0x1a2;eip=0x001b0f; 	J(JNZ(loc_11b20));	// 3243 jnz     short loc_11B20 ; ENDM ;~ 01A2:1B0F
cs=0x1a2;eip=0x001b11; 	T(MOV(dx, word_245d2));	// 3244 mov     dx, word_245D2 ;~ 01A2:1B11
cs=0x1a2;eip=0x001b15; 	X(INC(word_245d2));	// 3245 inc     word_245D2 ;~ 01A2:1B15
cs=0x1a2;eip=0x001b19; 	J(CALL(_inr_read_118b0,0));	// 3246 call    _inr_read_118B0 ;~ 01A2:1B19
cs=0x1a2;eip=0x001b1c; 	J(JC(loc_11b3d));	// 3247 jb      short loc_11B3D ;~ 01A2:1B1C
cs=0x1a2;eip=0x001b1e; 	J(JMP(loc_11b28));	// 3248 jmp     short loc_11B28 ;~ 01A2:1B1E
loc_11b20:
	// 4600 
cs=0x1a2;eip=0x001b20; 	T(CMP(eax, 0x4D444E45));	// 3252 cmp     eax, 4D444E45h  ; ENDM ;~ 01A2:1B20
cs=0x1a2;eip=0x001b26; 	J(JZ(loc_11b41));	// 3253 jz      short loc_11B41 ;~ 01A2:1B26
loc_11b28:
	// 4601 
cs=0x1a2;eip=0x001b28; 	T(MOV(dx, *(dw*)(((db*)&dword_257a0))));	// 3257 mov     dx, word ptr dword_257A0 ;~ 01A2:1B28
cs=0x1a2;eip=0x001b2c; 	T(MOV(cx, *(dw*)(((db*)&dword_257a0)+2)));	// 3258 mov     cx, word ptr dword_257A0+2 ;~ 01A2:1B2C
cs=0x1a2;eip=0x001b30; 	T(MOV(bx, _fhandle_module));	// 3259 mov     bx, _fhandle_module ;~ 01A2:1B30
cs=0x1a2;eip=0x001b34; 	T(MOV(ax, 0x4200));	// 3260 mov     ax, 4200h ;~ 01A2:1B34
cs=0x1a2;eip=0x001b37; 	S(_INT(0x21));	// 3261 int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK) ;~ 01A2:1B37
cs=0x1a2;eip=0x001b39; 	J(JNC(loc_11a39));	// 3263 jnb     loc_11A39 ;~ 01A2:1B39
loc_11b3d:
	// 4602 
cs=0x1a2;eip=0x001b3d; 	T(MOV(ax, 0x0FFFE));	// 3267 mov     ax, 0FFFEh ;~ 01A2:1B3D
cs=0x1a2;eip=0x001b40; 	J(RETN(0));	// 3268 retn ;~ 01A2:1B40
loc_11b41:
	// 4603 
cs=0x1a2;eip=0x001b41; 	J(CALL(_mod_readfile_11f4e,0));	// 3272 call    near ptr _mod_readfile_11F4E ;~ 01A2:1B41
cs=0x1a2;eip=0x001b44; 	J(RETN(0));	// 3273 retn ;~ 01A2:1B44

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_inr_module: 	goto _inr_module;
        case m2c::kloc_11a39: 	goto loc_11a39;
        case m2c::kloc_11a81: 	goto loc_11a81;
        case m2c::kloc_11a96: 	goto loc_11a96;
        case m2c::kloc_11aaa: 	goto loc_11aaa;
        case m2c::kloc_11ac0: 	goto loc_11ac0;
        case m2c::kloc_11af3: 	goto loc_11af3;
        case m2c::kloc_11b09: 	goto loc_11b09;
        case m2c::kloc_11b20: 	goto loc_11b20;
        case m2c::kloc_11b28: 	goto loc_11b28;
        case m2c::kloc_11b3d: 	goto loc_11b3d;
        case m2c::kloc_11b41: 	goto loc_11b41;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _mem_reallocx(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _mem_reallocx:
    _begin:
cs=0x1a2;eip=0x001b85; 	T(MOV(bx, _my_seg_index));	// 3334 mov     bx, _my_seg_index ;~ 01A2:1B85
cs=0x1a2;eip=0x001b89; 	T(SHL(bx, 1));	// 3335 shl     bx, 1 ;~ 01A2:1B89
cs=0x1a2;eip=0x001b8b; 	X(MOV(*(dw*)(((db*)_segs_table)+bx), es));	// 3336 mov     _segs_table[bx], es ;~ 01A2:1B8B
cs=0x1a2;eip=0x001b8f; 	X(MOV(*(dw*)(((db*)_myseg_size)+bx), di));	// 3337 mov     _myseg_size[bx], di ;~ 01A2:1B8F
cs=0x1a2;eip=0x001b93; 	T(MOVZX(ebx, di));	// 3338 movzx   ebx, di ;~ 01A2:1B93
cs=0x1a2;eip=0x001b97; 	T(MOV(ax, es));	// 3339 mov     ax, es ;~ 01A2:1B97
cs=0x1a2;eip=0x001b99; 	J(CALL(_memrealloc,0));	// 3340 call    _memrealloc ;~ 01A2:1B99
cs=0x1a2;eip=0x001b9c; 	X(ADC(word_24662, 0));	// 3341 adc     word_24662, 0 ;~ 01A2:1B9C
cs=0x1a2;eip=0x001ba1; 	X(INC(_my_seg_index));	// 3342 inc     _my_seg_index ;~ 01A2:1BA1
cs=0x1a2;eip=0x001ba5; 	J(RETN(0));	// 3343 retn ;~ 01A2:1BA5

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_mem_reallocx: 	goto _mem_reallocx;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_11ba6(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_11ba6:
    _begin:
cs=0x1a2;eip=0x001ba6; 	T(AND(ch, 0x1F));	// 3352 and     ch, 1Fh ;~ 01A2:1BA6
cs=0x1a2;eip=0x001ba9; 	T(OR(bl, bl));	// 3353 or      bl, bl ;~ 01A2:1BA9
cs=0x1a2;eip=0x001bab; 	J(JZ(loc_11bb2));	// 3354 jz      short loc_11BB2 ;~ 01A2:1BAB
cs=0x1a2;eip=0x001bad; 	T(CMP(bl, 0x0FF));	// 3355 cmp     bl, 0FFh ;~ 01A2:1BAD
cs=0x1a2;eip=0x001bb0; 	J(JNZ(loc_11bbb));	// 3356 jnz     short loc_11BBB ;~ 01A2:1BB0
loc_11bb2:
	// 4604 
cs=0x1a2;eip=0x001bb2; 	T(OR(bh, bh));	// 3359 or      bh, bh ;~ 01A2:1BB2
cs=0x1a2;eip=0x001bb4; 	J(JZ(loc_11bbe));	// 3360 jz      short loc_11BBE ;~ 01A2:1BB4
cs=0x1a2;eip=0x001bb6; 	T(CMP(bh, 0x0FF));	// 3361 cmp     bh, 0FFh ;~ 01A2:1BB6
cs=0x1a2;eip=0x001bb9; 	J(JZ(loc_11bbe));	// 3362 jz      short loc_11BBE ;~ 01A2:1BB9
loc_11bbb:
	// 4605 
cs=0x1a2;eip=0x001bbb; 	T(OR(ch, 0x20));	// 3365 or      ch, 20h ;~ 01A2:1BBB
loc_11bbe:
	// 4606 
cs=0x1a2;eip=0x001bbe; 	T(CMP(cl, 0x40));	// 3369 cmp     cl, 40h ; '@' ;~ 01A2:1BBE
cs=0x1a2;eip=0x001bc1; 	J(JA(loc_11bc6));	// 3370 ja      short loc_11BC6 ;~ 01A2:1BC1
cs=0x1a2;eip=0x001bc3; 	T(OR(ch, 0x40));	// 3371 or      ch, 40h ;~ 01A2:1BC3
loc_11bc6:
	// 4607 
cs=0x1a2;eip=0x001bc6; 	T(OR(dx, dx));	// 3374 or      dx, dx ;~ 01A2:1BC6
cs=0x1a2;eip=0x001bc8; 	J(JZ(loc_11bd1));	// 3375 jz      short loc_11BD1 ;~ 01A2:1BC8
cs=0x1a2;eip=0x001bca; 	T(OR(dl, dl));	// 3376 or      dl, dl ;~ 01A2:1BCA
cs=0x1a2;eip=0x001bcc; 	J(JZ(loc_11c08));	// 3377 jz      short loc_11C08 ;~ 01A2:1BCC
loc_11bce:
	// 4608 
cs=0x1a2;eip=0x001bce; 	T(OR(ch, 0x80));	// 3380 or      ch, 80h ;~ 01A2:1BCE
loc_11bd1:
	// 4609 
cs=0x1a2;eip=0x001bd1; 	T(TEST(ch, 0x0E0));	// 3383 test    ch, 0E0h ;~ 01A2:1BD1
cs=0x1a2;eip=0x001bd4; 	J(JZ(locret_11c03));	// 3384 jz      short locret_11C03 ;~ 01A2:1BD4
cs=0x1a2;eip=0x001bd6; 	X(MOV(*(raddr(es,di)), ch));	// 3385 mov     es:[di], ch ;~ 01A2:1BD6
cs=0x1a2;eip=0x001bd9; 	T(INC(di));	// 3386 inc     di ;~ 01A2:1BD9
cs=0x1a2;eip=0x001bda; 	T(TEST(ch, 0x80));	// 3387 test    ch, 80h ;~ 01A2:1BDA
cs=0x1a2;eip=0x001bdd; 	J(JZ(loc_11be5));	// 3388 jz      short loc_11BE5 ;~ 01A2:1BDD
cs=0x1a2;eip=0x001bdf; 	X(MOV(*(dw*)(raddr(es,di)), dx));	// 3389 mov     es:[di], dx ;~ 01A2:1BDF
cs=0x1a2;eip=0x001be2; 	T(ADD(di, 2));	// 3390 add     di, 2 ;~ 01A2:1BE2
loc_11be5:
	// 4610 
cs=0x1a2;eip=0x001be5; 	T(TEST(ch, 0x40));	// 3393 test    ch, 40h ;~ 01A2:1BE5
cs=0x1a2;eip=0x001be8; 	J(JZ(loc_11bee));	// 3394 jz      short loc_11BEE ;~ 01A2:1BE8
cs=0x1a2;eip=0x001bea; 	X(MOV(*(raddr(es,di)), cl));	// 3395 mov     es:[di], cl ;~ 01A2:1BEA
cs=0x1a2;eip=0x001bed; 	T(INC(di));	// 3396 inc     di ;~ 01A2:1BED
loc_11bee:
	// 4611 
cs=0x1a2;eip=0x001bee; 	T(TEST(ch, 0x20));	// 3399 test    ch, 20h ;~ 01A2:1BEE
cs=0x1a2;eip=0x001bf1; 	J(JZ(loc_11bf9));	// 3400 jz      short loc_11BF9 ;~ 01A2:1BF1
cs=0x1a2;eip=0x001bf3; 	X(MOV(*(dw*)(raddr(es,di)), bx));	// 3401 mov     es:[di], bx ;~ 01A2:1BF3
cs=0x1a2;eip=0x001bf6; 	T(ADD(di, 2));	// 3402 add     di, 2 ;~ 01A2:1BF6
loc_11bf9:
	// 4612 
cs=0x1a2;eip=0x001bf9; 	T(MOV(al, ch));	// 3405 mov     al, ch ;~ 01A2:1BF9
cs=0x1a2;eip=0x001bfb; 	T(AND(al, 0x1F));	// 3406 and     al, 1Fh ;~ 01A2:1BFB
cs=0x1a2;eip=0x001bfd; 	T(CMP(al, byte_2461b));	// 3407 cmp     al, byte_2461B ;~ 01A2:1BFD
cs=0x1a2;eip=0x001c01; 	J(JA(loc_11c04));	// 3408 ja      short loc_11C04 ;~ 01A2:1C01
locret_11c03:
	// 4613 
cs=0x1a2;eip=0x001c03; 	J(RETN(0));	// 3411 retn ;~ 01A2:1C03
loc_11c04:
	// 4614 
cs=0x1a2;eip=0x001c04; 	X(MOV(byte_2461b, al));	// 3415 mov     byte_2461B, al ;~ 01A2:1C04
cs=0x1a2;eip=0x001c07; 	J(RETN(0));	// 3416 retn ;~ 01A2:1C07
loc_11c08:
	// 4615 
cs=0x1a2;eip=0x001c08; 	T(MOV(dl, 0x1D));	// 3420 mov     dl, 1Dh ;~ 01A2:1C08
cs=0x1a2;eip=0x001c0a; 	J(JMP(loc_11bce));	// 3421 jmp     short loc_11BCE ;~ 01A2:1C0A

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::kloc_11bb2: 	goto loc_11bb2;
        case m2c::kloc_11bbb: 	goto loc_11bbb;
        case m2c::kloc_11bbe: 	goto loc_11bbe;
        case m2c::kloc_11bc6: 	goto loc_11bc6;
        case m2c::kloc_11bce: 	goto loc_11bce;
        case m2c::kloc_11bd1: 	goto loc_11bd1;
        case m2c::kloc_11be5: 	goto loc_11be5;
        case m2c::kloc_11bee: 	goto loc_11bee;
        case m2c::kloc_11bf9: 	goto loc_11bf9;
        case m2c::kloc_11c04: 	goto loc_11c04;
        case m2c::kloc_11c08: 	goto loc_11c08;
        case m2c::klocret_11c03: 	goto locret_11c03;
        case m2c::ksub_11ba6: 	goto sub_11ba6;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_11c0c(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_11c0c:
    _begin:
cs=0x1a2;eip=0x001c0c; 	T(XOR(si, si));	// 3429 xor     si, si ;~ 01A2:1C0C
cs=0x1a2;eip=0x001c0e; 	T(OR(al, al));	// 3430 or      al, al ;~ 01A2:1C0E
cs=0x1a2;eip=0x001c10; 	J(JZ(locret_11c28));	// 3431 jz      short locret_11C28 ;~ 01A2:1C10
cs=0x1a2;eip=0x001c12; 	T(XOR(bx, bx));	// 3432 xor     bx, bx ;~ 01A2:1C12
loc_11c14:
	// 4616 
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x001c14; 	T(MOV(bl, *((&byte_11c29)+bx)));	// 3436 mov     bl, cs:byte_11C29[bx] ;~ 01A2:1C14
cs=0x1a2;eip=0x001c19; 	T(ADD(si, bx));	// 3437 add     si, bx ;~ 01A2:1C19
cs=0x1a2;eip=0x001c1b; 	T(MOV(bl, *(raddr(es,si))));	// 3438 mov     bl, es:[si] ;~ 01A2:1C1B
cs=0x1a2;eip=0x001c1e; 	T(INC(si));	// 3439 inc     si ;~ 01A2:1C1E
cs=0x1a2;eip=0x001c1f; 	T(SHR(bl, 5));	// 3440 shr     bl, 5 ;~ 01A2:1C1F
cs=0x1a2;eip=0x001c22; 	J(JNZ(loc_11c14));	// 3441 jnz     short loc_11C14 ;~ 01A2:1C22
cs=0x1a2;eip=0x001c24; 	T(DEC(al));	// 3442 dec     al ;~ 01A2:1C24
cs=0x1a2;eip=0x001c26; 	J(JNZ(loc_11c14));	// 3443 jnz     short loc_11C14 ;~ 01A2:1C26
locret_11c28:
	// 4617 
cs=0x1a2;eip=0x001c28; 	J(RETN(0));	// 3446 retn ;~ 01A2:1C28

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::kloc_11c14: 	goto loc_11c14;
        case m2c::klocret_11c28: 	goto locret_11c28;
        case m2c::ksub_11c0c: 	goto sub_11c0c;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _copy_printable(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _copy_printable:
    _begin:
cs=0x1a2;eip=0x001c31; 	X(PUSH(si));	// 3460 push    si ;~ 01A2:1C31
cs=0x1a2;eip=0x001c32; 	X(PUSH(di));	// 3461 push    di ;~ 01A2:1C32
loc_11c33:
	// 4618 
cs=0x1a2;eip=0x001c33; 	T(MOV(al, *(raddr(ds,si))));	// 3464 mov     al, [si] ;~ 01A2:1C33
cs=0x1a2;eip=0x001c35; 	T(INC(si));	// 3465 inc     si ;~ 01A2:1C35
cs=0x1a2;eip=0x001c36; 	T(CMP(al, 0x20));	// 3466 cmp     al, 20h ; ' ' ;~ 01A2:1C36
cs=0x1a2;eip=0x001c38; 	J(JC(loc_11c40));	// 3467 jb      short loc_11C40 ;~ 01A2:1C38
cs=0x1a2;eip=0x001c3a; 	X(MOV(*(raddr(ds,di)), al));	// 3468 mov     [di], al ;~ 01A2:1C3A
cs=0x1a2;eip=0x001c3c; 	T(INC(di));	// 3469 inc     di ;~ 01A2:1C3C
cs=0x1a2;eip=0x001c3d; 	T(DEC(cx));	// 3470 dec     cx ;~ 01A2:1C3D
cs=0x1a2;eip=0x001c3e; 	J(JNZ(loc_11c33));	// 3471 jnz     short loc_11C33 ;~ 01A2:1C3E
loc_11c40:
	// 4619 
cs=0x1a2;eip=0x001c40; 	X(POP(di));	// 3474 pop     di ;~ 01A2:1C40
cs=0x1a2;eip=0x001c41; 	X(POP(si));	// 3475 pop     si ;~ 01A2:1C41
cs=0x1a2;eip=0x001c42; 	J(RETN(0));	// 3476 retn ;~ 01A2:1C42

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_copy_printable: 	goto _copy_printable;
        case m2c::kloc_11c33: 	goto loc_11c33;
        case m2c::kloc_11c40: 	goto loc_11c40;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _clean_11c43(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _clean_11c43:
    _begin:
cs=0x1a2;eip=0x001c43; 	X(PUSH(ds));	// 3485 push    ds ;~ 01A2:1C43
cs=0x1a2;eip=0x001c44; 	T(MOV(ax, seg_offset(seg003)));	// 3486 mov     ax, seg seg003 ;~ 01A2:1C44
cs=0x1a2;eip=0x001c47; 	T(MOV(ds, ax));	// 3487 mov     ds, ax ;~ 01A2:1C47
cs=0x1a2;eip=0x001c49; 	X(MOV(byte_24679, 6));	// 3488 mov     byte_24679, 6 ;~ 01A2:1C49
cs=0x1a2;eip=0x001c4e; 	X(MOV(byte_2467a, 125));	// 3489 mov     byte_2467A, 125 ;~ 01A2:1C4E
cs=0x1a2;eip=0x001c53; 	X(MOV(byte_2467e, 0));	// 3490 mov     byte_2467E, 0 ;~ 01A2:1C53
cs=0x1a2;eip=0x001c58; 	X(MOV(_moduleflag_246d0, 1));	// 3491 mov     _moduleflag_246D0, 1 ;~ 01A2:1C58
cs=0x1a2;eip=0x001c5e; 	X(MOV(_my_seg_index, 0));	// 3492 mov     _my_seg_index, 0 ;~ 01A2:1C5E
cs=0x1a2;eip=0x001c64; 	X(MOV(word_245f0, 0));	// 3493 mov     word_245F0, 0 ;~ 01A2:1C64
cs=0x1a2;eip=0x001c6a; 	X(MOV(word_245f6, 0));	// 3494 mov     word_245F6, 0 ;~ 01A2:1C6A
cs=0x1a2;eip=0x001c70; 	X(MOV(byte_24673, 0));	// 3495 mov     byte_24673, 0 ;~ 01A2:1C70
cs=0x1a2;eip=0x001c75; 	X(MOV(word_24630, 2));	// 3496 mov     word_24630, 2 ;~ 01A2:1C75
cs=0x1a2;eip=0x001c7b; 	X(MOV(word_245fa, 0));	// 3497 mov     word_245FA, 0 ;~ 01A2:1C7B
cs=0x1a2;eip=0x001c81; 	X(MOV(word_245f8, 0));	// 3498 mov     word_245F8, 0 ;~ 01A2:1C81
cs=0x1a2;eip=0x001c87; 	X(MOV(word_245d4, 4));	// 3499 mov     word_245D4, 4 ;~ 01A2:1C87
cs=0x1a2;eip=0x001c8d; 	X(MOV(word_245d6, 4));	// 3500 mov     word_245D6, 4 ;~ 01A2:1C8D
cs=0x1a2;eip=0x001c93; 	X(MOV(word_245d8, 0));	// 3501 mov     word_245D8, 0 ;~ 01A2:1C93
cs=0x1a2;eip=0x001c99; 	X(MOV(word_245da, 0));	// 3502 mov     word_245DA, 0 ;~ 01A2:1C99
cs=0x1a2;eip=0x001c9f; 	X(MOV(word_245d2, 0));	// 3503 mov     word_245D2, 0 ;~ 01A2:1C9F
cs=0x1a2;eip=0x001ca5; 	X(MOV(_freq_245de, 8287));	// 3504 mov     _freq_245DE, 8287 ;~ 01A2:1CA5
cs=0x1a2;eip=0x001cab; 	T(TEST(_flag_playsetttings, 8));	// 3505 test    _flag_playsetttings, 8 ;~ 01A2:1CAB
cs=0x1a2;eip=0x001cb0; 	J(JNZ(loc_11cb8));	// 3506 jnz     short loc_11CB8 ;~ 01A2:1CB0
cs=0x1a2;eip=0x001cb2; 	X(MOV(_freq_245de, 8363));	// 3507 mov     _freq_245DE, 8363 ;~ 01A2:1CB2
loc_11cb8:
	// 4620 
cs=0x1a2;eip=0x001cb8; 	X(MOV(byte_2461a, 0));	// 3510 mov     byte_2461A, 0 ;~ 01A2:1CB8
cs=0x1a2;eip=0x001cbd; 	X(MOV(dword_245c4, 0));	// 3511 mov     dword_245C4, 0 ;~ 01A2:1CBD
cs=0x1a2;eip=0x001cc6; 	X(MOV(_amplification, 100));	// 3512 mov     _amplification, 100 ;~ 01A2:1CC6
cs=0x1a2;eip=0x001ccc; 	X(MOV(byte_24625, 0));	// 3513 mov     byte_24625, 0 ;~ 01A2:1CCC
cs=0x1a2;eip=0x001cd1; 	T(MOV(ax, ds));	// 3514 mov     ax, ds ;~ 01A2:1CD1
cs=0x1a2;eip=0x001cd3; 	T(MOV(es, ax));	// 3515 mov     es, ax ;~ 01A2:1CD3
cs=0x1a2;eip=0x001cd5; 	T(CLD);	// 3517 cld ;~ 01A2:1CD5
cs=0x1a2;eip=0x001cd6; 	T(MOV(di, offset(seg003,out_)));	// 3518 mov     di, offset out_ ; "                                " ;~ 01A2:1CD6
cs=0x1a2;eip=0x001cd9; 	T(MOV(cx, 8));	// 3519 mov     cx, 8 ;~ 01A2:1CD9
cs=0x1a2;eip=0x001cdc; 	T(MOV(eax, 0x20202020));	// 3520 mov     eax, '    ' ;~ 01A2:1CDC
	// 3521 rep stosd ;~ 01A2:1CE2
cs=0x1a2;eip=0x001ce2; 	X(	REP STOSD);	// 3521 rep stosd ;~ 01A2:1CE2
cs=0x1a2;eip=0x001ce5; 	T(MOV(di, offset(seg003,_volume_25908)));	// 3522 mov     di, offset _volume_25908 ;~ 01A2:1CE5
cs=0x1a2;eip=0x001ce8; 	T(XOR(eax, eax));	// 3523 xor     eax, eax ;~ 01A2:1CE8
cs=0x1a2;eip=0x001ceb; 	T(MOV(cx, 0x280));	// 3524 mov     cx, 280h ;~ 01A2:1CEB
	// 3525 rep stosd ;~ 01A2:1CEE
cs=0x1a2;eip=0x001cee; 	X(	REP STOSD);	// 3525 rep stosd ;~ 01A2:1CEE
cs=0x1a2;eip=0x001cf1; 	T(MOV(di, offset(seg003,byte_282e8)));	// 3526 mov     di, offset byte_282E8 ;~ 01A2:1CF1
cs=0x1a2;eip=0x001cf4; 	T(MOV(cx, 8));	// 3527 mov     cx, 8 ;~ 01A2:1CF4
	// 3528 rep stosd ;~ 01A2:1CF7
cs=0x1a2;eip=0x001cf7; 	X(	REP STOSD);	// 3528 rep stosd ;~ 01A2:1CF7
cs=0x1a2;eip=0x001cfa; 	T(MOV(di, offset(seg003,dword_27bc8)));	// 3529 mov     di, offset dword_27BC8 ;~ 01A2:1CFA
cs=0x1a2;eip=0x001cfd; 	T(MOV(ah, byte_2461e));	// 3530 mov     ah, byte_2461E ;~ 01A2:1CFD
cs=0x1a2;eip=0x001d01; 	T(MOV(al, byte_2461f));	// 3531 mov     al, byte_2461F ;~ 01A2:1D01
cs=0x1a2;eip=0x001d04; 	T(SHL(eax, 0x10));	// 3532 shl     eax, 10h ;~ 01A2:1D04
cs=0x1a2;eip=0x001d08; 	T(MOV(ah, byte_2461f));	// 3533 mov     ah, byte_2461F ;~ 01A2:1D08
cs=0x1a2;eip=0x001d0c; 	T(MOV(al, byte_2461e));	// 3534 mov     al, byte_2461E ;~ 01A2:1D0C
cs=0x1a2;eip=0x001d0f; 	T(MOV(cx, 8));	// 3535 mov     cx, 8 ;~ 01A2:1D0F
	// 3536 rep stosd ;~ 01A2:1D12
cs=0x1a2;eip=0x001d12; 	X(	REP STOSD);	// 3536 rep stosd ;~ 01A2:1D12
cs=0x1a2;eip=0x001d15; 	T(MOV(di, offset(seg003,_myout)));	// 3537 mov     di, offset _myout ;~ 01A2:1D15
cs=0x1a2;eip=0x001d18; 	T(XOR(eax, eax));	// 3538 xor     eax, eax ;~ 01A2:1D18
cs=0x1a2;eip=0x001d1b; 	T(MOV(cx, 0x630));	// 3539 mov     cx, 630h ;~ 01A2:1D1B
	// 3540 rep stosd ;~ 01A2:1D1E
cs=0x1a2;eip=0x001d1e; 	X(	REP STOSD);	// 3540 rep stosd ;~ 01A2:1D1E
cs=0x1a2;eip=0x001d21; 	T(MOV(dx, 0x63));	// 3541 mov     dx, 63h ; 'c' ;~ 01A2:1D21
cs=0x1a2;eip=0x001d24; 	T(MOV(di, offset(seg003,_myout)));	// 3542 mov     di, offset _myout ;~ 01A2:1D24
cs=0x1a2;eip=0x001d27; 	T(MOV(eax, 0x20202020));	// 3543 mov     eax, '    ' ;~ 01A2:1D27
loc_11d2d:
	// 4621 
cs=0x1a2;eip=0x001d2d; 	T(MOV(cx, 8));	// 3546 mov     cx, 8 ;~ 01A2:1D2D
	// 3547 rep stosd ;~ 01A2:1D30
cs=0x1a2;eip=0x001d30; 	X(	REP STOSD);	// 3547 rep stosd ;~ 01A2:1D30
cs=0x1a2;eip=0x001d33; 	T(SUB(di, 0x20));	// 3548 sub     di, 20h ; ' ' ;~ 01A2:1D33
cs=0x1a2;eip=0x001d36; 	X(MOV(*(dw*)(raddr(ds,di+0x32)), 0x0FFFF));	// 3549 mov     word ptr [di+32h], 0FFFFh ;~ 01A2:1D36
cs=0x1a2;eip=0x001d3b; 	T(ADD(di, 0x40));	// 3550 add     di, 40h ; '@' ;~ 01A2:1D3B
cs=0x1a2;eip=0x001d3e; 	T(DEC(dx));	// 3551 dec     dx ;~ 01A2:1D3E
cs=0x1a2;eip=0x001d3f; 	J(JNZ(loc_11d2d));	// 3552 jnz     short loc_11D2D ;~ 01A2:1D3F
cs=0x1a2;eip=0x001d41; 	T(MOV(di, offset(seg003,_segs_table)));	// 3553 mov     di, offset _segs_table ;~ 01A2:1D41
cs=0x1a2;eip=0x001d44; 	T(MOV(cx, 0x80));	// 3554 mov     cx, 80h ; '€' ;~ 01A2:1D44
cs=0x1a2;eip=0x001d47; 	T(XOR(eax, eax));	// 3555 xor     eax, eax ;~ 01A2:1D47
	// 3556 rep stosd ;~ 01A2:1D4A
cs=0x1a2;eip=0x001d4a; 	X(	REP STOSD);	// 3556 rep stosd ;~ 01A2:1D4A
cs=0x1a2;eip=0x001d4d; 	T(MOV(di, offset(seg003,byte_280e8)));	// 3557 mov     di, offset byte_280E8 ;~ 01A2:1D4D
cs=0x1a2;eip=0x001d50; 	T(MOV(cx, 0x40));	// 3558 mov     cx, 40h ; '@' ;~ 01A2:1D50
	// 3559 rep stosd ;~ 01A2:1D53
cs=0x1a2;eip=0x001d53; 	X(	REP STOSD);	// 3559 rep stosd ;~ 01A2:1D53
cs=0x1a2;eip=0x001d56; 	T(MOV(di, offset(seg003,byte_27fe8)));	// 3560 mov     di, offset byte_27FE8 ;~ 01A2:1D56
cs=0x1a2;eip=0x001d59; 	T(MOV(cx, 0x40));	// 3561 mov     cx, 40h ; '@' ;~ 01A2:1D59
	// 3562 rep stosd ;~ 01A2:1D5C
cs=0x1a2;eip=0x001d5c; 	X(	REP STOSD);	// 3562 rep stosd ;~ 01A2:1D5C
cs=0x1a2;eip=0x001d5f; 	T(MOV(di, offset(seg003,byte_282e8)));	// 3563 mov     di, offset byte_282E8 ;~ 01A2:1D5F
cs=0x1a2;eip=0x001d62; 	T(MOV(cx, 8));	// 3564 mov     cx, 8 ;~ 01A2:1D62
	// 3565 rep stosd ;~ 01A2:1D65
cs=0x1a2;eip=0x001d65; 	X(	REP STOSD);	// 3565 rep stosd ;~ 01A2:1D65
cs=0x1a2;eip=0x001d68; 	T(MOV(di, offset(seg003,byte_281e8)));	// 3566 mov     di, offset byte_281E8 ;~ 01A2:1D68
cs=0x1a2;eip=0x001d6b; 	T(MOV(cx, 0x40));	// 3567 mov     cx, 40h ; '@' ;~ 01A2:1D6B
cs=0x1a2;eip=0x001d6e; 	T(MOV(eax, 0x3F3F3F3F));	// 3568 mov     eax, 3F3F3F3Fh ;~ 01A2:1D6E
	// 3569 rep stosd ;~ 01A2:1D74
cs=0x1a2;eip=0x001d74; 	X(	REP STOSD);	// 3569 rep stosd ;~ 01A2:1D74
cs=0x1a2;eip=0x001d77; 	X(POP(ds));	// 3570 pop     ds ;~ 01A2:1D77
cs=0x1a2;eip=0x001d78; 	J(RETF(0));	// 3571 retf ;~ 01A2:1D78

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_clean_11c43: 	goto _clean_11c43;
        case m2c::kloc_11cb8: 	goto loc_11cb8;
        case m2c::kloc_11d2d: 	goto loc_11d2d;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _ems_init(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _ems_init:
    _begin:
cs=0x1a2;eip=0x001d79; 	X(MOV(_ems_enabled, 0));	// 3579 mov     _ems_enabled, 0 ;~ 01A2:1D79
cs=0x1a2;eip=0x001d7e; 	T(MOV(ax, 1));	// 3580 mov     ax, 1 ;~ 01A2:1D7E
cs=0x1a2;eip=0x001d81; 	T(TEST(*(db*)(((db*)&_config_word)), 2));	// 3581 test    byte ptr _config_word, 2 ;~ 01A2:1D81
cs=0x1a2;eip=0x001d86; 	J(JZ(loc_11e00));	// 3582 jz      short loc_11E00 ;~ 01A2:1D86
cs=0x1a2;eip=0x001d88; 	T(XOR(ax, ax));	// 3583 xor     ax, ax ;~ 01A2:1D88
cs=0x1a2;eip=0x001d8a; 	T(MOV(es, ax));	// 3584 mov     es, ax ;~ 01A2:1D8A
cs=0x1a2;eip=0x001d8c; 	T(MOV(ax, 1));	// 3586 mov     ax, 1 ;~ 01A2:1D8C
cs=0x1a2;eip=0x001d8f; 	T(MOV(es, *(dw*)(raddr(es,0x19E))));	// 3587 mov     es, word ptr es:19Eh ;~ 01A2:1D8F
cs=0x1a2;eip=0x001d94; 	T(CMP(*(dd*)(raddr(es,0x0A)), 0x584D4D45));	// 3589 cmp     dword ptr es:0Ah, 584D4D45h ; EMMX ;~ 01A2:1D94
cs=0x1a2;eip=0x001d9e; 	J(JNZ(loc_11e00));	// 3590 jnz     short loc_11E00 ;~ 01A2:1D9E
cs=0x1a2;eip=0x001da0; 	T(CMP(*(dd*)(raddr(es,0x0E)), 0x30585858));	// 3591 cmp     dword ptr es:0Eh, 30585858h ; XXX0 ;~ 01A2:1DA0
cs=0x1a2;eip=0x001daa; 	J(JNZ(loc_11e00));	// 3592 jnz     short loc_11E00 ;~ 01A2:1DAA
cs=0x1a2;eip=0x001dac; 	T(MOV(ah, 0x40));	// 3593 mov     ah, 40h ; '@' ;~ 01A2:1DAC
cs=0x1a2;eip=0x001dae; 	S(_INT(0x67));	// 3594 int     67h             ;  - LIM EMS - GET MANAGER STATUS ;~ 01A2:1DAE
cs=0x1a2;eip=0x001db0; 	T(MOV(bx, ax));	// 3596 mov     bx, ax ;~ 01A2:1DB0
cs=0x1a2;eip=0x001db2; 	T(MOV(ax, 2));	// 3597 mov     ax, 2 ;~ 01A2:1DB2
cs=0x1a2;eip=0x001db5; 	T(OR(bh, bh));	// 3598 or      bh, bh ;~ 01A2:1DB5
cs=0x1a2;eip=0x001db7; 	J(JNZ(loc_11e00));	// 3599 jnz     short loc_11E00 ;~ 01A2:1DB7
cs=0x1a2;eip=0x001db9; 	T(MOV(ah, 0x46));	// 3600 mov     ah, 46h ; 'F' ;~ 01A2:1DB9
cs=0x1a2;eip=0x001dbb; 	S(_INT(0x67));	// 3601 int     67h             ;  - LIM EMS - GET EMM VERSION ;~ 01A2:1DBB
cs=0x1a2;eip=0x001dbd; 	T(MOV(bx, ax));	// 3603 mov     bx, ax ;~ 01A2:1DBD
cs=0x1a2;eip=0x001dbf; 	T(MOV(ax, 2));	// 3604 mov     ax, 2 ;~ 01A2:1DBF
cs=0x1a2;eip=0x001dc2; 	T(OR(bh, bh));	// 3605 or      bh, bh ;~ 01A2:1DC2
cs=0x1a2;eip=0x001dc4; 	J(JNZ(loc_11e00));	// 3606 jnz     short loc_11E00 ;~ 01A2:1DC4
cs=0x1a2;eip=0x001dc6; 	T(MOV(ax, 3));	// 3607 mov     ax, 3 ;~ 01A2:1DC6
cs=0x1a2;eip=0x001dc9; 	T(CMP(bl, 0x40));	// 3608 cmp     bl, 40h ; '@' ;~ 01A2:1DC9
cs=0x1a2;eip=0x001dcc; 	J(JC(loc_11e00));	// 3609 jb      short loc_11E00 ;~ 01A2:1DCC
cs=0x1a2;eip=0x001dce; 	T(MOV(ah, 0x41));	// 3610 mov     ah, 41h ; 'A' ;~ 01A2:1DCE
cs=0x1a2;eip=0x001dd0; 	S(_INT(0x67));	// 3611 int     67h             ;  - LIM EMS - GET PAGE FRAME SEGMENT ;~ 01A2:1DD0
cs=0x1a2;eip=0x001dd2; 	T(CMP(ah, 0));	// 3614 cmp     ah, 0 ;~ 01A2:1DD2
cs=0x1a2;eip=0x001dd5; 	T(MOV(ax, 2));	// 3615 mov     ax, 2 ;~ 01A2:1DD5
cs=0x1a2;eip=0x001dd8; 	J(JNZ(loc_11e00));	// 3616 jnz     short loc_11E00 ;~ 01A2:1DD8
cs=0x1a2;eip=0x001dda; 	X(MOV(_ems_pageframe, bx));	// 3617 mov     _ems_pageframe, bx ;~ 01A2:1DDA
cs=0x1a2;eip=0x001dde; 	T(MOV(ah, 0x43));	// 3618 mov     ah, 43h ; 'C' ;~ 01A2:1DDE
cs=0x1a2;eip=0x001de0; 	T(MOV(bx, 1));	// 3619 mov     bx, 1 ;~ 01A2:1DE0
cs=0x1a2;eip=0x001de3; 	S(_INT(0x67));	// 3620 int     67h             ;  - LIM EMS - GET HANDLE AND ALLOCATE MEMORY ;~ 01A2:1DE3
cs=0x1a2;eip=0x001de5; 	T(CMP(ah, 0));	// 3623 cmp     ah, 0 ;~ 01A2:1DE5
cs=0x1a2;eip=0x001de8; 	T(MOV(ax, 8));	// 3624 mov     ax, 8 ;~ 01A2:1DE8
cs=0x1a2;eip=0x001deb; 	J(JNZ(loc_11e00));	// 3625 jnz     short loc_11E00 ;~ 01A2:1DEB
cs=0x1a2;eip=0x001ded; 	X(MOV(_ems_handle, dx));	// 3626 mov     _ems_handle, dx ;~ 01A2:1DED
cs=0x1a2;eip=0x001df1; 	X(MOV(_ems_enabled, 1));	// 3627 mov     _ems_enabled, 1 ;~ 01A2:1DF1
cs=0x1a2;eip=0x001df6; 	X(MOV(_ems_log_pagenum, 0));	// 3628 mov     _ems_log_pagenum, 0 ;~ 01A2:1DF6
cs=0x1a2;eip=0x001dfc; 	T(XOR(ax, ax));	// 3629 xor     ax, ax ;~ 01A2:1DFC
cs=0x1a2;eip=0x001dfe; 	T(CLC);	// 3630 clc ;~ 01A2:1DFE
cs=0x1a2;eip=0x001dff; 	J(RETN(0));	// 3631 retn ;~ 01A2:1DFF
loc_11e00:
	// 4622 
cs=0x1a2;eip=0x001e00; 	T(STC);	// 3636 stc ;~ 01A2:1E00
cs=0x1a2;eip=0x001e01; 	J(RETN(0));	// 3637 retn ;~ 01A2:1E01

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_ems_init: 	goto _ems_init;
        case m2c::kloc_11e00: 	goto loc_11e00;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _ems_release(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _ems_release:
    _begin:
cs=0x1a2;eip=0x001e02; 	T(CMP(_ems_enabled, 1));	// 3645 cmp     _ems_enabled, 1 ;~ 01A2:1E02
cs=0x1a2;eip=0x001e07; 	J(JNZ(locret_11e1d));	// 3646 jnz     short locret_11E1D ;~ 01A2:1E07
cs=0x1a2;eip=0x001e09; 	T(MOV(bx, 0x8000));	// 3647 mov     bx, 8000h ;~ 01A2:1E09
cs=0x1a2;eip=0x001e0c; 	J(CALL(_ems_mapmem,0));	// 3648 call    _ems_mapmem ;~ 01A2:1E0C
cs=0x1a2;eip=0x001e0f; 	T(MOV(dx, _ems_handle));	// 3649 mov     dx, _ems_handle ;~ 01A2:1E0F
cs=0x1a2;eip=0x001e13; 	T(MOV(ah, 0x45));	// 3650 mov     ah, 45h ; 'E' ;~ 01A2:1E13
cs=0x1a2;eip=0x001e15; 	S(_INT(0x67));	// 3651 int     67h             ;  - LIM EMS - RELEASE HANDLE AND MEMORY ;~ 01A2:1E15
cs=0x1a2;eip=0x001e17; 	X(MOV(_ems_log_pagenum, 0));	// 3654 mov     _ems_log_pagenum, 0 ;~ 01A2:1E17
locret_11e1d:
	// 4623 
cs=0x1a2;eip=0x001e1d; 	J(RETN(0));	// 3657 retn ;~ 01A2:1E1D

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_ems_release: 	goto _ems_release;
        case m2c::klocret_11e1d: 	goto locret_11e1d;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _ems_realloc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _ems_realloc:
    _begin:
cs=0x1a2;eip=0x001e1e; 	T(CMP(_ems_enabled, 1));	// 3665 cmp     _ems_enabled, 1 ;~ 01A2:1E1E
cs=0x1a2;eip=0x001e23; 	J(JNZ(locret_11e36));	// 3666 jnz     short locret_11E36 ;~ 01A2:1E23
cs=0x1a2;eip=0x001e25; 	T(MOV(dx, _ems_handle));	// 3667 mov     dx, _ems_handle ;~ 01A2:1E25
cs=0x1a2;eip=0x001e29; 	T(MOV(bx, 1));	// 3668 mov     bx, 1 ;~ 01A2:1E29
cs=0x1a2;eip=0x001e2c; 	T(MOV(ah, 0x51));	// 3669 mov     ah, 51h ; 'Q' ;~ 01A2:1E2C
cs=0x1a2;eip=0x001e2e; 	S(_INT(0x67));	// 3670 int     67h             ;  - LIM EMS 4.0 - REALLOCATE PAGES ;~ 01A2:1E2E
cs=0x1a2;eip=0x001e30; 	X(MOV(_ems_log_pagenum, 0));	// 3675 mov     _ems_log_pagenum, 0 ;~ 01A2:1E30
locret_11e36:
	// 4624 
cs=0x1a2;eip=0x001e36; 	J(RETN(0));	// 3678 retn ;~ 01A2:1E36

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_ems_realloc: 	goto _ems_realloc;
        case m2c::klocret_11e36: 	goto locret_11e36;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _ems_deinit(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _ems_deinit:
    _begin:
cs=0x1a2;eip=0x001e37; 	T(CMP(_ems_enabled, 1));	// 3686 cmp     _ems_enabled, 1 ;~ 01A2:1E37
cs=0x1a2;eip=0x001e3c; 	J(JNZ(locret_11e46));	// 3687 jnz     short locret_11E46 ;~ 01A2:1E3C
cs=0x1a2;eip=0x001e3e; 	J(CALL(_ems_release,0));	// 3688 call    _ems_release ;~ 01A2:1E3E
cs=0x1a2;eip=0x001e41; 	X(MOV(_ems_enabled, 0));	// 3689 mov     _ems_enabled, 0 ;~ 01A2:1E41
locret_11e46:
	// 4625 
cs=0x1a2;eip=0x001e46; 	J(RETN(0));	// 3692 retn ;~ 01A2:1E46

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_ems_deinit: 	goto _ems_deinit;
        case m2c::klocret_11e46: 	goto locret_11e46;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _ems_save_mapctx(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _ems_save_mapctx:
    _begin:
cs=0x1a2;eip=0x001e47; 	T(CMP(_ems_enabled, 1));	// 3701 cmp     _ems_enabled, 1 ;~ 01A2:1E47
cs=0x1a2;eip=0x001e4c; 	J(JNZ(locret_11e67));	// 3702 jnz     short locret_11E67 ;~ 01A2:1E4C
cs=0x1a2;eip=0x001e4e; 	T(MOV(cx, 0x32));	// 3703 mov     cx, 32h ; '2' ;~ 01A2:1E4E
loc_11e51:
	// 4626 
cs=0x1a2;eip=0x001e51; 	T(MOV(dx, _ems_handle));	// 3706 mov     dx, _ems_handle ;~ 01A2:1E51
cs=0x1a2;eip=0x001e55; 	T(MOV(ax, 0x4700));	// 3707 mov     ax, 4700h ;~ 01A2:1E55
cs=0x1a2;eip=0x001e58; 	S(_INT(0x67));	// 3708 int     67h             ;  - LIM EMS - SAVE MAPPING CONTEXT ;~ 01A2:1E58
cs=0x1a2;eip=0x001e5a; 	T(CMP(ah, 0));	// 3711 cmp     ah, 0 ;~ 01A2:1E5A
cs=0x1a2;eip=0x001e5d; 	J(JZ(locret_11e67));	// 3712 jz      short locret_11E67 ;~ 01A2:1E5D
cs=0x1a2;eip=0x001e5f; 	T(DEC(cx));	// 3713 dec     cx ;~ 01A2:1E5F
cs=0x1a2;eip=0x001e60; 	J(JNZ(loc_11e51));	// 3714 jnz     short loc_11E51 ;~ 01A2:1E60
cs=0x1a2;eip=0x001e62; 	X(MOV(byte_246a5, 1));	// 3715 mov     byte_246A5, 1 ;~ 01A2:1E62
locret_11e67:
	// 4627 
cs=0x1a2;eip=0x001e67; 	J(RETN(0));	// 3719 retn ;~ 01A2:1E67

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_ems_save_mapctx: 	goto _ems_save_mapctx;
        case m2c::kloc_11e51: 	goto loc_11e51;
        case m2c::klocret_11e67: 	goto locret_11e67;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _ems_restore_mapctx(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _ems_restore_mapctx:
    _begin:
cs=0x1a2;eip=0x001e68; 	T(CMP(_ems_enabled, 1));	// 3728 cmp     _ems_enabled, 1 ;~ 01A2:1E68
cs=0x1a2;eip=0x001e6d; 	J(JNZ(locret_11e8a));	// 3729 jnz     short locret_11E8A ;~ 01A2:1E6D
cs=0x1a2;eip=0x001e6f; 	T(CMP(byte_246a5, 1));	// 3730 cmp     byte_246A5, 1 ;~ 01A2:1E6F
cs=0x1a2;eip=0x001e74; 	J(JNZ(locret_11e8a));	// 3731 jnz     short locret_11E8A ;~ 01A2:1E74
cs=0x1a2;eip=0x001e76; 	T(MOV(cx, 0x32));	// 3732 mov     cx, 32h ; '2' ;~ 01A2:1E76
loc_11e79:
	// 4628 
cs=0x1a2;eip=0x001e79; 	T(MOV(dx, _ems_handle));	// 3735 mov     dx, _ems_handle ;~ 01A2:1E79
cs=0x1a2;eip=0x001e7d; 	T(MOV(ax, 0x4800));	// 3736 mov     ax, 4800h ;~ 01A2:1E7D
cs=0x1a2;eip=0x001e80; 	S(_INT(0x67));	// 3737 int     67h             ;  - LIM EMS - RESTORE MAPPING CONTEXT ;~ 01A2:1E80
cs=0x1a2;eip=0x001e82; 	T(CMP(ah, 0));	// 3740 cmp     ah, 0 ;~ 01A2:1E82
cs=0x1a2;eip=0x001e85; 	J(JZ(locret_11e8a));	// 3741 jz      short locret_11E8A ;~ 01A2:1E85
cs=0x1a2;eip=0x001e87; 	T(DEC(cx));	// 3742 dec     cx ;~ 01A2:1E87
cs=0x1a2;eip=0x001e88; 	J(JNZ(loc_11e79));	// 3743 jnz     short loc_11E79 ;~ 01A2:1E88
locret_11e8a:
	// 4629 
cs=0x1a2;eip=0x001e8a; 	J(RETN(0));	// 3747 retn ;~ 01A2:1E8A

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_ems_restore_mapctx: 	goto _ems_restore_mapctx;
        case m2c::kloc_11e79: 	goto loc_11e79;
        case m2c::klocret_11e8a: 	goto locret_11e8a;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _ems_mapmem(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _ems_mapmem:
    _begin:
cs=0x1a2;eip=0x001e8b; 	T(CMP(_ems_enabled, 1));	// 3756 cmp     _ems_enabled, 1 ;~ 01A2:1E8B
cs=0x1a2;eip=0x001e90; 	J(JNZ(locret_11ec4));	// 3757 jnz     short locret_11EC4 ;~ 01A2:1E90
cs=0x1a2;eip=0x001e92; 	T(MOV(cx, 0x32));	// 3758 mov     cx, 32h ; '2' ;~ 01A2:1E92
cs=0x1a2;eip=0x001e95; 	T(CMP(bx, _ems_log_pagenum));	// 3759 cmp     bx, _ems_log_pagenum ;~ 01A2:1E95
cs=0x1a2;eip=0x001e99; 	J(JC(loc_11e9e));	// 3760 jb      short loc_11E9E ;~ 01A2:1E99
cs=0x1a2;eip=0x001e9b; 	T(MOV(bx, 0x0FFFF));	// 3761 mov     bx, 0FFFFh      ; EMS UNMAP ;~ 01A2:1E9B
loc_11e9e:
	// 4630 
cs=0x1a2;eip=0x001e9e; 	X(PUSH(bx));	// 3765 push    bx ;~ 01A2:1E9E
cs=0x1a2;eip=0x001e9f; 	T(MOV(dx, _ems_handle));	// 3766 mov     dx, _ems_handle ;~ 01A2:1E9F
cs=0x1a2;eip=0x001ea3; 	X(PUSH(bx));	// 3767 push    bx ;~ 01A2:1EA3
cs=0x1a2;eip=0x001ea4; 	T(MOV(ax, 0x4400));	// 3768 mov     ax, 4400h ;~ 01A2:1EA4
cs=0x1a2;eip=0x001ea7; 	S(_INT(0x67));	// 3769 int     67h             ;  - LIM EMS - MAP MEMORY ;~ 01A2:1EA7
cs=0x1a2;eip=0x001ea9; 	X(POP(bx));	// 3773 pop     bx ;~ 01A2:1EA9
cs=0x1a2;eip=0x001eaa; 	T(INC(bx));	// 3774 inc     bx ;~ 01A2:1EAA
cs=0x1a2;eip=0x001eab; 	J(JZ(loc_11eb3));	// 3775 jz      short loc_11EB3 ;~ 01A2:1EAB
cs=0x1a2;eip=0x001ead; 	T(CMP(bx, _ems_log_pagenum));	// 3776 cmp     bx, _ems_log_pagenum ;~ 01A2:1EAD
cs=0x1a2;eip=0x001eb1; 	J(JC(loc_11eb6));	// 3777 jb      short loc_11EB6 ;~ 01A2:1EB1
loc_11eb3:
	// 4631 
cs=0x1a2;eip=0x001eb3; 	T(MOV(bx, 0x0FFFF));	// 3780 mov     bx, 0FFFFh ;~ 01A2:1EB3
loc_11eb6:
	// 4632 
cs=0x1a2;eip=0x001eb6; 	T(MOV(ax, 0x4401));	// 3783 mov     ax, 4401h ;~ 01A2:1EB6
cs=0x1a2;eip=0x001eb9; 	S(_INT(0x67));	// 3784 int     67h             ;  - LIM EMS - MAP MEMORY ;~ 01A2:1EB9
cs=0x1a2;eip=0x001ebb; 	T(CMP(ah, 0));	// 3788 cmp     ah, 0 ;~ 01A2:1EBB
cs=0x1a2;eip=0x001ebe; 	X(POP(bx));	// 3789 pop     bx ;~ 01A2:1EBE
cs=0x1a2;eip=0x001ebf; 	J(JZ(locret_11ec4));	// 3790 jz      short locret_11EC4 ;~ 01A2:1EBF
cs=0x1a2;eip=0x001ec1; 	T(DEC(cx));	// 3791 dec     cx ;~ 01A2:1EC1
cs=0x1a2;eip=0x001ec2; 	J(JNZ(loc_11e9e));	// 3792 jnz     short loc_11E9E ;~ 01A2:1EC2
locret_11ec4:
	// 4633 
cs=0x1a2;eip=0x001ec4; 	J(RETN(0));	// 3796 retn ;~ 01A2:1EC4

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_ems_mapmem: 	goto _ems_mapmem;
        case m2c::kloc_11e9e: 	goto loc_11e9e;
        case m2c::kloc_11eb3: 	goto loc_11eb3;
        case m2c::kloc_11eb6: 	goto loc_11eb6;
        case m2c::klocret_11ec4: 	goto locret_11ec4;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _ems_mapmem2(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _ems_mapmem2:
    _begin:
cs=0x1a2;eip=0x001ec5; 	T(CMP(_ems_enabled, 1));	// 3805 cmp     _ems_enabled, 1 ;~ 01A2:1EC5
cs=0x1a2;eip=0x001eca; 	J(JNZ(locret_11efe));	// 3806 jnz     short locret_11EFE ;~ 01A2:1ECA
cs=0x1a2;eip=0x001ecc; 	T(MOV(cx, 0x32));	// 3807 mov     cx, 32h ; '2' ;~ 01A2:1ECC
cs=0x1a2;eip=0x001ecf; 	T(CMP(bx, _ems_log_pagenum));	// 3808 cmp     bx, _ems_log_pagenum ;~ 01A2:1ECF
cs=0x1a2;eip=0x001ed3; 	J(JC(loc_11ed8));	// 3809 jb      short loc_11ED8 ;~ 01A2:1ED3
cs=0x1a2;eip=0x001ed5; 	T(MOV(bx, 0x0FFFF));	// 3810 mov     bx, 0FFFFh ;~ 01A2:1ED5
loc_11ed8:
	// 4634 
cs=0x1a2;eip=0x001ed8; 	X(PUSH(bx));	// 3814 push    bx ;~ 01A2:1ED8
cs=0x1a2;eip=0x001ed9; 	T(MOV(dx, _ems_handle));	// 3815 mov     dx, _ems_handle ;~ 01A2:1ED9
cs=0x1a2;eip=0x001edd; 	X(PUSH(bx));	// 3816 push    bx ;~ 01A2:1EDD
cs=0x1a2;eip=0x001ede; 	T(MOV(ax, 0x4402));	// 3817 mov     ax, 4402h ;~ 01A2:1EDE
cs=0x1a2;eip=0x001ee1; 	S(_INT(0x67));	// 3818 int     67h             ;  - LIM EMS - MAP MEMORY ;~ 01A2:1EE1
cs=0x1a2;eip=0x001ee3; 	X(POP(bx));	// 3822 pop     bx ;~ 01A2:1EE3
cs=0x1a2;eip=0x001ee4; 	T(INC(bx));	// 3823 inc     bx ;~ 01A2:1EE4
cs=0x1a2;eip=0x001ee5; 	J(JZ(loc_11eed));	// 3824 jz      short loc_11EED ;~ 01A2:1EE5
cs=0x1a2;eip=0x001ee7; 	T(CMP(bx, _ems_log_pagenum));	// 3825 cmp     bx, _ems_log_pagenum ;~ 01A2:1EE7
cs=0x1a2;eip=0x001eeb; 	J(JC(loc_11ef0));	// 3826 jb      short loc_11EF0 ;~ 01A2:1EEB
loc_11eed:
	// 4635 
cs=0x1a2;eip=0x001eed; 	T(MOV(bx, 0x0FFFF));	// 3829 mov     bx, 0FFFFh ;~ 01A2:1EED
loc_11ef0:
	// 4636 
cs=0x1a2;eip=0x001ef0; 	T(MOV(ax, 0x4403));	// 3832 mov     ax, 4403h ;~ 01A2:1EF0
cs=0x1a2;eip=0x001ef3; 	S(_INT(0x67));	// 3833 int     67h             ;  - LIM EMS - MAP MEMORY ;~ 01A2:1EF3
cs=0x1a2;eip=0x001ef5; 	T(CMP(ah, 0));	// 3837 cmp     ah, 0 ;~ 01A2:1EF5
cs=0x1a2;eip=0x001ef8; 	X(POP(bx));	// 3838 pop     bx ;~ 01A2:1EF8
cs=0x1a2;eip=0x001ef9; 	J(JZ(locret_11efe));	// 3839 jz      short locret_11EFE ;~ 01A2:1EF9
cs=0x1a2;eip=0x001efb; 	T(DEC(cx));	// 3840 dec     cx ;~ 01A2:1EFB
cs=0x1a2;eip=0x001efc; 	J(JNZ(loc_11ed8));	// 3841 jnz     short loc_11ED8 ;~ 01A2:1EFC
locret_11efe:
	// 4637 
cs=0x1a2;eip=0x001efe; 	J(RETN(0));	// 3845 retn ;~ 01A2:1EFE

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_ems_mapmem2: 	goto _ems_mapmem2;
        case m2c::kloc_11ed8: 	goto loc_11ed8;
        case m2c::kloc_11eed: 	goto loc_11eed;
        case m2c::kloc_11ef0: 	goto loc_11ef0;
        case m2c::klocret_11efe: 	goto locret_11efe;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _ems_realloc2(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _ems_realloc2:
    _begin:
cs=0x1a2;eip=0x001eff; 	X(INC(byte_24617));	// 3853 inc     byte_24617 ;~ 01A2:1EFF
cs=0x1a2;eip=0x001f03; 	T(CMP(_ems_enabled, 1));	// 3854 cmp     _ems_enabled, 1 ;~ 01A2:1F03
cs=0x1a2;eip=0x001f08; 	J(JNZ(loc_11f3c));	// 3855 jnz     short loc_11F3C ;~ 01A2:1F08
cs=0x1a2;eip=0x001f0a; 	T(MOV(ebx, *(dd*)(raddr(ds,di+0x20))));	// 3856 mov     ebx, [di+20h] ;~ 01A2:1F0A
cs=0x1a2;eip=0x001f0e; 	T(SHR(ebx, 4));	// 3857 shr     ebx, 4 ;~ 01A2:1F0E
cs=0x1a2;eip=0x001f12; 	T(ADD(bx, 0x102));	// 3858 add     bx, 102h ;~ 01A2:1F12
cs=0x1a2;eip=0x001f16; 	T(DEC(bx));	// 3859 dec     bx ;~ 01A2:1F16
cs=0x1a2;eip=0x001f17; 	T(SHR(bx, 0x0A));	// 3860 shr     bx, 0Ah ;~ 01A2:1F17
cs=0x1a2;eip=0x001f1a; 	T(INC(bx));	// 3861 inc     bx ;~ 01A2:1F1A
cs=0x1a2;eip=0x001f1b; 	T(MOV(ah, 0x51));	// 3862 mov     ah, 51h ; 'Q' ;~ 01A2:1F1B
cs=0x1a2;eip=0x001f1d; 	T(MOV(dx, _ems_handle));	// 3863 mov     dx, _ems_handle ;~ 01A2:1F1D
cs=0x1a2;eip=0x001f21; 	T(ADD(bx, _ems_log_pagenum));	// 3864 add     bx, _ems_log_pagenum ;~ 01A2:1F21
cs=0x1a2;eip=0x001f25; 	X(PUSH(bx));	// 3865 push    bx ;~ 01A2:1F25
cs=0x1a2;eip=0x001f26; 	S(_INT(0x67));	// 3866 int     67h             ;  - LIM EMS 4.0 - REALLOCATE PAGES ;~ 01A2:1F26
cs=0x1a2;eip=0x001f28; 	X(POP(bx));	// 3871 pop     bx ;~ 01A2:1F28
cs=0x1a2;eip=0x001f29; 	T(CMP(ah, 0));	// 3872 cmp     ah, 0 ;~ 01A2:1F29
cs=0x1a2;eip=0x001f2c; 	J(JNZ(loc_11f3c));	// 3873 jnz     short loc_11F3C ;~ 01A2:1F2C
cs=0x1a2;eip=0x001f2e; 	T(MOV(cx, _ems_log_pagenum));	// 3874 mov     cx, _ems_log_pagenum ;~ 01A2:1F2E
cs=0x1a2;eip=0x001f32; 	X(MOV(_ems_log_pagenum, bx));	// 3875 mov     _ems_log_pagenum, bx ;~ 01A2:1F32
cs=0x1a2;eip=0x001f36; 	T(MOV(bx, cx));	// 3876 mov     bx, cx ;~ 01A2:1F36
cs=0x1a2;eip=0x001f38; 	T(MOV(ax, _ems_pageframe));	// 3877 mov     ax, _ems_pageframe ;~ 01A2:1F38
cs=0x1a2;eip=0x001f3b; 	J(RETN(0));	// 3878 retn ;~ 01A2:1F3B
loc_11f3c:
	// 4638 
cs=0x1a2;eip=0x001f3c; 	T(MOV(ebx, *(dd*)(raddr(ds,di+0x20))));	// 3883 mov     ebx, [di+20h] ;~ 01A2:1F3C
cs=0x1a2;eip=0x001f40; 	T(ADD(ebx, 0x1020));	// 3884 add     ebx, 1020h      ; bytes ;~ 01A2:1F40
cs=0x1a2;eip=0x001f47; 	J(CALL(_memalloc,0));	// 3885 call    _memalloc ;~ 01A2:1F47
cs=0x1a2;eip=0x001f4a; 	T(MOV(cx, 0x0FFFF));	// 3886 mov     cx, 0FFFFh ;~ 01A2:1F4A
cs=0x1a2;eip=0x001f4d; 	J(RETN(0));	// 3887 retn ;~ 01A2:1F4D

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_ems_realloc2: 	goto _ems_realloc2;
        case m2c::kloc_11f3c: 	goto loc_11f3c;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _mod_readfile_11f4e(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _mod_readfile_11f4e:
    _begin:
cs=0x1a2;eip=0x001f4e; 	X(MOV(byte_24617, 0));	// 3896 mov     byte_24617, 0 ;~ 01A2:1F4E
cs=0x1a2;eip=0x001f53; 	T(CMP(word_24662, 0));	// 3897 cmp     word_24662, 0 ;~ 01A2:1F53
cs=0x1a2;eip=0x001f58; 	T(STC);	// 3898 stc ;~ 01A2:1F58
cs=0x1a2;eip=0x001f59; 	J(JNZ(locret_11fd3));	// 3899 jnz     short locret_11FD3 ;~ 01A2:1F59
cs=0x1a2;eip=0x001f5b; 	T(TEST(_sndflags_24622, 4));	// 3900 test    _sndflags_24622, 4 ;~ 01A2:1F5B
cs=0x1a2;eip=0x001f60; 	J(JNZ(loc_11fd6));	// 3901 jnz     short loc_11FD6 ;~ 01A2:1F60
cs=0x1a2;eip=0x001f62; 	T(TEST(_sndflags_24622, 0x10));	// 3902 test    _sndflags_24622, 10h ;~ 01A2:1F62
cs=0x1a2;eip=0x001f67; 	J(JNZ(loc_11fd2));	// 3903 jnz     short loc_11FD2 ;~ 01A2:1F67
cs=0x1a2;eip=0x001f69; 	T(MOV(cx, word_245d2));	// 3904 mov     cx, word_245D2 ;~ 01A2:1F69
cs=0x1a2;eip=0x001f6d; 	T(MOV(di, offset(seg003,_myout)));	// 3905 mov     di, offset _myout ;~ 01A2:1F6D
loc_11f70:
	// 4639 
cs=0x1a2;eip=0x001f70; 	X(PUSH(cx));	// 3908 push    cx ;~ 01A2:1F70
cs=0x1a2;eip=0x001f71; 	T(CMP(*(dd*)(raddr(ds,di+0x20)), 0));	// 3909 cmp     dword ptr [di+20h], 0 ;~ 01A2:1F71
cs=0x1a2;eip=0x001f76; 	J(JZ(loc_11fcb));	// 3910 jz      short loc_11FCB ;~ 01A2:1F76
cs=0x1a2;eip=0x001f78; 	X(MOV(byte_24675, 1));	// 3911 mov     byte_24675, 1 ;~ 01A2:1F78
cs=0x1a2;eip=0x001f7d; 	T(MOV(al, *(raddr(ds,di+0x3F))));	// 3912 mov     al, [di+3Fh] ;~ 01A2:1F7D
cs=0x1a2;eip=0x001f80; 	X(MOV(byte_24674, al));	// 3913 mov     byte_24674, al ;~ 01A2:1F80
cs=0x1a2;eip=0x001f83; 	X(PUSH(di));	// 3914 push    di ;~ 01A2:1F83
cs=0x1a2;eip=0x001f84; 	J(CALL(_ems_realloc2,0));	// 3915 call    _ems_realloc2 ;~ 01A2:1F84
cs=0x1a2;eip=0x001f87; 	X(POP(di));	// 3916 pop     di ;~ 01A2:1F87
cs=0x1a2;eip=0x001f88; 	J(JC(loc_11fd4));	// 3917 jb      short loc_11FD4 ;~ 01A2:1F88
cs=0x1a2;eip=0x001f8a; 	X(MOV(*(dw*)(raddr(ds,di+0x30)), ax));	// 3918 mov     [di+30h], ax ;~ 01A2:1F8A
cs=0x1a2;eip=0x001f8d; 	X(MOV(*(dw*)(raddr(ds,di+0x32)), cx));	// 3919 mov     [di+32h], cx ;~ 01A2:1F8D
cs=0x1a2;eip=0x001f90; 	T(MOV(es, ax));	// 3920 mov     es, ax ;~ 01A2:1F90
cs=0x1a2;eip=0x001f92; 	T(TEST(_moduleflag_246d0, 0x5d8));	// 3921 test    _moduleflag_246D0, 10111011000b ;~ 01A2:1F92
cs=0x1a2;eip=0x001f98; 	J(JZ(loc_11fa9));	// 3922 jz      short loc_11FA9 ;~ 01A2:1F98
cs=0x1a2;eip=0x001f9a; 	T(MOV(dx, *(dw*)(raddr(ds,di+0x38))));	// 3923 mov     dx, [di+38h] ;~ 01A2:1F9A
cs=0x1a2;eip=0x001f9d; 	T(MOV(cx, *(dw*)(raddr(ds,di+0x3A))));	// 3924 mov     cx, [di+3Ah] ;~ 01A2:1F9D
cs=0x1a2;eip=0x001fa0; 	T(MOV(bx, _fhandle_module));	// 3925 mov     bx, _fhandle_module ;~ 01A2:1FA0
cs=0x1a2;eip=0x001fa4; 	T(MOV(ax, 0x4200));	// 3926 mov     ax, 4200h ;~ 01A2:1FA4
cs=0x1a2;eip=0x001fa7; 	S(_INT(0x21));	// 3927 int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK) ;~ 01A2:1FA7
loc_11fa9:
	// 4640 
cs=0x1a2;eip=0x001fa9; 	T(MOV(bx, _fhandle_module));	// 3931 mov     bx, _fhandle_module ;~ 01A2:1FA9
cs=0x1a2;eip=0x001fad; 	T(MOV(ecx, *(dd*)(raddr(ds,di+0x20))));	// 3932 mov     ecx, [di+20h] ;~ 01A2:1FAD
cs=0x1a2;eip=0x001fb1; 	X(PUSH(di));	// 3933 push    di ;~ 01A2:1FB1
cs=0x1a2;eip=0x001fb2; 	X(PUSH(es));	// 3934 push    es ;~ 01A2:1FB2
cs=0x1a2;eip=0x001fb3; 	T(MOV(dx, *(dw*)(raddr(ds,di+0x32))));	// 3935 mov     dx, [di+32h] ;~ 01A2:1FB3
cs=0x1a2;eip=0x001fb6; 	J(CALL(_mod_readfile_12247,0));	// 3936 call    _mod_readfile_12247 ;~ 01A2:1FB6
cs=0x1a2;eip=0x001fb9; 	X(ADC(word_24662, 0));	// 3937 adc     word_24662, 0 ;~ 01A2:1FB9
cs=0x1a2;eip=0x001fbe; 	X(POP(es));	// 3938 pop     es ;~ 01A2:1FBE
cs=0x1a2;eip=0x001fbf; 	X(POP(di));	// 3940 pop     di ;~ 01A2:1FBF
cs=0x1a2;eip=0x001fc0; 	T(MOV(ax, es));	// 3941 mov     ax, es ;~ 01A2:1FC0
cs=0x1a2;eip=0x001fc2; 	X(PUSH(di));	// 3942 push    di ;~ 01A2:1FC2
cs=0x1a2;eip=0x001fc3; 	J(CALL(_ems_mapmemx,0));	// 3943 call    _ems_mapmemx ;~ 01A2:1FC3
cs=0x1a2;eip=0x001fc6; 	X(POP(di));	// 3944 pop     di ;~ 01A2:1FC6
cs=0x1a2;eip=0x001fc7; 	X(OR(*(raddr(ds,di+0x3C)), 1));	// 3945 or      byte ptr [di+3Ch], 1 ;~ 01A2:1FC7
loc_11fcb:
	// 4641 
cs=0x1a2;eip=0x001fcb; 	T(ADD(di, 0x40));	// 3948 add     di, 40h ; '@' ;~ 01A2:1FCB
cs=0x1a2;eip=0x001fce; 	X(POP(cx));	// 3949 pop     cx ;~ 01A2:1FCE
cs=0x1a2;eip=0x001fcf; 	T(DEC(cx));	// 3950 dec     cx ;~ 01A2:1FCF
cs=0x1a2;eip=0x001fd0; 	J(JNZ(loc_11f70));	// 3951 jnz     short loc_11F70 ;~ 01A2:1FD0
loc_11fd2:
	// 4642 
cs=0x1a2;eip=0x001fd2; 	T(CLC);	// 3954 clc ;~ 01A2:1FD2
locret_11fd3:
	// 4643 
cs=0x1a2;eip=0x001fd3; 	J(RETN(0));	// 3957 retn ;~ 01A2:1FD3
loc_11fd4:
	// 4644 
cs=0x1a2;eip=0x001fd4; 	X(POP(cx));	// 3961 pop     cx ;~ 01A2:1FD4
cs=0x1a2;eip=0x001fd5; 	J(RETN(0));	// 3962 retn ;~ 01A2:1FD5
loc_11fd6:
	// 4645 
cs=0x1a2;eip=0x001fd6; 	T(MOV(eax, 0x10000));	// 3966 mov     eax, 10000h ;~ 01A2:1FD6
cs=0x1a2;eip=0x001fdc; 	T(MOV(cl, _dma_channel_0));	// 3967 mov     cl, _dma_channel_0 ;~ 01A2:1FDC
cs=0x1a2;eip=0x001fe0; 	J(CALL(_alloc_dma_buf,0));	// 3968 call    _alloc_dma_buf ;~ 01A2:1FE0
cs=0x1a2;eip=0x001fe3; 	J(JC(locret_1221f));	// 3969 jb      locret_1221F ;~ 01A2:1FE3
cs=0x1a2;eip=0x001fe7; 	X(MOV(*(dw*)(((db*)&_audio_buf_pointer)+2), ax));	// 3970 mov     word ptr _audio_buf_pointer+2, ax ;~ 01A2:1FE7
cs=0x1a2;eip=0x001fea; 	X(MOV(*(dw*)(((db*)&_audio_buf_pointer)), 0));	// 3971 mov     word ptr _audio_buf_pointer, 0 ;~ 01A2:1FEA
cs=0x1a2;eip=0x001ff0; 	T(MOV(di, offset(seg003,_myout)));	// 3972 mov     di, offset _myout ;~ 01A2:1FF0
cs=0x1a2;eip=0x001ff3; 	T(MOV(cx, word_245d2));	// 3973 mov     cx, word_245D2 ;~ 01A2:1FF3
loc_11ff7:
	// 4646 
cs=0x1a2;eip=0x001ff7; 	X(PUSH(cx));	// 3976 push    cx ;~ 01A2:1FF7
cs=0x1a2;eip=0x001ff8; 	T(CMP(*(dd*)(raddr(ds,di+0x20)), 0));	// 3977 cmp     dword ptr [di+20h], 0 ;~ 01A2:1FF8
cs=0x1a2;eip=0x001ffd; 	J(JZ(loc_12106));	// 3978 jz      loc_12106 ;~ 01A2:1FFD
cs=0x1a2;eip=0x002001; 	X(INC(byte_24617));	// 3979 inc     byte_24617 ;~ 01A2:2001
cs=0x1a2;eip=0x002005; 	X(MOV(byte_24675, 1));	// 3980 mov     byte_24675, 1 ;~ 01A2:2005
cs=0x1a2;eip=0x00200a; 	T(MOV(al, *(raddr(ds,di+0x3F))));	// 3981 mov     al, [di+3Fh] ;~ 01A2:200A
cs=0x1a2;eip=0x00200d; 	X(MOV(byte_24674, al));	// 3982 mov     byte_24674, al ;~ 01A2:200D
cs=0x1a2;eip=0x002010; 	T(TEST(_moduleflag_246d0, 0x5d8));	// 3983 test    _moduleflag_246D0, 10111011000b ;~ 01A2:2010
cs=0x1a2;eip=0x002016; 	J(JZ(loc_12027));	// 3984 jz      short loc_12027 ;~ 01A2:2016
cs=0x1a2;eip=0x002018; 	T(MOV(dx, *(dw*)(raddr(ds,di+0x38))));	// 3985 mov     dx, [di+38h] ;~ 01A2:2018
cs=0x1a2;eip=0x00201b; 	T(MOV(cx, *(dw*)(raddr(ds,di+0x3A))));	// 3986 mov     cx, [di+3Ah] ;~ 01A2:201B
cs=0x1a2;eip=0x00201e; 	T(MOV(bx, _fhandle_module));	// 3987 mov     bx, _fhandle_module ;~ 01A2:201E
cs=0x1a2;eip=0x002022; 	T(MOV(ax, 0x4200));	// 3988 mov     ax, 4200h ;~ 01A2:2022
cs=0x1a2;eip=0x002025; 	S(_INT(0x21));	// 3989 int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK) ;~ 01A2:2025
loc_12027:
	// 4647 
cs=0x1a2;eip=0x002027; 	T(TEST(*(raddr(ds,di+0x3C)), 4));	// 3993 test    byte ptr [di+3Ch], 4 ;~ 01A2:2027
cs=0x1a2;eip=0x00202b; 	J(JZ(loc_1206b));	// 3994 jz      short loc_1206B ;~ 01A2:202B
cs=0x1a2;eip=0x00202d; 	T(MOV(eax, *(dd*)(raddr(ds,di+0x20))));	// 3995 mov     eax, [di+20h] ;~ 01A2:202D
cs=0x1a2;eip=0x002031; 	T(ADD(eax, 0x1F));	// 3996 add     eax, 1Fh ;~ 01A2:2031
cs=0x1a2;eip=0x002035; 	T(AND(al, 0x0E0));	// 3997 and     al, 0E0h ;~ 01A2:2035
cs=0x1a2;eip=0x002037; 	T(SHR(eax, 2));	// 3998 shr     eax, 2 ;~ 01A2:2037
cs=0x1a2;eip=0x00203b; 	T(MOV(bx, word_24630));	// 3999 mov     bx, word_24630 ;~ 01A2:203B
cs=0x1a2;eip=0x00203f; 	T(SHL(bx, 2));	// 4000 shl     bx, 2 ;~ 01A2:203F
cs=0x1a2;eip=0x002042; 	T(ADD(ax, bx));	// 4001 add     ax, bx ;~ 01A2:2042
cs=0x1a2;eip=0x002044; 	J(JNC(loc_12056));	// 4002 jnb     short loc_12056 ;~ 01A2:2044
cs=0x1a2;eip=0x002046; 	X(AND(word_24630, 0x0C000));	// 4003 and     word_24630, 0C000h ;~ 01A2:2046
cs=0x1a2;eip=0x00204c; 	X(ADD(word_24630, 0x4000));	// 4004 add     word_24630, 4000h ;~ 01A2:204C
cs=0x1a2;eip=0x002052; 	J(JC(loc_12117));	// 4005 jb      loc_12117 ;~ 01A2:2052
loc_12056:
	// 4648 
cs=0x1a2;eip=0x002056; 	T(MOV(ax, word_24630));	// 4008 mov     ax, word_24630 ;~ 01A2:2056
cs=0x1a2;eip=0x002059; 	T(MOV(bx, ax));	// 4009 mov     bx, ax ;~ 01A2:2059
cs=0x1a2;eip=0x00205b; 	T(AND(bx, 0x0C000));	// 4010 and     bx, 0C000h ;~ 01A2:205B
cs=0x1a2;eip=0x00205f; 	T(AND(ax, 0x3FFF));	// 4011 and     ax, 3FFFh ;~ 01A2:205F
cs=0x1a2;eip=0x002062; 	T(SHR(ax, 1));	// 4012 shr     ax, 1 ;~ 01A2:2062
cs=0x1a2;eip=0x002064; 	T(OR(ax, bx));	// 4013 or      ax, bx ;~ 01A2:2064
cs=0x1a2;eip=0x002066; 	X(MOV(*(dw*)(raddr(ds,di+0x34)), ax));	// 4014 mov     [di+34h], ax ;~ 01A2:2066
cs=0x1a2;eip=0x002069; 	J(JMP(loc_12071));	// 4015 jmp     short loc_12071 ;~ 01A2:2069
loc_1206b:
	// 4649 
cs=0x1a2;eip=0x00206b; 	T(MOV(ax, word_24630));	// 4019 mov     ax, word_24630 ;~ 01A2:206B
cs=0x1a2;eip=0x00206e; 	X(MOV(*(dw*)(raddr(ds,di+0x34)), ax));	// 4020 mov     [di+34h], ax ;~ 01A2:206E
loc_12071:
	// 4650 
cs=0x1a2;eip=0x002071; 	T(MOV(ecx, *(dd*)(raddr(ds,di+0x20))));	// 4023 mov     ecx, [di+20h] ;~ 01A2:2071
loc_12075:
	// 4651 
cs=0x1a2;eip=0x002075; 	T(CMP(ecx, 0x8000));	// 4026 cmp     ecx, 8000h ;~ 01A2:2075
cs=0x1a2;eip=0x00207c; 	J(JBE(loc_120c4));	// 4027 jbe     short loc_120C4 ;~ 01A2:207C
cs=0x1a2;eip=0x00207e; 	T(SUB(ecx, 0x8000));	// 4028 sub     ecx, 8000h ;~ 01A2:207E
cs=0x1a2;eip=0x002085; 	X(PUSH(ecx));	// 4029 push    ecx ;~ 01A2:2085
cs=0x1a2;eip=0x002087; 	T(MOV(cx, 0x8000));	// 4030 mov     cx, 8000h ;~ 01A2:2087
cs=0x1a2;eip=0x00208a; 	T(MOV(bx, _fhandle_module));	// 4031 mov     bx, _fhandle_module ;~ 01A2:208A
cs=0x1a2;eip=0x00208e; 	T(MOV(ah, 0x3F));	// 4032 mov     ah, 3Fh ; '?' ;~ 01A2:208E
cs=0x1a2;eip=0x002090; 	X(PUSH(di));	// 4033 push    di ;~ 01A2:2090
cs=0x1a2;eip=0x002091; 	X(PUSH(ds));	// 4034 push    ds ;~ 01A2:2091
cs=0x1a2;eip=0x002092; 	T(LDS(dx, _audio_buf_pointer));	// 4035 lds     dx, _audio_buf_pointer ;~ 01A2:2092
cs=0x1a2;eip=0x002096; 	S(_INT(0x21));	// 4036 int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE ;~ 01A2:2096
cs=0x1a2;eip=0x002098; 	X(POP(ds));	// 4039 pop     ds ;~ 01A2:2098
cs=0x1a2;eip=0x002099; 	X(POP(di));	// 4040 pop     di ;~ 01A2:2099
cs=0x1a2;eip=0x00209a; 	X(ADC(word_24662, 0));	// 4041 adc     word_24662, 0 ;~ 01A2:209A
cs=0x1a2;eip=0x00209f; 	T(LES(si, _audio_buf_pointer));	// 4042 les     si, _audio_buf_pointer ;~ 01A2:209F
cs=0x1a2;eip=0x0020a3; 	T(MOV(cx, 0x8000));	// 4044 mov     cx, 8000h ;~ 01A2:20A3
cs=0x1a2;eip=0x0020a6; 	J(CALL(_mod_sub_12220,0));	// 4045 call    _mod_sub_12220 ;~ 01A2:20A6
cs=0x1a2;eip=0x0020a9; 	X(PUSH(di));	// 4046 push    di ;~ 01A2:20A9
cs=0x1a2;eip=0x0020aa; 	T(MOV(cx, 0x8000));	// 4047 mov     cx, 8000h ;~ 01A2:20AA
cs=0x1a2;eip=0x0020ad; 	T(MOV(ax, word_24630));	// 4048 mov     ax, word_24630 ;~ 01A2:20AD
cs=0x1a2;eip=0x0020b0; 	J(CALL(_nongravis_182e7,0));	// 4049 call    _nongravis_182E7 ;~ 01A2:20B0
cs=0x1a2;eip=0x0020b3; 	X(XOR(*(dw*)(((db*)&_audio_buf_pointer)), 0x8000));	// 4050 xor     word ptr _audio_buf_pointer, 8000h ;~ 01A2:20B3
cs=0x1a2;eip=0x0020b9; 	X(ADD(word_24630, 0x800));	// 4051 add     word_24630, 800h ;~ 01A2:20B9
cs=0x1a2;eip=0x0020bf; 	X(POP(di));	// 4052 pop     di ;~ 01A2:20BF
cs=0x1a2;eip=0x0020c0; 	X(POP(ecx));	// 4053 pop     ecx ;~ 01A2:20C0
cs=0x1a2;eip=0x0020c2; 	J(JMP(loc_12075));	// 4054 jmp     short loc_12075 ;~ 01A2:20C2
loc_120c4:
	// 4652 
cs=0x1a2;eip=0x0020c4; 	J(JCXZ(loc_120e7));	// 4058 jcxz    short loc_120E7 ;~ 01A2:20C4
cs=0x1a2;eip=0x0020c6; 	T(MOV(bx, _fhandle_module));	// 4059 mov     bx, _fhandle_module ;~ 01A2:20C6
cs=0x1a2;eip=0x0020ca; 	T(MOV(ah, 0x3F));	// 4060 mov     ah, 3Fh ; '?' ;~ 01A2:20CA
cs=0x1a2;eip=0x0020cc; 	X(PUSH(di));	// 4061 push    di ;~ 01A2:20CC
cs=0x1a2;eip=0x0020cd; 	X(PUSH(cx));	// 4062 push    cx ;~ 01A2:20CD
cs=0x1a2;eip=0x0020ce; 	X(PUSH(ds));	// 4063 push    ds ;~ 01A2:20CE
cs=0x1a2;eip=0x0020cf; 	T(LDS(dx, _audio_buf_pointer));	// 4064 lds     dx, _audio_buf_pointer ;~ 01A2:20CF
cs=0x1a2;eip=0x0020d3; 	S(_INT(0x21));	// 4065 int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE ;~ 01A2:20D3
cs=0x1a2;eip=0x0020d5; 	X(POP(ds));	// 4068 pop     ds ;~ 01A2:20D5
cs=0x1a2;eip=0x0020d6; 	X(POP(cx));	// 4069 pop     cx ;~ 01A2:20D6
cs=0x1a2;eip=0x0020d7; 	X(POP(di));	// 4070 pop     di ;~ 01A2:20D7
cs=0x1a2;eip=0x0020d8; 	X(PUSH(di));	// 4071 push    di ;~ 01A2:20D8
cs=0x1a2;eip=0x0020d9; 	X(ADC(word_24662, 0));	// 4072 adc     word_24662, 0 ;~ 01A2:20D9
cs=0x1a2;eip=0x0020de; 	T(LES(si, _audio_buf_pointer));	// 4073 les     si, _audio_buf_pointer ;~ 01A2:20DE
cs=0x1a2;eip=0x0020e2; 	X(PUSH(cx));	// 4074 push    cx ;~ 01A2:20E2
cs=0x1a2;eip=0x0020e3; 	J(CALL(_mod_sub_12220,0));	// 4075 call    _mod_sub_12220 ;~ 01A2:20E3
cs=0x1a2;eip=0x0020e6; 	X(POP(cx));	// 4076 pop     cx ;~ 01A2:20E6
loc_120e7:
	// 4653 
cs=0x1a2;eip=0x0020e7; 	X(PUSH(cx));	// 4079 push    cx ;~ 01A2:20E7
cs=0x1a2;eip=0x0020e8; 	T(MOV(ax, word_24630));	// 4080 mov     ax, word_24630 ;~ 01A2:20E8
cs=0x1a2;eip=0x0020eb; 	J(CALL(_nongravis_182e7,0));	// 4081 call    _nongravis_182E7 ;~ 01A2:20EB
cs=0x1a2;eip=0x0020ee; 	X(XOR(*(dw*)(((db*)&_audio_buf_pointer)), 0x8000));	// 4082 xor     word ptr _audio_buf_pointer, 8000h ;~ 01A2:20EE
cs=0x1a2;eip=0x0020f4; 	X(POP(ax));	// 4083 pop     ax ;~ 01A2:20F4
cs=0x1a2;eip=0x0020f5; 	T(ADD(ax, 0x21));	// 4084 add     ax, 21h ; '!' ;~ 01A2:20F5
cs=0x1a2;eip=0x0020f8; 	T(AND(al, 0x0E0));	// 4085 and     al, 0E0h ;~ 01A2:20F8
cs=0x1a2;eip=0x0020fa; 	T(SHR(ax, 4));	// 4086 shr     ax, 4 ;~ 01A2:20FA
cs=0x1a2;eip=0x0020fd; 	X(ADD(word_24630, ax));	// 4087 add     word_24630, ax ;~ 01A2:20FD
cs=0x1a2;eip=0x002101; 	X(POP(di));	// 4088 pop     di ;~ 01A2:2101
cs=0x1a2;eip=0x002102; 	X(OR(*(raddr(ds,di+0x3C)), 1));	// 4089 or      byte ptr [di+3Ch], 1 ;~ 01A2:2102
loc_12106:
	// 4654 
cs=0x1a2;eip=0x002106; 	X(POP(cx));	// 4092 pop     cx ;~ 01A2:2106
cs=0x1a2;eip=0x002107; 	T(MOV(dx, word_24630));	// 4093 mov     dx, word_24630 ;~ 01A2:2107
cs=0x1a2;eip=0x00210b; 	T(SHR(dx, 1));	// 4094 shr     dx, 1 ;~ 01A2:210B
cs=0x1a2;eip=0x00210d; 	T(MOV(al, byte_24628));	// 4095 mov     al, byte_24628 ;~ 01A2:210D
cs=0x1a2;eip=0x002110; 	T(SHL(ax, 0x0D));	// 4096 shl     ax, 0Dh ;~ 01A2:2110
cs=0x1a2;eip=0x002113; 	T(CMP(dx, ax));	// 4097 cmp     dx, ax ;~ 01A2:2113
cs=0x1a2;eip=0x002115; 	J(JBE(loc_12123));	// 4098 jbe     short loc_12123 ;~ 01A2:2115
loc_12117:
	// 4655 
cs=0x1a2;eip=0x002117; 	J(CALL(_memfree_18a28,0));	// 4101 call    _memfree_18A28 ;~ 01A2:2117
cs=0x1a2;eip=0x00211a; 	T(MOV(dx, offset(seg003,_anotenoughdramon)));	// 4102 mov     dx, offset _aNotEnoughDramOn ; "Not enough DRAM on UltraSound\r\n" ;~ 01A2:211A
cs=0x1a2;eip=0x00211d; 	T(MOV(ax, 0x0FFFD));	// 4103 mov     ax, 0FFFDh ;~ 01A2:211D
cs=0x1a2;eip=0x002120; 	J(return _group1(m2c::k_lfreaderr, _state););	// 4104 jmp     _lfreaderr ;~ 01A2:2120
loc_12123:
	// 4656 
cs=0x1a2;eip=0x002123; 	T(ADD(di, 0x40));	// 4108 add     di, 40h ; '@' ;~ 01A2:2123
cs=0x1a2;eip=0x002126; 	T(DEC(cx));	// 4109 dec     cx ;~ 01A2:2126
cs=0x1a2;eip=0x002127; 	J(JNZ(loc_11ff7));	// 4110 jnz     loc_11FF7 ;~ 01A2:2127
loc_1212b:
	// 4657 
cs=0x1a2;eip=0x00212b; 	T(CMP(byte_2466e, 1));	// 4113 cmp     byte_2466E, 1 ;~ 01A2:212B
cs=0x1a2;eip=0x002130; 	J(JZ(loc_1212b));	// 4114 jz      short loc_1212B ;~ 01A2:2130
cs=0x1a2;eip=0x002132; 	J(CALL(_memfree_18a28,0));	// 4115 call    _memfree_18A28 ;~ 01A2:2132
cs=0x1a2;eip=0x002135; 	T(MOV(di, offset(seg003,_myout)));	// 4116 mov     di, offset _myout ;~ 01A2:2135
cs=0x1a2;eip=0x002138; 	T(MOV(cx, word_245d2));	// 4117 mov     cx, word_245D2 ;~ 01A2:2138
loc_1213c:
	// 4658 
cs=0x1a2;eip=0x00213c; 	T(TEST(*(raddr(ds,di+0x3C)), 1));	// 4120 test    byte ptr [di+3Ch], 1 ;~ 01A2:213C
cs=0x1a2;eip=0x002140; 	J(JZ(loc_12216));	// 4121 jz      loc_12216 ;~ 01A2:2140
cs=0x1a2;eip=0x002144; 	X(PUSH(cx));	// 4122 push    cx ;~ 01A2:2144
cs=0x1a2;eip=0x002145; 	T(XOR(ax, ax));	// 4123 xor     ax, ax ;~ 01A2:2145
cs=0x1a2;eip=0x002147; 	T(TEST(*(raddr(ds,di+0x3C)), 4));	// 4124 test    byte ptr [di+3Ch], 4 ;~ 01A2:2147
cs=0x1a2;eip=0x00214b; 	J(JNZ(loc_121b9));	// 4125 jnz     short loc_121B9 ;~ 01A2:214B
cs=0x1a2;eip=0x00214d; 	T(TEST(*(raddr(ds,di+0x3C)), 8));	// 4126 test    byte ptr [di+3Ch], 8 ;~ 01A2:214D
cs=0x1a2;eip=0x002151; 	J(JZ(loc_1219e));	// 4127 jz      short loc_1219E ;~ 01A2:2151
cs=0x1a2;eip=0x002153; 	T(MOV(edx, *(dd*)(raddr(ds,di+0x24))));	// 4128 mov     edx, [di+24h] ;~ 01A2:2153
cs=0x1a2;eip=0x002157; 	X(PUSH(edi));	// 4129 push    edi ;~ 01A2:2157
cs=0x1a2;eip=0x002159; 	T(MOVZX(edi, *(dw*)(raddr(ds,di+0x34))));	// 4130 movzx   edi, word ptr [di+34h] ;~ 01A2:2159
cs=0x1a2;eip=0x00215e; 	T(SHL(edi, 4));	// 4131 shl     edi, 4 ;~ 01A2:215E
cs=0x1a2;eip=0x002162; 	T(ADD(edi, edx));	// 4132 add     edi, edx ;~ 01A2:2162
cs=0x1a2;eip=0x002165; 	T(INC(edi));	// 4133 inc     edi ;~ 01A2:2165
cs=0x1a2;eip=0x002167; 	J(CALL(_gravis_17dc6,0));	// 4134 call    _gravis_17DC6 ;~ 01A2:2167
cs=0x1a2;eip=0x00216a; 	X(POP(edi));	// 4135 pop     edi ;~ 01A2:216A
cs=0x1a2;eip=0x00216c; 	T(MOV(edx, *(dd*)(raddr(ds,di+0x2C))));	// 4136 mov     edx, [di+2Ch] ;~ 01A2:216C
cs=0x1a2;eip=0x002170; 	X(PUSH(edi));	// 4137 push    edi ;~ 01A2:2170
cs=0x1a2;eip=0x002172; 	T(MOVZX(edi, *(dw*)(raddr(ds,di+0x34))));	// 4138 movzx   edi, word ptr [di+34h] ;~ 01A2:2172
cs=0x1a2;eip=0x002177; 	T(SHL(edi, 4));	// 4139 shl     edi, 4 ;~ 01A2:2177
cs=0x1a2;eip=0x00217b; 	T(ADD(edi, edx));	// 4140 add     edi, edx ;~ 01A2:217B
cs=0x1a2;eip=0x00217e; 	T(ADD(edi, 2));	// 4141 add     edi, 2 ;~ 01A2:217E
cs=0x1a2;eip=0x002182; 	J(CALL(_gravis_17de8,0));	// 4142 call    _gravis_17DE8 ;~ 01A2:2182
cs=0x1a2;eip=0x002185; 	X(POP(edi));	// 4143 pop     edi ;~ 01A2:2185
cs=0x1a2;eip=0x002187; 	T(MOV(edx, *(dd*)(raddr(ds,di+0x24))));	// 4144 mov     edx, [di+24h] ;~ 01A2:2187
cs=0x1a2;eip=0x00218b; 	X(PUSH(edi));	// 4145 push    edi ;~ 01A2:218B
cs=0x1a2;eip=0x00218d; 	T(MOVZX(edi, *(dw*)(raddr(ds,di+0x34))));	// 4146 movzx   edi, word ptr [di+34h] ;~ 01A2:218D
cs=0x1a2;eip=0x002192; 	T(SHL(edi, 4));	// 4147 shl     edi, 4 ;~ 01A2:2192
cs=0x1a2;eip=0x002196; 	T(ADD(edi, edx));	// 4148 add     edi, edx ;~ 01A2:2196
cs=0x1a2;eip=0x002199; 	J(CALL(_gravis_17dc6,0));	// 4149 call    _gravis_17DC6 ;~ 01A2:2199
cs=0x1a2;eip=0x00219c; 	X(POP(edi));	// 4150 pop     edi ;~ 01A2:219C
loc_1219e:
	// 4659 
cs=0x1a2;eip=0x00219e; 	T(MOV(edx, *(dd*)(raddr(ds,di+0x2C))));	// 4153 mov     edx, [di+2Ch] ;~ 01A2:219E
cs=0x1a2;eip=0x0021a2; 	X(PUSH(edi));	// 4154 push    edi ;~ 01A2:21A2
cs=0x1a2;eip=0x0021a4; 	T(MOVZX(edi, *(dw*)(raddr(ds,di+0x34))));	// 4155 movzx   edi, word ptr [di+34h] ;~ 01A2:21A4
cs=0x1a2;eip=0x0021a9; 	T(SHL(edi, 4));	// 4156 shl     edi, 4 ;~ 01A2:21A9
cs=0x1a2;eip=0x0021ad; 	T(ADD(edi, edx));	// 4157 add     edi, edx ;~ 01A2:21AD
cs=0x1a2;eip=0x0021b0; 	T(INC(edi));	// 4158 inc     edi ;~ 01A2:21B0
cs=0x1a2;eip=0x0021b2; 	J(CALL(_gravis_17de8,0));	// 4159 call    _gravis_17DE8 ;~ 01A2:21B2
cs=0x1a2;eip=0x0021b5; 	X(POP(edi));	// 4160 pop     edi ;~ 01A2:21B5
cs=0x1a2;eip=0x0021b7; 	J(JMP(loc_12215));	// 4161 jmp     short loc_12215 ;~ 01A2:21B7
loc_121b9:
	// 4660 
cs=0x1a2;eip=0x0021b9; 	T(TEST(*(raddr(ds,di+0x3C)), 8));	// 4165 test    byte ptr [di+3Ch], 8 ;~ 01A2:21B9
cs=0x1a2;eip=0x0021bd; 	J(JZ(loc_121ee));	// 4166 jz      short loc_121EE ;~ 01A2:21BD
cs=0x1a2;eip=0x0021bf; 	T(MOV(edx, *(dd*)(raddr(ds,di+0x24))));	// 4167 mov     edx, [di+24h] ;~ 01A2:21BF
cs=0x1a2;eip=0x0021c3; 	T(TEST(*(raddr(ds,di+0x3C)), 0x10));	// 4168 test    byte ptr [di+3Ch], 10h ;~ 01A2:21C3
cs=0x1a2;eip=0x0021c7; 	J(JZ(loc_121cd));	// 4169 jz      short loc_121CD ;~ 01A2:21C7
cs=0x1a2;eip=0x0021c9; 	T(MOV(edx, *(dd*)(raddr(ds,di+0x2C))));	// 4170 mov     edx, [di+2Ch] ;~ 01A2:21C9
loc_121cd:
	// 4661 
cs=0x1a2;eip=0x0021cd; 	X(PUSH(edi));	// 4173 push    edi ;~ 01A2:21CD
cs=0x1a2;eip=0x0021cf; 	T(MOV(bx, *(dw*)(raddr(ds,di+0x34))));	// 4174 mov     bx, [di+34h] ;~ 01A2:21CF
cs=0x1a2;eip=0x0021d2; 	T(MOVZX(edi, bx));	// 4175 movzx   edi, bx ;~ 01A2:21D2
cs=0x1a2;eip=0x0021d6; 	T(AND(di, 0x1FFF));	// 4176 and     di, 1FFFh ;~ 01A2:21D6
cs=0x1a2;eip=0x0021da; 	T(AND(bx, 0x0C000));	// 4177 and     bx, 0C000h ;~ 01A2:21DA
cs=0x1a2;eip=0x0021de; 	T(SHR(bx, 1));	// 4178 shr     bx, 1 ;~ 01A2:21DE
cs=0x1a2;eip=0x0021e0; 	T(OR(di, bx));	// 4179 or      di, bx ;~ 01A2:21E0
cs=0x1a2;eip=0x0021e2; 	T(SHL(edi, 4));	// 4180 shl     edi, 4 ;~ 01A2:21E2
cs=0x1a2;eip=0x0021e6; 	T(ADD(edi, edx));	// 4181 add     edi, edx ;~ 01A2:21E6
cs=0x1a2;eip=0x0021e9; 	J(CALL(_gravis_17e0e,0));	// 4182 call    _gravis_17E0E ;~ 01A2:21E9
cs=0x1a2;eip=0x0021ec; 	X(POP(edi));	// 4183 pop     edi ;~ 01A2:21EC
loc_121ee:
	// 4662 
cs=0x1a2;eip=0x0021ee; 	T(MOV(edx, *(dd*)(raddr(ds,di+0x2C))));	// 4186 mov     edx, [di+2Ch] ;~ 01A2:21EE
cs=0x1a2;eip=0x0021f2; 	X(PUSH(edi));	// 4187 push    edi ;~ 01A2:21F2
cs=0x1a2;eip=0x0021f4; 	T(MOV(bx, *(dw*)(raddr(ds,di+0x34))));	// 4188 mov     bx, [di+34h] ;~ 01A2:21F4
cs=0x1a2;eip=0x0021f7; 	T(MOVZX(edi, bx));	// 4189 movzx   edi, bx ;~ 01A2:21F7
cs=0x1a2;eip=0x0021fb; 	T(AND(di, 0x1FFF));	// 4190 and     di, 1FFFh ;~ 01A2:21FB
cs=0x1a2;eip=0x0021ff; 	T(AND(bx, 0x0C000));	// 4191 and     bx, 0C000h ;~ 01A2:21FF
cs=0x1a2;eip=0x002203; 	T(SHR(bx, 1));	// 4192 shr     bx, 1 ;~ 01A2:2203
cs=0x1a2;eip=0x002205; 	T(OR(di, bx));	// 4193 or      di, bx ;~ 01A2:2205
cs=0x1a2;eip=0x002207; 	T(SHL(edi, 4));	// 4194 shl     edi, 4 ;~ 01A2:2207
cs=0x1a2;eip=0x00220b; 	T(ADD(edi, edx));	// 4195 add     edi, edx ;~ 01A2:220B
cs=0x1a2;eip=0x00220e; 	T(INC(edi));	// 4196 inc     edi ;~ 01A2:220E
cs=0x1a2;eip=0x002210; 	J(CALL(_gravis_17e49,0));	// 4197 call    _gravis_17E49 ;~ 01A2:2210
cs=0x1a2;eip=0x002213; 	X(POP(edi));	// 4198 pop     edi ;~ 01A2:2213
loc_12215:
	// 4663 
cs=0x1a2;eip=0x002215; 	X(POP(cx));	// 4201 pop     cx ;~ 01A2:2215
loc_12216:
	// 4664 
cs=0x1a2;eip=0x002216; 	T(ADD(di, 0x40));	// 4204 add     di, 40h ; '@' ;~ 01A2:2216
cs=0x1a2;eip=0x002219; 	T(DEC(cx));	// 4205 dec     cx ;~ 01A2:2219
cs=0x1a2;eip=0x00221a; 	J(JNZ(loc_1213c));	// 4206 jnz     loc_1213C ;~ 01A2:221A
cs=0x1a2;eip=0x00221e; 	T(CLC);	// 4207 clc ;~ 01A2:221E
locret_1221f:
	// 4665 
cs=0x1a2;eip=0x00221f; 	J(RETN(0));	// 4210 retn ;~ 01A2:221F

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_mod_readfile_11f4e: 	goto _mod_readfile_11f4e;
        case m2c::kloc_11f70: 	goto loc_11f70;
        case m2c::kloc_11fa9: 	goto loc_11fa9;
        case m2c::kloc_11fcb: 	goto loc_11fcb;
        case m2c::kloc_11fd2: 	goto loc_11fd2;
        case m2c::kloc_11fd4: 	goto loc_11fd4;
        case m2c::kloc_11fd6: 	goto loc_11fd6;
        case m2c::kloc_11ff7: 	goto loc_11ff7;
        case m2c::kloc_12027: 	goto loc_12027;
        case m2c::kloc_12056: 	goto loc_12056;
        case m2c::kloc_1206b: 	goto loc_1206b;
        case m2c::kloc_12071: 	goto loc_12071;
        case m2c::kloc_12075: 	goto loc_12075;
        case m2c::kloc_120c4: 	goto loc_120c4;
        case m2c::kloc_120e7: 	goto loc_120e7;
        case m2c::kloc_12106: 	goto loc_12106;
        case m2c::kloc_12117: 	goto loc_12117;
        case m2c::kloc_12123: 	goto loc_12123;
        case m2c::kloc_1212b: 	goto loc_1212b;
        case m2c::kloc_1213c: 	goto loc_1213c;
        case m2c::kloc_1219e: 	goto loc_1219e;
        case m2c::kloc_121b9: 	goto loc_121b9;
        case m2c::kloc_121cd: 	goto loc_121cd;
        case m2c::kloc_121ee: 	goto loc_121ee;
        case m2c::kloc_12215: 	goto loc_12215;
        case m2c::kloc_12216: 	goto loc_12216;
        case m2c::klocret_11fd3: 	goto locret_11fd3;
        case m2c::klocret_1221f: 	goto locret_1221f;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _mod_sub_12220(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _mod_sub_12220:
    _begin:
cs=0x1a2;eip=0x002220; 	T(CMP(byte_24674, 1));	// 4219 cmp     byte_24674, 1 ;~ 01A2:2220
cs=0x1a2;eip=0x002225; 	J(JZ(loc_12228));	// 4220 jz      short loc_12228 ;~ 01A2:2225
cs=0x1a2;eip=0x002227; 	J(RETN(0));	// 4221 retn ;~ 01A2:2227
loc_12228:
	// 4666 
cs=0x1a2;eip=0x002228; 	T(MOV(al, byte_24676));	// 4225 mov     al, byte_24676 ;~ 01A2:2228
cs=0x1a2;eip=0x00222b; 	T(CMP(byte_24675, 0));	// 4226 cmp     byte_24675, 0 ;~ 01A2:222B
cs=0x1a2;eip=0x002230; 	J(JZ(loc_12239));	// 4227 jz      short loc_12239 ;~ 01A2:2230
cs=0x1a2;eip=0x002232; 	X(MOV(byte_24675, 0));	// 4228 mov     byte_24675, 0 ;~ 01A2:2232
cs=0x1a2;eip=0x002237; 	T(XOR(al, al));	// 4229 xor     al, al ;~ 01A2:2237
loc_12239:
	// 4667 
cs=0x1a2;eip=0x002239; 	T(ADD(al, *(raddr(es,si))));	// 4233 add     al, es:[si] ;~ 01A2:2239
cs=0x1a2;eip=0x00223c; 	X(MOV(*(raddr(es,si)), al));	// 4234 mov     es:[si], al ;~ 01A2:223C
cs=0x1a2;eip=0x00223f; 	T(INC(si));	// 4235 inc     si ;~ 01A2:223F
cs=0x1a2;eip=0x002240; 	T(DEC(cx));	// 4236 dec     cx ;~ 01A2:2240
cs=0x1a2;eip=0x002241; 	J(JNZ(loc_12239));	// 4237 jnz     short loc_12239 ;~ 01A2:2241
cs=0x1a2;eip=0x002243; 	X(MOV(byte_24676, al));	// 4238 mov     byte_24676, al ;~ 01A2:2243
cs=0x1a2;eip=0x002246; 	J(RETN(0));	// 4239 retn ;~ 01A2:2246

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_mod_sub_12220: 	goto _mod_sub_12220;
        case m2c::kloc_12228: 	goto loc_12228;
        case m2c::kloc_12239: 	goto loc_12239;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _mod_readfile_12247(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _mod_readfile_12247:
    _begin:
cs=0x1a2;eip=0x002247; 	T(MOV(edi, ecx));	// 4247 mov     edi, ecx ;~ 01A2:2247
cs=0x1a2;eip=0x00224a; 	T(XOR(esi, esi));	// 4248 xor     esi, esi ;~ 01A2:224A
cs=0x1a2;eip=0x00224d; 	T(MOV(bp, es));	// 4249 mov     bp, es ;~ 01A2:224D
loc_1224f:
	// 4668 
cs=0x1a2;eip=0x00224f; 	X(PUSH(dx));	// 4252 push    dx ;~ 01A2:224F
cs=0x1a2;eip=0x002250; 	T(CMP(dx, 0x0FFFF));	// 4253 cmp     dx, 0FFFFh ;~ 01A2:2250
cs=0x1a2;eip=0x002253; 	J(JZ(loc_12262));	// 4254 jz      short loc_12262 ;~ 01A2:2253
cs=0x1a2;eip=0x002255; 	X(PUSH(dx));	// 4255 push    dx ;~ 01A2:2255
cs=0x1a2;eip=0x002256; 	X(PUSH(cx));	// 4256 push    cx ;~ 01A2:2256
cs=0x1a2;eip=0x002257; 	X(PUSH(bx));	// 4257 push    bx ;~ 01A2:2257
cs=0x1a2;eip=0x002258; 	X(PUSH(ax));	// 4258 push    ax ;~ 01A2:2258
cs=0x1a2;eip=0x002259; 	T(MOV(bx, dx));	// 4259 mov     bx, dx ;~ 01A2:2259
cs=0x1a2;eip=0x00225b; 	J(CALL(_ems_mapmem,0));	// 4260 call    _ems_mapmem ;~ 01A2:225B
cs=0x1a2;eip=0x00225e; 	X(POP(ax));	// 4261 pop     ax ;~ 01A2:225E
cs=0x1a2;eip=0x00225f; 	X(POP(bx));	// 4262 pop     bx ;~ 01A2:225F
cs=0x1a2;eip=0x002260; 	X(POP(cx));	// 4263 pop     cx ;~ 01A2:2260
cs=0x1a2;eip=0x002261; 	X(POP(dx));	// 4264 pop     dx ;~ 01A2:2261
loc_12262:
	// 4669 
cs=0x1a2;eip=0x002262; 	T(XOR(dx, dx));	// 4267 xor     dx, dx ;~ 01A2:2262
cs=0x1a2;eip=0x002264; 	T(MOV(ecx, 0x8000));	// 4268 mov     ecx, 8000h ;~ 01A2:2264
cs=0x1a2;eip=0x00226a; 	T(CMP(edi, ecx));	// 4269 cmp     edi, ecx ;~ 01A2:226A
cs=0x1a2;eip=0x00226d; 	J(JA(loc_12271));	// 4270 ja      short loc_12271 ;~ 01A2:226D
cs=0x1a2;eip=0x00226f; 	T(MOV(cx, di));	// 4271 mov     cx, di ;~ 01A2:226F
loc_12271:
	// 4670 
cs=0x1a2;eip=0x002271; 	X(PUSH(bx));	// 4274 push    bx ;~ 01A2:2271
cs=0x1a2;eip=0x002272; 	X(PUSH(esi));	// 4275 push    esi ;~ 01A2:2272
cs=0x1a2;eip=0x002274; 	X(PUSH(edi));	// 4276 push    edi ;~ 01A2:2274
cs=0x1a2;eip=0x002276; 	X(PUSH(bp));	// 4277 push    bp ;~ 01A2:2276
cs=0x1a2;eip=0x002277; 	X(PUSH(es));	// 4278 push    es ;~ 01A2:2277
cs=0x1a2;eip=0x002278; 	X(PUSH(ds));	// 4279 push    ds ;~ 01A2:2278
cs=0x1a2;eip=0x002279; 	T(MOV(ds, bp));	// 4280 mov     ds, bp ;~ 01A2:2279
cs=0x1a2;eip=0x00227b; 	T(MOV(ah, 0x3F));	// 4282 mov     ah, 3Fh ;~ 01A2:227B
cs=0x1a2;eip=0x00227d; 	S(_INT(0x21));	// 4283 int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE ;~ 01A2:227D
cs=0x1a2;eip=0x00227f; 	X(POP(ds));	// 4286 pop     ds ;~ 01A2:227F
cs=0x1a2;eip=0x002280; 	X(PUSHF);	// 4288 pushf ;~ 01A2:2280
cs=0x1a2;eip=0x002281; 	X(PUSH(ax));	// 4289 push    ax ;~ 01A2:2281
cs=0x1a2;eip=0x002282; 	T(OR(ax, ax));	// 4290 or      ax, ax ;~ 01A2:2282
cs=0x1a2;eip=0x002284; 	J(JZ(loc_122b8));	// 4291 jz      short loc_122B8 ;~ 01A2:2284
cs=0x1a2;eip=0x002286; 	X(PUSH(ax));	// 4292 push    ax ;~ 01A2:2286
cs=0x1a2;eip=0x002287; 	X(PUSH(bp));	// 4293 push    bp ;~ 01A2:2287
cs=0x1a2;eip=0x002288; 	T(MOV(es, bp));	// 4294 mov     es, bp ;~ 01A2:2288
cs=0x1a2;eip=0x00228a; 	T(XOR(si, si));	// 4296 xor     si, si ;~ 01A2:228A
cs=0x1a2;eip=0x00228c; 	T(MOV(cx, ax));	// 4297 mov     cx, ax ;~ 01A2:228C
cs=0x1a2;eip=0x00228e; 	J(CALL(_mod_sub_12220,0));	// 4298 call    _mod_sub_12220 ;~ 01A2:228E
cs=0x1a2;eip=0x002291; 	X(POP(bp));	// 4299 pop     bp ;~ 01A2:2291
cs=0x1a2;eip=0x002292; 	X(POP(ax));	// 4300 pop     ax ;~ 01A2:2292
cs=0x1a2;eip=0x002293; 	T(CMP(byte_24673, 0));	// 4301 cmp     byte_24673, 0 ;~ 01A2:2293
cs=0x1a2;eip=0x002298; 	J(JZ(loc_122b8));	// 4302 jz      short loc_122B8 ;~ 01A2:2298
cs=0x1a2;eip=0x00229a; 	T(MOV(fs, bp));	// 4303 mov     fs, bp ;~ 01A2:229A
cs=0x1a2;eip=0x00229c; 	T(MOV(cx, ax));	// 4305 mov     cx, ax ;~ 01A2:229C
cs=0x1a2;eip=0x00229e; 	T(ADD(cx, 3));	// 4306 add     cx, 3 ;~ 01A2:229E
cs=0x1a2;eip=0x0022a1; 	T(SHR(cx, 2));	// 4307 shr     cx, 2 ;~ 01A2:22A1
cs=0x1a2;eip=0x0022a4; 	J(JZ(loc_122b8));	// 4308 jz      short loc_122B8 ;~ 01A2:22A4
cs=0x1a2;eip=0x0022a6; 	T(MOV(edx, 0x80808080));	// 4309 mov     edx, 80808080h ;~ 01A2:22A6
cs=0x1a2;eip=0x0022ac; 	T(XOR(si, si));	// 4310 xor     si, si ;~ 01A2:22AC
loc_122ae:
	// 4671 
cs=0x1a2;eip=0x0022ae; 	X(XOR(*(dd*)(raddr(fs,si)), edx));	// 4313 xor     fs:[si], edx ;~ 01A2:22AE
cs=0x1a2;eip=0x0022b2; 	T(ADD(si, 4));	// 4314 add     si, 4 ;~ 01A2:22B2
cs=0x1a2;eip=0x0022b5; 	T(DEC(cx));	// 4315 dec     cx ;~ 01A2:22B5
cs=0x1a2;eip=0x0022b6; 	J(JNZ(loc_122ae));	// 4316 jnz     short loc_122AE ;~ 01A2:22B6
loc_122b8:
	// 4672 
cs=0x1a2;eip=0x0022b8; 	X(POP(ax));	// 4320 pop     ax ;~ 01A2:22B8
cs=0x1a2;eip=0x0022b9; 	X(POPF);	// 4321 popf ;~ 01A2:22B9
cs=0x1a2;eip=0x0022ba; 	X(POP(es));	// 4322 pop     es ;~ 01A2:22BA
cs=0x1a2;eip=0x0022bb; 	X(POP(bp));	// 4323 pop     bp ;~ 01A2:22BB
cs=0x1a2;eip=0x0022bc; 	X(POP(edi));	// 4324 pop     edi ;~ 01A2:22BC
cs=0x1a2;eip=0x0022be; 	X(POP(esi));	// 4325 pop     esi ;~ 01A2:22BE
cs=0x1a2;eip=0x0022c0; 	X(POP(bx));	// 4326 pop     bx ;~ 01A2:22C0
cs=0x1a2;eip=0x0022c1; 	X(POP(dx));	// 4327 pop     dx ;~ 01A2:22C1
cs=0x1a2;eip=0x0022c2; 	J(JC(locret_122e7));	// 4328 jb      short locret_122E7 ;~ 01A2:22C2
cs=0x1a2;eip=0x0022c4; 	T(OR(ax, ax));	// 4329 or      ax, ax ;~ 01A2:22C4
cs=0x1a2;eip=0x0022c6; 	J(JZ(loc_122e3));	// 4330 jz      short loc_122E3 ;~ 01A2:22C6
cs=0x1a2;eip=0x0022c8; 	T(MOVZX(eax, ax));	// 4331 movzx   eax, ax ;~ 01A2:22C8
cs=0x1a2;eip=0x0022cc; 	T(ADD(esi, eax));	// 4332 add     esi, eax ;~ 01A2:22CC
cs=0x1a2;eip=0x0022cf; 	T(CMP(dx, 0x0FFFF));	// 4333 cmp     dx, 0FFFFh ;~ 01A2:22CF
cs=0x1a2;eip=0x0022d2; 	J(JNZ(loc_122da));	// 4334 jnz     short loc_122DA ;~ 01A2:22D2
cs=0x1a2;eip=0x0022d4; 	T(ADD(bp, 0x800));	// 4335 add     bp, 800h ;~ 01A2:22D4
cs=0x1a2;eip=0x0022d8; 	J(JMP(loc_122dc));	// 4336 jmp     short loc_122DC ;~ 01A2:22D8
loc_122da:
	// 4673 
cs=0x1a2;eip=0x0022da; 	T(INC(dx));	// 4340 inc     dx ;~ 01A2:22DA
cs=0x1a2;eip=0x0022db; 	T(INC(dx));	// 4341 inc     dx ;~ 01A2:22DB
loc_122dc:
	// 4674 
cs=0x1a2;eip=0x0022dc; 	T(SUB(edi, eax));	// 4344 sub     edi, eax ;~ 01A2:22DC
cs=0x1a2;eip=0x0022df; 	J(JA(loc_1224f));	// 4345 ja      loc_1224F ;~ 01A2:22DF
loc_122e3:
	// 4675 
cs=0x1a2;eip=0x0022e3; 	T(MOV(ecx, esi));	// 4348 mov     ecx, esi ;~ 01A2:22E3
cs=0x1a2;eip=0x0022e6; 	T(CLC);	// 4349 clc ;~ 01A2:22E6
locret_122e7:
	// 4676 
cs=0x1a2;eip=0x0022e7; 	J(RETN(0));	// 4352 retn ;~ 01A2:22E7

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_mod_readfile_12247: 	goto _mod_readfile_12247;
        case m2c::kloc_1224f: 	goto loc_1224f;
        case m2c::kloc_12262: 	goto loc_12262;
        case m2c::kloc_12271: 	goto loc_12271;
        case m2c::kloc_122ae: 	goto loc_122ae;
        case m2c::kloc_122b8: 	goto loc_122b8;
        case m2c::kloc_122da: 	goto loc_122da;
        case m2c::kloc_122dc: 	goto loc_122dc;
        case m2c::kloc_122e3: 	goto loc_122e3;
        case m2c::klocret_122e7: 	goto locret_122e7;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _ems_mapmemx(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _ems_mapmemx:
    _begin:
cs=0x1a2;eip=0x0022e8; 	T(TEST(*(raddr(ds,di+0x3C)), 8));	// 4360 test    byte ptr [di+3Ch], 8 ;~ 01A2:22E8
cs=0x1a2;eip=0x0022ec; 	J(JNZ(loc_12386));	// 4361 jnz     loc_12386 ;~ 01A2:22EC
cs=0x1a2;eip=0x0022f0; 	T(MOV(ecx, *(dd*)(raddr(ds,di+0x2C))));	// 4362 mov     ecx, [di+2Ch] ;~ 01A2:22F0
cs=0x1a2;eip=0x0022f4; 	T(INC(ecx));	// 4363 inc     ecx ;~ 01A2:22F4
cs=0x1a2;eip=0x0022f6; 	T(MOV(ebx, ecx));	// 4364 mov     ebx, ecx ;~ 01A2:22F6
cs=0x1a2;eip=0x0022f9; 	T(MOV(edx, *(dd*)(raddr(ds,di+0x20))));	// 4365 mov     edx, [di+20h] ;~ 01A2:22F9
cs=0x1a2;eip=0x0022fd; 	T(ADD(edx, 0x800));	// 4366 add     edx, 800h ;~ 01A2:22FD
cs=0x1a2;eip=0x002304; 	T(CMP(*(dw*)(raddr(ds,di+0x32)), 0x0FFFF));	// 4367 cmp     word ptr [di+32h], 0FFFFh ;~ 01A2:2304
cs=0x1a2;eip=0x002308; 	J(JZ(loc_1234e));	// 4368 jz      short loc_1234E ;~ 01A2:2308
cs=0x1a2;eip=0x00230a; 	X(PUSH(eax));	// 4369 push    eax ;~ 01A2:230A
cs=0x1a2;eip=0x00230c; 	X(PUSH(ecx));	// 4370 push    ecx ;~ 01A2:230C
cs=0x1a2;eip=0x00230e; 	X(PUSH(edx));	// 4371 push    edx ;~ 01A2:230E
cs=0x1a2;eip=0x002310; 	T(SHR(ebx, 0x0E));	// 4372 shr     ebx, 0Eh ;~ 01A2:2310
cs=0x1a2;eip=0x002314; 	T(ADD(bx, *(dw*)(raddr(ds,di+0x32))));	// 4373 add     bx, [di+32h] ;~ 01A2:2314
cs=0x1a2;eip=0x002317; 	J(CALL(_ems_mapmem,0));	// 4374 call    _ems_mapmem ;~ 01A2:2317
cs=0x1a2;eip=0x00231a; 	X(POP(edx));	// 4375 pop     edx ;~ 01A2:231A
cs=0x1a2;eip=0x00231c; 	X(POP(ecx));	// 4376 pop     ecx ;~ 01A2:231C
cs=0x1a2;eip=0x00231e; 	X(POP(eax));	// 4377 pop     eax ;~ 01A2:231E
cs=0x1a2;eip=0x002320; 	X(PUSH(eax));	// 4378 push    eax ;~ 01A2:2320
cs=0x1a2;eip=0x002322; 	X(PUSH(ecx));	// 4379 push    ecx ;~ 01A2:2322
cs=0x1a2;eip=0x002324; 	X(PUSH(edx));	// 4380 push    edx ;~ 01A2:2324
cs=0x1a2;eip=0x002326; 	T(MOV(ebx, edx));	// 4381 mov     ebx, edx ;~ 01A2:2326
cs=0x1a2;eip=0x002329; 	T(SHR(ebx, 0x0E));	// 4382 shr     ebx, 0Eh ;~ 01A2:2329
cs=0x1a2;eip=0x00232d; 	T(ADD(bx, *(dw*)(raddr(ds,di+0x32))));	// 4383 add     bx, [di+32h] ;~ 01A2:232D
cs=0x1a2;eip=0x002330; 	J(CALL(_ems_mapmem2,0));	// 4384 call    _ems_mapmem2 ;~ 01A2:2330
cs=0x1a2;eip=0x002333; 	X(POP(edx));	// 4385 pop     edx ;~ 01A2:2333
cs=0x1a2;eip=0x002335; 	X(POP(ecx));	// 4386 pop     ecx ;~ 01A2:2335
cs=0x1a2;eip=0x002337; 	X(POP(eax));	// 4387 pop     eax ;~ 01A2:2337
cs=0x1a2;eip=0x002339; 	T(AND(ecx, 0x3FFF));	// 4388 and     ecx, 3FFFh ;~ 01A2:2339
cs=0x1a2;eip=0x002340; 	T(AND(edx, 0x3FFF));	// 4389 and     edx, 3FFFh ;~ 01A2:2340
cs=0x1a2;eip=0x002347; 	T(ADD(edx, 0x8000));	// 4390 add     edx, 8000h ;~ 01A2:2347
loc_1234e:
	// 4677 
cs=0x1a2;eip=0x00234e; 	T(MOV(si, dx));	// 4393 mov     si, dx ;~ 01A2:234E
cs=0x1a2;eip=0x002350; 	T(AND(si, 0x0F));	// 4394 and     si, 0Fh ;~ 01A2:2350
cs=0x1a2;eip=0x002353; 	T(SHR(edx, 4));	// 4395 shr     edx, 4 ;~ 01A2:2353
cs=0x1a2;eip=0x002357; 	T(ADD(dx, ax));	// 4396 add     dx, ax ;~ 01A2:2357
cs=0x1a2;eip=0x002359; 	T(MOV(fs, dx));	// 4397 mov     fs, dx ;~ 01A2:2359
cs=0x1a2;eip=0x00235b; 	T(MOV(di, cx));	// 4398 mov     di, cx ;~ 01A2:235B
cs=0x1a2;eip=0x00235d; 	T(AND(di, 0x0F));	// 4399 and     di, 0Fh ;~ 01A2:235D
cs=0x1a2;eip=0x002360; 	T(SHR(ecx, 4));	// 4400 shr     ecx, 4 ;~ 01A2:2360
cs=0x1a2;eip=0x002364; 	T(ADD(cx, ax));	// 4401 add     cx, ax ;~ 01A2:2364
cs=0x1a2;eip=0x002366; 	T(MOV(es, cx));	// 4402 mov     es, cx ;~ 01A2:2366
cs=0x1a2;eip=0x002368; 	T(MOV(cx, 0x200));	// 4404 mov     cx, 200h ;~ 01A2:2368
cs=0x1a2;eip=0x00236b; 	T(CLD);	// 4405 cld ;~ 01A2:236B
loc_1236c:
	// 4678 
cs=0x1a2;eip=0x00236c; 	T(MOV(eax, *(dd*)(raddr(es,di))));	// 4408 mov     eax, es:[di] ;~ 01A2:236C
cs=0x1a2;eip=0x002370; 	X(MOV(*(dd*)(raddr(fs,si)), eax));	// 4409 mov     fs:[si], eax ;~ 01A2:2370
cs=0x1a2;eip=0x002374; 	X(MOV(*(dd*)(raddr(es,di)), 0));	// 4410 mov     dword ptr es:[di], 0 ;~ 01A2:2374
cs=0x1a2;eip=0x00237c; 	T(ADD(si, 4));	// 4411 add     si, 4 ;~ 01A2:237C
cs=0x1a2;eip=0x00237f; 	T(ADD(di, 4));	// 4412 add     di, 4 ;~ 01A2:237F
cs=0x1a2;eip=0x002382; 	T(DEC(cx));	// 4413 dec     cx ;~ 01A2:2382
cs=0x1a2;eip=0x002383; 	J(JNZ(loc_1236c));	// 4414 jnz     short loc_1236C ;~ 01A2:2383
cs=0x1a2;eip=0x002385; 	J(RETN(0));	// 4415 retn ;~ 01A2:2385
loc_12386:
	// 4679 
cs=0x1a2;eip=0x002386; 	X(PUSH(ax));	// 4419 push    ax ;~ 01A2:2386
cs=0x1a2;eip=0x002387; 	X(PUSH(di));	// 4420 push    di ;~ 01A2:2387
cs=0x1a2;eip=0x002388; 	T(MOV(ecx, *(dd*)(raddr(ds,di+0x2C))));	// 4421 mov     ecx, [di+2Ch] ;~ 01A2:2388
cs=0x1a2;eip=0x00238c; 	T(INC(ecx));	// 4422 inc     ecx ;~ 01A2:238C
cs=0x1a2;eip=0x00238e; 	T(MOV(ebx, ecx));	// 4423 mov     ebx, ecx ;~ 01A2:238E
cs=0x1a2;eip=0x002391; 	T(CMP(*(dw*)(raddr(ds,di+0x32)), 0x0FFFF));	// 4424 cmp     word ptr [di+32h], 0FFFFh ;~ 01A2:2391
cs=0x1a2;eip=0x002395; 	J(JZ(loc_123b0));	// 4425 jz      short loc_123B0 ;~ 01A2:2395
cs=0x1a2;eip=0x002397; 	X(PUSH(ecx));	// 4426 push    ecx ;~ 01A2:2397
cs=0x1a2;eip=0x002399; 	X(PUSH(eax));	// 4427 push    eax ;~ 01A2:2399
cs=0x1a2;eip=0x00239b; 	T(SHR(ebx, 0x0E));	// 4428 shr     ebx, 0Eh ;~ 01A2:239B
cs=0x1a2;eip=0x00239f; 	T(ADD(bx, *(dw*)(raddr(ds,di+0x32))));	// 4429 add     bx, [di+32h] ;~ 01A2:239F
cs=0x1a2;eip=0x0023a2; 	J(CALL(_ems_mapmem,0));	// 4430 call    _ems_mapmem ;~ 01A2:23A2
cs=0x1a2;eip=0x0023a5; 	X(POP(eax));	// 4431 pop     eax ;~ 01A2:23A5
cs=0x1a2;eip=0x0023a7; 	X(POP(ecx));	// 4432 pop     ecx ;~ 01A2:23A7
cs=0x1a2;eip=0x0023a9; 	T(AND(ecx, 0x3FFF));	// 4433 and     ecx, 3FFFh ;~ 01A2:23A9
loc_123b0:
	// 4680 
cs=0x1a2;eip=0x0023b0; 	T(MOV(si, cx));	// 4436 mov     si, cx ;~ 01A2:23B0
cs=0x1a2;eip=0x0023b2; 	T(AND(si, 0x0F));	// 4437 and     si, 0Fh ;~ 01A2:23B2
cs=0x1a2;eip=0x0023b5; 	T(SHR(ecx, 4));	// 4438 shr     ecx, 4 ;~ 01A2:23B5
cs=0x1a2;eip=0x0023b9; 	T(ADD(cx, ax));	// 4439 add     cx, ax ;~ 01A2:23B9
cs=0x1a2;eip=0x0023bb; 	T(MOV(fs, cx));	// 4440 mov     fs, cx ;~ 01A2:23BB
cs=0x1a2;eip=0x0023bd; 	T(MOV(ecx, *(dd*)(raddr(ds,di+0x20))));	// 4441 mov     ecx, [di+20h] ;~ 01A2:23BD
cs=0x1a2;eip=0x0023c1; 	T(ADD(ecx, 0x800));	// 4442 add     ecx, 800h ;~ 01A2:23C1
cs=0x1a2;eip=0x0023c8; 	T(MOV(ebx, ecx));	// 4443 mov     ebx, ecx ;~ 01A2:23C8
cs=0x1a2;eip=0x0023cb; 	T(CMP(*(dw*)(raddr(ds,di+0x32)), 0x0FFFF));	// 4444 cmp     word ptr [di+32h], 0FFFFh ;~ 01A2:23CB
cs=0x1a2;eip=0x0023cf; 	J(JZ(loc_123ee));	// 4445 jz      short loc_123EE ;~ 01A2:23CF
cs=0x1a2;eip=0x0023d1; 	X(PUSH(ecx));	// 4446 push    ecx ;~ 01A2:23D1
cs=0x1a2;eip=0x0023d3; 	X(PUSH(eax));	// 4447 push    eax ;~ 01A2:23D3
cs=0x1a2;eip=0x0023d5; 	T(SHR(ebx, 0x0E));	// 4448 shr     ebx, 0Eh ;~ 01A2:23D5
cs=0x1a2;eip=0x0023d9; 	T(ADD(bx, *(dw*)(raddr(ds,di+0x32))));	// 4449 add     bx, [di+32h] ;~ 01A2:23D9
cs=0x1a2;eip=0x0023dc; 	J(CALL(_ems_mapmem2,0));	// 4450 call    _ems_mapmem2 ;~ 01A2:23DC
cs=0x1a2;eip=0x0023df; 	X(POP(eax));	// 4451 pop     eax ;~ 01A2:23DF
cs=0x1a2;eip=0x0023e1; 	X(POP(ecx));	// 4452 pop     ecx ;~ 01A2:23E1
cs=0x1a2;eip=0x0023e3; 	T(AND(ecx, 0x3FFF));	// 4453 and     ecx, 3FFFh ;~ 01A2:23E3
cs=0x1a2;eip=0x0023ea; 	T(ADD(cx, 0x8000));	// 4454 add     cx, 8000h ;~ 01A2:23EA
loc_123ee:
	// 4681 
cs=0x1a2;eip=0x0023ee; 	T(MOV(bx, cx));	// 4457 mov     bx, cx ;~ 01A2:23EE
cs=0x1a2;eip=0x0023f0; 	T(AND(bx, 0x0F));	// 4458 and     bx, 0Fh ;~ 01A2:23F0
cs=0x1a2;eip=0x0023f3; 	T(SHR(ecx, 4));	// 4459 shr     ecx, 4 ;~ 01A2:23F3
cs=0x1a2;eip=0x0023f7; 	T(ADD(cx, ax));	// 4460 add     cx, ax ;~ 01A2:23F7
cs=0x1a2;eip=0x0023f9; 	T(MOV(es, cx));	// 4461 mov     es, cx ;~ 01A2:23F9
cs=0x1a2;eip=0x0023fb; 	T(MOV(di, bx));	// 4462 mov     di, bx ;~ 01A2:23FB
cs=0x1a2;eip=0x0023fd; 	T(MOV(cx, 0x200));	// 4463 mov     cx, 200h ;~ 01A2:23FD
cs=0x1a2;eip=0x002400; 	T(CLD);	// 4464 cld ;~ 01A2:2400
	// 4465 rep movs dword ptr es:[di], dword ptr fs:[si] ;~ 01A2:2401
cs=0x1a2;eip=0x002401; 	X(	REP MOVS(*(dd*)(raddr(es,di)), *(dd*)(raddr(fs,si)), di, si, 4));	// 4465 rep movs dword ptr es:[di], dword ptr fs:[si] ;~ 01A2:2401
cs=0x1a2;eip=0x002405; 	X(POP(di));	// 4466 pop     di ;~ 01A2:2405
cs=0x1a2;eip=0x002406; 	X(POP(ax));	// 4467 pop     ax ;~ 01A2:2406
cs=0x1a2;eip=0x002407; 	T(MOV(ecx, *(dd*)(raddr(ds,di+0x24))));	// 4468 mov     ecx, [di+24h] ;~ 01A2:2407
cs=0x1a2;eip=0x00240b; 	T(MOV(ebx, ecx));	// 4469 mov     ebx, ecx ;~ 01A2:240B
cs=0x1a2;eip=0x00240e; 	T(CMP(*(dw*)(raddr(ds,di+0x32)), 0x0FFFF));	// 4470 cmp     word ptr [di+32h], 0FFFFh ;~ 01A2:240E
cs=0x1a2;eip=0x002412; 	J(JZ(loc_1242d));	// 4471 jz      short loc_1242D ;~ 01A2:2412
cs=0x1a2;eip=0x002414; 	X(PUSH(ecx));	// 4472 push    ecx ;~ 01A2:2414
cs=0x1a2;eip=0x002416; 	X(PUSH(eax));	// 4473 push    eax ;~ 01A2:2416
cs=0x1a2;eip=0x002418; 	T(SHR(ebx, 0x0E));	// 4474 shr     ebx, 0Eh ;~ 01A2:2418
cs=0x1a2;eip=0x00241c; 	T(ADD(bx, *(dw*)(raddr(ds,di+0x32))));	// 4475 add     bx, [di+32h] ;~ 01A2:241C
cs=0x1a2;eip=0x00241f; 	J(CALL(_ems_mapmem,0));	// 4476 call    _ems_mapmem ;~ 01A2:241F
cs=0x1a2;eip=0x002422; 	X(POP(eax));	// 4477 pop     eax ;~ 01A2:2422
cs=0x1a2;eip=0x002424; 	X(POP(ecx));	// 4478 pop     ecx ;~ 01A2:2424
cs=0x1a2;eip=0x002426; 	T(AND(ecx, 0x3FFF));	// 4479 and     ecx, 3FFFh ;~ 01A2:2426
loc_1242d:
	// 4682 
cs=0x1a2;eip=0x00242d; 	T(MOV(si, cx));	// 4482 mov     si, cx ;~ 01A2:242D
cs=0x1a2;eip=0x00242f; 	T(AND(si, 0x0F));	// 4483 and     si, 0Fh ;~ 01A2:242F
cs=0x1a2;eip=0x002432; 	T(SHR(ecx, 4));	// 4484 shr     ecx, 4 ;~ 01A2:2432
cs=0x1a2;eip=0x002436; 	T(ADD(cx, ax));	// 4485 add     cx, ax ;~ 01A2:2436
cs=0x1a2;eip=0x002438; 	T(MOV(fs, cx));	// 4486 mov     fs, cx ;~ 01A2:2438
cs=0x1a2;eip=0x00243a; 	T(MOV(ecx, *(dd*)(raddr(ds,di+0x2C))));	// 4487 mov     ecx, [di+2Ch] ;~ 01A2:243A
cs=0x1a2;eip=0x00243e; 	T(INC(ecx));	// 4488 inc     ecx ;~ 01A2:243E
cs=0x1a2;eip=0x002440; 	T(MOV(ebx, ecx));	// 4489 mov     ebx, ecx ;~ 01A2:2440
cs=0x1a2;eip=0x002443; 	T(CMP(*(dw*)(raddr(ds,di+0x32)), 0x0FFFF));	// 4490 cmp     word ptr [di+32h], 0FFFFh ;~ 01A2:2443
cs=0x1a2;eip=0x002447; 	J(JZ(loc_12466));	// 4491 jz      short loc_12466 ;~ 01A2:2447
cs=0x1a2;eip=0x002449; 	X(PUSH(ecx));	// 4492 push    ecx ;~ 01A2:2449
cs=0x1a2;eip=0x00244b; 	X(PUSH(eax));	// 4493 push    eax ;~ 01A2:244B
cs=0x1a2;eip=0x00244d; 	T(SHR(ebx, 0x0E));	// 4494 shr     ebx, 0Eh ;~ 01A2:244D
cs=0x1a2;eip=0x002451; 	T(ADD(bx, *(dw*)(raddr(ds,di+0x32))));	// 4495 add     bx, [di+32h] ;~ 01A2:2451
cs=0x1a2;eip=0x002454; 	J(CALL(_ems_mapmem2,0));	// 4496 call    _ems_mapmem2 ;~ 01A2:2454
cs=0x1a2;eip=0x002457; 	X(POP(eax));	// 4497 pop     eax ;~ 01A2:2457
cs=0x1a2;eip=0x002459; 	X(POP(ecx));	// 4498 pop     ecx ;~ 01A2:2459
cs=0x1a2;eip=0x00245b; 	T(AND(ecx, 0x3FFF));	// 4499 and     ecx, 3FFFh ;~ 01A2:245B
cs=0x1a2;eip=0x002462; 	T(ADD(cx, 0x8000));	// 4500 add     cx, 8000h ;~ 01A2:2462
loc_12466:
	// 4683 
cs=0x1a2;eip=0x002466; 	T(MOV(bx, cx));	// 4503 mov     bx, cx ;~ 01A2:2466
cs=0x1a2;eip=0x002468; 	T(AND(bx, 0x0F));	// 4504 and     bx, 0Fh ;~ 01A2:2468
cs=0x1a2;eip=0x00246b; 	T(SHR(ecx, 4));	// 4505 shr     ecx, 4 ;~ 01A2:246B
cs=0x1a2;eip=0x00246f; 	T(ADD(cx, ax));	// 4506 add     cx, ax ;~ 01A2:246F
cs=0x1a2;eip=0x002471; 	T(MOV(es, cx));	// 4507 mov     es, cx ;~ 01A2:2471
cs=0x1a2;eip=0x002473; 	T(CMP(*(dd*)(raddr(ds,di+0x28)), 0x800));	// 4508 cmp     dword ptr [di+28h], 800h ;~ 01A2:2473
cs=0x1a2;eip=0x00247b; 	J(JA(loc_12497));	// 4509 ja      short loc_12497 ;~ 01A2:247B
cs=0x1a2;eip=0x00247d; 	T(MOV(edx, *(dd*)(raddr(ds,di+0x28))));	// 4510 mov     edx, [di+28h] ;~ 01A2:247D
cs=0x1a2;eip=0x002481; 	T(ADD(dx, si));	// 4511 add     dx, si ;~ 01A2:2481
cs=0x1a2;eip=0x002483; 	T(MOV(di, bx));	// 4512 mov     di, bx ;~ 01A2:2483
cs=0x1a2;eip=0x002485; 	T(MOV(bp, si));	// 4513 mov     bp, si ;~ 01A2:2485
cs=0x1a2;eip=0x002487; 	T(MOV(cx, 0x800));	// 4514 mov     cx, 800h ;~ 01A2:2487
cs=0x1a2;eip=0x00248a; 	T(CLD);	// 4515 cld ;~ 01A2:248A
loc_1248b:
	// 4684 
cs=0x1a2;eip=0x00248b; 	X(MOVS(*(raddr(es,di)), *(raddr(fs,si)), di, si, 1));	// 4518 movs    byte ptr es:[di], byte ptr fs:[si] ;~ 01A2:248B
cs=0x1a2;eip=0x00248d; 	T(CMP(si, dx));	// 4519 cmp     si, dx ;~ 01A2:248D
cs=0x1a2;eip=0x00248f; 	J(JC(loc_12493));	// 4520 jb      short loc_12493 ;~ 01A2:248F
cs=0x1a2;eip=0x002491; 	T(MOV(si, bp));	// 4521 mov     si, bp ;~ 01A2:2491
loc_12493:
	// 4685 
cs=0x1a2;eip=0x002493; 	T(DEC(cx));	// 4524 dec     cx ;~ 01A2:2493
cs=0x1a2;eip=0x002494; 	J(JNZ(loc_1248b));	// 4525 jnz     short loc_1248B ;~ 01A2:2494
cs=0x1a2;eip=0x002496; 	J(RETN(0));	// 4526 retn ;~ 01A2:2496
loc_12497:
	// 4686 
cs=0x1a2;eip=0x002497; 	T(MOV(di, bx));	// 4530 mov     di, bx ;~ 01A2:2497
cs=0x1a2;eip=0x002499; 	T(MOV(cx, 0x200));	// 4531 mov     cx, 200h ;~ 01A2:2499
cs=0x1a2;eip=0x00249c; 	T(CLD);	// 4532 cld ;~ 01A2:249C
	// 4533 rep movs dword ptr es:[di], dword ptr fs:[si] ;~ 01A2:249D
cs=0x1a2;eip=0x00249d; 	X(	REP MOVS(*(dd*)(raddr(es,di)), *(dd*)(raddr(fs,si)), di, si, 4));	// 4533 rep movs dword ptr es:[di], dword ptr fs:[si] ;~ 01A2:249D
cs=0x1a2;eip=0x0024a1; 	J(RETN(0));	// 4534 retn ;~ 01A2:24A1

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_ems_mapmemx: 	goto _ems_mapmemx;
        case m2c::kloc_1234e: 	goto loc_1234e;
        case m2c::kloc_1236c: 	goto loc_1236c;
        case m2c::kloc_12386: 	goto loc_12386;
        case m2c::kloc_123b0: 	goto loc_123b0;
        case m2c::kloc_123ee: 	goto loc_123ee;
        case m2c::kloc_1242d: 	goto loc_1242d;
        case m2c::kloc_12466: 	goto loc_12466;
        case m2c::kloc_1248b: 	goto loc_1248b;
        case m2c::kloc_12493: 	goto loc_12493;
        case m2c::kloc_12497: 	goto loc_12497;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _ems_mapmemy(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _ems_mapmemy:
    _begin:
cs=0x1a2;eip=0x0024a2; 	T(TEST(*(raddr(ds,di+0x3C)), 8));	// 4542 test    byte ptr [di+3Ch], 8 ;~ 01A2:24A2
cs=0x1a2;eip=0x0024a6; 	J(JNZ(loc_1253b));	// 4543 jnz     loc_1253B ;~ 01A2:24A6
cs=0x1a2;eip=0x0024aa; 	T(MOV(ecx, *(dd*)(raddr(ds,di+0x2C))));	// 4544 mov     ecx, [di+2Ch] ;~ 01A2:24AA
cs=0x1a2;eip=0x0024ae; 	T(INC(ecx));	// 4545 inc     ecx ;~ 01A2:24AE
cs=0x1a2;eip=0x0024b0; 	T(MOV(ebx, ecx));	// 4546 mov     ebx, ecx ;~ 01A2:24B0
cs=0x1a2;eip=0x0024b3; 	T(MOV(edx, *(dd*)(raddr(ds,di+0x20))));	// 4547 mov     edx, [di+20h] ;~ 01A2:24B3
cs=0x1a2;eip=0x0024b7; 	T(ADD(edx, 0x800));	// 4548 add     edx, 800h ;~ 01A2:24B7
cs=0x1a2;eip=0x0024be; 	T(CMP(*(dw*)(raddr(ds,di+0x32)), 0x0FFFF));	// 4549 cmp     word ptr [di+32h], 0FFFFh ;~ 01A2:24BE
cs=0x1a2;eip=0x0024c2; 	J(JZ(loc_12508));	// 4550 jz      short loc_12508 ;~ 01A2:24C2
cs=0x1a2;eip=0x0024c4; 	X(PUSH(eax));	// 4551 push    eax ;~ 01A2:24C4
cs=0x1a2;eip=0x0024c6; 	X(PUSH(ecx));	// 4552 push    ecx ;~ 01A2:24C6
cs=0x1a2;eip=0x0024c8; 	X(PUSH(edx));	// 4553 push    edx ;~ 01A2:24C8
cs=0x1a2;eip=0x0024ca; 	T(SHR(ebx, 0x0E));	// 4554 shr     ebx, 0Eh ;~ 01A2:24CA
cs=0x1a2;eip=0x0024ce; 	T(ADD(bx, *(dw*)(raddr(ds,di+0x32))));	// 4555 add     bx, [di+32h] ;~ 01A2:24CE
cs=0x1a2;eip=0x0024d1; 	J(CALL(_ems_mapmem,0));	// 4556 call    _ems_mapmem ;~ 01A2:24D1
cs=0x1a2;eip=0x0024d4; 	X(POP(edx));	// 4557 pop     edx ;~ 01A2:24D4
cs=0x1a2;eip=0x0024d6; 	X(POP(ecx));	// 4558 pop     ecx ;~ 01A2:24D6
cs=0x1a2;eip=0x0024d8; 	X(POP(eax));	// 4559 pop     eax ;~ 01A2:24D8
cs=0x1a2;eip=0x0024da; 	X(PUSH(eax));	// 4560 push    eax ;~ 01A2:24DA
cs=0x1a2;eip=0x0024dc; 	X(PUSH(ecx));	// 4561 push    ecx ;~ 01A2:24DC
cs=0x1a2;eip=0x0024de; 	X(PUSH(edx));	// 4562 push    edx ;~ 01A2:24DE
cs=0x1a2;eip=0x0024e0; 	T(MOV(ebx, edx));	// 4563 mov     ebx, edx ;~ 01A2:24E0
cs=0x1a2;eip=0x0024e3; 	T(SHR(ebx, 0x0E));	// 4564 shr     ebx, 0Eh ;~ 01A2:24E3
cs=0x1a2;eip=0x0024e7; 	T(ADD(bx, *(dw*)(raddr(ds,di+0x32))));	// 4565 add     bx, [di+32h] ;~ 01A2:24E7
cs=0x1a2;eip=0x0024ea; 	J(CALL(_ems_mapmem2,0));	// 4566 call    _ems_mapmem2 ;~ 01A2:24EA
cs=0x1a2;eip=0x0024ed; 	X(POP(edx));	// 4567 pop     edx ;~ 01A2:24ED
cs=0x1a2;eip=0x0024ef; 	X(POP(ecx));	// 4568 pop     ecx ;~ 01A2:24EF
cs=0x1a2;eip=0x0024f1; 	X(POP(eax));	// 4569 pop     eax ;~ 01A2:24F1
cs=0x1a2;eip=0x0024f3; 	T(AND(ecx, 0x3FFF));	// 4570 and     ecx, 3FFFh ;~ 01A2:24F3
cs=0x1a2;eip=0x0024fa; 	T(AND(edx, 0x3FFF));	// 4571 and     edx, 3FFFh ;~ 01A2:24FA
cs=0x1a2;eip=0x002501; 	T(ADD(edx, 0x8000));	// 4572 add     edx, 8000h ;~ 01A2:2501
loc_12508:
	// 4687 
cs=0x1a2;eip=0x002508; 	T(MOV(si, dx));	// 4575 mov     si, dx ;~ 01A2:2508
cs=0x1a2;eip=0x00250a; 	T(AND(si, 0x0F));	// 4576 and     si, 0Fh ;~ 01A2:250A
cs=0x1a2;eip=0x00250d; 	T(SHR(edx, 4));	// 4577 shr     edx, 4 ;~ 01A2:250D
cs=0x1a2;eip=0x002511; 	T(ADD(dx, ax));	// 4578 add     dx, ax ;~ 01A2:2511
cs=0x1a2;eip=0x002513; 	T(MOV(fs, dx));	// 4579 mov     fs, dx ;~ 01A2:2513
cs=0x1a2;eip=0x002515; 	T(MOV(di, cx));	// 4580 mov     di, cx ;~ 01A2:2515
cs=0x1a2;eip=0x002517; 	T(AND(di, 0x0F));	// 4581 and     di, 0Fh ;~ 01A2:2517
cs=0x1a2;eip=0x00251a; 	T(SHR(ecx, 4));	// 4582 shr     ecx, 4 ;~ 01A2:251A
cs=0x1a2;eip=0x00251e; 	T(ADD(cx, ax));	// 4583 add     cx, ax ;~ 01A2:251E
cs=0x1a2;eip=0x002520; 	T(MOV(es, cx));	// 4584 mov     es, cx ;~ 01A2:2520
cs=0x1a2;eip=0x002522; 	T(MOV(cx, 0x200));	// 4585 mov     cx, 200h ;~ 01A2:2522
cs=0x1a2;eip=0x002525; 	T(XOR(eax, eax));	// 4586 xor     eax, eax ;~ 01A2:2525
cs=0x1a2;eip=0x002528; 	T(CLD);	// 4587 cld ;~ 01A2:2528
loc_12529:
	// 4688 
cs=0x1a2;eip=0x002529; 	T(MOV(eax, *(dd*)(raddr(fs,si))));	// 4590 mov     eax, fs:[si] ;~ 01A2:2529
cs=0x1a2;eip=0x00252d; 	X(MOV(*(dd*)(raddr(es,di)), eax));	// 4591 mov     es:[di], eax ;~ 01A2:252D
cs=0x1a2;eip=0x002531; 	T(ADD(si, 4));	// 4592 add     si, 4 ;~ 01A2:2531
cs=0x1a2;eip=0x002534; 	T(ADD(di, 4));	// 4593 add     di, 4 ;~ 01A2:2534
cs=0x1a2;eip=0x002537; 	T(DEC(cx));	// 4594 dec     cx ;~ 01A2:2537
cs=0x1a2;eip=0x002538; 	J(JNZ(loc_12529));	// 4595 jnz     short loc_12529 ;~ 01A2:2538
cs=0x1a2;eip=0x00253a; 	J(RETN(0));	// 4596 retn ;~ 01A2:253A
loc_1253b:
	// 4689 
cs=0x1a2;eip=0x00253b; 	T(MOV(ecx, *(dd*)(raddr(ds,di+0x20))));	// 4600 mov     ecx, [di+20h] ;~ 01A2:253B
cs=0x1a2;eip=0x00253f; 	T(ADD(ecx, 0x800));	// 4601 add     ecx, 800h ;~ 01A2:253F
cs=0x1a2;eip=0x002546; 	T(MOV(ebx, ecx));	// 4602 mov     ebx, ecx ;~ 01A2:2546
cs=0x1a2;eip=0x002549; 	T(CMP(*(dw*)(raddr(ds,di+0x32)), 0x0FFFF));	// 4603 cmp     word ptr [di+32h], 0FFFFh ;~ 01A2:2549
cs=0x1a2;eip=0x00254d; 	J(JZ(loc_12568));	// 4604 jz      short loc_12568 ;~ 01A2:254D
cs=0x1a2;eip=0x00254f; 	X(PUSH(ecx));	// 4605 push    ecx ;~ 01A2:254F
cs=0x1a2;eip=0x002551; 	X(PUSH(eax));	// 4606 push    eax ;~ 01A2:2551
cs=0x1a2;eip=0x002553; 	T(SHR(ebx, 0x0E));	// 4607 shr     ebx, 0Eh ;~ 01A2:2553
cs=0x1a2;eip=0x002557; 	T(ADD(bx, *(dw*)(raddr(ds,di+0x32))));	// 4608 add     bx, [di+32h] ;~ 01A2:2557
cs=0x1a2;eip=0x00255a; 	J(CALL(_ems_mapmem,0));	// 4609 call    _ems_mapmem ;~ 01A2:255A
cs=0x1a2;eip=0x00255d; 	X(POP(eax));	// 4610 pop     eax ;~ 01A2:255D
cs=0x1a2;eip=0x00255f; 	X(POP(ecx));	// 4611 pop     ecx ;~ 01A2:255F
cs=0x1a2;eip=0x002561; 	T(AND(ecx, 0x3FFF));	// 4612 and     ecx, 3FFFh ;~ 01A2:2561
loc_12568:
	// 4690 
cs=0x1a2;eip=0x002568; 	T(MOV(si, cx));	// 4615 mov     si, cx ;~ 01A2:2568
cs=0x1a2;eip=0x00256a; 	T(AND(si, 0x0F));	// 4616 and     si, 0Fh ;~ 01A2:256A
cs=0x1a2;eip=0x00256d; 	T(SHR(ecx, 4));	// 4617 shr     ecx, 4 ;~ 01A2:256D
cs=0x1a2;eip=0x002571; 	T(ADD(cx, ax));	// 4618 add     cx, ax ;~ 01A2:2571
cs=0x1a2;eip=0x002573; 	T(MOV(fs, cx));	// 4619 mov     fs, cx ;~ 01A2:2573
cs=0x1a2;eip=0x002575; 	T(MOV(ecx, *(dd*)(raddr(ds,di+0x2C))));	// 4620 mov     ecx, [di+2Ch] ;~ 01A2:2575
cs=0x1a2;eip=0x002579; 	T(INC(ecx));	// 4621 inc     ecx ;~ 01A2:2579
cs=0x1a2;eip=0x00257b; 	T(MOV(ebx, ecx));	// 4622 mov     ebx, ecx ;~ 01A2:257B
cs=0x1a2;eip=0x00257e; 	T(CMP(*(dw*)(raddr(ds,di+0x32)), 0x0FFFF));	// 4623 cmp     word ptr [di+32h], 0FFFFh ;~ 01A2:257E
cs=0x1a2;eip=0x002582; 	J(JZ(loc_125a1));	// 4624 jz      short loc_125A1 ;~ 01A2:2582
cs=0x1a2;eip=0x002584; 	X(PUSH(ecx));	// 4625 push    ecx ;~ 01A2:2584
cs=0x1a2;eip=0x002586; 	X(PUSH(eax));	// 4626 push    eax ;~ 01A2:2586
cs=0x1a2;eip=0x002588; 	T(SHR(ebx, 0x0E));	// 4627 shr     ebx, 0Eh ;~ 01A2:2588
cs=0x1a2;eip=0x00258c; 	T(ADD(bx, *(dw*)(raddr(ds,di+0x32))));	// 4628 add     bx, [di+32h] ;~ 01A2:258C
cs=0x1a2;eip=0x00258f; 	J(CALL(_ems_mapmem2,0));	// 4629 call    _ems_mapmem2 ;~ 01A2:258F
cs=0x1a2;eip=0x002592; 	X(POP(eax));	// 4630 pop     eax ;~ 01A2:2592
cs=0x1a2;eip=0x002594; 	X(POP(ecx));	// 4631 pop     ecx ;~ 01A2:2594
cs=0x1a2;eip=0x002596; 	T(AND(ecx, 0x3FFF));	// 4632 and     ecx, 3FFFh ;~ 01A2:2596
cs=0x1a2;eip=0x00259d; 	T(ADD(cx, 0x8000));	// 4633 add     cx, 8000h ;~ 01A2:259D
loc_125a1:
	// 4691 
cs=0x1a2;eip=0x0025a1; 	T(MOV(bx, cx));	// 4636 mov     bx, cx ;~ 01A2:25A1
cs=0x1a2;eip=0x0025a3; 	T(AND(bx, 0x0F));	// 4637 and     bx, 0Fh ;~ 01A2:25A3
cs=0x1a2;eip=0x0025a6; 	T(SHR(ecx, 4));	// 4638 shr     ecx, 4 ;~ 01A2:25A6
cs=0x1a2;eip=0x0025aa; 	T(ADD(cx, ax));	// 4639 add     cx, ax ;~ 01A2:25AA
cs=0x1a2;eip=0x0025ac; 	T(MOV(es, cx));	// 4640 mov     es, cx ;~ 01A2:25AC
cs=0x1a2;eip=0x0025ae; 	T(MOV(di, bx));	// 4641 mov     di, bx ;~ 01A2:25AE
cs=0x1a2;eip=0x0025b0; 	T(MOV(cx, 0x200));	// 4642 mov     cx, 200h ;~ 01A2:25B0
cs=0x1a2;eip=0x0025b3; 	T(CLD);	// 4643 cld ;~ 01A2:25B3
	// 4644 rep movs dword ptr es:[di], dword ptr fs:[si] ;~ 01A2:25B4
cs=0x1a2;eip=0x0025b4; 	X(	REP MOVS(*(dd*)(raddr(es,di)), *(dd*)(raddr(fs,si)), di, si, 4));	// 4644 rep movs dword ptr es:[di], dword ptr fs:[si] ;~ 01A2:25B4
cs=0x1a2;eip=0x0025b8; 	J(RETN(0));	// 4645 retn ;~ 01A2:25B8

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_ems_mapmemy: 	goto _ems_mapmemy;
        case m2c::kloc_12508: 	goto loc_12508;
        case m2c::kloc_12529: 	goto loc_12529;
        case m2c::kloc_1253b: 	goto loc_1253b;
        case m2c::kloc_12568: 	goto loc_12568;
        case m2c::kloc_125a1: 	goto loc_125a1;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _deinit_125b9(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _deinit_125b9:
    _begin:
cs=0x1a2;eip=0x0025b9; 	X(PUSHF);	// 4654 pushf ;~ 01A2:25B9
cs=0x1a2;eip=0x0025ba; 	X(PUSH(ds));	// 4655 push    ds ;~ 01A2:25BA
cs=0x1a2;eip=0x0025bb; 	T(MOV(ax, seg_offset(seg003)));	// 4656 mov     ax, seg seg003 ;~ 01A2:25BB
cs=0x1a2;eip=0x0025be; 	T(MOV(ds, ax));	// 4657 mov     ds, ax ;~ 01A2:25BE
cs=0x1a2;eip=0x0025c0; 	X(PUSH(cs));	// 4658 push    cs ;~ 01A2:25C0
cs=0x1a2;eip=0x0025c1; 	J(CALL(_snd_offx,0));	// 4659 call    near ptr _snd_offx ;~ 01A2:25C1
cs=0x1a2;eip=0x0025c4; 	X(PUSH(cs));	// 4660 push    cs ;~ 01A2:25C4
cs=0x1a2;eip=0x0025c5; 	J(CALL(_memfree_125da,0));	// 4661 call    near ptr _memfree_125DA ;~ 01A2:25C5
cs=0x1a2;eip=0x0025c8; 	J(CALL(_ems_deinit,0));	// 4662 call    _ems_deinit ;~ 01A2:25C8
cs=0x1a2;eip=0x0025cb; 	T(MOV(ax, word_2460c));	// 4663 mov     ax, word_2460C ;~ 01A2:25CB
cs=0x1a2;eip=0x0025ce; 	J(CALL(_setmemallocstrat,0));	// 4664 call    _setmemallocstrat ;~ 01A2:25CE
cs=0x1a2;eip=0x0025d1; 	J(CALL(_snd_deinit,0));	// 4665 call    _snd_deinit ;~ 01A2:25D1
cs=0x1a2;eip=0x0025d4; 	J(CALL(_initclockfromrtc,0));	// 4666 call    _initclockfromrtc ;~ 01A2:25D4
cs=0x1a2;eip=0x0025d7; 	X(POP(ds));	// 4667 pop     ds ;~ 01A2:25D7
cs=0x1a2;eip=0x0025d8; 	X(POPF);	// 4668 popf ;~ 01A2:25D8
cs=0x1a2;eip=0x0025d9; 	J(RETF(0));	// 4669 retf ;~ 01A2:25D9

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_deinit_125b9: 	goto _deinit_125b9;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _memfree_125da(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _memfree_125da:
    _begin:
cs=0x1a2;eip=0x0025da; 	X(PUSH(ds));	// 4679 push    ds ;~ 01A2:25DA
cs=0x1a2;eip=0x0025db; 	T(MOV(ax, seg_offset(seg003)));	// 4680 mov     ax, seg seg003 ;~ 01A2:25DB
cs=0x1a2;eip=0x0025de; 	T(MOV(ds, ax));	// 4681 mov     ds, ax ;~ 01A2:25DE
cs=0x1a2;eip=0x0025e0; 	J(CALL(_ems_realloc,0));	// 4683 call    _ems_realloc ;~ 01A2:25E0
cs=0x1a2;eip=0x0025e3; 	T(CMP(*(dw*)(((db*)&dword_24640)+2), 0));	// 4684 cmp     word ptr dword_24640+2, 0 ;~ 01A2:25E3
cs=0x1a2;eip=0x0025e8; 	J(JZ(loc_125f6));	// 4685 jz      short loc_125F6 ;~ 01A2:25E8
cs=0x1a2;eip=0x0025ea; 	J(CALL(_memfree_18a28,0));	// 4686 call    _memfree_18A28 ;~ 01A2:25EA
cs=0x1a2;eip=0x0025ed; 	X(MOV(dword_24640, 0));	// 4687 mov     dword_24640, 0 ;~ 01A2:25ED
loc_125f6:
	// 4692 
cs=0x1a2;eip=0x0025f6; 	T(CMP(byte_24665, 1));	// 4690 cmp     byte_24665, 1 ;~ 01A2:25F6
cs=0x1a2;eip=0x0025fb; 	J(JNZ(loc_1265b));	// 4691 jnz     short loc_1265B ;~ 01A2:25FB
cs=0x1a2;eip=0x0025fd; 	T(TEST(_sndflags_24622, 4));	// 4692 test    _sndflags_24622, 4 ;~ 01A2:25FD
cs=0x1a2;eip=0x002602; 	J(JNZ(loc_1263d));	// 4693 jnz     short loc_1263D ;~ 01A2:2602
cs=0x1a2;eip=0x002604; 	T(TEST(_sndflags_24622, 0x10));	// 4694 test    _sndflags_24622, 10h ;~ 01A2:2604
cs=0x1a2;eip=0x002609; 	J(JNZ(loc_1263d));	// 4695 jnz     short loc_1263D ;~ 01A2:2609
cs=0x1a2;eip=0x00260b; 	T(MOV(di, offset(seg003,_myout)));	// 4696 mov     di, offset _myout ;~ 01A2:260B
cs=0x1a2;eip=0x00260e; 	T(MOV(cx, word_245d2));	// 4697 mov     cx, word_245D2 ;~ 01A2:260E
loc_12612:
	// 4693 
cs=0x1a2;eip=0x002612; 	X(PUSH(cx));	// 4700 push    cx ;~ 01A2:2612
cs=0x1a2;eip=0x002613; 	T(TEST(*(raddr(ds,di+0x3C)), 1));	// 4701 test    byte ptr [di+3Ch], 1 ;~ 01A2:2613
cs=0x1a2;eip=0x002617; 	J(JZ(loc_12636));	// 4702 jz      short loc_12636 ;~ 01A2:2617
cs=0x1a2;eip=0x002619; 	T(CMP(*(dw*)(raddr(ds,di+0x32)), 0x0FFFF));	// 4703 cmp     word ptr [di+32h], 0FFFFh ;~ 01A2:2619
cs=0x1a2;eip=0x00261d; 	J(JNZ(loc_12636));	// 4704 jnz     short loc_12636 ;~ 01A2:261D
cs=0x1a2;eip=0x00261f; 	T(CMP(*(dw*)(raddr(ds,di+0x30)), 0));	// 4705 cmp     word ptr [di+30h], 0 ;~ 01A2:261F
cs=0x1a2;eip=0x002623; 	J(JZ(loc_12636));	// 4706 jz      short loc_12636 ;~ 01A2:2623
cs=0x1a2;eip=0x002625; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x30))));	// 4707 mov     ax, [di+30h] ;~ 01A2:2625
cs=0x1a2;eip=0x002628; 	X(PUSH(di));	// 4708 push    di ;~ 01A2:2628
cs=0x1a2;eip=0x002629; 	J(CALL(_memfree,0));	// 4709 call    _memfree ;~ 01A2:2629
cs=0x1a2;eip=0x00262c; 	X(POP(di));	// 4710 pop     di ;~ 01A2:262C
cs=0x1a2;eip=0x00262d; 	X(AND(*(raddr(ds,di+0x3C)), 0x0FE));	// 4711 and     byte ptr [di+3Ch], 0FEh ;~ 01A2:262D
cs=0x1a2;eip=0x002631; 	X(MOV(*(dw*)(raddr(ds,di+0x30)), 0));	// 4712 mov     word ptr [di+30h], 0 ;~ 01A2:2631
loc_12636:
	// 4694 
cs=0x1a2;eip=0x002636; 	X(POP(cx));	// 4716 pop     cx ;~ 01A2:2636
cs=0x1a2;eip=0x002637; 	T(ADD(di, 0x40));	// 4717 add     di, 40h ; '@' ;~ 01A2:2637
cs=0x1a2;eip=0x00263a; 	T(DEC(cx));	// 4718 dec     cx ;~ 01A2:263A
cs=0x1a2;eip=0x00263b; 	J(JNZ(loc_12612));	// 4719 jnz     short loc_12612 ;~ 01A2:263B
loc_1263d:
	// 4695 
cs=0x1a2;eip=0x00263d; 	T(MOV(di, offset(seg003,_segs_table)));	// 4723 mov     di, offset _segs_table ;~ 01A2:263D
cs=0x1a2;eip=0x002640; 	T(MOV(cx, word_245f2));	// 4724 mov     cx, word_245F2 ;~ 01A2:2640
loc_12644:
	// 4696 
cs=0x1a2;eip=0x002644; 	T(MOV(ax, *(dw*)(raddr(ds,di))));	// 4727 mov     ax, [di] ;~ 01A2:2644
cs=0x1a2;eip=0x002646; 	T(OR(ax, ax));	// 4728 or      ax, ax ;~ 01A2:2646
cs=0x1a2;eip=0x002648; 	J(JZ(loc_12655));	// 4729 jz      short loc_12655 ;~ 01A2:2648
cs=0x1a2;eip=0x00264a; 	X(PUSH(cx));	// 4730 push    cx ;~ 01A2:264A
cs=0x1a2;eip=0x00264b; 	X(PUSH(di));	// 4731 push    di ;~ 01A2:264B
cs=0x1a2;eip=0x00264c; 	J(CALL(_memfree,0));	// 4732 call    _memfree ;~ 01A2:264C
cs=0x1a2;eip=0x00264f; 	X(POP(di));	// 4733 pop     di ;~ 01A2:264F
cs=0x1a2;eip=0x002650; 	X(POP(cx));	// 4734 pop     cx ;~ 01A2:2650
cs=0x1a2;eip=0x002651; 	X(MOV(*(dw*)(raddr(ds,di)), 0));	// 4735 mov     word ptr [di], 0 ;~ 01A2:2651
loc_12655:
	// 4697 
cs=0x1a2;eip=0x002655; 	T(ADD(di, 2));	// 4738 add     di, 2 ;~ 01A2:2655
cs=0x1a2;eip=0x002658; 	T(DEC(cx));	// 4739 dec     cx ;~ 01A2:2658
cs=0x1a2;eip=0x002659; 	J(JNZ(loc_12644));	// 4740 jnz     short loc_12644 ;~ 01A2:2659
loc_1265b:
	// 4698 
cs=0x1a2;eip=0x00265b; 	X(POP(ds));	// 4743 pop     ds ;~ 01A2:265B
cs=0x1a2;eip=0x00265c; 	J(RETF(0));	// 4744 retf ;~ 01A2:265C

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_memfree_125da: 	goto _memfree_125da;
        case m2c::kloc_125f6: 	goto loc_125f6;
        case m2c::kloc_12612: 	goto loc_12612;
        case m2c::kloc_12636: 	goto loc_12636;
        case m2c::kloc_1263d: 	goto loc_1263d;
        case m2c::kloc_12644: 	goto loc_12644;
        case m2c::kloc_12655: 	goto loc_12655;
        case m2c::kloc_1265b: 	goto loc_1265b;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1265d(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1265d:
    _begin:
cs=0x1a2;eip=0x00265d; 	T(MOV(ax, seg_offset(seg003)));	// 4754 mov     ax, seg seg003 ;~ 01A2:265D
cs=0x1a2;eip=0x002660; 	T(MOV(es, ax));	// 4755 mov     es, ax ;~ 01A2:2660
cs=0x1a2;eip=0x002662; 	T(MOV(ax, *(dw*)(((db*)&_volume_245fc))));	// 4757 mov     ax, es:_volume_245FC ;~ 01A2:2662
cs=0x1a2;eip=0x002666; 	T(DEC(ax));	// 4758 dec     ax ;~ 01A2:2666
cs=0x1a2;eip=0x002667; 	T(MOV(cl, al));	// 4759 mov     cl, al ;~ 01A2:2667
cs=0x1a2;eip=0x002669; 	T(MOV(si, offset(seg003,_volume_25908)));	// 4760 mov     si, offset _volume_25908 ;~ 01A2:2669
cs=0x1a2;eip=0x00266c; 	T(MOV(di, offset(seg003,out_)));	// 4761 mov     di, offset out_ ; "                                " ;~ 01A2:266C
cs=0x1a2;eip=0x00266f; 	T(MOVZX(bp, *(&_sndcard_type)));	// 4762 movzx   bp, es:_sndcard_type ;~ 01A2:266F
cs=0x1a2;eip=0x002675; 	T(MOV(ch, *(&byte_24666)));	// 4763 mov     ch, es:byte_24666 ;~ 01A2:2675
cs=0x1a2;eip=0x00267a; 	T(MOV(bh, *(&byte_24667)));	// 4764 mov     bh, es:byte_24667 ;~ 01A2:267A
cs=0x1a2;eip=0x00267f; 	T(MOV(dl, *(&_sndflags_24622)));	// 4765 mov     dl, es:_sndflags_24622 ;~ 01A2:267F
cs=0x1a2;eip=0x002684; 	T(MOV(dh, *(&byte_24628)));	// 4766 mov     dh, es:byte_24628 ;~ 01A2:2684
cs=0x1a2;eip=0x002689; 	T(DEC(dh));	// 4767 dec     dh ;~ 01A2:2689
cs=0x1a2;eip=0x00268b; 	T(AND(dh, 3));	// 4768 and     dh, 3 ;~ 01A2:268B
cs=0x1a2;eip=0x00268e; 	T(SHL(dh, 1));	// 4769 shl     dh, 1 ;~ 01A2:268E
cs=0x1a2;eip=0x002690; 	T(OR(dh, *(&byte_24623)));	// 4770 or      dh, es:byte_24623 ;~ 01A2:2690
cs=0x1a2;eip=0x002695; 	T(SHL(dh, 1));	// 4771 shl     dh, 1 ;~ 01A2:2695
cs=0x1a2;eip=0x002697; 	T(OR(dh, *(&byte_24671)));	// 4772 or      dh, es:byte_24671 ;~ 01A2:2697
cs=0x1a2;eip=0x00269c; 	T(SHL(dh, 3));	// 4773 shl     dh, 3 ;~ 01A2:269C
cs=0x1a2;eip=0x00269f; 	T(MOV(al, *(db*)(((db*)&word_245f6))));	// 4774 mov     al, byte ptr es:word_245F6 ;~ 01A2:269F
cs=0x1a2;eip=0x0026a3; 	T(MOV(ah, *(db*)(((db*)&word_245f0))));	// 4775 mov     ah, byte ptr es:word_245F0 ;~ 01A2:26A3
cs=0x1a2;eip=0x0026a8; 	J(RETF(0));	// 4776 retf ;~ 01A2:26A8

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::ksub_1265d: 	goto sub_1265d;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_126a9(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_126a9:
    _begin:
cs=0x1a2;eip=0x0026a9; 	T(MOV(ax, seg_offset(seg003)));	// 4785 mov     ax, seg seg003 ;~ 01A2:26A9
cs=0x1a2;eip=0x0026ac; 	T(MOV(es, ax));	// 4786 mov     es, ax ;~ 01A2:26AC
cs=0x1a2;eip=0x0026ae; 	T(MOV(di, offset(seg003,out_)));	// 4787 mov     di, offset out_ ; "                                " ;~ 01A2:26AE
cs=0x1a2;eip=0x0026b1; 	T(MOV(si, offset(seg003,_myout)));	// 4788 mov     si, offset _myout ;~ 01A2:26B1
cs=0x1a2;eip=0x0026b4; 	T(MOV(bl, *(db*)(((db*)&word_245fa))));	// 4789 mov     bl, byte ptr es:word_245FA ;~ 01A2:26B4
cs=0x1a2;eip=0x0026b9; 	T(MOV(bh, *(db*)(((db*)&word_245d2))));	// 4790 mov     bh, byte ptr es:word_245D2 ;~ 01A2:26B9
cs=0x1a2;eip=0x0026be; 	T(MOV(cl, *(db*)(((db*)&word_245d4))));	// 4791 mov     cl, byte ptr es:word_245D4 ;~ 01A2:26BE
cs=0x1a2;eip=0x0026c3; 	T(MOV(ch, *(&byte_24617)));	// 4792 mov     ch, es:byte_24617 ;~ 01A2:26C3
cs=0x1a2;eip=0x0026c8; 	T(MOV(eax, *(dd*)(((db*)&_module_type_text))));	// 4793 mov     eax, es:_module_type_text ;~ 01A2:26C8
cs=0x1a2;eip=0x0026cd; 	J(RETF(0));	// 4794 retf ;~ 01A2:26CD

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::ksub_126a9: 	goto sub_126a9;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _volume_prep(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _volume_prep:
    _begin:
cs=0x1a2;eip=0x0026ce; 	X(PUSH(ds));	// 4803 push    ds ;~ 01A2:26CE
cs=0x1a2;eip=0x0026cf; 	T(MOV(bx, seg_offset(seg003)));	// 4804 mov     bx, seg seg003 ;~ 01A2:26CF
cs=0x1a2;eip=0x0026d2; 	T(MOV(ds, bx));	// 4805 mov     ds, bx ;~ 01A2:26D2
cs=0x1a2;eip=0x0026d4; 	X(MOV(word_24610, ax));	// 4807 mov     word_24610, ax ;~ 01A2:26D4
cs=0x1a2;eip=0x0026d7; 	X(MOV(_my_size, cx));	// 4808 mov     _my_size, cx ;~ 01A2:26D7
cs=0x1a2;eip=0x0026db; 	T(TEST(_sndflags_24622, 4));	// 4809 test    _sndflags_24622, 4 ;~ 01A2:26DB
cs=0x1a2;eip=0x0026e0; 	J(JNZ(loc_12702));	// 4810 jnz     short loc_12702 ;~ 01A2:26E0
cs=0x1a2;eip=0x0026e2; 	X(PUSH(di));	// 4811 push    di ;~ 01A2:26E2
cs=0x1a2;eip=0x0026e3; 	X(PUSH(es));	// 4812 push    es ;~ 01A2:26E3
cs=0x1a2;eip=0x0026e4; 	J(CALL(_ems_save_mapctx,0));	// 4813 call    _ems_save_mapctx ;~ 01A2:26E4
cs=0x1a2;eip=0x0026e7; 	X(POP(es));	// 4814 pop     es ;~ 01A2:26E7
cs=0x1a2;eip=0x0026e8; 	X(POP(di));	// 4816 pop     di ;~ 01A2:26E8
cs=0x1a2;eip=0x0026e9; 	T(MOV(si, offset(seg003,_volume_25908)));	// 4817 mov     si, offset _volume_25908 ;~ 01A2:26E9
cs=0x1a2;eip=0x0026ec; 	T(MOV(dx, word_245d4));	// 4818 mov     dx, word_245D4 ;~ 01A2:26EC
loc_126f0:
	// 4699 
cs=0x1a2;eip=0x0026f0; 	X(PUSH(dx));	// 4821 push    dx ;~ 01A2:26F0
cs=0x1a2;eip=0x0026f1; 	X(PUSH(si));	// 4822 push    si ;~ 01A2:26F1
cs=0x1a2;eip=0x0026f2; 	J(CALL(_volume_prepare_waves,0));	// 4823 call    _volume_prepare_waves ;~ 01A2:26F2
cs=0x1a2;eip=0x0026f5; 	X(POP(si));	// 4824 pop     si ;~ 01A2:26F5
cs=0x1a2;eip=0x0026f6; 	X(POP(dx));	// 4825 pop     dx ;~ 01A2:26F6
cs=0x1a2;eip=0x0026f7; 	T(ADD(si, 0x50));	// 4826 add     si, 50h ; 'P' ;~ 01A2:26F7
cs=0x1a2;eip=0x0026fa; 	T(DEC(dx));	// 4827 dec     dx ;~ 01A2:26FA
cs=0x1a2;eip=0x0026fb; 	J(JNZ(loc_126f0));	// 4828 jnz     short loc_126F0 ;~ 01A2:26FB
cs=0x1a2;eip=0x0026fd; 	J(CALL(_ems_restore_mapctx,0));	// 4829 call    _ems_restore_mapctx ;~ 01A2:26FD
cs=0x1a2;eip=0x002700; 	X(POP(ds));	// 4830 pop     ds ;~ 01A2:2700
cs=0x1a2;eip=0x002701; 	J(RETF(0));	// 4831 retf ;~ 01A2:2701
loc_12702:
	// 4700 
cs=0x1a2;eip=0x002702; 	X(PUSH(di));	// 4835 push    di ;~ 01A2:2702
cs=0x1a2;eip=0x002703; 	X(PUSH(es));	// 4836 push    es ;~ 01A2:2703
cs=0x1a2;eip=0x002704; 	T(CMP(*(dw*)(((db*)&dword_24640)+2), 0));	// 4837 cmp     word ptr dword_24640+2, 0 ;~ 01A2:2704
cs=0x1a2;eip=0x002709; 	J(JNZ(loc_12721));	// 4838 jnz     short loc_12721 ;~ 01A2:2709
cs=0x1a2;eip=0x00270b; 	T(MOV(eax, 0x800));	// 4839 mov     eax, 800h ;~ 01A2:270B
cs=0x1a2;eip=0x002711; 	T(MOV(cl, _dma_channel_0));	// 4840 mov     cl, _dma_channel_0 ;~ 01A2:2711
cs=0x1a2;eip=0x002715; 	J(CALL(_alloc_dma_buf,0));	// 4841 call    _alloc_dma_buf ;~ 01A2:2715
cs=0x1a2;eip=0x002718; 	X(MOV(*(dw*)(((db*)&dword_24640)+2), ax));	// 4842 mov     word ptr dword_24640+2, ax ;~ 01A2:2718
cs=0x1a2;eip=0x00271b; 	X(MOV(*(dw*)(((db*)&dword_24640)), 0));	// 4843 mov     word ptr dword_24640, 0 ;~ 01A2:271B
loc_12721:
	// 4701 
cs=0x1a2;eip=0x002721; 	T(MOV(ax, ds));	// 4846 mov     ax, ds ;~ 01A2:2721
cs=0x1a2;eip=0x002723; 	T(MOV(es, ax));	// 4847 mov     es, ax ;~ 01A2:2723
cs=0x1a2;eip=0x002725; 	T(CLD);	// 4849 cld ;~ 01A2:2725
cs=0x1a2;eip=0x002726; 	T(MOV(si, offset(seg003,_volume_25908)));	// 4850 mov     si, offset _volume_25908 ;~ 01A2:2726
cs=0x1a2;eip=0x002729; 	T(MOV(cx, word_245d4));	// 4851 mov     cx, word_245D4 ;~ 01A2:2729
loc_1272d:
	// 4702 
cs=0x1a2;eip=0x00272d; 	X(PUSHF);	// 4854 pushf ;~ 01A2:272D
cs=0x1a2;eip=0x00272e; 	T(CLI);	// 4855 cli ;~ 01A2:272E
cs=0x1a2;eip=0x00272f; 	T(MOV(dx, _gravis_port));	// 4856 mov     dx, _gravis_port ;~ 01A2:272F
cs=0x1a2;eip=0x002733; 	T(DEC(dx));	// 4857 dec     dx ;~ 01A2:2733
cs=0x1a2;eip=0x002734; 	T(MOV(al, *(raddr(ds,si+0x18))));	// 4858 mov     al, [si+18h] ;~ 01A2:2734
cs=0x1a2;eip=0x002737; 	S(OUT(dx, al));	// 4859 out     dx, al ;~ 01A2:2737
cs=0x1a2;eip=0x002738; 	T(INC(dx));	// 4860 inc     dx ;~ 01A2:2738
cs=0x1a2;eip=0x002739; 	T(MOV(al, 0x8A));	// 4861 mov     al, 8Ah ; 'Š' ;~ 01A2:2739
cs=0x1a2;eip=0x00273b; 	S(OUT(dx, al));	// 4862 out     dx, al ;~ 01A2:273B
cs=0x1a2;eip=0x00273c; 	T(INC(dx));	// 4863 inc     dx ;~ 01A2:273C
cs=0x1a2;eip=0x00273d; 	S(IN(ax, dx));	// 4864 in      ax, dx ;~ 01A2:273D
cs=0x1a2;eip=0x00273e; 	T(DEC(dx));	// 4865 dec     dx ;~ 01A2:273E
cs=0x1a2;eip=0x00273f; 	T(AND(ah, 0x1F));	// 4866 and     ah, 1Fh ;~ 01A2:273F
cs=0x1a2;eip=0x002742; 	T(SHL(eax, 0x10));	// 4867 shl     eax, 10h ;~ 01A2:2742
cs=0x1a2;eip=0x002746; 	T(MOV(al, 0x8B));	// 4868 mov     al, 8Bh ; '‹' ;~ 01A2:2746
cs=0x1a2;eip=0x002748; 	S(OUT(dx, al));	// 4869 out     dx, al ;~ 01A2:2748
cs=0x1a2;eip=0x002749; 	T(INC(dx));	// 4870 inc     dx ;~ 01A2:2749
cs=0x1a2;eip=0x00274a; 	S(IN(ax, dx));	// 4871 in      ax, dx ;~ 01A2:274A
cs=0x1a2;eip=0x00274b; 	T(DEC(dx));	// 4872 dec     dx ;~ 01A2:274B
cs=0x1a2;eip=0x00274c; 	X(POPF);	// 4873 popf ;~ 01A2:274C
cs=0x1a2;eip=0x00274d; 	X(MOV(*(dd*)(raddr(ds,si+4)), eax));	// 4874 mov     [si+4], eax ;~ 01A2:274D
cs=0x1a2;eip=0x002751; 	T(ADD(si, 0x50));	// 4875 add     si, 50h ; 'P' ;~ 01A2:2751
cs=0x1a2;eip=0x002754; 	T(DEC(cx));	// 4876 dec     cx ;~ 01A2:2754
cs=0x1a2;eip=0x002755; 	J(JNZ(loc_1272d));	// 4877 jnz     short loc_1272D ;~ 01A2:2755
cs=0x1a2;eip=0x002757; 	X(POP(es));	// 4878 pop     es ;~ 01A2:2757
cs=0x1a2;eip=0x002758; 	X(POP(di));	// 4880 pop     di ;~ 01A2:2758
cs=0x1a2;eip=0x002759; 	T(MOV(si, offset(seg003,_volume_25908)));	// 4881 mov     si, offset _volume_25908 ;~ 01A2:2759
cs=0x1a2;eip=0x00275c; 	T(MOV(ax, word_245d4));	// 4882 mov     ax, word_245D4 ;~ 01A2:275C
loc_1275f:
	// 4703 
cs=0x1a2;eip=0x00275f; 	X(PUSH(ax));	// 4885 push    ax ;~ 01A2:275F
cs=0x1a2;eip=0x002760; 	X(PUSH(si));	// 4886 push    si ;~ 01A2:2760
cs=0x1a2;eip=0x002761; 	T(TEST(*(raddr(ds,si+0x17)), 1));	// 4887 test    byte ptr [si+17h], 1 ;~ 01A2:2761
cs=0x1a2;eip=0x002765; 	J(JNZ(loc_1276c));	// 4888 jnz     short loc_1276C ;~ 01A2:2765
cs=0x1a2;eip=0x002767; 	J(CALL(_memclean,0));	// 4889 call    _memclean ;~ 01A2:2767
cs=0x1a2;eip=0x00276a; 	J(JMP(loc_1278f));	// 4890 jmp     short loc_1278F ;~ 01A2:276A
loc_1276c:
	// 4704 
cs=0x1a2;eip=0x00276c; 	T(CMP(byte_2466e, 1));	// 4895 cmp     byte_2466E, 1 ;~ 01A2:276C
cs=0x1a2;eip=0x002771; 	J(JZ(loc_1276c));	// 4896 jz      short loc_1276C ;~ 01A2:2771
cs=0x1a2;eip=0x002773; 	X(PUSH(si));	// 4897 push    si ;~ 01A2:2773
cs=0x1a2;eip=0x002774; 	X(PUSH(di));	// 4898 push    di ;~ 01A2:2774
cs=0x1a2;eip=0x002775; 	X(PUSH(es));	// 4899 push    es ;~ 01A2:2775
cs=0x1a2;eip=0x002776; 	T(MOV(eax, dword_24640));	// 4900 mov     eax, dword_24640 ;~ 01A2:2776
cs=0x1a2;eip=0x00277a; 	J(CALL(sub_1279a,0));	// 4901 call    sub_1279A ;~ 01A2:277A
cs=0x1a2;eip=0x00277d; 	X(POP(es));	// 4902 pop     es ;~ 01A2:277D
cs=0x1a2;eip=0x00277e; 	X(POP(di));	// 4903 pop     di ;~ 01A2:277E
cs=0x1a2;eip=0x00277f; 	X(POP(si));	// 4904 pop     si ;~ 01A2:277F
loc_12780:
	// 4705 
cs=0x1a2;eip=0x002780; 	T(CMP(byte_2466e, 1));	// 4907 cmp     byte_2466E, 1 ;~ 01A2:2780
cs=0x1a2;eip=0x002785; 	J(JZ(loc_12780));	// 4908 jz      short loc_12780 ;~ 01A2:2785
cs=0x1a2;eip=0x002787; 	T(LFS(ax, dword_24640));	// 4909 lfs     ax, dword_24640 ;~ 01A2:2787
cs=0x1a2;eip=0x00278c; 	J(CALL(sub_1281a,0));	// 4910 call    sub_1281A ;~ 01A2:278C
loc_1278f:
	// 4706 
cs=0x1a2;eip=0x00278f; 	X(POP(si));	// 4913 pop     si ;~ 01A2:278F
cs=0x1a2;eip=0x002790; 	X(POP(ax));	// 4914 pop     ax ;~ 01A2:2790
cs=0x1a2;eip=0x002791; 	T(ADD(si, 0x50));	// 4915 add     si, 50h ; 'P' ;~ 01A2:2791
cs=0x1a2;eip=0x002794; 	T(DEC(al));	// 4916 dec     al ;~ 01A2:2794
cs=0x1a2;eip=0x002796; 	J(JNZ(loc_1275f));	// 4917 jnz     short loc_1275F ;~ 01A2:2796
cs=0x1a2;eip=0x002798; 	X(POP(ds));	// 4918 pop     ds ;~ 01A2:2798
cs=0x1a2;eip=0x002799; 	J(RETF(0));	// 4919 retf ;~ 01A2:2799

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_volume_prep: 	goto _volume_prep;
        case m2c::kloc_126f0: 	goto loc_126f0;
        case m2c::kloc_12702: 	goto loc_12702;
        case m2c::kloc_12721: 	goto loc_12721;
        case m2c::kloc_1272d: 	goto loc_1272d;
        case m2c::kloc_1275f: 	goto loc_1275f;
        case m2c::kloc_1276c: 	goto loc_1276c;
        case m2c::kloc_12780: 	goto loc_12780;
        case m2c::kloc_1278f: 	goto loc_1278f;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group2(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group2:
    _begin:
sub_1279a:
	// 4926 
cs=0x1a2;eip=0x00279a; 	X(MOV(_audio_buf_pointer, eax));	// 4927 mov     _audio_buf_pointer, eax ;~ 01A2:279A
cs=0x1a2;eip=0x00279e; 	T(MOV(ax, word_24610));	// 4928 mov     ax, word_24610 ;~ 01A2:279E
cs=0x1a2;eip=0x0027a1; 	T(XOR(ah, ah));	// 4929 xor     ah, ah ;~ 01A2:27A1
cs=0x1a2;eip=0x0027a3; 	T(IMUL2_2(ax,*(dw*)(raddr(ds,si+0x20))));	// 4930 imul    ax, [si+20h] ;~ 01A2:27A3
cs=0x1a2;eip=0x0027a7; 	X(MUL1_2(_my_size));	// 4931 mul     _my_size ;~ 01A2:27A7
cs=0x1a2;eip=0x0027ab; 	T(SHRD(ax, dx, 8));	// 4932 shrd    ax, dx, 8 ;~ 01A2:27AB
cs=0x1a2;eip=0x0027af; 	T(ADD(ax, 0x30));	// 4933 add     ax, 30h ; '0' ;~ 01A2:27AF
cs=0x1a2;eip=0x0027b2; 	T(TEST(word_24610, 0x8000));	// 4934 test    word_24610, 8000h ;~ 01A2:27B2
cs=0x1a2;eip=0x0027b8; 	J(JZ(loc_127bd));	// 4935 jz      short loc_127BD ;~ 01A2:27B8
cs=0x1a2;eip=0x0027ba; 	T(ADD(ax, 0x100));	// 4936 add     ax, 100h ;~ 01A2:27BA
loc_127bd:
	// 4707 
cs=0x1a2;eip=0x0027bd; 	T(TEST(*(raddr(ds,si+0x19)), 4));	// 4939 test    byte ptr [si+19h], 4 ;~ 01A2:27BD
cs=0x1a2;eip=0x0027c1; 	T(SETNZ(cl));	// 4940 setnz   cl ;~ 01A2:27C1
cs=0x1a2;eip=0x0027c4; 	T(SHL(ax, cl));	// 4941 shl     ax, cl ;~ 01A2:27C4
cs=0x1a2;eip=0x0027c6; 	T(CMP(ax, 0x800));	// 4942 cmp     ax, 800h ;~ 01A2:27C6
cs=0x1a2;eip=0x0027c9; 	J(JC(loc_127ce));	// 4943 jb      short loc_127CE ;~ 01A2:27C9
cs=0x1a2;eip=0x0027cb; 	T(MOV(ax, 0x800));	// 4944 mov     ax, 800h ;~ 01A2:27CB
loc_127ce:
	// 4708 
cs=0x1a2;eip=0x0027ce; 	T(MOV(cx, ax));	// 4947 mov     cx, ax ;~ 01A2:27CE
cs=0x1a2;eip=0x0027d0; 	T(MOV(eax, *(dd*)(raddr(ds,si+4))));	// 4948 mov     eax, [si+4] ;~ 01A2:27D0
cs=0x1a2;eip=0x0027d4; 	T(SHR(eax, 0x0D));	// 4949 shr     eax, 0Dh ;~ 01A2:27D4
cs=0x1a2;eip=0x0027d8; 	T(AND(al, 0x0FE));	// 4950 and     al, 0FEh ;~ 01A2:27D8
cs=0x1a2;eip=0x0027da; 	T(TEST(*(raddr(ds,si+0x19)), 4));	// 4951 test    byte ptr [si+19h], 4 ;~ 01A2:27DA
cs=0x1a2;eip=0x0027de; 	J(JZ(sub_182db));	// 4952 jz      sub_182DB ;~ 01A2:27DE
cs=0x1a2;eip=0x0027e2; 	T(MOV(eax, *(dd*)(raddr(ds,si+4))));	// 4953 mov     eax, [si+4] ;~ 01A2:27E2
cs=0x1a2;eip=0x0027e6; 	T(SHR(eax, 0x0D));	// 4954 shr     eax, 0Dh ;~ 01A2:27E6
cs=0x1a2;eip=0x0027ea; 	T(MOV(dx, ax));	// 4955 mov     dx, ax ;~ 01A2:27EA
cs=0x1a2;eip=0x0027ec; 	T(AND(dx, 0x0C000));	// 4956 and     dx, 0C000h ;~ 01A2:27EC
cs=0x1a2;eip=0x0027f0; 	T(AND(ax, 0x1FFF));	// 4957 and     ax, 1FFFh ;~ 01A2:27F0
cs=0x1a2;eip=0x0027f3; 	T(SHL(ax, 1));	// 4958 shl     ax, 1 ;~ 01A2:27F3
cs=0x1a2;eip=0x0027f5; 	T(OR(ax, dx));	// 4959 or      ax, dx ;~ 01A2:27F5
cs=0x1a2;eip=0x0027f7; 	X(PUSH(cx));	// 4960 push    cx ;~ 01A2:27F7
cs=0x1a2;eip=0x0027f8; 	J(CALL(sub_182db,0));	// 4961 call    sub_182DB ;~ 01A2:27F8
cs=0x1a2;eip=0x0027fb; 	X(POP(cx));	// 4962 pop     cx ;~ 01A2:27FB
loc_127fc:
	// 4709 
cs=0x1a2;eip=0x0027fc; 	T(CMP(byte_2466e, 1));	// 4965 cmp     byte_2466E, 1 ;~ 01A2:27FC
cs=0x1a2;eip=0x002801; 	J(JZ(loc_127fc));	// 4966 jz      short loc_127FC ;~ 01A2:2801
cs=0x1a2;eip=0x002803; 	T(SHR(cx, 1));	// 4967 shr     cx, 1 ;~ 01A2:2803
cs=0x1a2;eip=0x002805; 	X(PUSH(ds));	// 4968 push    ds ;~ 01A2:2805
cs=0x1a2;eip=0x002806; 	T(LDS(di, _audio_buf_pointer));	// 4969 lds     di, _audio_buf_pointer ;~ 01A2:2806
cs=0x1a2;eip=0x00280a; 	T(bx = di+1);	// 4970 lea     bx, [di+1] ;~ 01A2:280A
loc_1280d:
	// 4710 
cs=0x1a2;eip=0x00280d; 	T(MOV(al, *(raddr(ds,bx))));	// 4973 mov     al, [bx] ;~ 01A2:280D
cs=0x1a2;eip=0x00280f; 	X(MOV(*(raddr(ds,di)), al));	// 4974 mov     [di], al ;~ 01A2:280F
cs=0x1a2;eip=0x002811; 	T(ADD(bx, 2));	// 4975 add     bx, 2 ;~ 01A2:2811
cs=0x1a2;eip=0x002814; 	T(INC(di));	// 4976 inc     di ;~ 01A2:2814
cs=0x1a2;eip=0x002815; 	T(DEC(cx));	// 4977 dec     cx ;~ 01A2:2815
cs=0x1a2;eip=0x002816; 	J(JNZ(loc_1280d));	// 4978 jnz     short loc_1280D ;~ 01A2:2816
cs=0x1a2;eip=0x002818; 	X(POP(ds));	// 4979 pop     ds ;~ 01A2:2818
cs=0x1a2;eip=0x002819; 	J(RETN(0));	// 4980 retn ;~ 01A2:2819
sub_182db:
	// 17310 
cs=0x1a2;eip=0x0082db; 	X(MOV(_dma_mode, 0x44));	// 17312 mov     _dma_mode, 44h ; 'D' ;~ 01A2:82DB
cs=0x1a2;eip=0x0082e0; 	X(MOV(byte_24645, 2));	// 17313 mov     byte_24645, 2 ;~ 01A2:82E0
cs=0x1a2;eip=0x0082e5; 	J(return _nongravis_182e7(m2c::kloc_182f7, _state););	// 17314 jmp     short loc_182F7 ;~ 01A2:82E5

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::kloc_127bd: 	goto loc_127bd;
        case m2c::kloc_127ce: 	goto loc_127ce;
        case m2c::kloc_127fc: 	goto loc_127fc;
        case m2c::kloc_1280d: 	goto loc_1280d;
        case m2c::ksub_1279a: 	goto sub_1279a;
        case m2c::ksub_182db: 	goto sub_182db;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1281a(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1281a:
    _begin:
cs=0x1a2;eip=0x00281a; 	T(SHL(eax, 0x10));	// 4988 shl     eax, 10h ;~ 01A2:281A
cs=0x1a2;eip=0x00281e; 	T(MOV(ax, word_24610));	// 4989 mov     ax, word_24610 ;~ 01A2:281E
cs=0x1a2;eip=0x002821; 	T(XOR(ah, ah));	// 4990 xor     ah, ah ;~ 01A2:2821
cs=0x1a2;eip=0x002823; 	X(MUL1_2(*(dw*)(raddr(ds,si+0x20))));	// 4991 mul     word ptr [si+20h] ;~ 01A2:2823
cs=0x1a2;eip=0x002826; 	T(MOV(bp, ax));	// 4992 mov     bp, ax ;~ 01A2:2826
cs=0x1a2;eip=0x002828; 	T(SHR(bp, 8));	// 4993 shr     bp, 8 ;~ 01A2:2828
cs=0x1a2;eip=0x00282b; 	T(MOV(dh, al));	// 4994 mov     dh, al ;~ 01A2:282B
cs=0x1a2;eip=0x00282d; 	T(XOR(dl, dl));	// 4995 xor     dl, dl ;~ 01A2:282D
cs=0x1a2;eip=0x00282f; 	T(SHR(eax, 0x10));	// 4996 shr     eax, 10h ;~ 01A2:282F
cs=0x1a2;eip=0x002833; 	J(return _group3(m2c::kloc_12898, _state););	// 4997 jmp     short loc_12898 ;~ 01A2:2833

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::ksub_1281a: 	goto sub_1281a;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group3(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group3:
    _begin:
_volume_prepare_waves:
	// 5004 
cs=0x1a2;eip=0x002835; 	T(TEST(*(raddr(ds,si+0x17)), 1));	// 5005 test    byte ptr [si+17h], 1 ;~ 01A2:2835
cs=0x1a2;eip=0x002839; 	J(JZ(_memclean));	// 5006 jz      _memclean ;~ 01A2:2839
cs=0x1a2;eip=0x00283d; 	T(TEST(_sndflags_24622, 1));	// 5007 test    _sndflags_24622, 1 ;~ 01A2:283D
cs=0x1a2;eip=0x002842; 	J(JZ(_memclean));	// 5008 jz      _memclean ;~ 01A2:2842
cs=0x1a2;eip=0x002846; 	X(PUSH(di));	// 5009 push    di ;~ 01A2:2846
cs=0x1a2;eip=0x002847; 	X(PUSH(es));	// 5010 push    es ;~ 01A2:2847
cs=0x1a2;eip=0x002848; 	T(MOV(bx, *(dw*)(raddr(ds,si+0x26))));	// 5011 mov     bx, [si+26h] ;~ 01A2:2848
cs=0x1a2;eip=0x00284b; 	T(MOV(eax, *(dd*)(raddr(ds,si+4))));	// 5012 mov     eax, [si+4] ;~ 01A2:284B
cs=0x1a2;eip=0x00284f; 	T(SHR(eax, 22));	// 5013 shr     eax, 22 ;~ 01A2:284F
cs=0x1a2;eip=0x002853; 	T(ADD(bx, ax));	// 5014 add     bx, ax ;~ 01A2:2853
cs=0x1a2;eip=0x002855; 	X(PUSH(si));	// 5015 push    si ;~ 01A2:2855
cs=0x1a2;eip=0x002856; 	J(CALL(_ems_mapmem,0));	// 5016 call    _ems_mapmem ;~ 01A2:2856
cs=0x1a2;eip=0x002859; 	X(POP(si));	// 5017 pop     si ;~ 01A2:2859
cs=0x1a2;eip=0x00285a; 	T(MOV(eax, *(dd*)(raddr(ds,si+4))));	// 5018 mov     eax, [si+4] ;~ 01A2:285A
cs=0x1a2;eip=0x00285e; 	T(MOV(bx, ax));	// 5019 mov     bx, ax ;~ 01A2:285E
cs=0x1a2;eip=0x002860; 	T(SHR(eax, 12));	// 5020 shr     eax, 12 ;~ 01A2:2860
cs=0x1a2;eip=0x002864; 	T(CMP(*(dw*)(raddr(ds,si+0x26)), 0x0FFFF));	// 5021 cmp     word ptr [si+26h], 0FFFFh ;~ 01A2:2864
cs=0x1a2;eip=0x002868; 	J(JZ(loc_12870));	// 5022 jz      short loc_12870 ;~ 01A2:2868
cs=0x1a2;eip=0x00286a; 	T(AND(eax, 0x3FF));	// 5023 and     eax, 3FFh ;~ 01A2:286A
loc_12870:
	// 4711 
cs=0x1a2;eip=0x002870; 	T(ADD(ax, *(dw*)(raddr(ds,si+0x24))));	// 5026 add     ax, [si+24h] ;~ 01A2:2870
cs=0x1a2;eip=0x002873; 	T(MOV(fs, ax));	// 5027 mov     fs, ax ;~ 01A2:2873
cs=0x1a2;eip=0x002875; 	T(MOV(ax, word_24610));	// 5028 mov     ax, word_24610 ;~ 01A2:2875
cs=0x1a2;eip=0x002878; 	T(XOR(ah, ah));	// 5029 xor     ah, ah ;~ 01A2:2878
cs=0x1a2;eip=0x00287a; 	X(MUL1_2(*(dw*)(raddr(ds,si+0x20))));	// 5030 mul     word ptr [si+20h] ;~ 01A2:287A
cs=0x1a2;eip=0x00287d; 	X(MUL1_2(_freq1));	// 5031 mul     _freq1 ;~ 01A2:287D
cs=0x1a2;eip=0x002881; 	T(MOV(bp, 22050));	// 5032 mov     bp, 22050 ;~ 01A2:2881
cs=0x1a2;eip=0x002884; 	T(DIV2(bp));	// 5033 div     bp ;~ 01A2:2884
cs=0x1a2;eip=0x002886; 	T(MOV(dx, ax));	// 5034 mov     dx, ax ;~ 01A2:2886
cs=0x1a2;eip=0x002888; 	T(MOVZX(ax, bh));	// 5035 movzx   ax, bh ;~ 01A2:2888
cs=0x1a2;eip=0x00288b; 	T(AND(al, 0x0F));	// 5036 and     al, 0Fh ;~ 01A2:288B
cs=0x1a2;eip=0x00288d; 	T(MOV(bp, dx));	// 5037 mov     bp, dx ;~ 01A2:288D
cs=0x1a2;eip=0x00288f; 	T(SHR(bp, 8));	// 5038 shr     bp, 8 ;~ 01A2:288F
cs=0x1a2;eip=0x002892; 	T(MOV(dh, dl));	// 5039 mov     dh, dl ;~ 01A2:2892
cs=0x1a2;eip=0x002894; 	T(MOV(dl, bl));	// 5040 mov     dl, bl ;~ 01A2:2894
cs=0x1a2;eip=0x002896; 	X(POP(es));	// 5041 pop     es ;~ 01A2:2896
cs=0x1a2;eip=0x002897; 	X(POP(di));	// 5042 pop     di ;~ 01A2:2897
loc_12898:
	// 4712 
cs=0x1a2;eip=0x002898; 	T(MOVZX(ebx, *(raddr(ds,si+0x23))));	// 5045 movzx   ebx, byte ptr [si+23h] ;~ 01A2:2898
cs=0x1a2;eip=0x00289d; 	T(MOV(si, ax));	// 5046 mov     si, ax ;~ 01A2:289D
cs=0x1a2;eip=0x00289f; 	T(TEST(word_24610, 0x4000));	// 5047 test    word_24610, 4000h ;~ 01A2:289F
cs=0x1a2;eip=0x0028a5; 	J(JZ(loc_128bb));	// 5048 jz      short loc_128BB ;~ 01A2:28A5
cs=0x1a2;eip=0x0028a7; 	T(CMP(_amplification, 120));	// 5049 cmp     _amplification, 120 ;~ 01A2:28A7
cs=0x1a2;eip=0x0028ac; 	J(JBE(loc_128bb));	// 5050 jbe     short loc_128BB ;~ 01A2:28AC
cs=0x1a2;eip=0x0028ae; 	T(MOV(ax, 100));	// 5051 mov     ax, 100 ;~ 01A2:28AE
cs=0x1a2;eip=0x0028b1; 	X(PUSH(dx));	// 5052 push    dx ;~ 01A2:28B1
cs=0x1a2;eip=0x0028b2; 	T(MUL1_2(bx));	// 5053 mul     bx ;~ 01A2:28B2
cs=0x1a2;eip=0x0028b4; 	X(DIV2(_amplification));	// 5054 div     _amplification ;~ 01A2:28B4
cs=0x1a2;eip=0x0028b8; 	X(POP(dx));	// 5055 pop     dx ;~ 01A2:28B8
cs=0x1a2;eip=0x0028b9; 	T(MOV(bx, ax));	// 5056 mov     bx, ax ;~ 01A2:28B9
loc_128bb:
	// 4713 
cs=0x1a2;eip=0x0028bb; 	T(SHL(ebx, 9));	// 5060 shl     ebx, 9 ;~ 01A2:28BB
cs=0x1a2;eip=0x0028bf; 	T(ADD(bx, offset(seg003,_vlm_byte_table)));	// 5061 add     bx, offset _vlm_byte_table ;~ 01A2:28BF
cs=0x1a2;eip=0x0028c3; 	T(INC(bx));	// 5062 inc     bx ;~ 01A2:28C3
cs=0x1a2;eip=0x0028c4; 	T(MOV(cx, _my_size));	// 5063 mov     cx, _my_size ;~ 01A2:28C4
cs=0x1a2;eip=0x0028c8; 	T(TEST(word_24610, 0x8000));	// 5064 test    word_24610, 8000h ;~ 01A2:28C8
cs=0x1a2;eip=0x0028ce; 	J(JZ(loc_1291e));	// 5065 jz      short loc_1291E ;~ 01A2:28CE
cs=0x1a2;eip=0x0028d0; 	T(SHL(ecx, 16));	// 5066 shl     ecx, 16 ;~ 01A2:28D0
cs=0x1a2;eip=0x0028d4; 	T(SHL(esi, 16));	// 5067 shl     esi, 16 ;~ 01A2:28D4
cs=0x1a2;eip=0x0028d8; 	T(MOV(si, ax));	// 5068 mov     si, ax ;~ 01A2:28D8
cs=0x1a2;eip=0x0028da; 	T(MOV(cx, 0x100));	// 5069 mov     cx, 100h ;~ 01A2:28DA
loc_128dd:
	// 4714 
cs=0x1a2;eip=0x0028dd; 	T(MOV(eax, *(dd*)(raddr(fs,si))));	// 5072 mov     eax, fs:[si] ;~ 01A2:28DD
cs=0x1a2;eip=0x0028e1; 	T(INC(si));	// 5073 inc     si ;~ 01A2:28E1
cs=0x1a2;eip=0x0028e2; 	T(OR(al, al));	// 5074 or      al, al ;~ 01A2:28E2
cs=0x1a2;eip=0x0028e4; 	J(JNS(loc_12913));	// 5075 jns     short loc_12913 ;~ 01A2:28E4
cs=0x1a2;eip=0x0028e6; 	T(OR(ah, ah));	// 5076 or      ah, ah ;~ 01A2:28E6
cs=0x1a2;eip=0x0028e8; 	J(JS(loc_12913));	// 5077 js      short loc_12913 ;~ 01A2:28E8
cs=0x1a2;eip=0x0028ea; 	T(ROR(eax, 8));	// 5078 ror     eax, 8 ;~ 01A2:28EA
cs=0x1a2;eip=0x0028ee; 	T(CMP(al, ah));	// 5079 cmp     al, ah ;~ 01A2:28EE
cs=0x1a2;eip=0x0028f0; 	J(JG(loc_12913));	// 5080 jg      short loc_12913 ;~ 01A2:28F0
cs=0x1a2;eip=0x0028f2; 	T(ROR(eax, 8));	// 5081 ror     eax, 8 ;~ 01A2:28F2
cs=0x1a2;eip=0x0028f6; 	T(CMP(al, ah));	// 5082 cmp     al, ah ;~ 01A2:28F6
cs=0x1a2;eip=0x0028f8; 	J(JG(loc_12913));	// 5083 jg      short loc_12913 ;~ 01A2:28F8
cs=0x1a2;eip=0x0028fa; 	T(ROL(eax, 16));	// 5084 rol     eax, 16 ;~ 01A2:28FA
cs=0x1a2;eip=0x0028fe; 	T(MOV(ax, *(dw*)(raddr(fs,si+3))));	// 5085 mov     ax, fs:[si+3] ;~ 01A2:28FE
cs=0x1a2;eip=0x002902; 	T(ROL(eax, 8));	// 5086 rol     eax, 8 ;~ 01A2:2902
cs=0x1a2;eip=0x002906; 	T(CMP(al, ah));	// 5087 cmp     al, ah ;~ 01A2:2906
cs=0x1a2;eip=0x002908; 	J(JG(loc_12913));	// 5088 jg      short loc_12913 ;~ 01A2:2908
cs=0x1a2;eip=0x00290a; 	T(ROR(eax, 8));	// 5089 ror     eax, 8 ;~ 01A2:290A
cs=0x1a2;eip=0x00290e; 	T(INC(si));	// 5090 inc     si ;~ 01A2:290E
cs=0x1a2;eip=0x00290f; 	T(CMP(al, ah));	// 5091 cmp     al, ah ;~ 01A2:290F
cs=0x1a2;eip=0x002911; 	J(JLE(loc_1291a));	// 5092 jle     short loc_1291A ;~ 01A2:2911
loc_12913:
	// 4715 
cs=0x1a2;eip=0x002913; 	T(DEC(cx));	// 5096 dec     cx ;~ 01A2:2913
cs=0x1a2;eip=0x002914; 	J(JNZ(loc_128dd));	// 5097 jnz     short loc_128DD ;~ 01A2:2914
cs=0x1a2;eip=0x002916; 	T(SHR(esi, 16));	// 5098 shr     esi, 16 ;~ 01A2:2916
loc_1291a:
	// 4716 
cs=0x1a2;eip=0x00291a; 	T(SHR(ecx, 16));	// 5101 shr     ecx, 16 ;~ 01A2:291A
loc_1291e:
	// 4717 
cs=0x1a2;eip=0x00291e; 	T(XOR(eax, eax));	// 5104 xor     eax, eax ;~ 01A2:291E
loc_12921:
	// 4718 
cs=0x1a2;eip=0x002921; 	T(MOV(al, *(raddr(fs,si))));	// 5107 mov     al, fs:[si] ;~ 01A2:2921
cs=0x1a2;eip=0x002924; 	T(MOV(al, *(raddr(ds,ebx+eax*2))));	// 5108 mov     al, [ebx+eax*2] ;~ 01A2:2924
cs=0x1a2;eip=0x002928; 	X(MOV(*(raddr(es,di)), al));	// 5109 mov     es:[di], al ;~ 01A2:2928
cs=0x1a2;eip=0x00292b; 	T(ADD(dl, dh));	// 5110 add     dl, dh ;~ 01A2:292B
cs=0x1a2;eip=0x00292d; 	T(INC(di));	// 5111 inc     di ;~ 01A2:292D
cs=0x1a2;eip=0x00292e; 	T(ADC(si, bp));	// 5112 adc     si, bp ;~ 01A2:292E
cs=0x1a2;eip=0x002930; 	T(DEC(cx));	// 5113 dec     cx ;~ 01A2:2930
cs=0x1a2;eip=0x002931; 	J(JZ(locret_12a55));	// 5114 jz      locret_12A55 ;~ 01A2:2931
cs=0x1a2;eip=0x002935; 	T(MOV(al, *(raddr(fs,si))));	// 5115 mov     al, fs:[si] ;~ 01A2:2935
cs=0x1a2;eip=0x002938; 	T(MOV(al, *(raddr(ds,ebx+eax*2))));	// 5116 mov     al, [ebx+eax*2] ;~ 01A2:2938
cs=0x1a2;eip=0x00293c; 	X(MOV(*(raddr(es,di)), al));	// 5117 mov     es:[di], al ;~ 01A2:293C
cs=0x1a2;eip=0x00293f; 	T(ADD(dl, dh));	// 5118 add     dl, dh ;~ 01A2:293F
cs=0x1a2;eip=0x002941; 	T(INC(di));	// 5119 inc     di ;~ 01A2:2941
cs=0x1a2;eip=0x002942; 	T(ADC(si, bp));	// 5120 adc     si, bp ;~ 01A2:2942
cs=0x1a2;eip=0x002944; 	T(DEC(cx));	// 5121 dec     cx ;~ 01A2:2944
cs=0x1a2;eip=0x002945; 	J(JZ(locret_12a55));	// 5122 jz      locret_12A55 ;~ 01A2:2945
cs=0x1a2;eip=0x002949; 	T(MOV(al, *(raddr(fs,si))));	// 5123 mov     al, fs:[si] ;~ 01A2:2949
cs=0x1a2;eip=0x00294c; 	T(MOV(al, *(raddr(ds,ebx+eax*2))));	// 5124 mov     al, [ebx+eax*2] ;~ 01A2:294C
cs=0x1a2;eip=0x002950; 	X(MOV(*(raddr(es,di)), al));	// 5125 mov     es:[di], al ;~ 01A2:2950
cs=0x1a2;eip=0x002953; 	T(ADD(dl, dh));	// 5126 add     dl, dh ;~ 01A2:2953
cs=0x1a2;eip=0x002955; 	T(INC(di));	// 5127 inc     di ;~ 01A2:2955
cs=0x1a2;eip=0x002956; 	T(ADC(si, bp));	// 5128 adc     si, bp ;~ 01A2:2956
cs=0x1a2;eip=0x002958; 	T(DEC(cx));	// 5129 dec     cx ;~ 01A2:2958
cs=0x1a2;eip=0x002959; 	J(JZ(locret_12a55));	// 5130 jz      locret_12A55 ;~ 01A2:2959
cs=0x1a2;eip=0x00295d; 	T(MOV(al, *(raddr(fs,si))));	// 5131 mov     al, fs:[si] ;~ 01A2:295D
cs=0x1a2;eip=0x002960; 	T(MOV(al, *(raddr(ds,ebx+eax*2))));	// 5132 mov     al, [ebx+eax*2] ;~ 01A2:2960
cs=0x1a2;eip=0x002964; 	X(MOV(*(raddr(es,di)), al));	// 5133 mov     es:[di], al ;~ 01A2:2964
cs=0x1a2;eip=0x002967; 	T(ADD(dl, dh));	// 5134 add     dl, dh ;~ 01A2:2967
cs=0x1a2;eip=0x002969; 	T(INC(di));	// 5135 inc     di ;~ 01A2:2969
cs=0x1a2;eip=0x00296a; 	T(ADC(si, bp));	// 5136 adc     si, bp ;~ 01A2:296A
cs=0x1a2;eip=0x00296c; 	T(DEC(cx));	// 5137 dec     cx ;~ 01A2:296C
cs=0x1a2;eip=0x00296d; 	J(JZ(locret_12a55));	// 5138 jz      locret_12A55 ;~ 01A2:296D
cs=0x1a2;eip=0x002971; 	T(MOV(al, *(raddr(fs,si))));	// 5139 mov     al, fs:[si] ;~ 01A2:2971
cs=0x1a2;eip=0x002974; 	T(MOV(al, *(raddr(ds,ebx+eax*2))));	// 5140 mov     al, [ebx+eax*2] ;~ 01A2:2974
cs=0x1a2;eip=0x002978; 	X(MOV(*(raddr(es,di)), al));	// 5141 mov     es:[di], al ;~ 01A2:2978
cs=0x1a2;eip=0x00297b; 	T(ADD(dl, dh));	// 5142 add     dl, dh ;~ 01A2:297B
cs=0x1a2;eip=0x00297d; 	T(INC(di));	// 5143 inc     di ;~ 01A2:297D
cs=0x1a2;eip=0x00297e; 	T(ADC(si, bp));	// 5144 adc     si, bp ;~ 01A2:297E
cs=0x1a2;eip=0x002980; 	T(DEC(cx));	// 5145 dec     cx ;~ 01A2:2980
cs=0x1a2;eip=0x002981; 	J(JZ(locret_12a55));	// 5146 jz      locret_12A55 ;~ 01A2:2981
cs=0x1a2;eip=0x002985; 	T(MOV(al, *(raddr(fs,si))));	// 5147 mov     al, fs:[si] ;~ 01A2:2985
cs=0x1a2;eip=0x002988; 	T(MOV(al, *(raddr(ds,ebx+eax*2))));	// 5148 mov     al, [ebx+eax*2] ;~ 01A2:2988
cs=0x1a2;eip=0x00298c; 	X(MOV(*(raddr(es,di)), al));	// 5149 mov     es:[di], al ;~ 01A2:298C
cs=0x1a2;eip=0x00298f; 	T(ADD(dl, dh));	// 5150 add     dl, dh ;~ 01A2:298F
cs=0x1a2;eip=0x002991; 	T(INC(di));	// 5151 inc     di ;~ 01A2:2991
cs=0x1a2;eip=0x002992; 	T(ADC(si, bp));	// 5152 adc     si, bp ;~ 01A2:2992
cs=0x1a2;eip=0x002994; 	T(DEC(cx));	// 5153 dec     cx ;~ 01A2:2994
cs=0x1a2;eip=0x002995; 	J(JZ(locret_12a55));	// 5154 jz      locret_12A55 ;~ 01A2:2995
cs=0x1a2;eip=0x002999; 	T(MOV(al, *(raddr(fs,si))));	// 5155 mov     al, fs:[si] ;~ 01A2:2999
cs=0x1a2;eip=0x00299c; 	T(MOV(al, *(raddr(ds,ebx+eax*2))));	// 5156 mov     al, [ebx+eax*2] ;~ 01A2:299C
cs=0x1a2;eip=0x0029a0; 	X(MOV(*(raddr(es,di)), al));	// 5157 mov     es:[di], al ;~ 01A2:29A0
cs=0x1a2;eip=0x0029a3; 	T(ADD(dl, dh));	// 5158 add     dl, dh ;~ 01A2:29A3
cs=0x1a2;eip=0x0029a5; 	T(INC(di));	// 5159 inc     di ;~ 01A2:29A5
cs=0x1a2;eip=0x0029a6; 	T(ADC(si, bp));	// 5160 adc     si, bp ;~ 01A2:29A6
cs=0x1a2;eip=0x0029a8; 	T(DEC(cx));	// 5161 dec     cx ;~ 01A2:29A8
cs=0x1a2;eip=0x0029a9; 	J(JZ(locret_12a55));	// 5162 jz      locret_12A55 ;~ 01A2:29A9
cs=0x1a2;eip=0x0029ad; 	T(MOV(al, *(raddr(fs,si))));	// 5163 mov     al, fs:[si] ;~ 01A2:29AD
cs=0x1a2;eip=0x0029b0; 	T(MOV(al, *(raddr(ds,ebx+eax*2))));	// 5164 mov     al, [ebx+eax*2] ;~ 01A2:29B0
cs=0x1a2;eip=0x0029b4; 	X(MOV(*(raddr(es,di)), al));	// 5165 mov     es:[di], al ;~ 01A2:29B4
cs=0x1a2;eip=0x0029b7; 	T(ADD(dl, dh));	// 5166 add     dl, dh ;~ 01A2:29B7
cs=0x1a2;eip=0x0029b9; 	T(INC(di));	// 5167 inc     di ;~ 01A2:29B9
cs=0x1a2;eip=0x0029ba; 	T(ADC(si, bp));	// 5168 adc     si, bp ;~ 01A2:29BA
cs=0x1a2;eip=0x0029bc; 	T(DEC(cx));	// 5169 dec     cx ;~ 01A2:29BC
cs=0x1a2;eip=0x0029bd; 	J(JZ(locret_12a55));	// 5170 jz      locret_12A55 ;~ 01A2:29BD
cs=0x1a2;eip=0x0029c1; 	T(MOV(al, *(raddr(fs,si))));	// 5171 mov     al, fs:[si] ;~ 01A2:29C1
cs=0x1a2;eip=0x0029c4; 	T(MOV(al, *(raddr(ds,ebx+eax*2))));	// 5172 mov     al, [ebx+eax*2] ;~ 01A2:29C4
cs=0x1a2;eip=0x0029c8; 	X(MOV(*(raddr(es,di)), al));	// 5173 mov     es:[di], al ;~ 01A2:29C8
cs=0x1a2;eip=0x0029cb; 	T(ADD(dl, dh));	// 5174 add     dl, dh ;~ 01A2:29CB
cs=0x1a2;eip=0x0029cd; 	T(INC(di));	// 5175 inc     di ;~ 01A2:29CD
cs=0x1a2;eip=0x0029ce; 	T(ADC(si, bp));	// 5176 adc     si, bp ;~ 01A2:29CE
cs=0x1a2;eip=0x0029d0; 	T(DEC(cx));	// 5177 dec     cx ;~ 01A2:29D0
cs=0x1a2;eip=0x0029d1; 	J(JZ(locret_12a55));	// 5178 jz      locret_12A55 ;~ 01A2:29D1
cs=0x1a2;eip=0x0029d5; 	T(MOV(al, *(raddr(fs,si))));	// 5179 mov     al, fs:[si] ;~ 01A2:29D5
cs=0x1a2;eip=0x0029d8; 	T(MOV(al, *(raddr(ds,ebx+eax*2))));	// 5180 mov     al, [ebx+eax*2] ;~ 01A2:29D8
cs=0x1a2;eip=0x0029dc; 	X(MOV(*(raddr(es,di)), al));	// 5181 mov     es:[di], al ;~ 01A2:29DC
cs=0x1a2;eip=0x0029df; 	T(ADD(dl, dh));	// 5182 add     dl, dh ;~ 01A2:29DF
cs=0x1a2;eip=0x0029e1; 	T(INC(di));	// 5183 inc     di ;~ 01A2:29E1
cs=0x1a2;eip=0x0029e2; 	T(ADC(si, bp));	// 5184 adc     si, bp ;~ 01A2:29E2
cs=0x1a2;eip=0x0029e4; 	T(DEC(cx));	// 5185 dec     cx ;~ 01A2:29E4
cs=0x1a2;eip=0x0029e5; 	J(JZ(locret_12a55));	// 5186 jz      short locret_12A55 ;~ 01A2:29E5
cs=0x1a2;eip=0x0029e7; 	T(MOV(al, *(raddr(fs,si))));	// 5187 mov     al, fs:[si] ;~ 01A2:29E7
cs=0x1a2;eip=0x0029ea; 	T(MOV(al, *(raddr(ds,ebx+eax*2))));	// 5188 mov     al, [ebx+eax*2] ;~ 01A2:29EA
cs=0x1a2;eip=0x0029ee; 	X(MOV(*(raddr(es,di)), al));	// 5189 mov     es:[di], al ;~ 01A2:29EE
cs=0x1a2;eip=0x0029f1; 	T(ADD(dl, dh));	// 5190 add     dl, dh ;~ 01A2:29F1
cs=0x1a2;eip=0x0029f3; 	T(INC(di));	// 5191 inc     di ;~ 01A2:29F3
cs=0x1a2;eip=0x0029f4; 	T(ADC(si, bp));	// 5192 adc     si, bp ;~ 01A2:29F4
cs=0x1a2;eip=0x0029f6; 	T(DEC(cx));	// 5193 dec     cx ;~ 01A2:29F6
cs=0x1a2;eip=0x0029f7; 	J(JZ(locret_12a55));	// 5194 jz      short locret_12A55 ;~ 01A2:29F7
cs=0x1a2;eip=0x0029f9; 	T(MOV(al, *(raddr(fs,si))));	// 5195 mov     al, fs:[si] ;~ 01A2:29F9
cs=0x1a2;eip=0x0029fc; 	T(MOV(al, *(raddr(ds,ebx+eax*2))));	// 5196 mov     al, [ebx+eax*2] ;~ 01A2:29FC
cs=0x1a2;eip=0x002a00; 	X(MOV(*(raddr(es,di)), al));	// 5197 mov     es:[di], al ;~ 01A2:2A00
cs=0x1a2;eip=0x002a03; 	T(ADD(dl, dh));	// 5198 add     dl, dh ;~ 01A2:2A03
cs=0x1a2;eip=0x002a05; 	T(INC(di));	// 5199 inc     di ;~ 01A2:2A05
cs=0x1a2;eip=0x002a06; 	T(ADC(si, bp));	// 5200 adc     si, bp ;~ 01A2:2A06
cs=0x1a2;eip=0x002a08; 	T(DEC(cx));	// 5201 dec     cx ;~ 01A2:2A08
cs=0x1a2;eip=0x002a09; 	J(JZ(locret_12a55));	// 5202 jz      short locret_12A55 ;~ 01A2:2A09
cs=0x1a2;eip=0x002a0b; 	T(MOV(al, *(raddr(fs,si))));	// 5203 mov     al, fs:[si] ;~ 01A2:2A0B
cs=0x1a2;eip=0x002a0e; 	T(MOV(al, *(raddr(ds,ebx+eax*2))));	// 5204 mov     al, [ebx+eax*2] ;~ 01A2:2A0E
cs=0x1a2;eip=0x002a12; 	X(MOV(*(raddr(es,di)), al));	// 5205 mov     es:[di], al ;~ 01A2:2A12
cs=0x1a2;eip=0x002a15; 	T(ADD(dl, dh));	// 5206 add     dl, dh ;~ 01A2:2A15
cs=0x1a2;eip=0x002a17; 	T(INC(di));	// 5207 inc     di ;~ 01A2:2A17
cs=0x1a2;eip=0x002a18; 	T(ADC(si, bp));	// 5208 adc     si, bp ;~ 01A2:2A18
cs=0x1a2;eip=0x002a1a; 	T(DEC(cx));	// 5209 dec     cx ;~ 01A2:2A1A
cs=0x1a2;eip=0x002a1b; 	J(JZ(locret_12a55));	// 5210 jz      short locret_12A55 ;~ 01A2:2A1B
cs=0x1a2;eip=0x002a1d; 	T(MOV(al, *(raddr(fs,si))));	// 5211 mov     al, fs:[si] ;~ 01A2:2A1D
cs=0x1a2;eip=0x002a20; 	T(MOV(al, *(raddr(ds,ebx+eax*2))));	// 5212 mov     al, [ebx+eax*2] ;~ 01A2:2A20
cs=0x1a2;eip=0x002a24; 	X(MOV(*(raddr(es,di)), al));	// 5213 mov     es:[di], al ;~ 01A2:2A24
cs=0x1a2;eip=0x002a27; 	T(ADD(dl, dh));	// 5214 add     dl, dh ;~ 01A2:2A27
cs=0x1a2;eip=0x002a29; 	T(INC(di));	// 5215 inc     di ;~ 01A2:2A29
cs=0x1a2;eip=0x002a2a; 	T(ADC(si, bp));	// 5216 adc     si, bp ;~ 01A2:2A2A
cs=0x1a2;eip=0x002a2c; 	T(DEC(cx));	// 5217 dec     cx ;~ 01A2:2A2C
cs=0x1a2;eip=0x002a2d; 	J(JZ(locret_12a55));	// 5218 jz      short locret_12A55 ;~ 01A2:2A2D
cs=0x1a2;eip=0x002a2f; 	T(MOV(al, *(raddr(fs,si))));	// 5219 mov     al, fs:[si] ;~ 01A2:2A2F
cs=0x1a2;eip=0x002a32; 	T(MOV(al, *(raddr(ds,ebx+eax*2))));	// 5220 mov     al, [ebx+eax*2] ;~ 01A2:2A32
cs=0x1a2;eip=0x002a36; 	X(MOV(*(raddr(es,di)), al));	// 5221 mov     es:[di], al ;~ 01A2:2A36
cs=0x1a2;eip=0x002a39; 	T(ADD(dl, dh));	// 5222 add     dl, dh ;~ 01A2:2A39
cs=0x1a2;eip=0x002a3b; 	T(INC(di));	// 5223 inc     di ;~ 01A2:2A3B
cs=0x1a2;eip=0x002a3c; 	T(ADC(si, bp));	// 5224 adc     si, bp ;~ 01A2:2A3C
cs=0x1a2;eip=0x002a3e; 	T(DEC(cx));	// 5225 dec     cx ;~ 01A2:2A3E
cs=0x1a2;eip=0x002a3f; 	J(JZ(locret_12a55));	// 5226 jz      short locret_12A55 ;~ 01A2:2A3F
cs=0x1a2;eip=0x002a41; 	T(MOV(al, *(raddr(fs,si))));	// 5227 mov     al, fs:[si] ;~ 01A2:2A41
cs=0x1a2;eip=0x002a44; 	T(MOV(al, *(raddr(ds,ebx+eax*2))));	// 5228 mov     al, [ebx+eax*2] ;~ 01A2:2A44
cs=0x1a2;eip=0x002a48; 	X(MOV(*(raddr(es,di)), al));	// 5229 mov     es:[di], al ;~ 01A2:2A48
cs=0x1a2;eip=0x002a4b; 	T(ADD(dl, dh));	// 5230 add     dl, dh ;~ 01A2:2A4B
cs=0x1a2;eip=0x002a4d; 	T(INC(di));	// 5231 inc     di ;~ 01A2:2A4D
cs=0x1a2;eip=0x002a4e; 	T(ADC(si, bp));	// 5232 adc     si, bp ;~ 01A2:2A4E
cs=0x1a2;eip=0x002a50; 	T(DEC(cx));	// 5233 dec     cx ;~ 01A2:2A50
cs=0x1a2;eip=0x002a51; 	J(JNZ(loc_12921));	// 5234 jnz     loc_12921 ;~ 01A2:2A51
locret_12a55:
	// 4719 
cs=0x1a2;eip=0x002a55; 	J(RETN(0));	// 5238 retn ;~ 01A2:2A55
_memclean:
	// 5245 
cs=0x1a2;eip=0x002a56; 	T(CLD);	// 5247 cld ;~ 01A2:2A56
cs=0x1a2;eip=0x002a57; 	T(MOV(cx, _my_size));	// 5248 mov     cx, _my_size ;~ 01A2:2A57
cs=0x1a2;eip=0x002a5b; 	T(XOR(ax, ax));	// 5249 xor     ax, ax ;~ 01A2:2A5B
cs=0x1a2;eip=0x002a5d; 	T(SHR(cx, 1));	// 5250 shr     cx, 1 ;~ 01A2:2A5D
	// 5251 rep stosw ;~ 01A2:2A5F
cs=0x1a2;eip=0x002a5f; 	X(	REP STOSW);	// 5251 rep stosw ;~ 01A2:2A5F
cs=0x1a2;eip=0x002a61; 	T(ADC(cx, cx));	// 5252 adc     cx, cx ;~ 01A2:2A61
	// 5253 rep stosb ;~ 01A2:2A63
cs=0x1a2;eip=0x002a63; 	X(	REP STOSB);	// 5253 rep stosb ;~ 01A2:2A63
cs=0x1a2;eip=0x002a65; 	J(RETN(0));	// 5254 retn ;~ 01A2:2A65

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_memclean: 	goto _memclean;
        case m2c::k_volume_prepare_waves: 	goto _volume_prepare_waves;
        case m2c::kloc_12870: 	goto loc_12870;
        case m2c::kloc_12898: 	goto loc_12898;
        case m2c::kloc_128bb: 	goto loc_128bb;
        case m2c::kloc_128dd: 	goto loc_128dd;
        case m2c::kloc_12913: 	goto loc_12913;
        case m2c::kloc_1291a: 	goto loc_1291a;
        case m2c::kloc_1291e: 	goto loc_1291e;
        case m2c::kloc_12921: 	goto loc_12921;
        case m2c::klocret_12a55: 	goto locret_12a55;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _volume_12a66(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _volume_12a66:
    _begin:
cs=0x1a2;eip=0x002a66; 	X(PUSH(ds));	// 5263 push    ds ;~ 01A2:2A66
cs=0x1a2;eip=0x002a67; 	T(MOV(ax, seg_offset(seg003)));	// 5264 mov     ax, seg seg003 ;~ 01A2:2A67
cs=0x1a2;eip=0x002a6a; 	T(MOV(ds, ax));	// 5265 mov     ds, ax ;~ 01A2:2A6A
cs=0x1a2;eip=0x002a6c; 	T(MOV(cx, word_245d4));	// 5266 mov     cx, word_245D4 ;~ 01A2:2A6C
cs=0x1a2;eip=0x002a70; 	T(MOV(bx, offset(seg003,_volume_25908)));	// 5267 mov     bx, offset _volume_25908 ;~ 01A2:2A70
loc_12a73:
	// 4720 
cs=0x1a2;eip=0x002a73; 	X(PUSH(bx));	// 5270 push    bx ;~ 01A2:2A73
cs=0x1a2;eip=0x002a74; 	X(PUSH(cx));	// 5271 push    cx ;~ 01A2:2A74
cs=0x1a2;eip=0x002a75; 	J(CALL(__dispatch_call,off_245ce));	// 5272 call    off_245CE ;~ 01A2:2A75
cs=0x1a2;eip=0x002a79; 	X(POP(cx));	// 5273 pop     cx ;~ 01A2:2A79
cs=0x1a2;eip=0x002a7a; 	X(POP(bx));	// 5274 pop     bx ;~ 01A2:2A7A
cs=0x1a2;eip=0x002a7b; 	T(ADD(bx, 0x50));	// 5275 add     bx, 50h ; 'P' ;~ 01A2:2A7B
cs=0x1a2;eip=0x002a7e; 	T(DEC(cx));	// 5276 dec     cx ;~ 01A2:2A7E
cs=0x1a2;eip=0x002a7f; 	J(JNZ(loc_12a73));	// 5277 jnz     short loc_12A73 ;~ 01A2:2A7F
cs=0x1a2;eip=0x002a81; 	X(POP(ds));	// 5278 pop     ds ;~ 01A2:2A81
cs=0x1a2;eip=0x002a82; 	J(RETF(0));	// 5279 retf ;~ 01A2:2A82

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_volume_12a66: 	goto _volume_12a66;
        case m2c::kloc_12a73: 	goto loc_12a73;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _change_volume(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _change_volume:
    _begin:
cs=0x1a2;eip=0x002a83; 	X(PUSH(ds));	// 5289 push    ds ;~ 01A2:2A83
cs=0x1a2;eip=0x002a84; 	T(MOV(cx, seg_offset(seg003)));	// 5290 mov     cx, seg seg003 ;~ 01A2:2A84
cs=0x1a2;eip=0x002a87; 	T(MOV(ds, cx));	// 5291 mov     ds, cx ;~ 01A2:2A87
cs=0x1a2;eip=0x002a89; 	T(CMP(ax, -1));	// 5293 cmp     ax, -1 ;~ 01A2:2A89
cs=0x1a2;eip=0x002a8c; 	J(JZ(loc_12aa9));	// 5294 jz      short loc_12AA9 ;~ 01A2:2A8C
cs=0x1a2;eip=0x002a8e; 	X(MOV(_volume_245fc, ax));	// 5295 mov     _volume_245FC, ax ;~ 01A2:2A8E
cs=0x1a2;eip=0x002a91; 	T(MOV(cx, word_245d4));	// 5296 mov     cx, word_245D4 ;~ 01A2:2A91
cs=0x1a2;eip=0x002a95; 	T(MOV(bx, offset(seg003,_volume_25908)));	// 5297 mov     bx, offset _volume_25908 ;~ 01A2:2A95
loc_12a98:
	// 4721 
cs=0x1a2;eip=0x002a98; 	X(PUSH(bx));	// 5300 push    bx ;~ 01A2:2A98
cs=0x1a2;eip=0x002a99; 	X(PUSH(cx));	// 5301 push    cx ;~ 01A2:2A99
cs=0x1a2;eip=0x002a9a; 	T(MOV(al, *(raddr(ds,bx+8))));	// 5302 mov     al, [bx+8] ;~ 01A2:2A9A
cs=0x1a2;eip=0x002a9d; 	J(CALL(__dispatch_call,off_245cc));	// 5303 call    off_245CC ;~ 01A2:2A9D
cs=0x1a2;eip=0x002aa1; 	X(POP(cx));	// 5304 pop     cx ;~ 01A2:2AA1
cs=0x1a2;eip=0x002aa2; 	X(POP(bx));	// 5305 pop     bx ;~ 01A2:2AA2
cs=0x1a2;eip=0x002aa3; 	T(ADD(bx, 0x50));	// 5306 add     bx, 50h ; 'P' ;~ 01A2:2AA3
cs=0x1a2;eip=0x002aa6; 	T(DEC(cx));	// 5307 dec     cx ;~ 01A2:2AA6
cs=0x1a2;eip=0x002aa7; 	J(JNZ(loc_12a98));	// 5308 jnz     short loc_12A98 ;~ 01A2:2AA7
loc_12aa9:
	// 4722 
cs=0x1a2;eip=0x002aa9; 	T(MOV(ax, _volume_245fc));	// 5311 mov     ax, _volume_245FC ;~ 01A2:2AA9
cs=0x1a2;eip=0x002aac; 	X(POP(ds));	// 5312 pop     ds ;~ 01A2:2AAC
cs=0x1a2;eip=0x002aad; 	J(RETF(0));	// 5314 retf ;~ 01A2:2AAD

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_change_volume: 	goto _change_volume;
        case m2c::kloc_12a98: 	goto loc_12a98;
        case m2c::kloc_12aa9: 	goto loc_12aa9;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _change_amplif(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _change_amplif:
    _begin:
cs=0x1a2;eip=0x002aae; 	X(PUSH(ds));	// 5323 push    ds ;~ 01A2:2AAE
cs=0x1a2;eip=0x002aaf; 	T(MOV(cx, seg_offset(seg003)));	// 5324 mov     cx, seg seg003 ;~ 01A2:2AAF
cs=0x1a2;eip=0x002ab2; 	T(MOV(ds, cx));	// 5325 mov     ds, cx ;~ 01A2:2AB2
cs=0x1a2;eip=0x002ab4; 	T(CMP(ax, -1));	// 5327 cmp     ax, -1 ;~ 01A2:2AB4
cs=0x1a2;eip=0x002ab7; 	J(JZ(loc_12ace));	// 5328 jz      short loc_12ACE ;~ 01A2:2AB7
cs=0x1a2;eip=0x002ab9; 	X(MOV(_amplification, ax));	// 5329 mov     _amplification, ax ;~ 01A2:2AB9
cs=0x1a2;eip=0x002abc; 	X(MOV(byte_24625, 0));	// 5330 mov     byte_24625, 0 ;~ 01A2:2ABC
cs=0x1a2;eip=0x002ac1; 	T(CMP(ax, 100));	// 5331 cmp     ax, 100 ;~ 01A2:2AC1
cs=0x1a2;eip=0x002ac4; 	J(JBE(loc_12acb));	// 5332 jbe     short loc_12ACB ;~ 01A2:2AC4
cs=0x1a2;eip=0x002ac6; 	X(MOV(byte_24625, 1));	// 5333 mov     byte_24625, 1 ;~ 01A2:2AC6
loc_12acb:
	// 4723 
cs=0x1a2;eip=0x002acb; 	J(CALL(sub_13044,0));	// 5336 call    sub_13044 ;~ 01A2:2ACB
loc_12ace:
	// 4724 
cs=0x1a2;eip=0x002ace; 	T(MOV(ax, _amplification));	// 5339 mov     ax, _amplification ;~ 01A2:2ACE
cs=0x1a2;eip=0x002ad1; 	X(POP(ds));	// 5340 pop     ds ;~ 01A2:2AD1
cs=0x1a2;eip=0x002ad2; 	J(RETF(0));	// 5342 retf ;~ 01A2:2AD2

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_change_amplif: 	goto _change_amplif;
        case m2c::kloc_12acb: 	goto loc_12acb;
        case m2c::kloc_12ace: 	goto loc_12ace;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _get_playsettings(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _get_playsettings:
    _begin:
cs=0x1a2;eip=0x002ad3; 	X(PUSH(ds));	// 5351 push    ds ;~ 01A2:2AD3
cs=0x1a2;eip=0x002ad4; 	T(MOV(ax, seg_offset(seg003)));	// 5352 mov     ax, seg seg003 ;~ 01A2:2AD4
cs=0x1a2;eip=0x002ad7; 	T(MOV(ds, ax));	// 5353 mov     ds, ax ;~ 01A2:2AD7
cs=0x1a2;eip=0x002ad9; 	T(MOV(al, _flag_playsetttings));	// 5355 mov     al, _flag_playsetttings ;~ 01A2:2AD9
cs=0x1a2;eip=0x002adc; 	X(POP(ds));	// 5356 pop     ds ;~ 01A2:2ADC
cs=0x1a2;eip=0x002add; 	J(RETF(0));	// 5358 retf ;~ 01A2:2ADD

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_get_playsettings: 	goto _get_playsettings;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _set_playsettings(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _set_playsettings:
    _begin:
cs=0x1a2;eip=0x002ade; 	X(PUSH(ds));	// 5367 push    ds ;~ 01A2:2ADE
cs=0x1a2;eip=0x002adf; 	T(MOV(bx, seg_offset(seg003)));	// 5368 mov     bx, seg seg003 ;~ 01A2:2ADF
cs=0x1a2;eip=0x002ae2; 	T(MOV(ds, bx));	// 5369 mov     ds, bx ;~ 01A2:2AE2
cs=0x1a2;eip=0x002ae4; 	X(MOV(_flag_playsetttings, al));	// 5371 mov     _flag_playsetttings, al ;~ 01A2:2AE4
cs=0x1a2;eip=0x002ae7; 	J(CALL(_someplaymode,0));	// 5372 call    _someplaymode ;~ 01A2:2AE7
cs=0x1a2;eip=0x002aea; 	X(AND(*(db*)(((db*)&_config_word)+1), 0x0FE));	// 5373 and     byte ptr _config_word+1, 0FEh ;~ 01A2:2AEA
cs=0x1a2;eip=0x002aef; 	T(TEST(_flag_playsetttings, 0x10));	// 5374 test    _flag_playsetttings, 10h ;~ 01A2:2AEF
cs=0x1a2;eip=0x002af4; 	J(JZ(loc_12afb));	// 5375 jz      short loc_12AFB ;~ 01A2:2AF4
cs=0x1a2;eip=0x002af6; 	X(OR(*(db*)(((db*)&_config_word)+1), 1));	// 5376 or      byte ptr _config_word+1, 1 ;~ 01A2:2AF6
loc_12afb:
	// 4725 
cs=0x1a2;eip=0x002afb; 	X(POP(ds));	// 5379 pop     ds ;~ 01A2:2AFB
cs=0x1a2;eip=0x002afc; 	J(RETF(0));	// 5380 retf ;~ 01A2:2AFC

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_set_playsettings: 	goto _set_playsettings;
        case m2c::kloc_12afb: 	goto loc_12afb;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_12afd(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_12afd:
    _begin:
cs=0x1a2;eip=0x002afd; 	X(PUSH(ds));	// 5388 push    ds ;~ 01A2:2AFD
cs=0x1a2;eip=0x002afe; 	T(MOV(bx, seg_offset(seg003)));	// 5389 mov     bx, seg seg003 ;~ 01A2:2AFE
cs=0x1a2;eip=0x002b01; 	T(MOV(ds, bx));	// 5390 mov     ds, bx ;~ 01A2:2B01
cs=0x1a2;eip=0x002b03; 	T(MOVZX(bx, ch));	// 5391 movzx   bx, ch ;~ 01A2:2B03
cs=0x1a2;eip=0x002b06; 	T(CMP(bx, word_245d4));	// 5392 cmp     bx, word_245D4 ;~ 01A2:2B06
cs=0x1a2;eip=0x002b0a; 	J(JNC(loc_12b16));	// 5393 jnb     short loc_12B16 ;~ 01A2:2B0A
cs=0x1a2;eip=0x002b0c; 	T(IMUL2_2(bx,80));	// 5394 imul    bx, 80 ;~ 01A2:2B0C
cs=0x1a2;eip=0x002b0f; 	T(ADD(bx, offset(seg003,_volume_25908)));	// 5395 add     bx, offset _volume_25908 ;~ 01A2:2B0F
cs=0x1a2;eip=0x002b13; 	J(CALL(_eff_13a43,0));	// 5396 call    _eff_13A43 ;~ 01A2:2B13
loc_12b16:
	// 4726 
cs=0x1a2;eip=0x002b16; 	X(POP(ds));	// 5399 pop     ds ;~ 01A2:2B16
cs=0x1a2;eip=0x002b17; 	J(RETF(0));	// 5400 retf ;~ 01A2:2B17

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::kloc_12b16: 	goto loc_12b16;
        case m2c::ksub_12afd: 	goto sub_12afd;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_12b18(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_12b18:
    _begin:
cs=0x1a2;eip=0x002b18; 	X(PUSH(ax));	// 5409 push    ax ;~ 01A2:2B18
cs=0x1a2;eip=0x002b19; 	X(PUSH(ds));	// 5410 push    ds ;~ 01A2:2B19
cs=0x1a2;eip=0x002b1a; 	X(PUSH(es));	// 5411 push    es ;~ 01A2:2B1A
cs=0x1a2;eip=0x002b1b; 	T(MOV(ax, seg_offset(seg003)));	// 5412 mov     ax, seg seg003 ;~ 01A2:2B1B
cs=0x1a2;eip=0x002b1e; 	T(MOV(es, ax));	// 5413 mov     es, ax ;~ 01A2:2B1E
cs=0x1a2;eip=0x002b20; 	T(MOV(di, offset(seg003,dword_27bc8)));	// 5415 mov     di, offset dword_27BC8 ;~ 01A2:2B20
cs=0x1a2;eip=0x002b23; 	T(MOV(cx, 8));	// 5416 mov     cx, 8 ;~ 01A2:2B23
cs=0x1a2;eip=0x002b26; 	T(CLD);	// 5417 cld ;~ 01A2:2B26
	// 5418 rep movsd ;~ 01A2:2B27
cs=0x1a2;eip=0x002b27; 	X(	REP MOVSD);	// 5418 rep movsd ;~ 01A2:2B27
cs=0x1a2;eip=0x002b2a; 	T(MOV(ds, ax));	// 5419 mov     ds, ax ;~ 01A2:2B2A
cs=0x1a2;eip=0x002b2c; 	X(MOV(byte_2461c, 0));	// 5420 mov     byte_2461C, 0 ;~ 01A2:2B2C
cs=0x1a2;eip=0x002b31; 	X(MOV(byte_2461d, 0));	// 5421 mov     byte_2461D, 0 ;~ 01A2:2B31
cs=0x1a2;eip=0x002b36; 	T(MOV(si, offset(seg003,dword_27bc8)));	// 5422 mov     si, offset dword_27BC8 ;~ 01A2:2B36
cs=0x1a2;eip=0x002b39; 	T(MOV(bx, offset(seg003,_volume_25908)));	// 5423 mov     bx, offset _volume_25908 ;~ 01A2:2B39
cs=0x1a2;eip=0x002b3c; 	T(MOV(cx, word_245d4));	// 5424 mov     cx, word_245D4 ;~ 01A2:2B3C
cs=0x1a2;eip=0x002b40; 	T(XOR(al, al));	// 5425 xor     al, al ;~ 01A2:2B40
loc_12b42:
	// 4727 
cs=0x1a2;eip=0x002b42; 	X(PUSH(ax));	// 5428 push    ax ;~ 01A2:2B42
cs=0x1a2;eip=0x002b43; 	X(MOV(*(raddr(ds,bx+0x18)), al));	// 5429 mov     [bx+18h], al ;~ 01A2:2B43
cs=0x1a2;eip=0x002b46; 	T(MOV(al, *(raddr(ds,si))));	// 5430 mov     al, [si] ;~ 01A2:2B46
cs=0x1a2;eip=0x002b48; 	X(MOV(*(raddr(ds,bx+0x3A)), al));	// 5431 mov     [bx+3Ah], al ;~ 01A2:2B48
cs=0x1a2;eip=0x002b4b; 	T(TEST(_sndflags_24622, 4));	// 5432 test    _sndflags_24622, 4 ;~ 01A2:2B4B
cs=0x1a2;eip=0x002b50; 	J(JNZ(loc_12b5f));	// 5433 jnz     short loc_12B5F ;~ 01A2:2B50
cs=0x1a2;eip=0x002b52; 	T(CMP(al, 0x40));	// 5434 cmp     al, 40h ; '@' ;~ 01A2:2B52
cs=0x1a2;eip=0x002b54; 	T(MOV(al, 0));	// 5435 mov     al, 0 ;~ 01A2:2B54
cs=0x1a2;eip=0x002b56; 	J(JC(loc_12b5a));	// 5436 jb      short loc_12B5A ;~ 01A2:2B56
cs=0x1a2;eip=0x002b58; 	T(MOV(al, 0x80));	// 5437 mov     al, 80h ; '€' ;~ 01A2:2B58
loc_12b5a:
	// 4728 
cs=0x1a2;eip=0x002b5a; 	X(MOV(*(raddr(ds,bx+0x3A)), al));	// 5440 mov     [bx+3Ah], al ;~ 01A2:2B5A
cs=0x1a2;eip=0x002b5d; 	J(JMP(loc_12b62));	// 5441 jmp     short loc_12B62 ;~ 01A2:2B5D
loc_12b5f:
	// 4729 
cs=0x1a2;eip=0x002b5f; 	J(CALL(_gravis_13a6a,0));	// 5445 call    _gravis_13A6A ;~ 01A2:2B5F
loc_12b62:
	// 4730 
cs=0x1a2;eip=0x002b62; 	T(MOV(al, *(raddr(ds,bx+0x3A))));	// 5448 mov     al, [bx+3Ah] ;~ 01A2:2B62
cs=0x1a2;eip=0x002b65; 	T(CMP(al, 0));	// 5449 cmp     al, 0 ;~ 01A2:2B65
cs=0x1a2;eip=0x002b67; 	J(JZ(loc_12b71));	// 5450 jz      short loc_12B71 ;~ 01A2:2B67
cs=0x1a2;eip=0x002b69; 	X(INC(byte_2461d));	// 5451 inc     byte_2461D ;~ 01A2:2B69
cs=0x1a2;eip=0x002b6d; 	T(CMP(al, 0x80));	// 5452 cmp     al, 80h ; '€' ;~ 01A2:2B6D
cs=0x1a2;eip=0x002b6f; 	J(JZ(loc_12b75));	// 5453 jz      short loc_12B75 ;~ 01A2:2B6F
loc_12b71:
	// 4731 
cs=0x1a2;eip=0x002b71; 	X(INC(byte_2461c));	// 5456 inc     byte_2461C ;~ 01A2:2B71
loc_12b75:
	// 4732 
cs=0x1a2;eip=0x002b75; 	X(POP(ax));	// 5459 pop     ax ;~ 01A2:2B75
cs=0x1a2;eip=0x002b76; 	T(ADD(bx, 80));	// 5460 add     bx, 80 ;~ 01A2:2B76
cs=0x1a2;eip=0x002b79; 	T(INC(si));	// 5461 inc     si ;~ 01A2:2B79
cs=0x1a2;eip=0x002b7a; 	T(INC(al));	// 5462 inc     al ;~ 01A2:2B7A
cs=0x1a2;eip=0x002b7c; 	T(DEC(cx));	// 5463 dec     cx ;~ 01A2:2B7C
cs=0x1a2;eip=0x002b7d; 	J(JNZ(loc_12b42));	// 5464 jnz     short loc_12B42 ;~ 01A2:2B7D
cs=0x1a2;eip=0x002b7f; 	X(POP(es));	// 5465 pop     es ;~ 01A2:2B7F
cs=0x1a2;eip=0x002b80; 	X(POP(ds));	// 5467 pop     ds ;~ 01A2:2B80
cs=0x1a2;eip=0x002b81; 	X(POP(ax));	// 5468 pop     ax ;~ 01A2:2B81
cs=0x1a2;eip=0x002b82; 	J(RETF(0));	// 5469 retf ;~ 01A2:2B82

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::kloc_12b42: 	goto loc_12b42;
        case m2c::kloc_12b5a: 	goto loc_12b5a;
        case m2c::kloc_12b5f: 	goto loc_12b5f;
        case m2c::kloc_12b62: 	goto loc_12b62;
        case m2c::kloc_12b71: 	goto loc_12b71;
        case m2c::kloc_12b75: 	goto loc_12b75;
        case m2c::ksub_12b18: 	goto sub_12b18;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_12b83(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_12b83:
    _begin:
cs=0x1a2;eip=0x002b83; 	X(PUSH(ax));	// 5477 push    ax ;~ 01A2:2B83
cs=0x1a2;eip=0x002b84; 	X(PUSH(ds));	// 5478 push    ds ;~ 01A2:2B84
cs=0x1a2;eip=0x002b85; 	T(MOV(bx, seg_offset(seg003)));	// 5479 mov     bx, seg seg003 ;~ 01A2:2B85
cs=0x1a2;eip=0x002b88; 	T(MOV(ds, bx));	// 5480 mov     ds, bx ;~ 01A2:2B88
cs=0x1a2;eip=0x002b8a; 	T(XOR(ah, ah));	// 5481 xor     ah, ah ;~ 01A2:2B8A
cs=0x1a2;eip=0x002b8c; 	T(CMP(al, 0x20));	// 5482 cmp     al, 20h ; ' ' ;~ 01A2:2B8C
cs=0x1a2;eip=0x002b8e; 	J(JC(loc_12b92));	// 5483 jb      short loc_12B92 ;~ 01A2:2B8E
cs=0x1a2;eip=0x002b90; 	T(MOV(al, 0x20));	// 5484 mov     al, 20h ; ' ' ;~ 01A2:2B90
loc_12b92:
	// 4733 
cs=0x1a2;eip=0x002b92; 	T(CMP(al, 2));	// 5487 cmp     al, 2 ;~ 01A2:2B92
cs=0x1a2;eip=0x002b94; 	J(JA(loc_12b98));	// 5488 ja      short loc_12B98 ;~ 01A2:2B94
cs=0x1a2;eip=0x002b96; 	T(MOV(al, 2));	// 5489 mov     al, 2 ;~ 01A2:2B96
loc_12b98:
	// 4734 
cs=0x1a2;eip=0x002b98; 	X(MOV(word_245d4, ax));	// 5492 mov     word_245D4, ax ;~ 01A2:2B98
cs=0x1a2;eip=0x002b9b; 	T(MOV(di, offset(seg003,_volume_25908)));	// 5493 mov     di, offset _volume_25908 ;~ 01A2:2B9B
cs=0x1a2;eip=0x002b9e; 	T(MOV(cx, word_245d4));	// 5494 mov     cx, word_245D4 ;~ 01A2:2B9E
cs=0x1a2;eip=0x002ba2; 	T(XOR(dx, dx));	// 5495 xor     dx, dx ;~ 01A2:2BA2
cs=0x1a2;eip=0x002ba4; 	T(XOR(bx, bx));	// 5496 xor     bx, bx ;~ 01A2:2BA4
loc_12ba6:
	// 4735 
cs=0x1a2;eip=0x002ba6; 	T(CMP(*(raddr(ds,di+0x1D)), 0));	// 5499 cmp     byte ptr [di+1Dh], 0 ;~ 01A2:2BA6
cs=0x1a2;eip=0x002baa; 	J(JNZ(loc_12bb3));	// 5500 jnz     short loc_12BB3 ;~ 01A2:2BAA
cs=0x1a2;eip=0x002bac; 	X(MOV(*(raddr(ds,di+0x18)), dl));	// 5501 mov     [di+18h], dl ;~ 01A2:2BAC
cs=0x1a2;eip=0x002baf; 	T(INC(dl));	// 5502 inc     dl ;~ 01A2:2BAF
cs=0x1a2;eip=0x002bb1; 	J(JMP(loc_12bcb));	// 5503 jmp     short loc_12BCB ;~ 01A2:2BB1
loc_12bb3:
	// 4736 
cs=0x1a2;eip=0x002bb3; 	T(CMP(*(raddr(ds,di+0x1D)), 1));	// 5507 cmp     byte ptr [di+1Dh], 1 ;~ 01A2:2BB3
cs=0x1a2;eip=0x002bb7; 	J(JNZ(loc_12bc0));	// 5508 jnz     short loc_12BC0 ;~ 01A2:2BB7
cs=0x1a2;eip=0x002bb9; 	X(MOV(*(raddr(ds,di+0x18)), dh));	// 5509 mov     [di+18h], dh ;~ 01A2:2BB9
cs=0x1a2;eip=0x002bbc; 	T(INC(dh));	// 5510 inc     dh ;~ 01A2:2BBC
cs=0x1a2;eip=0x002bbe; 	J(JMP(loc_12bcb));	// 5511 jmp     short loc_12BCB ;~ 01A2:2BBE
loc_12bc0:
	// 4737 
cs=0x1a2;eip=0x002bc0; 	T(CMP(*(raddr(ds,di+0x1D)), 2));	// 5515 cmp     byte ptr [di+1Dh], 2 ;~ 01A2:2BC0
cs=0x1a2;eip=0x002bc4; 	J(JNZ(loc_12bcb));	// 5516 jnz     short loc_12BCB ;~ 01A2:2BC4
cs=0x1a2;eip=0x002bc6; 	X(MOV(*(raddr(ds,di+0x18)), bl));	// 5517 mov     [di+18h], bl ;~ 01A2:2BC6
cs=0x1a2;eip=0x002bc9; 	T(INC(bl));	// 5518 inc     bl ;~ 01A2:2BC9
loc_12bcb:
	// 4738 
cs=0x1a2;eip=0x002bcb; 	T(ADD(di, 80));	// 5522 add     di, 80 ;~ 01A2:2BCB
cs=0x1a2;eip=0x002bce; 	T(DEC(cx));	// 5523 dec     cx ;~ 01A2:2BCE
cs=0x1a2;eip=0x002bcf; 	J(JNZ(loc_12ba6));	// 5524 jnz     short loc_12BA6 ;~ 01A2:2BCF
cs=0x1a2;eip=0x002bd1; 	T(XOR(ah, ah));	// 5525 xor     ah, ah ;~ 01A2:2BD1
cs=0x1a2;eip=0x002bd3; 	T(MOV(al, dl));	// 5526 mov     al, dl ;~ 01A2:2BD3
cs=0x1a2;eip=0x002bd5; 	X(MOV(word_245d6, ax));	// 5527 mov     word_245D6, ax ;~ 01A2:2BD5
cs=0x1a2;eip=0x002bd8; 	T(MOV(al, dh));	// 5528 mov     al, dh ;~ 01A2:2BD8
cs=0x1a2;eip=0x002bda; 	X(MOV(word_245d8, ax));	// 5529 mov     word_245D8, ax ;~ 01A2:2BDA
cs=0x1a2;eip=0x002bdd; 	T(MOV(al, bl));	// 5530 mov     al, bl ;~ 01A2:2BDD
cs=0x1a2;eip=0x002bdf; 	X(MOV(word_245da, ax));	// 5531 mov     word_245DA, ax ;~ 01A2:2BDF
cs=0x1a2;eip=0x002be2; 	T(TEST(_sndflags_24622, 4));	// 5532 test    _sndflags_24622, 4 ;~ 01A2:2BE2
cs=0x1a2;eip=0x002be7; 	J(JZ(loc_12bef));	// 5533 jz      short loc_12BEF ;~ 01A2:2BE7
cs=0x1a2;eip=0x002be9; 	T(MOV(ax, word_245d6));	// 5534 mov     ax, word_245D6 ;~ 01A2:2BE9
cs=0x1a2;eip=0x002bec; 	J(CALL(_gravis_18079,0));	// 5535 call    _gravis_18079 ;~ 01A2:2BEC
loc_12bef:
	// 4739 
cs=0x1a2;eip=0x002bef; 	J(CALL(sub_13044,0));	// 5538 call    sub_13044 ;~ 01A2:2BEF
cs=0x1a2;eip=0x002bf2; 	J(CALL(_someplaymode,0));	// 5539 call    _someplaymode ;~ 01A2:2BF2
cs=0x1a2;eip=0x002bf5; 	X(POP(ds));	// 5540 pop     ds ;~ 01A2:2BF5
cs=0x1a2;eip=0x002bf6; 	X(POP(ax));	// 5541 pop     ax ;~ 01A2:2BF6
cs=0x1a2;eip=0x002bf7; 	J(RETF(0));	// 5542 retf ;~ 01A2:2BF7

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::kloc_12b92: 	goto loc_12b92;
        case m2c::kloc_12b98: 	goto loc_12b98;
        case m2c::kloc_12ba6: 	goto loc_12ba6;
        case m2c::kloc_12bb3: 	goto loc_12bb3;
        case m2c::kloc_12bc0: 	goto loc_12bc0;
        case m2c::kloc_12bcb: 	goto loc_12bcb;
        case m2c::kloc_12bef: 	goto loc_12bef;
        case m2c::ksub_12b83: 	goto sub_12b83;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _someplaymode(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _someplaymode:
    _begin:
cs=0x1a2;eip=0x002bf8; 	T(MOV(edx, 3));	// 5551 mov     edx, 3 ;~ 01A2:2BF8
cs=0x1a2;eip=0x002bfe; 	T(MOV(eax, 1775763456));	// 5552 mov     eax, 1775763456 ;~ 01A2:2BFE
cs=0x1a2;eip=0x002c04; 	T(MOV(ecx, 0x369D800));	// 5553 mov     ecx, 369D800h ;~ 01A2:2C04
cs=0x1a2;eip=0x002c0a; 	T(CMP(byte_2461a, 0));	// 5554 cmp     byte_2461A, 0 ;~ 01A2:2C0A
cs=0x1a2;eip=0x002c0f; 	J(JNZ(loc_12c3c));	// 5555 jnz     short loc_12C3C ;~ 01A2:2C0F
cs=0x1a2;eip=0x002c11; 	T(MOV(edx, 3));	// 5556 mov     edx, 3 ;~ 01A2:2C11
cs=0x1a2;eip=0x002c17; 	T(MOV(eax, 1643177984));	// 5557 mov     eax, 1643177984 ;~ 01A2:2C17
cs=0x1a2;eip=0x002c1d; 	T(MOV(ecx, 0x361F0F0));	// 5558 mov     ecx, 361F0F0h ;~ 01A2:2C1D
cs=0x1a2;eip=0x002c23; 	T(TEST(_flag_playsetttings, 8));	// 5559 test    _flag_playsetttings, 8 ;~ 01A2:2C23
cs=0x1a2;eip=0x002c28; 	J(JNZ(loc_12c3c));	// 5560 jnz     short loc_12C3C ;~ 01A2:2C28
cs=0x1a2;eip=0x002c2a; 	T(MOV(edx, 3));	// 5561 mov     edx, 3 ;~ 01A2:2C2A
cs=0x1a2;eip=0x002c30; 	T(MOV(eax, 1776914432));	// 5562 mov     eax, 1776914432 ;~ 01A2:2C30
cs=0x1a2;eip=0x002c36; 	T(MOV(ecx, 0x369E990));	// 5563 mov     ecx, 369E990h ;~ 01A2:2C36
loc_12c3c:
	// 4740 
cs=0x1a2;eip=0x002c3c; 	X(MOV(dword_245c0, ecx));	// 5567 mov     dword_245C0, ecx ;~ 01A2:2C3C
cs=0x1a2;eip=0x002c41; 	T(MOVZX(edi, _freq1));	// 5568 movzx   edi, _freq1 ;~ 01A2:2C41
cs=0x1a2;eip=0x002c47; 	T(MOV(cl, byte_2461a));	// 5569 mov     cl, byte_2461A ;~ 01A2:2C47
cs=0x1a2;eip=0x002c4b; 	T(SHL(edi, cl));	// 5570 shl     edi, cl ;~ 01A2:2C4B
cs=0x1a2;eip=0x002c4e; 	T(DIV4(edi));	// 5571 div     edi ;~ 01A2:2C4E
cs=0x1a2;eip=0x002c51; 	X(MOV(dword_245bc, eax));	// 5572 mov     dword_245BC, eax ;~ 01A2:2C51
cs=0x1a2;eip=0x002c55; 	T(TEST(_sndflags_24622, 4));	// 5573 test    _sndflags_24622, 4 ;~ 01A2:2C55
cs=0x1a2;eip=0x002c5a; 	J(JZ(loc_12c86));	// 5574 jz      short loc_12C86 ;~ 01A2:2C5A
cs=0x1a2;eip=0x002c5c; 	T(MOVZX(ecx, byte_24629));	// 5575 movzx   ecx, byte_24629 ;~ 01A2:2C5C
cs=0x1a2;eip=0x002c62; 	T(MOV(eax, 385532977));	// 5576 mov     eax, 385532977 ;~ 01A2:2C62
cs=0x1a2;eip=0x002c68; 	T(TEST(_flag_playsetttings, 8));	// 5577 test    _flag_playsetttings, 8 ;~ 01A2:2C68
cs=0x1a2;eip=0x002c6d; 	J(JNZ(loc_12c75));	// 5578 jnz     short loc_12C75 ;~ 01A2:2C6D
cs=0x1a2;eip=0x002c6f; 	T(MOV(eax, 389081954));	// 5579 mov     eax, 389081954 ;~ 01A2:2C6F
loc_12c75:
	// 4741 
cs=0x1a2;eip=0x002c75; 	T(MUL1_4(ecx));	// 5582 mul     ecx ;~ 01A2:2C75
cs=0x1a2;eip=0x002c78; 	T(MOV(cl, 12));	// 5583 mov     cl, 12 ;~ 01A2:2C78
cs=0x1a2;eip=0x002c7a; 	T(ADD(cl, byte_2461a));	// 5584 add     cl, byte_2461A ;~ 01A2:2C7A
cs=0x1a2;eip=0x002c7e; 	T(SHRD(eax, edx, cl));	// 5585 shrd    eax, edx, cl ;~ 01A2:2C7E
cs=0x1a2;eip=0x002c82; 	X(MOV(dword_2463c, eax));	// 5586 mov     dword_2463C, eax ;~ 01A2:2C82
loc_12c86:
	// 4742 
cs=0x1a2;eip=0x002c86; 	T(MOV(di, offset(seg003,_volume_25908)));	// 5589 mov     di, offset _volume_25908 ;~ 01A2:2C86
cs=0x1a2;eip=0x002c89; 	T(MOV(cx, word_245d4));	// 5590 mov     cx, word_245D4 ;~ 01A2:2C89
cs=0x1a2;eip=0x002c8d; 	T(XOR(ax, ax));	// 5591 xor     ax, ax ;~ 01A2:2C8D
loc_12c8f:
	// 4743 
cs=0x1a2;eip=0x002c8f; 	X(MOV(*(dw*)(raddr(ds,di+0x3E)), ax));	// 5594 mov     [di+3Eh], ax ;~ 01A2:2C8F
cs=0x1a2;eip=0x002c92; 	T(ADD(di, 0x50));	// 5595 add     di, 50h ; 'P' ;~ 01A2:2C92
cs=0x1a2;eip=0x002c95; 	T(DEC(cx));	// 5596 dec     cx ;~ 01A2:2C95
cs=0x1a2;eip=0x002c96; 	J(JNZ(loc_12c8f));	// 5597 jnz     short loc_12C8F ;~ 01A2:2C96
cs=0x1a2;eip=0x002c98; 	J(RETN(0));	// 5598 retn ;~ 01A2:2C98

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_someplaymode: 	goto _someplaymode;
        case m2c::kloc_12c3c: 	goto loc_12c3c;
        case m2c::kloc_12c75: 	goto loc_12c75;
        case m2c::kloc_12c86: 	goto loc_12c86;
        case m2c::kloc_12c8f: 	goto loc_12c8f;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _getset_playstate(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _getset_playstate:
    _begin:
cs=0x1a2;eip=0x002c99; 	X(PUSH(bx));	// 5608 push    bx ;~ 01A2:2C99
cs=0x1a2;eip=0x002c9a; 	X(PUSH(ds));	// 5609 push    ds ;~ 01A2:2C9A
cs=0x1a2;eip=0x002c9b; 	T(MOV(bx, seg_offset(seg003)));	// 5610 mov     bx, seg seg003 ;~ 01A2:2C9B
cs=0x1a2;eip=0x002c9e; 	T(MOV(ds, bx));	// 5611 mov     ds, bx ;~ 01A2:2C9E
cs=0x1a2;eip=0x002ca0; 	T(CMP(al, 0x0FF));	// 5613 cmp     al, 0FFh ;~ 01A2:2CA0
cs=0x1a2;eip=0x002ca2; 	J(JZ(loc_12ca7));	// 5614 jz      short loc_12CA7 ;~ 01A2:2CA2
cs=0x1a2;eip=0x002ca4; 	X(MOV(_play_state, al));	// 5615 mov     _play_state, al ;~ 01A2:2CA4
loc_12ca7:
	// 4744 
cs=0x1a2;eip=0x002ca7; 	T(MOV(al, _play_state));	// 5618 mov     al, _play_state ;~ 01A2:2CA7
cs=0x1a2;eip=0x002caa; 	X(POP(ds));	// 5619 pop     ds ;~ 01A2:2CAA
cs=0x1a2;eip=0x002cab; 	X(POP(bx));	// 5621 pop     bx ;~ 01A2:2CAB
cs=0x1a2;eip=0x002cac; 	J(RETF(0));	// 5622 retf ;~ 01A2:2CAC

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_getset_playstate: 	goto _getset_playstate;
        case m2c::kloc_12ca7: 	goto loc_12ca7;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_12cad(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_12cad:
    _begin:
cs=0x1a2;eip=0x002cad; 	X(PUSH(ds));	// 5631 push    ds ;~ 01A2:2CAD
cs=0x1a2;eip=0x002cae; 	X(PUSH(es));	// 5632 push    es ;~ 01A2:2CAE
cs=0x1a2;eip=0x002caf; 	T(MOV(ax, seg_offset(seg003)));	// 5633 mov     ax, seg seg003 ;~ 01A2:2CAF
cs=0x1a2;eip=0x002cb2; 	T(MOV(ds, ax));	// 5634 mov     ds, ax ;~ 01A2:2CB2
cs=0x1a2;eip=0x002cb4; 	T(MOV(es, ax));	// 5636 mov     es, ax ;~ 01A2:2CB4
cs=0x1a2;eip=0x002cb6; 	T(MOV(si, offset(seg003,word_246a6)));	// 5638 mov     si, offset word_246A6 ;~ 01A2:2CB6
cs=0x1a2;eip=0x002cb9; 	T(MOV(al, ch));	// 5639 mov     al, ch ;~ 01A2:2CB9
cs=0x1a2;eip=0x002cbb; 	T(OR(al, 0x0E0));	// 5640 or      al, 0E0h ;~ 01A2:2CBB
cs=0x1a2;eip=0x002cbd; 	X(MOV(word_246a9, bx));	// 5641 mov     word_246A9, bx ;~ 01A2:2CBD
cs=0x1a2;eip=0x002cc1; 	X(MOV(byte_246a8, cl));	// 5642 mov     byte_246A8, cl ;~ 01A2:2CC1
cs=0x1a2;eip=0x002cc5; 	X(MOV(word_246a6, dx));	// 5643 mov     word_246A6, dx ;~ 01A2:2CC5
cs=0x1a2;eip=0x002cc9; 	J(CALL(sub_13623,0));	// 5644 call    sub_13623 ;~ 01A2:2CC9
cs=0x1a2;eip=0x002ccc; 	X(POP(es));	// 5645 pop     es ;~ 01A2:2CCC
cs=0x1a2;eip=0x002ccd; 	X(POP(ds));	// 5647 pop     ds ;~ 01A2:2CCD
cs=0x1a2;eip=0x002cce; 	J(RETF(0));	// 5648 retf ;~ 01A2:2CCE

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::ksub_12cad: 	goto sub_12cad;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _read_sndsettings(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _read_sndsettings:
    _begin:
cs=0x1a2;eip=0x002ccf; 	X(PUSH(ds));	// 5658 push    ds ;~ 01A2:2CCF
cs=0x1a2;eip=0x002cd0; 	T(MOV(ax, seg_offset(seg003)));	// 5659 mov     ax, seg seg003 ;~ 01A2:2CD0
cs=0x1a2;eip=0x002cd3; 	T(MOV(ds, ax));	// 5660 mov     ds, ax ;~ 01A2:2CD3
cs=0x1a2;eip=0x002cd5; 	T(MOV(al, _sndcard_type));	// 5662 mov     al, _sndcard_type ;~ 01A2:2CD5
cs=0x1a2;eip=0x002cd8; 	T(MOV(dx, _snd_base_port));	// 5663 mov     dx, _snd_base_port ;~ 01A2:2CD8
cs=0x1a2;eip=0x002cdc; 	T(MOV(cl, _irq_number));	// 5664 mov     cl, _irq_number ;~ 01A2:2CDC
cs=0x1a2;eip=0x002ce0; 	T(MOV(ch, _dma_channel));	// 5665 mov     ch, _dma_channel ;~ 01A2:2CE0
cs=0x1a2;eip=0x002ce4; 	T(MOV(ah, _freq_246d7));	// 5666 mov     ah, _freq_246D7 ;~ 01A2:2CE4
cs=0x1a2;eip=0x002ce8; 	T(MOV(bl, byte_246d8));	// 5667 mov     bl, byte_246D8 ;~ 01A2:2CE8
cs=0x1a2;eip=0x002cec; 	T(MOV(bh, byte_246d9));	// 5668 mov     bh, byte_246D9 ;~ 01A2:2CEC
cs=0x1a2;eip=0x002cf0; 	T(MOV(bp, _freq1));	// 5669 mov     bp, _freq1 ;~ 01A2:2CF0
cs=0x1a2;eip=0x002cf4; 	T(TEST(_sndflags_24622, 4));	// 5670 test    _sndflags_24622, 4 ;~ 01A2:2CF4
cs=0x1a2;eip=0x002cf9; 	J(JZ(loc_12cff));	// 5671 jz      short loc_12CFF ;~ 01A2:2CF9
cs=0x1a2;eip=0x002cfb; 	T(MOV(bp, _freq2));	// 5672 mov     bp, _freq2 ;~ 01A2:2CFB
loc_12cff:
	// 4745 
cs=0x1a2;eip=0x002cff; 	T(MOV(si, _config_word));	// 5675 mov     si, _config_word ;~ 01A2:2CFF
cs=0x1a2;eip=0x002d03; 	X(POP(ds));	// 5676 pop     ds ;~ 01A2:2D03
cs=0x1a2;eip=0x002d04; 	J(RETF(0));	// 5678 retf ;~ 01A2:2D04

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_read_sndsettings: 	goto _read_sndsettings;
        case m2c::kloc_12cff: 	goto loc_12cff;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_12d05(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_12d05:
    _begin:
cs=0x1a2;eip=0x002d05; 	X(PUSH(ds));	// 5687 push    ds ;~ 01A2:2D05
cs=0x1a2;eip=0x002d06; 	X(PUSH(di));	// 5688 push    di ;~ 01A2:2D06
cs=0x1a2;eip=0x002d07; 	X(PUSH(es));	// 5689 push    es ;~ 01A2:2D07
cs=0x1a2;eip=0x002d08; 	T(MOV(ax, seg_offset(seg003)));	// 5690 mov     ax, seg seg003 ;~ 01A2:2D08
cs=0x1a2;eip=0x002d0b; 	T(MOV(ds, ax));	// 5691 mov     ds, ax ;~ 01A2:2D0B
cs=0x1a2;eip=0x002d0d; 	T(MOV(si, offset(seg003,_adevicenotiniti)));	// 5693 mov     si, offset _aDeviceNotIniti ; "Device not initialised!" ;~ 01A2:2D0D
cs=0x1a2;eip=0x002d10; 	T(CMP(_snd_init, 1));	// 5694 cmp     _snd_init, 1 ;~ 01A2:2D10
cs=0x1a2;eip=0x002d15; 	J(JNZ(loc_12d2e));	// 5695 jnz     short loc_12D2E ;~ 01A2:2D15
cs=0x1a2;eip=0x002d17; 	T(MOVZX(si, _sndcard_type));	// 5696 movzx   si, _sndcard_type ;~ 01A2:2D17
cs=0x1a2;eip=0x002d1c; 	T(SHL(si, 1));	// 5697 shl     si, 1 ;~ 01A2:2D1C
cs=0x1a2;eip=0x002d1e; 	T(MOV(si, *(dw*)(((db*)&_sndcards_text_tbl)+si)));	// 5698 mov     si, _sndcards_text_tbl[si] ;~ 01A2:2D1E
cs=0x1a2;eip=0x002d22; 	T(MOV(di, offset(seg003,_chrin)));	// 5699 mov     di, offset _chrin ;~ 01A2:2D22
cs=0x1a2;eip=0x002d25; 	J(CALL(_myasmsprintf,0));	// 5700 call    _myasmsprintf ;~ 01A2:2D25
cs=0x1a2;eip=0x002d28; 	X(MOV(*(raddr(ds,di)), 0));	// 5701 mov     byte ptr [di], 0 ;~ 01A2:2D28
cs=0x1a2;eip=0x002d2b; 	T(MOV(si, offset(seg003,_chrin)));	// 5702 mov     si, offset _chrin ;~ 01A2:2D2B
loc_12d2e:
	// 4746 
cs=0x1a2;eip=0x002d2e; 	X(POP(es));	// 5705 pop     es ;~ 01A2:2D2E
cs=0x1a2;eip=0x002d2f; 	X(POP(di));	// 5707 pop     di ;~ 01A2:2D2F
cs=0x1a2;eip=0x002d30; 	J(CALL(_strcpy_count_0,0));	// 5708 call    _strcpy_count_0 ;~ 01A2:2D30
cs=0x1a2;eip=0x002d33; 	X(POP(ds));	// 5709 pop     ds ;~ 01A2:2D33
cs=0x1a2;eip=0x002d34; 	J(RETF(0));	// 5711 retf ;~ 01A2:2D34

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::kloc_12d2e: 	goto loc_12d2e;
        case m2c::ksub_12d05: 	goto sub_12d05;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_12d35(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_12d35:
    _begin:
cs=0x1a2;eip=0x002d35; 	X(PUSH(ax));	// 5720 push    ax ;~ 01A2:2D35
cs=0x1a2;eip=0x002d36; 	X(PUSH(bx));	// 5721 push    bx ;~ 01A2:2D36
cs=0x1a2;eip=0x002d37; 	X(PUSH(ds));	// 5722 push    ds ;~ 01A2:2D37
cs=0x1a2;eip=0x002d38; 	T(MOV(bx, seg_offset(seg003)));	// 5723 mov     bx, seg seg003 ;~ 01A2:2D38
cs=0x1a2;eip=0x002d3b; 	T(MOV(ds, bx));	// 5724 mov     ds, bx ;~ 01A2:2D3B
cs=0x1a2;eip=0x002d3d; 	T(CMP(al, 1));	// 5726 cmp     al, 1 ;~ 01A2:2D3D
cs=0x1a2;eip=0x002d3f; 	J(JZ(loc_12d4e));	// 5727 jz      short loc_12D4E ;~ 01A2:2D3F
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x002d41; 	X(MOV(*(&byte_14f71), 0));	// 5728 mov     cs:byte_14F71, 0 ;~ 01A2:2D41
cs=0x1a2;eip=0x002d47; 	J(CALL(_setmemalloc1,0));	// 5729 call    _setmemalloc1 ;~ 01A2:2D47
cs=0x1a2;eip=0x002d4a; 	X(POP(ds));	// 5730 pop     ds ;~ 01A2:2D4A
cs=0x1a2;eip=0x002d4b; 	X(POP(bx));	// 5731 pop     bx ;~ 01A2:2D4B
cs=0x1a2;eip=0x002d4c; 	X(POP(ax));	// 5732 pop     ax ;~ 01A2:2D4C
cs=0x1a2;eip=0x002d4d; 	J(RETF(0));	// 5733 retf ;~ 01A2:2D4D
loc_12d4e:
	// 4747 
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x002d4e; 	X(MOV(*(&byte_14f71), 1));	// 5737 mov     cs:byte_14F71, 1 ;~ 01A2:2D4E
cs=0x1a2;eip=0x002d54; 	T(MOV(ax, word_2460c));	// 5738 mov     ax, word_2460C ;~ 01A2:2D54
cs=0x1a2;eip=0x002d57; 	J(CALL(_setmemallocstrat,0));	// 5739 call    _setmemallocstrat ;~ 01A2:2D57
cs=0x1a2;eip=0x002d5a; 	J(CALL(_initclockfromrtc,0));	// 5740 call    _initclockfromrtc ;~ 01A2:2D5A
cs=0x1a2;eip=0x002d5d; 	X(POP(ds));	// 5741 pop     ds ;~ 01A2:2D5D
cs=0x1a2;eip=0x002d5e; 	X(POP(bx));	// 5742 pop     bx ;~ 01A2:2D5E
cs=0x1a2;eip=0x002d5f; 	X(POP(ax));	// 5743 pop     ax ;~ 01A2:2D5F
cs=0x1a2;eip=0x002d60; 	J(RETF(0));	// 5744 retf ;~ 01A2:2D60

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::kloc_12d4e: 	goto loc_12d4e;
        case m2c::ksub_12d35: 	goto sub_12d35;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _useless_12d61(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _useless_12d61:
    _begin:
cs=0x1a2;eip=0x002d61; 	X(PUSH(ds));	// 5752 push    ds ;~ 01A2:2D61
cs=0x1a2;eip=0x002d62; 	T(MOV(ax, seg_offset(seg003)));	// 5753 mov     ax, seg seg003 ;~ 01A2:2D62
cs=0x1a2;eip=0x002d65; 	T(MOV(ds, ax));	// 5754 mov     ds, ax ;~ 01A2:2D65
cs=0x1a2;eip=0x002d67; 	T(MOV(ax, -1));	// 5755 mov     ax, -1 ;~ 01A2:2D67
cs=0x1a2;eip=0x002d6a; 	X(MOV(_snd_base_port, ax));	// 5756 mov     _snd_base_port, ax ;~ 01A2:2D6A
cs=0x1a2;eip=0x002d6d; 	X(MOV(_irq_number, al));	// 5757 mov     _irq_number, al ;~ 01A2:2D6D
cs=0x1a2;eip=0x002d70; 	X(MOV(_dma_channel, al));	// 5758 mov     _dma_channel, al ;~ 01A2:2D70
cs=0x1a2;eip=0x002d73; 	X(MOV(byte_246d8, al));	// 5759 mov     byte_246D8, al ;~ 01A2:2D73
cs=0x1a2;eip=0x002d76; 	X(MOV(byte_246d9, al));	// 5760 mov     byte_246D9, al ;~ 01A2:2D76
cs=0x1a2;eip=0x002d79; 	X(MOV(_sndcard_type, 0));	// 5761 mov     _sndcard_type, 0 ;~ 01A2:2D79
cs=0x1a2;eip=0x002d7e; 	J(CALL(_useless_17eec,0));	// 5762 call    _useless_17EEC ;~ 01A2:2D7E
cs=0x1a2;eip=0x002d81; 	J(JNC(loc_12da3));	// 5763 jnb     short loc_12DA3 ;~ 01A2:2D81
cs=0x1a2;eip=0x002d83; 	J(CALL(_sb16_detect_port,0));	// 5764 call    _sb16_detect_port ;~ 01A2:2D83
cs=0x1a2;eip=0x002d86; 	J(JC(loc_12da3));	// 5765 jb      short loc_12DA3 ;~ 01A2:2D86
cs=0x1a2;eip=0x002d88; 	X(MOV(_sndcard_type, 3));	// 5766 mov     _sndcard_type, 3 ;~ 01A2:2D88
cs=0x1a2;eip=0x002d8d; 	T(CMP(ah, 4));	// 5767 cmp     ah, 4 ;~ 01A2:2D8D
cs=0x1a2;eip=0x002d90; 	J(JNC(loc_12da3));	// 5768 jnb     short loc_12DA3 ;~ 01A2:2D90
cs=0x1a2;eip=0x002d92; 	X(MOV(_sndcard_type, 4));	// 5769 mov     _sndcard_type, 4 ;~ 01A2:2D92
cs=0x1a2;eip=0x002d97; 	T(CMP(ah, 3));	// 5770 cmp     ah, 3 ;~ 01A2:2D97
cs=0x1a2;eip=0x002d9a; 	J(JNC(loc_12da3));	// 5771 jnb     short loc_12DA3 ;~ 01A2:2D9A
cs=0x1a2;eip=0x002d9c; 	X(MOV(_sndcard_type, 5));	// 5772 mov     _sndcard_type, 5 ;~ 01A2:2D9C
cs=0x1a2;eip=0x002da1; 	J({;});	// 5773 jmp     short $+2 ;~ 01A2:2DA1
loc_12da3:
	// 4748 
cs=0x1a2;eip=0x002da3; 	T(MOV(al, _sndcard_type));	// 5778 mov     al, _sndcard_type ;~ 01A2:2DA3
cs=0x1a2;eip=0x002da6; 	X(POP(ds));	// 5779 pop     ds ;~ 01A2:2DA6
cs=0x1a2;eip=0x002da7; 	J(RETN(0));	// 5780 retn ;~ 01A2:2DA7

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_useless_12d61: 	goto _useless_12d61;
        case m2c::kloc_12da3: 	goto loc_12da3;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group4(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group4:
    _begin:
sub_12da8:
	// 5788 
cs=0x1a2;eip=0x002da8; 	X(PUSHF);	// 5789 pushf ;~ 01A2:2DA8
cs=0x1a2;eip=0x002da9; 	T(CLI);	// 5790 cli ;~ 01A2:2DA9
cs=0x1a2;eip=0x002daa; 	X(PUSH(ds));	// 5791 push    ds ;~ 01A2:2DAA
cs=0x1a2;eip=0x002dab; 	T(MOV(bp, seg_offset(seg003)));	// 5792 mov     bp, seg seg003 ;~ 01A2:2DAB
cs=0x1a2;eip=0x002dae; 	T(MOV(ds, bp));	// 5793 mov     ds, bp ;~ 01A2:2DAE
cs=0x1a2;eip=0x002db0; 	X(MOV(_sndcard_type, al));	// 5795 mov     _sndcard_type, al ;~ 01A2:2DB0
cs=0x1a2;eip=0x002db3; 	X(MOV(_snd_base_port, dx));	// 5796 mov     _snd_base_port, dx ;~ 01A2:2DB3
cs=0x1a2;eip=0x002db7; 	X(MOV(_irq_number, cl));	// 5797 mov     _irq_number, cl ;~ 01A2:2DB7
cs=0x1a2;eip=0x002dbb; 	X(MOV(_dma_channel, ch));	// 5798 mov     _dma_channel, ch ;~ 01A2:2DBB
cs=0x1a2;eip=0x002dbf; 	X(MOV(_freq_246d7, ah));	// 5799 mov     _freq_246D7, ah ;~ 01A2:2DBF
cs=0x1a2;eip=0x002dc3; 	X(MOV(byte_246d8, bl));	// 5800 mov     byte_246D8, bl ;~ 01A2:2DC3
cs=0x1a2;eip=0x002dc7; 	X(MOV(byte_246d9, bh));	// 5801 mov     byte_246D9, bh ;~ 01A2:2DC7
cs=0x1a2;eip=0x002dcb; 	T(MOVZX(ax, ah));	// 5802 movzx   ax, ah ;~ 01A2:2DCB
cs=0x1a2;eip=0x002dce; 	T(IMUL2_2(ax,1000));	// 5803 imul    ax, 1000 ;~ 01A2:2DCE
cs=0x1a2;eip=0x002dd2; 	X(MOV(_freq1, ax));	// 5804 mov     _freq1, ax ;~ 01A2:2DD2
cs=0x1a2;eip=0x002dd5; 	X(MOV(_config_word, si));	// 5805 mov     _config_word, si ;~ 01A2:2DD5
cs=0x1a2;eip=0x002dd9; 	T(MOV(ax, di));	// 5806 mov     ax, di ;~ 01A2:2DD9
cs=0x1a2;eip=0x002ddb; 	X(MOV(byte_246dc, 0x4B));	// 5807 mov     byte_246DC, 4Bh ; 'K' ;~ 01A2:2DDB
cs=0x1a2;eip=0x002de0; 	X(MOV(off_245ca, m2c::ksub_13177));	// 5808 mov     off_245CA, offset sub_13177 ;~ 01A2:2DE0
cs=0x1a2;eip=0x002de6; 	X(MOV(off_245c8, m2c::ksub_13429));	// 5809 mov     off_245C8, offset sub_13429 ;~ 01A2:2DE6
cs=0x1a2;eip=0x002dec; 	X(MOV(off_245cc, m2c::ksub_131ef));	// 5810 mov     off_245CC, offset sub_131EF ;~ 01A2:2DEC
cs=0x1a2;eip=0x002df2; 	X(MOV(off_245ce, m2c::ksub_131da));	// 5811 mov     off_245CE, offset sub_131DA ;~ 01A2:2DF2
cs=0x1a2;eip=0x002df8; 	X(MOV(byte_24623, 0));	// 5812 mov     byte_24623, 0 ;~ 01A2:2DF8
cs=0x1a2;eip=0x002dfd; 	X(MOV(_bit_mode, 8));	// 5813 mov     _bit_mode, 8 ;~ 01A2:2DFD
cs=0x1a2;eip=0x002e02; 	X(MOV(word_245e8, 0x400));	// 5814 mov     word_245E8, 400h ;~ 01A2:2E02
cs=0x1a2;eip=0x002e08; 	X(MOV(_snd_set_flag, 0));	// 5815 mov     _snd_set_flag, 0 ;~ 01A2:2E08
cs=0x1a2;eip=0x002e0d; 	T(MOV(al, 8));	// 5816 mov     al, 8 ;~ 01A2:2E0D
cs=0x1a2;eip=0x002e0f; 	J(CALL(_getint_vect,0));	// 5817 call    _getint_vect ;~ 01A2:2E0F
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x002e12; 	X(MOV(*(dw*)(((db*)&_int8addr)), bx));	// 5818 mov     word ptr cs:_int8addr, bx ;~ 01A2:2E12
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x002e17; 	X(MOV(*(dw*)(((db*)&_int8addr)+2), dx));	// 5819 mov     word ptr cs:_int8addr+2, dx ;~ 01A2:2E17
cs=0x1a2;eip=0x002e1c; 	X(PUSH(cs));	// 5820 push    cs ;~ 01A2:2E1C
cs=0x1a2;eip=0x002e1d; 	J(CALL(_clean_11c43,0));	// 5821 call    near ptr _clean_11C43 ;~ 01A2:2E1D
cs=0x1a2;eip=0x002e20; 	J(CALL(_snd_initialze,0));	// 5822 call    _snd_initialze ;~ 01A2:2E20
cs=0x1a2;eip=0x002e23; 	J(JC(loc_12eb2));	// 5823 jb      loc_12EB2 ;~ 01A2:2E23
cs=0x1a2;eip=0x002e27; 	J(CALL(_getmemallocstrat,0));	// 5824 call    _getmemallocstrat ;~ 01A2:2E27
cs=0x1a2;eip=0x002e2a; 	X(MOV(word_2460c, ax));	// 5825 mov     word_2460C, ax ;~ 01A2:2E2A
cs=0x1a2;eip=0x002e2d; 	J(CALL(_setmemalloc1,0));	// 5826 call    _setmemalloc1 ;~ 01A2:2E2D
cs=0x1a2;eip=0x002e30; 	T(MOV(al, byte_246dc));	// 5827 mov     al, byte_246DC ;~ 01A2:2E30
cs=0x1a2;eip=0x002e33; 	T(MOV(ah, al));	// 5828 mov     ah, al ;~ 01A2:2E33
cs=0x1a2;eip=0x002e35; 	T(AND(ax, 0x0F00F));	// 5829 and     ax, 0F00Fh ;~ 01A2:2E35
cs=0x1a2;eip=0x002e38; 	T(SHR(ah, 4));	// 5830 shr     ah, 4 ;~ 01A2:2E38
cs=0x1a2;eip=0x002e3b; 	T(MOVZX(di, al));	// 5831 movzx   di, al ;~ 01A2:2E3B
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x002e3e; 	T(MOV(al, *((byte_13c54)+di)));	// 5832 mov     al, cs:byte_13C54[di] ;~ 01A2:2E3E
cs=0x1a2;eip=0x002e43; 	T(MOVZX(di, ah));	// 5833 movzx   di, ah ;~ 01A2:2E43
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x002e46; 	T(MOV(ah, *((byte_13c54)+di)));	// 5834 mov     ah, cs:byte_13C54[di] ;~ 01A2:2E46
cs=0x1a2;eip=0x002e4b; 	T(TEST(_sndflags_24622, 4));	// 5835 test    _sndflags_24622, 4 ;~ 01A2:2E4B
cs=0x1a2;eip=0x002e50; 	J(JNZ(loc_12e55));	// 5836 jnz     short loc_12E55 ;~ 01A2:2E50
cs=0x1a2;eip=0x002e52; 	T(MOV(ax, 0x80));	// 5837 mov     ax, 80h ; '€' ;~ 01A2:2E52
loc_12e55:
	// 4749 
cs=0x1a2;eip=0x002e55; 	X(MOV(byte_2461e, ah));	// 5840 mov     byte_2461E, ah ;~ 01A2:2E55
cs=0x1a2;eip=0x002e59; 	X(MOV(byte_2461f, al));	// 5841 mov     byte_2461F, al ;~ 01A2:2E59
cs=0x1a2;eip=0x002e5c; 	X(PUSH(cs));	// 5842 push    cs ;~ 01A2:2E5C
cs=0x1a2;eip=0x002e5d; 	J(CALL(_clean_11c43,0));	// 5843 call    near ptr _clean_11C43 ;~ 01A2:2E5D
cs=0x1a2;eip=0x002e60; 	T(MOV(al, 0));	// 5844 mov     al, 0 ;~ 01A2:2E60
cs=0x1a2;eip=0x002e62; 	T(TEST(*(db*)(((db*)&_config_word)+1), 1));	// 5845 test    byte ptr _config_word+1, 1 ;~ 01A2:2E62
cs=0x1a2;eip=0x002e67; 	J(JZ(loc_12e6b));	// 5846 jz      short loc_12E6B ;~ 01A2:2E67
cs=0x1a2;eip=0x002e69; 	T(OR(al, 0x10));	// 5847 or      al, 10h ;~ 01A2:2E69
loc_12e6b:
	// 4750 
cs=0x1a2;eip=0x002e6b; 	T(TEST(*(db*)(((db*)&_config_word)), 4));	// 5850 test    byte ptr _config_word, 4 ;~ 01A2:2E6B
cs=0x1a2;eip=0x002e70; 	J(JZ(loc_12e74));	// 5851 jz      short loc_12E74 ;~ 01A2:2E70
cs=0x1a2;eip=0x002e72; 	T(OR(al, 4));	// 5852 or      al, 4 ;~ 01A2:2E72
loc_12e74:
	// 4751 
cs=0x1a2;eip=0x002e74; 	T(TEST(*(db*)(((db*)&_config_word)), 0x80));	// 5855 test    byte ptr _config_word, 80h ;~ 01A2:2E74
cs=0x1a2;eip=0x002e79; 	J(JZ(loc_12e7d));	// 5856 jz      short loc_12E7D ;~ 01A2:2E79
cs=0x1a2;eip=0x002e7b; 	T(OR(al, 8));	// 5857 or      al, 8 ;~ 01A2:2E7B
loc_12e7d:
	// 4752 
cs=0x1a2;eip=0x002e7d; 	X(MOV(_flag_playsetttings, al));	// 5860 mov     _flag_playsetttings, al ;~ 01A2:2E7D
cs=0x1a2;eip=0x002e80; 	T(MOV(ax, 0x400));	// 5861 mov     ax, 400h ;~ 01A2:2E80
cs=0x1a2;eip=0x002e83; 	T(MOV(cl, byte_24623));	// 5862 mov     cl, byte_24623 ;~ 01A2:2E83
cs=0x1a2;eip=0x002e87; 	T(AND(cl, 1));	// 5863 and     cl, 1 ;~ 01A2:2E87
cs=0x1a2;eip=0x002e8a; 	T(CMP(_bit_mode, 16));	// 5864 cmp     _bit_mode, 16 ;~ 01A2:2E8A
cs=0x1a2;eip=0x002e8f; 	J(JNZ(loc_12e9f));	// 5865 jnz     short loc_12E9F ;~ 01A2:2E8F
cs=0x1a2;eip=0x002e91; 	X(MOV(off_245e0, offset(seg003,_myin)));	// 5866 mov     off_245E0, offset _myin ;~ 01A2:2E91
cs=0x1a2;eip=0x002e97; 	X(MOV(off_245e2, offset(seg003,_chrin)));	// 5867 mov     off_245E2, offset _chrin ;~ 01A2:2E97
cs=0x1a2;eip=0x002e9d; 	T(INC(cl));	// 5868 inc     cl ;~ 01A2:2E9D
loc_12e9f:
	// 4753 
cs=0x1a2;eip=0x002e9f; 	T(SHR(ax, cl));	// 5871 shr     ax, cl ;~ 01A2:2E9F
cs=0x1a2;eip=0x002ea1; 	X(MOV(word_245e8, ax));	// 5872 mov     word_245E8, ax ;~ 01A2:2EA1
cs=0x1a2;eip=0x002ea4; 	T(TEST(_sndflags_24622, 1));	// 5873 test    _sndflags_24622, 1 ;~ 01A2:2EA4
cs=0x1a2;eip=0x002ea9; 	J(JZ(loc_12eae));	// 5874 jz      short loc_12EAE ;~ 01A2:2EA9
cs=0x1a2;eip=0x002eab; 	J(CALL(_ems_init,0));	// 5875 call    _ems_init ;~ 01A2:2EAB
loc_12eae:
	// 4754 
cs=0x1a2;eip=0x002eae; 	X(POP(ds));	// 5878 pop     ds ;~ 01A2:2EAE
cs=0x1a2;eip=0x002eaf; 	X(POPF);	// 5880 popf ;~ 01A2:2EAF
cs=0x1a2;eip=0x002eb0; 	T(CLC);	// 5881 clc ;~ 01A2:2EB0
cs=0x1a2;eip=0x002eb1; 	J(RETF(0));	// 5882 retf ;~ 01A2:2EB1
loc_12eb2:
	// 4755 
cs=0x1a2;eip=0x002eb2; 	T(MOV(bx, ds));	// 5886 mov     bx, ds ;~ 01A2:2EB2
cs=0x1a2;eip=0x002eb4; 	T(MOV(fs, bx));	// 5887 mov     fs, bx ;~ 01A2:2EB4
cs=0x1a2;eip=0x002eb6; 	X(POP(ds));	// 5889 pop     ds ;~ 01A2:2EB6
cs=0x1a2;eip=0x002eb7; 	X(POPF);	// 5891 popf ;~ 01A2:2EB7
cs=0x1a2;eip=0x002eb8; 	T(STC);	// 5892 stc ;~ 01A2:2EB8
cs=0x1a2;eip=0x002eb9; 	J(RETF(0));	// 5893 retf ;~ 01A2:2EB9
sub_13177:
	// 6293 
cs=0x1a2;eip=0x003177; 	T(OR(ax, ax));	// 6295 or      ax, ax ;~ 01A2:3177
cs=0x1a2;eip=0x003179; 	J(JZ(locret_131b2));	// 6296 jz      short locret_131B2 ;~ 01A2:3179
cs=0x1a2;eip=0x00317b; 	X(OR(*(raddr(ds,bx+0x3D)), 4));	// 6297 or      byte ptr [bx+3Dh], 4 ;~ 01A2:317B
cs=0x1a2;eip=0x00317f; 	T(CMP(*(raddr(ds,bx+0x1D)), 1));	// 6298 cmp     byte ptr [bx+1Dh], 1 ;~ 01A2:317F
cs=0x1a2;eip=0x003183; 	J(JZ(loc_131b3));	// 6299 jz      short loc_131B3 ;~ 01A2:3183
cs=0x1a2;eip=0x003185; 	T(CMP(ax, *(dw*)(raddr(ds,bx+0x3E))));	// 6300 cmp     ax, [bx+3Eh] ;~ 01A2:3185
cs=0x1a2;eip=0x003188; 	J(JZ(locret_131b2));	// 6301 jz      short locret_131B2 ;~ 01A2:3188
cs=0x1a2;eip=0x00318a; 	X(MOV(*(dw*)(raddr(ds,bx+0x3E)), ax));	// 6302 mov     [bx+3Eh], ax ;~ 01A2:318A
cs=0x1a2;eip=0x00318d; 	T(MOVZX(edi, ax));	// 6303 movzx   edi, ax ;~ 01A2:318D
cs=0x1a2;eip=0x003191; 	T(XOR(edx, edx));	// 6304 xor     edx, edx ;~ 01A2:3191
cs=0x1a2;eip=0x003194; 	T(MOV(eax, dword_245bc));	// 6305 mov     eax, dword_245BC ;~ 01A2:3194
cs=0x1a2;eip=0x003198; 	T(DIV4(edi));	// 6306 div     edi ;~ 01A2:3198
cs=0x1a2;eip=0x00319b; 	X(MOV(*(dw*)(raddr(ds,bx+0x20)), ax));	// 6307 mov     [bx+20h], ax ;~ 01A2:319B
cs=0x1a2;eip=0x00319e; 	T(MOV(cl, byte_2461a));	// 6308 mov     cl, byte_2461A ;~ 01A2:319E
cs=0x1a2;eip=0x0031a2; 	T(SHL(edi, cl));	// 6309 shl     edi, cl ;~ 01A2:31A2
cs=0x1a2;eip=0x0031a5; 	T(XOR(edx, edx));	// 6310 xor     edx, edx ;~ 01A2:31A5
cs=0x1a2;eip=0x0031a8; 	T(MOV(eax, dword_245c0));	// 6311 mov     eax, dword_245C0 ;~ 01A2:31A8
cs=0x1a2;eip=0x0031ac; 	T(DIV4(edi));	// 6312 div     edi ;~ 01A2:31AC
cs=0x1a2;eip=0x0031af; 	X(MOV(*(dw*)(raddr(ds,bx+0x1E)), ax));	// 6313 mov     [bx+1Eh], ax ;~ 01A2:31AF
locret_131b2:
	// 4778 
cs=0x1a2;eip=0x0031b2; 	J(RETN(0));	// 6317 retn ;~ 01A2:31B2
loc_131b3:
	// 4779 
cs=0x1a2;eip=0x0031b3; 	T(MOVZX(edi, ax));	// 6322 movzx   edi, ax ;~ 01A2:31B3
cs=0x1a2;eip=0x0031b7; 	T(XOR(edx, edx));	// 6323 xor     edx, edx ;~ 01A2:31B7
cs=0x1a2;eip=0x0031ba; 	T(MOV(cl, byte_2461a));	// 6324 mov     cl, byte_2461A ;~ 01A2:31BA
cs=0x1a2;eip=0x0031be; 	T(SHL(edi, cl));	// 6325 shl     edi, cl ;~ 01A2:31BE
cs=0x1a2;eip=0x0031c1; 	T(XOR(edx, edx));	// 6326 xor     edx, edx ;~ 01A2:31C1
cs=0x1a2;eip=0x0031c4; 	T(MOV(eax, dword_245c0));	// 6327 mov     eax, dword_245C0 ;~ 01A2:31C4
cs=0x1a2;eip=0x0031c8; 	T(DIV4(edi));	// 6328 div     edi ;~ 01A2:31C8
cs=0x1a2;eip=0x0031cb; 	X(MOV(*(dw*)(raddr(ds,bx+0x1E)), ax));	// 6329 mov     [bx+1Eh], ax ;~ 01A2:31CB
cs=0x1a2;eip=0x0031ce; 	J(RETN(0));	// 6330 retn ;~ 01A2:31CE
_nullsub_5:
	// 6337 
cs=0x1a2;eip=0x0031cf; 	J(RETN(0));	// 6339 retn ;~ 01A2:31CF
seg000_31d0_proc:
	// 6345 
loc_131d0:
	// 4780 
cs=0x1a2;eip=0x0031d0; 	T(XOR(ah, ah));	// 6347 xor     ah, ah ;~ 01A2:31D0
cs=0x1a2;eip=0x0031d2; 	T(IMUL2_2(ax,_volume_245fc));	// 6348 imul    ax, _volume_245FC ;~ 01A2:31D2
cs=0x1a2;eip=0x0031d7; 	T(XOR(al, al));	// 6349 xor     al, al ;~ 01A2:31D7
cs=0x1a2;eip=0x0031d9; 	J(RETN(0));	// 6350 retn ;~ 01A2:31D9
sub_131da:
	// 6356 
cs=0x1a2;eip=0x0031da; 	T(CMP(*(raddr(ds,bx+0x1D)), 1));	// 6358 cmp     byte ptr [bx+1Dh], 1 ;~ 01A2:31DA
cs=0x1a2;eip=0x0031de; 	J(JZ(_nullsub_5));	// 6359 jz      short _nullsub_5 ;~ 01A2:31DE
cs=0x1a2;eip=0x0031e0; 	T(TEST(*(raddr(ds,bx+0x17)), 1));	// 6360 test    byte ptr [bx+17h], 1 ;~ 01A2:31E0
cs=0x1a2;eip=0x0031e4; 	J(JZ(locret_131ee));	// 6361 jz      short locret_131EE ;~ 01A2:31E4
cs=0x1a2;eip=0x0031e6; 	X(AND(*(raddr(ds,bx+0x17)), 0x0FE));	// 6362 and     byte ptr [bx+17h], 0FEh ;~ 01A2:31E6
cs=0x1a2;eip=0x0031ea; 	X(MOV(*(raddr(ds,bx+0x35)), 0));	// 6363 mov     byte ptr [bx+35h], 0 ;~ 01A2:31EA
locret_131ee:
	// 4781 
cs=0x1a2;eip=0x0031ee; 	J(RETN(0));	// 6366 retn ;~ 01A2:31EE
sub_131ef:
	// 6373 
cs=0x1a2;eip=0x0031ef; 	T(CMP(*(raddr(ds,bx+0x1D)), 1));	// 6379 cmp     byte ptr [bx+1Dh], 1 ;~ 01A2:31EF
cs=0x1a2;eip=0x0031f3; 	J(JZ(loc_131d0));	// 6380 jz      short loc_131D0 ;~ 01A2:31F3
cs=0x1a2;eip=0x0031f5; 	X(AND(*(raddr(ds,bx+0x3D)), 0x0BF));	// 6381 and     byte ptr [bx+3Dh], 0BFh ;~ 01A2:31F5
cs=0x1a2;eip=0x0031f9; 	T(CMP(al, byte_2467d));	// 6382 cmp     al, byte_2467D ;~ 01A2:31F9
cs=0x1a2;eip=0x0031fd; 	J(JBE(loc_13202));	// 6383 jbe     short loc_13202 ;~ 01A2:31FD
cs=0x1a2;eip=0x0031ff; 	T(MOV(al, byte_2467d));	// 6384 mov     al, byte_2467D ;~ 01A2:31FF
loc_13202:
	// 4782 
cs=0x1a2;eip=0x003202; 	T(XOR(ah, ah));	// 6387 xor     ah, ah ;~ 01A2:3202
cs=0x1a2;eip=0x003204; 	X(MOV(*(raddr(ds,bx+0x22)), al));	// 6388 mov     [bx+22h], al ;~ 01A2:3204
cs=0x1a2;eip=0x003207; 	X(MUL1_2(_volume_245fc));	// 6389 mul     _volume_245FC ;~ 01A2:3207
cs=0x1a2;eip=0x00320b; 	T(MOV(al, *(raddr(ds,bx+0x23))));	// 6390 mov     al, [bx+23h] ;~ 01A2:320B
cs=0x1a2;eip=0x00320e; 	X(MOV(*(dw*)(raddr(ds,bx+0x36)), ax));	// 6391 mov     [bx+36h], ax ;~ 01A2:320E
cs=0x1a2;eip=0x003211; 	X(MOV(*(raddr(ds,bx+0x23)), ah));	// 6392 mov     [bx+23h], ah ;~ 01A2:3211
cs=0x1a2;eip=0x003214; 	J(RETN(0));	// 6393 retn ;~ 01A2:3214
_gravis_13215:
	// 6400 
cs=0x1a2;eip=0x003215; 	T(OR(ax, ax));	// 6402 or      ax, ax ;~ 01A2:3215
cs=0x1a2;eip=0x003217; 	J(JZ(locret_13271));	// 6403 jz      short locret_13271 ;~ 01A2:3217
cs=0x1a2;eip=0x003219; 	X(OR(*(raddr(ds,bx+0x3D)), 4));	// 6404 or      byte ptr [bx+3Dh], 4 ;~ 01A2:3219
cs=0x1a2;eip=0x00321d; 	T(CMP(*(raddr(ds,bx+0x1D)), 1));	// 6405 cmp     byte ptr [bx+1Dh], 1 ;~ 01A2:321D
cs=0x1a2;eip=0x003221; 	J(JZ(loc_131b3));	// 6406 jz      short loc_131B3 ;~ 01A2:3221
cs=0x1a2;eip=0x003223; 	T(CMP(ax, *(dw*)(raddr(ds,bx+0x3E))));	// 6407 cmp     ax, [bx+3Eh] ;~ 01A2:3223
cs=0x1a2;eip=0x003226; 	J(JZ(locret_13271));	// 6408 jz      short locret_13271 ;~ 01A2:3226
cs=0x1a2;eip=0x003228; 	X(MOV(*(dw*)(raddr(ds,bx+0x3E)), ax));	// 6409 mov     [bx+3Eh], ax ;~ 01A2:3228
cs=0x1a2;eip=0x00322b; 	T(MOVZX(edi, ax));	// 6410 movzx   edi, ax ;~ 01A2:322B
cs=0x1a2;eip=0x00322f; 	T(XOR(edx, edx));	// 6411 xor     edx, edx ;~ 01A2:322F
cs=0x1a2;eip=0x003232; 	T(MOV(eax, dword_245bc));	// 6412 mov     eax, dword_245BC ;~ 01A2:3232
cs=0x1a2;eip=0x003236; 	T(DIV4(edi));	// 6413 div     edi ;~ 01A2:3236
cs=0x1a2;eip=0x003239; 	X(MOV(*(dw*)(raddr(ds,bx+0x20)), ax));	// 6414 mov     [bx+20h], ax ;~ 01A2:3239
cs=0x1a2;eip=0x00323c; 	T(XOR(edx, edx));	// 6415 xor     edx, edx ;~ 01A2:323C
cs=0x1a2;eip=0x00323f; 	T(MOV(eax, dword_2463c));	// 6416 mov     eax, dword_2463C ;~ 01A2:323F
cs=0x1a2;eip=0x003243; 	T(DIV4(edi));	// 6417 div     edi ;~ 01A2:3243
cs=0x1a2;eip=0x003246; 	T(MOV(cl, byte_2461a));	// 6418 mov     cl, byte_2461A ;~ 01A2:3246
cs=0x1a2;eip=0x00324a; 	T(SHL(edi, cl));	// 6419 shl     edi, cl ;~ 01A2:324A
cs=0x1a2;eip=0x00324d; 	T(MOV(cx, ax));	// 6420 mov     cx, ax ;~ 01A2:324D
cs=0x1a2;eip=0x00324f; 	T(XOR(edx, edx));	// 6421 xor     edx, edx ;~ 01A2:324F
cs=0x1a2;eip=0x003252; 	T(MOV(eax, dword_245c0));	// 6422 mov     eax, dword_245C0 ;~ 01A2:3252
cs=0x1a2;eip=0x003256; 	T(DIV4(edi));	// 6423 div     edi ;~ 01A2:3256
cs=0x1a2;eip=0x003259; 	X(MOV(*(dw*)(raddr(ds,bx+0x1E)), ax));	// 6424 mov     [bx+1Eh], ax ;~ 01A2:3259
cs=0x1a2;eip=0x00325c; 	X(PUSHF);	// 6425 pushf ;~ 01A2:325C
cs=0x1a2;eip=0x00325d; 	T(CLI);	// 6426 cli ;~ 01A2:325D
cs=0x1a2;eip=0x00325e; 	T(MOV(dx, _gravis_port));	// 6427 mov     dx, _gravis_port ;~ 01A2:325E
cs=0x1a2;eip=0x003262; 	T(DEC(dx));	// 6428 dec     dx ;~ 01A2:3262
cs=0x1a2;eip=0x003263; 	T(MOV(al, *(raddr(ds,bx+0x18))));	// 6429 mov     al, [bx+18h] ;~ 01A2:3263
cs=0x1a2;eip=0x003266; 	S(OUT(dx, al));	// 6430 out     dx, al ;~ 01A2:3266
cs=0x1a2;eip=0x003267; 	T(INC(dx));	// 6431 inc     dx ;~ 01A2:3267
cs=0x1a2;eip=0x003268; 	T(MOV(al, 1));	// 6432 mov     al, 1 ;~ 01A2:3268
cs=0x1a2;eip=0x00326a; 	S(OUT(dx, al));	// 6433 out     dx, al ;~ 01A2:326A
cs=0x1a2;eip=0x00326b; 	T(INC(dx));	// 6434 inc     dx ;~ 01A2:326B
cs=0x1a2;eip=0x00326c; 	T(MOV(ax, cx));	// 6435 mov     ax, cx ;~ 01A2:326C
cs=0x1a2;eip=0x00326e; 	S(OUT(dx, ax));	// 6436 out     dx, ax ;~ 01A2:326E
cs=0x1a2;eip=0x00326f; 	T(DEC(dx));	// 6437 dec     dx ;~ 01A2:326F
cs=0x1a2;eip=0x003270; 	X(POPF);	// 6438 popf ;~ 01A2:3270
locret_13271:
	// 4783 
cs=0x1a2;eip=0x003271; 	J(RETN(0));	// 6442 retn ;~ 01A2:3271
_gravis_13272:
	// 6449 
cs=0x1a2;eip=0x003272; 	T(CMP(*(raddr(ds,bx+0x1D)), 1));	// 6451 cmp     byte ptr [bx+1Dh], 1 ;~ 01A2:3272
cs=0x1a2;eip=0x003276; 	J(JZ(_nullsub_5));	// 6452 jz      _nullsub_5 ;~ 01A2:3276
cs=0x1a2;eip=0x00327a; 	X(AND(*(raddr(ds,bx+0x17)), 0x0FE));	// 6453 and     byte ptr [bx+17h], 0FEh ;~ 01A2:327A
cs=0x1a2;eip=0x00327e; 	T(XOR(al, al));	// 6454 xor     al, al ;~ 01A2:327E
cs=0x1a2;eip=0x003280; 	J(CALL(_gravis_13363,0));	// 6455 call    _gravis_13363 ;~ 01A2:3280
cs=0x1a2;eip=0x003283; 	T(MOV(dx, _gravis_port));	// 6456 mov     dx, _gravis_port ;~ 01A2:3283
cs=0x1a2;eip=0x003287; 	T(DEC(dx));	// 6457 dec     dx ;~ 01A2:3287
cs=0x1a2;eip=0x003288; 	T(MOV(al, *(raddr(ds,bx+0x18))));	// 6458 mov     al, [bx+18h] ;~ 01A2:3288
cs=0x1a2;eip=0x00328b; 	X(PUSHF);	// 6459 pushf ;~ 01A2:328B
cs=0x1a2;eip=0x00328c; 	T(CLI);	// 6460 cli ;~ 01A2:328C
cs=0x1a2;eip=0x00328d; 	S(OUT(dx, al));	// 6461 out     dx, al ;~ 01A2:328D
cs=0x1a2;eip=0x00328e; 	T(INC(dx));	// 6462 inc     dx ;~ 01A2:328E
cs=0x1a2;eip=0x00328f; 	T(MOV(al, 0));	// 6463 mov     al, 0 ;~ 01A2:328F
cs=0x1a2;eip=0x003291; 	S(OUT(dx, al));	// 6464 out     dx, al ;~ 01A2:3291
cs=0x1a2;eip=0x003292; 	T(ADD(dl, 2));	// 6465 add     dl, 2 ;~ 01A2:3292
cs=0x1a2;eip=0x003295; 	T(MOV(al, 3));	// 6466 mov     al, 3 ;~ 01A2:3295
cs=0x1a2;eip=0x003297; 	S(OUT(dx, al));	// 6467 out     dx, al ;~ 01A2:3297
cs=0x1a2;eip=0x003298; 	T(SUB(dl, 2));	// 6468 sub     dl, 2 ;~ 01A2:3298
cs=0x1a2;eip=0x00329b; 	T(MOV(al, 9));	// 6469 mov     al, 9 ;~ 01A2:329B
cs=0x1a2;eip=0x00329d; 	S(OUT(dx, al));	// 6470 out     dx, al ;~ 01A2:329D
cs=0x1a2;eip=0x00329e; 	T(INC(dx));	// 6471 inc     dx ;~ 01A2:329E
cs=0x1a2;eip=0x00329f; 	T(XOR(ax, ax));	// 6472 xor     ax, ax ;~ 01A2:329F
cs=0x1a2;eip=0x0032a1; 	S(OUT(dx, ax));	// 6473 out     dx, ax ;~ 01A2:32A1
cs=0x1a2;eip=0x0032a2; 	T(DEC(dx));	// 6474 dec     dx ;~ 01A2:32A2
cs=0x1a2;eip=0x0032a3; 	X(MOV(*(raddr(ds,bx+0x35)), 0));	// 6475 mov     byte ptr [bx+35h], 0 ;~ 01A2:32A3
cs=0x1a2;eip=0x0032a7; 	X(POPF);	// 6476 popf ;~ 01A2:32A7
cs=0x1a2;eip=0x0032a8; 	J(RETN(0));	// 6477 retn ;~ 01A2:32A8
_gravis_132a9:
	// 6484 
cs=0x1a2;eip=0x0032a9; 	T(CMP(*(raddr(ds,bx+0x1D)), 1));	// 6486 cmp     byte ptr [bx+1Dh], 1 ;~ 01A2:32A9
cs=0x1a2;eip=0x0032ad; 	J(JZ(loc_131d0));	// 6487 jz      loc_131D0 ;~ 01A2:32AD
cs=0x1a2;eip=0x0032b1; 	X(AND(*(raddr(ds,bx+0x3D)), 0x0BF));	// 6488 and     byte ptr [bx+3Dh], 0BFh ;~ 01A2:32B1
cs=0x1a2;eip=0x0032b5; 	T(TEST(*(raddr(ds,bx+0x17)), 4));	// 6489 test    byte ptr [bx+17h], 4 ;~ 01A2:32B5
cs=0x1a2;eip=0x0032b9; 	J(JZ(locret_13355));	// 6490 jz      locret_13355 ;~ 01A2:32B9
cs=0x1a2;eip=0x0032bd; 	T(CMP(al, byte_2467d));	// 6491 cmp     al, byte_2467D ;~ 01A2:32BD
cs=0x1a2;eip=0x0032c1; 	J(JBE(loc_132c6));	// 6492 jbe     short loc_132C6 ;~ 01A2:32C1
cs=0x1a2;eip=0x0032c3; 	T(MOV(al, byte_2467d));	// 6493 mov     al, byte_2467D ;~ 01A2:32C3
loc_132c6:
	// 4784 
cs=0x1a2;eip=0x0032c6; 	T(XOR(ah, ah));	// 6496 xor     ah, ah ;~ 01A2:32C6
cs=0x1a2;eip=0x0032c8; 	X(MOV(*(raddr(ds,bx+0x22)), al));	// 6497 mov     [bx+22h], al ;~ 01A2:32C8
cs=0x1a2;eip=0x0032cb; 	X(MUL1_2(_volume_245fc));	// 6498 mul     _volume_245FC ;~ 01A2:32CB
cs=0x1a2;eip=0x0032cf; 	X(MOV(*(raddr(ds,bx+0x23)), ah));	// 6499 mov     [bx+23h], ah ;~ 01A2:32CF
cs=0x1a2;eip=0x0032d2; 	X(PUSH(cx));	// 6500 push    cx ;~ 01A2:32D2
cs=0x1a2;eip=0x0032d3; 	X(PUSH(di));	// 6501 push    di ;~ 01A2:32D3
cs=0x1a2;eip=0x0032d4; 	T(MOVZX(di, ah));	// 6502 movzx   di, ah ;~ 01A2:32D4
cs=0x1a2;eip=0x0032d7; 	T(SHL(di, 1));	// 6503 shl     di, 1 ;~ 01A2:32D7
cs=0x1a2;eip=0x0032d9; 	T(ADD(di, off_2462e));	// 6504 add     di, off_2462E   ; "07/02/95 12:26:42" ;~ 01A2:32D9
cs=0x1a2;eip=0x0032dd; 	T(MOV(cx, *(dw*)(raddr(ds,di))));	// 6505 mov     cx, [di] ;~ 01A2:32DD
cs=0x1a2;eip=0x0032df; 	T(MOV(ax, cx));	// 6506 mov     ax, cx ;~ 01A2:32DF
cs=0x1a2;eip=0x0032e1; 	T(CMP(ax, 0x8000));	// 6507 cmp     ax, 8000h ;~ 01A2:32E1
cs=0x1a2;eip=0x0032e4; 	J(JA(loc_132e8));	// 6508 ja      short loc_132E8 ;~ 01A2:32E4
cs=0x1a2;eip=0x0032e6; 	T(XOR(ax, ax));	// 6509 xor     ax, ax ;~ 01A2:32E6
loc_132e8:
	// 4785 
cs=0x1a2;eip=0x0032e8; 	X(MOV(*(dw*)(raddr(ds,bx+0x36)), ax));	// 6512 mov     [bx+36h], ax ;~ 01A2:32E8
cs=0x1a2;eip=0x0032eb; 	X(PUSHF);	// 6513 pushf ;~ 01A2:32EB
cs=0x1a2;eip=0x0032ec; 	T(MOV(dx, _gravis_port));	// 6514 mov     dx, _gravis_port ;~ 01A2:32EC
cs=0x1a2;eip=0x0032f0; 	T(DEC(dx));	// 6515 dec     dx ;~ 01A2:32F0
cs=0x1a2;eip=0x0032f1; 	T(MOV(al, *(raddr(ds,bx+0x18))));	// 6516 mov     al, [bx+18h] ;~ 01A2:32F1
cs=0x1a2;eip=0x0032f4; 	S(OUT(dx, al));	// 6517 out     dx, al ;~ 01A2:32F4
cs=0x1a2;eip=0x0032f5; 	T(INC(dx));	// 6518 inc     dx ;~ 01A2:32F5
cs=0x1a2;eip=0x0032f6; 	T(MOV(al, 0x0D));	// 6519 mov     al, 0Dh ;~ 01A2:32F6
cs=0x1a2;eip=0x0032f8; 	S(OUT(dx, al));	// 6520 out     dx, al ;~ 01A2:32F8
cs=0x1a2;eip=0x0032f9; 	T(ADD(dl, 2));	// 6521 add     dl, 2 ;~ 01A2:32F9
cs=0x1a2;eip=0x0032fc; 	T(MOV(al, 3));	// 6522 mov     al, 3 ;~ 01A2:32FC
cs=0x1a2;eip=0x0032fe; 	S(OUT(dx, al));	// 6523 out     dx, al ;~ 01A2:32FE
cs=0x1a2;eip=0x0032ff; 	T(SUB(dl, 2));	// 6524 sub     dl, 2 ;~ 01A2:32FF
cs=0x1a2;eip=0x003302; 	T(MOV(al, 0x89));	// 6525 mov     al, 89h ; '‰' ;~ 01A2:3302
cs=0x1a2;eip=0x003304; 	S(OUT(dx, al));	// 6526 out     dx, al ;~ 01A2:3304
cs=0x1a2;eip=0x003305; 	T(INC(dx));	// 6527 inc     dx ;~ 01A2:3305
cs=0x1a2;eip=0x003306; 	S(IN(ax, dx));	// 6528 in      ax, dx ;~ 01A2:3306
cs=0x1a2;eip=0x003307; 	T(DEC(dx));	// 6529 dec     dx ;~ 01A2:3307
cs=0x1a2;eip=0x003308; 	T(OR(ah, 0x80));	// 6530 or      ah, 80h ;~ 01A2:3308
cs=0x1a2;eip=0x00330b; 	T(CMP(ah, ch));	// 6531 cmp     ah, ch ;~ 01A2:330B
cs=0x1a2;eip=0x00330d; 	J(JZ(loc_13356));	// 6532 jz      short loc_13356 ;~ 01A2:330D
cs=0x1a2;eip=0x00330f; 	T(MOV(cl, 0x20));	// 6533 mov     cl, 20h ; ' ' ;~ 01A2:330F
cs=0x1a2;eip=0x003311; 	J(JC(loc_13318));	// 6534 jb      short loc_13318 ;~ 01A2:3311
cs=0x1a2;eip=0x003313; 	T(XCHG(ah, ch));	// 6535 xchg    ah, ch ;~ 01A2:3313
cs=0x1a2;eip=0x003315; 	T(OR(cl, 0x40));	// 6536 or      cl, 40h ;~ 01A2:3315
loc_13318:
	// 4786 
cs=0x1a2;eip=0x003318; 	T(MOV(di, cx));	// 6539 mov     di, cx ;~ 01A2:3318
cs=0x1a2;eip=0x00331a; 	T(SUB(di, ax));	// 6540 sub     di, ax ;~ 01A2:331A
cs=0x1a2;eip=0x00331c; 	T(CMP(di, 0x300));	// 6541 cmp     di, 300h ;~ 01A2:331C
cs=0x1a2;eip=0x003320; 	J(JBE(loc_13356));	// 6542 jbe     short loc_13356 ;~ 01A2:3320
cs=0x1a2;eip=0x003322; 	T(MOV(al, 7));	// 6543 mov     al, 7 ;~ 01A2:3322
cs=0x1a2;eip=0x003324; 	S(OUT(dx, al));	// 6544 out     dx, al ;~ 01A2:3324
cs=0x1a2;eip=0x003325; 	T(ADD(dl, 2));	// 6545 add     dl, 2 ;~ 01A2:3325
cs=0x1a2;eip=0x003328; 	T(MOV(al, ah));	// 6546 mov     al, ah ;~ 01A2:3328
cs=0x1a2;eip=0x00332a; 	S(OUT(dx, al));	// 6547 out     dx, al ;~ 01A2:332A
cs=0x1a2;eip=0x00332b; 	T(SUB(dl, 2));	// 6548 sub     dl, 2 ;~ 01A2:332B
cs=0x1a2;eip=0x00332e; 	T(MOV(al, 8));	// 6549 mov     al, 8 ;~ 01A2:332E
cs=0x1a2;eip=0x003330; 	S(OUT(dx, al));	// 6550 out     dx, al ;~ 01A2:3330
cs=0x1a2;eip=0x003331; 	T(ADD(dl, 2));	// 6551 add     dl, 2 ;~ 01A2:3331
cs=0x1a2;eip=0x003334; 	T(MOV(al, ch));	// 6552 mov     al, ch ;~ 01A2:3334
cs=0x1a2;eip=0x003336; 	S(OUT(dx, al));	// 6553 out     dx, al ;~ 01A2:3336
cs=0x1a2;eip=0x003337; 	T(SUB(dl, 2));	// 6554 sub     dl, 2 ;~ 01A2:3337
cs=0x1a2;eip=0x00333a; 	T(MOV(al, 6));	// 6555 mov     al, 6 ;~ 01A2:333A
cs=0x1a2;eip=0x00333c; 	S(OUT(dx, al));	// 6556 out     dx, al ;~ 01A2:333C
cs=0x1a2;eip=0x00333d; 	T(ADD(dl, 2));	// 6557 add     dl, 2 ;~ 01A2:333D
cs=0x1a2;eip=0x003340; 	T(MOV(al, 0x30));	// 6558 mov     al, 30h ; '0' ;~ 01A2:3340
cs=0x1a2;eip=0x003342; 	S(OUT(dx, al));	// 6559 out     dx, al ;~ 01A2:3342
cs=0x1a2;eip=0x003343; 	T(SUB(dl, 2));	// 6560 sub     dl, 2 ;~ 01A2:3343
cs=0x1a2;eip=0x003346; 	T(MOV(al, 0x0D));	// 6561 mov     al, 0Dh ;~ 01A2:3346
cs=0x1a2;eip=0x003348; 	S(OUT(dx, al));	// 6562 out     dx, al ;~ 01A2:3348
cs=0x1a2;eip=0x003349; 	T(ADD(dl, 2));	// 6563 add     dl, 2 ;~ 01A2:3349
cs=0x1a2;eip=0x00334c; 	T(MOV(al, cl));	// 6564 mov     al, cl ;~ 01A2:334C
cs=0x1a2;eip=0x00334e; 	S(OUT(dx, al));	// 6565 out     dx, al ;~ 01A2:334E
cs=0x1a2;eip=0x00334f; 	T(SUB(dl, 2));	// 6566 sub     dl, 2 ;~ 01A2:334F
cs=0x1a2;eip=0x003352; 	X(POPF);	// 6567 popf ;~ 01A2:3352
cs=0x1a2;eip=0x003353; 	X(POP(di));	// 6568 pop     di ;~ 01A2:3353
cs=0x1a2;eip=0x003354; 	X(POP(cx));	// 6569 pop     cx ;~ 01A2:3354
locret_13355:
	// 4787 
cs=0x1a2;eip=0x003355; 	J(RETN(0));	// 6572 retn ;~ 01A2:3355
loc_13356:
	// 4788 
cs=0x1a2;eip=0x003356; 	T(MOV(al, 9));	// 6577 mov     al, 9 ;~ 01A2:3356
cs=0x1a2;eip=0x003358; 	S(OUT(dx, al));	// 6578 out     dx, al ;~ 01A2:3358
cs=0x1a2;eip=0x003359; 	T(INC(dx));	// 6579 inc     dx ;~ 01A2:3359
cs=0x1a2;eip=0x00335a; 	T(MOV(ax, *(dw*)(raddr(ds,bx+0x36))));	// 6580 mov     ax, [bx+36h] ;~ 01A2:335A
cs=0x1a2;eip=0x00335d; 	S(OUT(dx, ax));	// 6581 out     dx, ax ;~ 01A2:335D
cs=0x1a2;eip=0x00335e; 	T(DEC(dx));	// 6582 dec     dx ;~ 01A2:335E
cs=0x1a2;eip=0x00335f; 	X(POPF);	// 6583 popf ;~ 01A2:335F
cs=0x1a2;eip=0x003360; 	X(POP(di));	// 6584 pop     di ;~ 01A2:3360
cs=0x1a2;eip=0x003361; 	X(POP(cx));	// 6585 pop     cx ;~ 01A2:3361
cs=0x1a2;eip=0x003362; 	J(RETN(0));	// 6586 retn ;~ 01A2:3362
_gravis_13363:
	// 6593 
cs=0x1a2;eip=0x003363; 	T(CMP(*(raddr(ds,bx+0x1D)), 1));	// 6595 cmp     byte ptr [bx+1Dh], 1 ;~ 01A2:3363
cs=0x1a2;eip=0x003367; 	J(JZ(loc_131d0));	// 6596 jz      loc_131D0 ;~ 01A2:3367
cs=0x1a2;eip=0x00336b; 	X(AND(*(raddr(ds,bx+0x3D)), 0x0BF));	// 6597 and     byte ptr [bx+3Dh], 0BFh ;~ 01A2:336B
cs=0x1a2;eip=0x00336f; 	T(TEST(*(raddr(ds,bx+0x17)), 4));	// 6598 test    byte ptr [bx+17h], 4 ;~ 01A2:336F
cs=0x1a2;eip=0x003373; 	J(JZ(locret_13428));	// 6599 jz      locret_13428 ;~ 01A2:3373
cs=0x1a2;eip=0x003377; 	T(CMP(al, byte_2467d));	// 6600 cmp     al, byte_2467D ;~ 01A2:3377
cs=0x1a2;eip=0x00337b; 	J(JBE(loc_13380));	// 6601 jbe     short loc_13380 ;~ 01A2:337B
cs=0x1a2;eip=0x00337d; 	T(MOV(al, byte_2467d));	// 6602 mov     al, byte_2467D ;~ 01A2:337D
loc_13380:
	// 4789 
cs=0x1a2;eip=0x003380; 	T(XOR(ah, ah));	// 6605 xor     ah, ah ;~ 01A2:3380
cs=0x1a2;eip=0x003382; 	X(MOV(*(raddr(ds,bx+0x22)), al));	// 6606 mov     [bx+22h], al ;~ 01A2:3382
cs=0x1a2;eip=0x003385; 	X(MUL1_2(_volume_245fc));	// 6607 mul     _volume_245FC ;~ 01A2:3385
cs=0x1a2;eip=0x003389; 	X(MOV(*(raddr(ds,bx+0x23)), ah));	// 6608 mov     [bx+23h], ah ;~ 01A2:3389
cs=0x1a2;eip=0x00338c; 	X(PUSH(cx));	// 6609 push    cx ;~ 01A2:338C
cs=0x1a2;eip=0x00338d; 	X(PUSH(di));	// 6610 push    di ;~ 01A2:338D
cs=0x1a2;eip=0x00338e; 	T(MOVZX(di, ah));	// 6611 movzx   di, ah ;~ 01A2:338E
cs=0x1a2;eip=0x003391; 	T(SHL(di, 1));	// 6612 shl     di, 1 ;~ 01A2:3391
cs=0x1a2;eip=0x003393; 	T(ADD(di, off_2462e));	// 6613 add     di, off_2462E   ; "07/02/95 12:26:42" ;~ 01A2:3393
cs=0x1a2;eip=0x003397; 	T(MOV(cx, *(dw*)(raddr(ds,di))));	// 6614 mov     cx, [di] ;~ 01A2:3397
cs=0x1a2;eip=0x003399; 	T(MOV(ax, cx));	// 6615 mov     ax, cx ;~ 01A2:3399
cs=0x1a2;eip=0x00339b; 	T(CMP(ax, 0x8000));	// 6616 cmp     ax, 8000h ;~ 01A2:339B
cs=0x1a2;eip=0x00339e; 	J(JA(loc_133a2));	// 6617 ja      short loc_133A2 ;~ 01A2:339E
cs=0x1a2;eip=0x0033a0; 	T(XOR(ax, ax));	// 6618 xor     ax, ax ;~ 01A2:33A0
loc_133a2:
	// 4790 
cs=0x1a2;eip=0x0033a2; 	X(MOV(*(dw*)(raddr(ds,bx+0x36)), ax));	// 6621 mov     [bx+36h], ax ;~ 01A2:33A2
cs=0x1a2;eip=0x0033a5; 	X(PUSHF);	// 6622 pushf ;~ 01A2:33A5
cs=0x1a2;eip=0x0033a6; 	T(MOV(dx, _gravis_port));	// 6623 mov     dx, _gravis_port ;~ 01A2:33A6
cs=0x1a2;eip=0x0033aa; 	T(DEC(dx));	// 6624 dec     dx ;~ 01A2:33AA
cs=0x1a2;eip=0x0033ab; 	T(MOV(al, *(raddr(ds,bx+0x18))));	// 6625 mov     al, [bx+18h] ;~ 01A2:33AB
cs=0x1a2;eip=0x0033ae; 	S(OUT(dx, al));	// 6626 out     dx, al ;~ 01A2:33AE
cs=0x1a2;eip=0x0033af; 	T(INC(dx));	// 6627 inc     dx ;~ 01A2:33AF
cs=0x1a2;eip=0x0033b0; 	T(MOV(al, 0x0D));	// 6628 mov     al, 0Dh ;~ 01A2:33B0
cs=0x1a2;eip=0x0033b2; 	S(OUT(dx, al));	// 6629 out     dx, al ;~ 01A2:33B2
cs=0x1a2;eip=0x0033b3; 	T(ADD(dl, 2));	// 6630 add     dl, 2 ;~ 01A2:33B3
cs=0x1a2;eip=0x0033b6; 	T(MOV(al, 3));	// 6631 mov     al, 3 ;~ 01A2:33B6
cs=0x1a2;eip=0x0033b8; 	S(OUT(dx, al));	// 6632 out     dx, al ;~ 01A2:33B8
cs=0x1a2;eip=0x0033b9; 	T(SUB(dl, 2));	// 6633 sub     dl, 2 ;~ 01A2:33B9
cs=0x1a2;eip=0x0033bc; 	T(MOV(al, 0x89));	// 6634 mov     al, 89h ; '‰' ;~ 01A2:33BC
cs=0x1a2;eip=0x0033be; 	S(OUT(dx, al));	// 6635 out     dx, al ;~ 01A2:33BE
cs=0x1a2;eip=0x0033bf; 	T(INC(dx));	// 6636 inc     dx ;~ 01A2:33BF
cs=0x1a2;eip=0x0033c0; 	S(IN(ax, dx));	// 6637 in      ax, dx ;~ 01A2:33C0
cs=0x1a2;eip=0x0033c1; 	T(DEC(dx));	// 6638 dec     dx ;~ 01A2:33C1
cs=0x1a2;eip=0x0033c2; 	T(OR(ah, 0x80));	// 6639 or      ah, 80h ;~ 01A2:33C2
cs=0x1a2;eip=0x0033c5; 	T(CMP(ah, ch));	// 6640 cmp     ah, ch ;~ 01A2:33C5
cs=0x1a2;eip=0x0033c7; 	J(JZ(loc_13356));	// 6641 jz      short loc_13356 ;~ 01A2:33C7
cs=0x1a2;eip=0x0033c9; 	T(MOV(cl, 0));	// 6642 mov     cl, 0 ;~ 01A2:33C9
cs=0x1a2;eip=0x0033cb; 	J(JC(loc_133d2));	// 6643 jb      short loc_133D2 ;~ 01A2:33CB
cs=0x1a2;eip=0x0033cd; 	T(XCHG(ah, ch));	// 6644 xchg    ah, ch ;~ 01A2:33CD
cs=0x1a2;eip=0x0033cf; 	T(OR(cl, 0x40));	// 6645 or      cl, 40h ;~ 01A2:33CF
loc_133d2:
	// 4791 
cs=0x1a2;eip=0x0033d2; 	T(MOV(di, cx));	// 6648 mov     di, cx ;~ 01A2:33D2
cs=0x1a2;eip=0x0033d4; 	T(SUB(di, ax));	// 6649 sub     di, ax ;~ 01A2:33D4
cs=0x1a2;eip=0x0033d6; 	T(CMP(di, 0x300));	// 6650 cmp     di, 300h ;~ 01A2:33D6
cs=0x1a2;eip=0x0033da; 	J(JBE(loc_13356));	// 6651 jbe     loc_13356 ;~ 01A2:33DA
cs=0x1a2;eip=0x0033de; 	T(MOV(al, 7));	// 6652 mov     al, 7 ;~ 01A2:33DE
cs=0x1a2;eip=0x0033e0; 	S(OUT(dx, al));	// 6653 out     dx, al ;~ 01A2:33E0
cs=0x1a2;eip=0x0033e1; 	T(ADD(dl, 2));	// 6654 add     dl, 2 ;~ 01A2:33E1
cs=0x1a2;eip=0x0033e4; 	T(MOV(al, ah));	// 6655 mov     al, ah ;~ 01A2:33E4
cs=0x1a2;eip=0x0033e6; 	S(OUT(dx, al));	// 6656 out     dx, al ;~ 01A2:33E6
cs=0x1a2;eip=0x0033e7; 	T(SUB(dl, 2));	// 6657 sub     dl, 2 ;~ 01A2:33E7
cs=0x1a2;eip=0x0033ea; 	T(MOV(al, 8));	// 6658 mov     al, 8 ;~ 01A2:33EA
cs=0x1a2;eip=0x0033ec; 	S(OUT(dx, al));	// 6659 out     dx, al ;~ 01A2:33EC
cs=0x1a2;eip=0x0033ed; 	T(ADD(dl, 2));	// 6660 add     dl, 2 ;~ 01A2:33ED
cs=0x1a2;eip=0x0033f0; 	T(MOV(al, ch));	// 6661 mov     al, ch ;~ 01A2:33F0
cs=0x1a2;eip=0x0033f2; 	S(OUT(dx, al));	// 6662 out     dx, al ;~ 01A2:33F2
cs=0x1a2;eip=0x0033f3; 	T(SUB(dl, 2));	// 6663 sub     dl, 2 ;~ 01A2:33F3
cs=0x1a2;eip=0x0033f6; 	T(MOV(al, 6));	// 6664 mov     al, 6 ;~ 01A2:33F6
cs=0x1a2;eip=0x0033f8; 	S(OUT(dx, al));	// 6665 out     dx, al ;~ 01A2:33F8
cs=0x1a2;eip=0x0033f9; 	T(ADD(dl, 2));	// 6666 add     dl, 2 ;~ 01A2:33F9
cs=0x1a2;eip=0x0033fc; 	T(MOV(al, 0x30));	// 6667 mov     al, 30h ; '0' ;~ 01A2:33FC
cs=0x1a2;eip=0x0033fe; 	S(OUT(dx, al));	// 6668 out     dx, al ;~ 01A2:33FE
cs=0x1a2;eip=0x0033ff; 	T(SUB(dl, 2));	// 6669 sub     dl, 2 ;~ 01A2:33FF
cs=0x1a2;eip=0x003402; 	T(MOV(al, 0x0D));	// 6670 mov     al, 0Dh ;~ 01A2:3402
cs=0x1a2;eip=0x003404; 	S(OUT(dx, al));	// 6671 out     dx, al ;~ 01A2:3404
cs=0x1a2;eip=0x003405; 	T(ADD(dl, 2));	// 6672 add     dl, 2 ;~ 01A2:3405
cs=0x1a2;eip=0x003408; 	T(MOV(al, cl));	// 6673 mov     al, cl ;~ 01A2:3408
cs=0x1a2;eip=0x00340a; 	S(OUT(dx, al));	// 6674 out     dx, al ;~ 01A2:340A
cs=0x1a2;eip=0x00340b; 	T(SUB(dl, 2));	// 6675 sub     dl, 2 ;~ 01A2:340B
loc_1340e:
	// 4792 
cs=0x1a2;eip=0x00340e; 	T(MOV(al, 0x8D));	// 6678 mov     al, 8Dh ;~ 01A2:340E
cs=0x1a2;eip=0x003410; 	S(OUT(dx, al));	// 6679 out     dx, al ;~ 01A2:3410
cs=0x1a2;eip=0x003411; 	T(ADD(dl, 2));	// 6680 add     dl, 2 ;~ 01A2:3411
cs=0x1a2;eip=0x003414; 	S(IN(al, dx));	// 6681 in      al, dx ;~ 01A2:3414
cs=0x1a2;eip=0x003415; 	T(SUB(dl, 2));	// 6682 sub     dl, 2 ;~ 01A2:3415
cs=0x1a2;eip=0x003418; 	T(SHR(al, 1));	// 6683 shr     al, 1 ;~ 01A2:3418
cs=0x1a2;eip=0x00341a; 	J(JNC(loc_1340e));	// 6684 jnb     short loc_1340E ;~ 01A2:341A
cs=0x1a2;eip=0x00341c; 	T(MOV(al, 9));	// 6685 mov     al, 9 ;~ 01A2:341C
cs=0x1a2;eip=0x00341e; 	S(OUT(dx, al));	// 6686 out     dx, al ;~ 01A2:341E
cs=0x1a2;eip=0x00341f; 	T(INC(dx));	// 6687 inc     dx ;~ 01A2:341F
cs=0x1a2;eip=0x003420; 	T(MOV(ax, *(dw*)(raddr(ds,bx+0x36))));	// 6688 mov     ax, [bx+36h] ;~ 01A2:3420
cs=0x1a2;eip=0x003423; 	S(OUT(dx, ax));	// 6689 out     dx, ax ;~ 01A2:3423
cs=0x1a2;eip=0x003424; 	T(DEC(dx));	// 6690 dec     dx ;~ 01A2:3424
cs=0x1a2;eip=0x003425; 	X(POPF);	// 6691 popf ;~ 01A2:3425
cs=0x1a2;eip=0x003426; 	X(POP(di));	// 6692 pop     di ;~ 01A2:3426
cs=0x1a2;eip=0x003427; 	X(POP(cx));	// 6693 pop     cx ;~ 01A2:3427
locret_13428:
	// 4793 
cs=0x1a2;eip=0x003428; 	J(RETN(0));	// 6696 retn ;~ 01A2:3428
sub_13429:
	// 6703 
cs=0x1a2;eip=0x003429; 	T(TEST(*(raddr(ds,bx+0x17)), 4));	// 6704 test    byte ptr [bx+17h], 4 ;~ 01A2:3429
cs=0x1a2;eip=0x00342d; 	J(JZ(locret_13498));	// 6705 jz      short locret_13498 ;~ 01A2:342D
cs=0x1a2;eip=0x00342f; 	T(MOV(al, *(raddr(ds,bx+2))));	// 6706 mov     al, [bx+2] ;~ 01A2:342F
cs=0x1a2;eip=0x003432; 	T(CMP(al, *(raddr(ds,bx+3))));	// 6707 cmp     al, [bx+3] ;~ 01A2:3432
cs=0x1a2;eip=0x003435; 	J(JZ(loc_13471));	// 6708 jz      short loc_13471 ;~ 01A2:3435
cs=0x1a2;eip=0x003437; 	X(MOV(*(raddr(ds,bx+3)), al));	// 6709 mov     [bx+3], al ;~ 01A2:3437
cs=0x1a2;eip=0x00343a; 	T(DEC(al));	// 6710 dec     al ;~ 01A2:343A
cs=0x1a2;eip=0x00343c; 	T(XOR(ah, ah));	// 6711 xor     ah, ah ;~ 01A2:343C
cs=0x1a2;eip=0x00343e; 	T(SHL(ax, 6));	// 6712 shl     ax, 6 ;~ 01A2:343E
cs=0x1a2;eip=0x003441; 	T(MOV(di, ax));	// 6713 mov     di, ax ;~ 01A2:3441
cs=0x1a2;eip=0x003443; 	T(ADD(di, offset(seg003,_myout)));	// 6714 add     di, offset _myout ;~ 01A2:3443
cs=0x1a2;eip=0x003447; 	T(MOV(eax, *(dd*)(raddr(ds,bx+0x28))));	// 6715 mov     eax, [bx+28h] ;~ 01A2:3447
cs=0x1a2;eip=0x00344b; 	X(MOV(*(dd*)(raddr(ds,bx+0x40)), eax));	// 6716 mov     [bx+40h], eax ;~ 01A2:344B
cs=0x1a2;eip=0x00344f; 	T(MOV(eax, *(dd*)(raddr(ds,bx+0x2C))));	// 6717 mov     eax, [bx+2Ch] ;~ 01A2:344F
cs=0x1a2;eip=0x003453; 	X(MOV(*(dd*)(raddr(ds,bx+0x44)), eax));	// 6718 mov     [bx+44h], eax ;~ 01A2:3453
cs=0x1a2;eip=0x003457; 	T(MOV(eax, *(dd*)(raddr(ds,bx+0x30))));	// 6719 mov     eax, [bx+30h] ;~ 01A2:3457
cs=0x1a2;eip=0x00345b; 	X(MOV(*(dd*)(raddr(ds,bx+0x48)), eax));	// 6720 mov     [bx+48h], eax ;~ 01A2:345B
cs=0x1a2;eip=0x00345f; 	T(MOV(al, *(raddr(ds,di+0x3C))));	// 6721 mov     al, [di+3Ch] ;~ 01A2:345F
cs=0x1a2;eip=0x003462; 	X(MOV(*(raddr(ds,bx+0x19)), al));	// 6722 mov     [bx+19h], al ;~ 01A2:3462
cs=0x1a2;eip=0x003465; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x32))));	// 6723 mov     ax, [di+32h] ;~ 01A2:3465
cs=0x1a2;eip=0x003468; 	X(MOV(*(dw*)(raddr(ds,bx+0x26)), ax));	// 6724 mov     [bx+26h], ax ;~ 01A2:3468
cs=0x1a2;eip=0x00346b; 	T(MOV(ax, *(dw*)(raddr(ds,di+0x30))));	// 6725 mov     ax, [di+30h] ;~ 01A2:346B
cs=0x1a2;eip=0x00346e; 	X(MOV(*(dw*)(raddr(ds,bx+0x24)), ax));	// 6726 mov     [bx+24h], ax ;~ 01A2:346E
loc_13471:
	// 4794 
cs=0x1a2;eip=0x003471; 	T(MOV(ax, *(dw*)(raddr(ds,bx))));	// 6729 mov     ax, [bx] ;~ 01A2:3471
cs=0x1a2;eip=0x003473; 	J(CALL(sub_13177,0));	// 6730 call    sub_13177 ;~ 01A2:3473
cs=0x1a2;eip=0x003476; 	T(XOR(al, al));	// 6731 xor     al, al ;~ 01A2:3476
cs=0x1a2;eip=0x003478; 	J(CALL(sub_131ef,0));	// 6732 call    sub_131EF ;~ 01A2:3478
cs=0x1a2;eip=0x00347b; 	T(MOV(al, *(raddr(ds,bx+8))));	// 6733 mov     al, [bx+8] ;~ 01A2:347B
cs=0x1a2;eip=0x00347e; 	J(CALL(sub_131ef,0));	// 6734 call    sub_131EF ;~ 01A2:347E
cs=0x1a2;eip=0x003481; 	T(TEST(*(raddr(ds,bx+0x17)), 2));	// 6735 test    byte ptr [bx+17h], 2 ;~ 01A2:3481
cs=0x1a2;eip=0x003485; 	J(JNZ(loc_13499));	// 6736 jnz     short loc_13499 ;~ 01A2:3485
cs=0x1a2;eip=0x003487; 	X(OR(*(raddr(ds,bx+0x17)), 1));	// 6737 or      byte ptr [bx+17h], 1 ;~ 01A2:3487
cs=0x1a2;eip=0x00348b; 	T(MOVZX(eax, *(dw*)(raddr(ds,bx+0x4C))));	// 6738 movzx   eax, word ptr [bx+4Ch] ;~ 01A2:348B
cs=0x1a2;eip=0x003490; 	T(SHL(eax, 8));	// 6739 shl     eax, 8 ;~ 01A2:3490
cs=0x1a2;eip=0x003494; 	X(MOV(*(dd*)(raddr(ds,bx+4)), eax));	// 6740 mov     [bx+4], eax ;~ 01A2:3494
locret_13498:
	// 4795 
cs=0x1a2;eip=0x003498; 	J(RETN(0));	// 6743 retn ;~ 01A2:3498
loc_13499:
	// 4796 
cs=0x1a2;eip=0x003499; 	T(TEST(*(raddr(ds,bx+0x17)), 1));	// 6747 test    byte ptr [bx+17h], 1 ;~ 01A2:3499
cs=0x1a2;eip=0x00349d; 	J(JNZ(sub_131da));	// 6748 jnz     sub_131DA ;~ 01A2:349D
cs=0x1a2;eip=0x0034a1; 	J(RETN(0));	// 6749 retn ;~ 01A2:34A1
_gravis_134a2:
	// 6756 
cs=0x1a2;eip=0x0034a2; 	T(TEST(*(raddr(ds,bx+0x17)), 4));	// 6757 test    byte ptr [bx+17h], 4 ;~ 01A2:34A2
cs=0x1a2;eip=0x0034a6; 	J(JZ(locret_135bf));	// 6758 jz      locret_135BF ;~ 01A2:34A6
cs=0x1a2;eip=0x0034aa; 	T(XOR(al, al));	// 6759 xor     al, al ;~ 01A2:34AA
cs=0x1a2;eip=0x0034ac; 	J(CALL(_gravis_13363,0));	// 6760 call    _gravis_13363 ;~ 01A2:34AC
cs=0x1a2;eip=0x0034af; 	X(PUSHF);	// 6761 pushf ;~ 01A2:34AF
cs=0x1a2;eip=0x0034b0; 	T(CLI);	// 6762 cli ;~ 01A2:34B0
cs=0x1a2;eip=0x0034b1; 	T(MOV(dx, _gravis_port));	// 6763 mov     dx, _gravis_port ;~ 01A2:34B1
cs=0x1a2;eip=0x0034b5; 	T(DEC(dx));	// 6764 dec     dx ;~ 01A2:34B5
cs=0x1a2;eip=0x0034b6; 	T(MOV(al, *(raddr(ds,bx+0x18))));	// 6765 mov     al, [bx+18h] ;~ 01A2:34B6
cs=0x1a2;eip=0x0034b9; 	S(OUT(dx, al));	// 6766 out     dx, al ;~ 01A2:34B9
cs=0x1a2;eip=0x0034ba; 	T(INC(dx));	// 6767 inc     dx ;~ 01A2:34BA
cs=0x1a2;eip=0x0034bb; 	T(MOV(al, 0));	// 6768 mov     al, 0 ;~ 01A2:34BB
cs=0x1a2;eip=0x0034bd; 	S(OUT(dx, al));	// 6769 out     dx, al ;~ 01A2:34BD
cs=0x1a2;eip=0x0034be; 	T(ADD(dl, 2));	// 6770 add     dl, 2 ;~ 01A2:34BE
cs=0x1a2;eip=0x0034c1; 	T(MOV(al, 3));	// 6771 mov     al, 3 ;~ 01A2:34C1
cs=0x1a2;eip=0x0034c3; 	S(OUT(dx, al));	// 6772 out     dx, al ;~ 01A2:34C3
cs=0x1a2;eip=0x0034c4; 	T(SUB(dl, 2));	// 6773 sub     dl, 2 ;~ 01A2:34C4
cs=0x1a2;eip=0x0034c7; 	X(AND(*(raddr(ds,bx+0x17)), 0x0FE));	// 6774 and     byte ptr [bx+17h], 0FEh ;~ 01A2:34C7
cs=0x1a2;eip=0x0034cb; 	T(MOV(al, *(raddr(ds,bx+2))));	// 6775 mov     al, [bx+2] ;~ 01A2:34CB
cs=0x1a2;eip=0x0034ce; 	T(CMP(al, *(raddr(ds,bx+3))));	// 6776 cmp     al, [bx+3] ;~ 01A2:34CE
cs=0x1a2;eip=0x0034d1; 	J(JZ(loc_1355f));	// 6777 jz      loc_1355F ;~ 01A2:34D1
cs=0x1a2;eip=0x0034d5; 	X(MOV(*(raddr(ds,bx+3)), al));	// 6778 mov     [bx+3], al ;~ 01A2:34D5
cs=0x1a2;eip=0x0034d8; 	T(DEC(al));	// 6779 dec     al ;~ 01A2:34D8
cs=0x1a2;eip=0x0034da; 	T(XOR(ah, ah));	// 6780 xor     ah, ah ;~ 01A2:34DA
cs=0x1a2;eip=0x0034dc; 	T(SHL(ax, 6));	// 6781 shl     ax, 6 ;~ 01A2:34DC
cs=0x1a2;eip=0x0034df; 	T(MOV(di, ax));	// 6782 mov     di, ax ;~ 01A2:34DF
cs=0x1a2;eip=0x0034e1; 	T(ADD(di, offset(seg003,_myout)));	// 6783 add     di, offset _myout ;~ 01A2:34E1
cs=0x1a2;eip=0x0034e5; 	T(MOV(eax, *(dd*)(raddr(ds,bx+0x28))));	// 6784 mov     eax, [bx+28h] ;~ 01A2:34E5
cs=0x1a2;eip=0x0034e9; 	X(MOV(*(dd*)(raddr(ds,bx+0x40)), eax));	// 6785 mov     [bx+40h], eax ;~ 01A2:34E9
cs=0x1a2;eip=0x0034ed; 	T(MOV(eax, *(dd*)(raddr(ds,bx+0x2C))));	// 6786 mov     eax, [bx+2Ch] ;~ 01A2:34ED
cs=0x1a2;eip=0x0034f1; 	X(MOV(*(dd*)(raddr(ds,bx+0x44)), eax));	// 6787 mov     [bx+44h], eax ;~ 01A2:34F1
cs=0x1a2;eip=0x0034f5; 	T(MOV(eax, *(dd*)(raddr(ds,bx+0x30))));	// 6788 mov     eax, [bx+30h] ;~ 01A2:34F5
cs=0x1a2;eip=0x0034f9; 	X(MOV(*(dd*)(raddr(ds,bx+0x48)), eax));	// 6789 mov     [bx+48h], eax ;~ 01A2:34F9
cs=0x1a2;eip=0x0034fd; 	T(MOV(al, *(raddr(ds,di+0x3C))));	// 6790 mov     al, [di+3Ch] ;~ 01A2:34FD
cs=0x1a2;eip=0x003500; 	X(MOV(*(raddr(ds,bx+0x19)), al));	// 6791 mov     [bx+19h], al ;~ 01A2:3500
cs=0x1a2;eip=0x003503; 	T(MOVZX(ebp, *(dw*)(raddr(ds,di+0x34))));	// 6792 movzx   ebp, word ptr [di+34h] ;~ 01A2:3503
cs=0x1a2;eip=0x003508; 	X(MOV(*(dw*)(raddr(ds,bx+0x24)), bp));	// 6793 mov     [bx+24h], bp ;~ 01A2:3508
cs=0x1a2;eip=0x00350b; 	T(SHL(ebp, 0x0D));	// 6794 shl     ebp, 0Dh ;~ 01A2:350B
cs=0x1a2;eip=0x00350f; 	T(MOV(edi, *(dd*)(raddr(ds,bx+0x48))));	// 6795 mov     edi, [bx+48h] ;~ 01A2:350F
cs=0x1a2;eip=0x003513; 	T(TEST(*(raddr(ds,bx+0x19)), 8));	// 6796 test    byte ptr [bx+19h], 8 ;~ 01A2:3513
cs=0x1a2;eip=0x003517; 	J(JZ(loc_13544));	// 6797 jz      short loc_13544 ;~ 01A2:3517
cs=0x1a2;eip=0x003519; 	T(MOV(edi, *(dd*)(raddr(ds,bx+0x40))));	// 6798 mov     edi, [bx+40h] ;~ 01A2:3519
cs=0x1a2;eip=0x00351d; 	T(SHL(edi, 9));	// 6799 shl     edi, 9 ;~ 01A2:351D
cs=0x1a2;eip=0x003521; 	T(ADD(edi, ebp));	// 6800 add     edi, ebp ;~ 01A2:3521
cs=0x1a2;eip=0x003524; 	T(MOV(al, 3));	// 6801 mov     al, 3 ;~ 01A2:3524
cs=0x1a2;eip=0x003526; 	S(OUT(dx, al));	// 6802 out     dx, al ;~ 01A2:3526
cs=0x1a2;eip=0x003527; 	T(INC(dx));	// 6803 inc     dx ;~ 01A2:3527
cs=0x1a2;eip=0x003528; 	T(MOV(ax, di));	// 6804 mov     ax, di ;~ 01A2:3528
cs=0x1a2;eip=0x00352a; 	S(OUT(dx, ax));	// 6805 out     dx, ax ;~ 01A2:352A
cs=0x1a2;eip=0x00352b; 	T(DEC(dx));	// 6806 dec     dx ;~ 01A2:352B
cs=0x1a2;eip=0x00352c; 	T(SHR(edi, 0x10));	// 6807 shr     edi, 10h ;~ 01A2:352C
cs=0x1a2;eip=0x003530; 	T(MOV(al, 2));	// 6808 mov     al, 2 ;~ 01A2:3530
cs=0x1a2;eip=0x003532; 	S(OUT(dx, al));	// 6809 out     dx, al ;~ 01A2:3532
cs=0x1a2;eip=0x003533; 	T(INC(dx));	// 6810 inc     dx ;~ 01A2:3533
cs=0x1a2;eip=0x003534; 	T(MOV(ax, di));	// 6811 mov     ax, di ;~ 01A2:3534
cs=0x1a2;eip=0x003536; 	S(OUT(dx, ax));	// 6812 out     dx, ax ;~ 01A2:3536
cs=0x1a2;eip=0x003537; 	T(DEC(dx));	// 6813 dec     dx ;~ 01A2:3537
cs=0x1a2;eip=0x003538; 	T(MOV(edi, *(dd*)(raddr(ds,bx+0x48))));	// 6814 mov     edi, [bx+48h] ;~ 01A2:3538
cs=0x1a2;eip=0x00353c; 	T(TEST(*(raddr(ds,bx+0x19)), 4));	// 6815 test    byte ptr [bx+19h], 4 ;~ 01A2:353C
cs=0x1a2;eip=0x003540; 	J(JNZ(loc_13544));	// 6816 jnz     short loc_13544 ;~ 01A2:3540
cs=0x1a2;eip=0x003542; 	T(INC(edi));	// 6817 inc     edi ;~ 01A2:3542
loc_13544:
	// 4797 
cs=0x1a2;eip=0x003544; 	T(SHL(edi, 9));	// 6821 shl     edi, 9 ;~ 01A2:3544
cs=0x1a2;eip=0x003548; 	T(ADD(edi, ebp));	// 6822 add     edi, ebp ;~ 01A2:3548
cs=0x1a2;eip=0x00354b; 	T(MOV(al, 5));	// 6823 mov     al, 5 ;~ 01A2:354B
cs=0x1a2;eip=0x00354d; 	S(OUT(dx, al));	// 6824 out     dx, al ;~ 01A2:354D
cs=0x1a2;eip=0x00354e; 	T(INC(dx));	// 6825 inc     dx ;~ 01A2:354E
cs=0x1a2;eip=0x00354f; 	T(MOV(ax, di));	// 6826 mov     ax, di ;~ 01A2:354F
cs=0x1a2;eip=0x003551; 	S(OUT(dx, ax));	// 6827 out     dx, ax ;~ 01A2:3551
cs=0x1a2;eip=0x003552; 	T(DEC(dx));	// 6828 dec     dx ;~ 01A2:3552
cs=0x1a2;eip=0x003553; 	T(SHR(edi, 0x10));	// 6829 shr     edi, 10h ;~ 01A2:3553
cs=0x1a2;eip=0x003557; 	T(MOV(al, 4));	// 6830 mov     al, 4 ;~ 01A2:3557
cs=0x1a2;eip=0x003559; 	S(OUT(dx, al));	// 6831 out     dx, al ;~ 01A2:3559
cs=0x1a2;eip=0x00355a; 	T(INC(dx));	// 6832 inc     dx ;~ 01A2:355A
cs=0x1a2;eip=0x00355b; 	T(MOV(ax, di));	// 6833 mov     ax, di ;~ 01A2:355B
cs=0x1a2;eip=0x00355d; 	S(OUT(dx, ax));	// 6834 out     dx, ax ;~ 01A2:355D
cs=0x1a2;eip=0x00355e; 	T(DEC(dx));	// 6835 dec     dx ;~ 01A2:355E
loc_1355f:
	// 4798 
cs=0x1a2;eip=0x00355f; 	T(MOVZX(edi, *(dw*)(raddr(ds,bx+0x24))));	// 6838 movzx   edi, word ptr [bx+24h] ;~ 01A2:355F
cs=0x1a2;eip=0x003564; 	T(SHL(edi, 0x0D));	// 6839 shl     edi, 0Dh ;~ 01A2:3564
cs=0x1a2;eip=0x003568; 	T(MOVZX(eax, *(dw*)(raddr(ds,bx+0x4C))));	// 6840 movzx   eax, word ptr [bx+4Ch] ;~ 01A2:3568
cs=0x1a2;eip=0x00356d; 	T(SHL(eax, 9));	// 6841 shl     eax, 9 ;~ 01A2:356D
cs=0x1a2;eip=0x003571; 	T(ADD(edi, eax));	// 6842 add     edi, eax ;~ 01A2:3571
cs=0x1a2;eip=0x003574; 	T(MOV(al, 0x0B));	// 6843 mov     al, 0Bh ;~ 01A2:3574
cs=0x1a2;eip=0x003576; 	S(OUT(dx, al));	// 6844 out     dx, al ;~ 01A2:3576
cs=0x1a2;eip=0x003577; 	T(INC(dx));	// 6845 inc     dx ;~ 01A2:3577
cs=0x1a2;eip=0x003578; 	T(MOV(ax, di));	// 6846 mov     ax, di ;~ 01A2:3578
cs=0x1a2;eip=0x00357a; 	S(OUT(dx, ax));	// 6847 out     dx, ax ;~ 01A2:357A
cs=0x1a2;eip=0x00357b; 	T(DEC(dx));	// 6848 dec     dx ;~ 01A2:357B
cs=0x1a2;eip=0x00357c; 	T(SHR(edi, 0x10));	// 6849 shr     edi, 10h ;~ 01A2:357C
cs=0x1a2;eip=0x003580; 	T(MOV(al, 0x0A));	// 6850 mov     al, 0Ah ;~ 01A2:3580
cs=0x1a2;eip=0x003582; 	S(OUT(dx, al));	// 6851 out     dx, al ;~ 01A2:3582
cs=0x1a2;eip=0x003583; 	T(INC(dx));	// 6852 inc     dx ;~ 01A2:3583
cs=0x1a2;eip=0x003584; 	T(MOV(ax, di));	// 6853 mov     ax, di ;~ 01A2:3584
cs=0x1a2;eip=0x003586; 	S(OUT(dx, ax));	// 6854 out     dx, ax ;~ 01A2:3586
cs=0x1a2;eip=0x003587; 	T(DEC(dx));	// 6855 dec     dx ;~ 01A2:3587
cs=0x1a2;eip=0x003588; 	T(MOV(ax, *(dw*)(raddr(ds,bx))));	// 6856 mov     ax, [bx] ;~ 01A2:3588
cs=0x1a2;eip=0x00358a; 	J(CALL(_gravis_13215,0));	// 6857 call    _gravis_13215 ;~ 01A2:358A
cs=0x1a2;eip=0x00358d; 	T(TEST(*(raddr(ds,bx+0x17)), 2));	// 6858 test    byte ptr [bx+17h], 2 ;~ 01A2:358D
cs=0x1a2;eip=0x003591; 	J(JNZ(loc_135c0));	// 6859 jnz     short loc_135C0 ;~ 01A2:3591
cs=0x1a2;eip=0x003593; 	X(OR(*(raddr(ds,bx+0x17)), 1));	// 6860 or      byte ptr [bx+17h], 1 ;~ 01A2:3593
cs=0x1a2;eip=0x003597; 	T(MOV(dx, _gravis_port));	// 6861 mov     dx, _gravis_port ;~ 01A2:3597
cs=0x1a2;eip=0x00359b; 	T(MOV(ah, *(raddr(ds,bx+0x19))));	// 6862 mov     ah, [bx+19h] ;~ 01A2:359B
cs=0x1a2;eip=0x00359e; 	T(AND(ah, 0x1C));	// 6863 and     ah, 1Ch ;~ 01A2:359E
cs=0x1a2;eip=0x0035a1; 	T(MOV(al, ah));	// 6864 mov     al, ah ;~ 01A2:35A1
cs=0x1a2;eip=0x0035a3; 	T(AND(al, 8));	// 6865 and     al, 8 ;~ 01A2:35A3
cs=0x1a2;eip=0x0035a5; 	T(SHL(al, 2));	// 6866 shl     al, 2 ;~ 01A2:35A5
cs=0x1a2;eip=0x0035a8; 	T(XOR(al, 0x20));	// 6867 xor     al, 20h ;~ 01A2:35A8
cs=0x1a2;eip=0x0035aa; 	T(OR(ah, al));	// 6868 or      ah, al ;~ 01A2:35AA
cs=0x1a2;eip=0x0035ac; 	T(MOV(al, 0));	// 6869 mov     al, 0 ;~ 01A2:35AC
cs=0x1a2;eip=0x0035ae; 	S(OUT(dx, al));	// 6870 out     dx, al ;~ 01A2:35AE
cs=0x1a2;eip=0x0035af; 	T(ADD(dl, 2));	// 6871 add     dl, 2 ;~ 01A2:35AF
cs=0x1a2;eip=0x0035b2; 	T(MOV(al, ah));	// 6872 mov     al, ah ;~ 01A2:35B2
cs=0x1a2;eip=0x0035b4; 	S(OUT(dx, al));	// 6873 out     dx, al ;~ 01A2:35B4
cs=0x1a2;eip=0x0035b5; 	T(SUB(dl, 2));	// 6874 sub     dl, 2 ;~ 01A2:35B5
cs=0x1a2;eip=0x0035b8; 	X(POPF);	// 6875 popf ;~ 01A2:35B8
cs=0x1a2;eip=0x0035b9; 	T(MOV(al, *(raddr(ds,bx+8))));	// 6876 mov     al, [bx+8] ;~ 01A2:35B9
cs=0x1a2;eip=0x0035bc; 	J(CALL(_gravis_132a9,0));	// 6877 call    _gravis_132A9 ;~ 01A2:35BC
locret_135bf:
	// 4799 
cs=0x1a2;eip=0x0035bf; 	J(RETN(0));	// 6880 retn ;~ 01A2:35BF
loc_135c0:
	// 4800 
cs=0x1a2;eip=0x0035c0; 	X(POPF);	// 6884 popf ;~ 01A2:35C0
cs=0x1a2;eip=0x0035c1; 	T(TEST(*(raddr(ds,bx+0x17)), 1));	// 6885 test    byte ptr [bx+17h], 1 ;~ 01A2:35C1
cs=0x1a2;eip=0x0035c5; 	J(JNZ(_gravis_13272));	// 6886 jnz     _gravis_13272 ;~ 01A2:35C5
cs=0x1a2;eip=0x0035c9; 	J(RETN(0));	// 6887 retn ;~ 01A2:35C9
_gravis_init:
	// 9007 
cs=0x1a2;eip=0x004269; 	X(MOV(_sndflags_24622, 0x24));	// 9009 mov     _sndflags_24622, 24h ; '$' ;~ 01A2:4269
cs=0x1a2;eip=0x00426e; 	X(MOV(byte_24623, 1));	// 9010 mov     byte_24623, 1 ;~ 01A2:426E
cs=0x1a2;eip=0x004273; 	X(MOV(_bit_mode, 16));	// 9011 mov     _bit_mode, 16 ;~ 01A2:4273
cs=0x1a2;eip=0x004278; 	X(MOV(byte_2463b, 9));	// 9012 mov     byte_2463B, 9 ;~ 01A2:4278
cs=0x1a2;eip=0x00427d; 	T(TEST(*(db*)(((db*)&_config_word)), 0x10));	// 9013 test    byte ptr _config_word, 10h ;~ 01A2:427D
cs=0x1a2;eip=0x004282; 	J(JZ(loc_14289));	// 9014 jz      short loc_14289 ;~ 01A2:4282
cs=0x1a2;eip=0x004284; 	X(AND(byte_2463b, 0x0FE));	// 9015 and     byte_2463B, 0FEh ;~ 01A2:4284
loc_14289:
	// 4939 
cs=0x1a2;eip=0x004289; 	T(MOV(ax, _snd_base_port));	// 9018 mov     ax, _snd_base_port ;~ 01A2:4289
cs=0x1a2;eip=0x00428c; 	T(CMP(ax, -1));	// 9019 cmp     ax, -1 ;~ 01A2:428C
cs=0x1a2;eip=0x00428f; 	J(JZ(loc_142b1));	// 9020 jz      short loc_142B1 ;~ 01A2:428F
cs=0x1a2;eip=0x004291; 	T(ADD(ax, 0x103));	// 9021 add     ax, 103h ;~ 01A2:4291
cs=0x1a2;eip=0x004294; 	X(MOV(_gravis_port, ax));	// 9022 mov     _gravis_port, ax ;~ 01A2:4294
cs=0x1a2;eip=0x004297; 	T(MOV(al, _irq_number));	// 9023 mov     al, _irq_number ;~ 01A2:4297
cs=0x1a2;eip=0x00429a; 	T(CMP(al, 0x0FF));	// 9024 cmp     al, 0FFh ;~ 01A2:429A
cs=0x1a2;eip=0x00429c; 	J(JZ(loc_142b1));	// 9025 jz      short loc_142B1 ;~ 01A2:429C
cs=0x1a2;eip=0x00429e; 	X(MOV(_irq_number_0, al));	// 9026 mov     _irq_number_0, al ;~ 01A2:429E
cs=0x1a2;eip=0x0042a1; 	X(MOV(byte_2462b, al));	// 9027 mov     byte_2462B, al ;~ 01A2:42A1
cs=0x1a2;eip=0x0042a4; 	T(MOV(al, _dma_channel));	// 9028 mov     al, _dma_channel ;~ 01A2:42A4
cs=0x1a2;eip=0x0042a7; 	X(MOV(_dma_channel_0, al));	// 9029 mov     _dma_channel_0, al ;~ 01A2:42A7
cs=0x1a2;eip=0x0042aa; 	X(MOV(byte_2462d, al));	// 9030 mov     byte_2462D, al ;~ 01A2:42AA
cs=0x1a2;eip=0x0042ad; 	T(CMP(al, 0x0FF));	// 9031 cmp     al, 0FFh ;~ 01A2:42AD
cs=0x1a2;eip=0x0042af; 	J(JNZ(loc_142da));	// 9032 jnz     short loc_142DA ;~ 01A2:42AF
loc_142b1:
	// 4940 
cs=0x1a2;eip=0x0042b1; 	J(CALL(_gravis_17f7d,0));	// 9036 call    _gravis_17F7D ;~ 01A2:42B1
cs=0x1a2;eip=0x0042b4; 	J(JC(loc_1432f));	// 9037 jb      short loc_1432F ;~ 01A2:42B4
cs=0x1a2;eip=0x0042b6; 	X(MOV(_snd_base_port, dx));	// 9038 mov     _snd_base_port, dx ;~ 01A2:42B6
cs=0x1a2;eip=0x0042ba; 	T(ADD(dx, 0x103));	// 9039 add     dx, 103h ;~ 01A2:42BA
cs=0x1a2;eip=0x0042be; 	X(MOV(_gravis_port, dx));	// 9040 mov     _gravis_port, dx ;~ 01A2:42BE
cs=0x1a2;eip=0x0042c2; 	X(MOV(_irq_number_0, bl));	// 9041 mov     _irq_number_0, bl ;~ 01A2:42C2
cs=0x1a2;eip=0x0042c6; 	X(MOV(_irq_number, bl));	// 9042 mov     _irq_number, bl ;~ 01A2:42C6
cs=0x1a2;eip=0x0042ca; 	X(MOV(byte_2462b, bh));	// 9043 mov     byte_2462B, bh ;~ 01A2:42CA
cs=0x1a2;eip=0x0042ce; 	X(MOV(_dma_channel_0, cl));	// 9044 mov     _dma_channel_0, cl ;~ 01A2:42CE
cs=0x1a2;eip=0x0042d2; 	X(MOV(_dma_channel, cl));	// 9045 mov     _dma_channel, cl ;~ 01A2:42D2
cs=0x1a2;eip=0x0042d6; 	X(MOV(byte_2462d, ch));	// 9046 mov     byte_2462D, ch ;~ 01A2:42D6
loc_142da:
	// 4941 
cs=0x1a2;eip=0x0042da; 	J(CALL(_gravis_17e86,0));	// 9049 call    _gravis_17E86 ;~ 01A2:42DA
cs=0x1a2;eip=0x0042dd; 	T(MOV(dx, 0x0F7B));	// 9050 mov     dx, 0F7Bh ;~ 01A2:42DD
cs=0x1a2;eip=0x0042e0; 	J(JC(locret_1432e));	// 9051 jb      short locret_1432E ;~ 01A2:42E0
cs=0x1a2;eip=0x0042e2; 	T(MOV(al, byte_246d8));	// 9052 mov     al, byte_246D8 ;~ 01A2:42E2
cs=0x1a2;eip=0x0042e5; 	T(CMP(al, -1));	// 9053 cmp     al, -1 ;~ 01A2:42E5
cs=0x1a2;eip=0x0042e7; 	J(JNZ(loc_142ec));	// 9054 jnz     short loc_142EC ;~ 01A2:42E7
cs=0x1a2;eip=0x0042e9; 	J(CALL(_gravis_17f30,0));	// 9055 call    _gravis_17F30 ;~ 01A2:42E9
loc_142ec:
	// 4942 
cs=0x1a2;eip=0x0042ec; 	X(MOV(byte_24628, al));	// 9058 mov     byte_24628, al ;~ 01A2:42EC
cs=0x1a2;eip=0x0042ef; 	X(MOV(byte_246d8, al));	// 9059 mov     byte_246D8, al ;~ 01A2:42EF
cs=0x1a2;eip=0x0042f2; 	T(MOV(al, 0x20));	// 9060 mov     al, 20h ; ' ' ;~ 01A2:42F2
cs=0x1a2;eip=0x0042f4; 	J(CALL(_gravis_18079,0));	// 9061 call    _gravis_18079 ;~ 01A2:42F4
cs=0x1a2;eip=0x0042f7; 	J(CALL(_gravis_18216,0));	// 9062 call    _gravis_18216 ;~ 01A2:42F7
cs=0x1a2;eip=0x0042fa; 	T(MOV(dx, _gravis_port));	// 9063 mov     dx, _gravis_port ;~ 01A2:42FA
cs=0x1a2;eip=0x0042fe; 	T(SUB(dx, 0x103));	// 9064 sub     dx, 103h ;~ 01A2:42FE
cs=0x1a2;eip=0x004302; 	T(MOV(al, byte_2463b));	// 9065 mov     al, byte_2463B ;~ 01A2:4302
cs=0x1a2;eip=0x004305; 	S(OUT(dx, al));	// 9066 out     dx, al ;~ 01A2:4305
cs=0x1a2;eip=0x004306; 	X(MOV(off_245ca, m2c::k_gravis_13215));	// 9067 mov     off_245CA, offset _gravis_13215 ;~ 01A2:4306
cs=0x1a2;eip=0x00430c; 	X(MOV(off_245c8, m2c::k_gravis_134a2));	// 9068 mov     off_245C8, offset _gravis_134A2 ;~ 01A2:430C
cs=0x1a2;eip=0x004312; 	X(MOV(off_245cc, m2c::k_gravis_132a9));	// 9069 mov     off_245CC, offset _gravis_132A9 ;~ 01A2:4312
cs=0x1a2;eip=0x004318; 	X(MOV(off_245ce, m2c::k_gravis_13272));	// 9070 mov     off_245CE, offset _gravis_13272 ;~ 01A2:4318
cs=0x1a2;eip=0x00431e; 	X(MOV(_freq1, 22050));	// 9071 mov     _freq1, 22050 ;~ 01A2:431E
cs=0x1a2;eip=0x004324; 	T(MOV(si, m2c::k_gravis_int));	// 9072 mov     si, offset _gravis_int ; myfunc ;~ 01A2:4324
cs=0x1a2;eip=0x004327; 	T(MOV(al, _irq_number_0));	// 9073 mov     al, _irq_number_0 ;~ 01A2:4327
cs=0x1a2;eip=0x00432a; 	J(CALL(_setsnd_handler,0));	// 9074 call    _setsnd_handler ;~ 01A2:432A
cs=0x1a2;eip=0x00432d; 	T(CLC);	// 9075 clc ;~ 01A2:432D
locret_1432e:
	// 4943 
cs=0x1a2;eip=0x00432e; 	J(RETN(0));	// 9078 retn ;~ 01A2:432E
loc_1432f:
	// 4944 
cs=0x1a2;eip=0x00432f; 	T(MOV(dx, offset(seg003,_acouldnotfindthe)));	// 9082 mov     dx, offset _aCouldNotFindThe ; "Could not find the ULTRASND environment"... ;~ 01A2:432F
	return _group15(m2c::kseg000_4332_proc, _state);
_gravis_int:
	// 9127 
cs=0x1a2;eip=0x004358; 	X(PUSH(ax));	// 9128 push    ax ;~ 01A2:4358
cs=0x1a2;eip=0x004359; 	X(PUSH(bx));	// 9129 push    bx ;~ 01A2:4359
cs=0x1a2;eip=0x00435a; 	X(PUSH(cx));	// 9130 push    cx ;~ 01A2:435A
cs=0x1a2;eip=0x00435b; 	X(PUSH(dx));	// 9131 push    dx ;~ 01A2:435B
cs=0x1a2;eip=0x00435c; 	X(PUSH(ds));	// 9132 push    ds ;~ 01A2:435C
cs=0x1a2;eip=0x00435d; 	T(MOV(ax, seg_offset(seg003)));	// 9133 mov     ax, seg seg003 ;~ 01A2:435D
cs=0x1a2;eip=0x004360; 	T(MOV(ds, ax));	// 9134 mov     ds, ax ;~ 01A2:4360
cs=0x1a2;eip=0x004362; 	T(MOV(al, 0x20));	// 9135 mov     al, 20h ; ' ' ;~ 01A2:4362
cs=0x1a2;eip=0x004364; 	S(OUT(0x20, al));	// 9136 out     20h, al         ; Interrupt controller, 8259A. ;~ 01A2:4364
cs=0x1a2;eip=0x004366; 	T(MOV(bx, 1));	// 9137 mov     bx, 1 ;~ 01A2:4366
cs=0x1a2;eip=0x004369; 	T(MOV(cl, _irq_number));	// 9138 mov     cl, _irq_number ;~ 01A2:4369
cs=0x1a2;eip=0x00436d; 	T(SHL(bx, cl));	// 9139 shl     bx, cl ;~ 01A2:436D
cs=0x1a2;eip=0x00436f; 	T(MOV(dx, 0x21));	// 9140 mov     dx, 21h ; '!' ;~ 01A2:436F
cs=0x1a2;eip=0x004372; 	T(OR(bh, bh));	// 9141 or      bh, bh ;~ 01A2:4372
cs=0x1a2;eip=0x004374; 	J(JZ(loc_1437f));	// 9142 jz      short loc_1437F ;~ 01A2:4374
cs=0x1a2;eip=0x004376; 	T(MOV(dx, 0x0A1));	// 9143 mov     dx, 0A1h ; '¡' ;~ 01A2:4376
cs=0x1a2;eip=0x004379; 	T(MOV(al, 0x20));	// 9144 mov     al, 20h ; ' ' ;~ 01A2:4379
cs=0x1a2;eip=0x00437b; 	S(OUT(0x0A0, al));	// 9145 out     0A0h, al        ; PIC 2  same as 0020 for PIC 1 ;~ 01A2:437B
cs=0x1a2;eip=0x00437d; 	T(MOV(bl, bh));	// 9146 mov     bl, bh ;~ 01A2:437D
loc_1437f:
	// 4946 
cs=0x1a2;eip=0x00437f; 	S(IN(al, dx));	// 9149 in      al, dx          ; Interrupt Controller #2, 8259A ;~ 01A2:437F
cs=0x1a2;eip=0x004380; 	T(OR(al, bl));	// 9150 or      al, bl ;~ 01A2:4380
cs=0x1a2;eip=0x004382; 	S(OUT(dx, al));	// 9151 out     dx, al          ; Interrupt Controller #2, 8259A ;~ 01A2:4382
cs=0x1a2;eip=0x004383; 	T(STI);	// 9152 sti ;~ 01A2:4383
loc_14384:
	// 4947 
cs=0x1a2;eip=0x004384; 	T(MOV(dx, _gravis_port));	// 9155 mov     dx, _gravis_port ;~ 01A2:4384
cs=0x1a2;eip=0x004388; 	T(SUB(dx, 0x0FD));	// 9156 sub     dx, 0FDh ; 'ý' ;~ 01A2:4388
cs=0x1a2;eip=0x00438c; 	S(IN(al, dx));	// 9157 in      al, dx ;~ 01A2:438C
cs=0x1a2;eip=0x00438d; 	T(TEST(al, 0x60));	// 9158 test    al, 1100000b ;~ 01A2:438D
cs=0x1a2;eip=0x00438f; 	J(JNZ(loc_1444c));	// 9159 jnz     loc_1444C ;~ 01A2:438F
loc_14393:
	// 4948 
cs=0x1a2;eip=0x004393; 	T(TEST(al, 4));	// 9162 test    al, 4 ;~ 01A2:4393
cs=0x1a2;eip=0x004395; 	J(JNZ(loc_143c0));	// 9163 jnz     short loc_143C0 ;~ 01A2:4395
loc_14397:
	// 4949 
cs=0x1a2;eip=0x004397; 	T(TEST(al, 0x80));	// 9166 test    al, 80h ;~ 01A2:4397
cs=0x1a2;eip=0x004399; 	J(JNZ(loc_143f8));	// 9167 jnz     short loc_143F8 ;~ 01A2:4399
loc_1439b:
	// 4950 
cs=0x1a2;eip=0x00439b; 	T(TEST(al, 0x0E4));	// 9171 test    al, 0E4h ;~ 01A2:439B
cs=0x1a2;eip=0x00439d; 	J(JNZ(loc_14384));	// 9172 jnz     short loc_14384 ;~ 01A2:439D
cs=0x1a2;eip=0x00439f; 	T(MOV(bx, 1));	// 9173 mov     bx, 1 ;~ 01A2:439F
cs=0x1a2;eip=0x0043a2; 	T(MOV(cl, _irq_number));	// 9174 mov     cl, _irq_number ;~ 01A2:43A2
cs=0x1a2;eip=0x0043a6; 	T(SHL(bx, cl));	// 9175 shl     bx, cl ;~ 01A2:43A6
cs=0x1a2;eip=0x0043a8; 	T(MOV(dx, 0x21));	// 9176 mov     dx, 21h ; '!' ;~ 01A2:43A8
cs=0x1a2;eip=0x0043ab; 	T(OR(bh, bh));	// 9177 or      bh, bh ;~ 01A2:43AB
cs=0x1a2;eip=0x0043ad; 	J(JZ(loc_143b4));	// 9178 jz      short loc_143B4 ;~ 01A2:43AD
cs=0x1a2;eip=0x0043af; 	T(MOV(dx, 0x0A1));	// 9179 mov     dx, 0A1h ; '¡' ;~ 01A2:43AF
cs=0x1a2;eip=0x0043b2; 	T(MOV(bl, bh));	// 9180 mov     bl, bh ;~ 01A2:43B2
loc_143b4:
	// 4951 
cs=0x1a2;eip=0x0043b4; 	T(NOT(bl));	// 9183 not     bl ;~ 01A2:43B4
cs=0x1a2;eip=0x0043b6; 	S(IN(al, dx));	// 9184 in      al, dx          ; Interrupt Controller #2, 8259A ;~ 01A2:43B6
cs=0x1a2;eip=0x0043b7; 	T(AND(al, bl));	// 9185 and     al, bl ;~ 01A2:43B7
cs=0x1a2;eip=0x0043b9; 	S(OUT(dx, al));	// 9186 out     dx, al          ; Interrupt Controller #2, 8259A ;~ 01A2:43B9
cs=0x1a2;eip=0x0043ba; 	X(POP(ds));	// 9187 pop     ds ;~ 01A2:43BA
cs=0x1a2;eip=0x0043bb; 	X(POP(dx));	// 9188 pop     dx ;~ 01A2:43BB
cs=0x1a2;eip=0x0043bc; 	X(POP(cx));	// 9189 pop     cx ;~ 01A2:43BC
cs=0x1a2;eip=0x0043bd; 	X(POP(bx));	// 9190 pop     bx ;~ 01A2:43BD
cs=0x1a2;eip=0x0043be; 	X(POP(ax));	// 9191 pop     ax ;~ 01A2:43BE
cs=0x1a2;eip=0x0043bf; 	J(IRET);	// 9192 iret ;~ 01A2:43BF
loc_143c0:
	// 4952 
cs=0x1a2;eip=0x0043c0; 	X(PUSH(ax));	// 9196 push    ax ;~ 01A2:43C0
cs=0x1a2;eip=0x0043c1; 	T(MOV(dx, _gravis_port));	// 9197 mov     dx, _gravis_port ;~ 01A2:43C1
cs=0x1a2;eip=0x0043c5; 	X(PUSHF);	// 9198 pushf ;~ 01A2:43C5
cs=0x1a2;eip=0x0043c6; 	T(CLI);	// 9199 cli ;~ 01A2:43C6
cs=0x1a2;eip=0x0043c7; 	T(MOV(al, 0x45));	// 9200 mov     al, 45h ; 'E' ;~ 01A2:43C7
cs=0x1a2;eip=0x0043c9; 	S(OUT(dx, al));	// 9201 out     dx, al ;~ 01A2:43C9
cs=0x1a2;eip=0x0043ca; 	T(ADD(dl, 2));	// 9202 add     dl, 2 ;~ 01A2:43CA
cs=0x1a2;eip=0x0043cd; 	T(XOR(al, al));	// 9203 xor     al, al ;~ 01A2:43CD
cs=0x1a2;eip=0x0043cf; 	S(OUT(dx, al));	// 9204 out     dx, al ;~ 01A2:43CF
cs=0x1a2;eip=0x0043d0; 	T(MOV(al, 4));	// 9205 mov     al, 4 ;~ 01A2:43D0
cs=0x1a2;eip=0x0043d2; 	S(OUT(dx, al));	// 9206 out     dx, al ;~ 01A2:43D2
cs=0x1a2;eip=0x0043d3; 	X(POPF);	// 9207 popf ;~ 01A2:43D3
cs=0x1a2;eip=0x0043d4; 	X(DEC(byte_24619));	// 9208 dec     byte_24619 ;~ 01A2:43D4
cs=0x1a2;eip=0x0043d8; 	J(JNZ(loc_143f5));	// 9209 jnz     short loc_143F5 ;~ 01A2:43D8
cs=0x1a2;eip=0x0043da; 	T(MOV(al, byte_24618));	// 9210 mov     al, byte_24618 ;~ 01A2:43DA
cs=0x1a2;eip=0x0043dd; 	X(MOV(byte_24619, al));	// 9211 mov     byte_24619, al ;~ 01A2:43DD
cs=0x1a2;eip=0x0043e0; 	X(PUSHF);	// 9212 pushf ;~ 01A2:43E0
cs=0x1a2;eip=0x0043e1; 	T(STI);	// 9213 sti ;~ 01A2:43E1
cs=0x1a2;eip=0x0043e2; 	X(PUSHAD);	// 9214 pushad ;~ 01A2:43E2
cs=0x1a2;eip=0x0043e4; 	X(PUSH(es));	// 9215 push    es ;~ 01A2:43E4
cs=0x1a2;eip=0x0043e5; 	X(PUSH(fs));	// 9216 push    fs ;~ 01A2:43E5
cs=0x1a2;eip=0x0043e7; 	X(PUSH(gs));	// 9217 push    gs ;~ 01A2:43E7
cs=0x1a2;eip=0x0043e9; 	J(CALL(sub_140b6,0));	// 9218 call    sub_140B6 ;~ 01A2:43E9
cs=0x1a2;eip=0x0043ec; 	X(POP(gs));	// 9219 pop     gs ;~ 01A2:43EC
cs=0x1a2;eip=0x0043ee; 	X(POP(fs));	// 9220 pop     fs ;~ 01A2:43EE
cs=0x1a2;eip=0x0043f0; 	X(POP(es));	// 9222 pop     es ;~ 01A2:43F0
cs=0x1a2;eip=0x0043f1; 	X(POPAD);	// 9223 popad ;~ 01A2:43F1
cs=0x1a2;eip=0x0043f3; 	T(NOP);	// 9224 nop ;~ 01A2:43F3
cs=0x1a2;eip=0x0043f4; 	X(POPF);	// 9225 popf ;~ 01A2:43F4
loc_143f5:
	// 4953 
cs=0x1a2;eip=0x0043f5; 	X(POP(ax));	// 9228 pop     ax ;~ 01A2:43F5
cs=0x1a2;eip=0x0043f6; 	J(JMP(loc_14397));	// 9229 jmp     short loc_14397 ;~ 01A2:43F6
loc_143f8:
	// 4954 
cs=0x1a2;eip=0x0043f8; 	T(MOV(ah, al));	// 9233 mov     ah, al ;~ 01A2:43F8
cs=0x1a2;eip=0x0043fa; 	T(MOV(dx, _gravis_port));	// 9234 mov     dx, _gravis_port ;~ 01A2:43FA
cs=0x1a2;eip=0x0043fe; 	X(PUSHF);	// 9235 pushf ;~ 01A2:43FE
cs=0x1a2;eip=0x0043ff; 	T(CLI);	// 9236 cli ;~ 01A2:43FF
cs=0x1a2;eip=0x004400; 	T(MOV(al, 0x41));	// 9237 mov     al, 41h ; 'A' ;~ 01A2:4400
cs=0x1a2;eip=0x004402; 	S(OUT(dx, al));	// 9238 out     dx, al ;~ 01A2:4402
cs=0x1a2;eip=0x004403; 	T(ADD(dl, 2));	// 9239 add     dl, 2 ;~ 01A2:4403
cs=0x1a2;eip=0x004406; 	S(IN(al, dx));	// 9240 in      al, dx ;~ 01A2:4406
cs=0x1a2;eip=0x004407; 	T(SUB(dl, 2));	// 9241 sub     dl, 2 ;~ 01A2:4407
cs=0x1a2;eip=0x00440a; 	X(POPF);	// 9242 popf ;~ 01A2:440A
cs=0x1a2;eip=0x00440b; 	T(MOV(al, ah));	// 9243 mov     al, ah ;~ 01A2:440B
cs=0x1a2;eip=0x00440d; 	T(CMP(word_24636, 0));	// 9244 cmp     word_24636, 0 ;~ 01A2:440D
cs=0x1a2;eip=0x004412; 	J(JNZ(loc_1441c));	// 9245 jnz     short loc_1441C ;~ 01A2:4412
cs=0x1a2;eip=0x004414; 	X(MOV(byte_2466e, 0));	// 9246 mov     byte_2466E, 0 ;~ 01A2:4414
cs=0x1a2;eip=0x004419; 	J(JMP(loc_1439b));	// 9247 jmp     short loc_1439B ;~ 01A2:4419
loc_1441c:
	// 4955 
cs=0x1a2;eip=0x00441c; 	X(PUSHAD);	// 9252 pushad ;~ 01A2:441C
cs=0x1a2;eip=0x00441e; 	X(PUSH(es));	// 9253 push    es ;~ 01A2:441E
cs=0x1a2;eip=0x00441f; 	X(PUSH(fs));	// 9254 push    fs ;~ 01A2:441F
cs=0x1a2;eip=0x004421; 	X(PUSH(gs));	// 9255 push    gs ;~ 01A2:4421
cs=0x1a2;eip=0x004423; 	X(PUSH(*(dw*)(((db*)&_audio_buf_pointer))));	// 9256 push    word ptr _audio_buf_pointer ;~ 01A2:4423
cs=0x1a2;eip=0x004427; 	T(XOR(ax, ax));	// 9257 xor     ax, ax ;~ 01A2:4427
cs=0x1a2;eip=0x004429; 	X(XCHG(ax, word_24636));	// 9258 xchg    ax, word_24636 ;~ 01A2:4429
cs=0x1a2;eip=0x00442d; 	X(MOV(word_2460e, ax));	// 9259 mov     word_2460E, ax ;~ 01A2:442D
cs=0x1a2;eip=0x004430; 	T(MOV(ax, word_24634));	// 9260 mov     ax, word_24634 ;~ 01A2:4430
cs=0x1a2;eip=0x004433; 	X(MOV(*(dw*)(((db*)&_audio_buf_pointer)), ax));	// 9261 mov     word ptr _audio_buf_pointer, ax ;~ 01A2:4433
cs=0x1a2;eip=0x004436; 	T(MOV(bp, word_24632));	// 9262 mov     bp, word_24632 ;~ 01A2:4436
cs=0x1a2;eip=0x00443a; 	J(CALL(_nongravis_182e7,m2c::kloc_18338));	// 9263 call    loc_18338 ;~ 01A2:443A
cs=0x1a2;eip=0x00443d; 	X(POP(*(dw*)(((db*)&_audio_buf_pointer))));	// 9264 pop     word ptr _audio_buf_pointer ;~ 01A2:443D
cs=0x1a2;eip=0x004441; 	X(POP(gs));	// 9265 pop     gs ;~ 01A2:4441
cs=0x1a2;eip=0x004443; 	X(POP(fs));	// 9266 pop     fs ;~ 01A2:4443
cs=0x1a2;eip=0x004445; 	X(POP(es));	// 9267 pop     es ;~ 01A2:4445
cs=0x1a2;eip=0x004446; 	X(POPAD);	// 9268 popad ;~ 01A2:4446
cs=0x1a2;eip=0x004448; 	T(NOP);	// 9269 nop ;~ 01A2:4448
cs=0x1a2;eip=0x004449; 	J(JMP(loc_1439b));	// 9270 jmp     loc_1439B ;~ 01A2:4449
loc_1444c:
	// 4956 
cs=0x1a2;eip=0x00444c; 	X(PUSH(ax));	// 9274 push    ax ;~ 01A2:444C
cs=0x1a2;eip=0x00444d; 	X(PUSH(bx));	// 9275 push    bx ;~ 01A2:444D
loc_1444e:
	// 4957 
cs=0x1a2;eip=0x00444e; 	T(MOV(dx, _gravis_port));	// 9279 mov     dx, _gravis_port ;~ 01A2:444E
cs=0x1a2;eip=0x004452; 	T(MOV(al, 0x8F));	// 9280 mov     al, 8Fh ;~ 01A2:4452
cs=0x1a2;eip=0x004454; 	S(OUT(dx, al));	// 9281 out     dx, al ;~ 01A2:4454
cs=0x1a2;eip=0x004455; 	T(ADD(dl, 2));	// 9282 add     dl, 2 ;~ 01A2:4455
cs=0x1a2;eip=0x004458; 	S(IN(al, dx));	// 9283 in      al, dx ;~ 01A2:4458
cs=0x1a2;eip=0x004459; 	T(SUB(dl, 2));	// 9284 sub     dl, 2 ;~ 01A2:4459
cs=0x1a2;eip=0x00445c; 	T(MOV(ah, al));	// 9285 mov     ah, al ;~ 01A2:445C
cs=0x1a2;eip=0x00445e; 	T(SHL(ah, 1));	// 9286 shl     ah, 1 ;~ 01A2:445E
cs=0x1a2;eip=0x004460; 	J(JNC(loc_1449c));	// 9287 jnb     short loc_1449C ;~ 01A2:4460
cs=0x1a2;eip=0x004462; 	T(SHL(ah, 1));	// 9288 shl     ah, 1 ;~ 01A2:4462
cs=0x1a2;eip=0x004464; 	J(JNC(loc_1446b));	// 9289 jnb     short loc_1446B ;~ 01A2:4464
cs=0x1a2;eip=0x004466; 	X(POP(bx));	// 9290 pop     bx ;~ 01A2:4466
cs=0x1a2;eip=0x004467; 	X(POP(ax));	// 9291 pop     ax ;~ 01A2:4467
cs=0x1a2;eip=0x004468; 	J(JMP(loc_14393));	// 9292 jmp     loc_14393 ;~ 01A2:4468
loc_1446b:
	// 4958 
cs=0x1a2;eip=0x00446b; 	T(AND(ax, 0x1F));	// 9296 and     ax, 1Fh ;~ 01A2:446B
cs=0x1a2;eip=0x00446e; 	T(SHL(ax, 4));	// 9297 shl     ax, 4 ;~ 01A2:446E
cs=0x1a2;eip=0x004471; 	T(MOV(bx, ax));	// 9298 mov     bx, ax ;~ 01A2:4471
cs=0x1a2;eip=0x004473; 	T(SHL(ax, 2));	// 9299 shl     ax, 2 ;~ 01A2:4473
cs=0x1a2;eip=0x004476; 	T(ADD(bx, ax));	// 9300 add     bx, ax ;~ 01A2:4476
cs=0x1a2;eip=0x004478; 	T(ADD(bx, offset(seg003,_volume_25908)));	// 9301 add     bx, offset _volume_25908 ;~ 01A2:4478
cs=0x1a2;eip=0x00447c; 	T(DEC(dx));	// 9302 dec     dx ;~ 01A2:447C
cs=0x1a2;eip=0x00447d; 	X(PUSHF);	// 9303 pushf ;~ 01A2:447D
cs=0x1a2;eip=0x00447e; 	T(CLI);	// 9304 cli ;~ 01A2:447E
cs=0x1a2;eip=0x00447f; 	T(MOV(al, *(raddr(ds,bx+0x18))));	// 9305 mov     al, [bx+18h] ;~ 01A2:447F
cs=0x1a2;eip=0x004482; 	S(OUT(dx, al));	// 9306 out     dx, al ;~ 01A2:4482
cs=0x1a2;eip=0x004483; 	T(INC(dx));	// 9307 inc     dx ;~ 01A2:4483
cs=0x1a2;eip=0x004484; 	T(MOV(al, 0x0D));	// 9308 mov     al, 0Dh ;~ 01A2:4484
cs=0x1a2;eip=0x004486; 	S(OUT(dx, al));	// 9309 out     dx, al ;~ 01A2:4486
cs=0x1a2;eip=0x004487; 	T(ADD(dl, 2));	// 9310 add     dl, 2 ;~ 01A2:4487
cs=0x1a2;eip=0x00448a; 	T(MOV(al, 3));	// 9311 mov     al, 3 ;~ 01A2:448A
cs=0x1a2;eip=0x00448c; 	S(OUT(dx, al));	// 9312 out     dx, al ;~ 01A2:448C
cs=0x1a2;eip=0x00448d; 	T(SUB(dl, 2));	// 9313 sub     dl, 2 ;~ 01A2:448D
cs=0x1a2;eip=0x004490; 	T(MOV(al, 9));	// 9314 mov     al, 9 ;~ 01A2:4490
cs=0x1a2;eip=0x004492; 	S(OUT(dx, al));	// 9315 out     dx, al ;~ 01A2:4492
cs=0x1a2;eip=0x004493; 	T(INC(dx));	// 9316 inc     dx ;~ 01A2:4493
cs=0x1a2;eip=0x004494; 	T(MOV(ax, *(dw*)(raddr(ds,bx+0x36))));	// 9317 mov     ax, [bx+36h] ;~ 01A2:4494
cs=0x1a2;eip=0x004497; 	S(OUT(dx, ax));	// 9318 out     dx, ax ;~ 01A2:4497
cs=0x1a2;eip=0x004498; 	T(DEC(dx));	// 9319 dec     dx ;~ 01A2:4498
cs=0x1a2;eip=0x004499; 	X(POPF);	// 9320 popf ;~ 01A2:4499
cs=0x1a2;eip=0x00449a; 	J(JMP(loc_1444e));	// 9321 jmp     short loc_1444E ;~ 01A2:449A
loc_1449c:
	// 4959 
cs=0x1a2;eip=0x00449c; 	T(AND(ax, 0x1F));	// 9325 and     ax, 1Fh ;~ 01A2:449C
cs=0x1a2;eip=0x00449f; 	T(SHL(ax, 4));	// 9326 shl     ax, 4 ;~ 01A2:449F
cs=0x1a2;eip=0x0044a2; 	T(MOV(bx, ax));	// 9327 mov     bx, ax ;~ 01A2:44A2
cs=0x1a2;eip=0x0044a4; 	T(SHL(ax, 2));	// 9328 shl     ax, 2 ;~ 01A2:44A4
cs=0x1a2;eip=0x0044a7; 	T(ADD(bx, ax));	// 9329 add     bx, ax ;~ 01A2:44A7
cs=0x1a2;eip=0x0044a9; 	T(ADD(bx, offset(seg003,_volume_25908)));	// 9330 add     bx, offset _volume_25908 ;~ 01A2:44A9
cs=0x1a2;eip=0x0044ad; 	T(MOV(dx, _gravis_port));	// 9331 mov     dx, _gravis_port ;~ 01A2:44AD
cs=0x1a2;eip=0x0044b1; 	T(DEC(dx));	// 9332 dec     dx ;~ 01A2:44B1
cs=0x1a2;eip=0x0044b2; 	T(MOV(al, *(raddr(ds,bx+0x18))));	// 9333 mov     al, [bx+18h] ;~ 01A2:44B2
cs=0x1a2;eip=0x0044b5; 	X(PUSHF);	// 9334 pushf ;~ 01A2:44B5
cs=0x1a2;eip=0x0044b6; 	T(CLI);	// 9335 cli ;~ 01A2:44B6
cs=0x1a2;eip=0x0044b7; 	S(OUT(dx, al));	// 9336 out     dx, al ;~ 01A2:44B7
cs=0x1a2;eip=0x0044b8; 	T(INC(dx));	// 9337 inc     dx ;~ 01A2:44B8
cs=0x1a2;eip=0x0044b9; 	T(MOV(al, 0x80));	// 9338 mov     al, 80h ; '€' ;~ 01A2:44B9
cs=0x1a2;eip=0x0044bb; 	S(OUT(dx, al));	// 9339 out     dx, al ;~ 01A2:44BB
cs=0x1a2;eip=0x0044bc; 	T(ADD(dl, 2));	// 9340 add     dl, 2 ;~ 01A2:44BC
cs=0x1a2;eip=0x0044bf; 	S(IN(al, dx));	// 9341 in      al, dx ;~ 01A2:44BF
cs=0x1a2;eip=0x0044c0; 	T(SUB(dl, 2));	// 9342 sub     dl, 2 ;~ 01A2:44C0
cs=0x1a2;eip=0x0044c3; 	T(AND(al, 3));	// 9343 and     al, 3 ;~ 01A2:44C3
cs=0x1a2;eip=0x0044c5; 	J(JZ(loc_14527));	// 9344 jz      short loc_14527 ;~ 01A2:44C5
cs=0x1a2;eip=0x0044c7; 	T(MOV(al, 0));	// 9345 mov     al, 0 ;~ 01A2:44C7
cs=0x1a2;eip=0x0044c9; 	S(OUT(dx, al));	// 9346 out     dx, al ;~ 01A2:44C9
cs=0x1a2;eip=0x0044ca; 	T(ADD(dl, 2));	// 9347 add     dl, 2 ;~ 01A2:44CA
cs=0x1a2;eip=0x0044cd; 	T(MOV(al, 3));	// 9348 mov     al, 3 ;~ 01A2:44CD
cs=0x1a2;eip=0x0044cf; 	S(OUT(dx, al));	// 9349 out     dx, al ;~ 01A2:44CF
cs=0x1a2;eip=0x0044d0; 	T(SUB(dl, 2));	// 9350 sub     dl, 2 ;~ 01A2:44D0
cs=0x1a2;eip=0x0044d3; 	T(MOV(al, 0x0D));	// 9351 mov     al, 0Dh ;~ 01A2:44D3
cs=0x1a2;eip=0x0044d5; 	S(OUT(dx, al));	// 9352 out     dx, al ;~ 01A2:44D5
cs=0x1a2;eip=0x0044d6; 	T(ADD(dl, 2));	// 9353 add     dl, 2 ;~ 01A2:44D6
cs=0x1a2;eip=0x0044d9; 	T(MOV(al, 3));	// 9354 mov     al, 3 ;~ 01A2:44D9
cs=0x1a2;eip=0x0044db; 	S(OUT(dx, al));	// 9355 out     dx, al ;~ 01A2:44DB
cs=0x1a2;eip=0x0044dc; 	T(SUB(dl, 2));	// 9356 sub     dl, 2 ;~ 01A2:44DC
cs=0x1a2;eip=0x0044df; 	X(AND(*(raddr(ds,bx+0x17)), 0x0FE));	// 9357 and     byte ptr [bx+17h], 0FEh ;~ 01A2:44DF
cs=0x1a2;eip=0x0044e3; 	X(MOV(*(raddr(ds,bx+0x35)), 0));	// 9358 mov     byte ptr [bx+35h], 0 ;~ 01A2:44E3
cs=0x1a2;eip=0x0044e7; 	X(MOV(*(dw*)(raddr(ds,bx+0x36)), 0));	// 9359 mov     word ptr [bx+36h], 0 ;~ 01A2:44E7
cs=0x1a2;eip=0x0044ec; 	T(MOV(al, 0x89));	// 9360 mov     al, 89h ; '‰' ;~ 01A2:44EC
cs=0x1a2;eip=0x0044ee; 	S(OUT(dx, al));	// 9361 out     dx, al ;~ 01A2:44EE
cs=0x1a2;eip=0x0044ef; 	T(INC(dx));	// 9362 inc     dx ;~ 01A2:44EF
cs=0x1a2;eip=0x0044f0; 	S(IN(ax, dx));	// 9363 in      ax, dx ;~ 01A2:44F0
cs=0x1a2;eip=0x0044f1; 	T(DEC(dx));	// 9364 dec     dx ;~ 01A2:44F1
cs=0x1a2;eip=0x0044f2; 	T(CMP(ah, 0x84));	// 9365 cmp     ah, 84h ; '„' ;~ 01A2:44F2
cs=0x1a2;eip=0x0044f5; 	J(JBE(loc_1452b));	// 9366 jbe     short loc_1452B ;~ 01A2:44F5
cs=0x1a2;eip=0x0044f7; 	T(MOV(al, 7));	// 9367 mov     al, 7 ;~ 01A2:44F7
cs=0x1a2;eip=0x0044f9; 	S(OUT(dx, al));	// 9368 out     dx, al ;~ 01A2:44F9
cs=0x1a2;eip=0x0044fa; 	T(ADD(dl, 2));	// 9369 add     dl, 2 ;~ 01A2:44FA
cs=0x1a2;eip=0x0044fd; 	T(MOV(al, ah));	// 9370 mov     al, ah ;~ 01A2:44FD
cs=0x1a2;eip=0x0044ff; 	S(OUT(dx, al));	// 9371 out     dx, al ;~ 01A2:44FF
cs=0x1a2;eip=0x004500; 	T(SUB(dl, 2));	// 9372 sub     dl, 2 ;~ 01A2:4500
cs=0x1a2;eip=0x004503; 	T(MOV(al, 8));	// 9373 mov     al, 8 ;~ 01A2:4503
cs=0x1a2;eip=0x004505; 	S(OUT(dx, al));	// 9374 out     dx, al ;~ 01A2:4505
cs=0x1a2;eip=0x004506; 	T(ADD(dl, 2));	// 9375 add     dl, 2 ;~ 01A2:4506
cs=0x1a2;eip=0x004509; 	T(MOV(al, 0x80));	// 9376 mov     al, 80h ; '€' ;~ 01A2:4509
cs=0x1a2;eip=0x00450b; 	S(OUT(dx, al));	// 9377 out     dx, al ;~ 01A2:450B
cs=0x1a2;eip=0x00450c; 	T(SUB(dl, 2));	// 9378 sub     dl, 2 ;~ 01A2:450C
cs=0x1a2;eip=0x00450f; 	T(MOV(al, 6));	// 9379 mov     al, 6 ;~ 01A2:450F
cs=0x1a2;eip=0x004511; 	S(OUT(dx, al));	// 9380 out     dx, al ;~ 01A2:4511
cs=0x1a2;eip=0x004512; 	T(ADD(dl, 2));	// 9381 add     dl, 2 ;~ 01A2:4512
cs=0x1a2;eip=0x004515; 	T(MOV(al, 0x3F));	// 9382 mov     al, 3Fh ; '?' ;~ 01A2:4515
cs=0x1a2;eip=0x004517; 	S(OUT(dx, al));	// 9383 out     dx, al ;~ 01A2:4517
cs=0x1a2;eip=0x004518; 	T(SUB(dl, 2));	// 9384 sub     dl, 2 ;~ 01A2:4518
cs=0x1a2;eip=0x00451b; 	T(MOV(al, 0x0D));	// 9385 mov     al, 0Dh ;~ 01A2:451B
cs=0x1a2;eip=0x00451d; 	S(OUT(dx, al));	// 9386 out     dx, al ;~ 01A2:451D
cs=0x1a2;eip=0x00451e; 	T(ADD(dl, 2));	// 9387 add     dl, 2 ;~ 01A2:451E
cs=0x1a2;eip=0x004521; 	T(MOV(al, 0x60));	// 9388 mov     al, 60h ; '`' ;~ 01A2:4521
cs=0x1a2;eip=0x004523; 	S(OUT(dx, al));	// 9389 out     dx, al ;~ 01A2:4523
cs=0x1a2;eip=0x004524; 	T(SUB(dl, 2));	// 9390 sub     dl, 2 ;~ 01A2:4524
loc_14527:
	// 4960 
cs=0x1a2;eip=0x004527; 	X(POPF);	// 9393 popf ;~ 01A2:4527
cs=0x1a2;eip=0x004528; 	J(JMP(loc_1444e));	// 9394 jmp     loc_1444E ;~ 01A2:4528
loc_1452b:
	// 4961 
cs=0x1a2;eip=0x00452b; 	T(MOV(al, 9));	// 9398 mov     al, 9 ;~ 01A2:452B
cs=0x1a2;eip=0x00452d; 	S(OUT(dx, al));	// 9399 out     dx, al ;~ 01A2:452D
cs=0x1a2;eip=0x00452e; 	T(INC(dx));	// 9400 inc     dx ;~ 01A2:452E
cs=0x1a2;eip=0x00452f; 	T(XOR(ax, ax));	// 9401 xor     ax, ax ;~ 01A2:452F
cs=0x1a2;eip=0x004531; 	S(OUT(dx, ax));	// 9402 out     dx, ax ;~ 01A2:4531
cs=0x1a2;eip=0x004532; 	T(DEC(dx));	// 9403 dec     dx ;~ 01A2:4532
cs=0x1a2;eip=0x004533; 	X(POPF);	// 9404 popf ;~ 01A2:4533
cs=0x1a2;eip=0x004534; 	J(JMP(loc_1444e));	// 9405 jmp     loc_1444E ;~ 01A2:4534

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_gravis_13215: 	goto _gravis_13215;
        case m2c::k_gravis_13272: 	goto _gravis_13272;
        case m2c::k_gravis_132a9: 	goto _gravis_132a9;
        case m2c::k_gravis_13363: 	goto _gravis_13363;
        case m2c::k_gravis_134a2: 	goto _gravis_134a2;
        case m2c::k_gravis_init: 	goto _gravis_init;
        case m2c::k_gravis_int: 	goto _gravis_int;
        case m2c::k_nullsub_5: 	goto _nullsub_5;
        case m2c::kloc_12e55: 	goto loc_12e55;
        case m2c::kloc_12e6b: 	goto loc_12e6b;
        case m2c::kloc_12e74: 	goto loc_12e74;
        case m2c::kloc_12e7d: 	goto loc_12e7d;
        case m2c::kloc_12e9f: 	goto loc_12e9f;
        case m2c::kloc_12eae: 	goto loc_12eae;
        case m2c::kloc_12eb2: 	goto loc_12eb2;
        case m2c::kloc_131b3: 	goto loc_131b3;
        case m2c::kloc_13202: 	goto loc_13202;
        case m2c::kloc_132c6: 	goto loc_132c6;
        case m2c::kloc_132e8: 	goto loc_132e8;
        case m2c::kloc_13318: 	goto loc_13318;
        case m2c::kloc_13356: 	goto loc_13356;
        case m2c::kloc_13380: 	goto loc_13380;
        case m2c::kloc_133a2: 	goto loc_133a2;
        case m2c::kloc_133d2: 	goto loc_133d2;
        case m2c::kloc_1340e: 	goto loc_1340e;
        case m2c::kloc_13471: 	goto loc_13471;
        case m2c::kloc_13499: 	goto loc_13499;
        case m2c::kloc_13544: 	goto loc_13544;
        case m2c::kloc_1355f: 	goto loc_1355f;
        case m2c::kloc_135c0: 	goto loc_135c0;
        case m2c::kloc_14289: 	goto loc_14289;
        case m2c::kloc_142b1: 	goto loc_142b1;
        case m2c::kloc_142da: 	goto loc_142da;
        case m2c::kloc_142ec: 	goto loc_142ec;
        case m2c::kloc_1432f: 	goto loc_1432f;
        case m2c::kloc_1437f: 	goto loc_1437f;
        case m2c::kloc_14384: 	goto loc_14384;
        case m2c::kloc_14393: 	goto loc_14393;
        case m2c::kloc_14397: 	goto loc_14397;
        case m2c::kloc_1439b: 	goto loc_1439b;
        case m2c::kloc_143b4: 	goto loc_143b4;
        case m2c::kloc_143c0: 	goto loc_143c0;
        case m2c::kloc_143f5: 	goto loc_143f5;
        case m2c::kloc_143f8: 	goto loc_143f8;
        case m2c::kloc_1441c: 	goto loc_1441c;
        case m2c::kloc_1444c: 	goto loc_1444c;
        case m2c::kloc_1444e: 	goto loc_1444e;
        case m2c::kloc_1446b: 	goto loc_1446b;
        case m2c::kloc_1449c: 	goto loc_1449c;
        case m2c::kloc_14527: 	goto loc_14527;
        case m2c::kloc_1452b: 	goto loc_1452b;
        case m2c::klocret_131b2: 	goto locret_131b2;
        case m2c::klocret_131ee: 	goto locret_131ee;
        case m2c::klocret_13271: 	goto locret_13271;
        case m2c::klocret_13355: 	goto locret_13355;
        case m2c::klocret_13428: 	goto locret_13428;
        case m2c::klocret_13498: 	goto locret_13498;
        case m2c::klocret_135bf: 	goto locret_135bf;
        case m2c::klocret_1432e: 	goto locret_1432e;
        case m2c::kseg000_31d0_proc: 	goto seg000_31d0_proc;
        case m2c::ksub_12da8: 	goto sub_12da8;
        case m2c::ksub_13177: 	goto sub_13177;
        case m2c::ksub_131da: 	goto sub_131da;
        case m2c::ksub_131ef: 	goto sub_131ef;
        case m2c::ksub_13429: 	goto sub_13429;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_12eba(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_12eba:
    _begin:
cs=0x1a2;eip=0x002eba; 	X(PUSHF);	// 5902 pushf ;~ 01A2:2EBA
cs=0x1a2;eip=0x002ebb; 	T(CLI);	// 5903 cli ;~ 01A2:2EBB
cs=0x1a2;eip=0x002ebc; 	X(PUSH(ds));	// 5904 push    ds ;~ 01A2:2EBC
cs=0x1a2;eip=0x002ebd; 	X(PUSH(es));	// 5905 push    es ;~ 01A2:2EBD
cs=0x1a2;eip=0x002ebe; 	T(MOV(ax, seg_offset(seg003)));	// 5906 mov     ax, seg seg003 ;~ 01A2:2EBE
cs=0x1a2;eip=0x002ec1; 	T(MOV(ds, ax));	// 5907 mov     ds, ax ;~ 01A2:2EC1
cs=0x1a2;eip=0x002ec3; 	X(MOV(byte_24669, 0));	// 5909 mov     byte_24669, 0 ;~ 01A2:2EC3
cs=0x1a2;eip=0x002ec8; 	X(MOV(byte_2466a, 0));	// 5910 mov     byte_2466A, 0 ;~ 01A2:2EC8
cs=0x1a2;eip=0x002ecd; 	X(MOV(byte_2466b, 0));	// 5911 mov     byte_2466B, 0 ;~ 01A2:2ECD
cs=0x1a2;eip=0x002ed2; 	X(MOV(byte_2466c, 0));	// 5912 mov     byte_2466C, 0 ;~ 01A2:2ED2
cs=0x1a2;eip=0x002ed7; 	X(MOV(byte_2466d, 0));	// 5913 mov     byte_2466D, 0 ;~ 01A2:2ED7
cs=0x1a2;eip=0x002edc; 	X(MOV(byte_24671, 0));	// 5914 mov     byte_24671, 0 ;~ 01A2:2EDC
cs=0x1a2;eip=0x002ee1; 	X(MOV(_play_state, 0));	// 5915 mov     _play_state, 0 ;~ 01A2:2EE1
cs=0x1a2;eip=0x002ee6; 	X(MOV(word_24600, 0));	// 5916 mov     word_24600, 0 ;~ 01A2:2EE6
cs=0x1a2;eip=0x002eec; 	X(MOV(word_24602, 0));	// 5917 mov     word_24602, 0 ;~ 01A2:2EEC
cs=0x1a2;eip=0x002ef2; 	X(MOV(byte_24620, 0));	// 5918 mov     byte_24620, 0 ;~ 01A2:2EF2
cs=0x1a2;eip=0x002ef7; 	X(MOV(byte_24621, 0));	// 5919 mov     byte_24621, 0 ;~ 01A2:2EF7
cs=0x1a2;eip=0x002efc; 	T(MOV(ax, ds));	// 5920 mov     ax, ds ;~ 01A2:2EFC
cs=0x1a2;eip=0x002efe; 	T(MOV(es, ax));	// 5921 mov     es, ax ;~ 01A2:2EFE
cs=0x1a2;eip=0x002f00; 	T(MOV(di, offset(seg003,_volume_25908)));	// 5923 mov     di, offset _volume_25908 ;~ 01A2:2F00
cs=0x1a2;eip=0x002f03; 	T(XOR(eax, eax));	// 5924 xor     eax, eax ;~ 01A2:2F03
cs=0x1a2;eip=0x002f06; 	T(MOV(cx, 0x280));	// 5925 mov     cx, 280h ;~ 01A2:2F06
cs=0x1a2;eip=0x002f09; 	T(CLD);	// 5926 cld ;~ 01A2:2F09
	// 5927 rep stosd ;~ 01A2:2F0A
cs=0x1a2;eip=0x002f0a; 	X(	REP STOSD);	// 5927 rep stosd ;~ 01A2:2F0A
cs=0x1a2;eip=0x002f0d; 	T(XOR(ax, ax));	// 5928 xor     ax, ax ;~ 01A2:2F0D
cs=0x1a2;eip=0x002f0f; 	T(XOR(bx, bx));	// 5929 xor     bx, bx ;~ 01A2:2F0F
cs=0x1a2;eip=0x002f11; 	X(PUSH(cs));	// 5930 push    cs ;~ 01A2:2F11
cs=0x1a2;eip=0x002f12; 	J(CALL(sub_12f56,0));	// 5931 call    near ptr sub_12F56 ;~ 01A2:2F12
cs=0x1a2;eip=0x002f15; 	T(MOV(si, offset(seg003,dword_27bc8)));	// 5932 mov     si, offset dword_27BC8 ;~ 01A2:2F15
cs=0x1a2;eip=0x002f18; 	X(PUSH(cs));	// 5933 push    cs ;~ 01A2:2F18
cs=0x1a2;eip=0x002f19; 	J(CALL(sub_12b18,0));	// 5934 call    near ptr sub_12B18 ;~ 01A2:2F19
cs=0x1a2;eip=0x002f1c; 	T(MOV(al, byte_2467a));	// 5935 mov     al, byte_2467A ;~ 01A2:2F1C
cs=0x1a2;eip=0x002f1f; 	J(CALL(sub_13cf6,0));	// 5936 call    sub_13CF6 ;~ 01A2:2F1F
cs=0x1a2;eip=0x002f22; 	T(MOV(al, byte_24679));	// 5937 mov     al, byte_24679 ;~ 01A2:2F22
cs=0x1a2;eip=0x002f25; 	J(CALL(_eff_13ce8,0));	// 5938 call    _eff_13CE8 ;~ 01A2:2F25
cs=0x1a2;eip=0x002f28; 	T(MOV(al, byte_24679));	// 5939 mov     al, byte_24679 ;~ 01A2:2F28
cs=0x1a2;eip=0x002f2b; 	X(MOV(byte_24668, al));	// 5940 mov     byte_24668, al ;~ 01A2:2F2B
cs=0x1a2;eip=0x002f2e; 	T(MOVZX(ax, byte_2467a));	// 5941 movzx   ax, byte_2467A ;~ 01A2:2F2E
cs=0x1a2;eip=0x002f33; 	T(SHL(ax, 1));	// 5942 shl     ax, 1 ;~ 01A2:2F33
cs=0x1a2;eip=0x002f35; 	T(MOV(dl, 5));	// 5943 mov     dl, 5 ;~ 01A2:2F35
cs=0x1a2;eip=0x002f37; 	T(DIV1(dl));	// 5944 div     dl ;~ 01A2:2F37
cs=0x1a2;eip=0x002f39; 	X(MOV(byte_2467b, al));	// 5945 mov     byte_2467B, al ;~ 01A2:2F39
cs=0x1a2;eip=0x002f3c; 	X(MOV(byte_2467c, 0));	// 5946 mov     byte_2467C, 0 ;~ 01A2:2F3C
cs=0x1a2;eip=0x002f41; 	J(CALL(_snd_on,0));	// 5947 call    _snd_on ;~ 01A2:2F41
cs=0x1a2;eip=0x002f44; 	X(POP(es));	// 5948 pop     es ;~ 01A2:2F44
cs=0x1a2;eip=0x002f45; 	X(POP(ds));	// 5949 pop     ds ;~ 01A2:2F45
cs=0x1a2;eip=0x002f46; 	X(POPF);	// 5951 popf ;~ 01A2:2F46
cs=0x1a2;eip=0x002f47; 	J(RETF(0));	// 5952 retf ;~ 01A2:2F47

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::ksub_12eba: 	goto sub_12eba;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _snd_offx(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _snd_offx:
    _begin:
cs=0x1a2;eip=0x002f48; 	X(PUSHF);	// 5961 pushf ;~ 01A2:2F48
cs=0x1a2;eip=0x002f49; 	T(CLI);	// 5962 cli ;~ 01A2:2F49
cs=0x1a2;eip=0x002f4a; 	X(PUSH(ds));	// 5963 push    ds ;~ 01A2:2F4A
cs=0x1a2;eip=0x002f4b; 	T(MOV(ax, seg_offset(seg003)));	// 5964 mov     ax, seg seg003 ;~ 01A2:2F4B
cs=0x1a2;eip=0x002f4e; 	T(MOV(ds, ax));	// 5965 mov     ds, ax ;~ 01A2:2F4E
cs=0x1a2;eip=0x002f50; 	J(CALL(_snd_off,0));	// 5967 call    _snd_off ;~ 01A2:2F50
cs=0x1a2;eip=0x002f53; 	X(POP(ds));	// 5968 pop     ds ;~ 01A2:2F53
cs=0x1a2;eip=0x002f54; 	X(POPF);	// 5970 popf ;~ 01A2:2F54
cs=0x1a2;eip=0x002f55; 	J(RETF(0));	// 5971 retf ;~ 01A2:2F55

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_snd_offx: 	goto _snd_offx;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_12f56(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_12f56:
    _begin:
cs=0x1a2;eip=0x002f56; 	X(PUSHF);	// 5981 pushf ;~ 01A2:2F56
cs=0x1a2;eip=0x002f57; 	T(CLI);	// 5982 cli ;~ 01A2:2F57
cs=0x1a2;eip=0x002f58; 	X(PUSH(ds));	// 5983 push    ds ;~ 01A2:2F58
cs=0x1a2;eip=0x002f59; 	X(PUSH(es));	// 5984 push    es ;~ 01A2:2F59
cs=0x1a2;eip=0x002f5a; 	T(MOV(cx, seg_offset(seg003)));	// 5985 mov     cx, seg seg003 ;~ 01A2:2F5A
cs=0x1a2;eip=0x002f5d; 	T(MOV(ds, cx));	// 5986 mov     ds, cx ;~ 01A2:2F5D
cs=0x1a2;eip=0x002f5f; 	X(MOV(word_245f0, ax));	// 5987 mov     word_245F0, ax ;~ 01A2:2F5F
cs=0x1a2;eip=0x002f62; 	X(MOV(byte_24669, bl));	// 5988 mov     byte_24669, bl ;~ 01A2:2F62
cs=0x1a2;eip=0x002f66; 	X(PUSH(bx));	// 5989 push    bx ;~ 01A2:2F66
cs=0x1a2;eip=0x002f67; 	J(CALL(sub_1415e,0));	// 5990 call    sub_1415E ;~ 01A2:2F67
cs=0x1a2;eip=0x002f6a; 	X(POP(bx));	// 5991 pop     bx ;~ 01A2:2F6A
cs=0x1a2;eip=0x002f6b; 	T(CMP(bh, 1));	// 5992 cmp     bh, 1 ;~ 01A2:2F6B
cs=0x1a2;eip=0x002f6e; 	J(JNZ(loc_12f78));	// 5993 jnz     short loc_12F78 ;~ 01A2:2F6E
cs=0x1a2;eip=0x002f70; 	X(MOV(byte_24668, 0));	// 5994 mov     byte_24668, 0 ;~ 01A2:2F70
cs=0x1a2;eip=0x002f75; 	J(CALL(sub_135ca,0));	// 5995 call    sub_135CA ;~ 01A2:2F75
loc_12f78:
	// 4756 
cs=0x1a2;eip=0x002f78; 	X(POP(es));	// 5998 pop     es ;~ 01A2:2F78
cs=0x1a2;eip=0x002f79; 	X(POP(ds));	// 5999 pop     ds ;~ 01A2:2F79
cs=0x1a2;eip=0x002f7a; 	X(POPF);	// 6000 popf ;~ 01A2:2F7A
cs=0x1a2;eip=0x002f7b; 	J(RETF(0));	// 6001 retf ;~ 01A2:2F7B

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::kloc_12f78: 	goto loc_12f78;
        case m2c::ksub_12f56: 	goto sub_12f56;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _get_12f7c(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _get_12f7c:
    _begin:
cs=0x1a2;eip=0x002f7c; 	X(PUSHF);	// 6010 pushf ;~ 01A2:2F7C
cs=0x1a2;eip=0x002f7d; 	T(CLI);	// 6011 cli ;~ 01A2:2F7D
cs=0x1a2;eip=0x002f7e; 	X(PUSH(ds));	// 6012 push    ds ;~ 01A2:2F7E
cs=0x1a2;eip=0x002f7f; 	T(MOV(ax, seg_offset(seg003)));	// 6013 mov     ax, seg seg003 ;~ 01A2:2F7F
cs=0x1a2;eip=0x002f82; 	T(MOV(ds, ax));	// 6014 mov     ds, ax ;~ 01A2:2F82
cs=0x1a2;eip=0x002f84; 	T(MOV(ax, word_245f0));	// 6015 mov     ax, word_245F0 ;~ 01A2:2F84
cs=0x1a2;eip=0x002f87; 	T(MOV(bx, word_245f6));	// 6016 mov     bx, word_245F6 ;~ 01A2:2F87
cs=0x1a2;eip=0x002f8b; 	X(POP(ds));	// 6017 pop     ds ;~ 01A2:2F8B
cs=0x1a2;eip=0x002f8c; 	X(POPF);	// 6018 popf ;~ 01A2:2F8C
cs=0x1a2;eip=0x002f8d; 	J(RETF(0));	// 6019 retf ;~ 01A2:2F8D

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_get_12f7c: 	goto _get_12f7c;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _set_timer_int(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _set_timer_int:
    _begin:
cs=0x1a2;eip=0x002f8e; 	T(MOV(ebx, 4096));	// 6028 mov     ebx, 4096       ; bytes ;~ 01A2:2F8E
cs=0x1a2;eip=0x002f94; 	X(PUSH(dx));	// 6029 push    dx              ; dx = subrouting offset ;~ 01A2:2F94
cs=0x1a2;eip=0x002f95; 	J(CALL(_memalloc,0));	// 6030 call    _memalloc ;~ 01A2:2F95
cs=0x1a2;eip=0x002f98; 	X(POP(dx));	// 6031 pop     dx ;~ 01A2:2F98
cs=0x1a2;eip=0x002f99; 	J(JC(locret_12fb3));	// 6032 jb      short locret_12FB3 ;~ 01A2:2F99
cs=0x1a2;eip=0x002f9b; 	X(MOV(*(dw*)(((db*)&_audio_buf_pointer)), 0));	// 6033 mov     word ptr _audio_buf_pointer, 0 ;~ 01A2:2F9B
cs=0x1a2;eip=0x002fa1; 	X(MOV(*(dw*)(((db*)&_audio_buf_pointer)+2), ax));	// 6034 mov     word ptr _audio_buf_pointer+2, ax ;~ 01A2:2FA1
cs=0x1a2;eip=0x002fa4; 	X(PUSH(ax));	// 6035 push    ax ;~ 01A2:2FA4
cs=0x1a2;eip=0x002fa5; 	X(PUSH(dx));	// 6036 push    dx ;~ 01A2:2FA5
cs=0x1a2;eip=0x002fa6; 	J(CALL(_memfill8080,0));	// 6037 call    _memfill8080 ;~ 01A2:2FA6
cs=0x1a2;eip=0x002fa9; 	X(POP(bx));	// 6038 pop     bx ;~ 01A2:2FA9
cs=0x1a2;eip=0x002faa; 	T(MOV(dx, cs));	// 6039 mov     dx, cs ;~ 01A2:2FAA
cs=0x1a2;eip=0x002fac; 	T(MOV(al, 8));	// 6040 mov     al, 8 ;~ 01A2:2FAC
cs=0x1a2;eip=0x002fae; 	J(CALL(_setint_vect,0));	// 6041 call    _setint_vect ;~ 01A2:2FAE
cs=0x1a2;eip=0x002fb1; 	X(POP(ax));	// 6042 pop     ax ;~ 01A2:2FB1
cs=0x1a2;eip=0x002fb2; 	T(CLC);	// 6043 clc ;~ 01A2:2FB2
locret_12fb3:
	// 4757 
cs=0x1a2;eip=0x002fb3; 	J(RETN(0));	// 6046 retn ;~ 01A2:2FB3

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_set_timer_int: 	goto _set_timer_int;
        case m2c::klocret_12fb3: 	goto locret_12fb3;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _clean_int8_mem_timr(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _clean_int8_mem_timr:
    _begin:
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x002fb4; 	T(MOV(dx, *(dw*)(((db*)&_int8addr)+2)));	// 6055 mov     dx, word ptr cs:_int8addr+2 ;~ 01A2:2FB4
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x002fb9; 	T(MOV(bx, *(dw*)(((db*)&_int8addr))));	// 6056 mov     bx, word ptr cs:_int8addr ;~ 01A2:2FB9
cs=0x1a2;eip=0x002fbe; 	T(MOV(al, 8));	// 6057 mov     al, 8 ;~ 01A2:2FBE
cs=0x1a2;eip=0x002fc0; 	J(CALL(_setint_vect,0));	// 6058 call    _setint_vect ;~ 01A2:2FC0
cs=0x1a2;eip=0x002fc3; 	J(CALL(_clean_timer,0));	// 6059 call    _clean_timer ;~ 01A2:2FC3
cs=0x1a2;eip=0x002fc6; 	T(MOV(ax, *(dw*)(((db*)&_audio_buf_pointer)+2)));	// 6060 mov     ax, word ptr _audio_buf_pointer+2 ;~ 01A2:2FC6
cs=0x1a2;eip=0x002fc9; 	J(CALL(_memfree,0));	// 6061 call    _memfree ;~ 01A2:2FC9
cs=0x1a2;eip=0x002fcc; 	J(RETN(0));	// 6062 retn ;~ 01A2:2FCC

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_clean_int8_mem_timr: 	goto _clean_int8_mem_timr;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _configure_timer(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _configure_timer:
    _begin:
cs=0x1a2;eip=0x002fcd; 	J(CALL(sub_13017,0));	// 6071 call    sub_13017 ;~ 01A2:2FCD
cs=0x1a2;eip=0x002fd0; 	X(PUSHF);	// 6072 pushf ;~ 01A2:2FD0
cs=0x1a2;eip=0x002fd1; 	T(CLI);	// 6073 cli ;~ 01A2:2FD1
cs=0x1a2;eip=0x002fd2; 	T(MOV(dx, 0x12));	// 6074 mov     dx, 12h ;~ 01A2:2FD2
cs=0x1a2;eip=0x002fd5; 	T(MOV(ax, 0x34DC));	// 6075 mov     ax, 34DCh ;~ 01A2:2FD5
cs=0x1a2;eip=0x002fd8; 	X(DIV2(_freq1));	// 6076 div     _freq1 ;~ 01A2:2FD8
cs=0x1a2;eip=0x002fdc; 	J(CALL(_set_timer,0));	// 6077 call    _set_timer ;~ 01A2:2FDC
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x002fdf; 	X(MOV(*(&byte_14f70), 1));	// 6078 mov     cs:byte_14F70, 1 ;~ 01A2:2FDF
cs=0x1a2;eip=0x002fe5; 	T(MOV(ax, word_245e4));	// 6079 mov     ax, word_245E4 ;~ 01A2:2FE5
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x002fe8; 	X(MOV(*(dw*)(((db*)&word_14f6c)), ax));	// 6080 mov     cs:word_14F6C, ax ;~ 01A2:2FE8
cs=0x1a2;eip=0x002fec; 	X(POPF);	// 6081 popf ;~ 01A2:2FEC
cs=0x1a2;eip=0x002fed; 	J(RETN(0));	// 6082 retn ;~ 01A2:2FED

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_configure_timer: 	goto _configure_timer;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _memfill8080(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _memfill8080:
    _begin:
cs=0x1a2;eip=0x002fee; 	X(PUSHF);	// 6091 pushf ;~ 01A2:2FEE
cs=0x1a2;eip=0x002fef; 	T(CLI);	// 6092 cli ;~ 01A2:2FEF
cs=0x1a2;eip=0x002ff0; 	T(XOR(ax, ax));	// 6093 xor     ax, ax ;~ 01A2:2FF0
cs=0x1a2;eip=0x002ff2; 	J(CALL(_set_timer,0));	// 6094 call    _set_timer ;~ 01A2:2FF2
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x002ff5; 	X(MOV(*(&byte_14f70), 0));	// 6095 mov     cs:byte_14F70, 0 ;~ 01A2:2FF5
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x002ffb; 	X(MOV(*(dw*)(((db*)&word_14f6c)), 1));	// 6096 mov     cs:word_14F6C, 1 ;~ 01A2:2FFB
cs=0x1a2;eip=0x003002; 	T(MOV(es, *(dw*)(((db*)&_audio_buf_pointer)+2)));	// 6097 mov     es, word ptr _audio_buf_pointer+2 ;~ 01A2:3002
cs=0x1a2;eip=0x003006; 	T(XOR(di, di));	// 6099 xor     di, di ;~ 01A2:3006
cs=0x1a2;eip=0x003008; 	T(MOV(cx, 0x400));	// 6100 mov     cx, 400h ;~ 01A2:3008
cs=0x1a2;eip=0x00300b; 	T(MOV(eax, 0x80808080));	// 6101 mov     eax, 80808080h ;~ 01A2:300B
cs=0x1a2;eip=0x003011; 	T(CLD);	// 6102 cld ;~ 01A2:3011
	// 6103 rep stosd ;~ 01A2:3012
cs=0x1a2;eip=0x003012; 	X(	REP STOSD);	// 6103 rep stosd ;~ 01A2:3012
cs=0x1a2;eip=0x003015; 	X(POPF);	// 6104 popf ;~ 01A2:3015
cs=0x1a2;eip=0x003016; 	J(RETN(0));	// 6105 retn ;~ 01A2:3016

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_memfill8080: 	goto _memfill8080;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13017(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13017:
    _begin:
cs=0x1a2;eip=0x003017; 	T(MOV(di, offset(seg003,_myout)));	// 6114 mov     di, offset _myout ;~ 01A2:3017
cs=0x1a2;eip=0x00301a; 	T(MOV(cx, word_245d2));	// 6115 mov     cx, word_245D2 ;~ 01A2:301A
loc_1301e:
	// 4758 
cs=0x1a2;eip=0x00301e; 	T(TEST(*(raddr(ds,di+0x3C)), 8));	// 6118 test    byte ptr [di+3Ch], 8 ;~ 01A2:301E
cs=0x1a2;eip=0x003022; 	J(JNZ(loc_1302c));	// 6119 jnz     short loc_1302C ;~ 01A2:3022
cs=0x1a2;eip=0x003024; 	T(MOV(eax, *(dd*)(raddr(ds,di+0x2C))));	// 6120 mov     eax, [di+2Ch] ;~ 01A2:3024
cs=0x1a2;eip=0x003028; 	X(MOV(*(dd*)(raddr(ds,di+0x24)), eax));	// 6121 mov     [di+24h], eax ;~ 01A2:3028
loc_1302c:
	// 4759 
cs=0x1a2;eip=0x00302c; 	T(ADD(di, 0x40));	// 6124 add     di, 40h ; '@' ;~ 01A2:302C
cs=0x1a2;eip=0x00302f; 	T(DEC(cx));	// 6125 dec     cx ;~ 01A2:302F
cs=0x1a2;eip=0x003030; 	J(JNZ(loc_1301e));	// 6126 jnz     short loc_1301E ;~ 01A2:3030
cs=0x1a2;eip=0x003032; 	X(MOV(word_24600, 0));	// 6127 mov     word_24600, 0 ;~ 01A2:3032
loc_13038:
	// 4760 
cs=0x1a2;eip=0x003038; 	J(CALL(sub_16c69,0));	// 6130 call    sub_16C69 ;~ 01A2:3038
cs=0x1a2;eip=0x00303b; 	T(CMP(word_24600, 0x800));	// 6131 cmp     word_24600, 800h ;~ 01A2:303B
cs=0x1a2;eip=0x003041; 	J(JBE(loc_13038));	// 6132 jbe     short loc_13038 ;~ 01A2:3041
cs=0x1a2;eip=0x003043; 	J(RETN(0));	// 6133 retn ;~ 01A2:3043

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::kloc_1301e: 	goto loc_1301e;
        case m2c::kloc_1302c: 	goto loc_1302c;
        case m2c::kloc_13038: 	goto loc_13038;
        case m2c::ksub_13017: 	goto sub_13017;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13044(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13044:
    _begin:
cs=0x1a2;eip=0x003044; 	T(MOV(al, byte_2467e));	// 6142 mov     al, byte_2467E ;~ 01A2:3044
cs=0x1a2;eip=0x003047; 	T(CMP(al, 0));	// 6143 cmp     al, 0 ;~ 01A2:3047
cs=0x1a2;eip=0x003049; 	J(JZ(loc_13080));	// 6144 jz      short loc_13080 ;~ 01A2:3049
cs=0x1a2;eip=0x00304b; 	T(CMP(al, 1));	// 6145 cmp     al, 1 ;~ 01A2:304B
cs=0x1a2;eip=0x00304d; 	J(JZ(loc_1305a));	// 6146 jz      short loc_1305A ;~ 01A2:304D
cs=0x1a2;eip=0x00304f; 	T(CMP(al, 2));	// 6147 cmp     al, 2 ;~ 01A2:304F
cs=0x1a2;eip=0x003051; 	J(JZ(loc_1306d));	// 6148 jz      short loc_1306D ;~ 01A2:3051
cs=0x1a2;eip=0x003053; 	X(MOV(byte_2467e, 0));	// 6149 mov     byte_2467E, 0 ;~ 01A2:3053
cs=0x1a2;eip=0x003058; 	J(JMP(loc_13080));	// 6150 jmp     short loc_13080 ;~ 01A2:3058
loc_1305a:
	// 4761 
cs=0x1a2;eip=0x00305a; 	X(MOV(byte_2467d, 0x3F));	// 6154 mov     byte_2467D, 3Fh ; '?' ;~ 01A2:305A
cs=0x1a2;eip=0x00305f; 	X(MOV(off_2462e, offset(seg003,_table_24798)));	// 6155 mov     off_2462E, offset _table_24798 ; "07/02/95 12:26:42" ;~ 01A2:305F
cs=0x1a2;eip=0x003065; 	X(MOV(off_24656, offset(seg003,_table_25221)));	// 6156 mov     off_24656, offset _table_25221 ; "07/02/95 12:26:42" ;~ 01A2:3065
cs=0x1a2;eip=0x00306b; 	J(JMP(loc_13091));	// 6157 jmp     short loc_13091 ;~ 01A2:306B
loc_1306d:
	// 4762 
cs=0x1a2;eip=0x00306d; 	X(MOV(byte_2467d, 0x3F));	// 6161 mov     byte_2467D, 3Fh ; '?' ;~ 01A2:306D
cs=0x1a2;eip=0x003072; 	X(MOV(off_2462e, offset(seg003,_table_24818)));	// 6162 mov     off_2462E, offset _table_24818 ; "07/02/95 12:26:42" ;~ 01A2:3072
cs=0x1a2;eip=0x003078; 	X(MOV(off_24656, offset(seg003,_table_25261)));	// 6163 mov     off_24656, offset _table_25261 ; "07/02/95 12:26:42" ;~ 01A2:3078
cs=0x1a2;eip=0x00307e; 	J(JMP(loc_13091));	// 6164 jmp     short loc_13091 ;~ 01A2:307E
loc_13080:
	// 4763 
cs=0x1a2;eip=0x003080; 	X(MOV(byte_2467d, 0x40));	// 6169 mov     byte_2467D, 40h ; '@' ;~ 01A2:3080
cs=0x1a2;eip=0x003085; 	X(MOV(off_2462e, offset(seg003,_table_24716)));	// 6170 mov     off_2462E, offset _table_24716 ; "07/02/95 12:26:42" ;~ 01A2:3085
cs=0x1a2;eip=0x00308b; 	X(MOV(off_24656, offset(seg003,_table_251e0)));	// 6171 mov     off_24656, offset _table_251E0 ; "07/02/95 12:26:42" ;~ 01A2:308B
loc_13091:
	// 4764 
cs=0x1a2;eip=0x003091; 	T(MOV(di, offset(seg003,_vlm_byte_table)));	// 6175 mov     di, offset _vlm_byte_table ;~ 01A2:3091
cs=0x1a2;eip=0x003094; 	T(MOVZX(eax, word_245d6));	// 6176 movzx   eax, word_245D6 ;~ 01A2:3094
cs=0x1a2;eip=0x00309a; 	T(CMP(ax, 2));	// 6177 cmp     ax, 2 ;~ 01A2:309A
cs=0x1a2;eip=0x00309d; 	J(JA(loc_130a2));	// 6178 ja      short loc_130A2 ;~ 01A2:309D
cs=0x1a2;eip=0x00309f; 	T(MOV(ax, 2));	// 6179 mov     ax, 2 ;~ 01A2:309F
loc_130a2:
	// 4765 
cs=0x1a2;eip=0x0030a2; 	T(CMP(byte_24623, 1));	// 6182 cmp     byte_24623, 1 ;~ 01A2:30A2
cs=0x1a2;eip=0x0030a7; 	J(JNZ(loc_130ae));	// 6183 jnz     short loc_130AE ;~ 01A2:30A7
cs=0x1a2;eip=0x0030a9; 	T(SHR(ax, 1));	// 6184 shr     ax, 1 ;~ 01A2:30A9
cs=0x1a2;eip=0x0030ab; 	T(ADC(ax, 0));	// 6185 adc     ax, 0 ;~ 01A2:30AB
loc_130ae:
	// 4766 
cs=0x1a2;eip=0x0030ae; 	T(MOVZX(ebp, ax));	// 6188 movzx   ebp, ax ;~ 01A2:30AE
cs=0x1a2;eip=0x0030b2; 	T(MOV(si, off_24656));	// 6189 mov     si, off_24656   ; "07/02/95 12:26:42" ;~ 01A2:30B2
cs=0x1a2;eip=0x0030b6; 	T(MOVZX(cx, byte_2467d));	// 6190 movzx   cx, byte_2467D ;~ 01A2:30B6
cs=0x1a2;eip=0x0030bb; 	T(INC(cx));	// 6191 inc     cx ;~ 01A2:30BB
loc_130bc:
	// 4767 
cs=0x1a2;eip=0x0030bc; 	X(PUSH(cx));	// 6194 push    cx ;~ 01A2:30BC
cs=0x1a2;eip=0x0030bd; 	X(PUSH(ebp));	// 6195 push    ebp ;~ 01A2:30BD
cs=0x1a2;eip=0x0030bf; 	T(MOVZX(eax, *(raddr(ds,si))));	// 6196 movzx   eax, byte ptr [si] ;~ 01A2:30BF
cs=0x1a2;eip=0x0030c3; 	T(INC(si));	// 6197 inc     si ;~ 01A2:30C3
cs=0x1a2;eip=0x0030c4; 	T(MOVZX(edx, _amplification));	// 6198 movzx   edx, _amplification ;~ 01A2:30C4
cs=0x1a2;eip=0x0030ca; 	T(SHL(edx, 16));	// 6199 shl     edx, 16 ;~ 01A2:30CA
cs=0x1a2;eip=0x0030ce; 	T(MUL1_4(edx));	// 6200 mul     edx ;~ 01A2:30CE
cs=0x1a2;eip=0x0030d1; 	T(MOV(ecx, 100));	// 6201 mov     ecx, 100 ;~ 01A2:30D1
cs=0x1a2;eip=0x0030d7; 	T(DIV4(ecx));	// 6202 div     ecx ;~ 01A2:30D7
cs=0x1a2;eip=0x0030da; 	T(XOR(edx, edx));	// 6203 xor     edx, edx ;~ 01A2:30DA
cs=0x1a2;eip=0x0030dd; 	T(DIV4(ebp));	// 6204 div     ebp ;~ 01A2:30DD
cs=0x1a2;eip=0x0030e0; 	T(MOV(bp, ax));	// 6205 mov     bp, ax ;~ 01A2:30E0
cs=0x1a2;eip=0x0030e2; 	T(SHR(eax, 16));	// 6206 shr     eax, 16 ;~ 01A2:30E2
cs=0x1a2;eip=0x0030e6; 	T(MOV(ecx, eax));	// 6207 mov     ecx, eax ;~ 01A2:30E6
cs=0x1a2;eip=0x0030e9; 	T(CMP(byte_24625, 1));	// 6208 cmp     byte_24625, 1 ;~ 01A2:30E9
cs=0x1a2;eip=0x0030ee; 	J(JZ(loc_13120));	// 6209 jz      short loc_13120 ;~ 01A2:30EE
cs=0x1a2;eip=0x0030f0; 	T(XOR(ax, ax));	// 6210 xor     ax, ax ;~ 01A2:30F0
cs=0x1a2;eip=0x0030f2; 	T(XOR(dx, dx));	// 6211 xor     dx, dx ;~ 01A2:30F2
cs=0x1a2;eip=0x0030f4; 	T(MOV(bl, 0x80));	// 6212 mov     bl, 80h ; '€' ;~ 01A2:30F4
loc_130f6:
	// 4768 
cs=0x1a2;eip=0x0030f6; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 6215 mov     [di], ax ;~ 01A2:30F6
cs=0x1a2;eip=0x0030f8; 	T(ADD(dx, bp));	// 6216 add     dx, bp ;~ 01A2:30F8
cs=0x1a2;eip=0x0030fa; 	T(ADC(ax, cx));	// 6217 adc     ax, cx ;~ 01A2:30FA
cs=0x1a2;eip=0x0030fc; 	T(ADD(di, 2));	// 6218 add     di, 2 ;~ 01A2:30FC
cs=0x1a2;eip=0x0030ff; 	T(DEC(bl));	// 6219 dec     bl ;~ 01A2:30FF
cs=0x1a2;eip=0x003101; 	J(JNZ(loc_130f6));	// 6220 jnz     short loc_130F6 ;~ 01A2:3101
cs=0x1a2;eip=0x003103; 	T(ADD(di, 0x100));	// 6221 add     di, 100h ;~ 01A2:3103
cs=0x1a2;eip=0x003107; 	T(XOR(ax, ax));	// 6222 xor     ax, ax ;~ 01A2:3107
cs=0x1a2;eip=0x003109; 	T(XOR(dx, dx));	// 6223 xor     dx, dx ;~ 01A2:3109
cs=0x1a2;eip=0x00310b; 	T(MOV(bl, 0x80));	// 6224 mov     bl, 80h ; '€' ;~ 01A2:310B
loc_1310d:
	// 4769 
cs=0x1a2;eip=0x00310d; 	T(SUB(di, 2));	// 6227 sub     di, 2 ;~ 01A2:310D
cs=0x1a2;eip=0x003110; 	T(SUB(dx, bp));	// 6228 sub     dx, bp ;~ 01A2:3110
cs=0x1a2;eip=0x003112; 	T(SBB(ax, cx));	// 6229 sbb     ax, cx ;~ 01A2:3112
cs=0x1a2;eip=0x003114; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 6230 mov     [di], ax ;~ 01A2:3114
cs=0x1a2;eip=0x003116; 	T(DEC(bl));	// 6231 dec     bl ;~ 01A2:3116
cs=0x1a2;eip=0x003118; 	J(JNZ(loc_1310d));	// 6232 jnz     short loc_1310D ;~ 01A2:3118
cs=0x1a2;eip=0x00311a; 	T(ADD(di, 0x100));	// 6233 add     di, 100h ;~ 01A2:311A
cs=0x1a2;eip=0x00311e; 	J(JMP(loc_13162));	// 6234 jmp     short loc_13162 ;~ 01A2:311E
loc_13120:
	// 4770 
cs=0x1a2;eip=0x003120; 	T(XOR(eax, eax));	// 6238 xor     eax, eax ;~ 01A2:3120
cs=0x1a2;eip=0x003123; 	T(XOR(dx, dx));	// 6239 xor     dx, dx ;~ 01A2:3123
cs=0x1a2;eip=0x003125; 	T(MOV(bl, 0x80));	// 6240 mov     bl, 80h ; '€' ;~ 01A2:3125
loc_13127:
	// 4771 
cs=0x1a2;eip=0x003127; 	T(CMP(eax, 0x7FFF));	// 6243 cmp     eax, 7FFFh ;~ 01A2:3127
cs=0x1a2;eip=0x00312d; 	J(JG(loc_1316b));	// 6244 jg      short loc_1316B ;~ 01A2:312D
cs=0x1a2;eip=0x00312f; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 6245 mov     [di], ax ;~ 01A2:312F
loc_13131:
	// 4772 
cs=0x1a2;eip=0x003131; 	T(ADD(dx, bp));	// 6248 add     dx, bp ;~ 01A2:3131
cs=0x1a2;eip=0x003133; 	T(ADC(eax, ecx));	// 6249 adc     eax, ecx ;~ 01A2:3133
cs=0x1a2;eip=0x003136; 	T(ADD(di, 2));	// 6250 add     di, 2 ;~ 01A2:3136
cs=0x1a2;eip=0x003139; 	T(DEC(bl));	// 6251 dec     bl ;~ 01A2:3139
cs=0x1a2;eip=0x00313b; 	J(JNZ(loc_13127));	// 6252 jnz     short loc_13127 ;~ 01A2:313B
cs=0x1a2;eip=0x00313d; 	T(ADD(di, 0x100));	// 6253 add     di, 100h ;~ 01A2:313D
cs=0x1a2;eip=0x003141; 	T(XOR(eax, eax));	// 6254 xor     eax, eax ;~ 01A2:3141
cs=0x1a2;eip=0x003144; 	T(XOR(dx, dx));	// 6255 xor     dx, dx ;~ 01A2:3144
cs=0x1a2;eip=0x003146; 	T(MOV(bl, 0x80));	// 6256 mov     bl, 80h ; '€' ;~ 01A2:3146
loc_13148:
	// 4773 
cs=0x1a2;eip=0x003148; 	T(SUB(di, 2));	// 6259 sub     di, 2 ;~ 01A2:3148
cs=0x1a2;eip=0x00314b; 	T(SUB(dx, bp));	// 6260 sub     dx, bp ;~ 01A2:314B
cs=0x1a2;eip=0x00314d; 	T(SBB(eax, ecx));	// 6261 sbb     eax, ecx ;~ 01A2:314D
cs=0x1a2;eip=0x003150; 	T(CMP(eax, 0x0FFFF8000));	// 6262 cmp     eax, 0FFFF8000h ;~ 01A2:3150
cs=0x1a2;eip=0x003156; 	J(JL(loc_13171));	// 6263 jl      short loc_13171 ;~ 01A2:3156
cs=0x1a2;eip=0x003158; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 6264 mov     [di], ax ;~ 01A2:3158
loc_1315a:
	// 4774 
cs=0x1a2;eip=0x00315a; 	T(DEC(bl));	// 6267 dec     bl ;~ 01A2:315A
cs=0x1a2;eip=0x00315c; 	J(JNZ(loc_13148));	// 6268 jnz     short loc_13148 ;~ 01A2:315C
cs=0x1a2;eip=0x00315e; 	T(ADD(di, 0x100));	// 6269 add     di, 100h ;~ 01A2:315E
loc_13162:
	// 4775 
cs=0x1a2;eip=0x003162; 	X(POP(ebp));	// 6272 pop     ebp ;~ 01A2:3162
cs=0x1a2;eip=0x003164; 	X(POP(cx));	// 6273 pop     cx ;~ 01A2:3164
cs=0x1a2;eip=0x003165; 	T(DEC(cx));	// 6274 dec     cx ;~ 01A2:3165
cs=0x1a2;eip=0x003166; 	J(JNZ(loc_130bc));	// 6275 jnz     loc_130BC ;~ 01A2:3166
cs=0x1a2;eip=0x00316a; 	J(RETN(0));	// 6276 retn ;~ 01A2:316A
loc_1316b:
	// 4776 
cs=0x1a2;eip=0x00316b; 	X(MOV(*(dw*)(raddr(ds,di)), 0x7FFF));	// 6280 mov     word ptr [di], 7FFFh ;~ 01A2:316B
cs=0x1a2;eip=0x00316f; 	J(JMP(loc_13131));	// 6281 jmp     short loc_13131 ;~ 01A2:316F
loc_13171:
	// 4777 
cs=0x1a2;eip=0x003171; 	X(MOV(*(dw*)(raddr(ds,di)), 0x8000));	// 6285 mov     word ptr [di], 8000h ;~ 01A2:3171
cs=0x1a2;eip=0x003175; 	J(JMP(loc_1315a));	// 6286 jmp     short loc_1315A ;~ 01A2:3175

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::kloc_1305a: 	goto loc_1305a;
        case m2c::kloc_1306d: 	goto loc_1306d;
        case m2c::kloc_13080: 	goto loc_13080;
        case m2c::kloc_13091: 	goto loc_13091;
        case m2c::kloc_130a2: 	goto loc_130a2;
        case m2c::kloc_130ae: 	goto loc_130ae;
        case m2c::kloc_130bc: 	goto loc_130bc;
        case m2c::kloc_130f6: 	goto loc_130f6;
        case m2c::kloc_1310d: 	goto loc_1310d;
        case m2c::kloc_13120: 	goto loc_13120;
        case m2c::kloc_13127: 	goto loc_13127;
        case m2c::kloc_13131: 	goto loc_13131;
        case m2c::kloc_13148: 	goto loc_13148;
        case m2c::kloc_1315a: 	goto loc_1315a;
        case m2c::kloc_13162: 	goto loc_13162;
        case m2c::kloc_1316b: 	goto loc_1316b;
        case m2c::kloc_13171: 	goto loc_13171;
        case m2c::ksub_13044: 	goto sub_13044;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_135ca(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_135ca:
    _begin:
cs=0x1a2;eip=0x0035ca; 	T(MOV(bx, offset(seg003,_volume_25908)));	// 6896 mov     bx, offset _volume_25908 ;~ 01A2:35CA
cs=0x1a2;eip=0x0035cd; 	T(MOV(cx, word_245d4));	// 6897 mov     cx, word_245D4 ;~ 01A2:35CD
cs=0x1a2;eip=0x0035d1; 	T(XOR(ax, ax));	// 6898 xor     ax, ax ;~ 01A2:35D1
loc_135d3:
	// 4801 
cs=0x1a2;eip=0x0035d3; 	X(MOV(*(raddr(ds,bx+0x3D)), 0));	// 6901 mov     byte ptr [bx+3Dh], 0 ;~ 01A2:35D3
cs=0x1a2;eip=0x0035d7; 	T(TEST(*(raddr(ds,bx+0x17)), 0x10));	// 6902 test    byte ptr [bx+17h], 10h ;~ 01A2:35D7
cs=0x1a2;eip=0x0035db; 	J(JNZ(loc_135e0));	// 6903 jnz     short loc_135E0 ;~ 01A2:35DB
cs=0x1a2;eip=0x0035dd; 	X(MOV(*(dw*)(raddr(ds,bx+0x0A)), ax));	// 6904 mov     [bx+0Ah], ax ;~ 01A2:35DD
loc_135e0:
	// 4802 
cs=0x1a2;eip=0x0035e0; 	T(ADD(bx, 0x50));	// 6907 add     bx, 50h ; 'P' ;~ 01A2:35E0
cs=0x1a2;eip=0x0035e3; 	T(DEC(cx));	// 6908 dec     cx ;~ 01A2:35E3
cs=0x1a2;eip=0x0035e4; 	J(JNZ(loc_135d3));	// 6909 jnz     short loc_135D3 ;~ 01A2:35E4
cs=0x1a2;eip=0x0035e6; 	T(LES(si, _pointer_245b4));	// 6910 les     si, _pointer_245B4 ;~ 01A2:35E6
cs=0x1a2;eip=0x0035ea; 	T(MOV(al, *(raddr(es,si))));	// 6911 mov     al, es:[si] ;~ 01A2:35EA
cs=0x1a2;eip=0x0035ed; 	T(INC(si));	// 6912 inc     si ;~ 01A2:35ED
cs=0x1a2;eip=0x0035ee; 	T(OR(al, al));	// 6913 or      al, al ;~ 01A2:35EE
cs=0x1a2;eip=0x0035f0; 	J(JZ(loc_135fd));	// 6914 jz      short loc_135FD ;~ 01A2:35F0
loc_135f2:
	// 4803 
cs=0x1a2;eip=0x0035f2; 	J(CALL(sub_13623,0));	// 6917 call    sub_13623 ;~ 01A2:35F2
cs=0x1a2;eip=0x0035f5; 	T(MOV(al, *(raddr(es,si))));	// 6918 mov     al, es:[si] ;~ 01A2:35F5
cs=0x1a2;eip=0x0035f8; 	T(INC(si));	// 6919 inc     si ;~ 01A2:35F8
cs=0x1a2;eip=0x0035f9; 	T(OR(al, al));	// 6920 or      al, al ;~ 01A2:35F9
cs=0x1a2;eip=0x0035fb; 	J(JNZ(loc_135f2));	// 6921 jnz     short loc_135F2 ;~ 01A2:35FB
loc_135fd:
	// 4804 
cs=0x1a2;eip=0x0035fd; 	X(MOV(*(dw*)(((db*)&_pointer_245b4)), si));	// 6924 mov     word ptr _pointer_245B4, si ;~ 01A2:35FD
cs=0x1a2;eip=0x003601; 	T(MOV(bx, offset(seg003,_volume_25908)));	// 6925 mov     bx, offset _volume_25908 ;~ 01A2:3601
cs=0x1a2;eip=0x003604; 	T(MOV(cx, word_245d4));	// 6926 mov     cx, word_245D4 ;~ 01A2:3604
loc_13608:
	// 4805 
cs=0x1a2;eip=0x003608; 	T(TEST(*(raddr(ds,bx+0x17)), 1));	// 6929 test    byte ptr [bx+17h], 1 ;~ 01A2:3608
cs=0x1a2;eip=0x00360c; 	J(JZ(loc_1361c));	// 6930 jz      short loc_1361C ;~ 01A2:360C
cs=0x1a2;eip=0x00360e; 	T(TEST(*(raddr(ds,bx+0x3D)), 0x0C));	// 6931 test    byte ptr [bx+3Dh], 0Ch ;~ 01A2:360E
cs=0x1a2;eip=0x003612; 	J(JNZ(loc_1361c));	// 6932 jnz     short loc_1361C ;~ 01A2:3612
cs=0x1a2;eip=0x003614; 	T(MOV(ax, *(dw*)(raddr(ds,bx))));	// 6933 mov     ax, [bx] ;~ 01A2:3614
cs=0x1a2;eip=0x003616; 	X(PUSH(cx));	// 6934 push    cx ;~ 01A2:3616
cs=0x1a2;eip=0x003617; 	J(CALL(__dispatch_call,off_245ca));	// 6935 call    off_245CA ;~ 01A2:3617
cs=0x1a2;eip=0x00361b; 	X(POP(cx));	// 6936 pop     cx ;~ 01A2:361B
loc_1361c:
	// 4806 
cs=0x1a2;eip=0x00361c; 	T(ADD(bx, 0x50));	// 6940 add     bx, 50h ; 'P' ;~ 01A2:361C
cs=0x1a2;eip=0x00361f; 	T(DEC(cx));	// 6941 dec     cx ;~ 01A2:361F
cs=0x1a2;eip=0x003620; 	J(JNZ(loc_13608));	// 6942 jnz     short loc_13608 ;~ 01A2:3620
cs=0x1a2;eip=0x003622; 	J(RETN(0));	// 6943 retn ;~ 01A2:3622

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::kloc_135d3: 	goto loc_135d3;
        case m2c::kloc_135e0: 	goto loc_135e0;
        case m2c::kloc_135f2: 	goto loc_135f2;
        case m2c::kloc_135fd: 	goto loc_135fd;
        case m2c::kloc_13608: 	goto loc_13608;
        case m2c::kloc_1361c: 	goto loc_1361c;
        case m2c::ksub_135ca: 	goto sub_135ca;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group5(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group5:
    _begin:
sub_13623:
	// 6950 
cs=0x1a2;eip=0x003623; 	T(MOV(dh, al));	// 6961 mov     dh, al ;~ 01A2:3623
cs=0x1a2;eip=0x003625; 	T(AND(dh, 0x0E0));	// 6962 and     dh, 0E0h ;~ 01A2:3625
cs=0x1a2;eip=0x003628; 	T(AND(ax, 0x1F));	// 6963 and     ax, 1Fh ;~ 01A2:3628
cs=0x1a2;eip=0x00362b; 	T(CMP(ax, word_245d4));	// 6964 cmp     ax, word_245D4 ;~ 01A2:362B
cs=0x1a2;eip=0x00362f; 	J(JNC(loc_137be));	// 6965 jnb     loc_137BE ;~ 01A2:362F
cs=0x1a2;eip=0x003633; 	T(SHL(ax, 4));	// 6966 shl     ax, 4 ;~ 01A2:3633
cs=0x1a2;eip=0x003636; 	T(MOV(bx, ax));	// 6967 mov     bx, ax ;~ 01A2:3636
cs=0x1a2;eip=0x003638; 	T(SHL(ax, 2));	// 6968 shl     ax, 2 ;~ 01A2:3638
cs=0x1a2;eip=0x00363b; 	T(ADD(bx, ax));	// 6969 add     bx, ax ;~ 01A2:363B
cs=0x1a2;eip=0x00363d; 	T(ADD(bx, offset(seg003,_volume_25908)));	// 6970 add     bx, offset _volume_25908 ;~ 01A2:363D
cs=0x1a2;eip=0x003641; 	T(TEST(dh, 0x80));	// 6971 test    dh, 80h ;~ 01A2:3641
cs=0x1a2;eip=0x003644; 	J(JZ(loc_13661));	// 6972 jz      short loc_13661 ;~ 01A2:3644
cs=0x1a2;eip=0x003646; 	T(AND(dh, 0x7F));	// 6973 and     dh, 7Fh ;~ 01A2:3646
cs=0x1a2;eip=0x003649; 	T(MOV(ax, *(dw*)(raddr(es,si))));	// 6974 mov     ax, es:[si] ;~ 01A2:3649
cs=0x1a2;eip=0x00364c; 	T(ADD(si, 2));	// 6975 add     si, 2 ;~ 01A2:364C
cs=0x1a2;eip=0x00364f; 	T(OR(ax, ax));	// 6976 or      ax, ax ;~ 01A2:364F
cs=0x1a2;eip=0x003651; 	J(JZ(loc_13661));	// 6977 jz      short loc_13661 ;~ 01A2:3651
cs=0x1a2;eip=0x003653; 	X(AND(*(raddr(ds,bx+0x17)), 0x0EF));	// 6978 and     byte ptr [bx+17h], 0EFh ;~ 01A2:3653
cs=0x1a2;eip=0x003657; 	T(CMP(al, 0x20));	// 6979 cmp     al, 20h ; ' ' ;~ 01A2:3657
cs=0x1a2;eip=0x003659; 	J(JA(loc_13661));	// 6980 ja      short loc_13661 ;~ 01A2:3659
cs=0x1a2;eip=0x00365b; 	T(OR(dh, 0x80));	// 6981 or      dh, 80h ;~ 01A2:365B
cs=0x1a2;eip=0x00365e; 	X(MOV(*(dw*)(raddr(ds,bx+0x0A)), ax));	// 6982 mov     [bx+0Ah], ax ;~ 01A2:365E
loc_13661:
	// 4807 
cs=0x1a2;eip=0x003661; 	T(TEST(dh, 0x40));	// 6986 test    dh, 40h ;~ 01A2:3661
cs=0x1a2;eip=0x003664; 	J(JZ(loc_13677));	// 6987 jz      short loc_13677 ;~ 01A2:3664
cs=0x1a2;eip=0x003666; 	T(AND(dh, 0x0BF));	// 6988 and     dh, 0BFh ;~ 01A2:3666
cs=0x1a2;eip=0x003669; 	T(MOV(al, *(raddr(es,si))));	// 6989 mov     al, es:[si] ;~ 01A2:3669
cs=0x1a2;eip=0x00366c; 	T(INC(si));	// 6990 inc     si ;~ 01A2:366C
cs=0x1a2;eip=0x00366d; 	T(CMP(al, 0x40));	// 6991 cmp     al, 40h ; '@' ;~ 01A2:366D
cs=0x1a2;eip=0x00366f; 	J(JA(loc_13677));	// 6992 ja      short loc_13677 ;~ 01A2:366F
cs=0x1a2;eip=0x003671; 	T(OR(dh, 0x40));	// 6993 or      dh, 40h ;~ 01A2:3671
cs=0x1a2;eip=0x003674; 	X(MOV(*(raddr(ds,bx+8)), al));	// 6994 mov     [bx+8], al ;~ 01A2:3674
loc_13677:
	// 4808 
cs=0x1a2;eip=0x003677; 	X(MOV(*(raddr(ds,bx+0x3D)), dh));	// 6998 mov     [bx+3Dh], dh ;~ 01A2:3677
cs=0x1a2;eip=0x00367a; 	T(TEST(dh, 0x20));	// 6999 test    dh, 20h ;~ 01A2:367A
cs=0x1a2;eip=0x00367d; 	J(JZ(sub_137d5));	// 7000 jz      sub_137D5 ;~ 01A2:367D
cs=0x1a2;eip=0x003681; 	T(MOV(dx, *(dw*)(raddr(es,si))));	// 7001 mov     dx, es:[si] ;~ 01A2:3681
cs=0x1a2;eip=0x003684; 	T(ADD(si, 2));	// 7002 add     si, 2 ;~ 01A2:3684
cs=0x1a2;eip=0x003687; 	T(OR(dh, dh));	// 7003 or      dh, dh ;~ 01A2:3687
cs=0x1a2;eip=0x003689; 	J(JZ(loc_13718));	// 7004 jz      loc_13718 ;~ 01A2:3689
cs=0x1a2;eip=0x00368d; 	T(MOVZX(ax, dh));	// 7005 movzx   ax, dh ;~ 01A2:368D
cs=0x1a2;eip=0x003690; 	T(CMP(ax, word_245d2));	// 7006 cmp     ax, word_245D2 ;~ 01A2:3690
cs=0x1a2;eip=0x003694; 	J(JA(loc_13718));	// 7007 ja      loc_13718 ;~ 01A2:3694
cs=0x1a2;eip=0x003698; 	T(DEC(ax));	// 7008 dec     ax ;~ 01A2:3698
cs=0x1a2;eip=0x003699; 	T(SHL(ax, 6));	// 7009 shl     ax, 6 ;~ 01A2:3699
cs=0x1a2;eip=0x00369c; 	T(MOV(di, ax));	// 7010 mov     di, ax ;~ 01A2:369C
cs=0x1a2;eip=0x00369e; 	T(ADD(di, offset(seg003,_myout)));	// 7011 add     di, offset _myout ;~ 01A2:369E
cs=0x1a2;eip=0x0036a2; 	X(AND(*(raddr(ds,bx+0x17)), 0x0FB));	// 7012 and     byte ptr [bx+17h], 0FBh ;~ 01A2:36A2
cs=0x1a2;eip=0x0036a6; 	T(MOV(al, *(raddr(ds,di+0x3C))));	// 7013 mov     al, [di+3Ch] ;~ 01A2:36A6
cs=0x1a2;eip=0x0036a9; 	T(AND(al, 1));	// 7014 and     al, 1 ;~ 01A2:36A9
cs=0x1a2;eip=0x0036ab; 	T(SHL(al, 2));	// 7015 shl     al, 2 ;~ 01A2:36AB
cs=0x1a2;eip=0x0036ae; 	X(OR(*(raddr(ds,bx+0x17)), al));	// 7016 or      [bx+17h], al ;~ 01A2:36AE
cs=0x1a2;eip=0x0036b1; 	X(OR(*(raddr(ds,bx+0x3D)), 0x10));	// 7017 or      byte ptr [bx+3Dh], 10h ;~ 01A2:36B1
cs=0x1a2;eip=0x0036b5; 	X(MOV(*(raddr(ds,bx+2)), dh));	// 7018 mov     [bx+2], dh ;~ 01A2:36B5
cs=0x1a2;eip=0x0036b8; 	X(MOV(*(dw*)(raddr(ds,bx+0x4C)), 0));	// 7019 mov     word ptr [bx+4Ch], 0 ;~ 01A2:36B8
cs=0x1a2;eip=0x0036bd; 	T(TEST(*(raddr(ds,bx+0x17)), 0x40));	// 7020 test    byte ptr [bx+17h], 40h ;~ 01A2:36BD
cs=0x1a2;eip=0x0036c1; 	J(JZ(loc_136cb));	// 7021 jz      short loc_136CB ;~ 01A2:36C1
cs=0x1a2;eip=0x0036c3; 	X(AND(*(raddr(ds,bx+0x17)), 0x0BF));	// 7022 and     byte ptr [bx+17h], 0BFh ;~ 01A2:36C3
cs=0x1a2;eip=0x0036c7; 	X(MOV(*(raddr(ds,bx+3)), 0));	// 7023 mov     byte ptr [bx+3], 0 ;~ 01A2:36C7
loc_136cb:
	// 4809 
cs=0x1a2;eip=0x0036cb; 	T(MOV(eax, *(dd*)(raddr(ds,di+0x24))));	// 7026 mov     eax, [di+24h] ;~ 01A2:36CB
cs=0x1a2;eip=0x0036cf; 	X(MOV(*(dd*)(raddr(ds,bx+0x28)), eax));	// 7027 mov     [bx+28h], eax ;~ 01A2:36CF
cs=0x1a2;eip=0x0036d3; 	T(MOV(eax, *(dd*)(raddr(ds,di+0x28))));	// 7028 mov     eax, [di+28h] ;~ 01A2:36D3
cs=0x1a2;eip=0x0036d7; 	X(MOV(*(dd*)(raddr(ds,bx+0x2C)), eax));	// 7029 mov     [bx+2Ch], eax ;~ 01A2:36D7
cs=0x1a2;eip=0x0036db; 	T(MOV(eax, *(dd*)(raddr(ds,di+0x2C))));	// 7030 mov     eax, [di+2Ch] ;~ 01A2:36DB
cs=0x1a2;eip=0x0036df; 	X(MOV(*(dd*)(raddr(ds,bx+0x30)), eax));	// 7031 mov     [bx+30h], eax ;~ 01A2:36DF
cs=0x1a2;eip=0x0036e3; 	T(MOV(cl, *(raddr(ds,di+0x3E))));	// 7032 mov     cl, [di+3Eh] ;~ 01A2:36E3
cs=0x1a2;eip=0x0036e6; 	T(AND(cx, 0x0F));	// 7033 and     cx, 0Fh ;~ 01A2:36E6
cs=0x1a2;eip=0x0036e9; 	T(SHL(cx, 3));	// 7034 shl     cx, 3 ;~ 01A2:36E9
cs=0x1a2;eip=0x0036ec; 	T(MOV(ax, cx));	// 7035 mov     ax, cx ;~ 01A2:36EC
cs=0x1a2;eip=0x0036ee; 	T(NEG(ax));	// 7036 neg     ax ;~ 01A2:36EE
cs=0x1a2;eip=0x0036f0; 	T(SHL(cx, 4));	// 7037 shl     cx, 4 ;~ 01A2:36F0
cs=0x1a2;eip=0x0036f3; 	T(ADD(ax, cx));	// 7038 add     ax, cx ;~ 01A2:36F3
cs=0x1a2;eip=0x0036f5; 	T(ADD(ax, offset(seg003,word_24998)));	// 7039 add     ax, offset word_24998 ;~ 01A2:36F5
cs=0x1a2;eip=0x0036f8; 	X(MOV(*(dw*)(raddr(ds,bx+0x38)), ax));	// 7040 mov     [bx+38h], ax ;~ 01A2:36F8
cs=0x1a2;eip=0x0036fb; 	T(MOV(ax, _freq_245de));	// 7041 mov     ax, _freq_245DE ;~ 01A2:36FB
cs=0x1a2;eip=0x0036fe; 	T(MOV(cx, *(dw*)(raddr(ds,di+0x36))));	// 7042 mov     cx, [di+36h] ;~ 01A2:36FE
cs=0x1a2;eip=0x003701; 	J(JCXZ(loc_13705));	// 7043 jcxz    short loc_13705 ;~ 01A2:3701
cs=0x1a2;eip=0x003703; 	T(MOV(ax, cx));	// 7044 mov     ax, cx ;~ 01A2:3703
loc_13705:
	// 4810 
cs=0x1a2;eip=0x003705; 	X(MOV(*(dw*)(raddr(ds,bx+0x14)), ax));	// 7047 mov     [bx+14h], ax ;~ 01A2:3705
cs=0x1a2;eip=0x003708; 	T(TEST(*(raddr(ds,bx+0x3D)), 0x40));	// 7048 test    byte ptr [bx+3Dh], 40h ;~ 01A2:3708
cs=0x1a2;eip=0x00370c; 	J(JNZ(loc_13718));	// 7049 jnz     short loc_13718 ;~ 01A2:370C
cs=0x1a2;eip=0x00370e; 	T(MOV(al, *(raddr(ds,di+0x3D))));	// 7050 mov     al, [di+3Dh] ;~ 01A2:370E
cs=0x1a2;eip=0x003711; 	X(MOV(*(raddr(ds,bx+8)), al));	// 7051 mov     [bx+8], al ;~ 01A2:3711
cs=0x1a2;eip=0x003714; 	X(OR(*(raddr(ds,bx+0x3D)), 0x40));	// 7052 or      byte ptr [bx+3Dh], 40h ;~ 01A2:3714
loc_13718:
	// 4811 
cs=0x1a2;eip=0x003718; 	T(OR(dl, dl));	// 7056 or      dl, dl ;~ 01A2:3718
cs=0x1a2;eip=0x00371a; 	J(JZ(sub_137d5));	// 7057 jz      sub_137D5 ;~ 01A2:371A
cs=0x1a2;eip=0x00371e; 	T(CMP(dl, 0x0FE));	// 7058 cmp     dl, 0FEh ; 'þ' ;~ 01A2:371E
cs=0x1a2;eip=0x003721; 	J(JZ(loc_137ce));	// 7059 jz      loc_137CE ;~ 01A2:3721
cs=0x1a2;eip=0x003725; 	T(CMP(dl, 0x0FF));	// 7060 cmp     dl, 0FFh ;~ 01A2:3725
cs=0x1a2;eip=0x003728; 	J(JZ(sub_137d5));	// 7061 jz      sub_137D5 ;~ 01A2:3728
cs=0x1a2;eip=0x00372c; 	X(MOV(*(raddr(ds,bx+0x35)), dl));	// 7062 mov     [bx+35h], dl ;~ 01A2:372C
cs=0x1a2;eip=0x00372f; 	X(OR(*(raddr(ds,bx+0x3D)), 8));	// 7063 or      byte ptr [bx+3Dh], 8 ;~ 01A2:372F
cs=0x1a2;eip=0x003733; 	T(TEST(_sndflags_24622, 0x10));	// 7064 test    _sndflags_24622, 10h ;~ 01A2:3733
cs=0x1a2;eip=0x003738; 	J(JNZ(loc_13742));	// 7065 jnz     short loc_13742 ;~ 01A2:3738
cs=0x1a2;eip=0x00373a; 	T(TEST(*(raddr(ds,bx+0x17)), 4));	// 7066 test    byte ptr [bx+17h], 4 ;~ 01A2:373A
cs=0x1a2;eip=0x00373e; 	J(JZ(loc_137ce));	// 7067 jz      loc_137CE ;~ 01A2:373E
loc_13742:
	// 4812 
cs=0x1a2;eip=0x003742; 	T(MOV(al, *(raddr(ds,bx+0x35))));	// 7070 mov     al, [bx+35h] ;~ 01A2:3742
cs=0x1a2;eip=0x003745; 	J(CALL(sub_13826,0));	// 7071 call    sub_13826 ;~ 01A2:3745
cs=0x1a2;eip=0x003748; 	X(XCHG(ax, *(dw*)(raddr(ds,bx))));	// 7072 xchg    ax, [bx] ;~ 01A2:3748
cs=0x1a2;eip=0x00374a; 	T(TEST(*(raddr(ds,bx+0x3D)), 0x80));	// 7073 test    byte ptr [bx+3Dh], 80h ;~ 01A2:374A
cs=0x1a2;eip=0x00374e; 	J(JZ(loc_13791));	// 7074 jz      short loc_13791 ;~ 01A2:374E
cs=0x1a2;eip=0x003750; 	X(MOV(word_245dc, ax));	// 7075 mov     word_245DC, ax ;~ 01A2:3750
cs=0x1a2;eip=0x003753; 	T(MOV(ax, *(dw*)(raddr(ds,bx+0x0A))));	// 7076 mov     ax, [bx+0Ah] ;~ 01A2:3753
cs=0x1a2;eip=0x003756; 	T(AND(ah, 0x0F0));	// 7077 and     ah, 0F0h ;~ 01A2:3756
cs=0x1a2;eip=0x003759; 	T(CMP(al, 3));	// 7078 cmp     al, 3 ;~ 01A2:3759
cs=0x1a2;eip=0x00375b; 	J(JZ(loc_138bd));	// 7079 jz      loc_138BD ;~ 01A2:375B
cs=0x1a2;eip=0x00375f; 	T(CMP(al, 5));	// 7080 cmp     al, 5 ;~ 01A2:375F
cs=0x1a2;eip=0x003761; 	J(JZ(loc_138bd));	// 7081 jz      loc_138BD ;~ 01A2:3761
cs=0x1a2;eip=0x003765; 	T(CMP(al, 9));	// 7082 cmp     al, 9 ;~ 01A2:3765
cs=0x1a2;eip=0x003767; 	J(JZ(loc_13ace));	// 7083 jz      loc_13ACE ;~ 01A2:3767
cs=0x1a2;eip=0x00376b; 	T(CMP(al, 0x0C));	// 7084 cmp     al, 0Ch ;~ 01A2:376B
cs=0x1a2;eip=0x00376d; 	J(JZ(loc_13b66));	// 7085 jz      loc_13B66 ;~ 01A2:376D
cs=0x1a2;eip=0x003771; 	T(CMP(ax, 0x500E));	// 7086 cmp     ax, 500Eh ;~ 01A2:3771
cs=0x1a2;eip=0x003774; 	J(JZ(loc_13bf1));	// 7087 jz      loc_13BF1 ;~ 01A2:3774
cs=0x1a2;eip=0x003778; 	T(CMP(ax, 0x0D00E));	// 7088 cmp     ax, 0D00Eh ;~ 01A2:3778
cs=0x1a2;eip=0x00377b; 	J(JZ(loc_13cae));	// 7089 jz      loc_13CAE ;~ 01A2:377B
cs=0x1a2;eip=0x00377f; 	T(CMP(al, 0x13));	// 7090 cmp     al, 13h ;~ 01A2:377F
cs=0x1a2;eip=0x003781; 	J(JZ(loc_13df9));	// 7091 jz      loc_13DF9 ;~ 01A2:3781
cs=0x1a2;eip=0x003785; 	T(CMP(al, 0x16));	// 7092 cmp     al, 16h ;~ 01A2:3785
cs=0x1a2;eip=0x003787; 	J(JZ(loc_13df9));	// 7093 jz      loc_13DF9 ;~ 01A2:3787
cs=0x1a2;eip=0x00378b; 	T(CMP(al, 0x19));	// 7094 cmp     al, 19h ;~ 01A2:378B
cs=0x1a2;eip=0x00378d; 	J(JZ(loc_13ed3));	// 7095 jz      loc_13ED3 ;~ 01A2:378D
loc_13791:
	// 4813 
cs=0x1a2;eip=0x003791; 	J(CALL(__dispatch_call,off_245c8));	// 7099 call    off_245C8 ;~ 01A2:3791
cs=0x1a2;eip=0x003795; 	T(TEST(*(raddr(ds,bx+9)), 4));	// 7100 test    byte ptr [bx+9], 4 ;~ 01A2:3795
cs=0x1a2;eip=0x003799; 	J(JNZ(loc_1379f));	// 7101 jnz     short loc_1379F ;~ 01A2:3799
cs=0x1a2;eip=0x00379b; 	X(MOV(*(raddr(ds,bx+0x0D)), 0));	// 7102 mov     byte ptr [bx+0Dh], 0 ;~ 01A2:379B
loc_1379f:
	// 4814 
cs=0x1a2;eip=0x00379f; 	T(TEST(*(raddr(ds,bx+9)), 0x40));	// 7105 test    byte ptr [bx+9], 40h ;~ 01A2:379F
cs=0x1a2;eip=0x0037a3; 	J(JNZ(loc_137a9));	// 7106 jnz     short loc_137A9 ;~ 01A2:37A3
cs=0x1a2;eip=0x0037a5; 	X(MOV(*(raddr(ds,bx+0x0F)), 0));	// 7107 mov     byte ptr [bx+0Fh], 0 ;~ 01A2:37A5
loc_137a9:
	// 4815 
cs=0x1a2;eip=0x0037a9; 	T(MOVZX(di, *(raddr(ds,bx+0x0A))));	// 7110 movzx   di, byte ptr [bx+0Ah] ;~ 01A2:37A9
cs=0x1a2;eip=0x0037ad; 	T(CMP(di, 32));	// 7111 cmp     di, 32 ;~ 01A2:37AD
cs=0x1a2;eip=0x0037b0; 	J(JA(_eff_nullsub));	// 7112 ja      _eff_nullsub ;~ 01A2:37B0
cs=0x1a2;eip=0x0037b4; 	T(SHL(di, 1));	// 7113 shl     di, 1 ;~ 01A2:37B4
cs=0x1a2;eip=0x0037b6; 	T(MOV(al, *(raddr(ds,bx+0x0B))));	// 7114 mov     al, [bx+0Bh] ;~ 01A2:37B6
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0037b9; __disp=*(dw*)(((db*)&_effoff_18fa2)+di);
	J(return __dispatch_call(__disp, _state););	// 7115 jmp     cs:_effoff_18FA2[di] ;~ 01A2:37B9
loc_137be:
	// 4816 
cs=0x1a2;eip=0x0037be; 	T(MOVZX(di, dh));	// 7119 movzx   di, dh ;~ 01A2:37BE
cs=0x1a2;eip=0x0037c1; 	T(SHR(di, 5));	// 7120 shr     di, 5 ;~ 01A2:37C1
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0037c4; 	T(MOV(al, *((&byte_11c29)+di)));	// 7121 mov     al, cs:byte_11C29[di] ;~ 01A2:37C4
cs=0x1a2;eip=0x0037c9; 	T(XOR(ah, ah));	// 7122 xor     ah, ah ;~ 01A2:37C9
cs=0x1a2;eip=0x0037cb; 	T(ADD(si, ax));	// 7123 add     si, ax ;~ 01A2:37CB
cs=0x1a2;eip=0x0037cd; 	J(RETN(0));	// 7124 retn ;~ 01A2:37CD
loc_137ce:
	// 4817 
cs=0x1a2;eip=0x0037ce; 	J(CALL(sub_137d5,0));	// 7129 call    sub_137D5 ;~ 01A2:37CE
cs=0x1a2;eip=0x0037d1; __disp=off_245ce;
	J(return __dispatch_call(__disp, _state););	// 7130 jmp     off_245CE ;~ 01A2:37D1
sub_137d5:
	// 7137 
cs=0x1a2;eip=0x0037d5; 	T(TEST(*(raddr(ds,bx+0x3D)), 0x40));	// 7139 test    byte ptr [bx+3Dh], 40h ;~ 01A2:37D5
cs=0x1a2;eip=0x0037d9; 	J(JNZ(loc_137f0));	// 7140 jnz     short loc_137F0 ;~ 01A2:37D9
cs=0x1a2;eip=0x0037db; 	T(MOVZX(di, *(raddr(ds,bx+0x0A))));	// 7141 movzx   di, byte ptr [bx+0Ah] ;~ 01A2:37DB
cs=0x1a2;eip=0x0037df; 	T(CMP(di, 32));	// 7142 cmp     di, 32 ;~ 01A2:37DF
cs=0x1a2;eip=0x0037e2; 	J(JA(_eff_nullsub));	// 7143 ja      _eff_nullsub ;~ 01A2:37E2
cs=0x1a2;eip=0x0037e6; 	T(SHL(di, 1));	// 7144 shl     di, 1 ;~ 01A2:37E6
cs=0x1a2;eip=0x0037e8; 	T(MOV(al, *(raddr(ds,bx+0x0B))));	// 7145 mov     al, [bx+0Bh] ;~ 01A2:37E8
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0037eb; __disp=*(dw*)(((db*)&_effoff_18f60)+di);
	J(return __dispatch_call(__disp, _state););	// 7146 jmp     cs:_effoff_18F60[di] ;~ 01A2:37EB
loc_137f0:
	// 4818 
cs=0x1a2;eip=0x0037f0; 	T(MOVZX(di, *(raddr(ds,bx+0x0A))));	// 7150 movzx   di, byte ptr [bx+0Ah] ;~ 01A2:37F0
cs=0x1a2;eip=0x0037f4; 	T(CMP(di, 32));	// 7151 cmp     di, 32 ;~ 01A2:37F4
cs=0x1a2;eip=0x0037f7; 	J(JA(_eff_nullsub));	// 7152 ja      _eff_nullsub ;~ 01A2:37F7
cs=0x1a2;eip=0x0037fb; 	T(SHL(di, 1));	// 7153 shl     di, 1 ;~ 01A2:37FB
cs=0x1a2;eip=0x0037fd; 	T(MOV(al, *(raddr(ds,bx+0x0B))));	// 7154 mov     al, [bx+0Bh] ;~ 01A2:37FD
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x003800; 	J(CALL(__dispatch_call,*(dw*)(((db*)&_effoff_18f60)+di)));	// 7155 call    cs:_effoff_18F60[di] ;~ 01A2:3800
cs=0x1a2;eip=0x003805; 	T(TEST(*(raddr(ds,bx+0x3D)), 0x40));	// 7156 test    byte ptr [bx+3Dh], 40h ;~ 01A2:3805
cs=0x1a2;eip=0x003809; 	J(JZ(locret_13812));	// 7157 jz      short locret_13812 ;~ 01A2:3809
cs=0x1a2;eip=0x00380b; 	T(MOV(al, *(raddr(ds,bx+8))));	// 7158 mov     al, [bx+8] ;~ 01A2:380B
cs=0x1a2;eip=0x00380e; __disp=off_245cc;
	J(return __dispatch_call(__disp, _state););	// 7159 jmp     off_245CC ;~ 01A2:380E
locret_13812:
	// 4819 
cs=0x1a2;eip=0x003812; 	J(RETN(0));	// 7163 retn ;~ 01A2:3812
sub_13813:
	// 7170 
cs=0x1a2;eip=0x003813; 	T(MOVZX(di, *(raddr(ds,bx+0x0A))));	// 7172 movzx   di, byte ptr [bx+0Ah] ;~ 01A2:3813
cs=0x1a2;eip=0x003817; 	T(CMP(di, 32));	// 7173 cmp     di, 32 ;~ 01A2:3817
cs=0x1a2;eip=0x00381a; 	J(JA(_eff_nullsub));	// 7174 ja      short _eff_nullsub ;~ 01A2:381A
cs=0x1a2;eip=0x00381c; 	T(SHL(di, 1));	// 7175 shl     di, 1 ;~ 01A2:381C
cs=0x1a2;eip=0x00381e; 	T(MOV(al, *(raddr(ds,bx+0x0B))));	// 7176 mov     al, [bx+0Bh] ;~ 01A2:381E
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x003821; __disp=*(dw*)(((db*)&_effoff_18fe4)+di);
	J(return __dispatch_call(__disp, _state););	// 7177 jmp     cs:_effoff_18FE4[di] ;~ 01A2:3821
_eff_nullsub:
	// 7235 
cs=0x1a2;eip=0x00387e; 	J(RETN(0));	// 7237 retn ;~ 01A2:387E
_eff_1387f:
	// 7244 
cs=0x1a2;eip=0x00387f; 	T(CMP(byte_24668, 0));	// 7246 cmp     byte_24668, 0 ;~ 01A2:387F
cs=0x1a2;eip=0x003884; 	J(JNZ(_eff_nullsub));	// 7247 jnz     short _eff_nullsub ;~ 01A2:3884
	return _group6(m2c::k_eff_13886, _state);
_eff_1389d:
	// 7274 
cs=0x1a2;eip=0x00389d; 	T(CMP(byte_24668, 0));	// 7276 cmp     byte_24668, 0 ;~ 01A2:389D
cs=0x1a2;eip=0x0038a2; 	J(JNZ(_eff_nullsub));	// 7277 jnz     short _eff_nullsub ;~ 01A2:38A2
	return _group7(m2c::k_eff_138a4, _state);
seg000_38bd_proc:
	// 7306 
loc_138bd:
	// 4828 
cs=0x1a2;eip=0x0038bd; 	T(MOV(ax, *(dw*)(raddr(ds,bx))));	// 7308 mov     ax, [bx] ;~ 01A2:38BD
cs=0x1a2;eip=0x0038bf; 	T(CMP(ax, word_245dc));	// 7309 cmp     ax, word_245DC ;~ 01A2:38BF
cs=0x1a2;eip=0x0038c3; 	J(JNZ(loc_138c7));	// 7310 jnz     short loc_138C7 ;~ 01A2:38C3
cs=0x1a2;eip=0x0038c5; 	T(XOR(ax, ax));	// 7311 xor     ax, ax ;~ 01A2:38C5
loc_138c7:
	// 4829 
cs=0x1a2;eip=0x0038c7; 	X(MOV(*(dw*)(raddr(ds,bx+0x10)), ax));	// 7314 mov     [bx+10h], ax ;~ 01A2:38C7
cs=0x1a2;eip=0x0038ca; 	T(MOV(ax, word_245dc));	// 7315 mov     ax, word_245DC ;~ 01A2:38CA
cs=0x1a2;eip=0x0038cd; 	X(MOV(*(dw*)(raddr(ds,bx)), ax));	// 7316 mov     [bx], ax ;~ 01A2:38CD
cs=0x1a2;eip=0x0038cf; 	J(JMP(sub_137d5));	// 7317 jmp     sub_137D5 ;~ 01A2:38CF
seg000_3ace_proc:
	// 7669 
loc_13ace:
	// 4861 
cs=0x1a2;eip=0x003ace; 	T(MOV(al, *(raddr(ds,bx+0x0B))));	// 7670 mov     al, [bx+0Bh] ;~ 01A2:3ACE
cs=0x1a2;eip=0x003ad1; 	J(CALL(_eff_13a94,0));	// 7671 call    _eff_13A94 ;~ 01A2:3AD1
cs=0x1a2;eip=0x003ad4; 	J(JMP(loc_13791));	// 7672 jmp     loc_13791 ;~ 01A2:3AD4
seg000_3b66_proc:
	// 7782 
loc_13b66:
	// 4874 
cs=0x1a2;eip=0x003b66; 	T(MOV(al, *(raddr(ds,bx+0x0B))));	// 7783 mov     al, [bx+0Bh] ;~ 01A2:3B66
cs=0x1a2;eip=0x003b69; 	T(CMP(al, byte_2467d));	// 7784 cmp     al, byte_2467D ;~ 01A2:3B69
cs=0x1a2;eip=0x003b6d; 	J(JBE(loc_13b72));	// 7785 jbe     short loc_13B72 ;~ 01A2:3B6D
cs=0x1a2;eip=0x003b6f; 	T(MOV(al, byte_2467d));	// 7786 mov     al, byte_2467D ;~ 01A2:3B6F
loc_13b72:
	// 4875 
cs=0x1a2;eip=0x003b72; 	X(MOV(*(raddr(ds,bx+8)), al));	// 7789 mov     [bx+8], al ;~ 01A2:3B72
cs=0x1a2;eip=0x003b75; 	J(JMP(loc_13791));	// 7790 jmp     loc_13791 ;~ 01A2:3B75
seg000_3bf1_proc:
	// 7897 
loc_13bf1:
	// 4879 
cs=0x1a2;eip=0x003bf1; 	T(MOV(al, *(raddr(ds,bx+0x0B))));	// 7898 mov     al, [bx+0Bh] ;~ 01A2:3BF1
cs=0x1a2;eip=0x003bf4; 	J(CALL(_eff_13bc8,0));	// 7899 call    _eff_13BC8 ;~ 01A2:3BF4
cs=0x1a2;eip=0x003bf7; 	T(MOV(al, *(raddr(ds,bx+0x35))));	// 7900 mov     al, [bx+35h] ;~ 01A2:3BF7
cs=0x1a2;eip=0x003bfa; 	J(CALL(sub_13826,0));	// 7901 call    sub_13826 ;~ 01A2:3BFA
cs=0x1a2;eip=0x003bfd; 	X(MOV(*(dw*)(raddr(ds,bx)), ax));	// 7902 mov     [bx], ax ;~ 01A2:3BFD
cs=0x1a2;eip=0x003bff; 	J(JMP(loc_13791));	// 7903 jmp     loc_13791 ;~ 01A2:3BFF
seg000_3cae_proc:
	// 8031 
loc_13cae:
	// 4884 
cs=0x1a2;eip=0x003cae; 	T(MOV(al, *(raddr(ds,bx+0x0B))));	// 8032 mov     al, [bx+0Bh] ;~ 01A2:3CAE
cs=0x1a2;eip=0x003cb1; 	T(AND(al, 0x0F));	// 8033 and     al, 0Fh ;~ 01A2:3CB1
	return _group8(m2c::k_eff_13cb3, _state);
seg000_3df9_proc:
	// 8288 
loc_13df9:
	// 4893 
cs=0x1a2;eip=0x003df9; 	T(MOV(ax, *(dw*)(raddr(ds,bx))));	// 8290 mov     ax, [bx] ;~ 01A2:3DF9
cs=0x1a2;eip=0x003dfb; 	T(CMP(ax, word_245dc));	// 8291 cmp     ax, word_245DC ;~ 01A2:3DFB
cs=0x1a2;eip=0x003dff; 	J(JNZ(loc_13e03));	// 8292 jnz     short loc_13E03 ;~ 01A2:3DFF
cs=0x1a2;eip=0x003e01; 	T(XOR(ax, ax));	// 8293 xor     ax, ax ;~ 01A2:3E01
loc_13e03:
	// 4894 
cs=0x1a2;eip=0x003e03; 	X(MOV(*(dw*)(raddr(ds,bx+0x10)), ax));	// 8296 mov     [bx+10h], ax ;~ 01A2:3E03
cs=0x1a2;eip=0x003e06; 	T(MOV(ax, word_245dc));	// 8297 mov     ax, word_245DC ;~ 01A2:3E06
cs=0x1a2;eip=0x003e09; 	X(MOV(*(dw*)(raddr(ds,bx)), ax));	// 8298 mov     [bx], ax ;~ 01A2:3E09
cs=0x1a2;eip=0x003e0b; 	T(MOV(al, *(raddr(ds,bx+0x0B))));	// 8299 mov     al, [bx+0Bh] ;~ 01A2:3E0B
cs=0x1a2;eip=0x003e0e; 	T(OR(al, al));	// 8300 or      al, al ;~ 01A2:3E0E
cs=0x1a2;eip=0x003e10; 	J(JNZ(loc_13e18));	// 8301 jnz     short loc_13E18 ;~ 01A2:3E10
cs=0x1a2;eip=0x003e12; 	T(MOV(al, *(raddr(ds,bx+0x34))));	// 8302 mov     al, [bx+34h] ;~ 01A2:3E12
cs=0x1a2;eip=0x003e15; 	X(MOV(*(raddr(ds,bx+0x0B)), al));	// 8303 mov     [bx+0Bh], al ;~ 01A2:3E15
loc_13e18:
	// 4895 
cs=0x1a2;eip=0x003e18; 	X(MOV(*(raddr(ds,bx+0x34)), al));	// 8306 mov     [bx+34h], al ;~ 01A2:3E18
cs=0x1a2;eip=0x003e1b; 	J(JMP(sub_137d5));	// 8307 jmp     sub_137D5 ;~ 01A2:3E1B
seg000_3ed3_proc:
	// 8442 
loc_13ed3:
	// 4900 
cs=0x1a2;eip=0x003ed3; 	T(MOV(cl, *(raddr(ds,bx+0x0B))));	// 8443 mov     cl, [bx+0Bh] ;~ 01A2:3ED3
cs=0x1a2;eip=0x003ed6; 	T(AND(cx, 0x0FF));	// 8444 and     cx, 0FFh ;~ 01A2:3ED6
cs=0x1a2;eip=0x003eda; 	J(JZ(loc_13791));	// 8445 jz      loc_13791 ;~ 01A2:3EDA
cs=0x1a2;eip=0x003ede; 	T(MOV(ax, *(dw*)(raddr(ds,bx))));	// 8446 mov     ax, [bx] ;~ 01A2:3EDE
cs=0x1a2;eip=0x003ee0; 	T(SUB(ax, word_245dc));	// 8447 sub     ax, word_245DC ;~ 01A2:3EE0
cs=0x1a2;eip=0x003ee4; 	J(JNS(loc_13ee8));	// 8448 jns     short loc_13EE8 ;~ 01A2:3EE4
cs=0x1a2;eip=0x003ee6; 	T(NEG(ax));	// 8449 neg     ax ;~ 01A2:3EE6
loc_13ee8:
	// 4901 
cs=0x1a2;eip=0x003ee8; 	T(XOR(dx, dx));	// 8452 xor     dx, dx ;~ 01A2:3EE8
cs=0x1a2;eip=0x003eea; 	T(DIV2(cx));	// 8453 div     cx ;~ 01A2:3EEA
cs=0x1a2;eip=0x003eec; 	X(MOV(*(dw*)(raddr(ds,bx+0x12)), ax));	// 8454 mov     [bx+12h], ax ;~ 01A2:3EEC
cs=0x1a2;eip=0x003eef; 	X(MOV(*(raddr(ds,bx+0x0B)), 0));	// 8455 mov     byte ptr [bx+0Bh], 0 ;~ 01A2:3EEF
cs=0x1a2;eip=0x003ef3; 	X(OR(*(raddr(ds,bx+0x17)), 0x10));	// 8456 or      byte ptr [bx+17h], 10h ;~ 01A2:3EF3
cs=0x1a2;eip=0x003ef7; 	T(MOV(ax, *(dw*)(raddr(ds,bx))));	// 8457 mov     ax, [bx] ;~ 01A2:3EF7
cs=0x1a2;eip=0x003ef9; 	X(MOV(*(dw*)(raddr(ds,bx+0x10)), ax));	// 8458 mov     [bx+10h], ax ;~ 01A2:3EF9
cs=0x1a2;eip=0x003efc; 	T(MOV(ax, word_245dc));	// 8459 mov     ax, word_245DC ;~ 01A2:3EFC
cs=0x1a2;eip=0x003eff; 	X(MOV(*(dw*)(raddr(ds,bx)), ax));	// 8460 mov     [bx], ax ;~ 01A2:3EFF
cs=0x1a2;eip=0x003f01; 	J(JMP(sub_137d5));	// 8461 jmp     sub_137D5 ;~ 01A2:3F01

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_1387f: 	goto _eff_1387f;
        case m2c::k_eff_1389d: 	goto _eff_1389d;
        case m2c::k_eff_nullsub: 	goto _eff_nullsub;
        case m2c::kloc_13661: 	goto loc_13661;
        case m2c::kloc_13677: 	goto loc_13677;
        case m2c::kloc_136cb: 	goto loc_136cb;
        case m2c::kloc_13705: 	goto loc_13705;
        case m2c::kloc_13718: 	goto loc_13718;
        case m2c::kloc_13742: 	goto loc_13742;
        case m2c::kloc_13791: 	goto loc_13791;
        case m2c::kloc_1379f: 	goto loc_1379f;
        case m2c::kloc_137a9: 	goto loc_137a9;
        case m2c::kloc_137be: 	goto loc_137be;
        case m2c::kloc_137ce: 	goto loc_137ce;
        case m2c::kloc_137f0: 	goto loc_137f0;
        case m2c::kloc_138bd: 	goto loc_138bd;
        case m2c::kloc_138c7: 	goto loc_138c7;
        case m2c::kloc_13b66: 	goto loc_13b66;
        case m2c::kloc_13b72: 	goto loc_13b72;
        case m2c::kloc_13bf1: 	goto loc_13bf1;
        case m2c::kloc_13df9: 	goto loc_13df9;
        case m2c::kloc_13e03: 	goto loc_13e03;
        case m2c::kloc_13e18: 	goto loc_13e18;
        case m2c::kloc_13ed3: 	goto loc_13ed3;
        case m2c::kloc_13ee8: 	goto loc_13ee8;
        case m2c::klocret_13812: 	goto locret_13812;
        case m2c::kseg000_3ace_proc: 	goto seg000_3ace_proc;
        case m2c::kseg000_3cae_proc: 	goto seg000_3cae_proc;
        case m2c::ksub_13623: 	goto sub_13623;
        case m2c::ksub_137d5: 	goto sub_137d5;
        case m2c::ksub_13813: 	goto sub_13813;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13826(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13826:
    _begin:
cs=0x1a2;eip=0x003826; 	T(MOV(cl, al));	// 7186 mov     cl, al ;~ 01A2:3826
cs=0x1a2;eip=0x003828; 	T(MOVZX(di, cl));	// 7187 movzx   di, cl ;~ 01A2:3828
cs=0x1a2;eip=0x00382b; 	T(DEC(di));	// 7188 dec     di ;~ 01A2:382B
cs=0x1a2;eip=0x00382c; 	T(AND(di, 0x0F));	// 7189 and     di, 0Fh ;~ 01A2:382C
cs=0x1a2;eip=0x00382f; 	T(SHL(di, 1));	// 7190 shl     di, 1 ;~ 01A2:382F
cs=0x1a2;eip=0x003831; 	T(SHR(cl, 4));	// 7191 shr     cl, 4 ;~ 01A2:3831
cs=0x1a2;eip=0x003834; 	T(CMP(byte_2461a, 0));	// 7192 cmp     byte_2461A, 0 ;~ 01A2:3834
cs=0x1a2;eip=0x003839; 	J(JNZ(loc_1386c));	// 7193 jnz     short loc_1386C ;~ 01A2:3839
cs=0x1a2;eip=0x00383b; 	T(MOV(ch, cl));	// 7194 mov     ch, cl ;~ 01A2:383B
cs=0x1a2;eip=0x00383d; 	T(XOR(cl, cl));	// 7195 xor     cl, cl ;~ 01A2:383D
cs=0x1a2;eip=0x00383f; 	T(XOR(ax, ax));	// 7196 xor     ax, ax ;~ 01A2:383F
cs=0x1a2;eip=0x003841; 	T(OR(ch, ch));	// 7197 or      ch, ch ;~ 01A2:3841
cs=0x1a2;eip=0x003843; 	J(JZ(loc_13863));	// 7198 jz      short loc_13863 ;~ 01A2:3843
cs=0x1a2;eip=0x003845; 	T(MOV(ax, 24));	// 7199 mov     ax, 24 ;~ 01A2:3845
cs=0x1a2;eip=0x003848; 	T(DEC(ch));	// 7200 dec     ch ;~ 01A2:3848
cs=0x1a2;eip=0x00384a; 	J(JZ(loc_13863));	// 7201 jz      short loc_13863 ;~ 01A2:384A
cs=0x1a2;eip=0x00384c; 	T(MOV(ax, 48));	// 7202 mov     ax, 48 ;~ 01A2:384C
cs=0x1a2;eip=0x00384f; 	T(DEC(ch));	// 7203 dec     ch ;~ 01A2:384F
cs=0x1a2;eip=0x003851; 	J(JZ(loc_13863));	// 7204 jz      short loc_13863 ;~ 01A2:3851
cs=0x1a2;eip=0x003853; 	T(MOV(ax, 72));	// 7205 mov     ax, 72 ;~ 01A2:3853
cs=0x1a2;eip=0x003856; 	T(DEC(ch));	// 7206 dec     ch ;~ 01A2:3856
cs=0x1a2;eip=0x003858; 	J(JZ(loc_13863));	// 7207 jz      short loc_13863 ;~ 01A2:3858
cs=0x1a2;eip=0x00385a; 	T(MOV(ax, 96));	// 7208 mov     ax, 96 ;~ 01A2:385A
cs=0x1a2;eip=0x00385d; 	T(DEC(ch));	// 7209 dec     ch ;~ 01A2:385D
cs=0x1a2;eip=0x00385f; 	J(JZ(loc_13863));	// 7210 jz      short loc_13863 ;~ 01A2:385F
cs=0x1a2;eip=0x003861; 	T(MOV(cl, ch));	// 7211 mov     cl, ch ;~ 01A2:3861
loc_13863:
	// 4820 
cs=0x1a2;eip=0x003863; 	T(ADD(di, ax));	// 7215 add     di, ax ;~ 01A2:3863
cs=0x1a2;eip=0x003865; 	T(ADD(di, *(dw*)(raddr(ds,bx+0x38))));	// 7216 add     di, [bx+38h] ;~ 01A2:3865
cs=0x1a2;eip=0x003868; 	T(SUB(di, offset(seg003,word_246de)));	// 7217 sub     di, offset word_246DE ;~ 01A2:3868
loc_1386c:
	// 4821 
cs=0x1a2;eip=0x00386c; 	T(MOV(ax, *(dw*)(((db*)word_246de)+di)));	// 7220 mov     ax, word_246DE[di] ;~ 01A2:386C
cs=0x1a2;eip=0x003870; 	T(SHR(ax, cl));	// 7221 shr     ax, cl ;~ 01A2:3870
cs=0x1a2;eip=0x003872; 	T(MOV(cx, *(dw*)(raddr(ds,bx+0x14))));	// 7222 mov     cx, [bx+14h] ;~ 01A2:3872
cs=0x1a2;eip=0x003875; 	J(JCXZ(locret_1387d));	// 7223 jcxz    short locret_1387D ;~ 01A2:3875
cs=0x1a2;eip=0x003877; 	X(MUL1_2(_freq_245de));	// 7224 mul     _freq_245DE ;~ 01A2:3877
cs=0x1a2;eip=0x00387b; 	T(DIV2(cx));	// 7225 div     cx ;~ 01A2:387B
locret_1387d:
	// 4822 
cs=0x1a2;eip=0x00387d; 	J(RETN(0));	// 7228 retn ;~ 01A2:387D

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::kloc_13863: 	goto loc_13863;
        case m2c::kloc_1386c: 	goto loc_1386c;
        case m2c::klocret_1387d: 	goto locret_1387d;
        case m2c::ksub_13826: 	goto sub_13826;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group6(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group6:
    _begin:
_eff_13886:
	// 7254 
cs=0x1a2;eip=0x003886; 	T(XOR(ah, ah));	// 7256 xor     ah, ah ;~ 01A2:3886
cs=0x1a2;eip=0x003888; 	T(SHL(ax, 4));	// 7257 shl     ax, 4 ;~ 01A2:3888
loc_1388b:
	// 4823 
cs=0x1a2;eip=0x00388b; 	X(SUB(*(dw*)(raddr(ds,bx)), ax));	// 7260 sub     [bx], ax ;~ 01A2:388B
cs=0x1a2;eip=0x00388d; 	T(CMP(*(dw*)(raddr(ds,bx)), 0x0A0));	// 7261 cmp     word ptr [bx], 0A0h ; ' ' ;~ 01A2:388D
cs=0x1a2;eip=0x003891; 	J(JGE(loc_13897));	// 7262 jge     short loc_13897 ;~ 01A2:3891
cs=0x1a2;eip=0x003893; 	X(MOV(*(dw*)(raddr(ds,bx)), 0x0A0));	// 7263 mov     word ptr [bx], 0A0h ; ' ' ;~ 01A2:3893
loc_13897:
	// 4824 
cs=0x1a2;eip=0x003897; 	T(MOV(ax, *(dw*)(raddr(ds,bx))));	// 7266 mov     ax, [bx] ;~ 01A2:3897
cs=0x1a2;eip=0x003899; __disp=off_245ca;
	J(return __dispatch_call(__disp, _state););	// 7267 jmp     off_245CA ;~ 01A2:3899
_eff_13de5:
	// 8265 
cs=0x1a2;eip=0x003de5; 	J(CALL(sub_14087,0));	// 8267 call    sub_14087 ;~ 01A2:3DE5
cs=0x1a2;eip=0x003de8; 	T(OR(ax, ax));	// 8268 or      ax, ax ;~ 01A2:3DE8
cs=0x1a2;eip=0x003dea; 	J(JNZ(loc_1388b));	// 8269 jnz     loc_1388B ;~ 01A2:3DEA
cs=0x1a2;eip=0x003dee; 	J(RETN(0));	// 8270 retn ;~ 01A2:3DEE

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_13886: 	goto _eff_13886;
        case m2c::k_eff_13de5: 	goto _eff_13de5;
        case m2c::kloc_1388b: 	goto loc_1388b;
        case m2c::kloc_13897: 	goto loc_13897;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group7(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group7:
    _begin:
_eff_138a4:
	// 7284 
cs=0x1a2;eip=0x0038a4; 	T(XOR(ah, ah));	// 7286 xor     ah, ah ;~ 01A2:38A4
cs=0x1a2;eip=0x0038a6; 	T(SHL(ax, 4));	// 7287 shl     ax, 4 ;~ 01A2:38A6
loc_138a9:
	// 4825 
cs=0x1a2;eip=0x0038a9; 	X(ADD(*(dw*)(raddr(ds,bx)), ax));	// 7290 add     [bx], ax ;~ 01A2:38A9
cs=0x1a2;eip=0x0038ab; 	J(JC(loc_138b3));	// 7291 jb      short loc_138B3 ;~ 01A2:38AB
cs=0x1a2;eip=0x0038ad; 	T(CMP(*(dw*)(raddr(ds,bx)), 13696));	// 7292 cmp     word ptr [bx], 13696 ;~ 01A2:38AD
cs=0x1a2;eip=0x0038b1; 	J(JBE(loc_138b7));	// 7293 jbe     short loc_138B7 ;~ 01A2:38B1
loc_138b3:
	// 4826 
cs=0x1a2;eip=0x0038b3; 	X(MOV(*(dw*)(raddr(ds,bx)), 13696));	// 7296 mov     word ptr [bx], 13696 ;~ 01A2:38B3
loc_138b7:
	// 4827 
cs=0x1a2;eip=0x0038b7; 	T(MOV(ax, *(dw*)(raddr(ds,bx))));	// 7299 mov     ax, [bx] ;~ 01A2:38B7
cs=0x1a2;eip=0x0038b9; __disp=off_245ca;
	J(return __dispatch_call(__disp, _state););	// 7300 jmp     off_245CA ;~ 01A2:38B9
_eff_13def:
	// 8277 
cs=0x1a2;eip=0x003def; 	J(CALL(sub_14087,0));	// 8279 call    sub_14087 ;~ 01A2:3DEF
cs=0x1a2;eip=0x003df2; 	T(OR(ax, ax));	// 8280 or      ax, ax ;~ 01A2:3DF2
cs=0x1a2;eip=0x003df4; 	J(JNZ(loc_138a9));	// 8281 jnz     loc_138A9 ;~ 01A2:3DF4
cs=0x1a2;eip=0x003df8; 	J(RETN(0));	// 8282 retn ;~ 01A2:3DF8

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_138a4: 	goto _eff_138a4;
        case m2c::k_eff_13def: 	goto _eff_13def;
        case m2c::kloc_138a9: 	goto loc_138a9;
        case m2c::kloc_138b3: 	goto loc_138b3;
        case m2c::kloc_138b7: 	goto loc_138b7;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group8(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group8:
    _begin:
_eff_138d2:
	// 7323 
cs=0x1a2;eip=0x0038d2; 	T(OR(al, al));	// 7325 or      al, al ;~ 01A2:38D2
cs=0x1a2;eip=0x0038d4; 	J(JZ(loc_138de));	// 7326 jz      short loc_138DE ;~ 01A2:38D4
cs=0x1a2;eip=0x0038d6; 	T(XOR(ah, ah));	// 7327 xor     ah, ah ;~ 01A2:38D6
cs=0x1a2;eip=0x0038d8; 	T(SHL(ax, 4));	// 7328 shl     ax, 4 ;~ 01A2:38D8
cs=0x1a2;eip=0x0038db; 	X(MOV(*(dw*)(raddr(ds,bx+0x12)), ax));	// 7329 mov     [bx+12h], ax ;~ 01A2:38DB
loc_138de:
	// 4830 
cs=0x1a2;eip=0x0038de; 	T(MOV(ax, *(dw*)(raddr(ds,bx+0x10))));	// 7333 mov     ax, [bx+10h] ;~ 01A2:38DE
cs=0x1a2;eip=0x0038e1; 	T(OR(ax, ax));	// 7334 or      ax, ax ;~ 01A2:38E1
cs=0x1a2;eip=0x0038e3; 	J(JZ(locret_13cf4));	// 7335 jz      locret_13CF4 ;~ 01A2:38E3
cs=0x1a2;eip=0x0038e7; 	T(MOV(dx, *(dw*)(raddr(ds,bx+0x12))));	// 7336 mov     dx, [bx+12h] ;~ 01A2:38E7
cs=0x1a2;eip=0x0038ea; 	T(CMP(ax, *(dw*)(raddr(ds,bx))));	// 7337 cmp     ax, [bx] ;~ 01A2:38EA
cs=0x1a2;eip=0x0038ec; 	J(JC(loc_138f6));	// 7338 jb      short loc_138F6 ;~ 01A2:38EC
cs=0x1a2;eip=0x0038ee; 	X(ADD(*(dw*)(raddr(ds,bx)), dx));	// 7339 add     [bx], dx ;~ 01A2:38EE
cs=0x1a2;eip=0x0038f0; 	T(CMP(*(dw*)(raddr(ds,bx)), ax));	// 7340 cmp     [bx], ax ;~ 01A2:38F0
cs=0x1a2;eip=0x0038f2; 	J(JC(loc_1390b));	// 7341 jb      short loc_1390B ;~ 01A2:38F2
cs=0x1a2;eip=0x0038f4; 	J(JMP(loc_138fc));	// 7342 jmp     short loc_138FC ;~ 01A2:38F4
loc_138f6:
	// 4831 
cs=0x1a2;eip=0x0038f6; 	X(SUB(*(dw*)(raddr(ds,bx)), dx));	// 7346 sub     [bx], dx ;~ 01A2:38F6
cs=0x1a2;eip=0x0038f8; 	T(CMP(ax, *(dw*)(raddr(ds,bx))));	// 7347 cmp     ax, [bx] ;~ 01A2:38F8
cs=0x1a2;eip=0x0038fa; 	J(JL(loc_1390b));	// 7348 jl      short loc_1390B ;~ 01A2:38FA
loc_138fc:
	// 4832 
cs=0x1a2;eip=0x0038fc; 	X(MOV(*(dw*)(raddr(ds,bx)), ax));	// 7351 mov     [bx], ax ;~ 01A2:38FC
cs=0x1a2;eip=0x0038fe; 	X(MOV(*(dw*)(raddr(ds,bx+0x10)), 0));	// 7352 mov     word ptr [bx+10h], 0 ;~ 01A2:38FE
cs=0x1a2;eip=0x003903; 	X(AND(*(raddr(ds,bx+0x17)), 0x0EF));	// 7353 and     byte ptr [bx+17h], 0EFh ;~ 01A2:3903
cs=0x1a2;eip=0x003907; __disp=off_245ca;
	J(return __dispatch_call(__disp, _state););	// 7354 jmp     off_245CA ;~ 01A2:3907
loc_1390b:
	// 4833 
cs=0x1a2;eip=0x00390b; 	T(TEST(*(raddr(ds,bx+0x17)), 0x20));	// 7359 test    byte ptr [bx+17h], 20h ;~ 01A2:390B
cs=0x1a2;eip=0x00390f; 	J(JNZ(loc_13917));	// 7360 jnz     short loc_13917 ;~ 01A2:390F
cs=0x1a2;eip=0x003911; 	T(MOV(ax, *(dw*)(raddr(ds,bx))));	// 7361 mov     ax, [bx] ;~ 01A2:3911
cs=0x1a2;eip=0x003913; __disp=off_245ca;
	J(return __dispatch_call(__disp, _state););	// 7362 jmp     off_245CA ;~ 01A2:3913
loc_13917:
	// 4834 
cs=0x1a2;eip=0x003917; 	T(MOV(di, *(dw*)(raddr(ds,bx+0x38))));	// 7366 mov     di, [bx+38h] ;~ 01A2:3917
cs=0x1a2;eip=0x00391a; 	T(MOV(ax, *(dw*)(raddr(ds,bx))));	// 7367 mov     ax, [bx] ;~ 01A2:391A
cs=0x1a2;eip=0x00391c; 	T(MOV(cx, 0x3B));	// 7368 mov     cx, 3Bh ; ';' ;~ 01A2:391C
loc_1391f:
	// 4835 
cs=0x1a2;eip=0x00391f; 	T(CMP(*(dw*)(raddr(ds,di)), ax));	// 7371 cmp     [di], ax ;~ 01A2:391F
cs=0x1a2;eip=0x003921; 	J(JBE(loc_13929));	// 7372 jbe     short loc_13929 ;~ 01A2:3921
cs=0x1a2;eip=0x003923; 	T(ADD(di, 2));	// 7373 add     di, 2 ;~ 01A2:3923
cs=0x1a2;eip=0x003926; 	T(DEC(cx));	// 7374 dec     cx ;~ 01A2:3926
cs=0x1a2;eip=0x003927; 	J(JNZ(loc_1391f));	// 7375 jnz     short loc_1391F ;~ 01A2:3927
loc_13929:
	// 4836 
cs=0x1a2;eip=0x003929; 	T(MOV(ax, *(dw*)(raddr(ds,di))));	// 7378 mov     ax, [di] ;~ 01A2:3929
cs=0x1a2;eip=0x00392b; __disp=off_245ca;
	J(return __dispatch_call(__disp, _state););	// 7379 jmp     off_245CA ;~ 01A2:392B
_eff_13c02:
	// 7909 
cs=0x1a2;eip=0x003c02; 	T(CMP(byte_24668, 0));	// 7911 cmp     byte_24668, 0 ;~ 01A2:3C02
cs=0x1a2;eip=0x003c07; 	J(JNZ(locret_13cf4));	// 7912 jnz     locret_13CF4 ;~ 01A2:3C07
cs=0x1a2;eip=0x003c0b; 	T(OR(al, al));	// 7913 or      al, al ;~ 01A2:3C0B
cs=0x1a2;eip=0x003c0d; 	J(JZ(loc_13c2d));	// 7914 jz      short loc_13C2D ;~ 01A2:3C0D
cs=0x1a2;eip=0x003c0f; 	T(CMP(*(raddr(ds,bx+0x3C)), 0));	// 7915 cmp     byte ptr [bx+3Ch], 0 ;~ 01A2:3C0F
cs=0x1a2;eip=0x003c13; 	J(JNZ(loc_13c1a));	// 7916 jnz     short loc_13C1A ;~ 01A2:3C13
cs=0x1a2;eip=0x003c15; 	T(INC(al));	// 7917 inc     al ;~ 01A2:3C15
cs=0x1a2;eip=0x003c17; 	X(MOV(*(raddr(ds,bx+0x3C)), al));	// 7918 mov     [bx+3Ch], al ;~ 01A2:3C17
loc_13c1a:
	// 4880 
cs=0x1a2;eip=0x003c1a; 	X(DEC(*(raddr(ds,bx+0x3C))));	// 7921 dec     byte ptr [bx+3Ch] ;~ 01A2:3C1A
cs=0x1a2;eip=0x003c1d; 	J(JZ(locret_13cf4));	// 7922 jz      locret_13CF4 ;~ 01A2:3C1D
cs=0x1a2;eip=0x003c21; 	T(MOV(al, *(raddr(ds,bx+0x3B))));	// 7923 mov     al, [bx+3Bh] ;~ 01A2:3C21
cs=0x1a2;eip=0x003c24; 	X(MOV(byte_24669, al));	// 7924 mov     byte_24669, al ;~ 01A2:3C24
cs=0x1a2;eip=0x003c27; 	X(MOV(byte_2466b, 1));	// 7925 mov     byte_2466B, 1 ;~ 01A2:3C27
cs=0x1a2;eip=0x003c2c; 	J(RETN(0));	// 7926 retn ;~ 01A2:3C2C
loc_13c2d:
	// 4881 
cs=0x1a2;eip=0x003c2d; 	T(MOV(ax, word_245f6));	// 7930 mov     ax, word_245F6 ;~ 01A2:3C2D
cs=0x1a2;eip=0x003c30; 	X(MOV(*(raddr(ds,bx+0x3B)), al));	// 7931 mov     [bx+3Bh], al ;~ 01A2:3C30
cs=0x1a2;eip=0x003c33; 	J(RETN(0));	// 7932 retn ;~ 01A2:3C33
_eff_13c64:
	// 7974 
cs=0x1a2;eip=0x003c64; 	T(OR(al, al));	// 7976 or      al, al ;~ 01A2:3C64
cs=0x1a2;eip=0x003c66; 	J(JZ(locret_13cf4));	// 7977 jz      locret_13CF4 ;~ 01A2:3C66
cs=0x1a2;eip=0x003c6a; 	T(CMP(byte_24668, 0));	// 7978 cmp     byte_24668, 0 ;~ 01A2:3C6A
cs=0x1a2;eip=0x003c6f; 	J(JNZ(loc_13c77));	// 7979 jnz     short loc_13C77 ;~ 01A2:3C6F
cs=0x1a2;eip=0x003c71; 	T(TEST(*(raddr(ds,bx+0x3D)), 8));	// 7980 test    byte ptr [bx+3Dh], 8 ;~ 01A2:3C71
cs=0x1a2;eip=0x003c75; 	J(JNZ(locret_13cf4));	// 7981 jnz     short locret_13CF4 ;~ 01A2:3C75
loc_13c77:
	// 4883 
cs=0x1a2;eip=0x003c77; 	T(MOV(dl, al));	// 7984 mov     dl, al ;~ 01A2:3C77
cs=0x1a2;eip=0x003c79; 	T(MOVZX(ax, byte_24668));	// 7985 movzx   ax, byte_24668 ;~ 01A2:3C79
cs=0x1a2;eip=0x003c7e; 	T(DIV1(dl));	// 7986 div     dl ;~ 01A2:3C7E
cs=0x1a2;eip=0x003c80; 	T(OR(ah, ah));	// 7987 or      ah, ah ;~ 01A2:3C80
cs=0x1a2;eip=0x003c82; 	J(JNZ(locret_13cf4));	// 7988 jnz     short locret_13CF4 ;~ 01A2:3C82
cs=0x1a2;eip=0x003c84; __disp=off_245c8;
	J(return __dispatch_call(__disp, _state););	// 7989 jmp     off_245C8 ;~ 01A2:3C84
_eff_13ca2:
	// 8020 
cs=0x1a2;eip=0x003ca2; 	T(CMP(al, byte_24668));	// 8022 cmp     al, byte_24668 ;~ 01A2:3CA2
cs=0x1a2;eip=0x003ca6; 	J(JNZ(locret_13cf4));	// 8023 jnz     short locret_13CF4 ;~ 01A2:3CA6
cs=0x1a2;eip=0x003ca8; 	T(XOR(al, al));	// 8024 xor     al, al ;~ 01A2:3CA8
cs=0x1a2;eip=0x003caa; __disp=off_245cc;
	J(return __dispatch_call(__disp, _state););	// 8025 jmp     off_245CC ;~ 01A2:3CAA
_eff_13cb3:
	// 8039 
cs=0x1a2;eip=0x003cb3; 	T(CMP(al, byte_24668));	// 8041 cmp     al, byte_24668 ;~ 01A2:3CB3
cs=0x1a2;eip=0x003cb7; 	J(JNZ(locret_13cf4));	// 8042 jnz     short locret_13CF4 ;~ 01A2:3CB7
cs=0x1a2;eip=0x003cb9; 	T(CMP(*(dw*)(raddr(ds,bx)), 0));	// 8043 cmp     word ptr [bx], 0 ;~ 01A2:3CB9
cs=0x1a2;eip=0x003cbc; 	J(JZ(locret_13cf4));	// 8044 jz      short locret_13CF4 ;~ 01A2:3CBC
cs=0x1a2;eip=0x003cbe; 	X(MOV(*(raddr(ds,bx+0x0A)), 0));	// 8045 mov     byte ptr [bx+0Ah], 0 ;~ 01A2:3CBE
cs=0x1a2;eip=0x003cc2; 	X(MOV(*(raddr(ds,bx+0x0B)), 0));	// 8046 mov     byte ptr [bx+0Bh], 0 ;~ 01A2:3CC2
cs=0x1a2;eip=0x003cc6; 	J(return _group5(m2c::kloc_13791, _state););	// 8047 jmp     loc_13791 ;~ 01A2:3CC6
_eff_13cc9:
	// 8054 
cs=0x1a2;eip=0x003cc9; 	T(CMP(byte_24668, 0));	// 8056 cmp     byte_24668, 0 ;~ 01A2:3CC9
cs=0x1a2;eip=0x003cce; 	J(JNZ(locret_13cf4));	// 8057 jnz     short locret_13CF4 ;~ 01A2:3CCE
cs=0x1a2;eip=0x003cd0; 	T(CMP(byte_2466d, 0));	// 8058 cmp     byte_2466D, 0 ;~ 01A2:3CD0
cs=0x1a2;eip=0x003cd5; 	J(JNZ(locret_13cf4));	// 8059 jnz     short locret_13CF4 ;~ 01A2:3CD5
cs=0x1a2;eip=0x003cd7; 	T(INC(al));	// 8060 inc     al ;~ 01A2:3CD7
cs=0x1a2;eip=0x003cd9; 	X(MOV(byte_2466c, al));	// 8061 mov     byte_2466C, al ;~ 01A2:3CD9
cs=0x1a2;eip=0x003cdc; 	J(RETN(0));	// 8062 retn ;~ 01A2:3CDC
_eff_13cdd:
	// 8069 
cs=0x1a2;eip=0x003cdd; 	T(TEST(_flag_playsetttings, 2));	// 8071 test    _flag_playsetttings, 2 ;~ 01A2:3CDD
cs=0x1a2;eip=0x003ce2; 	J(JNZ(_eff_13ce8));	// 8072 jnz     short _eff_13CE8 ;~ 01A2:3CE2
cs=0x1a2;eip=0x003ce4; 	T(CMP(al, 0x20));	// 8073 cmp     al, 20h ; ' ' ;~ 01A2:3CE4
cs=0x1a2;eip=0x003ce6; 	J(JA(sub_13cf6));	// 8074 ja      short sub_13CF6 ;~ 01A2:3CE6
	S(JMP(_eff_13ce8));_eff_13ce8:
	// 8081 
cs=0x1a2;eip=0x003ce8; 	T(OR(al, al));	// 8083 or      al, al ;~ 01A2:3CE8
cs=0x1a2;eip=0x003cea; 	J(JZ(locret_13cf5));	// 8084 jz      short locret_13CF5 ;~ 01A2:3CEA
cs=0x1a2;eip=0x003cec; 	X(MOV(byte_24667, al));	// 8085 mov     byte_24667, al ;~ 01A2:3CEC
cs=0x1a2;eip=0x003cef; 	X(MOV(byte_24668, 0));	// 8086 mov     byte_24668, 0 ;~ 01A2:3CEF
locret_13cf4:
	// 4885 
cs=0x1a2;eip=0x003cf4; 	J(RETN(0));	// 8090 retn ;~ 01A2:3CF4
locret_13cf5:
	// 4886 
cs=0x1a2;eip=0x003cf5; 	J(RETN(0));	// 8094 retn ;~ 01A2:3CF5
sub_13cf6:
	// 8101 
cs=0x1a2;eip=0x003cf6; 	T(XOR(ah, ah));	// 8106 xor     ah, ah ;~ 01A2:3CF6
cs=0x1a2;eip=0x003cf8; 	X(MOV(byte_24666, al));	// 8107 mov     byte_24666, al ;~ 01A2:3CF8
cs=0x1a2;eip=0x003cfb; 	T(MOV(cx, ax));	// 8108 mov     cx, ax ;~ 01A2:3CFB
cs=0x1a2;eip=0x003cfd; 	T(MOV(dl, 91));	// 8109 mov     dl, 91 ;~ 01A2:3CFD
cs=0x1a2;eip=0x003cff; 	T(DIV1(dl));	// 8110 div     dl ;~ 01A2:3CFF
cs=0x1a2;eip=0x003d01; 	T(INC(al));	// 8111 inc     al ;~ 01A2:3D01
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x003d03; 	X(MOV(*(&byte_14f72), al));	// 8112 mov     cs:byte_14F72, al ;~ 01A2:3D03
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x003d07; 	X(MOV(*(&byte_14f73), al));	// 8113 mov     cs:byte_14F73, al ;~ 01A2:3D07
cs=0x1a2;eip=0x003d0b; 	T(TEST(_sndflags_24622, 4));	// 8114 test    _sndflags_24622, 4 ;~ 01A2:3D0B
cs=0x1a2;eip=0x003d10; 	J(JNZ(loc_13d4b));	// 8115 jnz     short loc_13D4B ;~ 01A2:3D10
cs=0x1a2;eip=0x003d12; 	T(TEST(_sndflags_24622, 0x10));	// 8116 test    _sndflags_24622, 10h ;~ 01A2:3D12
cs=0x1a2;eip=0x003d17; 	J(JNZ(loc_13db0));	// 8117 jnz     loc_13DB0 ;~ 01A2:3D17
cs=0x1a2;eip=0x003d1b; 	T(SHL(cx, 1));	// 8118 shl     cx, 1 ;~ 01A2:3D1B
cs=0x1a2;eip=0x003d1d; 	T(MOV(ax, 5));	// 8119 mov     ax, 5 ;~ 01A2:3D1D
cs=0x1a2;eip=0x003d20; 	X(MUL1_2(_freq1));	// 8120 mul     _freq1 ;~ 01A2:3D20
cs=0x1a2;eip=0x003d24; 	T(DIV2(cx));	// 8121 div     cx ;~ 01A2:3D24
cs=0x1a2;eip=0x003d26; 	T(XOR(dx, dx));	// 8122 xor     dx, dx ;~ 01A2:3D26
cs=0x1a2;eip=0x003d28; 	X(DIV2(word_245e8));	// 8123 div     word_245E8 ;~ 01A2:3D28
cs=0x1a2;eip=0x003d2c; 	T(INC(ax));	// 8124 inc     ax ;~ 01A2:3D2C
cs=0x1a2;eip=0x003d2d; 	T(OR(dx, dx));	// 8125 or      dx, dx ;~ 01A2:3D2D
cs=0x1a2;eip=0x003d2f; 	J(JNZ(loc_13d36));	// 8126 jnz     short loc_13D36 ;~ 01A2:3D2F
cs=0x1a2;eip=0x003d31; 	T(DEC(ax));	// 8127 dec     ax ;~ 01A2:3D31
cs=0x1a2;eip=0x003d32; 	T(MOV(dx, word_245e8));	// 8128 mov     dx, word_245E8 ;~ 01A2:3D32
loc_13d36:
	// 4887 
cs=0x1a2;eip=0x003d36; 	X(MOV(word_245ea, dx));	// 8131 mov     word_245EA, dx ;~ 01A2:3D36
cs=0x1a2;eip=0x003d3a; 	X(MOV(word_245ec, ax));	// 8132 mov     word_245EC, ax ;~ 01A2:3D3A
cs=0x1a2;eip=0x003d3d; 	X(MOV(word_245ee, ax));	// 8133 mov     word_245EE, ax ;~ 01A2:3D3D
cs=0x1a2;eip=0x003d40; 	T(MOV(ax, word_245e8));	// 8134 mov     ax, word_245E8 ;~ 01A2:3D40
cs=0x1a2;eip=0x003d43; 	X(MOV(word_245e4, ax));	// 8135 mov     word_245E4, ax ;~ 01A2:3D43
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x003d46; 	X(MOV(*(dw*)(((db*)&word_14f6c)), ax));	// 8136 mov     cs:word_14F6C, ax ;~ 01A2:3D46
cs=0x1a2;eip=0x003d4a; 	J(RETN(0));	// 8137 retn ;~ 01A2:3D4A
loc_13d4b:
	// 4888 
cs=0x1a2;eip=0x003d4b; 	J(CALL(sub_13d95,0));	// 8141 call    sub_13D95 ;~ 01A2:3D4B
cs=0x1a2;eip=0x003d4e; 	T(MOV(ah, al));	// 8142 mov     ah, al ;~ 01A2:3D4E
cs=0x1a2;eip=0x003d50; 	X(PUSHF);	// 8143 pushf ;~ 01A2:3D50
cs=0x1a2;eip=0x003d51; 	T(CLI);	// 8144 cli ;~ 01A2:3D51
cs=0x1a2;eip=0x003d52; 	T(MOV(dx, _gravis_port));	// 8145 mov     dx, _gravis_port ;~ 01A2:3D52
cs=0x1a2;eip=0x003d56; 	T(SUB(dx, 0x0FB));	// 8146 sub     dx, 0FBh ; 'û' ;~ 01A2:3D56
cs=0x1a2;eip=0x003d5a; 	T(MOV(al, 4));	// 8147 mov     al, 4 ;~ 01A2:3D5A
cs=0x1a2;eip=0x003d5c; 	S(OUT(dx, al));	// 8148 out     dx, al ;~ 01A2:3D5C
cs=0x1a2;eip=0x003d5d; 	T(INC(dx));	// 8149 inc     dx ;~ 01A2:3D5D
cs=0x1a2;eip=0x003d5e; 	T(MOV(al, 0x80));	// 8150 mov     al, 80h ; '€' ;~ 01A2:3D5E
cs=0x1a2;eip=0x003d60; 	S(OUT(dx, al));	// 8151 out     dx, al ;~ 01A2:3D60
cs=0x1a2;eip=0x003d61; 	T(XOR(al, al));	// 8152 xor     al, al ;~ 01A2:3D61
cs=0x1a2;eip=0x003d63; 	S(OUT(dx, al));	// 8153 out     dx, al ;~ 01A2:3D63
cs=0x1a2;eip=0x003d64; 	T(ADD(dx, 0x0FA));	// 8154 add     dx, 0FAh ; 'ú' ;~ 01A2:3D64
cs=0x1a2;eip=0x003d68; 	T(MOV(al, 0x46));	// 8155 mov     al, 46h ; 'F' ;~ 01A2:3D68
cs=0x1a2;eip=0x003d6a; 	S(OUT(dx, al));	// 8156 out     dx, al ;~ 01A2:3D6A
cs=0x1a2;eip=0x003d6b; 	T(ADD(dl, 2));	// 8157 add     dl, 2 ;~ 01A2:3D6B
cs=0x1a2;eip=0x003d6e; 	T(MOV(al, ah));	// 8158 mov     al, ah ;~ 01A2:3D6E
cs=0x1a2;eip=0x003d70; 	S(OUT(dx, al));	// 8159 out     dx, al ;~ 01A2:3D70
cs=0x1a2;eip=0x003d71; 	T(SUB(dl, 2));	// 8160 sub     dl, 2 ;~ 01A2:3D71
cs=0x1a2;eip=0x003d74; 	T(MOV(al, 0x45));	// 8161 mov     al, 45h ; 'E' ;~ 01A2:3D74
cs=0x1a2;eip=0x003d76; 	S(OUT(dx, al));	// 8162 out     dx, al ;~ 01A2:3D76
cs=0x1a2;eip=0x003d77; 	T(ADD(dl, 2));	// 8163 add     dl, 2 ;~ 01A2:3D77
cs=0x1a2;eip=0x003d7a; 	T(XOR(al, al));	// 8164 xor     al, al ;~ 01A2:3D7A
cs=0x1a2;eip=0x003d7c; 	S(OUT(dx, al));	// 8165 out     dx, al ;~ 01A2:3D7C
cs=0x1a2;eip=0x003d7d; 	T(MOV(al, 4));	// 8166 mov     al, 4 ;~ 01A2:3D7D
cs=0x1a2;eip=0x003d7f; 	S(OUT(dx, al));	// 8167 out     dx, al ;~ 01A2:3D7F
cs=0x1a2;eip=0x003d80; 	T(SUB(dx, 0x0FD));	// 8168 sub     dx, 0FDh ; 'ý' ;~ 01A2:3D80
cs=0x1a2;eip=0x003d84; 	T(MOV(al, 4));	// 8169 mov     al, 4 ;~ 01A2:3D84
cs=0x1a2;eip=0x003d86; 	S(OUT(dx, al));	// 8170 out     dx, al ;~ 01A2:3D86
cs=0x1a2;eip=0x003d87; 	T(INC(dx));	// 8171 inc     dx ;~ 01A2:3D87
cs=0x1a2;eip=0x003d88; 	T(MOV(al, 1));	// 8172 mov     al, 1 ;~ 01A2:3D88
cs=0x1a2;eip=0x003d8a; 	S(OUT(dx, al));	// 8173 out     dx, al ;~ 01A2:3D8A
cs=0x1a2;eip=0x003d8b; 	X(POPF);	// 8174 popf ;~ 01A2:3D8B
cs=0x1a2;eip=0x003d8c; 	J(RETN(0));	// 8175 retn ;~ 01A2:3D8C
seg000_3db0_proc:
	// 8211 
loc_13db0:
	// 4891 
cs=0x1a2;eip=0x003db0; 	T(XOR(ax, ax));	// 8212 xor     ax, ax ;~ 01A2:3DB0
cs=0x1a2;eip=0x003db2; 	T(CMP(cx, 45));	// 8213 cmp     cx, 45 ;~ 01A2:3DB2
cs=0x1a2;eip=0x003db5; 	J(JBE(_set_timer));	// 8214 jbe     short _set_timer ;~ 01A2:3DB5
cs=0x1a2;eip=0x003db7; 	T(MOV(dx, 0x2D));	// 8215 mov     dx, 2Dh ; '-' ;~ 01A2:3DB7
cs=0x1a2;eip=0x003dba; 	T(MOV(ax, 0x8426));	// 8216 mov     ax, 8426h ;~ 01A2:3DBA
cs=0x1a2;eip=0x003dbd; 	T(DIV2(cx));	// 8217 div     cx ;~ 01A2:3DBD
cs=0x1a2;eip=0x003dbf; 	J({;});	// 8218 jmp     short $+2 ;~ 01A2:3DBF
	S(JMP(_set_timer));_set_timer:
	// 8224 
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x003dc1; 	X(MOV(*(dw*)(((db*)&_timer_word_14f6e)), ax));	// 8226 mov     cs:_timer_word_14F6E, ax ;~ 01A2:3DC1
cs=0x1a2;eip=0x003dc5; 	X(PUSHF);	// 8227 pushf ;~ 01A2:3DC5
cs=0x1a2;eip=0x003dc6; 	T(CLI);	// 8228 cli ;~ 01A2:3DC6
cs=0x1a2;eip=0x003dc7; 	X(PUSH(ax));	// 8229 push    ax ;~ 01A2:3DC7
cs=0x1a2;eip=0x003dc8; 	T(MOV(al, 0x34));	// 8230 mov     al, 34h ; '4' ;~ 01A2:3DC8
cs=0x1a2;eip=0x003dca; 	S(OUT(0x43, al));	// 8231 out     43h, al         ; Timer 8253-5 (AT: 8254.2). ;~ 01A2:3DCA
cs=0x1a2;eip=0x003dcc; 	X(POP(ax));	// 8232 pop     ax ;~ 01A2:3DCC
cs=0x1a2;eip=0x003dcd; 	S(OUT(0x40, al));	// 8233 out     40h, al         ; Timer 8253-5 (AT: 8254.2). ;~ 01A2:3DCD
cs=0x1a2;eip=0x003dcf; 	T(MOV(al, ah));	// 8234 mov     al, ah ;~ 01A2:3DCF
cs=0x1a2;eip=0x003dd1; 	S(OUT(0x40, al));	// 8235 out     40h, al         ; Timer 8253-5 (AT: 8254.2). ;~ 01A2:3DD1
cs=0x1a2;eip=0x003dd3; 	X(POPF);	// 8236 popf ;~ 01A2:3DD3
cs=0x1a2;eip=0x003dd4; 	J(RETN(0));	// 8237 retn ;~ 01A2:3DD4
_eff_13f05:
	// 8476 
cs=0x1a2;eip=0x003f05; 	T(OR(al, al));	// 8478 or      al, al ;~ 01A2:3F05
cs=0x1a2;eip=0x003f07; 	J(JZ(loc_13f0c));	// 8479 jz      short loc_13F0C ;~ 01A2:3F07
cs=0x1a2;eip=0x003f09; 	X(MOV(*(raddr(ds,bx+0x34)), al));	// 8480 mov     [bx+34h], al ;~ 01A2:3F09
loc_13f0c:
	// 4902 
cs=0x1a2;eip=0x003f0c; 	T(MOV(al, *(raddr(ds,bx+0x34))));	// 8483 mov     al, [bx+34h] ;~ 01A2:3F0C
cs=0x1a2;eip=0x003f0f; 	T(MOV(dl, al));	// 8484 mov     dl, al ;~ 01A2:3F0F
cs=0x1a2;eip=0x003f11; 	T(SHR(dl, 4));	// 8485 shr     dl, 4 ;~ 01A2:3F11
cs=0x1a2;eip=0x003f14; 	T(AND(al, 0x0F));	// 8486 and     al, 0Fh ;~ 01A2:3F14
cs=0x1a2;eip=0x003f16; 	T(MOV(dh, al));	// 8487 mov     dh, al ;~ 01A2:3F16
cs=0x1a2;eip=0x003f18; 	T(AND(ax, 0x0F));	// 8488 and     ax, 0Fh ;~ 01A2:3F18
cs=0x1a2;eip=0x003f1b; 	T(ADD(al, dl));	// 8489 add     al, dl ;~ 01A2:3F1B
cs=0x1a2;eip=0x003f1d; 	J(JZ(locret_13cf4));	// 8490 jz      locret_13CF4 ;~ 01A2:3F1D
cs=0x1a2;eip=0x003f21; 	T(MOV(cl, al));	// 8491 mov     cl, al ;~ 01A2:3F21
cs=0x1a2;eip=0x003f23; 	T(MOVZX(ax, byte_24668));	// 8492 movzx   ax, byte_24668 ;~ 01A2:3F23
cs=0x1a2;eip=0x003f28; 	T(DIV1(cl));	// 8493 div     cl ;~ 01A2:3F28
cs=0x1a2;eip=0x003f2a; 	T(CMP(ah, dl));	// 8494 cmp     ah, dl ;~ 01A2:3F2A
cs=0x1a2;eip=0x003f2c; 	J(JC(loc_13f34));	// 8495 jb      short loc_13F34 ;~ 01A2:3F2C
cs=0x1a2;eip=0x003f2e; 	T(XOR(al, al));	// 8496 xor     al, al ;~ 01A2:3F2E
cs=0x1a2;eip=0x003f30; __disp=off_245cc;
	J(return __dispatch_call(__disp, _state););	// 8497 jmp     off_245CC ;~ 01A2:3F30
loc_13f34:
	// 4903 
cs=0x1a2;eip=0x003f34; 	T(MOV(al, *(raddr(ds,bx+8))));	// 8501 mov     al, [bx+8] ;~ 01A2:3F34
cs=0x1a2;eip=0x003f37; __disp=off_245cc;
	J(return __dispatch_call(__disp, _state););	// 8502 jmp     off_245CC ;~ 01A2:3F37
_eff_13fbe:
	// 8598 
cs=0x1a2;eip=0x003fbe; 	T(OR(al, al));	// 8600 or      al, al ;~ 01A2:3FBE
cs=0x1a2;eip=0x003fc0; 	J(JNZ(loc_13fce));	// 8601 jnz     short loc_13FCE ;~ 01A2:3FC0
cs=0x1a2;eip=0x003fc2; 	T(MOV(al, *(raddr(ds,bx+0x34))));	// 8602 mov     al, [bx+34h] ;~ 01A2:3FC2
cs=0x1a2;eip=0x003fc5; 	T(OR(al, al));	// 8603 or      al, al ;~ 01A2:3FC5
cs=0x1a2;eip=0x003fc7; 	J(JZ(locret_13cf4));	// 8604 jz      locret_13CF4 ;~ 01A2:3FC7
cs=0x1a2;eip=0x003fcb; 	X(MOV(*(raddr(ds,bx+0x0B)), al));	// 8605 mov     [bx+0Bh], al ;~ 01A2:3FCB
loc_13fce:
	// 4913 
cs=0x1a2;eip=0x003fce; 	X(MOV(*(raddr(ds,bx+0x34)), al));	// 8608 mov     [bx+34h], al ;~ 01A2:3FCE
cs=0x1a2;eip=0x003fd1; 	T(MOV(al, *(raddr(ds,bx+0x35))));	// 8609 mov     al, [bx+35h] ;~ 01A2:3FD1
cs=0x1a2;eip=0x003fd4; 	T(MOV(dl, al));	// 8610 mov     dl, al ;~ 01A2:3FD4
cs=0x1a2;eip=0x003fd6; 	T(AND(dl, 0x0F));	// 8611 and     dl, 0Fh ;~ 01A2:3FD6
cs=0x1a2;eip=0x003fd9; 	J(JZ(locret_13cf4));	// 8612 jz      locret_13CF4 ;~ 01A2:3FD9
cs=0x1a2;eip=0x003fdd; 	T(DEC(dl));	// 8613 dec     dl ;~ 01A2:3FDD
cs=0x1a2;eip=0x003fdf; 	T(SHR(al, 4));	// 8614 shr     al, 4 ;~ 01A2:3FDF
cs=0x1a2;eip=0x003fe2; 	T(MOV(ah, 0x0C));	// 8615 mov     ah, 0Ch ;~ 01A2:3FE2
cs=0x1a2;eip=0x003fe4; 	T(MUL1_1(ah));	// 8616 mul     ah ;~ 01A2:3FE4
cs=0x1a2;eip=0x003fe6; 	T(ADD(dl, al));	// 8617 add     dl, al ;~ 01A2:3FE6
cs=0x1a2;eip=0x003fe8; 	T(MOVZX(ax, byte_24668));	// 8618 movzx   ax, byte_24668 ;~ 01A2:3FE8
cs=0x1a2;eip=0x003fed; 	T(MOV(dh, 3));	// 8619 mov     dh, 3 ;~ 01A2:3FED
cs=0x1a2;eip=0x003fef; 	T(DIV1(dh));	// 8620 div     dh ;~ 01A2:3FEF
cs=0x1a2;eip=0x003ff1; 	T(OR(ah, ah));	// 8621 or      ah, ah ;~ 01A2:3FF1
cs=0x1a2;eip=0x003ff3; 	J(JZ(loc_1401a));	// 8622 jz      short loc_1401A ;~ 01A2:3FF3
cs=0x1a2;eip=0x003ff5; 	T(MOV(dh, *(raddr(ds,bx+0x0B))));	// 8623 mov     dh, [bx+0Bh] ;~ 01A2:3FF5
cs=0x1a2;eip=0x003ff8; 	T(CMP(ah, 2));	// 8624 cmp     ah, 2 ;~ 01A2:3FF8
cs=0x1a2;eip=0x003ffb; 	J(JZ(loc_14000));	// 8625 jz      short loc_14000 ;~ 01A2:3FFB
cs=0x1a2;eip=0x003ffd; 	T(SHR(dh, 4));	// 8626 shr     dh, 4 ;~ 01A2:3FFD
loc_14000:
	// 4914 
cs=0x1a2;eip=0x004000; 	T(AND(dh, 0x0F));	// 8629 and     dh, 0Fh ;~ 01A2:4000
cs=0x1a2;eip=0x004003; 	T(ADD(dl, dh));	// 8630 add     dl, dh ;~ 01A2:4003
cs=0x1a2;eip=0x004005; 	T(MOVZX(ax, dl));	// 8631 movzx   ax, dl ;~ 01A2:4005
cs=0x1a2;eip=0x004008; 	T(MOV(dh, 0x0C));	// 8632 mov     dh, 0Ch ;~ 01A2:4008
cs=0x1a2;eip=0x00400a; 	T(DIV1(dh));	// 8633 div     dh ;~ 01A2:400A
cs=0x1a2;eip=0x00400c; 	T(INC(ah));	// 8634 inc     ah ;~ 01A2:400C
cs=0x1a2;eip=0x00400e; 	T(SHL(al, 4));	// 8635 shl     al, 4 ;~ 01A2:400E
cs=0x1a2;eip=0x004011; 	T(OR(al, ah));	// 8636 or      al, ah ;~ 01A2:4011
cs=0x1a2;eip=0x004013; 	J(CALL(sub_13826,0));	// 8637 call    sub_13826 ;~ 01A2:4013
cs=0x1a2;eip=0x004016; __disp=off_245ca;
	J(return __dispatch_call(__disp, _state););	// 8638 jmp     off_245CA ;~ 01A2:4016
loc_1401a:
	// 4915 
cs=0x1a2;eip=0x00401a; 	T(MOV(ax, *(dw*)(raddr(ds,bx))));	// 8642 mov     ax, [bx] ;~ 01A2:401A
cs=0x1a2;eip=0x00401c; __disp=off_245ca;
	J(return __dispatch_call(__disp, _state););	// 8643 jmp     off_245CA ;~ 01A2:401C

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_138d2: 	goto _eff_138d2;
        case m2c::k_eff_13c02: 	goto _eff_13c02;
        case m2c::k_eff_13c64: 	goto _eff_13c64;
        case m2c::k_eff_13ca2: 	goto _eff_13ca2;
        case m2c::k_eff_13cb3: 	goto _eff_13cb3;
        case m2c::k_eff_13cc9: 	goto _eff_13cc9;
        case m2c::k_eff_13cdd: 	goto _eff_13cdd;
        case m2c::k_eff_13ce8: 	goto _eff_13ce8;
        case m2c::k_eff_13f05: 	goto _eff_13f05;
        case m2c::k_eff_13fbe: 	goto _eff_13fbe;
        case m2c::k_set_timer: 	goto _set_timer;
        case m2c::kloc_138de: 	goto loc_138de;
        case m2c::kloc_138f6: 	goto loc_138f6;
        case m2c::kloc_138fc: 	goto loc_138fc;
        case m2c::kloc_1390b: 	goto loc_1390b;
        case m2c::kloc_13917: 	goto loc_13917;
        case m2c::kloc_1391f: 	goto loc_1391f;
        case m2c::kloc_13929: 	goto loc_13929;
        case m2c::kloc_13c1a: 	goto loc_13c1a;
        case m2c::kloc_13c2d: 	goto loc_13c2d;
        case m2c::kloc_13c77: 	goto loc_13c77;
        case m2c::kloc_13d36: 	goto loc_13d36;
        case m2c::kloc_13d4b: 	goto loc_13d4b;
        case m2c::kloc_13f0c: 	goto loc_13f0c;
        case m2c::kloc_13f34: 	goto loc_13f34;
        case m2c::kloc_13fce: 	goto loc_13fce;
        case m2c::kloc_14000: 	goto loc_14000;
        case m2c::kloc_1401a: 	goto loc_1401a;
        case m2c::klocret_13cf4: 	goto locret_13cf4;
        case m2c::klocret_13cf5: 	goto locret_13cf5;
        case m2c::kseg000_3db0_proc: 	goto seg000_3db0_proc;
        case m2c::ksub_13cf6: 	goto sub_13cf6;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _eff_1392f(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _eff_1392f:
    _begin:
cs=0x1a2;eip=0x00392f; 	T(MOV(cl, 3));	// 7388 mov     cl, 3 ;~ 01A2:392F
loc_13931:
	// 4837 
cs=0x1a2;eip=0x003931; 	T(OR(al, al));	// 7391 or      al, al ;~ 01A2:3931
cs=0x1a2;eip=0x003933; 	J(JZ(loc_13950));	// 7392 jz      short loc_13950 ;~ 01A2:3933
cs=0x1a2;eip=0x003935; 	T(MOV(ch, al));	// 7393 mov     ch, al ;~ 01A2:3935
cs=0x1a2;eip=0x003937; 	T(MOV(dl, *(raddr(ds,bx+0x0C))));	// 7394 mov     dl, [bx+0Ch] ;~ 01A2:3937
cs=0x1a2;eip=0x00393a; 	T(AND(al, 0x0F));	// 7395 and     al, 0Fh ;~ 01A2:393A
cs=0x1a2;eip=0x00393c; 	J(JZ(loc_13943));	// 7396 jz      short loc_13943 ;~ 01A2:393C
cs=0x1a2;eip=0x00393e; 	T(AND(dl, 0x0F0));	// 7397 and     dl, 0F0h ;~ 01A2:393E
cs=0x1a2;eip=0x003941; 	T(OR(dl, al));	// 7398 or      dl, al ;~ 01A2:3941
loc_13943:
	// 4838 
cs=0x1a2;eip=0x003943; 	T(AND(ch, 0x0F0));	// 7401 and     ch, 0F0h ;~ 01A2:3943
cs=0x1a2;eip=0x003946; 	J(JZ(loc_1394d));	// 7402 jz      short loc_1394D ;~ 01A2:3946
cs=0x1a2;eip=0x003948; 	T(AND(dl, 0x0F));	// 7403 and     dl, 0Fh ;~ 01A2:3948
cs=0x1a2;eip=0x00394b; 	T(OR(dl, ch));	// 7404 or      dl, ch ;~ 01A2:394B
loc_1394d:
	// 4839 
cs=0x1a2;eip=0x00394d; 	X(MOV(*(raddr(ds,bx+0x0C)), dl));	// 7407 mov     [bx+0Ch], dl ;~ 01A2:394D
loc_13950:
	// 4840 
cs=0x1a2;eip=0x003950; 	T(MOV(al, *(raddr(ds,bx+0x0D))));	// 7411 mov     al, [bx+0Dh] ;~ 01A2:3950
cs=0x1a2;eip=0x003953; 	T(SHR(al, 2));	// 7412 shr     al, 2 ;~ 01A2:3953
cs=0x1a2;eip=0x003956; 	T(AND(ax, 0x1F));	// 7413 and     ax, 1Fh ;~ 01A2:3956
cs=0x1a2;eip=0x003959; 	T(MOV(dl, *(raddr(ds,bx+9))));	// 7414 mov     dl, [bx+9] ;~ 01A2:3959
cs=0x1a2;eip=0x00395c; 	T(AND(dl, 3));	// 7415 and     dl, 3 ;~ 01A2:395C
cs=0x1a2;eip=0x00395f; 	J(JZ(loc_1397b));	// 7416 jz      short loc_1397B ;~ 01A2:395F
cs=0x1a2;eip=0x003961; 	T(SHL(al, 3));	// 7417 shl     al, 3 ;~ 01A2:3961
cs=0x1a2;eip=0x003964; 	T(CMP(dl, 1));	// 7418 cmp     dl, 1 ;~ 01A2:3964
cs=0x1a2;eip=0x003967; 	J(JZ(loc_1396d));	// 7419 jz      short loc_1396D ;~ 01A2:3967
cs=0x1a2;eip=0x003969; 	T(MOV(dl, 0x0FF));	// 7420 mov     dl, 0FFh ;~ 01A2:3969
cs=0x1a2;eip=0x00396b; 	J(JMP(loc_13981));	// 7421 jmp     short loc_13981 ;~ 01A2:396B
loc_1396d:
	// 4841 
cs=0x1a2;eip=0x00396d; 	T(MOV(dl, al));	// 7425 mov     dl, al ;~ 01A2:396D
cs=0x1a2;eip=0x00396f; 	T(TEST(*(raddr(ds,bx+0x0D)), 0x80));	// 7426 test    byte ptr [bx+0Dh], 80h ;~ 01A2:396F
cs=0x1a2;eip=0x003973; 	J(JZ(loc_13981));	// 7427 jz      short loc_13981 ;~ 01A2:3973
cs=0x1a2;eip=0x003975; 	T(MOV(dl, 0x0FF));	// 7428 mov     dl, 0FFh ;~ 01A2:3975
cs=0x1a2;eip=0x003977; 	T(SUB(dl, al));	// 7429 sub     dl, al ;~ 01A2:3977
cs=0x1a2;eip=0x003979; 	J(JMP(loc_13981));	// 7430 jmp     short loc_13981 ;~ 01A2:3979
loc_1397b:
	// 4842 
cs=0x1a2;eip=0x00397b; 	T(MOV(di, ax));	// 7434 mov     di, ax ;~ 01A2:397B
cs=0x1a2;eip=0x00397d; 	T(MOV(dl, *((_table_251c0)+di)));	// 7435 mov     dl, _table_251C0[di] ;~ 01A2:397D
loc_13981:
	// 4843 
cs=0x1a2;eip=0x003981; 	T(MOV(al, *(raddr(ds,bx+0x0C))));	// 7439 mov     al, [bx+0Ch] ;~ 01A2:3981
cs=0x1a2;eip=0x003984; 	T(MOV(dh, al));	// 7440 mov     dh, al ;~ 01A2:3984
cs=0x1a2;eip=0x003986; 	T(AND(al, 0x0F));	// 7441 and     al, 0Fh ;~ 01A2:3986
cs=0x1a2;eip=0x003988; 	T(MUL1_1(dl));	// 7442 mul     dl ;~ 01A2:3988
cs=0x1a2;eip=0x00398a; 	T(MOV(ch, _flag_playsetttings));	// 7443 mov     ch, _flag_playsetttings ;~ 01A2:398A
cs=0x1a2;eip=0x00398e; 	T(AND(ch, 1));	// 7444 and     ch, 1 ;~ 01A2:398E
cs=0x1a2;eip=0x003991; 	T(ADD(cl, ch));	// 7445 add     cl, ch ;~ 01A2:3991
cs=0x1a2;eip=0x003993; 	T(SHR(ax, cl));	// 7446 shr     ax, cl ;~ 01A2:3993
cs=0x1a2;eip=0x003995; 	T(TEST(*(raddr(ds,bx+0x0D)), 0x80));	// 7447 test    byte ptr [bx+0Dh], 80h ;~ 01A2:3995
cs=0x1a2;eip=0x003999; 	J(JZ(loc_1399d));	// 7448 jz      short loc_1399D ;~ 01A2:3999
cs=0x1a2;eip=0x00399b; 	T(NEG(ax));	// 7449 neg     ax ;~ 01A2:399B
loc_1399d:
	// 4844 
cs=0x1a2;eip=0x00399d; 	T(ADD(ax, *(dw*)(raddr(ds,bx))));	// 7452 add     ax, [bx] ;~ 01A2:399D
cs=0x1a2;eip=0x00399f; 	T(SHR(dh, 2));	// 7453 shr     dh, 2 ;~ 01A2:399F
cs=0x1a2;eip=0x0039a2; 	T(AND(dh, 0x3C));	// 7454 and     dh, 3Ch ;~ 01A2:39A2
cs=0x1a2;eip=0x0039a5; 	X(ADD(*(raddr(ds,bx+0x0D)), dh));	// 7455 add     [bx+0Dh], dh ;~ 01A2:39A5
cs=0x1a2;eip=0x0039a8; __disp=off_245ca;
	J(return __dispatch_call(__disp, _state););	// 7456 jmp     off_245CA ;~ 01A2:39A8

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_1392f: 	goto _eff_1392f;
        case m2c::kloc_13931: 	goto loc_13931;
        case m2c::kloc_13943: 	goto loc_13943;
        case m2c::kloc_1394d: 	goto loc_1394d;
        case m2c::kloc_13950: 	goto loc_13950;
        case m2c::kloc_1396d: 	goto loc_1396d;
        case m2c::kloc_1397b: 	goto loc_1397b;
        case m2c::kloc_13981: 	goto loc_13981;
        case m2c::kloc_1399d: 	goto loc_1399d;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _eff_139ac(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _eff_139ac:
    _begin:
cs=0x1a2;eip=0x0039ac; 	J(CALL(_eff_13ad7,0));	// 7465 call    _eff_13AD7 ;~ 01A2:39AC
cs=0x1a2;eip=0x0039af; 	J(return _group8(m2c::kloc_138de, _state););	// 7466 jmp     loc_138DE ;~ 01A2:39AF

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_139ac: 	goto _eff_139ac;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _eff_139b2(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _eff_139b2:
    _begin:
cs=0x1a2;eip=0x0039b2; 	J(CALL(_eff_13ad7,0));	// 7475 call    _eff_13AD7 ;~ 01A2:39B2
cs=0x1a2;eip=0x0039b5; 	T(MOV(cl, 3));	// 7476 mov     cl, 3 ;~ 01A2:39B5
cs=0x1a2;eip=0x0039b7; 	J(return _eff_1392f(m2c::kloc_13950, _state););	// 7477 jmp     short loc_13950 ;~ 01A2:39B7

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_139b2: 	goto _eff_139b2;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _eff_139b9(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _eff_139b9:
    _begin:
cs=0x1a2;eip=0x0039b9; 	T(OR(al, al));	// 7486 or      al, al ;~ 01A2:39B9
cs=0x1a2;eip=0x0039bb; 	J(JZ(loc_139d8));	// 7487 jz      short loc_139D8 ;~ 01A2:39BB
cs=0x1a2;eip=0x0039bd; 	T(MOV(cl, al));	// 7488 mov     cl, al ;~ 01A2:39BD
cs=0x1a2;eip=0x0039bf; 	T(MOV(dl, *(raddr(ds,bx+0x0E))));	// 7489 mov     dl, [bx+0Eh] ;~ 01A2:39BF
cs=0x1a2;eip=0x0039c2; 	T(AND(al, 0x0F));	// 7490 and     al, 0Fh ;~ 01A2:39C2
cs=0x1a2;eip=0x0039c4; 	J(JZ(loc_139cb));	// 7491 jz      short loc_139CB ;~ 01A2:39C4
cs=0x1a2;eip=0x0039c6; 	T(AND(dl, 0x0F0));	// 7492 and     dl, 0F0h ;~ 01A2:39C6
cs=0x1a2;eip=0x0039c9; 	T(OR(dl, al));	// 7493 or      dl, al ;~ 01A2:39C9
loc_139cb:
	// 4845 
cs=0x1a2;eip=0x0039cb; 	T(AND(cl, 0x0F0));	// 7496 and     cl, 0F0h ;~ 01A2:39CB
cs=0x1a2;eip=0x0039ce; 	J(JZ(loc_139d5));	// 7497 jz      short loc_139D5 ;~ 01A2:39CE
cs=0x1a2;eip=0x0039d0; 	T(AND(dl, 0x0F));	// 7498 and     dl, 0Fh ;~ 01A2:39D0
cs=0x1a2;eip=0x0039d3; 	T(OR(dl, cl));	// 7499 or      dl, cl ;~ 01A2:39D3
loc_139d5:
	// 4846 
cs=0x1a2;eip=0x0039d5; 	X(MOV(*(raddr(ds,bx+0x0E)), dl));	// 7502 mov     [bx+0Eh], dl ;~ 01A2:39D5
loc_139d8:
	// 4847 
cs=0x1a2;eip=0x0039d8; 	T(MOV(al, *(raddr(ds,bx+0x0F))));	// 7505 mov     al, [bx+0Fh] ;~ 01A2:39D8
cs=0x1a2;eip=0x0039db; 	T(SHR(al, 2));	// 7506 shr     al, 2 ;~ 01A2:39DB
cs=0x1a2;eip=0x0039de; 	T(AND(ax, 0x1F));	// 7507 and     ax, 1Fh ;~ 01A2:39DE
cs=0x1a2;eip=0x0039e1; 	T(MOV(dl, *(raddr(ds,bx+9))));	// 7508 mov     dl, [bx+9] ;~ 01A2:39E1
cs=0x1a2;eip=0x0039e4; 	T(SHR(dl, 4));	// 7509 shr     dl, 4 ;~ 01A2:39E4
cs=0x1a2;eip=0x0039e7; 	T(AND(dl, 3));	// 7510 and     dl, 3 ;~ 01A2:39E7
cs=0x1a2;eip=0x0039ea; 	J(JZ(loc_13a06));	// 7511 jz      short loc_13A06 ;~ 01A2:39EA
cs=0x1a2;eip=0x0039ec; 	T(SHL(al, 3));	// 7512 shl     al, 3 ;~ 01A2:39EC
cs=0x1a2;eip=0x0039ef; 	T(CMP(dl, 1));	// 7513 cmp     dl, 1 ;~ 01A2:39EF
cs=0x1a2;eip=0x0039f2; 	J(JZ(loc_139f8));	// 7514 jz      short loc_139F8 ;~ 01A2:39F2
cs=0x1a2;eip=0x0039f4; 	T(MOV(dl, 0x0FF));	// 7515 mov     dl, 0FFh ;~ 01A2:39F4
cs=0x1a2;eip=0x0039f6; 	J(JMP(loc_13a0c));	// 7516 jmp     short loc_13A0C ;~ 01A2:39F6
loc_139f8:
	// 4848 
cs=0x1a2;eip=0x0039f8; 	T(MOV(dl, al));	// 7520 mov     dl, al ;~ 01A2:39F8
cs=0x1a2;eip=0x0039fa; 	T(TEST(*(raddr(ds,bx+0x0F)), 0x80));	// 7521 test    byte ptr [bx+0Fh], 80h ;~ 01A2:39FA
cs=0x1a2;eip=0x0039fe; 	J(JZ(loc_13a0c));	// 7522 jz      short loc_13A0C ;~ 01A2:39FE
cs=0x1a2;eip=0x003a00; 	T(MOV(dl, 0x0FF));	// 7523 mov     dl, 0FFh ;~ 01A2:3A00
cs=0x1a2;eip=0x003a02; 	T(SUB(dl, al));	// 7524 sub     dl, al ;~ 01A2:3A02
cs=0x1a2;eip=0x003a04; 	J(JMP(loc_13a0c));	// 7525 jmp     short loc_13A0C ;~ 01A2:3A04
loc_13a06:
	// 4849 
cs=0x1a2;eip=0x003a06; 	T(MOV(di, ax));	// 7529 mov     di, ax ;~ 01A2:3A06
cs=0x1a2;eip=0x003a08; 	T(MOV(dl, *((_table_251c0)+di)));	// 7530 mov     dl, _table_251C0[di] ;~ 01A2:3A08
loc_13a0c:
	// 4850 
cs=0x1a2;eip=0x003a0c; 	T(MOV(al, *(raddr(ds,bx+0x0E))));	// 7534 mov     al, [bx+0Eh] ;~ 01A2:3A0C
cs=0x1a2;eip=0x003a0f; 	T(MOV(dh, al));	// 7535 mov     dh, al ;~ 01A2:3A0F
cs=0x1a2;eip=0x003a11; 	T(AND(al, 0x0F));	// 7536 and     al, 0Fh ;~ 01A2:3A11
cs=0x1a2;eip=0x003a13; 	T(MUL1_1(dl));	// 7537 mul     dl ;~ 01A2:3A13
cs=0x1a2;eip=0x003a15; 	T(SHR(ax, 6));	// 7538 shr     ax, 6 ;~ 01A2:3A15
cs=0x1a2;eip=0x003a18; 	T(MOV(ah, al));	// 7539 mov     ah, al ;~ 01A2:3A18
cs=0x1a2;eip=0x003a1a; 	T(MOV(al, *(raddr(ds,bx+8))));	// 7540 mov     al, [bx+8] ;~ 01A2:3A1A
cs=0x1a2;eip=0x003a1d; 	T(TEST(*(raddr(ds,bx+0x0F)), 0x80));	// 7541 test    byte ptr [bx+0Fh], 80h ;~ 01A2:3A1D
cs=0x1a2;eip=0x003a21; 	J(JNZ(loc_13a30));	// 7542 jnz     short loc_13A30 ;~ 01A2:3A21
cs=0x1a2;eip=0x003a23; 	T(ADD(al, ah));	// 7543 add     al, ah ;~ 01A2:3A23
cs=0x1a2;eip=0x003a25; 	T(CMP(al, byte_2467d));	// 7544 cmp     al, byte_2467D ;~ 01A2:3A25
cs=0x1a2;eip=0x003a29; 	J(JBE(loc_13a36));	// 7545 jbe     short loc_13A36 ;~ 01A2:3A29
cs=0x1a2;eip=0x003a2b; 	T(MOV(al, byte_2467d));	// 7546 mov     al, byte_2467D ;~ 01A2:3A2B
cs=0x1a2;eip=0x003a2e; 	J(JMP(loc_13a36));	// 7547 jmp     short loc_13A36 ;~ 01A2:3A2E
loc_13a30:
	// 4851 
cs=0x1a2;eip=0x003a30; 	T(SUB(al, ah));	// 7551 sub     al, ah ;~ 01A2:3A30
cs=0x1a2;eip=0x003a32; 	J(JNS(loc_13a36));	// 7552 jns     short loc_13A36 ;~ 01A2:3A32
cs=0x1a2;eip=0x003a34; 	T(XOR(al, al));	// 7553 xor     al, al ;~ 01A2:3A34
loc_13a36:
	// 4852 
cs=0x1a2;eip=0x003a36; 	T(SHR(dh, 2));	// 7557 shr     dh, 2 ;~ 01A2:3A36
cs=0x1a2;eip=0x003a39; 	T(AND(dh, 0x3C));	// 7558 and     dh, 3Ch ;~ 01A2:3A39
cs=0x1a2;eip=0x003a3c; 	X(ADD(*(raddr(ds,bx+0x0F)), dh));	// 7559 add     [bx+0Fh], dh ;~ 01A2:3A3C
cs=0x1a2;eip=0x003a3f; __disp=off_245cc;
	J(return __dispatch_call(__disp, _state););	// 7560 jmp     off_245CC ;~ 01A2:3A3F

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_139b9: 	goto _eff_139b9;
        case m2c::kloc_139cb: 	goto loc_139cb;
        case m2c::kloc_139d5: 	goto loc_139d5;
        case m2c::kloc_139d8: 	goto loc_139d8;
        case m2c::kloc_139f8: 	goto loc_139f8;
        case m2c::kloc_13a06: 	goto loc_13a06;
        case m2c::kloc_13a0c: 	goto loc_13a0c;
        case m2c::kloc_13a30: 	goto loc_13a30;
        case m2c::kloc_13a36: 	goto loc_13a36;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group9(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group9:
    _begin:
_eff_13a43:
	// 7567 
cs=0x1a2;eip=0x003a43; 	T(CMP(al, 0x0A4));	// 7569 cmp     al, 0A4h ; '¤' ;~ 01A2:3A43
cs=0x1a2;eip=0x003a45; 	J(JZ(loc_13a5b));	// 7570 jz      short loc_13A5B ;~ 01A2:3A45
cs=0x1a2;eip=0x003a47; 	T(CMP(al, 0x0A5));	// 7571 cmp     al, 0A5h ; '¥' ;~ 01A2:3A47
cs=0x1a2;eip=0x003a49; 	J(JZ(loc_13a60));	// 7572 jz      short loc_13A60 ;~ 01A2:3A49
cs=0x1a2;eip=0x003a4b; 	T(CMP(al, 0x0A6));	// 7573 cmp     al, 0A6h ; '¦' ;~ 01A2:3A4B
cs=0x1a2;eip=0x003a4d; 	J(JZ(loc_13a65));	// 7574 jz      short loc_13A65 ;~ 01A2:3A4D
cs=0x1a2;eip=0x003a4f; 	T(CMP(al, 0x80));	// 7575 cmp     al, 80h ; '€' ;~ 01A2:3A4F
cs=0x1a2;eip=0x003a51; 	J(JA(locret_13a5a));	// 7576 ja      short locret_13A5A ;~ 01A2:3A51
cs=0x1a2;eip=0x003a53; 	T(TEST(_sndflags_24622, 4));	// 7577 test    _sndflags_24622, 4 ;~ 01A2:3A53
cs=0x1a2;eip=0x003a58; 	J(JNZ(_gravis_13a6a));	// 7578 jnz     short _gravis_13A6A ;~ 01A2:3A58
locret_13a5a:
	// 4853 
cs=0x1a2;eip=0x003a5a; 	J(RETN(0));	// 7581 retn ;~ 01A2:3A5A
loc_13a5b:
	// 4854 
cs=0x1a2;eip=0x003a5b; 	X(OR(*(raddr(ds,bx+0x17)), 0x80));	// 7585 or      byte ptr [bx+17h], 80h ;~ 01A2:3A5B
cs=0x1a2;eip=0x003a5f; 	J(RETN(0));	// 7586 retn ;~ 01A2:3A5F
loc_13a60:
	// 4855 
cs=0x1a2;eip=0x003a60; 	X(AND(*(raddr(ds,bx+0x17)), 0x7F));	// 7590 and     byte ptr [bx+17h], 7Fh ;~ 01A2:3A60
cs=0x1a2;eip=0x003a64; 	J(RETN(0));	// 7591 retn ;~ 01A2:3A64
loc_13a65:
	// 4856 
cs=0x1a2;eip=0x003a65; 	X(XOR(*(raddr(ds,bx+0x17)), 0x80));	// 7595 xor     byte ptr [bx+17h], 80h ;~ 01A2:3A65
cs=0x1a2;eip=0x003a69; 	J(RETN(0));	// 7596 retn ;~ 01A2:3A69
_gravis_13a6a:
	// 7603 
cs=0x1a2;eip=0x003a6a; 	X(MOV(*(raddr(ds,bx+0x3A)), al));	// 7605 mov     [bx+3Ah], al ;~ 01A2:3A6A
cs=0x1a2;eip=0x003a6d; 	T(OR(al, al));	// 7606 or      al, al ;~ 01A2:3A6D
cs=0x1a2;eip=0x003a6f; 	J(JZ(loc_13a78));	// 7607 jz      short loc_13A78 ;~ 01A2:3A6F
cs=0x1a2;eip=0x003a71; 	T(DEC(al));	// 7608 dec     al ;~ 01A2:3A71
cs=0x1a2;eip=0x003a73; 	T(SHR(al, 3));	// 7609 shr     al, 3 ;~ 01A2:3A73
cs=0x1a2;eip=0x003a76; 	T(AND(al, 0x0F));	// 7610 and     al, 0Fh ;~ 01A2:3A76
loc_13a78:
	// 4857 
cs=0x1a2;eip=0x003a78; 	T(MOV(ah, al));	// 7613 mov     ah, al ;~ 01A2:3A78
cs=0x1a2;eip=0x003a7a; 	T(MOV(dx, _gravis_port));	// 7614 mov     dx, _gravis_port ;~ 01A2:3A7A
cs=0x1a2;eip=0x003a7e; 	T(DEC(dx));	// 7615 dec     dx ;~ 01A2:3A7E
cs=0x1a2;eip=0x003a7f; 	T(MOV(al, *(raddr(ds,bx+0x18))));	// 7616 mov     al, [bx+18h] ;~ 01A2:3A7F
cs=0x1a2;eip=0x003a82; 	X(PUSHF);	// 7617 pushf ;~ 01A2:3A82
cs=0x1a2;eip=0x003a83; 	T(CLI);	// 7618 cli ;~ 01A2:3A83
cs=0x1a2;eip=0x003a84; 	S(OUT(dx, al));	// 7619 out     dx, al ;~ 01A2:3A84
cs=0x1a2;eip=0x003a85; 	T(INC(dx));	// 7620 inc     dx ;~ 01A2:3A85
cs=0x1a2;eip=0x003a86; 	T(MOV(al, 0x0C));	// 7621 mov     al, 0Ch ;~ 01A2:3A86
cs=0x1a2;eip=0x003a88; 	S(OUT(dx, al));	// 7622 out     dx, al ;~ 01A2:3A88
cs=0x1a2;eip=0x003a89; 	T(ADD(dl, 2));	// 7623 add     dl, 2 ;~ 01A2:3A89
cs=0x1a2;eip=0x003a8c; 	T(MOV(al, ah));	// 7624 mov     al, ah ;~ 01A2:3A8C
cs=0x1a2;eip=0x003a8e; 	S(OUT(dx, al));	// 7625 out     dx, al ;~ 01A2:3A8E
cs=0x1a2;eip=0x003a8f; 	T(SUB(dl, 2));	// 7626 sub     dl, 2 ;~ 01A2:3A8F
cs=0x1a2;eip=0x003a92; 	X(POPF);	// 7627 popf ;~ 01A2:3A92
cs=0x1a2;eip=0x003a93; 	J(RETN(0));	// 7628 retn ;~ 01A2:3A93

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_13a43: 	goto _eff_13a43;
        case m2c::k_gravis_13a6a: 	goto _gravis_13a6a;
        case m2c::kloc_13a5b: 	goto loc_13a5b;
        case m2c::kloc_13a60: 	goto loc_13a60;
        case m2c::kloc_13a65: 	goto loc_13a65;
        case m2c::kloc_13a78: 	goto loc_13a78;
        case m2c::klocret_13a5a: 	goto locret_13a5a;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _eff_13a94(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _eff_13a94:
    _begin:
cs=0x1a2;eip=0x003a94; 	T(OR(al, al));	// 7637 or      al, al ;~ 01A2:3A94
cs=0x1a2;eip=0x003a96; 	J(JZ(loc_13a9b));	// 7638 jz      short loc_13A9B ;~ 01A2:3A96
cs=0x1a2;eip=0x003a98; 	X(MOV(*(raddr(ds,bx+0x16)), al));	// 7639 mov     [bx+16h], al ;~ 01A2:3A98
loc_13a9b:
	// 4858 
cs=0x1a2;eip=0x003a9b; 	T(MOVZX(eax, *(raddr(ds,bx+0x16))));	// 7642 movzx   eax, byte ptr [bx+16h] ;~ 01A2:3A9B
cs=0x1a2;eip=0x003aa0; 	T(SHL(eax, 8));	// 7643 shl     eax, 8 ;~ 01A2:3AA0
cs=0x1a2;eip=0x003aa4; 	T(CMP(eax, *(dd*)(raddr(ds,bx+0x30))));	// 7644 cmp     eax, [bx+30h] ;~ 01A2:3AA4
cs=0x1a2;eip=0x003aa8; 	J(JA(loc_13aae));	// 7645 ja      short loc_13AAE ;~ 01A2:3AA8
cs=0x1a2;eip=0x003aaa; 	X(MOV(*(dw*)(raddr(ds,bx+0x4C)), ax));	// 7646 mov     [bx+4Ch], ax ;~ 01A2:3AAA
cs=0x1a2;eip=0x003aad; 	J(RETN(0));	// 7647 retn ;~ 01A2:3AAD
loc_13aae:
	// 4859 
cs=0x1a2;eip=0x003aae; 	T(CMP(byte_2461a, 0));	// 7651 cmp     byte_2461A, 0 ;~ 01A2:3AAE
cs=0x1a2;eip=0x003ab3; 	J(JNZ(loc_13ac6));	// 7652 jnz     short loc_13AC6 ;~ 01A2:3AB3
cs=0x1a2;eip=0x003ab5; 	J(CALL(__dispatch_call,off_245ce));	// 7653 call    off_245CE ;~ 01A2:3AB5
cs=0x1a2;eip=0x003ab9; 	X(AND(*(raddr(ds,bx+0x17)), 0x0FB));	// 7654 and     byte ptr [bx+17h], 0FBh ;~ 01A2:3AB9
cs=0x1a2;eip=0x003abd; 	X(OR(*(raddr(ds,bx+0x17)), 0x40));	// 7655 or      byte ptr [bx+17h], 40h ;~ 01A2:3ABD
cs=0x1a2;eip=0x003ac1; 	X(MOV(*(raddr(ds,bx+3)), 0));	// 7656 mov     byte ptr [bx+3], 0 ;~ 01A2:3AC1
cs=0x1a2;eip=0x003ac5; 	J(RETN(0));	// 7657 retn ;~ 01A2:3AC5
loc_13ac6:
	// 4860 
cs=0x1a2;eip=0x003ac6; 	T(MOV(eax, *(dd*)(raddr(ds,bx+0x30))));	// 7661 mov     eax, [bx+30h] ;~ 01A2:3AC6
cs=0x1a2;eip=0x003aca; 	X(MOV(*(dw*)(raddr(ds,bx+0x4C)), ax));	// 7662 mov     [bx+4Ch], ax ;~ 01A2:3ACA
cs=0x1a2;eip=0x003acd; 	J(RETN(0));	// 7663 retn ;~ 01A2:3ACD

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_13a94: 	goto _eff_13a94;
        case m2c::kloc_13a9b: 	goto loc_13a9b;
        case m2c::kloc_13aae: 	goto loc_13aae;
        case m2c::kloc_13ac6: 	goto loc_13ac6;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group10(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group10:
    _begin:
_eff_13ad7:
	// 7678 
cs=0x1a2;eip=0x003ad7; 	T(MOV(dl, *(raddr(ds,bx+8))));	// 7680 mov     dl, [bx+8] ;~ 01A2:3AD7
cs=0x1a2;eip=0x003ada; 	T(TEST(al, 0x0F0));	// 7681 test    al, 0F0h ;~ 01A2:3ADA
cs=0x1a2;eip=0x003adc; 	J(JNZ(loc_13aef));	// 7682 jnz     short loc_13AEF ;~ 01A2:3ADC
loc_13ade:
	// 4862 
cs=0x1a2;eip=0x003ade; 	T(AND(al, 0x0F));	// 7686 and     al, 0Fh ;~ 01A2:3ADE
loc_13ae0:
	// 4863 
cs=0x1a2;eip=0x003ae0; 	T(SUB(dl, al));	// 7689 sub     dl, al ;~ 01A2:3AE0
cs=0x1a2;eip=0x003ae2; 	T(MOV(al, dl));	// 7690 mov     al, dl ;~ 01A2:3AE2
cs=0x1a2;eip=0x003ae4; 	J(JNC(loc_13ae8));	// 7691 jnb     short loc_13AE8 ;~ 01A2:3AE4
cs=0x1a2;eip=0x003ae6; 	T(XOR(al, al));	// 7692 xor     al, al ;~ 01A2:3AE6
loc_13ae8:
	// 4864 
cs=0x1a2;eip=0x003ae8; 	X(MOV(*(raddr(ds,bx+8)), al));	// 7695 mov     [bx+8], al ;~ 01A2:3AE8
cs=0x1a2;eip=0x003aeb; __disp=off_245cc;
	J(return __dispatch_call(__disp, _state););	// 7696 jmp     off_245CC ;~ 01A2:3AEB
loc_13aef:
	// 4865 
cs=0x1a2;eip=0x003aef; 	T(SHR(al, 4));	// 7701 shr     al, 4 ;~ 01A2:3AEF
loc_13af2:
	// 4866 
cs=0x1a2;eip=0x003af2; 	T(ADD(dl, al));	// 7704 add     dl, al ;~ 01A2:3AF2
cs=0x1a2;eip=0x003af4; 	T(MOV(al, dl));	// 7705 mov     al, dl ;~ 01A2:3AF4
cs=0x1a2;eip=0x003af6; 	T(CMP(al, byte_2467d));	// 7706 cmp     al, byte_2467D ;~ 01A2:3AF6
cs=0x1a2;eip=0x003afa; 	J(JBE(loc_13aff));	// 7707 jbe     short loc_13AFF ;~ 01A2:3AFA
cs=0x1a2;eip=0x003afc; 	T(MOV(al, byte_2467d));	// 7708 mov     al, byte_2467D ;~ 01A2:3AFC
loc_13aff:
	// 4867 
cs=0x1a2;eip=0x003aff; 	X(MOV(*(raddr(ds,bx+8)), al));	// 7711 mov     [bx+8], al ;~ 01A2:3AFF
cs=0x1a2;eip=0x003b02; __disp=off_245cc;
	J(return __dispatch_call(__disp, _state););	// 7712 jmp     off_245CC ;~ 01A2:3B02
_eff_13c88:
	// 7996 
cs=0x1a2;eip=0x003c88; 	T(MOV(dl, *(raddr(ds,bx+8))));	// 7998 mov     dl, [bx+8] ;~ 01A2:3C88
cs=0x1a2;eip=0x003c8b; 	T(CMP(byte_24668, 0));	// 7999 cmp     byte_24668, 0 ;~ 01A2:3C8B
cs=0x1a2;eip=0x003c90; 	J(JZ(loc_13af2));	// 8000 jz      loc_13AF2 ;~ 01A2:3C90
cs=0x1a2;eip=0x003c94; 	J(RETN(0));	// 8001 retn ;~ 01A2:3C94
_eff_13c95:
	// 8008 
cs=0x1a2;eip=0x003c95; 	T(MOV(dl, *(raddr(ds,bx+8))));	// 8010 mov     dl, [bx+8] ;~ 01A2:3C95
cs=0x1a2;eip=0x003c98; 	T(CMP(byte_24668, 0));	// 8011 cmp     byte_24668, 0 ;~ 01A2:3C98
cs=0x1a2;eip=0x003c9d; 	J(JZ(loc_13ae0));	// 8012 jz      loc_13AE0 ;~ 01A2:3C9D
cs=0x1a2;eip=0x003ca1; 	J(RETN(0));	// 8013 retn ;~ 01A2:3CA1
_eff_13e32:
	// 8340 
cs=0x1a2;eip=0x003e32; 	T(OR(al, al));	// 8342 or      al, al ;~ 01A2:3E32
cs=0x1a2;eip=0x003e34; 	J(JZ(loc_13e39));	// 8343 jz      short loc_13E39 ;~ 01A2:3E34
cs=0x1a2;eip=0x003e36; 	X(MOV(*(raddr(ds,bx+0x34)), al));	// 8344 mov     [bx+34h], al ;~ 01A2:3E36
loc_13e39:
	// 4897 
cs=0x1a2;eip=0x003e39; 	T(MOV(al, *(raddr(ds,bx+0x34))));	// 8347 mov     al, [bx+34h] ;~ 01A2:3E39
cs=0x1a2;eip=0x003e3c; 	T(MOV(dl, *(raddr(ds,bx+8))));	// 8348 mov     dl, [bx+8] ;~ 01A2:3E3C
cs=0x1a2;eip=0x003e3f; 	T(MOV(cl, al));	// 8349 mov     cl, al ;~ 01A2:3E3F
cs=0x1a2;eip=0x003e41; 	T(AND(cl, 0x0F));	// 8350 and     cl, 0Fh ;~ 01A2:3E41
cs=0x1a2;eip=0x003e44; 	T(MOV(ch, al));	// 8351 mov     ch, al ;~ 01A2:3E44
cs=0x1a2;eip=0x003e46; 	T(SHR(ch, 4));	// 8352 shr     ch, 4 ;~ 01A2:3E46
cs=0x1a2;eip=0x003e49; 	T(CMP(cl, 0x0F));	// 8353 cmp     cl, 0Fh ;~ 01A2:3E49
cs=0x1a2;eip=0x003e4c; 	J(JNZ(loc_13e5e));	// 8354 jnz     short loc_13E5E ;~ 01A2:3E4C
cs=0x1a2;eip=0x003e4e; 	T(OR(ch, ch));	// 8355 or      ch, ch ;~ 01A2:3E4E
cs=0x1a2;eip=0x003e50; 	J(JZ(loc_13ade));	// 8356 jz      loc_13ADE ;~ 01A2:3E50
cs=0x1a2;eip=0x003e54; 	T(CMP(byte_24668, 0));	// 8357 cmp     byte_24668, 0 ;~ 01A2:3E54
cs=0x1a2;eip=0x003e59; 	J(JZ(loc_13aef));	// 8358 jz      loc_13AEF ;~ 01A2:3E59
cs=0x1a2;eip=0x003e5d; 	J(RETN(0));	// 8359 retn ;~ 01A2:3E5D
loc_13e5e:
	// 4898 
cs=0x1a2;eip=0x003e5e; 	T(CMP(ch, 0x0F));	// 8363 cmp     ch, 0Fh ;~ 01A2:3E5E
cs=0x1a2;eip=0x003e61; 	J(JZ(loc_13e6f));	// 8364 jz      short loc_13E6F ;~ 01A2:3E61
cs=0x1a2;eip=0x003e63; 	T(MOV(dl, *(raddr(ds,bx+8))));	// 8365 mov     dl, [bx+8] ;~ 01A2:3E63
cs=0x1a2;eip=0x003e66; 	T(TEST(al, 0x0F));	// 8366 test    al, 0Fh ;~ 01A2:3E66
cs=0x1a2;eip=0x003e68; 	J(JNZ(loc_13ade));	// 8367 jnz     loc_13ADE ;~ 01A2:3E68
cs=0x1a2;eip=0x003e6c; 	J(JMP(loc_13aef));	// 8368 jmp     loc_13AEF ;~ 01A2:3E6C
loc_13e6f:
	// 4899 
cs=0x1a2;eip=0x003e6f; 	T(OR(cl, cl));	// 8372 or      cl, cl ;~ 01A2:3E6F
cs=0x1a2;eip=0x003e71; 	J(JZ(loc_13aef));	// 8373 jz      loc_13AEF ;~ 01A2:3E71
cs=0x1a2;eip=0x003e75; 	T(CMP(byte_24668, 0));	// 8374 cmp     byte_24668, 0 ;~ 01A2:3E75
cs=0x1a2;eip=0x003e7a; 	J(JZ(loc_13ade));	// 8375 jz      loc_13ADE ;~ 01A2:3E7A
cs=0x1a2;eip=0x003e7e; 	J(RETN(0));	// 8376 retn ;~ 01A2:3E7E

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_13ad7: 	goto _eff_13ad7;
        case m2c::k_eff_13c88: 	goto _eff_13c88;
        case m2c::k_eff_13c95: 	goto _eff_13c95;
        case m2c::k_eff_13e32: 	goto _eff_13e32;
        case m2c::kloc_13ade: 	goto loc_13ade;
        case m2c::kloc_13ae0: 	goto loc_13ae0;
        case m2c::kloc_13ae8: 	goto loc_13ae8;
        case m2c::kloc_13aef: 	goto loc_13aef;
        case m2c::kloc_13af2: 	goto loc_13af2;
        case m2c::kloc_13aff: 	goto loc_13aff;
        case m2c::kloc_13e39: 	goto loc_13e39;
        case m2c::kloc_13e5e: 	goto loc_13e5e;
        case m2c::kloc_13e6f: 	goto loc_13e6f;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group11(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group11:
    _begin:
_eff_13b06:
	// 7719 
cs=0x1a2;eip=0x003b06; 	T(XOR(ah, ah));	// 7721 xor     ah, ah ;~ 01A2:3B06
cs=0x1a2;eip=0x003b08; 	T(DEC(ax));	// 7722 dec     ax ;~ 01A2:3B08
cs=0x1a2;eip=0x003b09; 	X(MOV(word_245f0, ax));	// 7723 mov     word_245F0, ax ;~ 01A2:3B09
cs=0x1a2;eip=0x003b0c; 	T(INC(ax));	// 7724 inc     ax ;~ 01A2:3B0C
cs=0x1a2;eip=0x003b0d; 	T(TEST(_flag_playsetttings, 4));	// 7725 test    _flag_playsetttings, 4 ;~ 01A2:3B0D
cs=0x1a2;eip=0x003b12; 	J(JNZ(loc_13b5b));	// 7726 jnz     short loc_13B5B ;~ 01A2:3B12
cs=0x1a2;eip=0x003b14; 	X(BT(*(dw*)((byte_282e8)), ax));	// 7727 bt      word ptr byte_282E8, ax ;~ 01A2:3B14
cs=0x1a2;eip=0x003b19; 	J(JNC(loc_13b5b));	// 7728 jnb     short loc_13B5B ;~ 01A2:3B19
cs=0x1a2;eip=0x003b1b; 	T(MOV(cx, word_245fa));	// 7729 mov     cx, word_245FA ;~ 01A2:3B1B
cs=0x1a2;eip=0x003b1f; 	T(ADD(cx, 7));	// 7730 add     cx, 7 ;~ 01A2:3B1F
cs=0x1a2;eip=0x003b22; 	T(SHR(cx, 3));	// 7731 shr     cx, 3 ;~ 01A2:3B22
cs=0x1a2;eip=0x003b25; 	J(JZ(loc_13b34));	// 7732 jz      short loc_13B34 ;~ 01A2:3B25
cs=0x1a2;eip=0x003b27; 	T(XOR(di, di));	// 7733 xor     di, di ;~ 01A2:3B27
loc_13b29:
	// 4868 
cs=0x1a2;eip=0x003b29; 	T(CMP(*((byte_282e8)+di), 0x0FF));	// 7736 cmp     byte_282E8[di], 0FFh ;~ 01A2:3B29
cs=0x1a2;eip=0x003b2e; 	J(JNZ(loc_13b3e));	// 7737 jnz     short loc_13B3E ;~ 01A2:3B2E
cs=0x1a2;eip=0x003b30; 	T(INC(di));	// 7738 inc     di ;~ 01A2:3B30
cs=0x1a2;eip=0x003b31; 	T(DEC(cx));	// 7739 dec     cx ;~ 01A2:3B31
cs=0x1a2;eip=0x003b32; 	J(JNZ(loc_13b29));	// 7740 jnz     short loc_13B29 ;~ 01A2:3B32
loc_13b34:
	// 4869 
cs=0x1a2;eip=0x003b34; 	X(PUSH(bx));	// 7744 push    bx ;~ 01A2:3B34
cs=0x1a2;eip=0x003b35; 	X(PUSH(si));	// 7745 push    si ;~ 01A2:3B35
cs=0x1a2;eip=0x003b36; 	X(PUSH(es));	// 7746 push    es ;~ 01A2:3B36
cs=0x1a2;eip=0x003b37; 	J(CALL(_vlm_141df,0));	// 7747 call    _vlm_141DF ;~ 01A2:3B37
cs=0x1a2;eip=0x003b3a; 	X(POP(es));	// 7748 pop     es ;~ 01A2:3B3A
cs=0x1a2;eip=0x003b3b; 	X(POP(si));	// 7749 pop     si ;~ 01A2:3B3B
cs=0x1a2;eip=0x003b3c; 	X(POP(bx));	// 7750 pop     bx ;~ 01A2:3B3C
cs=0x1a2;eip=0x003b3d; 	J(RETN(0));	// 7751 retn ;~ 01A2:3B3D
loc_13b3e:
	// 4870 
cs=0x1a2;eip=0x003b3e; 	T(MOV(al, *((byte_282e8)+di)));	// 7755 mov     al, byte_282E8[di] ;~ 01A2:3B3E
cs=0x1a2;eip=0x003b42; 	T(SHL(di, 3));	// 7756 shl     di, 3 ;~ 01A2:3B42
cs=0x1a2;eip=0x003b45; 	T(MOV(cx, 8));	// 7757 mov     cx, 8 ;~ 01A2:3B45
loc_13b48:
	// 4871 
cs=0x1a2;eip=0x003b48; 	T(SHR(al, 1));	// 7760 shr     al, 1 ;~ 01A2:3B48
cs=0x1a2;eip=0x003b4a; 	J(JNC(loc_13b50));	// 7761 jnb     short loc_13B50 ;~ 01A2:3B4A
cs=0x1a2;eip=0x003b4c; 	T(INC(di));	// 7762 inc     di ;~ 01A2:3B4C
cs=0x1a2;eip=0x003b4d; 	T(DEC(cx));	// 7763 dec     cx ;~ 01A2:3B4D
cs=0x1a2;eip=0x003b4e; 	J(JNZ(loc_13b48));	// 7764 jnz     short loc_13B48 ;~ 01A2:3B4E
loc_13b50:
	// 4872 
cs=0x1a2;eip=0x003b50; 	T(CMP(di, word_245fa));	// 7767 cmp     di, word_245FA ;~ 01A2:3B50
cs=0x1a2;eip=0x003b54; 	J(JNC(loc_13b34));	// 7768 jnb     short loc_13B34 ;~ 01A2:3B54
cs=0x1a2;eip=0x003b56; 	T(DEC(di));	// 7769 dec     di ;~ 01A2:3B56
cs=0x1a2;eip=0x003b57; 	X(MOV(word_245f0, di));	// 7770 mov     word_245F0, di ;~ 01A2:3B57
loc_13b5b:
	// 4873 
cs=0x1a2;eip=0x003b5b; 	X(MOV(byte_24669, 0));	// 7774 mov     byte_24669, 0 ;~ 01A2:3B5B
cs=0x1a2;eip=0x003b60; 	X(MOV(byte_2466a, 1));	// 7775 mov     byte_2466A, 1 ;~ 01A2:3B60
cs=0x1a2;eip=0x003b65; 	J(RETN(0));	// 7776 retn ;~ 01A2:3B65
_eff_13b88:
	// 7811 
cs=0x1a2;eip=0x003b88; 	T(MOV(dl, al));	// 7813 mov     dl, al ;~ 01A2:3B88
cs=0x1a2;eip=0x003b8a; 	T(AND(dl, 0x0F));	// 7814 and     dl, 0Fh ;~ 01A2:3B8A
cs=0x1a2;eip=0x003b8d; 	T(SHR(al, 4));	// 7815 shr     al, 4 ;~ 01A2:3B8D
cs=0x1a2;eip=0x003b90; 	T(MOV(ah, 0x0A));	// 7816 mov     ah, 0Ah ;~ 01A2:3B90
cs=0x1a2;eip=0x003b92; 	T(MUL1_1(ah));	// 7817 mul     ah ;~ 01A2:3B92
cs=0x1a2;eip=0x003b94; 	T(ADD(al, dl));	// 7818 add     al, dl ;~ 01A2:3B94
cs=0x1a2;eip=0x003b96; 	T(CMP(al, 0x3F));	// 7819 cmp     al, 3Fh ; '?' ;~ 01A2:3B96
cs=0x1a2;eip=0x003b98; 	J(JA(loc_13b5b));	// 7820 ja      short loc_13B5B ;~ 01A2:3B98
cs=0x1a2;eip=0x003b9a; 	X(MOV(byte_24669, al));	// 7821 mov     byte_24669, al ;~ 01A2:3B9A
cs=0x1a2;eip=0x003b9d; 	X(MOV(byte_2466a, 1));	// 7822 mov     byte_2466A, 1 ;~ 01A2:3B9D
cs=0x1a2;eip=0x003ba2; 	J(RETN(0));	// 7823 retn ;~ 01A2:3BA2

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_13b06: 	goto _eff_13b06;
        case m2c::k_eff_13b88: 	goto _eff_13b88;
        case m2c::kloc_13b29: 	goto loc_13b29;
        case m2c::kloc_13b34: 	goto loc_13b34;
        case m2c::kloc_13b3e: 	goto loc_13b3e;
        case m2c::kloc_13b48: 	goto loc_13b48;
        case m2c::kloc_13b50: 	goto loc_13b50;
        case m2c::kloc_13b5b: 	goto loc_13b5b;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _eff_13b78(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _eff_13b78:
    _begin:
cs=0x1a2;eip=0x003b78; 	T(CMP(al, byte_2467d));	// 7798 cmp     al, byte_2467D ;~ 01A2:3B78
cs=0x1a2;eip=0x003b7c; 	J(JBE(loc_13b81));	// 7799 jbe     short loc_13B81 ;~ 01A2:3B7C
cs=0x1a2;eip=0x003b7e; 	T(MOV(al, byte_2467d));	// 7800 mov     al, byte_2467D ;~ 01A2:3B7E
loc_13b81:
	// 4876 
cs=0x1a2;eip=0x003b81; 	X(MOV(*(raddr(ds,bx+8)), al));	// 7803 mov     [bx+8], al ;~ 01A2:3B81
cs=0x1a2;eip=0x003b84; __disp=off_245cc;
	J(return __dispatch_call(__disp, _state););	// 7804 jmp     off_245CC ;~ 01A2:3B84

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_13b78: 	goto _eff_13b78;
        case m2c::kloc_13b81: 	goto loc_13b81;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _eff_13ba3(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _eff_13ba3:
    _begin:
cs=0x1a2;eip=0x003ba3; 	T(MOV(di, ax));	// 7832 mov     di, ax ;~ 01A2:3BA3
cs=0x1a2;eip=0x003ba5; 	T(SHR(di, 3));	// 7833 shr     di, 3 ;~ 01A2:3BA5
cs=0x1a2;eip=0x003ba8; 	T(AND(di, 0x1E));	// 7834 and     di, 1Eh ;~ 01A2:3BA8
cs=0x1a2;eip=0x003bab; 	T(AND(al, 0x0F));	// 7835 and     al, 0Fh ;~ 01A2:3BAB
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x003bad; __disp=*(dw*)(((db*)&_effoff_19026)+di);
	J(return __dispatch_call(__disp, _state););	// 7836 jmp     cs:_effoff_19026[di] ;~ 01A2:3BAD

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_13ba3: 	goto _eff_13ba3;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _eff_13bb2(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _eff_13bb2:
    _begin:
cs=0x1a2;eip=0x003bb2; 	T(OR(al, al));	// 7845 or      al, al ;~ 01A2:3BB2
cs=0x1a2;eip=0x003bb4; 	J(JZ(loc_13bbb));	// 7846 jz      short loc_13BBB ;~ 01A2:3BB4
cs=0x1a2;eip=0x003bb6; 	X(OR(*(raddr(ds,bx+0x17)), 0x20));	// 7847 or      byte ptr [bx+17h], 20h ;~ 01A2:3BB6
cs=0x1a2;eip=0x003bba; 	J(RETN(0));	// 7848 retn ;~ 01A2:3BBA
loc_13bbb:
	// 4877 
cs=0x1a2;eip=0x003bbb; 	X(AND(*(raddr(ds,bx+0x17)), 0x0DF));	// 7852 and     byte ptr [bx+17h], 0DFh ;~ 01A2:3BBB
cs=0x1a2;eip=0x003bbf; 	J(RETN(0));	// 7853 retn ;~ 01A2:3BBF

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_13bb2: 	goto _eff_13bb2;
        case m2c::kloc_13bbb: 	goto loc_13bbb;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _eff_13bc0(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _eff_13bc0:
    _begin:
cs=0x1a2;eip=0x003bc0; 	X(AND(*(raddr(ds,bx+9)), 0x0F0));	// 7862 and     byte ptr [bx+9], 0F0h ;~ 01A2:3BC0
cs=0x1a2;eip=0x003bc4; 	X(OR(*(raddr(ds,bx+9)), al));	// 7863 or      [bx+9], al ;~ 01A2:3BC4
cs=0x1a2;eip=0x003bc7; 	J(RETN(0));	// 7864 retn ;~ 01A2:3BC7

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_13bc0: 	goto _eff_13bc0;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _eff_13bc8(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _eff_13bc8:
    _begin:
cs=0x1a2;eip=0x003bc8; 	T(AND(ax, 0x0F));	// 7873 and     ax, 0Fh ;~ 01A2:3BC8
cs=0x1a2;eip=0x003bcb; 	T(MOV(di, ax));	// 7874 mov     di, ax ;~ 01A2:3BCB
cs=0x1a2;eip=0x003bcd; 	T(CMP(byte_2461a, 0));	// 7875 cmp     byte_2461A, 0 ;~ 01A2:3BCD
cs=0x1a2;eip=0x003bd2; 	J(JNZ(loc_13be7));	// 7876 jnz     short loc_13BE7 ;~ 01A2:3BD2
cs=0x1a2;eip=0x003bd4; 	T(SHL(di, 3));	// 7877 shl     di, 3 ;~ 01A2:3BD4
cs=0x1a2;eip=0x003bd7; 	T(MOV(ax, di));	// 7878 mov     ax, di ;~ 01A2:3BD7
cs=0x1a2;eip=0x003bd9; 	T(NEG(ax));	// 7879 neg     ax ;~ 01A2:3BD9
cs=0x1a2;eip=0x003bdb; 	T(SHL(di, 4));	// 7880 shl     di, 4 ;~ 01A2:3BDB
cs=0x1a2;eip=0x003bde; 	T(ADD(ax, di));	// 7881 add     ax, di ;~ 01A2:3BDE
cs=0x1a2;eip=0x003be0; 	T(ADD(ax, offset(seg003,word_24998)));	// 7882 add     ax, offset word_24998 ;~ 01A2:3BE0
cs=0x1a2;eip=0x003be3; 	X(MOV(*(dw*)(raddr(ds,bx+0x38)), ax));	// 7883 mov     [bx+38h], ax ;~ 01A2:3BE3
cs=0x1a2;eip=0x003be6; 	J(RETN(0));	// 7884 retn ;~ 01A2:3BE6
loc_13be7:
	// 4878 
cs=0x1a2;eip=0x003be7; 	T(SHL(di, 1));	// 7888 shl     di, 1 ;~ 01A2:3BE7
cs=0x1a2;eip=0x003be9; 	T(MOV(ax, *(dw*)(((db*)_table_246f6)+di)));	// 7889 mov     ax, _table_246F6[di] ;~ 01A2:3BE9
cs=0x1a2;eip=0x003bed; 	X(MOV(*(dw*)(raddr(ds,bx+0x14)), dx));	// 7890 mov     [bx+14h], dx ;~ 01A2:3BED
cs=0x1a2;eip=0x003bf0; 	J(RETN(0));	// 7891 retn ;~ 01A2:3BF0

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_13bc8: 	goto _eff_13bc8;
        case m2c::kloc_13be7: 	goto loc_13be7;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _eff_13c34(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _eff_13c34:
    _begin:
cs=0x1a2;eip=0x003c34; 	X(AND(*(raddr(ds,bx+9)), 0x0F));	// 7941 and     byte ptr [bx+9], 0Fh ;~ 01A2:3C34
cs=0x1a2;eip=0x003c38; 	T(SHL(al, 4));	// 7942 shl     al, 4 ;~ 01A2:3C38
cs=0x1a2;eip=0x003c3b; 	X(OR(*(raddr(ds,bx+9)), al));	// 7943 or      [bx+9], al ;~ 01A2:3C3B
cs=0x1a2;eip=0x003c3e; 	J(RETN(0));	// 7944 retn ;~ 01A2:3C3E

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_13c34: 	goto _eff_13c34;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _eff_13c3f(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _eff_13c3f:
    _begin:
cs=0x1a2;eip=0x003c3f; 	T(CMP(byte_24668, 0));	// 7953 cmp     byte_24668, 0 ;~ 01A2:3C3F
cs=0x1a2;eip=0x003c44; 	J(JZ(loc_13c47));	// 7954 jz      short loc_13C47 ;~ 01A2:3C44
cs=0x1a2;eip=0x003c46; 	J(RETN(0));	// 7955 retn ;~ 01A2:3C46
loc_13c47:
	// 4882 
cs=0x1a2;eip=0x003c47; 	T(MOV(di, ax));	// 7959 mov     di, ax ;~ 01A2:3C47
cs=0x1a2;eip=0x003c49; 	T(AND(di, 0x0F));	// 7960 and     di, 0Fh ;~ 01A2:3C49
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x003c4c; 	T(MOV(al, *((byte_13c54)+di)));	// 7961 mov     al, cs:byte_13C54[di] ;~ 01A2:3C4C
cs=0x1a2;eip=0x003c51; 	J(return _group9(m2c::k_eff_13a43, _state););	// 7962 jmp     _eff_13A43 ;~ 01A2:3C51

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_13c3f: 	goto _eff_13c3f;
        case m2c::kloc_13c47: 	goto loc_13c47;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group12(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group12:
    _begin:
seg000_3d8d_proc:
	// 8181 
loc_13d8d:
	// 4889 
cs=0x1a2;eip=0x003d8d; 	T(SHL(cx, 1));	// 8182 shl     cx, 1 ;~ 01A2:3D8D
cs=0x1a2;eip=0x003d8f; 	X(INC(byte_24618));	// 8183 inc     byte_24618 ;~ 01A2:3D8F
cs=0x1a2;eip=0x003d93; 	J(JMP(loc_13d9a));	// 8184 jmp     short loc_13D9A ;~ 01A2:3D93
sub_13d95:
	// 8190 
cs=0x1a2;eip=0x003d95; 	X(MOV(byte_24618, 1));	// 8194 mov     byte_24618, 1 ;~ 01A2:3D95
loc_13d9a:
	// 4890 
cs=0x1a2;eip=0x003d9a; 	T(XOR(dx, dx));	// 8197 xor     dx, dx ;~ 01A2:3D9A
cs=0x1a2;eip=0x003d9c; 	T(MOV(ax, 31250));	// 8198 mov     ax, 31250 ;~ 01A2:3D9C
cs=0x1a2;eip=0x003d9f; 	T(DIV2(cx));	// 8199 div     cx ;~ 01A2:3D9F
cs=0x1a2;eip=0x003da1; 	T(NEG(al));	// 8200 neg     al ;~ 01A2:3DA1
cs=0x1a2;eip=0x003da3; 	T(OR(ah, ah));	// 8201 or      ah, ah ;~ 01A2:3DA3
cs=0x1a2;eip=0x003da5; 	J(JNZ(loc_13d8d));	// 8202 jnz     short loc_13D8D ;~ 01A2:3DA5
cs=0x1a2;eip=0x003da7; 	T(MOV(ah, byte_24618));	// 8203 mov     ah, byte_24618 ;~ 01A2:3DA7
cs=0x1a2;eip=0x003dab; 	X(MOV(byte_24619, ah));	// 8204 mov     byte_24619, ah ;~ 01A2:3DAB
cs=0x1a2;eip=0x003daf; 	J(RETN(0));	// 8205 retn ;~ 01A2:3DAF

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::kloc_13d9a: 	goto loc_13d9a;
        case m2c::kseg000_3d8d_proc: 	goto seg000_3d8d_proc;
        case m2c::ksub_13d95: 	goto sub_13d95;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _clean_timer(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _clean_timer:
    _begin:
cs=0x1a2;eip=0x003dd5; 	X(PUSHF);	// 8246 pushf ;~ 01A2:3DD5
cs=0x1a2;eip=0x003dd6; 	T(CLI);	// 8247 cli ;~ 01A2:3DD6
cs=0x1a2;eip=0x003dd7; 	T(MOV(al, 0x36));	// 8248 mov     al, 36h ; '6' ;~ 01A2:3DD7
cs=0x1a2;eip=0x003dd9; 	S(OUT(0x43, al));	// 8249 out     43h, al         ; Timer 8253-5 (AT: 8254.2). ;~ 01A2:3DD9
cs=0x1a2;eip=0x003ddb; 	T(XOR(al, al));	// 8250 xor     al, al ;~ 01A2:3DDB
cs=0x1a2;eip=0x003ddd; 	S(OUT(0x40, al));	// 8251 out     40h, al         ; Timer 8253-5 (AT: 8254.2). ;~ 01A2:3DDD
cs=0x1a2;eip=0x003ddf; 	J({;});	// 8252 jmp     short $+2 ;~ 01A2:3DDF
loc_13de1:
	// 4892 
cs=0x1a2;eip=0x003de1; 	S(OUT(0x40, al));	// 8256 out     40h, al         ; Timer 8253-5 (AT: 8254.2). ;~ 01A2:3DE1
cs=0x1a2;eip=0x003de3; 	X(POPF);	// 8257 popf ;~ 01A2:3DE3
cs=0x1a2;eip=0x003de4; 	J(RETN(0));	// 8258 retn ;~ 01A2:3DE4

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_clean_timer: 	goto _clean_timer;
        case m2c::kloc_13de1: 	goto loc_13de1;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _eff_13e1e(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _eff_13e1e:
    _begin:
cs=0x1a2;eip=0x003e1e; 	T(OR(al, al));	// 8315 or      al, al ;~ 01A2:3E1E
cs=0x1a2;eip=0x003e20; 	J(JZ(loc_13e2a));	// 8316 jz      short loc_13E2A ;~ 01A2:3E20
cs=0x1a2;eip=0x003e22; 	T(XOR(ah, ah));	// 8317 xor     ah, ah ;~ 01A2:3E22
cs=0x1a2;eip=0x003e24; 	T(SHL(ax, 2));	// 8318 shl     ax, 2 ;~ 01A2:3E24
cs=0x1a2;eip=0x003e27; 	X(MOV(*(dw*)(raddr(ds,bx+0x12)), ax));	// 8319 mov     [bx+12h], ax ;~ 01A2:3E27
loc_13e2a:
	// 4896 
cs=0x1a2;eip=0x003e2a; 	J(return _group8(m2c::kloc_138de, _state););	// 8323 jmp     loc_138DE ;~ 01A2:3E2A

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_13e1e: 	goto _eff_13e1e;
        case m2c::kloc_13e2a: 	goto loc_13e2a;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _eff_13e2d(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _eff_13e2d:
    _begin:
cs=0x1a2;eip=0x003e2d; 	T(MOV(cl, 5));	// 8332 mov     cl, 5 ;~ 01A2:3E2D
cs=0x1a2;eip=0x003e2f; 	J(return _eff_1392f(m2c::kloc_13931, _state););	// 8333 jmp     loc_13931 ;~ 01A2:3E2F

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_13e2d: 	goto _eff_13e2d;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _eff_13e7f(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _eff_13e7f:
    _begin:
cs=0x1a2;eip=0x003e7f; 	J(CALL(_eff_13e32,0));	// 8385 call    _eff_13E32 ;~ 01A2:3E7F
cs=0x1a2;eip=0x003e82; 	J(return _eff_13e1e(m2c::kloc_13e2a, _state););	// 8386 jmp     short loc_13E2A ;~ 01A2:3E82

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_13e7f: 	goto _eff_13e7f;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _eff_13e84(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _eff_13e84:
    _begin:
cs=0x1a2;eip=0x003e84; 	J(CALL(_eff_13e32,0));	// 8395 call    _eff_13E32 ;~ 01A2:3E84
cs=0x1a2;eip=0x003e87; 	T(MOV(cl, 5));	// 8396 mov     cl, 5 ;~ 01A2:3E87
cs=0x1a2;eip=0x003e89; 	J(return _eff_1392f(m2c::kloc_13950, _state););	// 8397 jmp     loc_13950 ;~ 01A2:3E89

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_13e84: 	goto _eff_13e84;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _eff_13e8c(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _eff_13e8c:
    _begin:
cs=0x1a2;eip=0x003e8c; 	J(CALL(sub_13e9b,0));	// 8406 call    sub_13E9B ;~ 01A2:3E8C
cs=0x1a2;eip=0x003e8f; 	X(MOV(byte_24667, ah));	// 8407 mov     byte_24667, ah ;~ 01A2:3E8F
cs=0x1a2;eip=0x003e93; 	X(MOV(byte_24668, 0));	// 8408 mov     byte_24668, 0 ;~ 01A2:3E93
cs=0x1a2;eip=0x003e98; 	J(return _group8(m2c::ksub_13cf6, _state););	// 8409 jmp     sub_13CF6 ;~ 01A2:3E98

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_13e8c: 	goto _eff_13e8c;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_13e9b(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_13e9b:
    _begin:
cs=0x1a2;eip=0x003e9b; 	T(MOVZX(di, al));	// 8418 movzx   di, al ;~ 01A2:3E9B
cs=0x1a2;eip=0x003e9e; 	T(MOV(dx, di));	// 8419 mov     dx, di ;~ 01A2:3E9E
cs=0x1a2;eip=0x003ea0; 	T(AND(dl, 0x0F));	// 8420 and     dl, 0Fh ;~ 01A2:3EA0
cs=0x1a2;eip=0x003ea3; 	T(SHR(di, 4));	// 8421 shr     di, 4 ;~ 01A2:3EA3
cs=0x1a2;eip=0x003ea6; 	T(MOV(ax, dx));	// 8422 mov     ax, dx ;~ 01A2:3EA6
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x003ea8; 	X(MUL1_1(*((_table_13ec3)+di)));	// 8423 mul     cs:_table_13EC3[di] ;~ 01A2:3EA8
cs=0x1a2;eip=0x003ead; 	T(SHR(ax, 4));	// 8424 shr     ax, 4 ;~ 01A2:3EAD
cs=0x1a2;eip=0x003eb0; 	T(NEG(ax));	// 8425 neg     ax ;~ 01A2:3EB0
cs=0x1a2;eip=0x003eb2; 	T(ADD(ax, 0x31));	// 8426 add     ax, 31h ; '1' ;~ 01A2:3EB2
cs=0x1a2;eip=0x003eb5; 	T(MOV(dx, ax));	// 8427 mov     dx, ax ;~ 01A2:3EB5
cs=0x1a2;eip=0x003eb7; 	T(SHL(ax, 2));	// 8428 shl     ax, 2 ;~ 01A2:3EB7
cs=0x1a2;eip=0x003eba; 	T(ADD(ax, dx));	// 8429 add     ax, dx ;~ 01A2:3EBA
cs=0x1a2;eip=0x003ebc; 	T(SHR(ax, 1));	// 8430 shr     ax, 1 ;~ 01A2:3EBC
cs=0x1a2;eip=0x003ebe; 	T(MOV(dx, di));	// 8431 mov     dx, di ;~ 01A2:3EBE
cs=0x1a2;eip=0x003ec0; 	T(MOV(ah, dl));	// 8432 mov     ah, dl ;~ 01A2:3EC0
cs=0x1a2;eip=0x003ec2; 	J(RETN(0));	// 8433 retn ;~ 01A2:3EC2

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::ksub_13e9b: 	goto sub_13e9b;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _nullsub_2(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _nullsub_2:
    _begin:
cs=0x1a2;eip=0x003f04; 	J(RETN(0));	// 8469 retn ;~ 01A2:3F04

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_nullsub_2: 	goto _nullsub_2;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _eff_13f3b(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _eff_13f3b:
    _begin:
cs=0x1a2;eip=0x003f3b; 	T(OR(al, al));	// 8511 or      al, al ;~ 01A2:3F3B
cs=0x1a2;eip=0x003f3d; 	J(JZ(loc_13f42));	// 8512 jz      short loc_13F42 ;~ 01A2:3F3D
cs=0x1a2;eip=0x003f3f; 	X(MOV(*(raddr(ds,bx+0x34)), al));	// 8513 mov     [bx+34h], al ;~ 01A2:3F3F
loc_13f42:
	// 4904 
cs=0x1a2;eip=0x003f42; 	T(MOV(al, *(raddr(ds,bx+0x34))));	// 8516 mov     al, [bx+34h] ;~ 01A2:3F42
cs=0x1a2;eip=0x003f45; 	T(MOV(ch, al));	// 8517 mov     ch, al ;~ 01A2:3F45
cs=0x1a2;eip=0x003f47; 	T(SHR(al, 4));	// 8518 shr     al, 4 ;~ 01A2:3F47
cs=0x1a2;eip=0x003f4a; 	T(TEST(al, 7));	// 8519 test    al, 7 ;~ 01A2:3F4A
cs=0x1a2;eip=0x003f4c; 	J(JZ(loc_13fb7));	// 8520 jz      short loc_13FB7 ;~ 01A2:3F4C
cs=0x1a2;eip=0x003f4e; 	T(TEST(al, 8));	// 8521 test    al, 8 ;~ 01A2:3F4E
cs=0x1a2;eip=0x003f50; 	J(JNZ(loc_13f96));	// 8522 jnz     short loc_13F96 ;~ 01A2:3F50
cs=0x1a2;eip=0x003f52; 	T(CMP(al, 6));	// 8523 cmp     al, 6 ;~ 01A2:3F52
cs=0x1a2;eip=0x003f54; 	J(JZ(loc_13f6d));	// 8524 jz      short loc_13F6D ;~ 01A2:3F54
cs=0x1a2;eip=0x003f56; 	T(CMP(al, 7));	// 8525 cmp     al, 7 ;~ 01A2:3F56
cs=0x1a2;eip=0x003f58; 	J(JZ(loc_13f7c));	// 8526 jz      short loc_13F7C ;~ 01A2:3F58
cs=0x1a2;eip=0x003f5a; 	T(DEC(al));	// 8527 dec     al ;~ 01A2:3F5A
cs=0x1a2;eip=0x003f5c; 	T(MOV(cl, al));	// 8528 mov     cl, al ;~ 01A2:3F5C
cs=0x1a2;eip=0x003f5e; 	T(MOV(al, 1));	// 8529 mov     al, 1 ;~ 01A2:3F5E
cs=0x1a2;eip=0x003f60; 	T(SHL(al, cl));	// 8530 shl     al, cl ;~ 01A2:3F60
cs=0x1a2;eip=0x003f62; 	X(SUB(*(raddr(ds,bx+8)), al));	// 8531 sub     [bx+8], al ;~ 01A2:3F62
cs=0x1a2;eip=0x003f65; 	J(JNC(loc_13fb7));	// 8532 jnb     short loc_13FB7 ;~ 01A2:3F65
cs=0x1a2;eip=0x003f67; 	X(MOV(*(raddr(ds,bx+8)), 0));	// 8533 mov     byte ptr [bx+8], 0 ;~ 01A2:3F67
cs=0x1a2;eip=0x003f6b; 	J(JMP(loc_13fb7));	// 8534 jmp     short loc_13FB7 ;~ 01A2:3F6B
loc_13f6d:
	// 4905 
cs=0x1a2;eip=0x003f6d; 	T(MOVZX(ax, *(raddr(ds,bx+8))));	// 8538 movzx   ax, byte ptr [bx+8] ;~ 01A2:3F6D
cs=0x1a2;eip=0x003f71; 	T(SHL(ax, 1));	// 8539 shl     ax, 1 ;~ 01A2:3F71
cs=0x1a2;eip=0x003f73; 	T(MOV(dl, 3));	// 8540 mov     dl, 3 ;~ 01A2:3F73
cs=0x1a2;eip=0x003f75; 	T(DIV1(dl));	// 8541 div     dl ;~ 01A2:3F75
cs=0x1a2;eip=0x003f77; 	X(MOV(*(raddr(ds,bx+8)), al));	// 8542 mov     [bx+8], al ;~ 01A2:3F77
cs=0x1a2;eip=0x003f7a; 	J(JMP(loc_13fb7));	// 8543 jmp     short loc_13FB7 ;~ 01A2:3F7A
loc_13f7c:
	// 4906 
cs=0x1a2;eip=0x003f7c; 	X(SHR(*(raddr(ds,bx+8)), 1));	// 8547 shr     byte ptr [bx+8], 1 ;~ 01A2:3F7C
cs=0x1a2;eip=0x003f7f; 	J(JMP(loc_13fb7));	// 8548 jmp     short loc_13FB7 ;~ 01A2:3F7F
loc_13f81:
	// 4907 
cs=0x1a2;eip=0x003f81; 	T(MOVZX(ax, *(raddr(ds,bx+8))));	// 8552 movzx   ax, byte ptr [bx+8] ;~ 01A2:3F81
cs=0x1a2;eip=0x003f85; 	T(MOV(dx, ax));	// 8553 mov     dx, ax ;~ 01A2:3F85
cs=0x1a2;eip=0x003f87; 	T(ADD(ax, dx));	// 8554 add     ax, dx ;~ 01A2:3F87
cs=0x1a2;eip=0x003f89; 	T(ADD(ax, dx));	// 8555 add     ax, dx ;~ 01A2:3F89
cs=0x1a2;eip=0x003f8b; 	T(SHR(ax, 1));	// 8556 shr     ax, 1 ;~ 01A2:3F8B
cs=0x1a2;eip=0x003f8d; 	J(JMP(loc_13fab));	// 8557 jmp     short loc_13FAB ;~ 01A2:3F8D
loc_13f8f:
	// 4908 
cs=0x1a2;eip=0x003f8f; 	T(MOV(al, *(raddr(ds,bx+8))));	// 8561 mov     al, [bx+8] ;~ 01A2:3F8F
cs=0x1a2;eip=0x003f92; 	T(ADD(al, al));	// 8562 add     al, al ;~ 01A2:3F92
cs=0x1a2;eip=0x003f94; 	J(JMP(loc_13fab));	// 8563 jmp     short loc_13FAB ;~ 01A2:3F94
loc_13f96:
	// 4909 
cs=0x1a2;eip=0x003f96; 	T(AND(al, 7));	// 8567 and     al, 7 ;~ 01A2:3F96
cs=0x1a2;eip=0x003f98; 	T(CMP(al, 6));	// 8568 cmp     al, 6 ;~ 01A2:3F98
cs=0x1a2;eip=0x003f9a; 	J(JZ(loc_13f81));	// 8569 jz      short loc_13F81 ;~ 01A2:3F9A
cs=0x1a2;eip=0x003f9c; 	T(CMP(al, 7));	// 8570 cmp     al, 7 ;~ 01A2:3F9C
cs=0x1a2;eip=0x003f9e; 	J(JZ(loc_13f8f));	// 8571 jz      short loc_13F8F ;~ 01A2:3F9E
cs=0x1a2;eip=0x003fa0; 	T(DEC(al));	// 8572 dec     al ;~ 01A2:3FA0
cs=0x1a2;eip=0x003fa2; 	T(MOV(cl, al));	// 8573 mov     cl, al ;~ 01A2:3FA2
cs=0x1a2;eip=0x003fa4; 	T(MOV(al, 1));	// 8574 mov     al, 1 ;~ 01A2:3FA4
cs=0x1a2;eip=0x003fa6; 	T(SHL(al, cl));	// 8575 shl     al, cl ;~ 01A2:3FA6
cs=0x1a2;eip=0x003fa8; 	T(ADD(al, *(raddr(ds,bx+8))));	// 8576 add     al, [bx+8] ;~ 01A2:3FA8
loc_13fab:
	// 4910 
cs=0x1a2;eip=0x003fab; 	T(CMP(al, byte_2467d));	// 8580 cmp     al, byte_2467D ;~ 01A2:3FAB
cs=0x1a2;eip=0x003faf; 	J(JBE(loc_13fb4));	// 8581 jbe     short loc_13FB4 ;~ 01A2:3FAF
cs=0x1a2;eip=0x003fb1; 	T(MOV(al, byte_2467d));	// 8582 mov     al, byte_2467D ;~ 01A2:3FB1
loc_13fb4:
	// 4911 
cs=0x1a2;eip=0x003fb4; 	X(MOV(*(raddr(ds,bx+8)), al));	// 8585 mov     [bx+8], al ;~ 01A2:3FB4
loc_13fb7:
	// 4912 
cs=0x1a2;eip=0x003fb7; 	T(MOV(al, ch));	// 8589 mov     al, ch ;~ 01A2:3FB7
cs=0x1a2;eip=0x003fb9; 	T(AND(al, 0x0F));	// 8590 and     al, 0Fh ;~ 01A2:3FB9
cs=0x1a2;eip=0x003fbb; 	J(return _group8(m2c::k_eff_13c64, _state););	// 8591 jmp     _eff_13C64 ;~ 01A2:3FBB

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_13f3b: 	goto _eff_13f3b;
        case m2c::kloc_13f42: 	goto loc_13f42;
        case m2c::kloc_13f6d: 	goto loc_13f6d;
        case m2c::kloc_13f7c: 	goto loc_13f7c;
        case m2c::kloc_13f81: 	goto loc_13f81;
        case m2c::kloc_13f8f: 	goto loc_13f8f;
        case m2c::kloc_13f96: 	goto loc_13f96;
        case m2c::kloc_13fab: 	goto loc_13fab;
        case m2c::kloc_13fb4: 	goto loc_13fb4;
        case m2c::kloc_13fb7: 	goto loc_13fb7;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _eff_14020(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _eff_14020:
    _begin:
cs=0x1a2;eip=0x004020; 	T(XOR(ah, ah));	// 8652 xor     ah, ah ;~ 01A2:4020
cs=0x1a2;eip=0x004022; 	T(SHL(ax, 2));	// 8653 shl     ax, 2 ;~ 01A2:4022
cs=0x1a2;eip=0x004025; 	X(PUSH(bx));	// 8654 push    bx ;~ 01A2:4025
cs=0x1a2;eip=0x004026; 	X(PUSH(si));	// 8655 push    si ;~ 01A2:4026
cs=0x1a2;eip=0x004027; 	X(PUSH(es));	// 8656 push    es ;~ 01A2:4027
cs=0x1a2;eip=0x004028; 	X(PUSH(cs));	// 8657 push    cs ;~ 01A2:4028
cs=0x1a2;eip=0x004029; 	J(CALL(_change_amplif,0));	// 8658 call    near ptr _change_amplif ;~ 01A2:4029
cs=0x1a2;eip=0x00402c; 	X(POP(es));	// 8659 pop     es ;~ 01A2:402C
cs=0x1a2;eip=0x00402d; 	X(POP(si));	// 8660 pop     si ;~ 01A2:402D
cs=0x1a2;eip=0x00402e; 	X(POP(bx));	// 8661 pop     bx ;~ 01A2:402E
cs=0x1a2;eip=0x00402f; 	J(RETN(0));	// 8662 retn ;~ 01A2:402F

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_14020: 	goto _eff_14020;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _eff_14030(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _eff_14030:
    _begin:
cs=0x1a2;eip=0x004030; 	T(AND(ax, 0x0F));	// 8671 and     ax, 0Fh ;~ 01A2:4030
cs=0x1a2;eip=0x004033; 	T(MOV(di, ax));	// 8672 mov     di, ax ;~ 01A2:4033
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x004035; 	T(MOV(al, *((_table_14057)+di)));	// 8673 mov     al, cs:_table_14057[di] ;~ 01A2:4035
cs=0x1a2;eip=0x00403a; 	X(MOV(byte_2467b, al));	// 8674 mov     byte_2467B, al ;~ 01A2:403A
loc_1403d:
	// 4916 
cs=0x1a2;eip=0x00403d; 	J(CALL(_calc_14043,0));	// 8678 call    _calc_14043 ;~ 01A2:403D
cs=0x1a2;eip=0x004040; 	J(return _group8(m2c::ksub_13cf6, _state););	// 8679 jmp     sub_13CF6 ;~ 01A2:4040

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_14030: 	goto _eff_14030;
        case m2c::kloc_1403d: 	goto loc_1403d;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _calc_14043(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _calc_14043:
    _begin:
cs=0x1a2;eip=0x004043; 	T(MOV(al, byte_2467b));	// 8688 mov     al, byte_2467B ;~ 01A2:4043
cs=0x1a2;eip=0x004046; 	T(ADD(al, byte_2467c));	// 8689 add     al, byte_2467C ;~ 01A2:4046
cs=0x1a2;eip=0x00404a; 	T(AND(eax, 0x0FF));	// 8690 and     eax, 0FFh ;~ 01A2:404A
cs=0x1a2;eip=0x004050; 	T(ax = eax+eax*4);	// 8691 lea     ax, [eax+eax*4] ;~ 01A2:4050
cs=0x1a2;eip=0x004054; 	T(SHR(ax, 1));	// 8692 shr     ax, 1 ;~ 01A2:4054
cs=0x1a2;eip=0x004056; 	J(RETN(0));	// 8693 retn ;~ 01A2:4056

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_calc_14043: 	goto _calc_14043;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _eff_14067(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _eff_14067:
    _begin:
cs=0x1a2;eip=0x004067; 	T(OR(al, al));	// 8707 or      al, al ;~ 01A2:4067
cs=0x1a2;eip=0x004069; 	J(JZ(loc_14080));	// 8708 jz      short loc_14080 ;~ 01A2:4069
cs=0x1a2;eip=0x00406b; 	T(TEST(al, 0x0F));	// 8709 test    al, 0Fh ;~ 01A2:406B
cs=0x1a2;eip=0x00406d; 	J(JZ(loc_14077));	// 8710 jz      short loc_14077 ;~ 01A2:406D
cs=0x1a2;eip=0x00406f; 	T(AND(al, 0x0F));	// 8711 and     al, 0Fh ;~ 01A2:406F
cs=0x1a2;eip=0x004071; 	X(SUB(byte_2467c, al));	// 8712 sub     byte_2467C, al ;~ 01A2:4071
cs=0x1a2;eip=0x004075; 	J(return _eff_14030(m2c::kloc_1403d, _state););	// 8713 jmp     short loc_1403D ;~ 01A2:4075
loc_14077:
	// 4917 
cs=0x1a2;eip=0x004077; 	T(SHR(al, 4));	// 8717 shr     al, 4 ;~ 01A2:4077
cs=0x1a2;eip=0x00407a; 	X(ADD(byte_2467c, al));	// 8718 add     byte_2467C, al ;~ 01A2:407A
cs=0x1a2;eip=0x00407e; 	J(return _eff_14030(m2c::kloc_1403d, _state););	// 8719 jmp     short loc_1403D ;~ 01A2:407E
loc_14080:
	// 4918 
cs=0x1a2;eip=0x004080; 	X(MOV(byte_2467c, 0));	// 8723 mov     byte_2467C, 0 ;~ 01A2:4080
cs=0x1a2;eip=0x004085; 	J(return _eff_14030(m2c::kloc_1403d, _state););	// 8724 jmp     short loc_1403D ;~ 01A2:4085

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_eff_14067: 	goto _eff_14067;
        case m2c::kloc_14077: 	goto loc_14077;
        case m2c::kloc_14080: 	goto loc_14080;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_14087(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_14087:
    _begin:
cs=0x1a2;eip=0x004087; 	T(XOR(ah, ah));	// 8733 xor     ah, ah ;~ 01A2:4087
cs=0x1a2;eip=0x004089; 	T(OR(al, al));	// 8734 or      al, al ;~ 01A2:4089
cs=0x1a2;eip=0x00408b; 	J(JZ(loc_14090));	// 8735 jz      short loc_14090 ;~ 01A2:408B
cs=0x1a2;eip=0x00408d; 	X(MOV(*(raddr(ds,bx+0x34)), al));	// 8736 mov     [bx+34h], al ;~ 01A2:408D
loc_14090:
	// 4919 
cs=0x1a2;eip=0x004090; 	T(MOV(al, *(raddr(ds,bx+0x34))));	// 8739 mov     al, [bx+34h] ;~ 01A2:4090
cs=0x1a2;eip=0x004093; 	T(CMP(byte_24668, 0));	// 8740 cmp     byte_24668, 0 ;~ 01A2:4093
cs=0x1a2;eip=0x004098; 	J(JZ(loc_140a2));	// 8741 jz      short loc_140A2 ;~ 01A2:4098
cs=0x1a2;eip=0x00409a; 	T(CMP(al, 0x0E0));	// 8742 cmp     al, 0E0h ; 'à' ;~ 01A2:409A
cs=0x1a2;eip=0x00409c; 	J(JNC(loc_140b3));	// 8743 jnb     short loc_140B3 ;~ 01A2:409C
cs=0x1a2;eip=0x00409e; 	T(SHL(ax, 2));	// 8744 shl     ax, 2 ;~ 01A2:409E
cs=0x1a2;eip=0x0040a1; 	J(RETN(0));	// 8745 retn ;~ 01A2:40A1
loc_140a2:
	// 4920 
cs=0x1a2;eip=0x0040a2; 	T(CMP(al, 0x0E0));	// 8749 cmp     al, 0E0h ; 'à' ;~ 01A2:40A2
cs=0x1a2;eip=0x0040a4; 	J(JBE(loc_140b3));	// 8750 jbe     short loc_140B3 ;~ 01A2:40A4
cs=0x1a2;eip=0x0040a6; 	T(MOV(dl, al));	// 8751 mov     dl, al ;~ 01A2:40A6
cs=0x1a2;eip=0x0040a8; 	T(AND(al, 0x0F));	// 8752 and     al, 0Fh ;~ 01A2:40A8
cs=0x1a2;eip=0x0040aa; 	T(CMP(dl, 0x0F0));	// 8753 cmp     dl, 0F0h ; 'ð' ;~ 01A2:40AA
cs=0x1a2;eip=0x0040ad; 	J(JBE(locret_140b2));	// 8754 jbe     short locret_140B2 ;~ 01A2:40AD
cs=0x1a2;eip=0x0040af; 	T(SHL(ax, 2));	// 8755 shl     ax, 2 ;~ 01A2:40AF
locret_140b2:
	// 4921 
cs=0x1a2;eip=0x0040b2; 	J(RETN(0));	// 8758 retn ;~ 01A2:40B2
loc_140b3:
	// 4922 
cs=0x1a2;eip=0x0040b3; 	T(XOR(ax, ax));	// 8763 xor     ax, ax ;~ 01A2:40B3
cs=0x1a2;eip=0x0040b5; 	J(RETN(0));	// 8764 retn ;~ 01A2:40B5

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::kloc_14090: 	goto loc_14090;
        case m2c::kloc_140a2: 	goto loc_140a2;
        case m2c::kloc_140b3: 	goto loc_140b3;
        case m2c::klocret_140b2: 	goto locret_140b2;
        case m2c::ksub_14087: 	goto sub_14087;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group13(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group13:
    _begin:
sub_140b6:
	// 8771 
cs=0x1a2;eip=0x0040b6; 	T(CMP(byte_24671, 1));	// 8773 cmp     byte_24671, 1 ;~ 01A2:40B6
cs=0x1a2;eip=0x0040bb; 	J(JZ(locret_140e5));	// 8774 jz      short locret_140E5 ;~ 01A2:40BB
cs=0x1a2;eip=0x0040bd; 	T(CMP(_play_state, 1));	// 8775 cmp     _play_state, 1 ;~ 01A2:40BD
cs=0x1a2;eip=0x0040c2; 	J(JZ(locret_140e5));	// 8776 jz      short locret_140E5 ;~ 01A2:40C2
cs=0x1a2;eip=0x0040c4; 	X(INC(byte_24668));	// 8777 inc     byte_24668 ;~ 01A2:40C4
cs=0x1a2;eip=0x0040c8; 	T(MOV(al, byte_24668));	// 8778 mov     al, byte_24668 ;~ 01A2:40C8
cs=0x1a2;eip=0x0040cb; 	T(CMP(al, byte_24667));	// 8779 cmp     al, byte_24667 ;~ 01A2:40CB
cs=0x1a2;eip=0x0040cf; 	J(JNC(loc_140e6));	// 8780 jnb     short loc_140E6 ;~ 01A2:40CF
cs=0x1a2;eip=0x0040d1; 	T(MOV(bx, offset(seg003,_volume_25908)));	// 8781 mov     bx, offset _volume_25908 ;~ 01A2:40D1
cs=0x1a2;eip=0x0040d4; 	T(MOV(cx, word_245d4));	// 8782 mov     cx, word_245D4 ;~ 01A2:40D4
loc_140d8:
	// 4923 
cs=0x1a2;eip=0x0040d8; 	X(PUSH(bx));	// 8785 push    bx ;~ 01A2:40D8
cs=0x1a2;eip=0x0040d9; 	X(PUSH(cx));	// 8786 push    cx ;~ 01A2:40D9
cs=0x1a2;eip=0x0040da; 	J(CALL(sub_13813,0));	// 8787 call    sub_13813 ;~ 01A2:40DA
cs=0x1a2;eip=0x0040dd; 	X(POP(cx));	// 8788 pop     cx ;~ 01A2:40DD
cs=0x1a2;eip=0x0040de; 	X(POP(bx));	// 8789 pop     bx ;~ 01A2:40DE
cs=0x1a2;eip=0x0040df; 	T(ADD(bx, 0x50));	// 8790 add     bx, 50h ; 'P' ;~ 01A2:40DF
cs=0x1a2;eip=0x0040e2; 	T(DEC(cx));	// 8791 dec     cx ;~ 01A2:40E2
cs=0x1a2;eip=0x0040e3; 	J(JNZ(loc_140d8));	// 8792 jnz     short loc_140D8 ;~ 01A2:40E3
locret_140e5:
	// 4924 
cs=0x1a2;eip=0x0040e5; 	J(RETN(0));	// 8796 retn ;~ 01A2:40E5
loc_140e6:
	// 4925 
cs=0x1a2;eip=0x0040e6; 	X(MOV(byte_24668, 0));	// 8800 mov     byte_24668, 0 ;~ 01A2:40E6
cs=0x1a2;eip=0x0040eb; 	T(CMP(byte_2466d, 0));	// 8801 cmp     byte_2466D, 0 ;~ 01A2:40EB
cs=0x1a2;eip=0x0040f0; 	J(JNZ(loc_140f7));	// 8802 jnz     short loc_140F7 ;~ 01A2:40F0
cs=0x1a2;eip=0x0040f2; 	J(CALL(sub_135ca,0));	// 8803 call    sub_135CA ;~ 01A2:40F2
cs=0x1a2;eip=0x0040f5; 	J(JMP(loc_14111));	// 8804 jmp     short loc_14111 ;~ 01A2:40F5
loc_140f7:
	// 4926 
cs=0x1a2;eip=0x0040f7; 	T(MOV(bx, offset(seg003,_volume_25908)));	// 8808 mov     bx, offset _volume_25908 ;~ 01A2:40F7
cs=0x1a2;eip=0x0040fa; 	T(MOV(cx, word_245d4));	// 8809 mov     cx, word_245D4 ;~ 01A2:40FA
loc_140fe:
	// 4927 
cs=0x1a2;eip=0x0040fe; 	X(PUSH(bx));	// 8812 push    bx ;~ 01A2:40FE
cs=0x1a2;eip=0x0040ff; 	X(PUSH(cx));	// 8813 push    cx ;~ 01A2:40FF
cs=0x1a2;eip=0x004100; 	J(CALL(sub_13813,0));	// 8814 call    sub_13813 ;~ 01A2:4100
cs=0x1a2;eip=0x004103; 	X(POP(cx));	// 8815 pop     cx ;~ 01A2:4103
cs=0x1a2;eip=0x004104; 	X(POP(bx));	// 8816 pop     bx ;~ 01A2:4104
cs=0x1a2;eip=0x004105; 	T(ADD(bx, 0x50));	// 8817 add     bx, 50h ; 'P' ;~ 01A2:4105
cs=0x1a2;eip=0x004108; 	T(DEC(cx));	// 8818 dec     cx ;~ 01A2:4108
cs=0x1a2;eip=0x004109; 	J(JNZ(loc_140fe));	// 8819 jnz     short loc_140FE ;~ 01A2:4109
cs=0x1a2;eip=0x00410b; 	T(MOV(si, *(dw*)(((db*)&_pointer_245b4))));	// 8820 mov     si, word ptr _pointer_245B4 ;~ 01A2:410B
cs=0x1a2;eip=0x00410f; 	J({;});	// 8821 jmp     short $+2 ;~ 01A2:410F
loc_14111:
	// 4928 
cs=0x1a2;eip=0x004111; 	T(CMP(byte_2466b, 1));	// 8826 cmp     byte_2466B, 1 ;~ 01A2:4111
cs=0x1a2;eip=0x004116; 	J(JZ(loc_141ba));	// 8827 jz      loc_141BA ;~ 01A2:4116
cs=0x1a2;eip=0x00411a; 	T(CMP(byte_2466a, 1));	// 8828 cmp     byte_2466A, 1 ;~ 01A2:411A
cs=0x1a2;eip=0x00411f; 	J(JZ(loc_14153));	// 8829 jz      short loc_14153 ;~ 01A2:411F
cs=0x1a2;eip=0x004121; 	T(CMP(byte_2466c, 0));	// 8830 cmp     byte_2466C, 0 ;~ 01A2:4121
cs=0x1a2;eip=0x004126; 	J(JZ(loc_14131));	// 8831 jz      short loc_14131 ;~ 01A2:4126
cs=0x1a2;eip=0x004128; 	T(XOR(al, al));	// 8832 xor     al, al ;~ 01A2:4128
cs=0x1a2;eip=0x00412a; 	X(XCHG(al, byte_2466c));	// 8833 xchg    al, byte_2466C ;~ 01A2:412A
cs=0x1a2;eip=0x00412e; 	X(MOV(byte_2466d, al));	// 8834 mov     byte_2466D, al ;~ 01A2:412E
loc_14131:
	// 4929 
cs=0x1a2;eip=0x004131; 	T(CMP(byte_2466d, 0));	// 8837 cmp     byte_2466D, 0 ;~ 01A2:4131
cs=0x1a2;eip=0x004136; 	J(JZ(loc_1413e));	// 8838 jz      short loc_1413E ;~ 01A2:4136
cs=0x1a2;eip=0x004138; 	X(DEC(byte_2466d));	// 8839 dec     byte_2466D ;~ 01A2:4138
cs=0x1a2;eip=0x00413c; 	J(JNZ(loc_14142));	// 8840 jnz     short loc_14142 ;~ 01A2:413C
loc_1413e:
	// 4930 
cs=0x1a2;eip=0x00413e; 	X(INC(word_245f6));	// 8843 inc     word_245F6 ;~ 01A2:413E
loc_14142:
	// 4931 
cs=0x1a2;eip=0x004142; 	T(MOV(bx, word_245f0));	// 8846 mov     bx, word_245F0 ;~ 01A2:4142
cs=0x1a2;eip=0x004146; 	T(MOVZX(ax, *((byte_281e8)+bx)));	// 8847 movzx   ax, byte_281E8[bx] ;~ 01A2:4146
cs=0x1a2;eip=0x00414b; 	T(CMP(word_245f6, ax));	// 8848 cmp     word_245F6, ax ;~ 01A2:414B
cs=0x1a2;eip=0x00414f; 	J(JBE(loc_141da));	// 8849 jbe     loc_141DA ;~ 01A2:414F
loc_14153:
	// 4932 
cs=0x1a2;eip=0x004153; 	T(CMP(_play_state, 2));	// 8852 cmp     _play_state, 2 ;~ 01A2:4153
cs=0x1a2;eip=0x004158; 	J(JZ(loc_14184));	// 8853 jz      short loc_14184 ;~ 01A2:4158
cs=0x1a2;eip=0x00415a; 	X(INC(word_245f0));	// 8854 inc     word_245F0 ;~ 01A2:415A
	S(JMP(sub_1415e));sub_1415e:
	// 8861 
cs=0x1a2;eip=0x00415e; 	T(MOV(ax, word_245fa));	// 8862 mov     ax, word_245FA ;~ 01A2:415E
cs=0x1a2;eip=0x004161; 	T(CMP(word_245f0, ax));	// 8863 cmp     word_245F0, ax ;~ 01A2:4161
cs=0x1a2;eip=0x004165; 	J(JC(loc_14184));	// 8864 jb      short loc_14184 ;~ 01A2:4165
cs=0x1a2;eip=0x004167; 	T(TEST(_flag_playsetttings, 4));	// 8865 test    _flag_playsetttings, 4 ;~ 01A2:4167
cs=0x1a2;eip=0x00416c; 	J(JZ(_vlm_141df));	// 8866 jz      short _vlm_141DF ;~ 01A2:416C
cs=0x1a2;eip=0x00416e; 	T(MOV(ax, word_245f8));	// 8867 mov     ax, word_245F8 ;~ 01A2:416E
cs=0x1a2;eip=0x004171; 	X(MOV(word_245f0, ax));	// 8868 mov     word_245F0, ax ;~ 01A2:4171
cs=0x1a2;eip=0x004174; 	T(OR(ax, ax));	// 8869 or      ax, ax ;~ 01A2:4174
cs=0x1a2;eip=0x004176; 	J(JNZ(loc_14184));	// 8870 jnz     short loc_14184 ;~ 01A2:4176
cs=0x1a2;eip=0x004178; 	T(MOV(al, byte_2467a));	// 8871 mov     al, byte_2467A ;~ 01A2:4178
cs=0x1a2;eip=0x00417b; 	J(CALL(sub_13cf6,0));	// 8872 call    sub_13CF6 ;~ 01A2:417B
cs=0x1a2;eip=0x00417e; 	T(MOV(al, byte_24679));	// 8873 mov     al, byte_24679 ;~ 01A2:417E
cs=0x1a2;eip=0x004181; 	J(CALL(_eff_13ce8,0));	// 8874 call    _eff_13CE8 ;~ 01A2:4181
loc_14184:
	// 4933 
cs=0x1a2;eip=0x004184; 	T(MOV(bx, word_245f0));	// 8878 mov     bx, word_245F0 ;~ 01A2:4184
cs=0x1a2;eip=0x004188; 	T(MOV(al, *((byte_280e8)+bx)));	// 8879 mov     al, byte_280E8[bx] ;~ 01A2:4188
cs=0x1a2;eip=0x00418c; 	T(OR(al, al));	// 8880 or      al, al ;~ 01A2:418C
cs=0x1a2;eip=0x00418e; 	J(JZ(loc_141a2));	// 8881 jz      short loc_141A2 ;~ 01A2:418E
cs=0x1a2;eip=0x004190; 	X(PUSH(bx));	// 8882 push    bx ;~ 01A2:4190
cs=0x1a2;eip=0x004191; 	T(CMP(al, 0x0FF));	// 8883 cmp     al, 0FFh ;~ 01A2:4191
cs=0x1a2;eip=0x004193; 	J(JNZ(loc_1419e));	// 8884 jnz     short loc_1419E ;~ 01A2:4193
cs=0x1a2;eip=0x004195; 	T(MOV(al, byte_2467a));	// 8885 mov     al, byte_2467A ;~ 01A2:4195
cs=0x1a2;eip=0x004198; 	J(CALL(sub_13cf6,0));	// 8886 call    sub_13CF6 ;~ 01A2:4198
cs=0x1a2;eip=0x00419b; 	T(MOV(al, byte_24679));	// 8887 mov     al, byte_24679 ;~ 01A2:419B
loc_1419e:
	// 4934 
cs=0x1a2;eip=0x00419e; 	J(CALL(_eff_13ce8,0));	// 8890 call    _eff_13CE8 ;~ 01A2:419E
cs=0x1a2;eip=0x0041a1; 	X(POP(bx));	// 8891 pop     bx ;~ 01A2:41A1
loc_141a2:
	// 4935 
cs=0x1a2;eip=0x0041a2; 	X(BTS(*(dw*)((byte_282e8)), bx));	// 8894 bts     word ptr byte_282E8, bx ;~ 01A2:41A2
cs=0x1a2;eip=0x0041a7; 	T(MOVZX(bx, *((byte_27fe8)+bx)));	// 8895 movzx   bx, byte_27FE8[bx] ;~ 01A2:41A7
cs=0x1a2;eip=0x0041ac; 	X(MOV(_my_seg_index, bx));	// 8896 mov     _my_seg_index, bx ;~ 01A2:41AC
cs=0x1a2;eip=0x0041b0; 	T(SHL(bx, 1));	// 8897 shl     bx, 1 ;~ 01A2:41B0
cs=0x1a2;eip=0x0041b2; 	T(MOV(es, *(dw*)(((db*)_segs_table)+bx)));	// 8898 mov     es, _segs_table[bx] ;~ 01A2:41B2
cs=0x1a2;eip=0x0041b6; 	X(MOV(*(dw*)(((db*)&_pointer_245b4)+2), es));	// 8899 mov     word ptr _pointer_245B4+2, es ;~ 01A2:41B6
loc_141ba:
	// 4936 
cs=0x1a2;eip=0x0041ba; 	T(XOR(ax, ax));	// 8902 xor     ax, ax ;~ 01A2:41BA
cs=0x1a2;eip=0x0041bc; 	X(XCHG(al, byte_24669));	// 8903 xchg    al, byte_24669 ;~ 01A2:41BC
cs=0x1a2;eip=0x0041c0; 	X(MOV(word_245f6, ax));	// 8904 mov     word_245F6, ax ;~ 01A2:41C0
cs=0x1a2;eip=0x0041c3; 	J(CALL(sub_11c0c,0));	// 8905 call    sub_11C0C ;~ 01A2:41C3
cs=0x1a2;eip=0x0041c6; 	X(MOV(byte_2466a, 0));	// 8906 mov     byte_2466A, 0 ;~ 01A2:41C6
cs=0x1a2;eip=0x0041cb; 	X(MOV(byte_2466b, 0));	// 8907 mov     byte_2466B, 0 ;~ 01A2:41CB
cs=0x1a2;eip=0x0041d0; 	X(MOV(byte_2466c, 0));	// 8908 mov     byte_2466C, 0 ;~ 01A2:41D0
cs=0x1a2;eip=0x0041d5; 	X(MOV(byte_2466d, 0));	// 8909 mov     byte_2466D, 0 ;~ 01A2:41D5
loc_141da:
	// 4937 
cs=0x1a2;eip=0x0041da; 	X(MOV(*(dw*)(((db*)&_pointer_245b4)), si));	// 8912 mov     word ptr _pointer_245B4, si ;~ 01A2:41DA
cs=0x1a2;eip=0x0041de; 	J(RETN(0));	// 8913 retn ;~ 01A2:41DE
_vlm_141df:
	// 8920 
cs=0x1a2;eip=0x0041df; 	X(PUSH(cs));	// 8922 push    cs ;~ 01A2:41DF
cs=0x1a2;eip=0x0041e0; 	J(CALL(_volume_12a66,0));	// 8923 call    near ptr _volume_12A66 ;~ 01A2:41E0
cs=0x1a2;eip=0x0041e3; 	X(MOV(byte_24671, 1));	// 8924 mov     byte_24671, 1 ;~ 01A2:41E3
cs=0x1a2;eip=0x0041e8; 	T(MOV(dl, 1));	// 8925 mov     dl, 1 ;~ 01A2:41E8
cs=0x1a2;eip=0x0041ea; 	T(MOV(bx, 0x5344));	// 8926 mov     bx, 5344h       ; DS ;~ 01A2:41EA
cs=0x1a2;eip=0x0041ed; 	T(MOV(cx, 0x4D50));	// 8927 mov     cx, 4D50h       ; MP ;~ 01A2:41ED
cs=0x1a2;eip=0x0041f0; 	T(MOV(ax, 0x60FF));	// 8928 mov     ax, 60FFh ;~ 01A2:41F0
cs=0x1a2;eip=0x0041f3; 	S(_INT(0x2F));	// 8929 int     2Fh             ; IPLAY: get data seg ;~ 01A2:41F3
cs=0x1a2;eip=0x0041f5; 	J(RETN(0));	// 8930 retn ;~ 01A2:41F5

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_vlm_141df: 	goto _vlm_141df;
        case m2c::kloc_140d8: 	goto loc_140d8;
        case m2c::kloc_140e6: 	goto loc_140e6;
        case m2c::kloc_140f7: 	goto loc_140f7;
        case m2c::kloc_140fe: 	goto loc_140fe;
        case m2c::kloc_14111: 	goto loc_14111;
        case m2c::kloc_14131: 	goto loc_14131;
        case m2c::kloc_1413e: 	goto loc_1413e;
        case m2c::kloc_14142: 	goto loc_14142;
        case m2c::kloc_14153: 	goto loc_14153;
        case m2c::kloc_14184: 	goto loc_14184;
        case m2c::kloc_1419e: 	goto loc_1419e;
        case m2c::kloc_141a2: 	goto loc_141a2;
        case m2c::kloc_141ba: 	goto loc_141ba;
        case m2c::kloc_141da: 	goto loc_141da;
        case m2c::klocret_140e5: 	goto locret_140e5;
        case m2c::ksub_140b6: 	goto sub_140b6;
        case m2c::ksub_1415e: 	goto sub_1415e;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group14(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group14:
    _begin:
_snd_initialze:
	// 8937 
cs=0x1a2;eip=0x0041f6; 	T(CMP(_snd_init, 1));	// 8942 cmp     _snd_init, 1 ;~ 01A2:41F6
cs=0x1a2;eip=0x0041fb; 	J(JZ(loc_1420d));	// 8943 jz      short loc_1420D ;~ 01A2:41FB
cs=0x1a2;eip=0x0041fd; 	X(MOV(_snd_init, 1));	// 8944 mov     _snd_init, 1 ;~ 01A2:41FD
cs=0x1a2;eip=0x004202; 	T(MOVZX(bx, _sndcard_type));	// 8945 movzx   bx, _sndcard_type ;~ 01A2:4202
cs=0x1a2;eip=0x004207; 	T(SHL(bx, 1));	// 8946 shl     bx, 1 ;~ 01A2:4207
cs=0x1a2;eip=0x004209; __disp=*(dw*)(((db*)&_snd_init_offs)+bx);
	J(return __dispatch_call(__disp, _state););	// 8947 jmp     _snd_init_offs[bx] ;~ 01A2:4209
loc_1420d:
	// 4938 
cs=0x1a2;eip=0x00420d; 	T(STC);	// 8952 stc ;~ 01A2:420D
cs=0x1a2;eip=0x00420e; 	J(RETN(0));	// 8953 retn ;~ 01A2:420E
_snd_on:
	// 8960 
cs=0x1a2;eip=0x00420f; 	T(CMP(_snd_init, 1));	// 8961 cmp     _snd_init, 1 ;~ 01A2:420F
cs=0x1a2;eip=0x004214; 	J(JNZ(loc_1420d));	// 8962 jnz     short loc_1420D ;~ 01A2:4214
cs=0x1a2;eip=0x004216; 	T(CMP(_snd_set_flag, 1));	// 8963 cmp     _snd_set_flag, 1 ;~ 01A2:4216
cs=0x1a2;eip=0x00421b; 	J(JZ(loc_1420d));	// 8964 jz      short loc_1420D ;~ 01A2:421B
cs=0x1a2;eip=0x00421d; 	X(MOV(_snd_set_flag, 1));	// 8965 mov     _snd_set_flag, 1 ;~ 01A2:421D
cs=0x1a2;eip=0x004222; 	T(MOVZX(bx, _sndcard_type));	// 8966 movzx   bx, _sndcard_type ;~ 01A2:4222
cs=0x1a2;eip=0x004227; 	T(SHL(bx, 1));	// 8967 shl     bx, 1 ;~ 01A2:4227
cs=0x1a2;eip=0x004229; __disp=*(dw*)(((db*)&_snd_on_offs)+bx);
	J(return __dispatch_call(__disp, _state););	// 8968 jmp     _snd_on_offs[bx] ;~ 01A2:4229
_snd_off:
	// 8975 
cs=0x1a2;eip=0x00422d; 	T(CMP(_snd_init, 1));	// 8977 cmp     _snd_init, 1 ;~ 01A2:422D
cs=0x1a2;eip=0x004232; 	J(JNZ(loc_1420d));	// 8978 jnz     short loc_1420D ;~ 01A2:4232
cs=0x1a2;eip=0x004234; 	T(CMP(_snd_set_flag, 0));	// 8979 cmp     _snd_set_flag, 0 ;~ 01A2:4234
cs=0x1a2;eip=0x004239; 	J(JZ(loc_1420d));	// 8980 jz      short loc_1420D ;~ 01A2:4239
cs=0x1a2;eip=0x00423b; 	X(MOV(_snd_set_flag, 0));	// 8981 mov     _snd_set_flag, 0 ;~ 01A2:423B
cs=0x1a2;eip=0x004240; 	X(PUSH(cs));	// 8982 push    cs ;~ 01A2:4240
cs=0x1a2;eip=0x004241; 	J(CALL(_volume_12a66,0));	// 8983 call    near ptr _volume_12A66 ;~ 01A2:4241
cs=0x1a2;eip=0x004244; 	T(MOVZX(bx, _sndcard_type));	// 8984 movzx   bx, _sndcard_type ;~ 01A2:4244
cs=0x1a2;eip=0x004249; 	T(SHL(bx, 1));	// 8985 shl     bx, 1 ;~ 01A2:4249
cs=0x1a2;eip=0x00424b; __disp=*(dw*)(((db*)&_snd_off_offs)+bx);
	J(return __dispatch_call(__disp, _state););	// 8986 jmp     _snd_off_offs[bx] ;~ 01A2:424B
_snd_deinit:
	// 8993 
cs=0x1a2;eip=0x00424f; 	T(CMP(_snd_init, 1));	// 8994 cmp     _snd_init, 1 ;~ 01A2:424F
cs=0x1a2;eip=0x004254; 	J(JNZ(loc_1420d));	// 8995 jnz     short loc_1420D ;~ 01A2:4254
cs=0x1a2;eip=0x004256; 	X(MOV(_snd_init, 0));	// 8996 mov     _snd_init, 0 ;~ 01A2:4256
cs=0x1a2;eip=0x00425b; 	J(CALL(_snd_off,0));	// 8997 call    _snd_off ;~ 01A2:425B
cs=0x1a2;eip=0x00425e; 	T(MOVZX(bx, _sndcard_type));	// 8998 movzx   bx, _sndcard_type ;~ 01A2:425E
cs=0x1a2;eip=0x004263; 	T(SHL(bx, 1));	// 8999 shl     bx, 1 ;~ 01A2:4263
cs=0x1a2;eip=0x004265; __disp=*(dw*)(((db*)&_snd_deinit_offs)+bx);
	J(return __dispatch_call(__disp, _state););	// 9000 jmp     _snd_deinit_offs[bx] ;~ 01A2:4265

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_snd_deinit: 	goto _snd_deinit;
        case m2c::k_snd_initialze: 	goto _snd_initialze;
        case m2c::k_snd_off: 	goto _snd_off;
        case m2c::k_snd_on: 	goto _snd_on;
        case m2c::kloc_1420d: 	goto loc_1420d;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group15(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group15:
    _begin:
seg000_4332_proc:
	// 9087 
loc_14332:
	// 4945 
cs=0x1a2;eip=0x004332; 	T(STC);	// 9089 stc ;~ 01A2:4332
cs=0x1a2;eip=0x004333; 	J(RETN(0));	// 9090 retn ;~ 01A2:4333
_proaud_init:
	// 9454 
cs=0x1a2;eip=0x004570; 	X(MOV(_sndflags_24622, 9));	// 9459 mov     _sndflags_24622, 9 ;~ 01A2:4570
cs=0x1a2;eip=0x004575; 	X(MOV(byte_24623, 1));	// 9460 mov     byte_24623, 1 ;~ 01A2:4575
cs=0x1a2;eip=0x00457a; 	X(MOV(_bit_mode, 16));	// 9461 mov     _bit_mode, 16 ;~ 01A2:457A
cs=0x1a2;eip=0x00457f; 	T(MOV(bx, 0x3F3F));	// 9462 mov     bx, 3F3Fh ;~ 01A2:457F
cs=0x1a2;eip=0x004582; 	T(MOV(ax, 0x0BC00));	// 9463 mov     ax, 0BC00h      ; Return: if installed, BX XOR CX XOR DX = 4D56h ('MV') ;~ 01A2:4582
cs=0x1a2;eip=0x004585; 	S(_INT(0x2F));	// 9466 int     2Fh             ; - Multiplex - Windows 3.0 EGA.SYS - INSTALLATION CHECK ;~ 01A2:4585
cs=0x1a2;eip=0x004587; 	T(XOR(bx, cx));	// 9470 xor     bx, cx ;~ 01A2:4587
cs=0x1a2;eip=0x004589; 	T(XOR(bx, dx));	// 9471 xor     bx, dx ;~ 01A2:4589
cs=0x1a2;eip=0x00458b; 	T(MOV(dx, 0x0FC0));	// 9472 mov     dx, 0FC0h ;~ 01A2:458B
cs=0x1a2;eip=0x00458e; 	T(CMP(bx, 0x4D56));	// 9473 cmp     bx, 4D56h       ; VM ;~ 01A2:458E
cs=0x1a2;eip=0x004592; 	J(JNZ(loc_14332));	// 9474 jnz     loc_14332 ;~ 01A2:4592
cs=0x1a2;eip=0x004596; 	T(MOV(dx, _snd_base_port));	// 9475 mov     dx, _snd_base_port ;~ 01A2:4596
cs=0x1a2;eip=0x00459a; 	T(CMP(dx, 0x0FFFF));	// 9476 cmp     dx, 0FFFFh ;~ 01A2:459A
cs=0x1a2;eip=0x00459d; 	J(JNZ(loc_145a6));	// 9477 jnz     short loc_145A6 ;~ 01A2:459D
cs=0x1a2;eip=0x00459f; 	J(CALL(_proaud_spectr_14,0));	// 9478 call    _proaud_spectr_14 ;~ 01A2:459F
cs=0x1a2;eip=0x0045a2; 	J(JC(loc_1464f));	// 9479 jb      loc_1464F ;~ 01A2:45A2
loc_145a6:
	// 4962 
cs=0x1a2;eip=0x0045a6; 	X(MOV(word_24646, dx));	// 9482 mov     word_24646, dx ;~ 01A2:45A6
cs=0x1a2;eip=0x0045aa; 	X(MOV(_snd_base_port, dx));	// 9483 mov     _snd_base_port, dx ;~ 01A2:45AA
cs=0x1a2;eip=0x0045ae; 	T(XOR(dx, 0x388));	// 9484 xor     dx, 388h ;~ 01A2:45AE
cs=0x1a2;eip=0x0045b2; 	X(MOV(_sound_port, dx));	// 9485 mov     _sound_port, dx ;~ 01A2:45B2
cs=0x1a2;eip=0x0045b6; 	T(MOV(ax, 0x0BC04));	// 9486 mov     ax, 0BC04h      ; INT 2F - MediaVision MVSOUND.SYS - GET DMA AND IRQ CHANNELS ;~ 01A2:45B6
cs=0x1a2;eip=0x0045b9; 	S(_INT(0x2F));	// 9492 int     2Fh             ; - Multiplex - Windows 3.0 EGA.SYS - ;~ 01A2:45B9
cs=0x1a2;eip=0x0045bb; 	T(CMP(_irq_number, 0x0FF));	// 9493 cmp     _irq_number, 0FFh ;~ 01A2:45BB
cs=0x1a2;eip=0x0045c0; 	J(JNZ(loc_145c6));	// 9494 jnz     short loc_145C6 ;~ 01A2:45C0
cs=0x1a2;eip=0x0045c2; 	X(MOV(_irq_number, cl));	// 9495 mov     _irq_number, cl ;~ 01A2:45C2
loc_145c6:
	// 4963 
cs=0x1a2;eip=0x0045c6; 	T(CMP(_dma_channel, 0x0FF));	// 9498 cmp     _dma_channel, 0FFh ;~ 01A2:45C6
cs=0x1a2;eip=0x0045cb; 	J(JNZ(loc_145d1));	// 9499 jnz     short loc_145D1 ;~ 01A2:45CB
cs=0x1a2;eip=0x0045cd; 	X(MOV(_dma_channel, bl));	// 9500 mov     _dma_channel, bl ;~ 01A2:45CD
loc_145d1:
	// 4964 
cs=0x1a2;eip=0x0045d1; 	T(MOV(al, _irq_number));	// 9503 mov     al, _irq_number ;~ 01A2:45D1
cs=0x1a2;eip=0x0045d4; 	X(MOV(byte_2464b, al));	// 9504 mov     byte_2464B, al ;~ 01A2:45D4
cs=0x1a2;eip=0x0045d7; 	T(MOV(al, _dma_channel));	// 9505 mov     al, _dma_channel ;~ 01A2:45D7
cs=0x1a2;eip=0x0045da; 	X(MOV(byte_2464a, al));	// 9506 mov     byte_2464A, al ;~ 01A2:45DA
cs=0x1a2;eip=0x0045dd; 	T(MOV(dx, 0x12));	// 9507 mov     dx, 12h ;~ 01A2:45DD
cs=0x1a2;eip=0x0045e0; 	T(MOV(ax, 0x34DC));	// 9508 mov     ax, 34DCh ;~ 01A2:45E0
cs=0x1a2;eip=0x0045e3; 	T(CMP(byte_24623, 1));	// 9509 cmp     byte_24623, 1 ;~ 01A2:45E3
cs=0x1a2;eip=0x0045e8; 	J(JNZ(loc_145ee));	// 9510 jnz     short loc_145EE ;~ 01A2:45E8
cs=0x1a2;eip=0x0045ea; 	T(SHR(dx, 1));	// 9511 shr     dx, 1 ;~ 01A2:45EA
cs=0x1a2;eip=0x0045ec; 	T(RCR(ax, 1));	// 9512 rcr     ax, 1 ;~ 01A2:45EC
loc_145ee:
	// 4965 
cs=0x1a2;eip=0x0045ee; 	X(PUSH(ax));	// 9515 push    ax ;~ 01A2:45EE
cs=0x1a2;eip=0x0045ef; 	X(PUSH(dx));	// 9516 push    dx ;~ 01A2:45EF
cs=0x1a2;eip=0x0045f0; 	X(DIV2(_freq1));	// 9517 div     _freq1 ;~ 01A2:45F0
cs=0x1a2;eip=0x0045f4; 	T(MOV(cx, ax));	// 9518 mov     cx, ax ;~ 01A2:45F4
cs=0x1a2;eip=0x0045f6; 	X(POP(dx));	// 9519 pop     dx ;~ 01A2:45F6
cs=0x1a2;eip=0x0045f7; 	X(POP(ax));	// 9520 pop     ax ;~ 01A2:45F7
cs=0x1a2;eip=0x0045f8; 	T(DIV2(cx));	// 9521 div     cx ;~ 01A2:45F8
cs=0x1a2;eip=0x0045fa; 	X(MOV(_freq1, ax));	// 9522 mov     _freq1, ax ;~ 01A2:45FA
cs=0x1a2;eip=0x0045fd; 	T(MOV(dx, 0x0B8B));	// 9523 mov     dx, 0B8Bh ;~ 01A2:45FD
cs=0x1a2;eip=0x004600; 	T(XOR(dx, _sound_port));	// 9524 xor     dx, _sound_port ;~ 01A2:4600
cs=0x1a2;eip=0x004604; 	S(IN(al, dx));	// 9525 in      al, dx ;~ 01A2:4604
cs=0x1a2;eip=0x004605; 	T(MOV(eax, 0x1000));	// 9526 mov     eax, 1000h ;~ 01A2:4605
cs=0x1a2;eip=0x00460b; 	T(MOV(cl, byte_2464a));	// 9527 mov     cl, byte_2464A ;~ 01A2:460B
cs=0x1a2;eip=0x00460f; 	J(CALL(_alloc_dma_buf,0));	// 9528 call    _alloc_dma_buf ;~ 01A2:460F
cs=0x1a2;eip=0x004612; 	X(MOV(*(dw*)(((db*)&_audio_buf_pointer)), 0));	// 9529 mov     word ptr _audio_buf_pointer, 0 ;~ 01A2:4612
cs=0x1a2;eip=0x004618; 	X(MOV(*(dw*)(((db*)&_audio_buf_pointer)+2), ax));	// 9530 mov     word ptr _audio_buf_pointer+2, ax ;~ 01A2:4618
cs=0x1a2;eip=0x00461b; 	X(PUSHF);	// 9531 pushf ;~ 01A2:461B
cs=0x1a2;eip=0x00461c; 	T(CLI);	// 9532 cli ;~ 01A2:461C
cs=0x1a2;eip=0x00461d; 	T(MOV(dx, 0x0B8A));	// 9533 mov     dx, 0B8Ah ;~ 01A2:461D
cs=0x1a2;eip=0x004620; 	T(XOR(dx, _sound_port));	// 9534 xor     dx, _sound_port ;~ 01A2:4620
cs=0x1a2;eip=0x004624; 	T(MOV(al, 0x21));	// 9535 mov     al, 21h ; '!' ;~ 01A2:4624
cs=0x1a2;eip=0x004626; 	S(OUT(dx, al));	// 9536 out     dx, al ;~ 01A2:4626
cs=0x1a2;eip=0x004627; 	T(MOV(dx, 0x8389));	// 9537 mov     dx, 8389h ;~ 01A2:4627
cs=0x1a2;eip=0x00462a; 	T(XOR(dx, _sound_port));	// 9538 xor     dx, _sound_port ;~ 01A2:462A
cs=0x1a2;eip=0x00462e; 	S(IN(al, dx));	// 9539 in      al, dx ;~ 01A2:462E
cs=0x1a2;eip=0x00462f; 	T(AND(al, 0x0F0));	// 9540 and     al, 0F0h ;~ 01A2:462F
cs=0x1a2;eip=0x004631; 	T(OR(al, 7));	// 9541 or      al, 7 ;~ 01A2:4631
cs=0x1a2;eip=0x004633; 	S(OUT(dx, al));	// 9542 out     dx, al ;~ 01A2:4633
cs=0x1a2;eip=0x004634; 	T(MOV(dx, 0x0F8A));	// 9543 mov     dx, 0F8Ah ;~ 01A2:4634
cs=0x1a2;eip=0x004637; 	T(XOR(dx, _sound_port));	// 9544 xor     dx, _sound_port ;~ 01A2:4637
cs=0x1a2;eip=0x00463b; 	T(MOV(al, 0x0F9));	// 9545 mov     al, 0F9h ; 'ù' ;~ 01A2:463B
cs=0x1a2;eip=0x00463d; 	S(OUT(dx, al));	// 9546 out     dx, al ;~ 01A2:463D
cs=0x1a2;eip=0x00463e; 	T(MOV(dx, 0x0B89));	// 9547 mov     dx, 0B89h ;~ 01A2:463E
cs=0x1a2;eip=0x004641; 	T(XOR(dx, _sound_port));	// 9548 xor     dx, _sound_port ;~ 01A2:4641
cs=0x1a2;eip=0x004645; 	S(OUT(dx, al));	// 9549 out     dx, al ;~ 01A2:4645
cs=0x1a2;eip=0x004646; 	T(ADD(dl, 2));	// 9550 add     dl, 2 ;~ 01A2:4646
cs=0x1a2;eip=0x004649; 	T(MOV(al, 8));	// 9551 mov     al, 8 ;~ 01A2:4649
cs=0x1a2;eip=0x00464b; 	S(OUT(dx, al));	// 9552 out     dx, al ;~ 01A2:464B
cs=0x1a2;eip=0x00464c; 	X(POPF);	// 9553 popf ;~ 01A2:464C
cs=0x1a2;eip=0x00464d; 	T(CLC);	// 9554 clc ;~ 01A2:464D
cs=0x1a2;eip=0x00464e; 	J(RETN(0));	// 9555 retn ;~ 01A2:464E
loc_1464f:
	// 4966 
cs=0x1a2;eip=0x00464f; 	T(MOV(dx, offset(seg003,_aerrorsoundcardn)));	// 9559 mov     dx, offset _aErrorSoundcardN ; "Error: Soundcard not found!\r\n" ;~ 01A2:464F
cs=0x1a2;eip=0x004652; 	J(JMP(loc_14332));	// 9560 jmp     loc_14332 ;~ 01A2:4652
_sb16_init:
	// 10219 
cs=0x1a2;eip=0x004a73; 	X(MOV(_sndflags_24622, 9));	// 10221 mov     _sndflags_24622, 9 ;~ 01A2:4A73
cs=0x1a2;eip=0x004a78; 	X(MOV(byte_24623, 1));	// 10222 mov     byte_24623, 1 ;~ 01A2:4A78
cs=0x1a2;eip=0x004a7d; 	X(MOV(_bit_mode, 16));	// 10223 mov     _bit_mode, 16 ;~ 01A2:4A7D
cs=0x1a2;eip=0x004a82; 	J(CALL(_sb16_detect_port,0));	// 10224 call    _sb16_detect_port ;~ 01A2:4A82
cs=0x1a2;eip=0x004a85; 	T(MOV(dx, offset(seg003,_aerrorsoundcardn)));	// 10225 mov     dx, offset _aErrorSoundcardN ; "Error: Soundcard not found!\r\n" ;~ 01A2:4A85
cs=0x1a2;eip=0x004a88; 	J(JC(loc_14332));	// 10226 jb      loc_14332 ;~ 01A2:4A88
cs=0x1a2;eip=0x004a8c; 	T(MOV(al, _irq_number));	// 10227 mov     al, _irq_number ;~ 01A2:4A8C
cs=0x1a2;eip=0x004a8f; 	X(MOV(_sb_irq_number, al));	// 10228 mov     _sb_irq_number, al ;~ 01A2:4A8F
cs=0x1a2;eip=0x004a92; 	T(CMP(al, 0x0FF));	// 10229 cmp     al, 0FFh ;~ 01A2:4A92
cs=0x1a2;eip=0x004a94; 	J(JNZ(loc_14abb));	// 10230 jnz     short loc_14ABB ;~ 01A2:4A94
cs=0x1a2;eip=0x004a96; 	T(MOV(ah, 0x80));	// 10231 mov     ah, 80h ; '€' ;~ 01A2:4A96
cs=0x1a2;eip=0x004a98; 	J(CALL(_readmixersb,0));	// 10232 call    _ReadMixerSB ;~ 01A2:4A98
cs=0x1a2;eip=0x004a9b; 	T(CMP(al, 0x0FF));	// 10233 cmp     al, 0FFh ;~ 01A2:4A9B
cs=0x1a2;eip=0x004a9d; 	J(JZ(loc_14abb));	// 10234 jz      short loc_14ABB ;~ 01A2:4A9D
cs=0x1a2;eip=0x004a9f; 	T(MOV(ah, 2));	// 10235 mov     ah, 2 ;~ 01A2:4A9F
cs=0x1a2;eip=0x004aa1; 	T(SHR(al, 1));	// 10236 shr     al, 1 ;~ 01A2:4AA1
cs=0x1a2;eip=0x004aa3; 	J(JC(loc_14ab3));	// 10237 jb      short loc_14AB3 ;~ 01A2:4AA3
cs=0x1a2;eip=0x004aa5; 	T(MOV(ah, 5));	// 10238 mov     ah, 5 ;~ 01A2:4AA5
cs=0x1a2;eip=0x004aa7; 	T(SHR(al, 1));	// 10239 shr     al, 1 ;~ 01A2:4AA7
cs=0x1a2;eip=0x004aa9; 	J(JC(loc_14ab3));	// 10240 jb      short loc_14AB3 ;~ 01A2:4AA9
cs=0x1a2;eip=0x004aab; 	T(MOV(ah, 7));	// 10241 mov     ah, 7 ;~ 01A2:4AAB
cs=0x1a2;eip=0x004aad; 	T(SHR(al, 1));	// 10242 shr     al, 1 ;~ 01A2:4AAD
cs=0x1a2;eip=0x004aaf; 	J(JC(loc_14ab3));	// 10243 jb      short loc_14AB3 ;~ 01A2:4AAF
cs=0x1a2;eip=0x004ab1; 	T(MOV(ah, 0x0A));	// 10244 mov     ah, 0Ah ;~ 01A2:4AB1
loc_14ab3:
	// 5001 
cs=0x1a2;eip=0x004ab3; 	X(MOV(_sb_irq_number, ah));	// 10248 mov     _sb_irq_number, ah ;~ 01A2:4AB3
cs=0x1a2;eip=0x004ab7; 	X(MOV(_irq_number, ah));	// 10249 mov     _irq_number, ah ;~ 01A2:4AB7
loc_14abb:
	// 5002 
cs=0x1a2;eip=0x004abb; 	T(MOV(al, _dma_channel));	// 10253 mov     al, _dma_channel ;~ 01A2:4ABB
cs=0x1a2;eip=0x004abe; 	X(MOV(_dma_chn_mask, al));	// 10254 mov     _dma_chn_mask, al ;~ 01A2:4ABE
cs=0x1a2;eip=0x004ac1; 	T(CMP(al, 0x0FF));	// 10255 cmp     al, 0FFh ;~ 01A2:4AC1
cs=0x1a2;eip=0x004ac3; 	J(JNZ(loc_14afd));	// 10256 jnz     short loc_14AFD ;~ 01A2:4AC3
cs=0x1a2;eip=0x004ac5; 	T(MOV(ah, 0x81));	// 10257 mov     ah, 81h ;~ 01A2:4AC5
cs=0x1a2;eip=0x004ac7; 	J(CALL(_readmixersb,0));	// 10258 call    _ReadMixerSB ;~ 01A2:4AC7
cs=0x1a2;eip=0x004aca; 	T(CMP(al, 0x0FF));	// 10259 cmp     al, 0FFh ;~ 01A2:4ACA
cs=0x1a2;eip=0x004acc; 	J(JZ(loc_14afd));	// 10260 jz      short loc_14AFD ;~ 01A2:4ACC
cs=0x1a2;eip=0x004ace; 	T(CMP(_bit_mode, 8));	// 10261 cmp     _bit_mode, 8 ;~ 01A2:4ACE
cs=0x1a2;eip=0x004ad3; 	J(JZ(loc_14ae7));	// 10262 jz      short loc_14AE7 ;~ 01A2:4AD3
cs=0x1a2;eip=0x004ad5; 	T(MOV(ah, 7));	// 10263 mov     ah, 7 ;~ 01A2:4AD5
cs=0x1a2;eip=0x004ad7; 	T(TEST(al, 0x80));	// 10264 test    al, 80h ;~ 01A2:4AD7
cs=0x1a2;eip=0x004ad9; 	J(JNZ(loc_14af5));	// 10265 jnz     short loc_14AF5 ;~ 01A2:4AD9
cs=0x1a2;eip=0x004adb; 	T(MOV(ah, 6));	// 10266 mov     ah, 6 ;~ 01A2:4ADB
cs=0x1a2;eip=0x004add; 	T(TEST(al, 0x40));	// 10267 test    al, 40h ;~ 01A2:4ADD
cs=0x1a2;eip=0x004adf; 	J(JNZ(loc_14af5));	// 10268 jnz     short loc_14AF5 ;~ 01A2:4ADF
cs=0x1a2;eip=0x004ae1; 	T(MOV(ah, 5));	// 10269 mov     ah, 5 ;~ 01A2:4AE1
cs=0x1a2;eip=0x004ae3; 	T(TEST(al, 0x20));	// 10270 test    al, 20h ;~ 01A2:4AE3
cs=0x1a2;eip=0x004ae5; 	J(JNZ(loc_14af5));	// 10271 jnz     short loc_14AF5 ;~ 01A2:4AE5
loc_14ae7:
	// 5003 
cs=0x1a2;eip=0x004ae7; 	T(MOV(ah, 3));	// 10274 mov     ah, 3 ;~ 01A2:4AE7
cs=0x1a2;eip=0x004ae9; 	T(TEST(al, 4));	// 10275 test    al, 4 ;~ 01A2:4AE9
cs=0x1a2;eip=0x004aeb; 	J(JNZ(loc_14af5));	// 10276 jnz     short loc_14AF5 ;~ 01A2:4AEB
cs=0x1a2;eip=0x004aed; 	T(MOV(ah, 1));	// 10277 mov     ah, 1 ;~ 01A2:4AED
cs=0x1a2;eip=0x004aef; 	T(TEST(al, 2));	// 10278 test    al, 2 ;~ 01A2:4AEF
cs=0x1a2;eip=0x004af1; 	J(JNZ(loc_14af5));	// 10279 jnz     short loc_14AF5 ;~ 01A2:4AF1
cs=0x1a2;eip=0x004af3; 	T(MOV(ah, 0));	// 10280 mov     ah, 0 ;~ 01A2:4AF3
loc_14af5:
	// 5004 
cs=0x1a2;eip=0x004af5; 	X(MOV(_dma_chn_mask, ah));	// 10284 mov     _dma_chn_mask, ah ;~ 01A2:4AF5
cs=0x1a2;eip=0x004af9; 	X(MOV(_dma_channel, ah));	// 10285 mov     _dma_channel, ah ;~ 01A2:4AF9
loc_14afd:
	// 5005 
cs=0x1a2;eip=0x004afd; 	J(CALL(_sb16_sound_on,0));	// 10289 call    _sb16_sound_on ;~ 01A2:4AFD
cs=0x1a2;eip=0x004b00; 	T(MOV(eax, 0x1000));	// 10290 mov     eax, 1000h ;~ 01A2:4B00
cs=0x1a2;eip=0x004b06; 	T(MOV(cl, _dma_chn_mask));	// 10291 mov     cl, _dma_chn_mask ;~ 01A2:4B06
cs=0x1a2;eip=0x004b0a; 	J(CALL(_alloc_dma_buf,0));	// 10292 call    _alloc_dma_buf ;~ 01A2:4B0A
cs=0x1a2;eip=0x004b0d; 	X(MOV(*(dw*)(((db*)&_audio_buf_pointer)), 0));	// 10293 mov     word ptr _audio_buf_pointer, 0 ;~ 01A2:4B0D
cs=0x1a2;eip=0x004b13; 	X(MOV(*(dw*)(((db*)&_audio_buf_pointer)+2), ax));	// 10294 mov     word ptr _audio_buf_pointer+2, ax ;~ 01A2:4B13
cs=0x1a2;eip=0x004b16; 	T(CLC);	// 10295 clc ;~ 01A2:4B16
cs=0x1a2;eip=0x004b17; 	J(RETN(0));	// 10296 retn ;~ 01A2:4B17
_sbpro_init:
	// 10483 
cs=0x1a2;eip=0x004c06; 	X(MOV(_sndflags_24622, 9));	// 10485 mov     _sndflags_24622, 9 ;~ 01A2:4C06
cs=0x1a2;eip=0x004c0b; 	X(MOV(byte_24623, 1));	// 10486 mov     byte_24623, 1 ;~ 01A2:4C0B
cs=0x1a2;eip=0x004c10; 	X(MOV(_bit_mode, 8));	// 10487 mov     _bit_mode, 8 ;~ 01A2:4C10
cs=0x1a2;eip=0x004c15; 	J(CALL(_sb_detect_irq,0));	// 10488 call    _sb_detect_irq ;~ 01A2:4C15
cs=0x1a2;eip=0x004c18; 	J(JC(loc_14332));	// 10489 jb      loc_14332 ;~ 01A2:4C18
cs=0x1a2;eip=0x004c1c; 	T(MOV(dx, 0x0F));	// 10490 mov     dx, 0Fh ;~ 01A2:4C1C
cs=0x1a2;eip=0x004c1f; 	T(MOV(ax, 0x4240));	// 10491 mov     ax, 4240h       ; 0F4240h SB time constant ;~ 01A2:4C1F
cs=0x1a2;eip=0x004c22; 	X(DIV2(_freq1));	// 10492 div     _freq1 ;~ 01A2:4C22
cs=0x1a2;eip=0x004c26; 	T(MOV(bx, ax));	// 10493 mov     bx, ax ;~ 01A2:4C26
cs=0x1a2;eip=0x004c28; 	T(MOV(dx, 0x0F));	// 10494 mov     dx, 0Fh ;~ 01A2:4C28
cs=0x1a2;eip=0x004c2b; 	T(MOV(ax, 0x4240));	// 10495 mov     ax, 4240h ;~ 01A2:4C2B
cs=0x1a2;eip=0x004c2e; 	T(DIV2(bx));	// 10496 div     bx ;~ 01A2:4C2E
cs=0x1a2;eip=0x004c30; 	X(MOV(_freq1, ax));	// 10497 mov     _freq1, ax ;~ 01A2:4C30
cs=0x1a2;eip=0x004c33; 	T(MOV(eax, 0x1000));	// 10498 mov     eax, 1000h ;~ 01A2:4C33
cs=0x1a2;eip=0x004c39; 	T(MOV(cl, _dma_chn_mask));	// 10499 mov     cl, _dma_chn_mask ;~ 01A2:4C39
cs=0x1a2;eip=0x004c3d; 	J(CALL(_alloc_dma_buf,0));	// 10500 call    _alloc_dma_buf ;~ 01A2:4C3D
cs=0x1a2;eip=0x004c40; 	X(MOV(*(dw*)(((db*)&_audio_buf_pointer)), 0));	// 10501 mov     word ptr _audio_buf_pointer, 0 ;~ 01A2:4C40
cs=0x1a2;eip=0x004c46; 	X(MOV(*(dw*)(((db*)&_audio_buf_pointer)+2), ax));	// 10502 mov     word ptr _audio_buf_pointer+2, ax ;~ 01A2:4C46
cs=0x1a2;eip=0x004c49; 	T(MOV(dx, 0x0F));	// 10503 mov     dx, 0Fh ;~ 01A2:4C49
cs=0x1a2;eip=0x004c4c; 	T(MOV(ax, 0x4240));	// 10504 mov     ax, 4240h ;~ 01A2:4C4C
cs=0x1a2;eip=0x004c4f; 	X(DIV2(_freq1));	// 10505 div     _freq1 ;~ 01A2:4C4F
cs=0x1a2;eip=0x004c53; 	T(SHR(al, 1));	// 10506 shr     al, 1 ;~ 01A2:4C53
cs=0x1a2;eip=0x004c55; 	T(NEG(al));	// 10507 neg     al ;~ 01A2:4C55
cs=0x1a2;eip=0x004c57; 	X(MOV(_sb_timeconst, al));	// 10508 mov     _sb_timeconst, al ;~ 01A2:4C57
cs=0x1a2;eip=0x004c5a; 	T(CLC);	// 10509 clc ;~ 01A2:4C5A
cs=0x1a2;eip=0x004c5b; 	J(RETN(0));	// 10510 retn ;~ 01A2:4C5B
_sb_init:
	// 10663 
cs=0x1a2;eip=0x004d23; 	X(MOV(_sndflags_24622, 9));	// 10665 mov     _sndflags_24622, 9 ;~ 01A2:4D23
cs=0x1a2;eip=0x004d28; 	X(MOV(byte_24623, 0));	// 10666 mov     byte_24623, 0 ;~ 01A2:4D28
cs=0x1a2;eip=0x004d2d; 	X(MOV(_bit_mode, 8));	// 10667 mov     _bit_mode, 8 ;~ 01A2:4D2D
cs=0x1a2;eip=0x004d32; 	J(CALL(_sb_detect_irq,0));	// 10668 call    _sb_detect_irq ;~ 01A2:4D32
cs=0x1a2;eip=0x004d35; 	J(JC(loc_14332));	// 10669 jb      loc_14332 ;~ 01A2:4D35
cs=0x1a2;eip=0x004d39; 	T(MOV(dx, 0x0F));	// 10670 mov     dx, 0Fh ;~ 01A2:4D39
cs=0x1a2;eip=0x004d3c; 	T(MOV(ax, 0x4240));	// 10671 mov     ax, 4240h ;~ 01A2:4D3C
cs=0x1a2;eip=0x004d3f; 	X(DIV2(_freq1));	// 10672 div     _freq1 ;~ 01A2:4D3F
cs=0x1a2;eip=0x004d43; 	T(MOV(bx, ax));	// 10673 mov     bx, ax ;~ 01A2:4D43
cs=0x1a2;eip=0x004d45; 	T(MOV(dx, 0x0F));	// 10674 mov     dx, 0Fh ;~ 01A2:4D45
cs=0x1a2;eip=0x004d48; 	T(MOV(ax, 0x4240));	// 10675 mov     ax, 4240h ;~ 01A2:4D48
cs=0x1a2;eip=0x004d4b; 	T(DIV2(bx));	// 10676 div     bx ;~ 01A2:4D4B
cs=0x1a2;eip=0x004d4d; 	X(MOV(_freq1, ax));	// 10677 mov     _freq1, ax ;~ 01A2:4D4D
cs=0x1a2;eip=0x004d50; 	T(MOV(eax, 0x1000));	// 10678 mov     eax, 1000h ;~ 01A2:4D50
cs=0x1a2;eip=0x004d56; 	T(MOV(cl, _dma_chn_mask));	// 10679 mov     cl, _dma_chn_mask ;~ 01A2:4D56
cs=0x1a2;eip=0x004d5a; 	J(CALL(_alloc_dma_buf,0));	// 10680 call    _alloc_dma_buf ;~ 01A2:4D5A
cs=0x1a2;eip=0x004d5d; 	X(MOV(*(dw*)(((db*)&_audio_buf_pointer)), 0));	// 10681 mov     word ptr _audio_buf_pointer, 0 ;~ 01A2:4D5D
	return seg000_4d63_proc(0, _state);
    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_proaud_init: 	goto _proaud_init;
        case m2c::k_sb16_init: 	goto _sb16_init;
        case m2c::k_sb_init: 	goto _sb_init;
        case m2c::k_sbpro_init: 	goto _sbpro_init;
        case m2c::kloc_145a6: 	goto loc_145a6;
        case m2c::kloc_145c6: 	goto loc_145c6;
        case m2c::kloc_145d1: 	goto loc_145d1;
        case m2c::kloc_145ee: 	goto loc_145ee;
        case m2c::kloc_1464f: 	goto loc_1464f;
        case m2c::kloc_14ab3: 	goto loc_14ab3;
        case m2c::kloc_14abb: 	goto loc_14abb;
        case m2c::kloc_14ae7: 	goto loc_14ae7;
        case m2c::kloc_14af5: 	goto loc_14af5;
        case m2c::kloc_14afd: 	goto loc_14afd;
        case m2c::kseg000_4332_proc: 	goto seg000_4332_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _gravis_set(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _gravis_set:
    _begin:
cs=0x1a2;eip=0x004334; 	X(PUSHF);	// 9099 pushf ;~ 01A2:4334
cs=0x1a2;eip=0x004335; 	T(CLI);	// 9100 cli ;~ 01A2:4335
cs=0x1a2;eip=0x004336; 	T(MOV(dx, _gravis_port));	// 9101 mov     dx, _gravis_port ;~ 01A2:4336
cs=0x1a2;eip=0x00433a; 	T(MOV(al, 0x45));	// 9102 mov     al, 45h ; 'E' ;~ 01A2:433A
cs=0x1a2;eip=0x00433c; 	S(OUT(dx, al));	// 9103 out     dx, al ;~ 01A2:433C
cs=0x1a2;eip=0x00433d; 	T(ADD(dl, 2));	// 9104 add     dl, 2 ;~ 01A2:433D
cs=0x1a2;eip=0x004340; 	T(XOR(al, al));	// 9105 xor     al, al ;~ 01A2:4340
cs=0x1a2;eip=0x004342; 	S(OUT(dx, al));	// 9106 out     dx, al ;~ 01A2:4342
cs=0x1a2;eip=0x004343; 	T(MOV(al, 4));	// 9107 mov     al, 4 ;~ 01A2:4343
cs=0x1a2;eip=0x004345; 	S(OUT(dx, al));	// 9108 out     dx, al ;~ 01A2:4345
cs=0x1a2;eip=0x004346; 	T(SUB(dx, 0x0FD));	// 9109 sub     dx, 0FDh ; 'ý' ;~ 01A2:4346
cs=0x1a2;eip=0x00434a; 	T(MOV(al, 4));	// 9110 mov     al, 4 ;~ 01A2:434A
cs=0x1a2;eip=0x00434c; 	S(OUT(dx, al));	// 9111 out     dx, al ;~ 01A2:434C
cs=0x1a2;eip=0x00434d; 	T(INC(dx));	// 9112 inc     dx ;~ 01A2:434D
cs=0x1a2;eip=0x00434e; 	T(MOV(al, 1));	// 9113 mov     al, 1 ;~ 01A2:434E
cs=0x1a2;eip=0x004350; 	S(OUT(dx, al));	// 9114 out     dx, al ;~ 01A2:4350
cs=0x1a2;eip=0x004351; 	X(POPF);	// 9115 popf ;~ 01A2:4351
cs=0x1a2;eip=0x004352; 	J(CALL(sub_140b6,0));	// 9116 call    sub_140B6 ;~ 01A2:4352
cs=0x1a2;eip=0x004355; 	J(RETN(0));	// 9117 retn ;~ 01A2:4355

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_gravis_set: 	goto _gravis_set;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _gravis_sndoff(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _gravis_sndoff:
    _begin:
cs=0x1a2;eip=0x004537; 	X(PUSHF);	// 9414 pushf ;~ 01A2:4537
cs=0x1a2;eip=0x004538; 	T(CLI);	// 9415 cli ;~ 01A2:4538
cs=0x1a2;eip=0x004539; 	T(MOV(dx, _gravis_port));	// 9416 mov     dx, _gravis_port ;~ 01A2:4539
cs=0x1a2;eip=0x00453d; 	T(MOV(al, 0x45));	// 9417 mov     al, 45h ; 'E' ;~ 01A2:453D
cs=0x1a2;eip=0x00453f; 	S(OUT(dx, al));	// 9418 out     dx, al ;~ 01A2:453F
cs=0x1a2;eip=0x004540; 	T(ADD(dl, 2));	// 9419 add     dl, 2 ;~ 01A2:4540
cs=0x1a2;eip=0x004543; 	T(XOR(al, al));	// 9420 xor     al, al ;~ 01A2:4543
cs=0x1a2;eip=0x004545; 	S(OUT(dx, al));	// 9421 out     dx, al ;~ 01A2:4545
cs=0x1a2;eip=0x004546; 	T(SUB(dl, 2));	// 9422 sub     dl, 2 ;~ 01A2:4546
cs=0x1a2;eip=0x004549; 	T(SUB(dx, 0x0FB));	// 9423 sub     dx, 0FBh ; 'û' ;~ 01A2:4549
cs=0x1a2;eip=0x00454d; 	T(MOV(al, 4));	// 9424 mov     al, 4 ;~ 01A2:454D
cs=0x1a2;eip=0x00454f; 	S(OUT(dx, al));	// 9425 out     dx, al ;~ 01A2:454F
cs=0x1a2;eip=0x004550; 	T(INC(dx));	// 9426 inc     dx ;~ 01A2:4550
cs=0x1a2;eip=0x004551; 	T(MOV(al, 0x81));	// 9427 mov     al, 81h ;~ 01A2:4551
cs=0x1a2;eip=0x004553; 	S(OUT(dx, al));	// 9428 out     dx, al ;~ 01A2:4553
cs=0x1a2;eip=0x004554; 	X(POPF);	// 9429 popf ;~ 01A2:4554
cs=0x1a2;eip=0x004555; 	J(RETN(0));	// 9430 retn ;~ 01A2:4555

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_gravis_sndoff: 	goto _gravis_sndoff;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _gravis_clean(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _gravis_clean:
    _begin:
cs=0x1a2;eip=0x004556; 	T(MOV(al, 0x20));	// 9439 mov     al, 20h ; ' ' ;~ 01A2:4556
cs=0x1a2;eip=0x004558; 	J(CALL(_gravis_18079,0));	// 9440 call    _gravis_18079 ;~ 01A2:4558
cs=0x1a2;eip=0x00455b; 	X(AND(byte_2463b, 0x0FE));	// 9441 and     byte_2463B, 0FEh ;~ 01A2:455B
cs=0x1a2;eip=0x004560; 	T(MOV(dx, _gravis_port));	// 9442 mov     dx, _gravis_port ;~ 01A2:4560
cs=0x1a2;eip=0x004564; 	T(SUB(dx, 0x103));	// 9443 sub     dx, 103h ;~ 01A2:4564
cs=0x1a2;eip=0x004568; 	T(MOV(al, byte_2463b));	// 9444 mov     al, byte_2463B ;~ 01A2:4568
cs=0x1a2;eip=0x00456b; 	S(OUT(dx, al));	// 9445 out     dx, al ;~ 01A2:456B
cs=0x1a2;eip=0x00456c; 	J(CALL(_restore_intvector,0));	// 9446 call    _restore_intvector ;~ 01A2:456C
cs=0x1a2;eip=0x00456f; 	J(RETN(0));	// 9447 retn ;~ 01A2:456F

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_gravis_clean: 	goto _gravis_clean;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group16(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group16:
    _begin:
_proaud_set:
	// 9567 
cs=0x1a2;eip=0x004655; 	J(CALL(sub_13017,0));	// 9570 call    sub_13017 ;~ 01A2:4655
cs=0x1a2;eip=0x004658; 	X(MOV(_dma_mode, 0x58));	// 9571 mov     _dma_mode, 58h ; 'X' ;~ 01A2:4658
cs=0x1a2;eip=0x00465d; 	X(MOV(word_2460e, 0x1000));	// 9572 mov     word_2460E, 1000h ;~ 01A2:465D
cs=0x1a2;eip=0x004663; 	T(MOV(si, m2c::k_proaud_14700));	// 9573 mov     si, offset _proaud_14700 ; myfunc ;~ 01A2:4663
cs=0x1a2;eip=0x004666; 	T(MOV(al, byte_2464b));	// 9574 mov     al, byte_2464B ;~ 01A2:4666
cs=0x1a2;eip=0x004669; 	J(CALL(_setsnd_handler,0));	// 9575 call    _setsnd_handler ;~ 01A2:4669
cs=0x1a2;eip=0x00466c; 	X(PUSHF);	// 9576 pushf ;~ 01A2:466C
cs=0x1a2;eip=0x00466d; 	T(CLI);	// 9577 cli ;~ 01A2:466D
cs=0x1a2;eip=0x00466e; 	T(MOV(dx, 0x0B8B));	// 9578 mov     dx, 0B8Bh ;~ 01A2:466E
cs=0x1a2;eip=0x004671; 	T(XOR(dx, _sound_port));	// 9579 xor     dx, _sound_port ;~ 01A2:4671
cs=0x1a2;eip=0x004675; 	T(MOV(al, 8));	// 9580 mov     al, 8 ;~ 01A2:4675
cs=0x1a2;eip=0x004677; 	S(OUT(dx, al));	// 9581 out     dx, al ;~ 01A2:4677
cs=0x1a2;eip=0x004678; 	T(MOV(dx, 0x12));	// 9582 mov     dx, 12h ;~ 01A2:4678
cs=0x1a2;eip=0x00467b; 	T(MOV(ax, 0x34DC));	// 9583 mov     ax, 34DCh ;~ 01A2:467B
cs=0x1a2;eip=0x00467e; 	T(CMP(byte_24623, 1));	// 9584 cmp     byte_24623, 1 ;~ 01A2:467E
cs=0x1a2;eip=0x004683; 	J(JNZ(loc_14689));	// 9585 jnz     short loc_14689 ;~ 01A2:4683
cs=0x1a2;eip=0x004685; 	T(SHR(dx, 1));	// 9586 shr     dx, 1 ;~ 01A2:4685
cs=0x1a2;eip=0x004687; 	T(RCR(ax, 1));	// 9587 rcr     ax, 1 ;~ 01A2:4687
loc_14689:
	// 4967 
cs=0x1a2;eip=0x004689; 	X(DIV2(_freq1));	// 9590 div     _freq1 ;~ 01A2:4689
cs=0x1a2;eip=0x00468d; 	T(MOV(cx, ax));	// 9591 mov     cx, ax ;~ 01A2:468D
cs=0x1a2;eip=0x00468f; 	T(MOV(dx, 0x138B));	// 9592 mov     dx, 138Bh ;~ 01A2:468F
cs=0x1a2;eip=0x004692; 	T(XOR(dx, _sound_port));	// 9593 xor     dx, _sound_port ;~ 01A2:4692
cs=0x1a2;eip=0x004696; 	T(MOV(al, 0x36));	// 9594 mov     al, 36h ; '6' ;~ 01A2:4696
cs=0x1a2;eip=0x004698; 	S(OUT(dx, al));	// 9595 out     dx, al ;~ 01A2:4698
cs=0x1a2;eip=0x004699; 	J({;});	// 9596 jmp     short $+2 ;~ 01A2:4699
loc_1469b:
	// 4968 
cs=0x1a2;eip=0x00469b; 	J({;});	// 9600 jmp     short $+2 ;~ 01A2:469B
loc_1469d:
	// 4969 
cs=0x1a2;eip=0x00469d; 	T(SUB(dl, 3));	// 9604 sub     dl, 3 ;~ 01A2:469D
cs=0x1a2;eip=0x0046a0; 	T(MOV(al, cl));	// 9605 mov     al, cl ;~ 01A2:46A0
cs=0x1a2;eip=0x0046a2; 	S(OUT(dx, al));	// 9606 out     dx, al ;~ 01A2:46A2
cs=0x1a2;eip=0x0046a3; 	J({;});	// 9607 jmp     short $+2 ;~ 01A2:46A3
loc_146a5:
	// 4970 
cs=0x1a2;eip=0x0046a5; 	T(MOV(al, ch));	// 9611 mov     al, ch ;~ 01A2:46A5
cs=0x1a2;eip=0x0046a7; 	S(OUT(dx, al));	// 9612 out     dx, al ;~ 01A2:46A7
cs=0x1a2;eip=0x0046a8; 	J({;});	// 9613 jmp     short $+2 ;~ 01A2:46A8
loc_146aa:
	// 4971 
cs=0x1a2;eip=0x0046aa; 	T(MOV(cl, byte_2464a));	// 9617 mov     cl, byte_2464A ;~ 01A2:46AA
cs=0x1a2;eip=0x0046ae; 	J(CALL(_dma_186e3,0));	// 9618 call    _dma_186E3 ;~ 01A2:46AE
cs=0x1a2;eip=0x0046b1; 	T(MOV(cx, 0x400));	// 9619 mov     cx, 400h ;~ 01A2:46B1
cs=0x1a2;eip=0x0046b4; 	T(CMP(byte_2464a, 4));	// 9620 cmp     byte_2464A, 4 ;~ 01A2:46B4
cs=0x1a2;eip=0x0046b9; 	J(JC(loc_146bd));	// 9621 jb      short loc_146BD ;~ 01A2:46B9
cs=0x1a2;eip=0x0046bb; 	T(SHR(cx, 1));	// 9622 shr     cx, 1 ;~ 01A2:46BB
loc_146bd:
	// 4972 
cs=0x1a2;eip=0x0046bd; 	T(MOV(dx, 0x138B));	// 9625 mov     dx, 138Bh ;~ 01A2:46BD
cs=0x1a2;eip=0x0046c0; 	T(XOR(dx, _sound_port));	// 9626 xor     dx, _sound_port ;~ 01A2:46C0
cs=0x1a2;eip=0x0046c4; 	T(MOV(al, 0x76));	// 9627 mov     al, 76h ; 'v' ;~ 01A2:46C4
cs=0x1a2;eip=0x0046c6; 	S(OUT(dx, al));	// 9628 out     dx, al ;~ 01A2:46C6
cs=0x1a2;eip=0x0046c7; 	J({;});	// 9629 jmp     short $+2 ;~ 01A2:46C7
loc_146c9:
	// 4973 
cs=0x1a2;eip=0x0046c9; 	J({;});	// 9633 jmp     short $+2 ;~ 01A2:46C9
loc_146cb:
	// 4974 
cs=0x1a2;eip=0x0046cb; 	T(SUB(dl, 2));	// 9637 sub     dl, 2 ;~ 01A2:46CB
cs=0x1a2;eip=0x0046ce; 	T(MOV(al, cl));	// 9638 mov     al, cl ;~ 01A2:46CE
cs=0x1a2;eip=0x0046d0; 	S(OUT(dx, al));	// 9639 out     dx, al ;~ 01A2:46D0
cs=0x1a2;eip=0x0046d1; 	J({;});	// 9640 jmp     short $+2 ;~ 01A2:46D1
loc_146d3:
	// 4975 
cs=0x1a2;eip=0x0046d3; 	T(MOV(al, ch));	// 9644 mov     al, ch ;~ 01A2:46D3
cs=0x1a2;eip=0x0046d5; 	S(OUT(dx, al));	// 9645 out     dx, al ;~ 01A2:46D5
cs=0x1a2;eip=0x0046d6; 	J({;});	// 9646 jmp     short $+2 ;~ 01A2:46D6
loc_146d8:
	// 4976 
cs=0x1a2;eip=0x0046d8; 	T(MOV(dx, 0x0F88));	// 9650 mov     dx, 0F88h ;~ 01A2:46D8
cs=0x1a2;eip=0x0046db; 	T(XOR(dx, _sound_port));	// 9651 xor     dx, _sound_port ;~ 01A2:46DB
cs=0x1a2;eip=0x0046df; 	T(XOR(al, al));	// 9652 xor     al, al ;~ 01A2:46DF
cs=0x1a2;eip=0x0046e1; 	S(OUT(dx, al));	// 9653 out     dx, al ;~ 01A2:46E1
cs=0x1a2;eip=0x0046e2; 	T(MOV(dx, 0x0B8A));	// 9654 mov     dx, 0B8Ah ;~ 01A2:46E2
cs=0x1a2;eip=0x0046e5; 	T(XOR(dx, _sound_port));	// 9655 xor     dx, _sound_port ;~ 01A2:46E5
cs=0x1a2;eip=0x0046e9; 	T(MOV(al, 0x0E1));	// 9656 mov     al, 0E1h ; 'á' ;~ 01A2:46E9
cs=0x1a2;eip=0x0046eb; 	S(OUT(dx, al));	// 9657 out     dx, al ;~ 01A2:46EB
cs=0x1a2;eip=0x0046ec; 	T(MOV(dx, 0x0F8A));	// 9658 mov     dx, 0F8Ah ;~ 01A2:46EC
cs=0x1a2;eip=0x0046ef; 	T(XOR(dx, _sound_port));	// 9659 xor     dx, _sound_port ;~ 01A2:46EF
cs=0x1a2;eip=0x0046f3; 	T(MOV(al, 0x0F9));	// 9660 mov     al, 0F9h ; 'ù' ;~ 01A2:46F3
cs=0x1a2;eip=0x0046f5; 	S(OUT(dx, al));	// 9661 out     dx, al ;~ 01A2:46F5
cs=0x1a2;eip=0x0046f6; 	T(AND(al, 0x0DF));	// 9662 and     al, 0DFh ;~ 01A2:46F6
cs=0x1a2;eip=0x0046f8; 	S(OUT(dx, al));	// 9663 out     dx, al ;~ 01A2:46F8
cs=0x1a2;eip=0x0046f9; 	X(MOV(byte_2466e, 1));	// 9664 mov     byte_2466E, 1 ;~ 01A2:46F9
cs=0x1a2;eip=0x0046fe; 	X(POPF);	// 9665 popf ;~ 01A2:46FE
cs=0x1a2;eip=0x0046ff; 	J(RETN(0));	// 9666 retn ;~ 01A2:46FF
_proaud_14700:
	// 9674 
cs=0x1a2;eip=0x004700; 	X(PUSH(ax));	// 9678 push    ax ;~ 01A2:4700
cs=0x1a2;eip=0x004701; 	X(PUSH(dx));	// 9679 push    dx ;~ 01A2:4701
cs=0x1a2;eip=0x004702; 	X(PUSH(ds));	// 9680 push    ds ;~ 01A2:4702
cs=0x1a2;eip=0x004703; 	T(MOV(ax, seg_offset(seg003)));	// 9681 mov     ax, seg seg003 ;~ 01A2:4703
cs=0x1a2;eip=0x004706; 	T(MOV(ds, ax));	// 9682 mov     ds, ax ;~ 01A2:4706
cs=0x1a2;eip=0x004708; 	T(MOV(dx, 0x0B89));	// 9683 mov     dx, 0B89h ;~ 01A2:4708
cs=0x1a2;eip=0x00470b; 	T(XOR(dx, _sound_port));	// 9684 xor     dx, _sound_port ;~ 01A2:470B
cs=0x1a2;eip=0x00470f; 	S(IN(al, dx));	// 9685 in      al, dx ;~ 01A2:470F
cs=0x1a2;eip=0x004710; 	J({;});	// 9686 jmp     short $+2 ;~ 01A2:4710
loc_14712:
	// 4977 
cs=0x1a2;eip=0x004712; 	S(OUT(dx, al));	// 9690 out     dx, al ;~ 01A2:4712
cs=0x1a2;eip=0x004713; 	T(TEST(al, 8));	// 9691 test    al, 8 ;~ 01A2:4713
cs=0x1a2;eip=0x004715; 	J(JNZ(loc_14e10));	// 9692 jnz     loc_14E10 ;~ 01A2:4715
cs=0x1a2;eip=0x004719; 	T(MOV(al, 0x20));	// 9693 mov     al, 20h ; ' ' ;~ 01A2:4719
cs=0x1a2;eip=0x00471b; 	T(CMP(byte_2464b, 8));	// 9694 cmp     byte_2464B, 8 ;~ 01A2:471B
cs=0x1a2;eip=0x004720; 	J(JC(loc_14726));	// 9695 jb      short loc_14726 ;~ 01A2:4720
cs=0x1a2;eip=0x004722; 	S(OUT(0x0A0, al));	// 9696 out     0A0h, al        ; PIC 2  same as 0020 for PIC 1 ;~ 01A2:4722
cs=0x1a2;eip=0x004724; 	J({;});	// 9697 jmp     short $+2 ;~ 01A2:4724
loc_14726:
	// 4978 
cs=0x1a2;eip=0x004726; 	S(OUT(0x20, al));	// 9702 out     20h, al         ; Interrupt controller, 8259A. ;~ 01A2:4726
cs=0x1a2;eip=0x004728; 	X(POP(ds));	// 9703 pop     ds ;~ 01A2:4728
cs=0x1a2;eip=0x004729; 	X(POP(dx));	// 9704 pop     dx ;~ 01A2:4729
cs=0x1a2;eip=0x00472a; 	X(POP(ax));	// 9705 pop     ax ;~ 01A2:472A
cs=0x1a2;eip=0x00472b; 	J(IRET);	// 9706 iret ;~ 01A2:472B
seg000_4e10_proc:
	// 10801 
loc_14e10:
	// 5038 
cs=0x1a2;eip=0x004e10; 	X(ADD(word_24602, 0x400));	// 10803 add     word_24602, 400h ;~ 01A2:4E10
cs=0x1a2;eip=0x004e16; 	X(AND(word_24602, 0x0FFF));	// 10804 and     word_24602, 0FFFh ;~ 01A2:4E16
cs=0x1a2;eip=0x004e1c; 	X(INC(byte_24620));	// 10805 inc     byte_24620 ;~ 01A2:4E1C
cs=0x1a2;eip=0x004e20; 	T(CMP(byte_24620, 2));	// 10806 cmp     byte_24620, 2 ;~ 01A2:4E20
cs=0x1a2;eip=0x004e25; 	J(JA(loc_14eb7));	// 10807 ja      loc_14EB7 ;~ 01A2:4E25
loc_14e29:
	// 5039 
cs=0x1a2;eip=0x004e29; 	X(PUSHAD);	// 10810 pushad ;~ 01A2:4E29
cs=0x1a2;eip=0x004e2b; 	X(PUSH(es));	// 10811 push    es ;~ 01A2:4E2B
cs=0x1a2;eip=0x004e2c; 	X(PUSH(fs));	// 10812 push    fs ;~ 01A2:4E2C
cs=0x1a2;eip=0x004e2e; 	X(PUSH(gs));	// 10813 push    gs ;~ 01A2:4E2E
cs=0x1a2;eip=0x004e30; 	T(MOV(al, 0x20));	// 10814 mov     al, 20h ; ' ' ;~ 01A2:4E30
cs=0x1a2;eip=0x004e32; 	S(OUT(0x20, al));	// 10815 out     20h, al         ; Interrupt controller, 8259A. ;~ 01A2:4E32
cs=0x1a2;eip=0x004e34; 	T(TEST(*(db*)(((db*)&_config_word)+1), 0x10));	// 10816 test    byte ptr _config_word+1, 10h ;~ 01A2:4E34
cs=0x1a2;eip=0x004e39; 	J(JZ(loc_14e4d));	// 10817 jz      short loc_14E4D ;~ 01A2:4E39
cs=0x1a2;eip=0x004e3b; 	X(INC(byte_24621));	// 10818 inc     byte_24621 ;~ 01A2:4E3B
cs=0x1a2;eip=0x004e3f; 	X(AND(byte_24621, 3));	// 10819 and     byte_24621, 3 ;~ 01A2:4E3F
cs=0x1a2;eip=0x004e44; 	J(JNZ(loc_14e4d));	// 10820 jnz     short loc_14E4D ;~ 01A2:4E44
cs=0x1a2;eip=0x004e46; 	T(MOV(cl, _dma_channel));	// 10821 mov     cl, _dma_channel ;~ 01A2:4E46
cs=0x1a2;eip=0x004e4a; 	J(CALL(_dma_186e3,0));	// 10822 call    _dma_186E3 ;~ 01A2:4E4A
loc_14e4d:
	// 5040 
cs=0x1a2;eip=0x004e4d; 	T(MOV(bx, 1));	// 10826 mov     bx, 1 ;~ 01A2:4E4D
cs=0x1a2;eip=0x004e50; 	T(MOV(cl, _irq_number));	// 10827 mov     cl, _irq_number ;~ 01A2:4E50
cs=0x1a2;eip=0x004e54; 	T(SHL(bx, cl));	// 10828 shl     bx, cl ;~ 01A2:4E54
cs=0x1a2;eip=0x004e56; 	T(MOV(dx, 0x21));	// 10829 mov     dx, 21h ; '!' ;~ 01A2:4E56
cs=0x1a2;eip=0x004e59; 	T(OR(bh, bh));	// 10830 or      bh, bh ;~ 01A2:4E59
cs=0x1a2;eip=0x004e5b; 	J(JZ(loc_14e66));	// 10831 jz      short loc_14E66 ;~ 01A2:4E5B
cs=0x1a2;eip=0x004e5d; 	T(MOV(dx, 0x0A1));	// 10832 mov     dx, 0A1h ; '¡' ;~ 01A2:4E5D
cs=0x1a2;eip=0x004e60; 	T(MOV(al, 0x20));	// 10833 mov     al, 20h ; ' ' ;~ 01A2:4E60
cs=0x1a2;eip=0x004e62; 	S(OUT(0x0A0, al));	// 10834 out     0A0h, al        ; PIC 2  same as 0020 for PIC 1 ;~ 01A2:4E62
cs=0x1a2;eip=0x004e64; 	T(MOV(bl, bh));	// 10835 mov     bl, bh ;~ 01A2:4E64
loc_14e66:
	// 5041 
cs=0x1a2;eip=0x004e66; 	S(IN(al, dx));	// 10838 in      al, dx          ; Interrupt Controller #2, 8259A ;~ 01A2:4E66
cs=0x1a2;eip=0x004e67; 	T(OR(al, bl));	// 10839 or      al, bl ;~ 01A2:4E67
cs=0x1a2;eip=0x004e69; 	S(OUT(dx, al));	// 10840 out     dx, al          ; Interrupt Controller #2, 8259A ;~ 01A2:4E69
cs=0x1a2;eip=0x004e6a; 	T(STI);	// 10841 sti ;~ 01A2:4E6A
cs=0x1a2;eip=0x004e6b; 	T(MOV(ax, word_24602));	// 10842 mov     ax, word_24602 ;~ 01A2:4E6B
loc_14e6e:
	// 5042 
cs=0x1a2;eip=0x004e6e; 	T(MOV(dx, ax));	// 10845 mov     dx, ax ;~ 01A2:4E6E
cs=0x1a2;eip=0x004e70; 	T(CMP(ax, word_24600));	// 10846 cmp     ax, word_24600 ;~ 01A2:4E70
cs=0x1a2;eip=0x004e74; 	J(JA(loc_14e79));	// 10847 ja      short loc_14E79 ;~ 01A2:4E74
cs=0x1a2;eip=0x004e76; 	T(ADD(ax, 0x1000));	// 10848 add     ax, 1000h ;~ 01A2:4E76
loc_14e79:
	// 5043 
cs=0x1a2;eip=0x004e79; 	T(SUB(ax, word_24600));	// 10851 sub     ax, word_24600 ;~ 01A2:4E79
cs=0x1a2;eip=0x004e7d; 	T(CMP(ax, 0x800));	// 10852 cmp     ax, 800h ;~ 01A2:4E7D
cs=0x1a2;eip=0x004e80; 	J(JC(loc_14e8c));	// 10853 jb      short loc_14E8C ;~ 01A2:4E80
cs=0x1a2;eip=0x004e82; 	X(PUSH(dx));	// 10854 push    dx ;~ 01A2:4E82
cs=0x1a2;eip=0x004e83; 	J(CALL(sub_16c69,0));	// 10855 call    sub_16C69 ;~ 01A2:4E83
cs=0x1a2;eip=0x004e86; 	X(POP(ax));	// 10856 pop     ax ;~ 01A2:4E86
cs=0x1a2;eip=0x004e87; 	T(ADD(ax, 0x10));	// 10857 add     ax, 10h ;~ 01A2:4E87
cs=0x1a2;eip=0x004e8a; 	J(JMP(loc_14e6e));	// 10858 jmp     short loc_14E6E ;~ 01A2:4E8A
loc_14e8c:
	// 5044 
cs=0x1a2;eip=0x004e8c; 	T(MOV(bx, 1));	// 10862 mov     bx, 1 ;~ 01A2:4E8C
cs=0x1a2;eip=0x004e8f; 	T(MOV(cl, _irq_number));	// 10863 mov     cl, _irq_number ;~ 01A2:4E8F
cs=0x1a2;eip=0x004e93; 	T(SHL(bx, cl));	// 10864 shl     bx, cl ;~ 01A2:4E93
cs=0x1a2;eip=0x004e95; 	T(MOV(dx, 0x21));	// 10865 mov     dx, 21h ; '!' ;~ 01A2:4E95
cs=0x1a2;eip=0x004e98; 	T(OR(bh, bh));	// 10866 or      bh, bh ;~ 01A2:4E98
cs=0x1a2;eip=0x004e9a; 	J(JZ(loc_14ea1));	// 10867 jz      short loc_14EA1 ;~ 01A2:4E9A
cs=0x1a2;eip=0x004e9c; 	T(MOV(dx, 0x0A1));	// 10868 mov     dx, 0A1h ; '¡' ;~ 01A2:4E9C
cs=0x1a2;eip=0x004e9f; 	T(MOV(bl, bh));	// 10869 mov     bl, bh ;~ 01A2:4E9F
loc_14ea1:
	// 5045 
cs=0x1a2;eip=0x004ea1; 	T(NOT(bl));	// 10872 not     bl ;~ 01A2:4EA1
cs=0x1a2;eip=0x004ea3; 	S(IN(al, dx));	// 10873 in      al, dx          ; Interrupt Controller #2, 8259A ;~ 01A2:4EA3
cs=0x1a2;eip=0x004ea4; 	T(AND(al, bl));	// 10874 and     al, bl ;~ 01A2:4EA4
cs=0x1a2;eip=0x004ea6; 	S(OUT(dx, al));	// 10875 out     dx, al          ; Interrupt Controller #2, 8259A ;~ 01A2:4EA6
cs=0x1a2;eip=0x004ea7; 	X(POP(gs));	// 10876 pop     gs ;~ 01A2:4EA7
cs=0x1a2;eip=0x004ea9; 	X(POP(fs));	// 10877 pop     fs ;~ 01A2:4EA9
cs=0x1a2;eip=0x004eab; 	X(POP(es));	// 10878 pop     es ;~ 01A2:4EAB
cs=0x1a2;eip=0x004eac; 	X(POPAD);	// 10879 popad ;~ 01A2:4EAC
cs=0x1a2;eip=0x004eae; 	T(NOP);	// 10880 nop ;~ 01A2:4EAE
cs=0x1a2;eip=0x004eaf; 	X(DEC(byte_24620));	// 10881 dec     byte_24620 ;~ 01A2:4EAF
cs=0x1a2;eip=0x004eb3; 	X(POP(ds));	// 10882 pop     ds ;~ 01A2:4EB3
cs=0x1a2;eip=0x004eb4; 	X(POP(dx));	// 10883 pop     dx ;~ 01A2:4EB4
cs=0x1a2;eip=0x004eb5; 	X(POP(ax));	// 10884 pop     ax ;~ 01A2:4EB5
cs=0x1a2;eip=0x004eb6; 	J(IRET);	// 10885 iret ;~ 01A2:4EB6
loc_14eb7:
	// 5046 
cs=0x1a2;eip=0x004eb7; 	X(AND(_flag_playsetttings, 0x0EF));	// 10889 and     _flag_playsetttings, 0EFh ;~ 01A2:4EB7
cs=0x1a2;eip=0x004ebc; 	J(JMP(loc_14e29));	// 10890 jmp     loc_14E29 ;~ 01A2:4EBC
ret_1a2_4ebf:
	// 5047 
cs=0x1a2;eip=0x004ebf; 	T(MOV(al, 0x20));	// 10893 mov     al, 20h ; ' ' ;~ 01A2:4EBF
cs=0x1a2;eip=0x004ec1; 	T(CMP(_irq_number, 7));	// 10894 cmp     _irq_number, 7 ;~ 01A2:4EC1
cs=0x1a2;eip=0x004ec6; 	J(JBE(loc_14ecc));	// 10895 jbe     short loc_14ECC ;~ 01A2:4EC6
cs=0x1a2;eip=0x004ec8; 	S(OUT(0x0A0, al));	// 10896 out     0A0h, al        ; PIC 2  same as 0020 for PIC 1 ;~ 01A2:4EC8
cs=0x1a2;eip=0x004eca; 	J({;});	// 10897 jmp     short $+2 ;~ 01A2:4ECA
loc_14ecc:
	// 5048 
cs=0x1a2;eip=0x004ecc; 	S(OUT(0x20, al));	// 10902 out     20h, al         ; Interrupt controller, 8259A. ;~ 01A2:4ECC
cs=0x1a2;eip=0x004ece; 	X(POP(ds));	// 10903 pop     ds ;~ 01A2:4ECE
cs=0x1a2;eip=0x004ecf; 	X(POP(dx));	// 10904 pop     dx ;~ 01A2:4ECF
cs=0x1a2;eip=0x004ed0; 	X(POP(ax));	// 10905 pop     ax ;~ 01A2:4ED0
cs=0x1a2;eip=0x004ed1; 	J(IRET);	// 10906 iret ;~ 01A2:4ED1

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_proaud_14700: 	goto _proaud_14700;
        case m2c::k_proaud_set: 	goto _proaud_set;
        case m2c::kloc_14689: 	goto loc_14689;
        case m2c::kloc_1469b: 	goto loc_1469b;
        case m2c::kloc_1469d: 	goto loc_1469d;
        case m2c::kloc_146a5: 	goto loc_146a5;
        case m2c::kloc_146aa: 	goto loc_146aa;
        case m2c::kloc_146bd: 	goto loc_146bd;
        case m2c::kloc_146c9: 	goto loc_146c9;
        case m2c::kloc_146cb: 	goto loc_146cb;
        case m2c::kloc_146d3: 	goto loc_146d3;
        case m2c::kloc_146d8: 	goto loc_146d8;
        case m2c::kloc_14712: 	goto loc_14712;
        case m2c::kloc_14726: 	goto loc_14726;
        case m2c::kloc_14e10: 	goto loc_14e10;
        case m2c::kloc_14e29: 	goto loc_14e29;
        case m2c::kloc_14e4d: 	goto loc_14e4d;
        case m2c::kloc_14e66: 	goto loc_14e66;
        case m2c::kloc_14e6e: 	goto loc_14e6e;
        case m2c::kloc_14e79: 	goto loc_14e79;
        case m2c::kloc_14e8c: 	goto loc_14e8c;
        case m2c::kloc_14ea1: 	goto loc_14ea1;
        case m2c::kloc_14eb7: 	goto loc_14eb7;
        case m2c::kloc_14ecc: 	goto loc_14ecc;
        case m2c::kret_1a2_4ebf: 	goto ret_1a2_4ebf;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _proaud_sndoff(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _proaud_sndoff:
    _begin:
cs=0x1a2;eip=0x00472c; 	X(PUSHF);	// 9715 pushf ;~ 01A2:472C
cs=0x1a2;eip=0x00472d; 	T(CLI);	// 9716 cli ;~ 01A2:472D
cs=0x1a2;eip=0x00472e; 	T(MOV(dx, 0x0F8A));	// 9717 mov     dx, 0F8Ah ;~ 01A2:472E
cs=0x1a2;eip=0x004731; 	T(XOR(dx, _sound_port));	// 9718 xor     dx, _sound_port ;~ 01A2:4731
cs=0x1a2;eip=0x004735; 	S(IN(al, dx));	// 9719 in      al, dx ;~ 01A2:4735
cs=0x1a2;eip=0x004736; 	T(AND(al, 0x0BF));	// 9720 and     al, 0BFh ;~ 01A2:4736
cs=0x1a2;eip=0x004738; 	T(OR(al, 0x10));	// 9721 or      al, 10h ;~ 01A2:4738
cs=0x1a2;eip=0x00473a; 	S(OUT(dx, al));	// 9722 out     dx, al ;~ 01A2:473A
cs=0x1a2;eip=0x00473b; 	T(MOV(dx, 0x0B8B));	// 9723 mov     dx, 0B8Bh ;~ 01A2:473B
cs=0x1a2;eip=0x00473e; 	T(XOR(dx, _sound_port));	// 9724 xor     dx, _sound_port ;~ 01A2:473E
cs=0x1a2;eip=0x004742; 	T(XOR(al, al));	// 9725 xor     al, al ;~ 01A2:4742
cs=0x1a2;eip=0x004744; 	S(OUT(dx, al));	// 9726 out     dx, al ;~ 01A2:4744
cs=0x1a2;eip=0x004745; 	T(MOV(cl, byte_2464a));	// 9727 mov     cl, byte_2464A ;~ 01A2:4745
cs=0x1a2;eip=0x004749; 	J(CALL(_set_dmachn_mask,0));	// 9728 call    _set_dmachn_mask ;~ 01A2:4749
	return seg000_474c_proc(0, _state);
    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_proaud_sndoff: 	goto _proaud_sndoff;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_474c_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_474c_proc:
    _begin:
_useless_1474c:
	// 4979 
cs=0x1a2;eip=0x00474c; 	T(MOV(dx, 0x0B8B));	// 9733 mov     dx, 0B8Bh ;~ 01A2:474C
cs=0x1a2;eip=0x00474f; 	T(XOR(dx, _sound_port));	// 9734 xor     dx, _sound_port ;~ 01A2:474F
cs=0x1a2;eip=0x004753; 	T(XOR(al, al));	// 9735 xor     al, al ;~ 01A2:4753
cs=0x1a2;eip=0x004755; 	S(OUT(dx, al));	// 9736 out     dx, al ;~ 01A2:4755
cs=0x1a2;eip=0x004756; 	X(MOV(byte_2466e, 0));	// 9737 mov     byte_2466E, 0 ;~ 01A2:4756
cs=0x1a2;eip=0x00475b; 	J(CALL(_restore_intvector,0));	// 9738 call    _restore_intvector ;~ 01A2:475B
cs=0x1a2;eip=0x00475e; 	X(POPF);	// 9739 popf ;~ 01A2:475E
cs=0x1a2;eip=0x00475f; 	J(RETN(0));	// 9740 retn ;~ 01A2:475F

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_useless_1474c: 	goto _useless_1474c;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _proaud_clean(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _proaud_clean:
    _begin:
cs=0x1a2;eip=0x004760; 	J(CALL(_memfree_18a28,0));	// 9747 call    _memfree_18A28 ;~ 01A2:4760
cs=0x1a2;eip=0x004763; 	J(RETN(0));	// 9748 retn ;~ 01A2:4763

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_proaud_clean: 	goto _proaud_clean;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _proaud_spectr_14(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _proaud_spectr_14:
    _begin:
cs=0x1a2;eip=0x004764; 	T(MOV(dx, 0x0B8B));	// 9756 mov     dx, 0B8Bh ;~ 01A2:4764
cs=0x1a2;eip=0x004767; 	S(IN(al, dx));	// 9757 in      al, dx ;~ 01A2:4767
cs=0x1a2;eip=0x004768; 	T(INC(al));	// 9758 inc     al ;~ 01A2:4768
cs=0x1a2;eip=0x00476a; 	J(JNZ(loc_1479e));	// 9759 jnz     short loc_1479E ;~ 01A2:476A
cs=0x1a2;eip=0x00476c; 	T(MOV(dx, 0x0B87));	// 9760 mov     dx, 0B87h ;~ 01A2:476C
cs=0x1a2;eip=0x00476f; 	S(IN(al, dx));	// 9761 in      al, dx ;~ 01A2:476F
cs=0x1a2;eip=0x004770; 	T(INC(al));	// 9762 inc     al ;~ 01A2:4770
cs=0x1a2;eip=0x004772; 	J(JNZ(loc_1479e));	// 9763 jnz     short loc_1479E ;~ 01A2:4772
cs=0x1a2;eip=0x004774; 	T(MOV(dx, 0x0B8F));	// 9764 mov     dx, 0B8Fh ;~ 01A2:4774
cs=0x1a2;eip=0x004777; 	S(IN(al, dx));	// 9765 in      al, dx ;~ 01A2:4777
cs=0x1a2;eip=0x004778; 	T(INC(al));	// 9766 inc     al ;~ 01A2:4778
cs=0x1a2;eip=0x00477a; 	J(JNZ(loc_1479e));	// 9767 jnz     short loc_1479E ;~ 01A2:477A
cs=0x1a2;eip=0x00477c; 	T(MOV(dx, 0x0A8B));	// 9768 mov     dx, 0A8Bh ;~ 01A2:477C
cs=0x1a2;eip=0x00477f; 	S(IN(al, dx));	// 9769 in      al, dx ;~ 01A2:477F
cs=0x1a2;eip=0x004780; 	T(INC(al));	// 9770 inc     al ;~ 01A2:4780
cs=0x1a2;eip=0x004782; 	J(JNZ(loc_1479e));	// 9771 jnz     short loc_1479E ;~ 01A2:4782
cs=0x1a2;eip=0x004784; 	T(MOV(dx, 0x0A83));	// 9772 mov     dx, 0A83h ;~ 01A2:4784
cs=0x1a2;eip=0x004787; 	S(IN(al, dx));	// 9773 in      al, dx ;~ 01A2:4787
cs=0x1a2;eip=0x004788; 	T(INC(al));	// 9774 inc     al ;~ 01A2:4788
cs=0x1a2;eip=0x00478a; 	J(JNZ(loc_1479e));	// 9775 jnz     short loc_1479E ;~ 01A2:478A
cs=0x1a2;eip=0x00478c; 	T(MOV(dx, 0x0A87));	// 9776 mov     dx, 0A87h ;~ 01A2:478C
cs=0x1a2;eip=0x00478f; 	S(IN(al, dx));	// 9777 in      al, dx ;~ 01A2:478F
cs=0x1a2;eip=0x004790; 	T(INC(al));	// 9778 inc     al ;~ 01A2:4790
cs=0x1a2;eip=0x004792; 	J(JNZ(loc_1479e));	// 9779 jnz     short loc_1479E ;~ 01A2:4792
cs=0x1a2;eip=0x004794; 	T(MOV(dx, 0x0A8F));	// 9780 mov     dx, 0A8Fh ;~ 01A2:4794
cs=0x1a2;eip=0x004797; 	S(IN(al, dx));	// 9781 in      al, dx ;~ 01A2:4797
cs=0x1a2;eip=0x004798; 	T(INC(al));	// 9782 inc     al ;~ 01A2:4798
cs=0x1a2;eip=0x00479a; 	J(JNZ(loc_1479e));	// 9783 jnz     short loc_1479E ;~ 01A2:479A
cs=0x1a2;eip=0x00479c; 	T(STC);	// 9784 stc ;~ 01A2:479C
cs=0x1a2;eip=0x00479d; 	J(RETN(0));	// 9785 retn ;~ 01A2:479D
loc_1479e:
	// 4980 
cs=0x1a2;eip=0x00479e; 	T(SUB(dx, 0x803));	// 9790 sub     dx, 803h ;~ 01A2:479E
cs=0x1a2;eip=0x0047a2; 	T(CLC);	// 9791 clc ;~ 01A2:47A2
cs=0x1a2;eip=0x0047a3; 	J(RETN(0));	// 9792 retn ;~ 01A2:47A3

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_proaud_spectr_14: 	goto _proaud_spectr_14;
        case m2c::kloc_1479e: 	goto loc_1479e;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group17(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group17:
    _begin:
_wss_init:
	// 9799 
cs=0x1a2;eip=0x0047a4; 	X(MOV(_sndflags_24622, 9));	// 9801 mov     _sndflags_24622, 9 ;~ 01A2:47A4
cs=0x1a2;eip=0x0047a9; 	X(MOV(byte_24623, 1));	// 9802 mov     byte_24623, 1 ;~ 01A2:47A9
cs=0x1a2;eip=0x0047ae; 	X(MOV(_bit_mode, 16));	// 9803 mov     _bit_mode, 16 ;~ 01A2:47AE
cs=0x1a2;eip=0x0047b3; 	T(MOV(dx, _snd_base_port));	// 9804 mov     dx, _snd_base_port ;~ 01A2:47B3
cs=0x1a2;eip=0x0047b7; 	T(CMP(dx, -1));	// 9805 cmp     dx, -1 ;~ 01A2:47B7
cs=0x1a2;eip=0x0047ba; 	J(JNZ(loc_147c3));	// 9806 jnz     short loc_147C3 ;~ 01A2:47BA
cs=0x1a2;eip=0x0047bc; 	J(CALL(_wss_1495f,0));	// 9807 call    _wss_1495F ;~ 01A2:47BC
cs=0x1a2;eip=0x0047bf; 	J(JC(loc_149ac));	// 9808 jb      loc_149AC ;~ 01A2:47BF
loc_147c3:
	// 4981 
cs=0x1a2;eip=0x0047c3; 	X(MOV(_base_port2, dx));	// 9811 mov     _base_port2, dx ;~ 01A2:47C3
cs=0x1a2;eip=0x0047c7; 	T(MOV(al, _irq_number));	// 9812 mov     al, _irq_number ;~ 01A2:47C7
cs=0x1a2;eip=0x0047ca; 	T(CMP(al, -1));	// 9813 cmp     al, -1 ;~ 01A2:47CA
cs=0x1a2;eip=0x0047cc; 	J(JNZ(loc_147d0));	// 9814 jnz     short loc_147D0 ;~ 01A2:47CC
cs=0x1a2;eip=0x0047ce; 	T(MOV(al, 0x0A));	// 9815 mov     al, 0Ah ;~ 01A2:47CE
loc_147d0:
	// 4982 
cs=0x1a2;eip=0x0047d0; 	X(MOV(_irq_number2, al));	// 9818 mov     _irq_number2, al ;~ 01A2:47D0
cs=0x1a2;eip=0x0047d3; 	T(MOV(al, _dma_channel));	// 9819 mov     al, _dma_channel ;~ 01A2:47D3
cs=0x1a2;eip=0x0047d6; 	T(CMP(al, -1));	// 9820 cmp     al, -1 ;~ 01A2:47D6
cs=0x1a2;eip=0x0047d8; 	J(JNZ(loc_147dc));	// 9821 jnz     short loc_147DC ;~ 01A2:47D8
cs=0x1a2;eip=0x0047da; 	T(MOV(al, 0));	// 9822 mov     al, 0 ;~ 01A2:47DA
loc_147dc:
	// 4983 
cs=0x1a2;eip=0x0047dc; 	X(MOV(_dma_channel2, al));	// 9825 mov     _dma_channel2, al ;~ 01A2:47DC
cs=0x1a2;eip=0x0047df; 	J(CALL(_wss_1498a,0));	// 9826 call    _wss_1498A ;~ 01A2:47DF
cs=0x1a2;eip=0x0047e2; 	J(CALL(_wss_test,0));	// 9827 call    _wss_test ;~ 01A2:47E2
cs=0x1a2;eip=0x0047e5; 	T(MOV(al, _irq_number2));	// 9828 mov     al, _irq_number2 ;~ 01A2:47E5
cs=0x1a2;eip=0x0047e8; 	T(MOV(cl, 8));	// 9829 mov     cl, 8 ;~ 01A2:47E8
cs=0x1a2;eip=0x0047ea; 	T(CMP(al, 7));	// 9830 cmp     al, 7 ;~ 01A2:47EA
cs=0x1a2;eip=0x0047ec; 	J(JZ(loc_14801));	// 9831 jz      short loc_14801 ;~ 01A2:47EC
cs=0x1a2;eip=0x0047ee; 	T(MOV(cl, 0x10));	// 9832 mov     cl, 10h ;~ 01A2:47EE
cs=0x1a2;eip=0x0047f0; 	T(CMP(al, 9));	// 9833 cmp     al, 9 ;~ 01A2:47F0
cs=0x1a2;eip=0x0047f2; 	J(JZ(loc_14801));	// 9834 jz      short loc_14801 ;~ 01A2:47F2
cs=0x1a2;eip=0x0047f4; 	T(MOV(cl, 0x18));	// 9835 mov     cl, 18h ;~ 01A2:47F4
cs=0x1a2;eip=0x0047f6; 	T(CMP(al, 0x0A));	// 9836 cmp     al, 0Ah ;~ 01A2:47F6
cs=0x1a2;eip=0x0047f8; 	J(JZ(loc_14801));	// 9837 jz      short loc_14801 ;~ 01A2:47F8
cs=0x1a2;eip=0x0047fa; 	T(MOV(cl, 0x20));	// 9838 mov     cl, 20h ; ' ' ;~ 01A2:47FA
cs=0x1a2;eip=0x0047fc; 	X(MOV(_irq_number2, 0x0B));	// 9839 mov     _irq_number2, 0Bh ;~ 01A2:47FC
loc_14801:
	// 4984 
cs=0x1a2;eip=0x004801; 	T(MOV(al, _dma_channel2));	// 9843 mov     al, _dma_channel2 ;~ 01A2:4801
cs=0x1a2;eip=0x004804; 	T(MOV(ah, 1));	// 9844 mov     ah, 1 ;~ 01A2:4804
cs=0x1a2;eip=0x004806; 	T(CMP(al, 0));	// 9845 cmp     al, 0 ;~ 01A2:4806
cs=0x1a2;eip=0x004808; 	J(JZ(loc_14817));	// 9846 jz      short loc_14817 ;~ 01A2:4808
cs=0x1a2;eip=0x00480a; 	T(MOV(ah, 2));	// 9847 mov     ah, 2 ;~ 01A2:480A
cs=0x1a2;eip=0x00480c; 	T(CMP(al, 1));	// 9848 cmp     al, 1 ;~ 01A2:480C
cs=0x1a2;eip=0x00480e; 	J(JZ(loc_14817));	// 9849 jz      short loc_14817 ;~ 01A2:480E
cs=0x1a2;eip=0x004810; 	T(MOV(ah, 3));	// 9850 mov     ah, 3 ;~ 01A2:4810
cs=0x1a2;eip=0x004812; 	X(MOV(_dma_channel2, 3));	// 9851 mov     _dma_channel2, 3 ;~ 01A2:4812
loc_14817:
	// 4985 
cs=0x1a2;eip=0x004817; 	T(OR(cl, ah));	// 9855 or      cl, ah ;~ 01A2:4817
cs=0x1a2;eip=0x004819; 	T(MOV(dx, _base_port2));	// 9856 mov     dx, _base_port2 ;~ 01A2:4819
cs=0x1a2;eip=0x00481d; 	T(MOV(al, cl));	// 9857 mov     al, cl ;~ 01A2:481D
cs=0x1a2;eip=0x00481f; 	S(OUT(dx, al));	// 9858 out     dx, al ;~ 01A2:481F
cs=0x1a2;eip=0x004820; 	J(CALL(_wss_1498a,0));	// 9859 call    _wss_1498A ;~ 01A2:4820
cs=0x1a2;eip=0x004823; 	T(MOV(eax, 0x1000));	// 9860 mov     eax, 1000h ;~ 01A2:4823
cs=0x1a2;eip=0x004829; 	T(MOV(cl, _dma_channel2));	// 9861 mov     cl, _dma_channel2 ;~ 01A2:4829
cs=0x1a2;eip=0x00482d; 	J(CALL(_alloc_dma_buf,0));	// 9862 call    _alloc_dma_buf ;~ 01A2:482D
cs=0x1a2;eip=0x004830; 	X(MOV(*(dw*)(((db*)&_audio_buf_pointer)), 0));	// 9863 mov     word ptr _audio_buf_pointer, 0 ;~ 01A2:4830
cs=0x1a2;eip=0x004836; 	X(MOV(*(dw*)(((db*)&_audio_buf_pointer)+2), ax));	// 9864 mov     word ptr _audio_buf_pointer+2, ax ;~ 01A2:4836
cs=0x1a2;eip=0x004839; 	T(MOV(ax, _base_port2));	// 9865 mov     ax, _base_port2 ;~ 01A2:4839
cs=0x1a2;eip=0x00483c; 	X(MOV(_snd_base_port, ax));	// 9866 mov     _snd_base_port, ax ;~ 01A2:483C
cs=0x1a2;eip=0x00483f; 	T(MOV(al, _irq_number2));	// 9867 mov     al, _irq_number2 ;~ 01A2:483F
cs=0x1a2;eip=0x004842; 	X(MOV(_irq_number, al));	// 9868 mov     _irq_number, al ;~ 01A2:4842
cs=0x1a2;eip=0x004845; 	T(MOV(al, _dma_channel2));	// 9869 mov     al, _dma_channel2 ;~ 01A2:4845
cs=0x1a2;eip=0x004848; 	X(MOV(_dma_channel, al));	// 9870 mov     _dma_channel, al ;~ 01A2:4848
cs=0x1a2;eip=0x00484b; 	T(CLC);	// 9871 clc ;~ 01A2:484B
cs=0x1a2;eip=0x00484c; 	J(RETN(0));	// 9872 retn ;~ 01A2:484C
_wss_test:
	// 10055 
cs=0x1a2;eip=0x004996; 	T(MOV(ecx, 0x100000));	// 10056 mov     ecx, 100000h ;~ 01A2:4996
cs=0x1a2;eip=0x00499c; 	T(MOV(dx, _base_port2));	// 10057 mov     dx, _base_port2 ;~ 01A2:499C
cs=0x1a2;eip=0x0049a0; 	T(ADD(dx, 4));	// 10058 add     dx, 4 ;~ 01A2:49A0
loc_149a3:
	// 4988 
cs=0x1a2;eip=0x0049a3; 	S(IN(al, dx));	// 10061 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:49A3
cs=0x1a2;eip=0x0049a4; 	T(TEST(al, 0x80));	// 10063 test    al, 80h ;~ 01A2:49A4
cs=0x1a2;eip=0x0049a6; 	J(JZ(loc_149b2));	// 10064 jz      short loc_149B2 ;~ 01A2:49A6
cs=0x1a2;eip=0x0049a8; 	T(DEC(ecx));	// 10065 dec     ecx ;~ 01A2:49A8
cs=0x1a2;eip=0x0049aa; 	J(JNZ(loc_149a3));	// 10066 jnz     short loc_149A3 ;~ 01A2:49AA
loc_149ac:
	// 4989 
cs=0x1a2;eip=0x0049ac; 	T(MOV(dx, offset(seg003,_aerrorsoundcardn)));	// 10069 mov     dx, offset _aErrorSoundcardN ; "Error: Soundcard not found!\r\n" ;~ 01A2:49AC
cs=0x1a2;eip=0x0049af; 	J(return _group15(m2c::kloc_14332, _state););	// 10070 jmp     loc_14332 ;~ 01A2:49AF
loc_149b2:
	// 4990 
cs=0x1a2;eip=0x0049b2; 	T(MOV(al, 0x49));	// 10074 mov     al, 49h ; 'I' ;~ 01A2:49B2
cs=0x1a2;eip=0x0049b4; 	S(OUT(dx, al));	// 10075 out     dx, al ;~ 01A2:49B4
cs=0x1a2;eip=0x0049b5; 	T(INC(dx));	// 10076 inc     dx ;~ 01A2:49B5
cs=0x1a2;eip=0x0049b6; 	T(MOV(al, 0x0C));	// 10077 mov     al, 0Ch ;~ 01A2:49B6
cs=0x1a2;eip=0x0049b8; 	S(OUT(dx, al));	// 10078 out     dx, al ;~ 01A2:49B8
cs=0x1a2;eip=0x0049b9; 	T(DEC(dx));	// 10079 dec     dx ;~ 01A2:49B9
cs=0x1a2;eip=0x0049ba; 	T(MOV(al, 9));	// 10080 mov     al, 9 ;~ 01A2:49BA
cs=0x1a2;eip=0x0049bc; 	S(OUT(dx, al));	// 10081 out     dx, al ;~ 01A2:49BC
cs=0x1a2;eip=0x0049bd; 	T(MOV(ax, 0x1080));	// 10082 mov     ax, 1080h ;~ 01A2:49BD
cs=0x1a2;eip=0x0049c0; 	J(CALL(_wss_writemixer,0));	// 10083 call    _wss_WriteMixer ;~ 01A2:49C0
cs=0x1a2;eip=0x0049c3; 	T(MOV(ax, 0x1101));	// 10084 mov     ax, 1101h ;~ 01A2:49C3
cs=0x1a2;eip=0x0049c6; 	J(CALL(_wss_writemixer,0));	// 10085 call    _wss_WriteMixer ;~ 01A2:49C6
cs=0x1a2;eip=0x0049c9; 	T(MOV(si, 0x0FFFC));	// 10086 mov     si, 0FFFCh ;~ 01A2:49C9
cs=0x1a2;eip=0x0049cc; 	T(MOV(ax, _freq1));	// 10087 mov     ax, _freq1 ;~ 01A2:49CC
cs=0x1a2;eip=0x0049cf; 	T(MOV(bl, 0x0E));	// 10088 mov     bl, 0Eh ;~ 01A2:49CF
loc_149d1:
	// 4991 
cs=0x1a2;eip=0x0049d1; 	T(ADD(si, 4));	// 10091 add     si, 4 ;~ 01A2:49D1
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0049d4; 	T(CMP(ax, *(dw*)(((db*)&_wss_freq_table)+si)));	// 10092 cmp     ax, cs:_wss_freq_table[si] ;~ 01A2:49D4
cs=0x1a2;eip=0x0049d9; 	J(JBE(loc_149df));	// 10093 jbe     short loc_149DF ;~ 01A2:49D9
cs=0x1a2;eip=0x0049db; 	T(DEC(bl));	// 10094 dec     bl ;~ 01A2:49DB
cs=0x1a2;eip=0x0049dd; 	J(JNZ(loc_149d1));	// 10095 jnz     short loc_149D1 ;~ 01A2:49DD
loc_149df:
	// 4992 
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0049df; 	T(MOV(ax, *(dw*)(((db*)&_wss_freq_table)+si)));	// 10098 mov     ax, cs:_wss_freq_table[si] ;~ 01A2:49DF
cs=0x1a2;eip=0x0049e4; 	X(MOV(_freq1, ax));	// 10099 mov     _freq1, ax ;~ 01A2:49E4
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0049e7; 	T(MOV(bx, *(dw*)(((db*)_wss_freq_table2)+si)));	// 10100 mov     bx, cs:_wss_freq_table2[si] ;~ 01A2:49E7
cs=0x1a2;eip=0x0049ec; 	T(MOV(al, byte_24623));	// 10101 mov     al, byte_24623 ;~ 01A2:49EC
cs=0x1a2;eip=0x0049ef; 	T(MOV(ah, _bit_mode));	// 10102 mov     ah, _bit_mode ;~ 01A2:49EF
cs=0x1a2;eip=0x0049f3; 	T(AND(ax, 0x1001));	// 10103 and     ax, 1001h ;~ 01A2:49F3
cs=0x1a2;eip=0x0049f6; 	T(SHL(al, 4));	// 10104 shl     al, 4 ;~ 01A2:49F6
cs=0x1a2;eip=0x0049f9; 	T(SHL(ah, 2));	// 10105 shl     ah, 2 ;~ 01A2:49F9
cs=0x1a2;eip=0x0049fc; 	T(OR(al, bl));	// 10106 or      al, bl ;~ 01A2:49FC
cs=0x1a2;eip=0x0049fe; 	T(OR(al, ah));	// 10107 or      al, ah ;~ 01A2:49FE
cs=0x1a2;eip=0x004a00; 	T(MOV(ah, 0x48));	// 10108 mov     ah, 48h ; 'H' ;~ 01A2:4A00
cs=0x1a2;eip=0x004a02; 	J(CALL(_wss_writemixer,0));	// 10109 call    _wss_WriteMixer ;~ 01A2:4A02
cs=0x1a2;eip=0x004a05; 	T(MOV(dx, _base_port2));	// 10110 mov     dx, _base_port2 ;~ 01A2:4A05
cs=0x1a2;eip=0x004a09; 	T(ADD(dx, 5));	// 10111 add     dx, 5 ;~ 01A2:4A09
cs=0x1a2;eip=0x004a0c; 	S(IN(al, dx));	// 10112 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4A0C
cs=0x1a2;eip=0x004a0d; 	S(IN(al, dx));	// 10114 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4A0D
cs=0x1a2;eip=0x004a0e; 	T(DEC(dx));	// 10116 dec     dx ;~ 01A2:4A0E
cs=0x1a2;eip=0x004a0f; 	T(MOV(ecx, 0x100000));	// 10117 mov     ecx, 100000h ;~ 01A2:4A0F
loc_14a15:
	// 4993 
cs=0x1a2;eip=0x004a15; 	S(IN(al, dx));	// 10120 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4A15
cs=0x1a2;eip=0x004a16; 	T(TEST(al, 0x80));	// 10122 test    al, 80h ;~ 01A2:4A16
cs=0x1a2;eip=0x004a18; 	J(JZ(loc_14a1e));	// 10123 jz      short loc_14A1E ;~ 01A2:4A18
cs=0x1a2;eip=0x004a1a; 	T(DEC(ecx));	// 10124 dec     ecx ;~ 01A2:4A1A
cs=0x1a2;eip=0x004a1c; 	J(JNZ(loc_14a15));	// 10125 jnz     short loc_14A15 ;~ 01A2:4A1C
loc_14a1e:
	// 4994 
cs=0x1a2;eip=0x004a1e; 	T(MOV(ecx, 0x100000));	// 10128 mov     ecx, 100000h ;~ 01A2:4A1E
loc_14a24:
	// 4995 
cs=0x1a2;eip=0x004a24; 	T(MOV(al, 8));	// 10131 mov     al, 8 ;~ 01A2:4A24
cs=0x1a2;eip=0x004a26; 	S(OUT(dx, al));	// 10132 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4A26
cs=0x1a2;eip=0x004a27; 	S(IN(al, dx));	// 10135 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4A27
cs=0x1a2;eip=0x004a28; 	T(CMP(al, 8));	// 10137 cmp     al, 8 ;~ 01A2:4A28
cs=0x1a2;eip=0x004a2a; 	J(JZ(loc_14a30));	// 10138 jz      short loc_14A30 ;~ 01A2:4A2A
cs=0x1a2;eip=0x004a2c; 	T(DEC(ecx));	// 10139 dec     ecx ;~ 01A2:4A2C
cs=0x1a2;eip=0x004a2e; 	J(JNZ(loc_14a24));	// 10140 jnz     short loc_14A24 ;~ 01A2:4A2E
loc_14a30:
	// 4996 
cs=0x1a2;eip=0x004a30; 	T(MOV(ecx, 0x100000));	// 10143 mov     ecx, 100000h ;~ 01A2:4A30
loc_14a36:
	// 4997 
cs=0x1a2;eip=0x004a36; 	T(MOV(al, 0x0B));	// 10146 mov     al, 0Bh ;~ 01A2:4A36
cs=0x1a2;eip=0x004a38; 	S(OUT(dx, al));	// 10147 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4A38
cs=0x1a2;eip=0x004a39; 	S(IN(al, dx));	// 10150 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4A39
cs=0x1a2;eip=0x004a3a; 	T(CMP(al, 0x0B));	// 10152 cmp     al, 0Bh ;~ 01A2:4A3A
cs=0x1a2;eip=0x004a3c; 	J(JZ(loc_14a42));	// 10153 jz      short loc_14A42 ;~ 01A2:4A3C
cs=0x1a2;eip=0x004a3e; 	T(DEC(ecx));	// 10154 dec     ecx ;~ 01A2:4A3E
cs=0x1a2;eip=0x004a40; 	J(JNZ(loc_14a36));	// 10155 jnz     short loc_14A36 ;~ 01A2:4A40
loc_14a42:
	// 4998 
cs=0x1a2;eip=0x004a42; 	T(MOV(ecx, 0x100000));	// 10158 mov     ecx, 100000h ;~ 01A2:4A42
loc_14a48:
	// 4999 
cs=0x1a2;eip=0x004a48; 	T(INC(dx));	// 10161 inc     dx ;~ 01A2:4A48
cs=0x1a2;eip=0x004a49; 	S(IN(al, dx));	// 10162 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4A49
cs=0x1a2;eip=0x004a4a; 	T(DEC(dx));	// 10164 dec     dx ;~ 01A2:4A4A
cs=0x1a2;eip=0x004a4b; 	T(TEST(al, 0x20));	// 10165 test    al, 20h ;~ 01A2:4A4B
cs=0x1a2;eip=0x004a4d; 	J(JZ(locret_14a56));	// 10166 jz      short locret_14A56 ;~ 01A2:4A4D
cs=0x1a2;eip=0x004a4f; 	T(MOV(al, 0x0B));	// 10167 mov     al, 0Bh ;~ 01A2:4A4F
cs=0x1a2;eip=0x004a51; 	S(OUT(dx, al));	// 10168 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4A51
cs=0x1a2;eip=0x004a52; 	T(DEC(ecx));	// 10171 dec     ecx ;~ 01A2:4A52
cs=0x1a2;eip=0x004a54; 	J(JNZ(loc_14a48));	// 10172 jnz     short loc_14A48 ;~ 01A2:4A54
locret_14a56:
	// 5000 
cs=0x1a2;eip=0x004a56; 	J(RETN(0));	// 10175 retn ;~ 01A2:4A56

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_wss_init: 	goto _wss_init;
        case m2c::k_wss_test: 	goto _wss_test;
        case m2c::kloc_147c3: 	goto loc_147c3;
        case m2c::kloc_147d0: 	goto loc_147d0;
        case m2c::kloc_147dc: 	goto loc_147dc;
        case m2c::kloc_14801: 	goto loc_14801;
        case m2c::kloc_14817: 	goto loc_14817;
        case m2c::kloc_149a3: 	goto loc_149a3;
        case m2c::kloc_149ac: 	goto loc_149ac;
        case m2c::kloc_149b2: 	goto loc_149b2;
        case m2c::kloc_149d1: 	goto loc_149d1;
        case m2c::kloc_149df: 	goto loc_149df;
        case m2c::kloc_14a15: 	goto loc_14a15;
        case m2c::kloc_14a1e: 	goto loc_14a1e;
        case m2c::kloc_14a24: 	goto loc_14a24;
        case m2c::kloc_14a30: 	goto loc_14a30;
        case m2c::kloc_14a36: 	goto loc_14a36;
        case m2c::kloc_14a42: 	goto loc_14a42;
        case m2c::kloc_14a48: 	goto loc_14a48;
        case m2c::klocret_14a56: 	goto locret_14a56;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group18(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group18:
    _begin:
_wss_set:
	// 9886 
cs=0x1a2;eip=0x004885; 	J(CALL(sub_13017,0));	// 9889 call    sub_13017 ;~ 01A2:4885
cs=0x1a2;eip=0x004888; 	X(MOV(_dma_mode, 0x58));	// 9890 mov     _dma_mode, 58h ; 'X' ;~ 01A2:4888
cs=0x1a2;eip=0x00488d; 	X(MOV(word_2460e, 0x1000));	// 9891 mov     word_2460E, 1000h ;~ 01A2:488D
cs=0x1a2;eip=0x004893; 	T(MOV(ax, _base_port2));	// 9892 mov     ax, _base_port2 ;~ 01A2:4893
cs=0x1a2;eip=0x004896; 	T(ADD(ax, 6));	// 9893 add     ax, 6 ;~ 01A2:4896
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x004899; 	X(MOV(*(dw*)(((db*)&word_14913)), ax));	// 9894 mov     cs:word_14913, ax ;~ 01A2:4899
cs=0x1a2;eip=0x00489d; 	T(MOV(si, m2c::k_wss_int));	// 9895 mov     si, offset _wss_int ; myfunc ;~ 01A2:489D
cs=0x1a2;eip=0x0048a0; 	T(MOV(al, _irq_number2));	// 9896 mov     al, _irq_number2 ;~ 01A2:48A0
cs=0x1a2;eip=0x0048a3; 	J(CALL(_setsnd_handler,0));	// 9897 call    _setsnd_handler ;~ 01A2:48A3
cs=0x1a2;eip=0x0048a6; 	J(CALL(_wss_1498a,0));	// 9898 call    _wss_1498A ;~ 01A2:48A6
cs=0x1a2;eip=0x0048a9; 	T(MOV(cl, _dma_channel2));	// 9899 mov     cl, _dma_channel2 ;~ 01A2:48A9
cs=0x1a2;eip=0x0048ad; 	J(CALL(_dma_186e3,0));	// 9900 call    _dma_186E3 ;~ 01A2:48AD
cs=0x1a2;eip=0x0048b0; 	T(MOV(ax, 0x400));	// 9901 mov     ax, 400h ;~ 01A2:48B0
cs=0x1a2;eip=0x0048b3; 	T(MOV(cl, byte_24623));	// 9902 mov     cl, byte_24623 ;~ 01A2:48B3
cs=0x1a2;eip=0x0048b7; 	T(SHR(ax, cl));	// 9903 shr     ax, cl ;~ 01A2:48B7
cs=0x1a2;eip=0x0048b9; 	T(MOV(cl, _bit_mode));	// 9904 mov     cl, _bit_mode ;~ 01A2:48B9
cs=0x1a2;eip=0x0048bd; 	T(SHR(cl, 4));	// 9905 shr     cl, 4 ;~ 01A2:48BD
cs=0x1a2;eip=0x0048c0; 	T(AND(cl, 1));	// 9906 and     cl, 1 ;~ 01A2:48C0
cs=0x1a2;eip=0x0048c3; 	T(SHR(ax, cl));	// 9907 shr     ax, cl ;~ 01A2:48C3
cs=0x1a2;eip=0x0048c5; 	T(DEC(ax));	// 9908 dec     ax ;~ 01A2:48C5
cs=0x1a2;eip=0x0048c6; 	T(MOV(ch, ah));	// 9909 mov     ch, ah ;~ 01A2:48C6
cs=0x1a2;eip=0x0048c8; 	T(MOV(ah, 0x0F));	// 9910 mov     ah, 0Fh ;~ 01A2:48C8
cs=0x1a2;eip=0x0048ca; 	J(CALL(_wss_writemixer,0));	// 9911 call    _wss_WriteMixer ;~ 01A2:48CA
cs=0x1a2;eip=0x0048cd; 	T(MOV(ah, 0x0E));	// 9912 mov     ah, 0Eh ;~ 01A2:48CD
cs=0x1a2;eip=0x0048cf; 	T(MOV(al, ch));	// 9913 mov     al, ch ;~ 01A2:48CF
cs=0x1a2;eip=0x0048d1; 	J(CALL(_wss_writemixer,0));	// 9914 call    _wss_WriteMixer ;~ 01A2:48D1
cs=0x1a2;eip=0x0048d4; 	T(MOV(ah, 6));	// 9915 mov     ah, 6 ;~ 01A2:48D4
cs=0x1a2;eip=0x0048d6; 	J(CALL(_wss_readmixer,0));	// 9916 call    _wss_ReadMixer ;~ 01A2:48D6
cs=0x1a2;eip=0x0048d9; 	X(MOV(byte_24650, al));	// 9917 mov     byte_24650, al ;~ 01A2:48D9
cs=0x1a2;eip=0x0048dc; 	T(AND(al, 0x7F));	// 9918 and     al, 7Fh ;~ 01A2:48DC
cs=0x1a2;eip=0x0048de; 	J(CALL(_wss_writemixer,0));	// 9919 call    _wss_WriteMixer ;~ 01A2:48DE
cs=0x1a2;eip=0x0048e1; 	T(MOV(ah, 7));	// 9920 mov     ah, 7 ;~ 01A2:48E1
cs=0x1a2;eip=0x0048e3; 	J(CALL(_wss_readmixer,0));	// 9921 call    _wss_ReadMixer ;~ 01A2:48E3
cs=0x1a2;eip=0x0048e6; 	X(MOV(byte_24651, al));	// 9922 mov     byte_24651, al ;~ 01A2:48E6
cs=0x1a2;eip=0x0048e9; 	T(AND(al, 0x7F));	// 9923 and     al, 7Fh ;~ 01A2:48E9
cs=0x1a2;eip=0x0048eb; 	J(CALL(_wss_writemixer,0));	// 9924 call    _wss_WriteMixer ;~ 01A2:48EB
cs=0x1a2;eip=0x0048ee; 	T(MOV(ax, 0x1800));	// 9925 mov     ax, 1800h ;~ 01A2:48EE
cs=0x1a2;eip=0x0048f1; 	J(CALL(_wss_writemixer,0));	// 9926 call    _wss_WriteMixer ;~ 01A2:48F1
cs=0x1a2;eip=0x0048f4; 	T(MOV(dx, _base_port2));	// 9927 mov     dx, _base_port2 ;~ 01A2:48F4
cs=0x1a2;eip=0x0048f8; 	T(ADD(dx, 6));	// 9928 add     dx, 6 ;~ 01A2:48F8
cs=0x1a2;eip=0x0048fb; 	T(XOR(al, al));	// 9929 xor     al, al ;~ 01A2:48FB
cs=0x1a2;eip=0x0048fd; 	S(OUT(dx, al));	// 9930 out     dx, al ;~ 01A2:48FD
cs=0x1a2;eip=0x0048fe; 	T(MOV(ax, 0x0A02));	// 9931 mov     ax, 0A02h ;~ 01A2:48FE
cs=0x1a2;eip=0x004901; 	J(CALL(_wss_writemixer,0));	// 9932 call    _wss_WriteMixer ;~ 01A2:4901
cs=0x1a2;eip=0x004904; 	T(MOV(ax, 0x905));	// 9933 mov     ax, 905h ;~ 01A2:4904
cs=0x1a2;eip=0x004907; 	J(CALL(_wss_writemixer,0));	// 9934 call    _wss_WriteMixer ;~ 01A2:4907
cs=0x1a2;eip=0x00490a; 	X(MOV(byte_2466e, 1));	// 9935 mov     byte_2466E, 1 ;~ 01A2:490A
cs=0x1a2;eip=0x00490f; 	J(RETN(0));	// 9936 retn ;~ 01A2:490F
seg000_4910_proc:
	// 9942 
_wss_int:
	// 4986 
cs=0x1a2;eip=0x004910; 	X(PUSH(ax));	// 9943 push    ax ;~ 01A2:4910
cs=0x1a2;eip=0x004911; 	X(PUSH(dx));	// 9944 push    dx ;~ 01A2:4911
cs=0x1a2;eip=0x004915; 	T(XOR(al, al));	// 9949 xor     al, al ;~ 01A2:4915
cs=0x1a2;eip=0x004917; 	S(OUT(dx, al));	// 9950 out     dx, al ;~ 01A2:4917
cs=0x1a2;eip=0x004918; 	X(PUSH(ds));	// 9951 push    ds ;~ 01A2:4918
cs=0x1a2;eip=0x004919; 	T(MOV(ax, seg_offset(seg003)));	// 9952 mov     ax, seg seg003 ;~ 01A2:4919
cs=0x1a2;eip=0x00491c; 	T(MOV(ds, ax));	// 9953 mov     ds, ax ;~ 01A2:491C
cs=0x1a2;eip=0x00491e; 	J(return _group16(m2c::kloc_14e10, _state););	// 9954 jmp     loc_14E10 ;~ 01A2:491E

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_wss_int: 	goto _wss_int;
        case m2c::k_wss_set: 	goto _wss_set;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _wss_sndoff(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _wss_sndoff:
    _begin:
cs=0x1a2;eip=0x004921; 	X(PUSHF);	// 9961 pushf ;~ 01A2:4921
cs=0x1a2;eip=0x004922; 	T(CLI);	// 9962 cli ;~ 01A2:4922
cs=0x1a2;eip=0x004923; 	T(MOV(ah, 6));	// 9963 mov     ah, 6 ;~ 01A2:4923
cs=0x1a2;eip=0x004925; 	T(MOV(al, byte_24650));	// 9964 mov     al, byte_24650 ;~ 01A2:4925
cs=0x1a2;eip=0x004928; 	J(CALL(_wss_writemixer,0));	// 9965 call    _wss_WriteMixer ;~ 01A2:4928
cs=0x1a2;eip=0x00492b; 	T(MOV(ah, 7));	// 9966 mov     ah, 7 ;~ 01A2:492B
cs=0x1a2;eip=0x00492d; 	T(MOV(al, byte_24651));	// 9967 mov     al, byte_24651 ;~ 01A2:492D
cs=0x1a2;eip=0x004930; 	J(CALL(_wss_writemixer,0));	// 9968 call    _wss_WriteMixer ;~ 01A2:4930
cs=0x1a2;eip=0x004933; 	T(MOV(ax, 0x1800));	// 9969 mov     ax, 1800h ;~ 01A2:4933
cs=0x1a2;eip=0x004936; 	J(CALL(_wss_writemixer,0));	// 9970 call    _wss_WriteMixer ;~ 01A2:4936
cs=0x1a2;eip=0x004939; 	T(MOV(dx, _base_port2));	// 9971 mov     dx, _base_port2 ;~ 01A2:4939
cs=0x1a2;eip=0x00493d; 	T(ADD(dx, 6));	// 9972 add     dx, 6 ;~ 01A2:493D
cs=0x1a2;eip=0x004940; 	T(XOR(al, al));	// 9973 xor     al, al ;~ 01A2:4940
cs=0x1a2;eip=0x004942; 	S(OUT(dx, al));	// 9974 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4942
cs=0x1a2;eip=0x004943; 	T(MOV(ax, 0x0A00));	// 9977 mov     ax, 0A00h ;~ 01A2:4943
cs=0x1a2;eip=0x004946; 	J(CALL(_wss_writemixer,0));	// 9978 call    _wss_WriteMixer ;~ 01A2:4946
cs=0x1a2;eip=0x004949; 	T(MOV(ax, 0x904));	// 9979 mov     ax, 904h ;~ 01A2:4949
cs=0x1a2;eip=0x00494c; 	J(CALL(_wss_writemixer,0));	// 9980 call    _wss_WriteMixer ;~ 01A2:494C
cs=0x1a2;eip=0x00494f; 	T(MOV(cl, _dma_channel2));	// 9981 mov     cl, _dma_channel2 ;~ 01A2:494F
cs=0x1a2;eip=0x004953; 	J(CALL(_set_dmachn_mask,0));	// 9982 call    _set_dmachn_mask ;~ 01A2:4953
cs=0x1a2;eip=0x004956; 	J(CALL(_wss_1498a,0));	// 9983 call    _wss_1498A ;~ 01A2:4956
cs=0x1a2;eip=0x004959; 	X(POPF);	// 9984 popf ;~ 01A2:4959
cs=0x1a2;eip=0x00495a; 	J(RETN(0));	// 9985 retn ;~ 01A2:495A

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_wss_sndoff: 	goto _wss_sndoff;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _wss_clean(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _wss_clean:
    _begin:
cs=0x1a2;eip=0x00495b; 	J(CALL(_memfree_18a28,0));	// 9994 call    _memfree_18A28 ;~ 01A2:495B
cs=0x1a2;eip=0x00495e; 	J(RETN(0));	// 9995 retn ;~ 01A2:495E

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_wss_clean: 	goto _wss_clean;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _wss_1495f(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _wss_1495f:
    _begin:
cs=0x1a2;eip=0x00495f; 	T(MOV(dx, 0x533));	// 10003 mov     dx, 533h ;~ 01A2:495F
cs=0x1a2;eip=0x004962; 	S(IN(al, dx));	// 10004 in      al, dx ;~ 01A2:4962
cs=0x1a2;eip=0x004963; 	S(IN(al, dx));	// 10005 in      al, dx ;~ 01A2:4963
cs=0x1a2;eip=0x004964; 	T(INC(al));	// 10006 inc     al ;~ 01A2:4964
cs=0x1a2;eip=0x004966; 	J(JNZ(loc_14985));	// 10007 jnz     short loc_14985 ;~ 01A2:4966
cs=0x1a2;eip=0x004968; 	T(MOV(dx, 0x607));	// 10008 mov     dx, 607h ;~ 01A2:4968
cs=0x1a2;eip=0x00496b; 	S(IN(al, dx));	// 10009 in      al, dx ;~ 01A2:496B
cs=0x1a2;eip=0x00496c; 	S(IN(al, dx));	// 10010 in      al, dx ;~ 01A2:496C
cs=0x1a2;eip=0x00496d; 	T(INC(al));	// 10011 inc     al ;~ 01A2:496D
cs=0x1a2;eip=0x00496f; 	J(JNZ(loc_14985));	// 10012 jnz     short loc_14985 ;~ 01A2:496F
cs=0x1a2;eip=0x004971; 	T(MOV(dx, 0x0E83));	// 10013 mov     dx, 0E83h ;~ 01A2:4971
cs=0x1a2;eip=0x004974; 	S(IN(al, dx));	// 10014 in      al, dx ;~ 01A2:4974
cs=0x1a2;eip=0x004975; 	S(IN(al, dx));	// 10015 in      al, dx ;~ 01A2:4975
cs=0x1a2;eip=0x004976; 	T(INC(al));	// 10016 inc     al ;~ 01A2:4976
cs=0x1a2;eip=0x004978; 	J(JNZ(loc_14985));	// 10017 jnz     short loc_14985 ;~ 01A2:4978
cs=0x1a2;eip=0x00497a; 	T(MOV(dx, 0x0F43));	// 10018 mov     dx, 0F43h ;~ 01A2:497A
cs=0x1a2;eip=0x00497d; 	S(IN(al, dx));	// 10019 in      al, dx ;~ 01A2:497D
cs=0x1a2;eip=0x00497e; 	S(IN(al, dx));	// 10020 in      al, dx ;~ 01A2:497E
cs=0x1a2;eip=0x00497f; 	T(INC(al));	// 10021 inc     al ;~ 01A2:497F
cs=0x1a2;eip=0x004981; 	J(JNZ(loc_14985));	// 10022 jnz     short loc_14985 ;~ 01A2:4981
cs=0x1a2;eip=0x004983; 	T(STC);	// 10023 stc ;~ 01A2:4983
cs=0x1a2;eip=0x004984; 	J(RETN(0));	// 10024 retn ;~ 01A2:4984
loc_14985:
	// 4987 
cs=0x1a2;eip=0x004985; 	T(SUB(dx, 3));	// 10029 sub     dx, 3 ;~ 01A2:4985
cs=0x1a2;eip=0x004988; 	T(CLC);	// 10030 clc ;~ 01A2:4988
cs=0x1a2;eip=0x004989; 	J(RETN(0));	// 10031 retn ;~ 01A2:4989

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_wss_1495f: 	goto _wss_1495f;
        case m2c::kloc_14985: 	goto loc_14985;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _wss_1498a(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _wss_1498a:
    _begin:
cs=0x1a2;eip=0x00498a; 	T(MOV(dx, _base_port2));	// 10040 mov     dx, _base_port2 ;~ 01A2:498A
cs=0x1a2;eip=0x00498e; 	T(ADD(dx, 6));	// 10041 add     dx, 6 ;~ 01A2:498E
cs=0x1a2;eip=0x004991; 	S(IN(al, dx));	// 10042 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4991
cs=0x1a2;eip=0x004992; 	T(XOR(al, al));	// 10044 xor     al, al ;~ 01A2:4992
cs=0x1a2;eip=0x004994; 	S(OUT(dx, al));	// 10045 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4994
cs=0x1a2;eip=0x004995; 	J(RETN(0));	// 10048 retn ;~ 01A2:4995

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_wss_1498a: 	goto _wss_1498a;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _wss_writemixer(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _wss_writemixer:
    _begin:
cs=0x1a2;eip=0x004a57; 	T(MOV(dx, _base_port2));	// 10184 mov     dx, _base_port2 ;~ 01A2:4A57
cs=0x1a2;eip=0x004a5b; 	T(XCHG(al, ah));	// 10185 xchg    al, ah ;~ 01A2:4A5B
cs=0x1a2;eip=0x004a5d; 	T(ADD(dx, 4));	// 10186 add     dx, 4 ;~ 01A2:4A5D
cs=0x1a2;eip=0x004a60; 	S(OUT(dx, al));	// 10187 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4A60
cs=0x1a2;eip=0x004a61; 	T(INC(dx));	// 10190 inc     dx ;~ 01A2:4A61
cs=0x1a2;eip=0x004a62; 	T(XCHG(al, ah));	// 10191 xchg    al, ah ;~ 01A2:4A62
cs=0x1a2;eip=0x004a64; 	S(OUT(dx, al));	// 10192 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4A64
cs=0x1a2;eip=0x004a65; 	J(RETN(0));	// 10194 retn ;~ 01A2:4A65

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_wss_writemixer: 	goto _wss_writemixer;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _wss_readmixer(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _wss_readmixer:
    _begin:
cs=0x1a2;eip=0x004a66; 	T(MOV(dx, _base_port2));	// 10203 mov     dx, _base_port2 ;~ 01A2:4A66
cs=0x1a2;eip=0x004a6a; 	T(ADD(dx, 4));	// 10204 add     dx, 4 ;~ 01A2:4A6A
cs=0x1a2;eip=0x004a6d; 	T(MOV(al, ah));	// 10205 mov     al, ah ;~ 01A2:4A6D
cs=0x1a2;eip=0x004a6f; 	S(OUT(dx, al));	// 10206 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4A6F
cs=0x1a2;eip=0x004a70; 	T(INC(dx));	// 10209 inc     dx ;~ 01A2:4A70
cs=0x1a2;eip=0x004a71; 	S(IN(al, dx));	// 10210 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4A71
cs=0x1a2;eip=0x004a72; 	J(RETN(0));	// 10212 retn ;~ 01A2:4A72

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_wss_readmixer: 	goto _wss_readmixer;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group19(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group19:
    _begin:
_sb16_on:
	// 10303 
cs=0x1a2;eip=0x004b18; 	J(CALL(sub_13017,0));	// 10306 call    sub_13017 ;~ 01A2:4B18
cs=0x1a2;eip=0x004b1b; 	X(MOV(_dma_mode, 0x58));	// 10307 mov     _dma_mode, 58h ; 'X' ;~ 01A2:4B1B
cs=0x1a2;eip=0x004b20; 	X(MOV(word_2460e, 0x1000));	// 10308 mov     word_2460E, 1000h ;~ 01A2:4B20
cs=0x1a2;eip=0x004b26; 	T(MOV(si, m2c::k_sb_callback));	// 10309 mov     si, offset _sb_callback ; myfunc ;~ 01A2:4B26
cs=0x1a2;eip=0x004b29; 	T(MOV(al, _sb_irq_number));	// 10310 mov     al, _sb_irq_number ;~ 01A2:4B29
cs=0x1a2;eip=0x004b2c; 	J(CALL(_setsnd_handler,0));	// 10311 call    _setsnd_handler ;~ 01A2:4B2C
cs=0x1a2;eip=0x004b2f; 	T(MOV(dx, _sb_base_port));	// 10312 mov     dx, _sb_base_port ;~ 01A2:4B2F
cs=0x1a2;eip=0x004b33; 	T(ADD(dl, 0x0C));	// 10313 add     dl, 0Ch ;~ 01A2:4B33
loc_14b36:
	// 5006 
cs=0x1a2;eip=0x004b36; 	S(IN(al, dx));	// 10316 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4B36
cs=0x1a2;eip=0x004b37; 	T(OR(al, al));	// 10318 or      al, al ;~ 01A2:4B37
cs=0x1a2;eip=0x004b39; 	J(JS(loc_14b36));	// 10319 js      short loc_14B36 ;~ 01A2:4B39
cs=0x1a2;eip=0x004b3b; 	T(MOV(al, 0x41));	// 10320 mov     al, 41h ; 'A' ;~ 01A2:4B3B
cs=0x1a2;eip=0x004b3d; 	S(OUT(dx, al));	// 10321 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4B3D
loc_14b3e:
	// 5007 
cs=0x1a2;eip=0x004b3e; 	S(IN(al, dx));	// 10325 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4B3E
cs=0x1a2;eip=0x004b3f; 	T(OR(al, al));	// 10327 or      al, al ;~ 01A2:4B3F
cs=0x1a2;eip=0x004b41; 	J(JS(loc_14b3e));	// 10328 js      short loc_14B3E ;~ 01A2:4B41
cs=0x1a2;eip=0x004b43; 	T(MOV(al, *(db*)(((db*)&_freq1)+1)));	// 10329 mov     al, byte ptr _freq1+1 ;~ 01A2:4B43
cs=0x1a2;eip=0x004b46; 	S(OUT(dx, al));	// 10330 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4B46
loc_14b47:
	// 5008 
cs=0x1a2;eip=0x004b47; 	S(IN(al, dx));	// 10334 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4B47
cs=0x1a2;eip=0x004b48; 	T(OR(al, al));	// 10336 or      al, al ;~ 01A2:4B48
cs=0x1a2;eip=0x004b4a; 	J(JS(loc_14b47));	// 10337 js      short loc_14B47 ;~ 01A2:4B4A
cs=0x1a2;eip=0x004b4c; 	T(MOV(al, *(db*)(((db*)&_freq1))));	// 10338 mov     al, byte ptr _freq1 ;~ 01A2:4B4C
cs=0x1a2;eip=0x004b4f; 	S(OUT(dx, al));	// 10339 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4B4F
loc_14b50:
	// 5009 
cs=0x1a2;eip=0x004b50; 	S(IN(al, dx));	// 10343 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4B50
cs=0x1a2;eip=0x004b51; 	T(OR(al, al));	// 10345 or      al, al ;~ 01A2:4B51
cs=0x1a2;eip=0x004b53; 	J(JS(loc_14b50));	// 10346 js      short loc_14B50 ;~ 01A2:4B53
cs=0x1a2;eip=0x004b55; 	T(CMP(_bit_mode, 16));	// 10347 cmp     _bit_mode, 16 ;~ 01A2:4B55
cs=0x1a2;eip=0x004b5a; 	J(JZ(loc_14b6a));	// 10348 jz      short loc_14B6A ;~ 01A2:4B5A
cs=0x1a2;eip=0x004b5c; 	T(MOV(ax, _sb_base_port));	// 10349 mov     ax, _sb_base_port ;~ 01A2:4B5C
cs=0x1a2;eip=0x004b5f; 	T(ADD(al, 0x0E));	// 10350 add     al, 0Eh ;~ 01A2:4B5F
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x004b61; 	X(MOV(*(dw*)(((db*)&word_14bbb)), ax));	// 10351 mov     cs:word_14BBB, ax ;~ 01A2:4B61
cs=0x1a2;eip=0x004b65; 	T(MOV(ax, 0x0C6));	// 10352 mov     ax, 0C6h ; 'Æ' ;~ 01A2:4B65
cs=0x1a2;eip=0x004b68; 	J(JMP(loc_14b76));	// 10353 jmp     short loc_14B76 ;~ 01A2:4B68
loc_14b6a:
	// 5010 
cs=0x1a2;eip=0x004b6a; 	T(MOV(ax, _sb_base_port));	// 10357 mov     ax, _sb_base_port ;~ 01A2:4B6A
cs=0x1a2;eip=0x004b6d; 	T(ADD(al, 0x0F));	// 10358 add     al, 0Fh ;~ 01A2:4B6D
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x004b6f; 	X(MOV(*(dw*)(((db*)&word_14bbb)), ax));	// 10359 mov     cs:word_14BBB, ax ;~ 01A2:4B6F
cs=0x1a2;eip=0x004b73; 	T(MOV(ax, 0x10B6));	// 10360 mov     ax, 10B6h ;~ 01A2:4B73
loc_14b76:
	// 5011 
cs=0x1a2;eip=0x004b76; 	S(OUT(dx, al));	// 10363 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4B76
loc_14b77:
	// 5012 
cs=0x1a2;eip=0x004b77; 	S(IN(al, dx));	// 10367 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4B77
cs=0x1a2;eip=0x004b78; 	T(OR(al, al));	// 10369 or      al, al ;~ 01A2:4B78
cs=0x1a2;eip=0x004b7a; 	J(JS(loc_14b77));	// 10370 js      short loc_14B77 ;~ 01A2:4B7A
cs=0x1a2;eip=0x004b7c; 	T(MOV(al, byte_24623));	// 10371 mov     al, byte_24623 ;~ 01A2:4B7C
cs=0x1a2;eip=0x004b7f; 	T(AND(al, 1));	// 10372 and     al, 1 ;~ 01A2:4B7F
cs=0x1a2;eip=0x004b81; 	T(SHL(al, 5));	// 10373 shl     al, 5 ;~ 01A2:4B81
cs=0x1a2;eip=0x004b84; 	T(OR(al, ah));	// 10374 or      al, ah ;~ 01A2:4B84
cs=0x1a2;eip=0x004b86; 	S(OUT(dx, al));	// 10375 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4B86
loc_14b87:
	// 5013 
cs=0x1a2;eip=0x004b87; 	S(IN(al, dx));	// 10379 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4B87
cs=0x1a2;eip=0x004b88; 	T(OR(al, al));	// 10381 or      al, al ;~ 01A2:4B88
cs=0x1a2;eip=0x004b8a; 	J(JS(loc_14b87));	// 10382 js      short loc_14B87 ;~ 01A2:4B8A
cs=0x1a2;eip=0x004b8c; 	T(MOV(ax, word_2460e));	// 10383 mov     ax, word_2460E ;~ 01A2:4B8C
cs=0x1a2;eip=0x004b8f; 	T(SHR(ax, 2));	// 10384 shr     ax, 2 ;~ 01A2:4B8F
cs=0x1a2;eip=0x004b92; 	T(MOV(cl, _bit_mode));	// 10385 mov     cl, _bit_mode ;~ 01A2:4B92
cs=0x1a2;eip=0x004b96; 	T(SHR(cl, 4));	// 10386 shr     cl, 4 ;~ 01A2:4B96
cs=0x1a2;eip=0x004b99; 	T(AND(cl, 1));	// 10387 and     cl, 1 ;~ 01A2:4B99
cs=0x1a2;eip=0x004b9c; 	T(SHR(ax, cl));	// 10388 shr     ax, cl ;~ 01A2:4B9C
cs=0x1a2;eip=0x004b9e; 	T(DEC(ax));	// 10389 dec     ax ;~ 01A2:4B9E
cs=0x1a2;eip=0x004b9f; 	S(OUT(dx, al));	// 10390 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4B9F
loc_14ba0:
	// 5014 
cs=0x1a2;eip=0x004ba0; 	S(IN(al, dx));	// 10394 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4BA0
cs=0x1a2;eip=0x004ba1; 	T(OR(al, al));	// 10396 or      al, al ;~ 01A2:4BA1
cs=0x1a2;eip=0x004ba3; 	J(JS(loc_14ba0));	// 10397 js      short loc_14BA0 ;~ 01A2:4BA3
cs=0x1a2;eip=0x004ba5; 	T(MOV(al, ah));	// 10398 mov     al, ah ;~ 01A2:4BA5
cs=0x1a2;eip=0x004ba7; 	S(OUT(dx, al));	// 10399 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4BA7
cs=0x1a2;eip=0x004ba8; 	T(MOV(cl, _dma_chn_mask));	// 10401 mov     cl, _dma_chn_mask ;~ 01A2:4BA8
cs=0x1a2;eip=0x004bac; 	J(CALL(_dma_186e3,0));	// 10402 call    _dma_186E3 ;~ 01A2:4BAC
cs=0x1a2;eip=0x004baf; 	X(MOV(byte_2466e, 1));	// 10403 mov     byte_2466E, 1 ;~ 01A2:4BAF
cs=0x1a2;eip=0x004bb4; 	J(RETN(0));	// 10404 retn ;~ 01A2:4BB4
seg000_4bb5_proc:
	// 10408 
cs=0x1a2;eip=0x004bb5; 	T(XCHG(bx, bx));	// 10408 xchg    bx, bx ;~ 01A2:4BB5
cs=0x1a2;eip=0x004bb7; 	T(NOP);	// 10409 nop ;~ 01A2:4BB7
_sb_callback:
	// 5015 
cs=0x1a2;eip=0x004bb8; 	X(PUSH(ax));	// 10413 push    ax ;~ 01A2:4BB8
cs=0x1a2;eip=0x004bb9; 	X(PUSH(dx));	// 10414 push    dx ;~ 01A2:4BB9
cs=0x1a2;eip=0x004bbd; 	S(IN(al, dx));	// 10420 in      al, dx ;~ 01A2:4BBD
cs=0x1a2;eip=0x004bbe; 	X(PUSH(ds));	// 10421 push    ds ;~ 01A2:4BBE
cs=0x1a2;eip=0x004bbf; 	T(MOV(ax, seg_offset(seg003)));	// 10422 mov     ax, seg seg003 ;~ 01A2:4BBF
cs=0x1a2;eip=0x004bc2; 	T(MOV(ds, ax));	// 10423 mov     ds, ax ;~ 01A2:4BC2
cs=0x1a2;eip=0x004bc4; 	J(return _group16(m2c::kloc_14e10, _state););	// 10424 jmp     loc_14E10 ;~ 01A2:4BC4

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_sb16_on: 	goto _sb16_on;
        case m2c::k_sb_callback: 	goto _sb_callback;
        case m2c::kloc_14b36: 	goto loc_14b36;
        case m2c::kloc_14b3e: 	goto loc_14b3e;
        case m2c::kloc_14b47: 	goto loc_14b47;
        case m2c::kloc_14b50: 	goto loc_14b50;
        case m2c::kloc_14b6a: 	goto loc_14b6a;
        case m2c::kloc_14b76: 	goto loc_14b76;
        case m2c::kloc_14b77: 	goto loc_14b77;
        case m2c::kloc_14b87: 	goto loc_14b87;
        case m2c::kloc_14ba0: 	goto loc_14ba0;
        case m2c::kseg000_4bb5_proc: 	goto seg000_4bb5_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _sb16_off(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _sb16_off:
    _begin:
cs=0x1a2;eip=0x004bc7; 	X(PUSHF);	// 10431 pushf ;~ 01A2:4BC7
cs=0x1a2;eip=0x004bc8; 	T(CLI);	// 10432 cli ;~ 01A2:4BC8
cs=0x1a2;eip=0x004bc9; 	T(CMP(byte_2466e, 1));	// 10433 cmp     byte_2466E, 1 ;~ 01A2:4BC9
cs=0x1a2;eip=0x004bce; 	J(JNZ(loc_14bfd));	// 10434 jnz     short loc_14BFD ;~ 01A2:4BCE
cs=0x1a2;eip=0x004bd0; 	T(CLI);	// 10435 cli ;~ 01A2:4BD0
cs=0x1a2;eip=0x004bd1; 	T(MOV(dx, _sb_base_port));	// 10436 mov     dx, _sb_base_port ;~ 01A2:4BD1
cs=0x1a2;eip=0x004bd5; 	T(ADD(dl, 0x0C));	// 10437 add     dl, 0Ch ;~ 01A2:4BD5
loc_14bd8:
	// 5016 
cs=0x1a2;eip=0x004bd8; 	S(IN(al, dx));	// 10440 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4BD8
cs=0x1a2;eip=0x004bd9; 	T(OR(al, al));	// 10442 or      al, al ;~ 01A2:4BD9
cs=0x1a2;eip=0x004bdb; 	J(JS(loc_14bd8));	// 10443 js      short loc_14BD8 ;~ 01A2:4BDB
cs=0x1a2;eip=0x004bdd; 	T(MOV(al, 0x0DA));	// 10444 mov     al, 0DAh ; 'Ú' ;~ 01A2:4BDD
cs=0x1a2;eip=0x004bdf; 	T(CMP(_bit_mode, 8));	// 10445 cmp     _bit_mode, 8 ;~ 01A2:4BDF
cs=0x1a2;eip=0x004be4; 	J(JZ(loc_14be8));	// 10446 jz      short loc_14BE8 ;~ 01A2:4BE4
cs=0x1a2;eip=0x004be6; 	T(MOV(al, 0x0D9));	// 10447 mov     al, 0D9h ; 'Ù' ;~ 01A2:4BE6
loc_14be8:
	// 5017 
cs=0x1a2;eip=0x004be8; 	S(OUT(dx, al));	// 10450 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4BE8
loc_14be9:
	// 5018 
cs=0x1a2;eip=0x004be9; 	S(IN(al, dx));	// 10454 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4BE9
cs=0x1a2;eip=0x004bea; 	T(OR(al, al));	// 10456 or      al, al ;~ 01A2:4BEA
cs=0x1a2;eip=0x004bec; 	J(JS(loc_14be9));	// 10457 js      short loc_14BE9 ;~ 01A2:4BEC
cs=0x1a2;eip=0x004bee; 	J(CALL(_restore_intvector,0));	// 10458 call    _restore_intvector ;~ 01A2:4BEE
cs=0x1a2;eip=0x004bf1; 	T(MOV(cl, _dma_chn_mask));	// 10459 mov     cl, _dma_chn_mask ;~ 01A2:4BF1
cs=0x1a2;eip=0x004bf5; 	J(CALL(_set_dmachn_mask,0));	// 10460 call    _set_dmachn_mask ;~ 01A2:4BF5
cs=0x1a2;eip=0x004bf8; 	X(MOV(byte_2466e, 0));	// 10461 mov     byte_2466E, 0 ;~ 01A2:4BF8
loc_14bfd:
	// 5019 
cs=0x1a2;eip=0x004bfd; 	X(POPF);	// 10464 popf ;~ 01A2:4BFD
cs=0x1a2;eip=0x004bfe; 	J(RETN(0));	// 10465 retn ;~ 01A2:4BFE

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_sb16_off: 	goto _sb16_off;
        case m2c::kloc_14bd8: 	goto loc_14bd8;
        case m2c::kloc_14be8: 	goto loc_14be8;
        case m2c::kloc_14be9: 	goto loc_14be9;
        case m2c::kloc_14bfd: 	goto loc_14bfd;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _sb16_deinit(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _sb16_deinit:
    _begin:
cs=0x1a2;eip=0x004bff; 	J(CALL(_memfree_18a28,0));	// 10474 call    _memfree_18A28 ;~ 01A2:4BFF
cs=0x1a2;eip=0x004c02; 	J(CALL(_sb16_sound_off,0));	// 10475 call    _sb16_sound_off ;~ 01A2:4C02
cs=0x1a2;eip=0x004c05; 	J(RETN(0));	// 10476 retn ;~ 01A2:4C05

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_sb16_deinit: 	goto _sb16_deinit;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group20(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group20:
    _begin:
seg000_4c5c_proc:
	// 10516 
_sbpro_set:
	// 5020 
cs=0x1a2;eip=0x004c5c; 	J(CALL(sub_13017,0));	// 10518 call    sub_13017 ;~ 01A2:4C5C
cs=0x1a2;eip=0x004c5f; 	X(MOV(_dma_mode, 0x58));	// 10519 mov     _dma_mode, 58h ; 'X' ;~ 01A2:4C5F
cs=0x1a2;eip=0x004c64; 	X(MOV(word_2460e, 0x1000));	// 10520 mov     word_2460E, 1000h ;~ 01A2:4C64
cs=0x1a2;eip=0x004c6a; 	T(MOV(ax, _sb_base_port));	// 10521 mov     ax, _sb_base_port ;~ 01A2:4C6A
cs=0x1a2;eip=0x004c6d; 	T(ADD(al, 0x0E));	// 10522 add     al, 0Eh ;~ 01A2:4C6D
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x004c6f; 	X(MOV(*(dw*)(((db*)&word_14ceb)), ax));	// 10523 mov     cs:word_14CEB, ax ;~ 01A2:4C6F
cs=0x1a2;eip=0x004c73; 	T(MOV(ah, 0x0E));	// 10524 mov     ah, 0Eh ;~ 01A2:4C73
cs=0x1a2;eip=0x004c75; 	J(CALL(_readmixersb,0));	// 10525 call    _ReadMixerSB ;~ 01A2:4C75
cs=0x1a2;eip=0x004c78; 	X(MOV(byte_24664, al));	// 10526 mov     byte_24664, al ;~ 01A2:4C78
cs=0x1a2;eip=0x004c7b; 	T(AND(al, 0x0FD));	// 10527 and     al, 0FDh ;~ 01A2:4C7B
cs=0x1a2;eip=0x004c7d; 	T(CMP(byte_24623, 0));	// 10528 cmp     byte_24623, 0 ;~ 01A2:4C7D
cs=0x1a2;eip=0x004c82; 	J(JZ(loc_14c89));	// 10529 jz      short loc_14C89 ;~ 01A2:4C82
cs=0x1a2;eip=0x004c84; 	J(CALL(_writemixersb,0));	// 10530 call    _WriteMixerSB ;~ 01A2:4C84
cs=0x1a2;eip=0x004c87; 	T(OR(al, 0x22));	// 10531 or      al, 22h ;~ 01A2:4C87
loc_14c89:
	// 5021 
cs=0x1a2;eip=0x004c89; 	J(CALL(_writemixersb,0));	// 10534 call    _WriteMixerSB ;~ 01A2:4C89
cs=0x1a2;eip=0x004c8c; 	X(PUSHF);	// 10535 pushf ;~ 01A2:4C8C
cs=0x1a2;eip=0x004c8d; 	T(CLI);	// 10536 cli ;~ 01A2:4C8D
cs=0x1a2;eip=0x004c8e; 	T(MOV(dx, _sb_base_port));	// 10537 mov     dx, _sb_base_port ;~ 01A2:4C8E
cs=0x1a2;eip=0x004c92; 	T(ADD(dl, 0x0E));	// 10538 add     dl, 0Eh ;~ 01A2:4C92
cs=0x1a2;eip=0x004c95; 	S(IN(al, dx));	// 10539 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4C95
cs=0x1a2;eip=0x004c96; 	T(SUB(dl, 2));	// 10542 sub     dl, 2 ;~ 01A2:4C96
loc_14c99:
	// 5022 
cs=0x1a2;eip=0x004c99; 	S(IN(al, dx));	// 10545 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4C99
cs=0x1a2;eip=0x004c9a; 	T(OR(al, al));	// 10547 or      al, al ;~ 01A2:4C9A
cs=0x1a2;eip=0x004c9c; 	J(JS(loc_14c99));	// 10548 js      short loc_14C99 ;~ 01A2:4C9C
cs=0x1a2;eip=0x004c9e; 	T(MOV(al, 0x40));	// 10549 mov     al, 40h ; '@' ;~ 01A2:4C9E
cs=0x1a2;eip=0x004ca0; 	S(OUT(dx, al));	// 10550 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4CA0
loc_14ca1:
	// 5023 
cs=0x1a2;eip=0x004ca1; 	S(IN(al, dx));	// 10554 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4CA1
cs=0x1a2;eip=0x004ca2; 	T(OR(al, al));	// 10556 or      al, al ;~ 01A2:4CA2
cs=0x1a2;eip=0x004ca4; 	J(JS(loc_14ca1));	// 10557 js      short loc_14CA1 ;~ 01A2:4CA4
cs=0x1a2;eip=0x004ca6; 	T(MOV(al, _sb_timeconst));	// 10558 mov     al, _sb_timeconst ;~ 01A2:4CA6
cs=0x1a2;eip=0x004ca9; 	S(OUT(dx, al));	// 10559 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4CA9
loc_14caa:
	// 5024 
cs=0x1a2;eip=0x004caa; 	S(IN(al, dx));	// 10563 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4CAA
cs=0x1a2;eip=0x004cab; 	T(OR(al, al));	// 10565 or      al, al ;~ 01A2:4CAB
cs=0x1a2;eip=0x004cad; 	J(JS(loc_14caa));	// 10566 js      short loc_14CAA ;~ 01A2:4CAD
cs=0x1a2;eip=0x004caf; 	T(MOV(al, 0x48));	// 10567 mov     al, 48h ; 'H' ;~ 01A2:4CAF
cs=0x1a2;eip=0x004cb1; 	S(OUT(dx, al));	// 10568 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4CB1
loc_14cb2:
	// 5025 
cs=0x1a2;eip=0x004cb2; 	S(IN(al, dx));	// 10572 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4CB2
cs=0x1a2;eip=0x004cb3; 	T(OR(al, al));	// 10574 or      al, al ;~ 01A2:4CB3
cs=0x1a2;eip=0x004cb5; 	J(JS(loc_14cb2));	// 10575 js      short loc_14CB2 ;~ 01A2:4CB5
cs=0x1a2;eip=0x004cb7; 	T(MOV(ax, word_2460e));	// 10576 mov     ax, word_2460E ;~ 01A2:4CB7
cs=0x1a2;eip=0x004cba; 	T(SHR(ax, 2));	// 10577 shr     ax, 2 ;~ 01A2:4CBA
cs=0x1a2;eip=0x004cbd; 	T(DEC(ax));	// 10578 dec     ax ;~ 01A2:4CBD
cs=0x1a2;eip=0x004cbe; 	S(OUT(dx, al));	// 10579 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4CBE
loc_14cbf:
	// 5026 
cs=0x1a2;eip=0x004cbf; 	S(IN(al, dx));	// 10583 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4CBF
cs=0x1a2;eip=0x004cc0; 	T(OR(al, al));	// 10585 or      al, al ;~ 01A2:4CC0
cs=0x1a2;eip=0x004cc2; 	J(JS(loc_14cbf));	// 10586 js      short loc_14CBF ;~ 01A2:4CC2
cs=0x1a2;eip=0x004cc4; 	T(MOV(al, ah));	// 10587 mov     al, ah ;~ 01A2:4CC4
cs=0x1a2;eip=0x004cc6; 	S(OUT(dx, al));	// 10588 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4CC6
loc_14cc7:
	// 5027 
cs=0x1a2;eip=0x004cc7; 	S(IN(al, dx));	// 10592 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4CC7
cs=0x1a2;eip=0x004cc8; 	T(OR(al, al));	// 10594 or      al, al ;~ 01A2:4CC8
cs=0x1a2;eip=0x004cca; 	J(JS(loc_14cc7));	// 10595 js      short loc_14CC7 ;~ 01A2:4CCA
cs=0x1a2;eip=0x004ccc; 	T(MOV(al, 0x90));	// 10596 mov     al, 90h ;~ 01A2:4CCC
cs=0x1a2;eip=0x004cce; 	S(OUT(dx, al));	// 10597 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4CCE
cs=0x1a2;eip=0x004ccf; 	X(MOV(byte_2466e, 1));	// 10599 mov     byte_2466E, 1 ;~ 01A2:4CCF
cs=0x1a2;eip=0x004cd4; 	T(MOV(si, m2c::kmyfunc));	// 10600 mov     si, offset myfunc ; myfunc ;~ 01A2:4CD4
cs=0x1a2;eip=0x004cd7; 	T(MOV(al, _sb_irq_number));	// 10601 mov     al, _sb_irq_number ;~ 01A2:4CD7
cs=0x1a2;eip=0x004cda; 	J(CALL(_setsnd_handler,0));	// 10602 call    _setsnd_handler ;~ 01A2:4CDA
cs=0x1a2;eip=0x004cdd; 	T(MOV(cl, _dma_chn_mask));	// 10603 mov     cl, _dma_chn_mask ;~ 01A2:4CDD
cs=0x1a2;eip=0x004ce1; 	J(CALL(_dma_186e3,0));	// 10604 call    _dma_186E3 ;~ 01A2:4CE1
cs=0x1a2;eip=0x004ce4; 	X(POPF);	// 10605 popf ;~ 01A2:4CE4
cs=0x1a2;eip=0x004ce5; 	J(RETN(0));	// 10606 retn ;~ 01A2:4CE5
ret_1a2_4ce6:
	// 5028 
cs=0x1a2;eip=0x004ce6; 	T(XCHG(bx, bx));	// 10609 xchg    bx, bx ;~ 01A2:4CE6
myfunc:
	// 5029 
cs=0x1a2;eip=0x004ce8; 	X(PUSH(ax));	// 10613 push    ax ;~ 01A2:4CE8
cs=0x1a2;eip=0x004ce9; 	X(PUSH(dx));	// 10614 push    dx ;~ 01A2:4CE9
cs=0x1a2;eip=0x004ced; 	S(IN(al, dx));	// 10619 in      al, dx ;~ 01A2:4CED
cs=0x1a2;eip=0x004cee; 	X(PUSH(ds));	// 10620 push    ds ;~ 01A2:4CEE
cs=0x1a2;eip=0x004cef; 	T(MOV(ax, seg_offset(seg003)));	// 10621 mov     ax, seg seg003 ;~ 01A2:4CEF
cs=0x1a2;eip=0x004cf2; 	T(MOV(ds, ax));	// 10622 mov     ds, ax ;~ 01A2:4CF2
cs=0x1a2;eip=0x004cf4; 	J(return _group16(m2c::kloc_14e10, _state););	// 10623 jmp     loc_14E10 ;~ 01A2:4CF4
_sb_set:
	// 10698 
cs=0x1a2;eip=0x004d77; 	T(CMP(_freq1, 0x59D8));	// 10701 cmp     _freq1, 59D8h ;~ 01A2:4D77
cs=0x1a2;eip=0x004d7d; 	J(JNC(_sbpro_set));	// 10702 jnb     _sbpro_set ;~ 01A2:4D7D
cs=0x1a2;eip=0x004d81; 	J(CALL(sub_13017,0));	// 10703 call    sub_13017 ;~ 01A2:4D81
cs=0x1a2;eip=0x004d84; 	X(MOV(_dma_mode, 0x58));	// 10704 mov     _dma_mode, 58h ; 'X' ;~ 01A2:4D84
cs=0x1a2;eip=0x004d89; 	X(MOV(word_2460e, 0x1000));	// 10705 mov     word_2460E, 1000h ;~ 01A2:4D89
cs=0x1a2;eip=0x004d8f; 	X(PUSHF);	// 10706 pushf ;~ 01A2:4D8F
cs=0x1a2;eip=0x004d90; 	T(CLI);	// 10707 cli ;~ 01A2:4D90
cs=0x1a2;eip=0x004d91; 	T(MOV(ax, _sb_base_port));	// 10708 mov     ax, _sb_base_port ;~ 01A2:4D91
cs=0x1a2;eip=0x004d94; 	T(ADD(al, 0x0E));	// 10709 add     al, 0Eh ;~ 01A2:4D94
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x004d96; 	X(MOV(*(dw*)(((db*)&word_14ded)), ax));	// 10710 mov     cs:word_14DED, ax ;~ 01A2:4D96
cs=0x1a2;eip=0x004d9a; 	T(MOV(si, m2c::k_sb_handler_int));	// 10711 mov     si, offset _sb_handler_int ; myfunc ;~ 01A2:4D9A
cs=0x1a2;eip=0x004d9d; 	T(MOV(al, _sb_irq_number));	// 10712 mov     al, _sb_irq_number ;~ 01A2:4D9D
cs=0x1a2;eip=0x004da0; 	J(CALL(_setsnd_handler,0));	// 10713 call    _setsnd_handler ;~ 01A2:4DA0
cs=0x1a2;eip=0x004da3; 	T(MOV(dx, _sb_base_port));	// 10714 mov     dx, _sb_base_port ;~ 01A2:4DA3
cs=0x1a2;eip=0x004da7; 	T(MOV(al, 0x40));	// 10715 mov     al, 40h ; '@' ;~ 01A2:4DA7
cs=0x1a2;eip=0x004da9; 	J(CALL(_writesb,0));	// 10716 call    _WriteSB ;~ 01A2:4DA9
cs=0x1a2;eip=0x004dac; 	T(MOV(al, _sb_timeconst));	// 10717 mov     al, _sb_timeconst ;~ 01A2:4DAC
cs=0x1a2;eip=0x004daf; 	J(CALL(_writesb,0));	// 10718 call    _WriteSB ;~ 01A2:4DAF
cs=0x1a2;eip=0x004db2; 	T(MOV(cl, _dma_chn_mask));	// 10719 mov     cl, _dma_chn_mask ;~ 01A2:4DB2
cs=0x1a2;eip=0x004db6; 	J(CALL(_dma_186e3,0));	// 10720 call    _dma_186E3 ;~ 01A2:4DB6
cs=0x1a2;eip=0x004db9; 	T(MOV(dx, _sb_base_port));	// 10721 mov     dx, _sb_base_port ;~ 01A2:4DB9
cs=0x1a2;eip=0x004dbd; 	T(ADD(dl, 0x0C));	// 10722 add     dl, 0Ch ;~ 01A2:4DBD
loc_14dc0:
	// 5032 
cs=0x1a2;eip=0x004dc0; 	S(IN(al, dx));	// 10725 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4DC0
cs=0x1a2;eip=0x004dc1; 	T(OR(al, al));	// 10727 or      al, al ;~ 01A2:4DC1
cs=0x1a2;eip=0x004dc3; 	J(JS(loc_14dc0));	// 10728 js      short loc_14DC0 ;~ 01A2:4DC3
cs=0x1a2;eip=0x004dc5; 	T(MOV(al, 0x14));	// 10729 mov     al, 14h ;~ 01A2:4DC5
cs=0x1a2;eip=0x004dc7; 	S(OUT(dx, al));	// 10730 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4DC7
loc_14dc8:
	// 5033 
cs=0x1a2;eip=0x004dc8; 	S(IN(al, dx));	// 10734 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4DC8
cs=0x1a2;eip=0x004dc9; 	T(OR(al, al));	// 10736 or      al, al ;~ 01A2:4DC9
cs=0x1a2;eip=0x004dcb; 	J(JS(loc_14dc8));	// 10737 js      short loc_14DC8 ;~ 01A2:4DCB
cs=0x1a2;eip=0x004dcd; 	T(MOV(ax, word_2460e));	// 10738 mov     ax, word_2460E ;~ 01A2:4DCD
cs=0x1a2;eip=0x004dd0; 	T(SHR(ax, 2));	// 10739 shr     ax, 2 ;~ 01A2:4DD0
cs=0x1a2;eip=0x004dd3; 	T(DEC(ax));	// 10740 dec     ax ;~ 01A2:4DD3
cs=0x1a2;eip=0x004dd4; 	S(OUT(dx, al));	// 10741 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4DD4
loc_14dd5:
	// 5034 
cs=0x1a2;eip=0x004dd5; 	S(IN(al, dx));	// 10745 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4DD5
cs=0x1a2;eip=0x004dd6; 	T(OR(al, al));	// 10747 or      al, al ;~ 01A2:4DD6
cs=0x1a2;eip=0x004dd8; 	J(JS(loc_14dd5));	// 10748 js      short loc_14DD5 ;~ 01A2:4DD8
cs=0x1a2;eip=0x004dda; 	T(MOV(al, ah));	// 10749 mov     al, ah ;~ 01A2:4DDA
cs=0x1a2;eip=0x004ddc; 	S(OUT(dx, al));	// 10750 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4DDC
cs=0x1a2;eip=0x004ddd; 	X(MOV(byte_2466e, 1));	// 10752 mov     byte_2466E, 1 ;~ 01A2:4DDD
cs=0x1a2;eip=0x004de2; 	X(POPF);	// 10753 popf ;~ 01A2:4DE2
cs=0x1a2;eip=0x004de3; 	J(RETN(0));	// 10754 retn ;~ 01A2:4DE3
_sb_handler_int:
	// 10762 
cs=0x1a2;eip=0x004de4; 	X(PUSH(ax));	// 10763 push    ax ;~ 01A2:4DE4
cs=0x1a2;eip=0x004de5; 	X(PUSH(dx));	// 10764 push    dx ;~ 01A2:4DE5
cs=0x1a2;eip=0x004de6; 	X(PUSH(ds));	// 10765 push    ds ;~ 01A2:4DE6
cs=0x1a2;eip=0x004de7; 	T(MOV(ax, seg_offset(seg003)));	// 10766 mov     ax, seg seg003 ;~ 01A2:4DE7
cs=0x1a2;eip=0x004dea; 	T(MOV(ds, ax));	// 10767 mov     ds, ax ;~ 01A2:4DEA
cs=0x1a2;eip=0x004def; 	S(IN(al, dx));	// 10772 in      al, dx ;~ 01A2:4DEF
cs=0x1a2;eip=0x004df0; 	T(SUB(dl, 2));	// 10773 sub     dl, 2 ;~ 01A2:4DF0
loc_14df3:
	// 5035 
cs=0x1a2;eip=0x004df3; 	S(IN(al, dx));	// 10776 in      al, dx ;~ 01A2:4DF3
cs=0x1a2;eip=0x004df4; 	T(OR(al, al));	// 10777 or      al, al ;~ 01A2:4DF4
cs=0x1a2;eip=0x004df6; 	J(JS(loc_14df3));	// 10778 js      short loc_14DF3 ;~ 01A2:4DF6
cs=0x1a2;eip=0x004df8; 	T(MOV(al, 0x14));	// 10779 mov     al, 14h ;~ 01A2:4DF8
cs=0x1a2;eip=0x004dfa; 	S(OUT(dx, al));	// 10780 out     dx, al ;~ 01A2:4DFA
loc_14dfb:
	// 5036 
cs=0x1a2;eip=0x004dfb; 	S(IN(al, dx));	// 10783 in      al, dx ;~ 01A2:4DFB
cs=0x1a2;eip=0x004dfc; 	T(OR(al, al));	// 10784 or      al, al ;~ 01A2:4DFC
cs=0x1a2;eip=0x004dfe; 	J(JS(loc_14dfb));	// 10785 js      short loc_14DFB ;~ 01A2:4DFE
cs=0x1a2;eip=0x004e00; 	T(MOV(ax, word_2460e));	// 10786 mov     ax, word_2460E ;~ 01A2:4E00
cs=0x1a2;eip=0x004e03; 	T(SHR(ax, 2));	// 10787 shr     ax, 2 ;~ 01A2:4E03
cs=0x1a2;eip=0x004e06; 	T(DEC(ax));	// 10788 dec     ax ;~ 01A2:4E06
cs=0x1a2;eip=0x004e07; 	S(OUT(dx, al));	// 10789 out     dx, al ;~ 01A2:4E07
loc_14e08:
	// 5037 
cs=0x1a2;eip=0x004e08; 	S(IN(al, dx));	// 10792 in      al, dx ;~ 01A2:4E08
cs=0x1a2;eip=0x004e09; 	T(OR(al, al));	// 10793 or      al, al ;~ 01A2:4E09
cs=0x1a2;eip=0x004e0b; 	J(JS(loc_14e08));	// 10794 js      short loc_14E08 ;~ 01A2:4E0B
cs=0x1a2;eip=0x004e0d; 	T(MOV(al, ah));	// 10795 mov     al, ah ;~ 01A2:4E0D
cs=0x1a2;eip=0x004e0f; 	S(OUT(dx, al));	// 10796 out     dx, al ;~ 01A2:4E0F
	return _group16(m2c::kseg000_4e10_proc, _state);
    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_sb_handler_int: 	goto _sb_handler_int;
        case m2c::k_sb_set: 	goto _sb_set;
        case m2c::kloc_14c89: 	goto loc_14c89;
        case m2c::kloc_14c99: 	goto loc_14c99;
        case m2c::kloc_14ca1: 	goto loc_14ca1;
        case m2c::kloc_14caa: 	goto loc_14caa;
        case m2c::kloc_14cb2: 	goto loc_14cb2;
        case m2c::kloc_14cbf: 	goto loc_14cbf;
        case m2c::kloc_14cc7: 	goto loc_14cc7;
        case m2c::kloc_14dc0: 	goto loc_14dc0;
        case m2c::kloc_14dc8: 	goto loc_14dc8;
        case m2c::kloc_14dd5: 	goto loc_14dd5;
        case m2c::kloc_14df3: 	goto loc_14df3;
        case m2c::kloc_14dfb: 	goto loc_14dfb;
        case m2c::kloc_14e08: 	goto loc_14e08;
        case m2c::kmyfunc: 	goto myfunc;
        case m2c::kret_1a2_4ce6: 	goto ret_1a2_4ce6;
        case m2c::kseg000_4c5c_proc: 	goto seg000_4c5c_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group21(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group21:
    _begin:
_sbpro_sndoff:
	// 10628 
cs=0x1a2;eip=0x004cf7; 	X(PUSHF);	// 10630 pushf ;~ 01A2:4CF7
cs=0x1a2;eip=0x004cf8; 	T(CLI);	// 10631 cli ;~ 01A2:4CF8
cs=0x1a2;eip=0x004cf9; 	T(CMP(byte_2466e, 1));	// 10632 cmp     byte_2466E, 1 ;~ 01A2:4CF9
cs=0x1a2;eip=0x004cfe; 	J(JNZ(loc_14d1a));	// 10633 jnz     short loc_14D1A ;~ 01A2:4CFE
cs=0x1a2;eip=0x004d00; 	J(CALL(_checksb,0));	// 10634 call    _CheckSB ;~ 01A2:4D00
cs=0x1a2;eip=0x004d03; 	J(CALL(_restore_intvector,0));	// 10635 call    _restore_intvector ;~ 01A2:4D03
cs=0x1a2;eip=0x004d06; 	T(MOV(cl, _dma_chn_mask));	// 10636 mov     cl, _dma_chn_mask ;~ 01A2:4D06
cs=0x1a2;eip=0x004d0a; 	J(CALL(_set_dmachn_mask,0));	// 10637 call    _set_dmachn_mask ;~ 01A2:4D0A
cs=0x1a2;eip=0x004d0d; 	X(MOV(byte_2466e, 0));	// 10638 mov     byte_2466E, 0 ;~ 01A2:4D0D
cs=0x1a2;eip=0x004d12; 	T(MOV(ah, 0x0E));	// 10639 mov     ah, 0Eh ;~ 01A2:4D12
cs=0x1a2;eip=0x004d14; 	T(MOV(al, byte_24664));	// 10640 mov     al, byte_24664 ;~ 01A2:4D14
cs=0x1a2;eip=0x004d17; 	J(CALL(_writemixersb,0));	// 10641 call    _WriteMixerSB ;~ 01A2:4D17
loc_14d1a:
	// 5030 
cs=0x1a2;eip=0x004d1a; 	X(POPF);	// 10644 popf ;~ 01A2:4D1A
cs=0x1a2;eip=0x004d1b; 	J(RETN(0));	// 10645 retn ;~ 01A2:4D1B
_sb_sndoff:
	// 10911 
cs=0x1a2;eip=0x004ed2; 	T(CMP(_freq1, 23000));	// 10913 cmp     _freq1, 23000 ;~ 01A2:4ED2
cs=0x1a2;eip=0x004ed8; 	J(JNC(_sbpro_sndoff));	// 10914 jnb     _sbpro_sndoff ;~ 01A2:4ED8
cs=0x1a2;eip=0x004edc; 	X(PUSHF);	// 10915 pushf ;~ 01A2:4EDC
cs=0x1a2;eip=0x004edd; 	T(CLI);	// 10916 cli ;~ 01A2:4EDD
cs=0x1a2;eip=0x004ede; 	T(CMP(byte_2466e, 1));	// 10917 cmp     byte_2466E, 1 ;~ 01A2:4EDE
cs=0x1a2;eip=0x004ee3; 	J(JNZ(loc_14f09));	// 10918 jnz     short loc_14F09 ;~ 01A2:4EE3
cs=0x1a2;eip=0x004ee5; 	T(CLI);	// 10919 cli ;~ 01A2:4EE5
cs=0x1a2;eip=0x004ee6; 	T(MOV(dx, _sb_base_port));	// 10920 mov     dx, _sb_base_port ;~ 01A2:4EE6
cs=0x1a2;eip=0x004eea; 	T(ADD(dl, 0x0C));	// 10921 add     dl, 0Ch ;~ 01A2:4EEA
loc_14eed:
	// 5049 
cs=0x1a2;eip=0x004eed; 	S(IN(al, dx));	// 10924 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4EED
cs=0x1a2;eip=0x004eee; 	T(OR(al, al));	// 10926 or      al, al ;~ 01A2:4EEE
cs=0x1a2;eip=0x004ef0; 	J(JS(loc_14eed));	// 10927 js      short loc_14EED ;~ 01A2:4EF0
cs=0x1a2;eip=0x004ef2; 	T(MOV(al, 0x0D0));	// 10928 mov     al, 0D0h ; 'Ð' ;~ 01A2:4EF2
cs=0x1a2;eip=0x004ef4; 	S(OUT(dx, al));	// 10929 out     dx, al          ; DMA controller, 8237A-5. ;~ 01A2:4EF4
loc_14ef5:
	// 5050 
cs=0x1a2;eip=0x004ef5; 	S(IN(al, dx));	// 10933 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:4EF5
cs=0x1a2;eip=0x004ef6; 	T(OR(al, al));	// 10935 or      al, al ;~ 01A2:4EF6
cs=0x1a2;eip=0x004ef8; 	J(JS(loc_14ef5));	// 10936 js      short loc_14EF5 ;~ 01A2:4EF8
cs=0x1a2;eip=0x004efa; 	J(CALL(_restore_intvector,0));	// 10937 call    _restore_intvector ;~ 01A2:4EFA
cs=0x1a2;eip=0x004efd; 	T(MOV(cl, _dma_chn_mask));	// 10938 mov     cl, _dma_chn_mask ;~ 01A2:4EFD
cs=0x1a2;eip=0x004f01; 	J(CALL(_set_dmachn_mask,0));	// 10939 call    _set_dmachn_mask ;~ 01A2:4F01
cs=0x1a2;eip=0x004f04; 	X(MOV(byte_2466e, 0));	// 10940 mov     byte_2466E, 0 ;~ 01A2:4F04
loc_14f09:
	// 5051 
cs=0x1a2;eip=0x004f09; 	X(POPF);	// 10943 popf ;~ 01A2:4F09
cs=0x1a2;eip=0x004f0a; 	J(RETN(0));	// 10944 retn ;~ 01A2:4F0A

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_sb_sndoff: 	goto _sb_sndoff;
        case m2c::k_sbpro_sndoff: 	goto _sbpro_sndoff;
        case m2c::kloc_14d1a: 	goto loc_14d1a;
        case m2c::kloc_14eed: 	goto loc_14eed;
        case m2c::kloc_14ef5: 	goto loc_14ef5;
        case m2c::kloc_14f09: 	goto loc_14f09;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _sbpro_clean(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _sbpro_clean:
    _begin:
cs=0x1a2;eip=0x004d1c; 	J(CALL(_memfree_18a28,0));	// 10654 call    _memfree_18A28 ;~ 01A2:4D1C
cs=0x1a2;eip=0x004d1f; 	J(CALL(_sb16_sound_off,0));	// 10655 call    _sb16_sound_off ;~ 01A2:4D1F
cs=0x1a2;eip=0x004d22; 	J(RETN(0));	// 10656 retn ;~ 01A2:4D22

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_sbpro_clean: 	goto _sbpro_clean;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_4d63_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_4d63_proc:
    _begin:
_useless_sbcalctimcst:
	// 5031 
cs=0x1a2;eip=0x004d63; 	X(MOV(*(dw*)(((db*)&_audio_buf_pointer)+2), ax));	// 10686 mov     word ptr _audio_buf_pointer+2, ax ;~ 01A2:4D63
cs=0x1a2;eip=0x004d66; 	T(MOV(dx, 0x0F));	// 10687 mov     dx, 0Fh ;~ 01A2:4D66
cs=0x1a2;eip=0x004d69; 	T(MOV(ax, 0x4240));	// 10688 mov     ax, 4240h ;~ 01A2:4D69
cs=0x1a2;eip=0x004d6c; 	X(DIV2(_freq1));	// 10689 div     _freq1 ;~ 01A2:4D6C
cs=0x1a2;eip=0x004d70; 	T(NEG(al));	// 10690 neg     al ;~ 01A2:4D70
cs=0x1a2;eip=0x004d72; 	X(MOV(_sb_timeconst, al));	// 10691 mov     _sb_timeconst, al ;~ 01A2:4D72
cs=0x1a2;eip=0x004d75; 	T(CLC);	// 10692 clc ;~ 01A2:4D75
cs=0x1a2;eip=0x004d76; 	J(RETN(0));	// 10693 retn ;~ 01A2:4D76

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_useless_sbcalctimcst: 	goto _useless_sbcalctimcst;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _sb_clean(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _sb_clean:
    _begin:
cs=0x1a2;eip=0x004f0b; 	J(CALL(_memfree_18a28,0));	// 10953 call    _memfree_18A28 ;~ 01A2:4F0B
cs=0x1a2;eip=0x004f0e; 	J(CALL(_sb16_sound_off,0));	// 10954 call    _sb16_sound_off ;~ 01A2:4F0E
cs=0x1a2;eip=0x004f11; 	J(RETN(0));	// 10955 retn ;~ 01A2:4F11

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_sb_clean: 	goto _sb_clean;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group22(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group22:
    _begin:
_timer_int_end:
	// 10962 
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x004f12; 	T(CMP(*(&byte_14f70), 0));	// 10964 cmp     cs:byte_14F70, 0 ;~ 01A2:4F12
cs=0x1a2;eip=0x004f18; 	J(JZ(loc_14f3c));	// 10965 jz      short loc_14F3C ;~ 01A2:4F18
cs=0x1a2;eip=0x004f1a; 	X(PUSHAD);	// 10966 pushad ;~ 01A2:4F1A
cs=0x1a2;eip=0x004f1c; 	X(PUSH(ds));	// 10967 push    ds ;~ 01A2:4F1C
cs=0x1a2;eip=0x004f1d; 	X(PUSH(es));	// 10968 push    es ;~ 01A2:4F1D
cs=0x1a2;eip=0x004f1e; 	X(PUSH(fs));	// 10969 push    fs ;~ 01A2:4F1E
cs=0x1a2;eip=0x004f20; 	X(PUSH(gs));	// 10970 push    gs ;~ 01A2:4F20
cs=0x1a2;eip=0x004f22; 	T(MOV(ax, seg_offset(seg003)));	// 10971 mov     ax, seg seg003 ;~ 01A2:4F22
cs=0x1a2;eip=0x004f25; 	T(MOV(ds, ax));	// 10972 mov     ds, ax ;~ 01A2:4F25
cs=0x1a2;eip=0x004f27; 	T(MOV(ax, word_245e4));	// 10973 mov     ax, word_245E4 ;~ 01A2:4F27
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x004f2a; 	X(MOV(*(dw*)(((db*)&word_14f6c)), ax));	// 10974 mov     cs:word_14F6C, ax ;~ 01A2:4F2A
cs=0x1a2;eip=0x004f2e; 	T(STI);	// 10975 sti ;~ 01A2:4F2E
cs=0x1a2;eip=0x004f2f; 	J(CALL(sub_16c69,0));	// 10976 call    sub_16C69 ;~ 01A2:4F2F
cs=0x1a2;eip=0x004f32; 	X(POP(gs));	// 10977 pop     gs ;~ 01A2:4F32
cs=0x1a2;eip=0x004f34; 	X(POP(fs));	// 10978 pop     fs ;~ 01A2:4F34
cs=0x1a2;eip=0x004f36; 	X(POP(es));	// 10979 pop     es ;~ 01A2:4F36
cs=0x1a2;eip=0x004f37; 	X(POP(ds));	// 10980 pop     ds ;~ 01A2:4F37
cs=0x1a2;eip=0x004f38; 	X(POPAD);	// 10981 popad ;~ 01A2:4F38
cs=0x1a2;eip=0x004f3a; 	T(NOP);	// 10982 nop ;~ 01A2:4F3A
cs=0x1a2;eip=0x004f3b; 	J(IRET);	// 10983 iret ;~ 01A2:4F3B
loc_14f3c:
	// 5052 
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x004f3c; 	X(MOV(*(dw*)(((db*)&word_14f6c)), 1));	// 10987 mov     cs:word_14F6C, 1 ;~ 01A2:4F3C
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x004f43; __disp=*(dd*)(((db*)&_int8addr));
//        from_callf = true;
printf("int8\n");
	J(return __dispatch_call(__disp, _state););	// 10988 jmp     cs:_int8addr ;~ 01A2:4F43
_covox_init:
	// 11026 
cs=0x1a2;eip=0x004f74; 	X(MOV(_sndflags_24622, 3));	// 11028 mov     _sndflags_24622, 3 ;~ 01A2:4F74
cs=0x1a2;eip=0x004f79; 	X(MOV(byte_24623, 0));	// 11029 mov     byte_24623, 0 ;~ 01A2:4F79
cs=0x1a2;eip=0x004f7e; 	X(MOV(_bit_mode, 8));	// 11030 mov     _bit_mode, 8 ;~ 01A2:4F7E
cs=0x1a2;eip=0x004f83; 	T(CMP(_snd_base_port, 0x0FFFF));	// 11031 cmp     _snd_base_port, 0FFFFh ;~ 01A2:4F83
cs=0x1a2;eip=0x004f88; 	J(JNZ(loc_14f95));	// 11032 jnz     short loc_14F95 ;~ 01A2:4F88
cs=0x1a2;eip=0x004f8a; 	T(XOR(ax, ax));	// 11033 xor     ax, ax ;~ 01A2:4F8A
cs=0x1a2;eip=0x004f8c; 	T(MOV(es, ax));	// 11034 mov     es, ax ;~ 01A2:4F8C
cs=0x1a2;eip=0x004f8e; 	T(MOV(ax, *(dw*)(raddr(es,0x408))));	// 11036 mov     ax, es:408h ;~ 01A2:4F8E
cs=0x1a2;eip=0x004f92; 	X(MOV(_snd_base_port, ax));	// 11037 mov     _snd_base_port, ax ;~ 01A2:4F92
loc_14f95:
	// 5055 
cs=0x1a2;eip=0x004f95; 	T(MOV(ax, _snd_base_port));	// 11040 mov     ax, _snd_base_port ;~ 01A2:4F95
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x004f98; 	X(MOV(*(dw*)(((db*)&covox_port)), ax));	// 11041 mov     cs:covox_port, ax ;~ 01A2:4F98
cs=0x1a2;eip=0x004f9c; 	X(PUSHF);	// 11042 pushf ;~ 01A2:4F9C
cs=0x1a2;eip=0x004f9d; 	T(CLI);	// 11043 cli ;~ 01A2:4F9D
cs=0x1a2;eip=0x004f9e; 	T(MOV(dx, m2c::k_covox_timer_int));	// 11044 mov     dx, offset _covox_timer_int ;~ 01A2:4F9E
cs=0x1a2;eip=0x004fa1; 	J(CALL(_set_timer_int,0));	// 11045 call    _set_timer_int ;~ 01A2:4FA1
cs=0x1a2;eip=0x004fa4; 	T(SUB(ax, 0x0F00));	// 11046 sub     ax, 0F00h ;~ 01A2:4FA4
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x004fa7; 	X(MOV(*(dw*)(((db*)&covox_au_buf_seg)), ax));	// 11047 mov     cs:covox_au_buf_seg, ax ;~ 01A2:4FA7
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x004fab; 	X(MOV(*(dw*)((&covox_au_buf_off)), 0x0F000));	// 11048 mov     word ptr cs:covox_au_buf_off, 0F000h ;~ 01A2:4FAB
cs=0x1a2;eip=0x004fb2; 	X(POPF);	// 11049 popf ;~ 01A2:4FB2
cs=0x1a2;eip=0x004fb3; 	T(CLC);	// 11050 clc ;~ 01A2:4FB3
cs=0x1a2;eip=0x004fb4; 	J(RETN(0));	// 11051 retn ;~ 01A2:4FB4
seg000_4fb9_proc:
	// 11066 
cs=0x1a2;eip=0x004fb9; 	T(XCHG(bx, bx));	// 11066 xchg    bx, bx ;~ 01A2:4FB9
cs=0x1a2;eip=0x004fbb; 	T(NOP);	// 11067 nop ;~ 01A2:4FBB
_covox_timer_int:
	// 5056 
cs=0x1a2;eip=0x004fbc; 	X(PUSH(ax));	// 11070 push    ax ;~ 01A2:4FBC
cs=0x1a2;eip=0x004fbd; 	X(PUSH(dx));	// 11071 push    dx ;~ 01A2:4FBD
cs=0x1a2;eip=0x004fbe; 	X(PUSH(ds));	// 11072 push    ds ;~ 01A2:4FBE
cs=0x1a2;eip=0x004fc2; 	T(MOV(ds, dx));	// 11077 mov     ds, dx ;~ 01A2:4FC2
cs=0x1a2;eip=0x004fca; 	S(OUT(dx, al));	// 11086 out     dx, al          ; Printer Data Latch: ;~ 01A2:4FCA
cs=0x1a2;eip=0x004fcb; 	T(MOV(al, 0x20));	// 11088 mov     al, 20h ; ' ' ;~ 01A2:4FCB
cs=0x1a2;eip=0x004fcd; 	S(OUT(0x20, al));	// 11089 out     20h, al         ; Interrupt controller, 8259A. ;~ 01A2:4FCD
cs=0x1a2;eip=0x004fcf; 	X(POP(ds));	// 11090 pop     ds ;~ 01A2:4FCF
cs=0x1a2;eip=0x004fd0; 	X(POP(dx));	// 11091 pop     dx ;~ 01A2:4FD0
cs=0x1a2;eip=0x004fd1; 	X(POP(ax));	// 11092 pop     ax ;~ 01A2:4FD1
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x004fd2; 	X(INC(*(dw*)((&covox_au_buf_off))));	// 11093 inc     word ptr cs:covox_au_buf_off ;~ 01A2:4FD2
cs=0x1a2;eip=0x004fd7; 	J(JZ(loc_14fe3));	// 11094 jz      short loc_14FE3 ;~ 01A2:4FD7
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x004fd9; 	X(DEC(*(dw*)(((db*)&word_14f6c))));	// 11095 dec     cs:word_14F6C ;~ 01A2:4FD9
cs=0x1a2;eip=0x004fde; 	J(JZ(_timer_int_end));	// 11096 jz      near ptr _timer_int_end ;~ 01A2:4FDE
cs=0x1a2;eip=0x004fe2; 	J(IRET);	// 11097 iret ;~ 01A2:4FE2
loc_14fe3:
	// 5057 
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x004fe3; 	X(MOV(*(dw*)((&covox_au_buf_off)), 0x0F000));	// 11101 mov     word ptr cs:covox_au_buf_off, 0F000h ;~ 01A2:4FE3
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x004fea; 	X(DEC(*(dw*)(((db*)&word_14f6c))));	// 11102 dec     cs:word_14F6C ;~ 01A2:4FEA
cs=0x1a2;eip=0x004fef; 	J(JZ(_timer_int_end));	// 11103 jz      near ptr _timer_int_end ;~ 01A2:4FEF
cs=0x1a2;eip=0x004ff3; 	J(IRET);	// 11104 iret ;~ 01A2:4FF3
_stereo_init:
	// 11129 
cs=0x1a2;eip=0x004ffc; 	X(MOV(_sndflags_24622, 3));	// 11131 mov     _sndflags_24622, 3 ;~ 01A2:4FFC
cs=0x1a2;eip=0x005001; 	X(MOV(byte_24623, 1));	// 11132 mov     byte_24623, 1 ;~ 01A2:5001
cs=0x1a2;eip=0x005006; 	X(MOV(_bit_mode, 8));	// 11133 mov     _bit_mode, 8 ;~ 01A2:5006
cs=0x1a2;eip=0x00500b; 	T(CMP(_snd_base_port, -1));	// 11134 cmp     _snd_base_port, -1 ;~ 01A2:500B
cs=0x1a2;eip=0x005010; 	J(JNZ(loc_1501d));	// 11135 jnz     short loc_1501D ;~ 01A2:5010
cs=0x1a2;eip=0x005012; 	T(XOR(ax, ax));	// 11136 xor     ax, ax ;~ 01A2:5012
cs=0x1a2;eip=0x005014; 	T(MOV(es, ax));	// 11137 mov     es, ax ;~ 01A2:5014
cs=0x1a2;eip=0x005016; 	T(MOV(ax, *(dw*)(raddr(es,0x408))));	// 11138 mov     ax, es:408h ;~ 01A2:5016
cs=0x1a2;eip=0x00501a; 	X(MOV(_snd_base_port, ax));	// 11139 mov     _snd_base_port, ax ;~ 01A2:501A
loc_1501d:
	// 5058 
cs=0x1a2;eip=0x00501d; 	T(MOV(ax, _snd_base_port));	// 11142 mov     ax, _snd_base_port ;~ 01A2:501D
cs=0x1a2;eip=0x005020; 	T(ADD(ax, 2));	// 11143 add     ax, 2 ;~ 01A2:5020
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005023; 	X(MOV(*(dw*)(((db*)&word_1504d)), ax));	// 11144 mov     cs:word_1504D, ax ;~ 01A2:5023
cs=0x1a2;eip=0x005027; 	X(PUSHF);	// 11145 pushf ;~ 01A2:5027
cs=0x1a2;eip=0x005028; 	T(CLI);	// 11146 cli ;~ 01A2:5028
cs=0x1a2;eip=0x005029; 	T(MOV(dx, m2c::k_stereo_timer_int));	// 11147 mov     dx, offset _stereo_timer_int ;~ 01A2:5029
cs=0x1a2;eip=0x00502c; 	J(CALL(_set_timer_int,0));	// 11148 call    _set_timer_int ;~ 01A2:502C
cs=0x1a2;eip=0x00502f; 	T(SUB(ax, 0x0F00));	// 11149 sub     ax, 0F00h ;~ 01A2:502F
cs=0x1a2;eip=0x005032; 	X(MOV(*(dw*)(raddr(cs,m2c::kloc_15047+1)), ax));	// 11150 mov     word ptr cs:loc_15047+1, ax ;~ 01A2:5032
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005036; 	X(MOV(*(dw*)(((db*)&word_15056)), 0x0F000));	// 11151 mov     cs:word_15056, 0F000h ;~ 01A2:5036
cs=0x1a2;eip=0x00503d; 	X(POPF);	// 11152 popf ;~ 01A2:503D
cs=0x1a2;eip=0x00503e; 	T(CLC);	// 11153 clc ;~ 01A2:503E
cs=0x1a2;eip=0x00503f; 	J(RETN(0));	// 11154 retn ;~ 01A2:503F
_stereo_timer_int:
	// 11172 
cs=0x1a2;eip=0x005044; 	X(PUSH(ax));	// 11173 push    ax ;~ 01A2:5044
cs=0x1a2;eip=0x005045; 	X(PUSH(dx));	// 11174 push    dx ;~ 01A2:5045
cs=0x1a2;eip=0x005046; 	X(PUSH(ds));	// 11175 push    ds ;~ 01A2:5046
loc_15047:
	// 5059 
cs=0x1a2;eip=0x005047; 	T(MOV(dx, seg_offset(seg000)));	// 11178 mov     dx, seg seg000 ;~ 01A2:5047
cs=0x1a2;eip=0x00504a; 	T(MOV(ds, dx));	// 11179 mov     ds, dx ;~ 01A2:504A
cs=0x1a2;eip=0x00504f; 	T(MOV(al, 2));	// 11185 mov     al, 2 ;~ 01A2:504F
cs=0x1a2;eip=0x005051; 	S(OUT(dx, al));	// 11186 out     dx, al ;~ 01A2:5051
cs=0x1a2;eip=0x005052; 	T(SUB(dl, 2));	// 11187 sub     dl, 2 ;~ 01A2:5052
cs=0x1a2;eip=0x005058; 	S(OUT(dx, al));	// 11193 out     dx, al          ; Printer Data Latch: ;~ 01A2:5058
cs=0x1a2;eip=0x005059; 	T(ADD(dl, 2));	// 11195 add     dl, 2 ;~ 01A2:5059
cs=0x1a2;eip=0x00505c; 	T(MOV(al, 1));	// 11196 mov     al, 1 ;~ 01A2:505C
cs=0x1a2;eip=0x00505e; 	S(OUT(dx, al));	// 11197 out     dx, al          ; Printer Control Bits: ;~ 01A2:505E
cs=0x1a2;eip=0x00505f; 	T(SUB(dl, 2));	// 11203 sub     dl, 2 ;~ 01A2:505F
cs=0x1a2;eip=0x005062; 	T(MOV(al, ah));	// 11204 mov     al, ah ;~ 01A2:5062
cs=0x1a2;eip=0x005064; 	S(OUT(dx, al));	// 11205 out     dx, al          ; Printer Data Latch: ;~ 01A2:5064
cs=0x1a2;eip=0x005065; 	T(MOV(al, 0x20));	// 11207 mov     al, 20h ; ' ' ;~ 01A2:5065
cs=0x1a2;eip=0x005067; 	S(OUT(0x20, al));	// 11208 out     20h, al         ; Interrupt controller, 8259A. ;~ 01A2:5067
cs=0x1a2;eip=0x005069; 	X(POP(ds));	// 11209 pop     ds ;~ 01A2:5069
cs=0x1a2;eip=0x00506a; 	X(POP(dx));	// 11211 pop     dx ;~ 01A2:506A
cs=0x1a2;eip=0x00506b; 	X(POP(ax));	// 11212 pop     ax ;~ 01A2:506B
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00506c; 	X(ADD(*(dw*)(((db*)&word_15056)), 2));	// 11213 add     cs:word_15056, 2 ;~ 01A2:506C
cs=0x1a2;eip=0x005072; 	J(JC(loc_1507e));	// 11214 jb      short loc_1507E ;~ 01A2:5072
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005074; 	X(DEC(*(dw*)(((db*)&word_14f6c))));	// 11215 dec     cs:word_14F6C ;~ 01A2:5074
cs=0x1a2;eip=0x005079; 	J(JZ(_timer_int_end));	// 11216 jz      near ptr _timer_int_end ;~ 01A2:5079
cs=0x1a2;eip=0x00507d; 	J(IRET);	// 11217 iret ;~ 01A2:507D
loc_1507e:
	// 5060 
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00507e; 	X(MOV(*(dw*)(((db*)&word_15056)), 0x0F000));	// 11221 mov     cs:word_15056, 0F000h ;~ 01A2:507E
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005085; 	X(DEC(*(dw*)(((db*)&word_14f6c))));	// 11222 dec     cs:word_14F6C ;~ 01A2:5085
cs=0x1a2;eip=0x00508a; 	J(JZ(_timer_int_end));	// 11223 jz      near ptr _timer_int_end ;~ 01A2:508A
cs=0x1a2;eip=0x00508e; 	J(IRET);	// 11224 iret ;~ 01A2:508E
_adlib_init:
	// 11251 
cs=0x1a2;eip=0x005097; 	X(MOV(_sndflags_24622, 0x0B));	// 11253 mov     _sndflags_24622, 0Bh ;~ 01A2:5097
cs=0x1a2;eip=0x00509c; 	X(MOV(byte_24623, 0));	// 11254 mov     byte_24623, 0 ;~ 01A2:509C
cs=0x1a2;eip=0x0050a1; 	X(MOV(_bit_mode, 8));	// 11255 mov     _bit_mode, 8 ;~ 01A2:50A1
cs=0x1a2;eip=0x0050a6; 	J(CALL(_adlib_18389,0));	// 11256 call    _adlib_18389 ;~ 01A2:50A6
cs=0x1a2;eip=0x0050a9; 	T(MOV(ax, 0x2120));	// 11257 mov     ax, 2120h ;~ 01A2:50A9
cs=0x1a2;eip=0x0050ac; 	J(CALL(_adlib_18395,0));	// 11258 call    _adlib_18395 ;~ 01A2:50AC
cs=0x1a2;eip=0x0050af; 	T(MOV(ax, 0x0F060));	// 11259 mov     ax, 0F060h ;~ 01A2:50AF
cs=0x1a2;eip=0x0050b2; 	J(CALL(_adlib_18395,0));	// 11260 call    _adlib_18395 ;~ 01A2:50B2
cs=0x1a2;eip=0x0050b5; 	T(MOV(ax, 0x0F080));	// 11261 mov     ax, 0F080h ;~ 01A2:50B5
cs=0x1a2;eip=0x0050b8; 	J(CALL(_adlib_18395,0));	// 11262 call    _adlib_18395 ;~ 01A2:50B8
cs=0x1a2;eip=0x0050bb; 	T(MOV(ax, 0x1C0));	// 11263 mov     ax, 1C0h ;~ 01A2:50BB
cs=0x1a2;eip=0x0050be; 	J(CALL(_adlib_18395,0));	// 11264 call    _adlib_18395 ;~ 01A2:50BE
cs=0x1a2;eip=0x0050c1; 	T(MOV(ax, 0x0E0));	// 11265 mov     ax, 0E0h ; 'à' ;~ 01A2:50C1
cs=0x1a2;eip=0x0050c4; 	J(CALL(_adlib_18395,0));	// 11266 call    _adlib_18395 ;~ 01A2:50C4
cs=0x1a2;eip=0x0050c7; 	T(MOV(ax, 0x3F43));	// 11267 mov     ax, 3F43h ;~ 01A2:50C7
cs=0x1a2;eip=0x0050ca; 	J(CALL(_adlib_18395,0));	// 11268 call    _adlib_18395 ;~ 01A2:50CA
cs=0x1a2;eip=0x0050cd; 	T(MOV(ax, 0x0B0));	// 11269 mov     ax, 0B0h ; '°' ;~ 01A2:50CD
cs=0x1a2;eip=0x0050d0; 	J(CALL(_adlib_18395,0));	// 11270 call    _adlib_18395 ;~ 01A2:50D0
cs=0x1a2;eip=0x0050d3; 	T(MOV(ax, 0x0A0));	// 11271 mov     ax, 0A0h ; ' ' ;~ 01A2:50D3
cs=0x1a2;eip=0x0050d6; 	J(CALL(_adlib_18395,0));	// 11272 call    _adlib_18395 ;~ 01A2:50D6
cs=0x1a2;eip=0x0050d9; 	T(MOV(ax, 0x8FA0));	// 11273 mov     ax, 8FA0h ;~ 01A2:50D9
cs=0x1a2;eip=0x0050dc; 	J(CALL(_adlib_18395,0));	// 11274 call    _adlib_18395 ;~ 01A2:50DC
cs=0x1a2;eip=0x0050df; 	T(MOV(ax, 0x2EB0));	// 11275 mov     ax, 2EB0h ;~ 01A2:50DF
cs=0x1a2;eip=0x0050e2; 	J(CALL(_adlib_18395,0));	// 11276 call    _adlib_18395 ;~ 01A2:50E2
cs=0x1a2;eip=0x0050e5; 	T(MOV(cx, 0x4000));	// 11277 mov     cx, 4000h ;~ 01A2:50E5
loc_150e8:
	// 5061 
cs=0x1a2;eip=0x0050e8; 	T(DEC(cx));	// 11280 dec     cx ;~ 01A2:50E8
cs=0x1a2;eip=0x0050e9; 	J(JNZ(loc_150e8));	// 11281 jnz     short loc_150E8 ;~ 01A2:50E9
cs=0x1a2;eip=0x0050eb; 	T(MOV(ax, 0x20B0));	// 11282 mov     ax, 20B0h ;~ 01A2:50EB
cs=0x1a2;eip=0x0050ee; 	J(CALL(_adlib_18395,0));	// 11283 call    _adlib_18395 ;~ 01A2:50EE
cs=0x1a2;eip=0x0050f1; 	T(MOV(ax, 0x0A0));	// 11284 mov     ax, 0A0h ; ' ' ;~ 01A2:50F1
cs=0x1a2;eip=0x0050f4; 	J(CALL(_adlib_18395,0));	// 11285 call    _adlib_18395 ;~ 01A2:50F4
cs=0x1a2;eip=0x0050f7; 	T(MOV(ax, 0x40));	// 11286 mov     ax, 40h ; '@' ;~ 01A2:50F7
cs=0x1a2;eip=0x0050fa; 	J(CALL(_adlib_18395,0));	// 11287 call    _adlib_18395 ;~ 01A2:50FA
cs=0x1a2;eip=0x0050fd; 	X(PUSHF);	// 11288 pushf ;~ 01A2:50FD
cs=0x1a2;eip=0x0050fe; 	T(CLI);	// 11289 cli ;~ 01A2:50FE
cs=0x1a2;eip=0x0050ff; 	T(MOV(dx, m2c::k_adlib_timer_int));	// 11290 mov     dx, offset _adlib_timer_int ;~ 01A2:50FF
cs=0x1a2;eip=0x005102; 	J(CALL(_set_timer_int,0));	// 11291 call    _set_timer_int ;~ 01A2:5102
cs=0x1a2;eip=0x005105; 	T(SUB(ax, 0x0F00));	// 11292 sub     ax, 0F00h ;~ 01A2:5105
cs=0x1a2;eip=0x005108; 	X(MOV(*(dw*)(raddr(cs,m2c::kloc_15120+1)), ax));	// 11293 mov     word ptr cs:loc_15120+1, ax ;~ 01A2:5108
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00510c; 	X(MOV(*(dw*)(((db*)&word_15126)), 0x0F000));	// 11294 mov     cs:word_15126, 0F000h ;~ 01A2:510C
cs=0x1a2;eip=0x005113; 	X(POPF);	// 11295 popf ;~ 01A2:5113
cs=0x1a2;eip=0x005114; 	T(CLC);	// 11296 clc ;~ 01A2:5114
cs=0x1a2;eip=0x005115; 	J(RETN(0));	// 11297 retn ;~ 01A2:5115
seg000_511a_proc:
	// 11312 
cs=0x1a2;eip=0x00511a; 	T(XCHG(bx, bx));	// 11312 xchg    bx, bx ;~ 01A2:511A
_adlib_timer_int:
	// 5062 
cs=0x1a2;eip=0x00511c; 	X(PUSH(ax));	// 11315 push    ax ;~ 01A2:511C
cs=0x1a2;eip=0x00511d; 	X(PUSH(bx));	// 11316 push    bx ;~ 01A2:511D
cs=0x1a2;eip=0x00511e; 	X(PUSH(dx));	// 11317 push    dx ;~ 01A2:511E
cs=0x1a2;eip=0x00511f; 	X(PUSH(ds));	// 11318 push    ds ;~ 01A2:511F
loc_15120:
	// 5063 
cs=0x1a2;eip=0x005120; 	T(MOV(ax, 0x1234));	// 11321 mov     ax, 1234h       ; self modifying ;~ 01A2:5120
cs=0x1a2;eip=0x005123; 	T(MOV(ds, ax));	// 11322 mov     ds, ax ;~ 01A2:5123
cs=0x1a2;eip=0x005128; 	T(MOV(bx, seg_offset(seg003)));	// 11329 mov     bx, seg seg003 ;~ 01A2:5128
cs=0x1a2;eip=0x00512b; 	T(MOV(ds, bx));	// 11330 mov     ds, bx ;~ 01A2:512B
cs=0x1a2;eip=0x00512d; 	T(MOV(bx, offset(seg003,_table_24898)));	// 11332 mov     bx, offset _table_24898 ;~ 01A2:512D
cs=0x1a2;eip=0x005130; 	T(XLAT);	// 11333 xlat ;~ 01A2:5130
cs=0x1a2;eip=0x005131; 	T(MOV(dx, 0x389));	// 11334 mov     dx, 389h ;~ 01A2:5131
cs=0x1a2;eip=0x005134; 	S(OUT(dx, al));	// 11335 out     dx, al ;~ 01A2:5134
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005135; 	X(INC(*(dw*)(((db*)&word_15126))));	// 11336 inc     cs:word_15126 ;~ 01A2:5135
cs=0x1a2;eip=0x00513a; 	J(JZ(loc_1514e));	// 11337 jz      short loc_1514E ;~ 01A2:513A
loc_1513c:
	// 5064 
cs=0x1a2;eip=0x00513c; 	X(POP(ds));	// 11340 pop     ds ;~ 01A2:513C
cs=0x1a2;eip=0x00513d; 	X(POP(dx));	// 11341 pop     dx ;~ 01A2:513D
cs=0x1a2;eip=0x00513e; 	X(POP(bx));	// 11342 pop     bx ;~ 01A2:513E
cs=0x1a2;eip=0x00513f; 	T(MOV(al, 0x20));	// 11343 mov     al, 20h ; ' ' ;~ 01A2:513F
cs=0x1a2;eip=0x005141; 	S(OUT(0x20, al));	// 11344 out     20h, al         ; Interrupt controller, 8259A. ;~ 01A2:5141
cs=0x1a2;eip=0x005143; 	X(POP(ax));	// 11345 pop     ax ;~ 01A2:5143
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005144; 	X(DEC(*(dw*)(((db*)&word_14f6c))));	// 11346 dec     cs:word_14F6C ;~ 01A2:5144
cs=0x1a2;eip=0x005149; 	J(JZ(_timer_int_end));	// 11347 jz      near ptr _timer_int_end ;~ 01A2:5149
cs=0x1a2;eip=0x00514d; 	J(IRET);	// 11348 iret ;~ 01A2:514D
loc_1514e:
	// 5065 
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00514e; 	X(MOV(*(dw*)(((db*)&word_15126)), 0x0F000));	// 11352 mov     cs:word_15126, 0F000h ;~ 01A2:514E
cs=0x1a2;eip=0x005155; 	J(JMP(loc_1513c));	// 11353 jmp     short loc_1513C ;~ 01A2:5155
_pcspeaker_init:
	// 11379 
cs=0x1a2;eip=0x005162; 	X(MOV(_sndflags_24622, 3));	// 11381 mov     _sndflags_24622, 3 ;~ 01A2:5162
cs=0x1a2;eip=0x005167; 	X(MOV(byte_24623, 0));	// 11382 mov     byte_24623, 0 ;~ 01A2:5167
cs=0x1a2;eip=0x00516c; 	X(MOV(_bit_mode, 8));	// 11383 mov     _bit_mode, 8 ;~ 01A2:516C
cs=0x1a2;eip=0x005171; 	X(PUSHF);	// 11384 pushf ;~ 01A2:5171
cs=0x1a2;eip=0x005172; 	T(CLI);	// 11385 cli ;~ 01A2:5172
cs=0x1a2;eip=0x005173; 	T(MOV(al, 0x90));	// 11386 mov     al, 90h ;~ 01A2:5173
cs=0x1a2;eip=0x005175; 	S(OUT(0x43, al));	// 11387 out     43h, al         ; Timer 8253-5 (AT: 8254.2). ;~ 01A2:5175
cs=0x1a2;eip=0x005177; 	T(MOV(dx, m2c::k_pcspeaker_interrupt));	// 11388 mov     dx, offset _pcspeaker_interrupt ;~ 01A2:5177
cs=0x1a2;eip=0x00517a; 	J(CALL(_set_timer_int,0));	// 11389 call    _set_timer_int ;~ 01A2:517A
cs=0x1a2;eip=0x00517d; 	T(SUB(ax, 0x0F00));	// 11390 sub     ax, 0F00h ;~ 01A2:517D
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005180; 	X(MOV(*(dw*)(((db*)&word_1519b)), ax));	// 11391 mov     cs:word_1519B, ax ;~ 01A2:5180
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005184; 	X(MOV(*(dw*)(((db*)&word_151a3)), 0x0F000));	// 11392 mov     cs:word_151A3, 0F000h ;~ 01A2:5184
cs=0x1a2;eip=0x00518b; 	X(POPF);	// 11393 popf ;~ 01A2:518B
cs=0x1a2;eip=0x00518c; 	T(CLC);	// 11394 clc ;~ 01A2:518C
cs=0x1a2;eip=0x00518d; 	J(RETN(0));	// 11395 retn ;~ 01A2:518D
seg000_5198_proc:
	// 11428 
_pcspeaker_interrupt:
	// 5066 
cs=0x1a2;eip=0x005198; 	X(PUSH(bx));	// 11429 push    bx ;~ 01A2:5198
cs=0x1a2;eip=0x005199; 	X(PUSH(ds));	// 11430 push    ds ;~ 01A2:5199
cs=0x1a2;eip=0x00519d; 	T(MOV(ds, bx));	// 11435 mov     ds, bx ;~ 01A2:519D
cs=0x1a2;eip=0x00519f; 	T(XOR(bh, bh));	// 11436 xor     bh, bh ;~ 01A2:519F
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0051a5; 	T(MOV(bl, *((_pc_timer_tbl)+bx)));	// 11442 mov     bl, cs:_pc_timer_tbl[bx] ;~ 01A2:51A5
cs=0x1a2;eip=0x0051aa; 	T(MOV(bh, al));	// 11443 mov     bh, al ;~ 01A2:51AA
cs=0x1a2;eip=0x0051ac; 	T(MOV(al, bl));	// 11444 mov     al, bl ;~ 01A2:51AC
cs=0x1a2;eip=0x0051ae; 	S(OUT(0x42, al));	// 11445 out     42h, al         ; Timer 8253-5 (AT: 8254.2). ;~ 01A2:51AE
cs=0x1a2;eip=0x0051b0; 	T(MOV(al, 0x20));	// 11446 mov     al, 20h ; ' ' ;~ 01A2:51B0
cs=0x1a2;eip=0x0051b2; 	S(OUT(0x20, al));	// 11447 out     20h, al         ; Interrupt controller, 8259A. ;~ 01A2:51B2
cs=0x1a2;eip=0x0051b4; 	T(MOV(al, bh));	// 11448 mov     al, bh ;~ 01A2:51B4
cs=0x1a2;eip=0x0051b6; 	X(POP(ds));	// 11449 pop     ds ;~ 01A2:51B6
cs=0x1a2;eip=0x0051b7; 	X(POP(bx));	// 11450 pop     bx ;~ 01A2:51B7
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0051b8; 	X(INC(*(dw*)(((db*)&word_151a3))));	// 11451 inc     cs:word_151A3 ;~ 01A2:51B8
cs=0x1a2;eip=0x0051bd; 	J(JZ(loc_151c9));	// 11452 jz      short loc_151C9 ;~ 01A2:51BD
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0051bf; 	X(DEC(*(dw*)(((db*)&word_14f6c))));	// 11453 dec     cs:word_14F6C ;~ 01A2:51BF
cs=0x1a2;eip=0x0051c4; 	J(JZ(_timer_int_end));	// 11454 jz      near ptr _timer_int_end ;~ 01A2:51C4
cs=0x1a2;eip=0x0051c8; 	J(IRET);	// 11455 iret ;~ 01A2:51C8
loc_151c9:
	// 5067 
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0051c9; 	X(MOV(*(dw*)(((db*)&word_151a3)), 0x0F000));	// 11459 mov     cs:word_151A3, 0F000h ;~ 01A2:51C9
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0051d0; 	X(DEC(*(dw*)(((db*)&word_14f6c))));	// 11460 dec     cs:word_14F6C ;~ 01A2:51D0
cs=0x1a2;eip=0x0051d5; 	J(JZ(_timer_int_end));	// 11461 jz      near ptr _timer_int_end ;~ 01A2:51D5
cs=0x1a2;eip=0x0051d9; 	J(IRET);	// 11462 iret ;~ 01A2:51D9

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_adlib_init: 	goto _adlib_init;
        case m2c::k_adlib_timer_int: 	goto _adlib_timer_int;
        case m2c::k_covox_init: 	goto _covox_init;
        case m2c::k_covox_timer_int: 	goto _covox_timer_int;
        case m2c::k_pcspeaker_init: 	goto _pcspeaker_init;
        case m2c::k_pcspeaker_interrupt: 	goto _pcspeaker_interrupt;
        case m2c::k_stereo_init: 	goto _stereo_init;
        case m2c::k_stereo_timer_int: 	goto _stereo_timer_int;
        case m2c::k_timer_int_end: 	goto _timer_int_end;
        case m2c::kloc_14f3c: 	goto loc_14f3c;
        case m2c::kloc_14f95: 	goto loc_14f95;
        case m2c::kloc_14fe3: 	goto loc_14fe3;
        case m2c::kloc_1501d: 	goto loc_1501d;
        case m2c::kloc_15047: 	goto loc_15047;
        case m2c::kloc_1507e: 	goto loc_1507e;
        case m2c::kloc_150e8: 	goto loc_150e8;
        case m2c::kloc_15120: 	goto loc_15120;
        case m2c::kloc_1513c: 	goto loc_1513c;
        case m2c::kloc_1514e: 	goto loc_1514e;
        case m2c::kloc_151c9: 	goto loc_151c9;
        case m2c::kseg000_4fb9_proc: 	goto seg000_4fb9_proc;
        case m2c::kseg000_511a_proc: 	goto seg000_511a_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_4f48_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_4f48_proc:
    _begin:
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x004f48; 	X(DEC(*(&byte_14f73)));	// 10992 dec     cs:byte_14F73 ;~ 01A2:4F48
cs=0x1a2;eip=0x004f4d; 	J(JZ(loc_14f50));	// 10993 jz      short loc_14F50 ;~ 01A2:4F4D
cs=0x1a2;eip=0x004f4f; 	J(IRET);	// 10994 iret ;~ 01A2:4F4F
loc_14f50:
	// 5053 
cs=0x1a2;eip=0x004f50; 	X(PUSH(ax));	// 10998 push    ax ;~ 01A2:4F50
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x004f51; 	T(MOV(al, *(&byte_14f72)));	// 10999 mov     al, cs:byte_14F72 ;~ 01A2:4F51
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x004f55; 	X(MOV(*(&byte_14f73), al));	// 11000 mov     cs:byte_14F73, al ;~ 01A2:4F55
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x004f59; 	T(MOV(ax, *(dw*)(((db*)&_timer_word_14f6e))));	// 11001 mov     ax, cs:_timer_word_14F6E ;~ 01A2:4F59
cs=0x1a2;eip=0x004f5d; 	J(CALL(_set_timer,0));	// 11002 call    _set_timer ;~ 01A2:4F5D
cs=0x1a2;eip=0x004f60; 	X(POP(ax));	// 11003 pop     ax ;~ 01A2:4F60
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x004f61; __disp=*(dd*)(((db*)&_int8addr));
printf("int8_\n");
	J(return __dispatch_call(__disp, _state););	// 11004 jmp     cs:_int8addr ;~ 01A2:4F61
ret_1a2_4f66:
	// 5054 
cs=0x1a2;eip=0x004f66; 	T(XCHG(bx, bx));	// 11006 xchg    bx, bx ;~ 01A2:4F66
	return _group22(m2c::k_covox_init, _state);
    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::kloc_14f50: 	goto loc_14f50;
        case m2c::kret_1a2_4f66: 	goto ret_1a2_4f66;
        case m2c::kseg000_4f48_proc: 	goto seg000_4f48_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _covox_set(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _covox_set:
    _begin:
cs=0x1a2;eip=0x004fb5; 	J(CALL(_configure_timer,0));	// 11061 call    _configure_timer ;~ 01A2:4FB5
cs=0x1a2;eip=0x004fb8; 	J(RETN(0));	// 11062 retn ;~ 01A2:4FB8

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_covox_set: 	goto _covox_set;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _covox_sndoff(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _covox_sndoff:
    _begin:
cs=0x1a2;eip=0x004ff4; 	J(CALL(_memfill8080,0));	// 11111 call    _memfill8080 ;~ 01A2:4FF4
cs=0x1a2;eip=0x004ff7; 	J(RETN(0));	// 11112 retn ;~ 01A2:4FF7

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_covox_sndoff: 	goto _covox_sndoff;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _covox_clean(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _covox_clean:
    _begin:
cs=0x1a2;eip=0x004ff8; 	J(CALL(_clean_int8_mem_timr,0));	// 11121 call    _clean_int8_mem_timr ;~ 01A2:4FF8
cs=0x1a2;eip=0x004ffb; 	J(RETN(0));	// 11122 retn ;~ 01A2:4FFB

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_covox_clean: 	goto _covox_clean;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _stereo_set(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _stereo_set:
    _begin:
cs=0x1a2;eip=0x005040; 	J(CALL(_configure_timer,0));	// 11164 call    _configure_timer ;~ 01A2:5040
cs=0x1a2;eip=0x005043; 	J(RETN(0));	// 11165 retn ;~ 01A2:5043

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_stereo_set: 	goto _stereo_set;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _stereo_sndoff(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _stereo_sndoff:
    _begin:
cs=0x1a2;eip=0x00508f; 	J(CALL(_memfill8080,0));	// 11233 call    _memfill8080 ;~ 01A2:508F
cs=0x1a2;eip=0x005092; 	J(RETN(0));	// 11234 retn ;~ 01A2:5092

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_stereo_sndoff: 	goto _stereo_sndoff;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _stereo_clean(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _stereo_clean:
    _begin:
cs=0x1a2;eip=0x005093; 	J(CALL(_clean_int8_mem_timr,0));	// 11243 call    _clean_int8_mem_timr ;~ 01A2:5093
cs=0x1a2;eip=0x005096; 	J(RETN(0));	// 11244 retn ;~ 01A2:5096

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_stereo_clean: 	goto _stereo_clean;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _adlib_set(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _adlib_set:
    _begin:
cs=0x1a2;eip=0x005116; 	J(CALL(_configure_timer,0));	// 11307 call    _configure_timer ;~ 01A2:5116
cs=0x1a2;eip=0x005119; 	J(RETN(0));	// 11308 retn ;~ 01A2:5119

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_adlib_set: 	goto _adlib_set;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _adlib_sndoff(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _adlib_sndoff:
    _begin:
cs=0x1a2;eip=0x005157; 	J(CALL(_memfill8080,0));	// 11360 call    _memfill8080 ;~ 01A2:5157
cs=0x1a2;eip=0x00515a; 	J(RETN(0));	// 11361 retn ;~ 01A2:515A

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_adlib_sndoff: 	goto _adlib_sndoff;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _adlib_clean(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _adlib_clean:
    _begin:
cs=0x1a2;eip=0x00515b; 	J(CALL(_clean_int8_mem_timr,0));	// 11370 call    _clean_int8_mem_timr ;~ 01A2:515B
cs=0x1a2;eip=0x00515e; 	J(CALL(_adlib_18389,0));	// 11371 call    _adlib_18389 ;~ 01A2:515E
cs=0x1a2;eip=0x005161; 	J(RETN(0));	// 11372 retn ;~ 01A2:5161

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_adlib_clean: 	goto _adlib_clean;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _pcspeaker_set(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _pcspeaker_set:
    _begin:
cs=0x1a2;eip=0x00518e; 	S(IN(al, 0x61));	// 11405 in      al, 61h         ; PC/XT PPI port B bits: ;~ 01A2:518E
cs=0x1a2;eip=0x005190; 	T(OR(al, 3));	// 11413 or      al, 3 ;~ 01A2:5190
cs=0x1a2;eip=0x005192; 	S(OUT(0x61, al));	// 11414 out     61h, al         ; PC/XT PPI port B bits: ;~ 01A2:5192
cs=0x1a2;eip=0x005194; 	J(CALL(_configure_timer,0));	// 11422 call    _configure_timer ;~ 01A2:5194
cs=0x1a2;eip=0x005197; 	J(RETN(0));	// 11423 retn ;~ 01A2:5197

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_pcspeaker_set: 	goto _pcspeaker_set;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _pcspeaker_sndoff(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _pcspeaker_sndoff:
    _begin:
cs=0x1a2;eip=0x0051da; 	J(CALL(_memfill8080,0));	// 11469 call    _memfill8080 ;~ 01A2:51DA
cs=0x1a2;eip=0x0051dd; 	S(IN(al, 0x61));	// 11470 in      al, 61h         ; PC/XT PPI port B bits: ;~ 01A2:51DD
cs=0x1a2;eip=0x0051df; 	T(AND(al, 0x0FC));	// 11478 and     al, 0FCh ;~ 01A2:51DF
cs=0x1a2;eip=0x0051e1; 	S(OUT(0x61, al));	// 11479 out     61h, al         ; PC/XT PPI port B bits: ;~ 01A2:51E1
cs=0x1a2;eip=0x0051e3; 	J(RETN(0));	// 11487 retn ;~ 01A2:51E3

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_pcspeaker_sndoff: 	goto _pcspeaker_sndoff;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _pcspeaker_clean(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _pcspeaker_clean:
    _begin:
cs=0x1a2;eip=0x0051e4; 	J(CALL(_clean_int8_mem_timr,0));	// 11496 call    _clean_int8_mem_timr ;~ 01A2:51E4
cs=0x1a2;eip=0x0051e7; 	J(RETN(0));	// 11497 retn ;~ 01A2:51E7

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_pcspeaker_clean: 	goto _pcspeaker_clean;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group23(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group23:
    _begin:
seg000_52e8_proc:
	// 11516 
_midi_init:
	// 5068 
cs=0x1a2;eip=0x0052e8; 	X(MOV(_sndflags_24622, 0x12));	// 11518 mov     _sndflags_24622, 12h ;~ 01A2:52E8
cs=0x1a2;eip=0x0052ed; 	X(MOV(byte_24623, 1));	// 11519 mov     byte_24623, 1 ;~ 01A2:52ED
cs=0x1a2;eip=0x0052f2; 	X(MOV(_bit_mode, 8));	// 11520 mov     _bit_mode, 8 ;~ 01A2:52F2
cs=0x1a2;eip=0x0052f7; 	T(MOV(ax, _snd_base_port));	// 11521 mov     ax, _snd_base_port ;~ 01A2:52F7
cs=0x1a2;eip=0x0052fa; 	T(CMP(ax, 0x0FFFF));	// 11522 cmp     ax, 0FFFFh ;~ 01A2:52FA
cs=0x1a2;eip=0x0052fd; 	J(JNZ(loc_15302));	// 11523 jnz     short loc_15302 ;~ 01A2:52FD
cs=0x1a2;eip=0x0052ff; 	T(MOV(ax, 0x330));	// 11524 mov     ax, 330h ;~ 01A2:52FF
loc_15302:
	// 5069 
cs=0x1a2;eip=0x005302; 	X(MOV(word_2465c, ax));	// 11527 mov     word_2465C, ax ;~ 01A2:5302
cs=0x1a2;eip=0x005305; 	X(MOV(_snd_base_port, ax));	// 11528 mov     _snd_base_port, ax ;~ 01A2:5305
cs=0x1a2;eip=0x005308; 	X(MOV(off_245ca, m2c::k_nullsub_4));	// 11529 mov     off_245CA, offset _nullsub_4 ;~ 01A2:5308
cs=0x1a2;eip=0x00530e; 	X(MOV(off_245c8, m2c::k_midi_15466));	// 11530 mov     off_245C8, offset _midi_15466 ;~ 01A2:530E
cs=0x1a2;eip=0x005314; 	X(MOV(off_245cc, m2c::k_midi_154ac));	// 11531 mov     off_245CC, offset _midi_154AC ;~ 01A2:5314
cs=0x1a2;eip=0x00531a; 	X(MOV(off_245ce, m2c::k_midi_1544d));	// 11532 mov     off_245CE, offset _midi_1544D ;~ 01A2:531A
cs=0x1a2;eip=0x005320; 	T(MOV(bx, offset(seg003,_volume_25908)));	// 11533 mov     bx, offset _volume_25908 ;~ 01A2:5320
cs=0x1a2;eip=0x005323; 	T(MOV(ah, 1));	// 11534 mov     ah, 1 ;~ 01A2:5323
loc_15325:
	// 5070 
cs=0x1a2;eip=0x005325; 	T(MOV(al, ah));	// 11537 mov     al, ah ;~ 01A2:5325
cs=0x1a2;eip=0x005327; 	T(AND(al, 0x0F));	// 11538 and     al, 0Fh ;~ 01A2:5327
cs=0x1a2;eip=0x005329; 	X(MOV(*(raddr(ds,bx+0x18)), al));	// 11539 mov     [bx+18h], al ;~ 01A2:5329
cs=0x1a2;eip=0x00532c; 	X(AND(*(raddr(ds,bx+0x17)), 0x0FE));	// 11540 and     byte ptr [bx+17h], 0FEh ;~ 01A2:532C
cs=0x1a2;eip=0x005330; 	X(MOV(*(raddr(ds,bx+0x35)), 0));	// 11541 mov     byte ptr [bx+35h], 0 ;~ 01A2:5330
cs=0x1a2;eip=0x005334; 	T(ADD(bx, 0x50));	// 11542 add     bx, 50h ; 'P' ;~ 01A2:5334
cs=0x1a2;eip=0x005337; 	T(INC(ah));	// 11543 inc     ah ;~ 01A2:5337
cs=0x1a2;eip=0x005339; 	T(CMP(ah, 0x10));	// 11544 cmp     ah, 10h ;~ 01A2:5339
cs=0x1a2;eip=0x00533c; 	J(JBE(loc_15325));	// 11545 jbe     short loc_15325 ;~ 01A2:533C
cs=0x1a2;eip=0x00533e; 	J(CALL(_midi_153c0,0));	// 11546 call    _midi_153C0 ;~ 01A2:533E
cs=0x1a2;eip=0x005341; 	J(CALL(_midi_153d6,0));	// 11547 call    _midi_153D6 ;~ 01A2:5341
cs=0x1a2;eip=0x005344; 	T(CLC);	// 11548 clc ;~ 01A2:5344
cs=0x1a2;eip=0x005345; 	J(RETN(0));	// 11549 retn ;~ 01A2:5345
_nullsub_4:
	// 11780 
cs=0x1a2;eip=0x00544c; 	J(RETN(0));	// 11781 retn ;~ 01A2:544C
_midi_1544d:
	// 11788 
cs=0x1a2;eip=0x00544d; 	X(AND(*(raddr(ds,bx+0x17)), 0x0FE));	// 11790 and     byte ptr [bx+17h], 0FEh ;~ 01A2:544D
cs=0x1a2;eip=0x005451; 	J(CALL(_midi_154da,0));	// 11791 call    _midi_154DA ;~ 01A2:5451
cs=0x1a2;eip=0x005454; 	T(OR(ah, 0x80));	// 11792 or      ah, 80h ;~ 01A2:5454
cs=0x1a2;eip=0x005457; 	J(CALL(_midi_15413,0));	// 11793 call    _midi_15413 ;~ 01A2:5457
cs=0x1a2;eip=0x00545a; 	J(CALL(_midi_154de,0));	// 11794 call    _midi_154DE ;~ 01A2:545A
cs=0x1a2;eip=0x00545d; 	J(CALL(_midi_15413,0));	// 11795 call    _midi_15413 ;~ 01A2:545D
cs=0x1a2;eip=0x005460; 	T(MOV(ah, 0x7F));	// 11796 mov     ah, 7Fh ;~ 01A2:5460
cs=0x1a2;eip=0x005462; 	J(CALL(_midi_15413,0));	// 11797 call    _midi_15413 ;~ 01A2:5462
cs=0x1a2;eip=0x005465; 	J(RETN(0));	// 11798 retn ;~ 01A2:5465
_midi_15466:
	// 11805 
cs=0x1a2;eip=0x005466; 	T(TEST(*(raddr(ds,bx+0x17)), 0x0FE));	// 11806 test    byte ptr [bx+17h], 0FEh ;~ 01A2:5466
cs=0x1a2;eip=0x00546a; 	J(JZ(loc_1546f));	// 11807 jz      short loc_1546F ;~ 01A2:546A
cs=0x1a2;eip=0x00546c; 	J(CALL(_midi_1544d,0));	// 11808 call    _midi_1544D ;~ 01A2:546C
loc_1546f:
	// 5086 
cs=0x1a2;eip=0x00546f; 	X(OR(*(raddr(ds,bx+0x17)), 1));	// 11811 or      byte ptr [bx+17h], 1 ;~ 01A2:546F
cs=0x1a2;eip=0x005473; 	T(MOV(al, *(raddr(ds,bx+2))));	// 11812 mov     al, [bx+2] ;~ 01A2:5473
cs=0x1a2;eip=0x005476; 	T(CMP(al, *(raddr(ds,bx+3))));	// 11813 cmp     al, [bx+3] ;~ 01A2:5476
cs=0x1a2;eip=0x005479; 	J(JZ(loc_1548d));	// 11814 jz      short loc_1548D ;~ 01A2:5479
cs=0x1a2;eip=0x00547b; 	X(MOV(*(raddr(ds,bx+3)), al));	// 11815 mov     [bx+3], al ;~ 01A2:547B
cs=0x1a2;eip=0x00547e; 	J(CALL(_midi_154da,0));	// 11816 call    _midi_154DA ;~ 01A2:547E
cs=0x1a2;eip=0x005481; 	T(OR(ah, 0x0C0));	// 11817 or      ah, 0C0h ;~ 01A2:5481
cs=0x1a2;eip=0x005484; 	J(CALL(_midi_15413,0));	// 11818 call    _midi_15413 ;~ 01A2:5484
cs=0x1a2;eip=0x005487; 	T(MOV(ah, *(raddr(ds,bx+2))));	// 11819 mov     ah, [bx+2] ;~ 01A2:5487
cs=0x1a2;eip=0x00548a; 	J(CALL(_midi_15413,0));	// 11820 call    _midi_15413 ;~ 01A2:548A
loc_1548d:
	// 5087 
cs=0x1a2;eip=0x00548d; 	T(MOV(al, *(raddr(ds,bx+8))));	// 11823 mov     al, [bx+8] ;~ 01A2:548D
cs=0x1a2;eip=0x005490; 	J(CALL(_midi_154ac,0));	// 11824 call    _midi_154AC ;~ 01A2:5490
cs=0x1a2;eip=0x005493; 	J(CALL(_midi_154da,0));	// 11825 call    _midi_154DA ;~ 01A2:5493
cs=0x1a2;eip=0x005496; 	T(OR(ah, 0x90));	// 11826 or      ah, 90h ;~ 01A2:5496
cs=0x1a2;eip=0x005499; 	J(CALL(_midi_15413,0));	// 11827 call    _midi_15413 ;~ 01A2:5499
cs=0x1a2;eip=0x00549c; 	J(CALL(_midi_154de,0));	// 11828 call    _midi_154DE ;~ 01A2:549C
cs=0x1a2;eip=0x00549f; 	J(CALL(_midi_15413,0));	// 11829 call    _midi_15413 ;~ 01A2:549F
cs=0x1a2;eip=0x0054a2; 	T(MOV(ah, 0x7F));	// 11830 mov     ah, 7Fh ;~ 01A2:54A2
cs=0x1a2;eip=0x0054a4; 	J(CALL(_midi_15413,0));	// 11831 call    _midi_15413 ;~ 01A2:54A4
cs=0x1a2;eip=0x0054a7; 	X(OR(*(raddr(ds,bx+0x17)), 1));	// 11832 or      byte ptr [bx+17h], 1 ;~ 01A2:54A7
cs=0x1a2;eip=0x0054ab; 	J(RETN(0));	// 11833 retn ;~ 01A2:54AB
_midi_154ac:
	// 11840 
cs=0x1a2;eip=0x0054ac; 	T(CMP(al, byte_2467d));	// 11842 cmp     al, byte_2467D ;~ 01A2:54AC
cs=0x1a2;eip=0x0054b0; 	J(JC(loc_154b5));	// 11843 jb      short loc_154B5 ;~ 01A2:54B0
cs=0x1a2;eip=0x0054b2; 	T(MOV(al, byte_2467d));	// 11844 mov     al, byte_2467D ;~ 01A2:54B2
loc_154b5:
	// 5088 
cs=0x1a2;eip=0x0054b5; 	T(CMP(al, *(raddr(ds,bx+0x1B))));	// 11847 cmp     al, [bx+1Bh] ;~ 01A2:54B5
cs=0x1a2;eip=0x0054b8; 	J(JZ(locret_154d9));	// 11848 jz      short locret_154D9 ;~ 01A2:54B8
cs=0x1a2;eip=0x0054ba; 	X(MOV(*(raddr(ds,bx+0x1B)), al));	// 11849 mov     [bx+1Bh], al ;~ 01A2:54BA
cs=0x1a2;eip=0x0054bd; 	T(MOVZX(di, al));	// 11850 movzx   di, al ;~ 01A2:54BD
cs=0x1a2;eip=0x0054c0; 	J(CALL(_midi_154da,0));	// 11851 call    _midi_154DA ;~ 01A2:54C0
cs=0x1a2;eip=0x0054c3; 	T(OR(ah, 0x0B0));	// 11852 or      ah, 0B0h ;~ 01A2:54C3
cs=0x1a2;eip=0x0054c6; 	J(CALL(_midi_15413,0));	// 11853 call    _midi_15413 ;~ 01A2:54C6
cs=0x1a2;eip=0x0054c9; 	T(MOV(ah, 7));	// 11854 mov     ah, 7 ;~ 01A2:54C9
cs=0x1a2;eip=0x0054cb; 	J(CALL(_midi_15413,0));	// 11855 call    _midi_15413 ;~ 01A2:54CB
cs=0x1a2;eip=0x0054ce; 	T(MOV(al, 0x80));	// 11856 mov     al, 80h ; '€' ;~ 01A2:54CE
cs=0x1a2;eip=0x0054d0; 	T(ADD(di, off_24656));	// 11857 add     di, off_24656   ; "07/02/95 12:26:42" ;~ 01A2:54D0
cs=0x1a2;eip=0x0054d4; 	X(MUL1_1(*(raddr(ds,di))));	// 11858 mul     byte ptr [di] ;~ 01A2:54D4
cs=0x1a2;eip=0x0054d6; 	J(CALL(_midi_15413,0));	// 11859 call    _midi_15413 ;~ 01A2:54D6
locret_154d9:
	// 5089 
cs=0x1a2;eip=0x0054d9; 	J(RETN(0));	// 11862 retn ;~ 01A2:54D9

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_midi_1544d: 	goto _midi_1544d;
        case m2c::k_midi_15466: 	goto _midi_15466;
        case m2c::k_midi_154ac: 	goto _midi_154ac;
        case m2c::k_midi_init: 	goto _midi_init;
        case m2c::k_nullsub_4: 	goto _nullsub_4;
        case m2c::kloc_15302: 	goto loc_15302;
        case m2c::kloc_15325: 	goto loc_15325;
        case m2c::kloc_1546f: 	goto loc_1546f;
        case m2c::kloc_1548d: 	goto loc_1548d;
        case m2c::kloc_154b5: 	goto loc_154b5;
        case m2c::klocret_154d9: 	goto locret_154d9;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group24(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group24:
    _begin:
_midi_set:
	// 11555 
cs=0x1a2;eip=0x005346; 	T(MOV(bx, m2c::k_midi_int8p));	// 11558 mov     bx, offset _midi_int8p ;~ 01A2:5346
cs=0x1a2;eip=0x005349; 	T(MOV(dx, cs));	// 11559 mov     dx, cs ;~ 01A2:5349
cs=0x1a2;eip=0x00534b; 	T(MOV(al, 8));	// 11560 mov     al, 8 ;~ 01A2:534B
cs=0x1a2;eip=0x00534d; 	J(CALL(_setint_vect,0));	// 11561 call    _setint_vect ;~ 01A2:534D
cs=0x1a2;eip=0x005350; 	J(RETN(0));	// 11562 retn ;~ 01A2:5350
seg000_5351_proc:
	// 11566 
cs=0x1a2;eip=0x005351; 	T(XCHG(bx, bx));	// 11566 xchg    bx, bx ;~ 01A2:5351
cs=0x1a2;eip=0x005353; 	T(NOP);	// 11567 nop ;~ 01A2:5353
_midi_int8p:
	// 5071 
cs=0x1a2;eip=0x005354; 	X(PUSHAD);	// 11570 pushad ;~ 01A2:5354
cs=0x1a2;eip=0x005356; 	T(MOV(al, 0x20));	// 11571 mov     al, 20h ; ' ' ;~ 01A2:5356
cs=0x1a2;eip=0x005358; 	S(OUT(0x20, al));	// 11572 out     20h, al         ; Interrupt controller, 8259A. ;~ 01A2:5358
cs=0x1a2;eip=0x00535a; 	X(PUSH(ds));	// 11573 push    ds ;~ 01A2:535A
cs=0x1a2;eip=0x00535b; 	X(PUSH(es));	// 11574 push    es ;~ 01A2:535B
cs=0x1a2;eip=0x00535c; 	X(PUSH(fs));	// 11575 push    fs ;~ 01A2:535C
cs=0x1a2;eip=0x00535e; 	X(PUSH(gs));	// 11576 push    gs ;~ 01A2:535E
cs=0x1a2;eip=0x005360; 	T(MOV(ax, seg_offset(seg003)));	// 11577 mov     ax, seg seg003 ;~ 01A2:5360
cs=0x1a2;eip=0x005363; 	T(MOV(ds, ax));	// 11578 mov     ds, ax ;~ 01A2:5363
cs=0x1a2;eip=0x005365; 	T(CMP(byte_24671, 1));	// 11579 cmp     byte_24671, 1 ;~ 01A2:5365
cs=0x1a2;eip=0x00536a; 	J(JZ(loc_1539a));	// 11580 jz      short loc_1539A ;~ 01A2:536A
cs=0x1a2;eip=0x00536c; 	X(INC(byte_24668));	// 11581 inc     byte_24668 ;~ 01A2:536C
cs=0x1a2;eip=0x005370; 	T(MOV(al, byte_24668));	// 11582 mov     al, byte_24668 ;~ 01A2:5370
cs=0x1a2;eip=0x005373; 	T(CMP(al, byte_24667));	// 11583 cmp     al, byte_24667 ;~ 01A2:5373
cs=0x1a2;eip=0x005377; 	J(JNC(loc_1538f));	// 11584 jnb     short loc_1538F ;~ 01A2:5377
cs=0x1a2;eip=0x005379; 	T(MOV(bx, offset(seg003,_volume_25908)));	// 11585 mov     bx, offset _volume_25908 ;~ 01A2:5379
cs=0x1a2;eip=0x00537c; 	T(MOV(cx, word_245d4));	// 11586 mov     cx, word_245D4 ;~ 01A2:537C
loc_15380:
	// 5072 
cs=0x1a2;eip=0x005380; 	X(PUSH(bx));	// 11589 push    bx ;~ 01A2:5380
cs=0x1a2;eip=0x005381; 	X(PUSH(cx));	// 11590 push    cx ;~ 01A2:5381
cs=0x1a2;eip=0x005382; 	J(CALL(sub_13813,0));	// 11591 call    sub_13813 ;~ 01A2:5382
cs=0x1a2;eip=0x005385; 	X(POP(cx));	// 11592 pop     cx ;~ 01A2:5385
cs=0x1a2;eip=0x005386; 	X(POP(bx));	// 11593 pop     bx ;~ 01A2:5386
cs=0x1a2;eip=0x005387; 	T(ADD(bx, 0x50));	// 11594 add     bx, 50h ; 'P' ;~ 01A2:5387
cs=0x1a2;eip=0x00538a; 	T(DEC(cx));	// 11595 dec     cx ;~ 01A2:538A
cs=0x1a2;eip=0x00538b; 	J(JNZ(loc_15380));	// 11596 jnz     short loc_15380 ;~ 01A2:538B
cs=0x1a2;eip=0x00538d; 	J(JMP(loc_1539a));	// 11597 jmp     short loc_1539A ;~ 01A2:538D
loc_1538f:
	// 5073 
cs=0x1a2;eip=0x00538f; 	X(MOV(byte_24668, 0));	// 11601 mov     byte_24668, 0 ;~ 01A2:538F
cs=0x1a2;eip=0x005394; 	J(CALL(sub_135ca,0));	// 11602 call    sub_135CA ;~ 01A2:5394
cs=0x1a2;eip=0x005397; 	J(CALL(_group13,m2c::kloc_14111));	// 11603 call    loc_14111 ;~ 01A2:5397
loc_1539a:
	// 5074 
cs=0x1a2;eip=0x00539a; 	X(POP(gs));	// 11607 pop     gs ;~ 01A2:539A
cs=0x1a2;eip=0x00539c; 	X(POP(fs));	// 11608 pop     fs ;~ 01A2:539C
cs=0x1a2;eip=0x00539e; 	X(POP(es));	// 11609 pop     es ;~ 01A2:539E
cs=0x1a2;eip=0x00539f; 	X(POP(ds));	// 11611 pop     ds ;~ 01A2:539F
cs=0x1a2;eip=0x0053a0; 	X(POPAD);	// 11612 popad ;~ 01A2:53A0
cs=0x1a2;eip=0x0053a2; 	T(NOP);	// 11613 nop ;~ 01A2:53A2
cs=0x1a2;eip=0x0053a3; 	J(IRET);	// 11614 iret ;~ 01A2:53A3

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_midi_int8p: 	goto _midi_int8p;
        case m2c::k_midi_set: 	goto _midi_set;
        case m2c::kloc_15380: 	goto loc_15380;
        case m2c::kloc_1538f: 	goto loc_1538f;
        case m2c::kloc_1539a: 	goto loc_1539a;
        case m2c::kseg000_5351_proc: 	goto seg000_5351_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _midi_sndoff(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _midi_sndoff:
    _begin:
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0053a4; 	T(MOV(dx, *(dw*)(((db*)&_int8addr)+2)));	// 11621 mov     dx, word ptr cs:_int8addr+2 ;~ 01A2:53A4
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0053a9; 	T(MOV(bx, *(dw*)(((db*)&_int8addr))));	// 11622 mov     bx, word ptr cs:_int8addr ;~ 01A2:53A9
cs=0x1a2;eip=0x0053ae; 	T(MOV(al, 8));	// 11623 mov     al, 8 ;~ 01A2:53AE
cs=0x1a2;eip=0x0053b0; 	J(CALL(_setint_vect,0));	// 11624 call    _setint_vect ;~ 01A2:53B0
cs=0x1a2;eip=0x0053b3; 	J(CALL(_clean_timer,0));	// 11625 call    _clean_timer ;~ 01A2:53B3
cs=0x1a2;eip=0x0053b6; 	J(CALL(_midi_153d6,0));	// 11626 call    _midi_153D6 ;~ 01A2:53B6
cs=0x1a2;eip=0x0053b9; 	J(RETN(0));	// 11627 retn ;~ 01A2:53B9

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_midi_sndoff: 	goto _midi_sndoff;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _midi_clean(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _midi_clean:
    _begin:
cs=0x1a2;eip=0x0053ba; 	T(MOV(ah, 0x0FF));	// 11636 mov     ah, 0FFh ;~ 01A2:53BA
cs=0x1a2;eip=0x0053bc; 	J(CALL(_midi_153f1,0));	// 11637 call    _midi_153F1 ;~ 01A2:53BC
cs=0x1a2;eip=0x0053bf; 	J(RETN(0));	// 11638 retn ;~ 01A2:53BF

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_midi_clean: 	goto _midi_clean;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _midi_153c0(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _midi_153c0:
    _begin:
cs=0x1a2;eip=0x0053c0; 	T(MOV(ah, 0x0FF));	// 11646 mov     ah, 0FFh ;~ 01A2:53C0
cs=0x1a2;eip=0x0053c2; 	J(CALL(_midi_153f1,0));	// 11647 call    _midi_153F1 ;~ 01A2:53C2
cs=0x1a2;eip=0x0053c5; 	T(MOV(cx, 0x8000));	// 11648 mov     cx, 8000h ;~ 01A2:53C5
cs=0x1a2;eip=0x0053c8; 	J(CALL(_midi_15442,0));	// 11649 call    _midi_15442 ;~ 01A2:53C8
cs=0x1a2;eip=0x0053cb; 	T(MOV(ah, 0x3F));	// 11650 mov     ah, 3Fh ; '?' ;~ 01A2:53CB
cs=0x1a2;eip=0x0053cd; 	J(CALL(_midi_153f1,0));	// 11651 call    _midi_153F1 ;~ 01A2:53CD
cs=0x1a2;eip=0x0053d0; 	T(XOR(cx, cx));	// 11652 xor     cx, cx ;~ 01A2:53D0
cs=0x1a2;eip=0x0053d2; 	J(CALL(_midi_15442,0));	// 11653 call    _midi_15442 ;~ 01A2:53D2
cs=0x1a2;eip=0x0053d5; 	J(RETN(0));	// 11654 retn ;~ 01A2:53D5

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_midi_153c0: 	goto _midi_153c0;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _midi_153d6(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _midi_153d6:
    _begin:
cs=0x1a2;eip=0x0053d6; 	T(XOR(bl, bl));	// 11663 xor     bl, bl ;~ 01A2:53D6
loc_153d8:
	// 5075 
cs=0x1a2;eip=0x0053d8; 	T(MOV(ah, 0x0B0));	// 11666 mov     ah, 0B0h ; '°' ;~ 01A2:53D8
cs=0x1a2;eip=0x0053da; 	T(OR(ah, bl));	// 11667 or      ah, bl ;~ 01A2:53DA
cs=0x1a2;eip=0x0053dc; 	J(CALL(_midi_15413,0));	// 11668 call    _midi_15413 ;~ 01A2:53DC
cs=0x1a2;eip=0x0053df; 	T(MOV(ah, 0x7B));	// 11669 mov     ah, 7Bh ; '{' ;~ 01A2:53DF
cs=0x1a2;eip=0x0053e1; 	J(CALL(_midi_15413,0));	// 11670 call    _midi_15413 ;~ 01A2:53E1
cs=0x1a2;eip=0x0053e4; 	T(XOR(ah, ah));	// 11671 xor     ah, ah ;~ 01A2:53E4
cs=0x1a2;eip=0x0053e6; 	J(CALL(_midi_15413,0));	// 11672 call    _midi_15413 ;~ 01A2:53E6
cs=0x1a2;eip=0x0053e9; 	T(INC(bl));	// 11673 inc     bl ;~ 01A2:53E9
cs=0x1a2;eip=0x0053eb; 	T(CMP(bl, 0x10));	// 11674 cmp     bl, 10h ;~ 01A2:53EB
cs=0x1a2;eip=0x0053ee; 	J(JC(loc_153d8));	// 11675 jb      short loc_153D8 ;~ 01A2:53EE
cs=0x1a2;eip=0x0053f0; 	J(RETN(0));	// 11676 retn ;~ 01A2:53F0

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_midi_153d6: 	goto _midi_153d6;
        case m2c::kloc_153d8: 	goto loc_153d8;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _midi_153f1(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _midi_153f1:
    _begin:
cs=0x1a2;eip=0x0053f1; 	T(MOV(dx, word_2465c));	// 11685 mov     dx, word_2465C ;~ 01A2:53F1
cs=0x1a2;eip=0x0053f5; 	T(INC(dx));	// 11686 inc     dx ;~ 01A2:53F5
cs=0x1a2;eip=0x0053f6; 	T(XOR(cx, cx));	// 11687 xor     cx, cx ;~ 01A2:53F6
loc_153f8:
	// 5076 
cs=0x1a2;eip=0x0053f8; 	S(IN(al, dx));	// 11690 in      al, dx ;~ 01A2:53F8
cs=0x1a2;eip=0x0053f9; 	T(TEST(al, 0x40));	// 11691 test    al, 40h ;~ 01A2:53F9
cs=0x1a2;eip=0x0053fb; 	J(JZ(loc_15401));	// 11692 jz      short loc_15401 ;~ 01A2:53FB
cs=0x1a2;eip=0x0053fd; 	T(DEC(cx));	// 11693 dec     cx ;~ 01A2:53FD
cs=0x1a2;eip=0x0053fe; 	J(JNZ(loc_153f8));	// 11694 jnz     short loc_153F8 ;~ 01A2:53FE
cs=0x1a2;eip=0x005400; 	J(RETN(0));	// 11695 retn ;~ 01A2:5400
loc_15401:
	// 5077 
cs=0x1a2;eip=0x005401; 	T(MOV(al, ah));	// 11699 mov     al, ah ;~ 01A2:5401
cs=0x1a2;eip=0x005403; 	S(OUT(dx, al));	// 11700 out     dx, al ;~ 01A2:5403
cs=0x1a2;eip=0x005404; 	T(XOR(cx, cx));	// 11701 xor     cx, cx ;~ 01A2:5404
loc_15406:
	// 5078 
cs=0x1a2;eip=0x005406; 	S(IN(al, dx));	// 11704 in      al, dx ;~ 01A2:5406
cs=0x1a2;eip=0x005407; 	T(SHL(al, 1));	// 11705 shl     al, 1 ;~ 01A2:5407
cs=0x1a2;eip=0x005409; 	J(JNC(loc_1540e));	// 11706 jnb     short loc_1540E ;~ 01A2:5409
cs=0x1a2;eip=0x00540b; 	T(DEC(cx));	// 11707 dec     cx ;~ 01A2:540B
cs=0x1a2;eip=0x00540c; 	J(JNZ(loc_15406));	// 11708 jnz     short loc_15406 ;~ 01A2:540C
loc_1540e:
	// 5079 
cs=0x1a2;eip=0x00540e; 	T(DEC(dx));	// 11711 dec     dx ;~ 01A2:540E
cs=0x1a2;eip=0x00540f; 	S(IN(al, dx));	// 11712 in      al, dx ;~ 01A2:540F
cs=0x1a2;eip=0x005410; 	T(CMP(al, 0x0FE));	// 11713 cmp     al, 0FEh ; 'þ' ;~ 01A2:5410
cs=0x1a2;eip=0x005412; 	J(RETN(0));	// 11714 retn ;~ 01A2:5412

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_midi_153f1: 	goto _midi_153f1;
        case m2c::kloc_153f8: 	goto loc_153f8;
        case m2c::kloc_15401: 	goto loc_15401;
        case m2c::kloc_15406: 	goto loc_15406;
        case m2c::kloc_1540e: 	goto loc_1540e;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _midi_15413(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _midi_15413:
    _begin:
cs=0x1a2;eip=0x005413; 	T(OR(ah, ah));	// 11723 or      ah, ah ;~ 01A2:5413
cs=0x1a2;eip=0x005415; 	J(JNS(loc_15421));	// 11724 jns     short loc_15421 ;~ 01A2:5415
cs=0x1a2;eip=0x005417; 	T(CMP(ah, byte_24677));	// 11725 cmp     ah, byte_24677 ;~ 01A2:5417
cs=0x1a2;eip=0x00541b; 	J(JZ(locret_15441));	// 11726 jz      short locret_15441 ;~ 01A2:541B
cs=0x1a2;eip=0x00541d; 	X(MOV(byte_24677, ah));	// 11727 mov     byte_24677, ah ;~ 01A2:541D
loc_15421:
	// 5080 
cs=0x1a2;eip=0x005421; 	T(MOV(dx, word_2465c));	// 11730 mov     dx, word_2465C ;~ 01A2:5421
cs=0x1a2;eip=0x005425; 	T(INC(dx));	// 11731 inc     dx ;~ 01A2:5425
cs=0x1a2;eip=0x005426; 	T(MOV(cl, 0x0FF));	// 11732 mov     cl, 0FFh ;~ 01A2:5426
loc_15428:
	// 5081 
cs=0x1a2;eip=0x005428; 	S(IN(al, dx));	// 11735 in      al, dx ;~ 01A2:5428
cs=0x1a2;eip=0x005429; 	T(TEST(al, 0x40));	// 11736 test    al, 40h ;~ 01A2:5429
cs=0x1a2;eip=0x00542b; 	J(JZ(loc_15439));	// 11737 jz      short loc_15439 ;~ 01A2:542B
cs=0x1a2;eip=0x00542d; 	T(SHL(al, 1));	// 11738 shl     al, 1 ;~ 01A2:542D
cs=0x1a2;eip=0x00542f; 	J(JC(loc_15434));	// 11739 jb      short loc_15434 ;~ 01A2:542F
cs=0x1a2;eip=0x005431; 	T(DEC(dx));	// 11740 dec     dx ;~ 01A2:5431
cs=0x1a2;eip=0x005432; 	S(IN(al, dx));	// 11741 in      al, dx ;~ 01A2:5432
cs=0x1a2;eip=0x005433; 	T(INC(dx));	// 11742 inc     dx ;~ 01A2:5433
loc_15434:
	// 5082 
cs=0x1a2;eip=0x005434; 	T(DEC(cl));	// 11745 dec     cl ;~ 01A2:5434
cs=0x1a2;eip=0x005436; 	J(JNZ(loc_15428));	// 11746 jnz     short loc_15428 ;~ 01A2:5436
cs=0x1a2;eip=0x005438; 	J(RETN(0));	// 11747 retn ;~ 01A2:5438
loc_15439:
	// 5083 
cs=0x1a2;eip=0x005439; 	T(DEC(dx));	// 11751 dec     dx ;~ 01A2:5439
cs=0x1a2;eip=0x00543a; 	T(MOV(al, ah));	// 11752 mov     al, ah ;~ 01A2:543A
cs=0x1a2;eip=0x00543c; 	S(OUT(dx, al));	// 11753 out     dx, al ;~ 01A2:543C
cs=0x1a2;eip=0x00543d; 	X(SUB(byte_24678, al));	// 11754 sub     byte_24678, al ;~ 01A2:543D
locret_15441:
	// 5084 
cs=0x1a2;eip=0x005441; 	J(RETN(0));	// 11757 retn ;~ 01A2:5441

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_midi_15413: 	goto _midi_15413;
        case m2c::kloc_15421: 	goto loc_15421;
        case m2c::kloc_15428: 	goto loc_15428;
        case m2c::kloc_15434: 	goto loc_15434;
        case m2c::kloc_15439: 	goto loc_15439;
        case m2c::klocret_15441: 	goto locret_15441;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _midi_15442(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _midi_15442:
    _begin:
cs=0x1a2;eip=0x005442; 	T(MOV(dx, word_2465c));	// 11766 mov     dx, word_2465C ;~ 01A2:5442
cs=0x1a2;eip=0x005446; 	T(INC(dx));	// 11767 inc     dx ;~ 01A2:5446
loc_15447:
	// 5085 
cs=0x1a2;eip=0x005447; 	S(IN(al, dx));	// 11770 in      al, dx ;~ 01A2:5447
cs=0x1a2;eip=0x005448; 	T(DEC(cx));	// 11771 dec     cx ;~ 01A2:5448
cs=0x1a2;eip=0x005449; 	J(JNZ(loc_15447));	// 11772 jnz     short loc_15447 ;~ 01A2:5449
cs=0x1a2;eip=0x00544b; 	J(RETN(0));	// 11773 retn ;~ 01A2:544B

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_midi_15442: 	goto _midi_15442;
        case m2c::kloc_15447: 	goto loc_15447;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _midi_154da(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _midi_154da:
    _begin:
cs=0x1a2;eip=0x0054da; 	T(MOV(ah, *(raddr(ds,bx+0x18))));	// 11871 mov     ah, [bx+18h] ;~ 01A2:54DA
cs=0x1a2;eip=0x0054dd; 	J(RETN(0));	// 11872 retn ;~ 01A2:54DD

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_midi_154da: 	goto _midi_154da;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _midi_154de(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _midi_154de:
    _begin:
cs=0x1a2;eip=0x0054de; 	T(MOV(al, *(raddr(ds,bx+0x35))));	// 11881 mov     al, [bx+35h] ;~ 01A2:54DE
cs=0x1a2;eip=0x0054e1; 	T(MOV(dl, al));	// 11882 mov     dl, al ;~ 01A2:54E1
cs=0x1a2;eip=0x0054e3; 	T(AND(dl, 0x0F));	// 11883 and     dl, 0Fh ;~ 01A2:54E3
cs=0x1a2;eip=0x0054e6; 	T(DEC(dl));	// 11884 dec     dl ;~ 01A2:54E6
cs=0x1a2;eip=0x0054e8; 	T(SHR(al, 4));	// 11885 shr     al, 4 ;~ 01A2:54E8
cs=0x1a2;eip=0x0054eb; 	T(MOV(ah, 0x0C));	// 11886 mov     ah, 0Ch ;~ 01A2:54EB
cs=0x1a2;eip=0x0054ed; 	T(MUL1_1(ah));	// 11887 mul     ah ;~ 01A2:54ED
cs=0x1a2;eip=0x0054ef; 	T(ADD(al, dl));	// 11888 add     al, dl ;~ 01A2:54EF
cs=0x1a2;eip=0x0054f1; 	T(MOV(ah, al));	// 11889 mov     ah, al ;~ 01A2:54F1
cs=0x1a2;eip=0x0054f3; 	J(RETN(0));	// 11890 retn ;~ 01A2:54F3

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_midi_154de: 	goto _midi_154de;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_154f4(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_154f4:
    _begin:
cs=0x1a2;eip=0x0054f4; 	T(MOV(ax, word_245e4));	// 11899 mov     ax, word_245E4 ;~ 01A2:54F4
cs=0x1a2;eip=0x0054f7; 	T(SHR(ax, 4));	// 11900 shr     ax, 4 ;~ 01A2:54F7
cs=0x1a2;eip=0x0054fa; 	X(MOV(byte_24683, al));	// 11901 mov     byte_24683, al ;~ 01A2:54FA
cs=0x1a2;eip=0x0054fd; 	X(PUSH(bx));	// 11902 push    bx ;~ 01A2:54FD
cs=0x1a2;eip=0x0054fe; 	X(PUSH(si));	// 11903 push    si ;~ 01A2:54FE
cs=0x1a2;eip=0x0054ff; 	T(MOV(bx, *(dw*)(raddr(ds,si+0x26))));	// 11904 mov     bx, [si+26h] ;~ 01A2:54FF
cs=0x1a2;eip=0x005502; 	T(MOV(eax, *(dd*)(raddr(ds,si+4))));	// 11905 mov     eax, [si+4] ;~ 01A2:5502
cs=0x1a2;eip=0x005506; 	T(SHR(eax, 0x16));	// 11906 shr     eax, 16h ;~ 01A2:5506
cs=0x1a2;eip=0x00550a; 	T(ADD(bx, ax));	// 11907 add     bx, ax ;~ 01A2:550A
cs=0x1a2;eip=0x00550c; 	J(CALL(_ems_mapmem,0));	// 11908 call    _ems_mapmem ;~ 01A2:550C
cs=0x1a2;eip=0x00550f; 	X(POP(si));	// 11909 pop     si ;~ 01A2:550F
cs=0x1a2;eip=0x005510; 	X(POP(bx));	// 11910 pop     bx ;~ 01A2:5510
cs=0x1a2;eip=0x005511; 	T(MOV(eax, *(dd*)(raddr(ds,si+4))));	// 11911 mov     eax, [si+4] ;~ 01A2:5511
cs=0x1a2;eip=0x005515; 	T(SHR(eax, 0x0C));	// 11912 shr     eax, 0Ch ;~ 01A2:5515
cs=0x1a2;eip=0x005519; 	T(CMP(*(dw*)(raddr(ds,si+0x26)), 0x0FFFF));	// 11913 cmp     word ptr [si+26h], 0FFFFh ;~ 01A2:5519
cs=0x1a2;eip=0x00551d; 	J(JZ(loc_15525));	// 11914 jz      short loc_15525 ;~ 01A2:551D
cs=0x1a2;eip=0x00551f; 	T(AND(eax, 0x3FF));	// 11915 and     eax, 3FFh ;~ 01A2:551F
loc_15525:
	// 5090 
cs=0x1a2;eip=0x005525; 	T(ADD(ax, *(dw*)(raddr(ds,si+0x24))));	// 11918 add     ax, [si+24h] ;~ 01A2:5525
cs=0x1a2;eip=0x005528; 	T(MOV(es, ax));	// 11919 mov     es, ax ;~ 01A2:5528
cs=0x1a2;eip=0x00552a; 	T(MOVZX(ebx, *(raddr(ds,si+0x23))));	// 11920 movzx   ebx, byte ptr [si+23h] ;~ 01A2:552A
cs=0x1a2;eip=0x00552f; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x36))));	// 11921 mov     ax, [si+36h] ;~ 01A2:552F
cs=0x1a2;eip=0x005532; 	X(MOV(word_24614, ax));	// 11922 mov     word_24614, ax ;~ 01A2:5532
cs=0x1a2;eip=0x005535; 	X(MOV(byte_24616, 0));	// 11923 mov     byte_24616, 0 ;~ 01A2:5535
cs=0x1a2;eip=0x00553a; 	T(TEST(_flag_playsetttings, 0x10));	// 11924 test    _flag_playsetttings, 10h ;~ 01A2:553A
cs=0x1a2;eip=0x00553f; 	J(JZ(_lc_inerpol_disabld));	// 11925 jz      short _lc_inerpol_disabld ;~ 01A2:553F
cs=0x1a2;eip=0x005541; 	T(CMP(al, ah));	// 11926 cmp     al, ah ;~ 01A2:5541
cs=0x1a2;eip=0x005543; 	T(SETNZ(ah));	// 11927 setnz   ah              ; dosbox:  setnz sp ;~ 01A2:5543
cs=0x1a2;eip=0x005546; 	X(MOV(byte_24616, ah));	// 11928 mov     byte_24616, ah ;~ 01A2:5546
cs=0x1a2;eip=0x00554a; 	T(MOVZX(ebx, al));	// 11929 movzx   ebx, al ;~ 01A2:554A
_lc_inerpol_disabld:
	// 5091 
cs=0x1a2;eip=0x00554e; 	T(SHL(ebx, 9));	// 11932 shl     ebx, 9 ;~ 01A2:554E
cs=0x1a2;eip=0x005552; 	T(ADD(bx, offset(seg003,_vlm_byte_table)));	// 11933 add     bx, offset _vlm_byte_table ;~ 01A2:5552
cs=0x1a2;eip=0x005556; 	T(MOVZX(ebp, *(dw*)(raddr(ds,si+0x20))));	// 11934 movzx   ebp, word ptr [si+20h] ;~ 01A2:5556
cs=0x1a2;eip=0x00555b; 	T(MOV(ax, bp));	// 11935 mov     ax, bp ;~ 01A2:555B
cs=0x1a2;eip=0x00555d; 	T(MOV(ch, al));	// 11936 mov     ch, al ;~ 01A2:555D
cs=0x1a2;eip=0x00555f; 	T(SHR(ebp, 8));	// 11937 shr     ebp, 8 ;~ 01A2:555F
cs=0x1a2;eip=0x005563; 	T(MOV(esi, *(dd*)(raddr(ds,si+4))));	// 11938 mov     esi, [si+4] ;~ 01A2:5563
cs=0x1a2;eip=0x005567; 	T(MOV(ax, si));	// 11939 mov     ax, si ;~ 01A2:5567
cs=0x1a2;eip=0x005569; 	T(MOV(cl, al));	// 11940 mov     cl, al ;~ 01A2:5569
cs=0x1a2;eip=0x00556b; 	T(AND(esi, 0x0FFF));	// 11941 and     esi, 0FFFh ;~ 01A2:556B
cs=0x1a2;eip=0x005572; 	T(SHR(esi, 8));	// 11942 shr     esi, 8 ;~ 01A2:5572
cs=0x1a2;eip=0x005576; 	J(RETN(0));	// 11943 retn ;~ 01A2:5576

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_lc_inerpol_disabld: 	goto _lc_inerpol_disabld;
        case m2c::kloc_15525: 	goto loc_15525;
        case m2c::ksub_154f4: 	goto sub_154f4;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group25(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group25:
    _begin:
sub_15577:
	// 11950 
cs=0x1a2;eip=0x005577; 	T(TEST(*(raddr(ds,si+0x17)), 1));	// 11970 test    byte ptr [si+17h], 1 ;~ 01A2:5577
cs=0x1a2;eip=0x00557b; 	J(JZ(locret_157bc));	// 11971 jz      locret_157BC ;~ 01A2:557B
cs=0x1a2;eip=0x00557f; 	X(PUSH(si));	// 11972 push    si ;~ 01A2:557F
cs=0x1a2;eip=0x005580; 	J(CALL(sub_154f4,0));	// 11973 call    sub_154F4 ;~ 01A2:5580
cs=0x1a2;eip=0x005583; 	T(TEST(_flag_playsetttings, 0x10));	// 11974 test    _flag_playsetttings, 10h ;~ 01A2:5583
cs=0x1a2;eip=0x005588; 	J(JNZ(loc_157f2));	// 11975 jnz     loc_157F2 ;~ 01A2:5588
cs=0x1a2;eip=0x00558c; 	T(CMP(byte_24625, 1));	// 11976 cmp     byte_24625, 1 ;~ 01A2:558C
cs=0x1a2;eip=0x005591; 	J(JZ(loc_15e48));	// 11977 jz      loc_15E48 ;~ 01A2:5591
cs=0x1a2;eip=0x005595; 	T(XOR(edx, edx));	// 11978 xor     edx, edx ;~ 01A2:5595
cs=0x1a2;eip=0x005598; 	T(MOV(ax, word_245e4));	// 11979 mov     ax, word_245E4 ;~ 01A2:5598
cs=0x1a2;eip=0x00559b; 	T(AND(eax, 0x0F));	// 11980 and     eax, 0Fh ;~ 01A2:559B
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00559f; __disp=*(dw*)(((db*)&_offs_noninterp)+eax*2);
	J(return __dispatch_call(__disp, _state););	// 11981 jmp     cs:_offs_noninterp[eax*2] ;~ 01A2:559F
loc_155a8:
	// 5092 
cs=0x1a2;eip=0x0055a8; 	T(MOV(dl, *(raddr(es,si))));	// 11986 mov     dl, es:[si] ;~ 01A2:55A8
cs=0x1a2;eip=0x0055ab; 	T(ADD(cl, ch));	// 11987 add     cl, ch ;~ 01A2:55AB
cs=0x1a2;eip=0x0055ad; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 11988 mov     ax, [ebx+edx*2] ;~ 01A2:55AD
cs=0x1a2;eip=0x0055b1; 	T(ADC(si, bp));	// 11989 adc     si, bp ;~ 01A2:55B1
cs=0x1a2;eip=0x0055b3; 	X(ADD(*(dw*)(raddr(ds,di)), ax));	// 11990 add     [di], ax ;~ 01A2:55B3
cs=0x1a2;eip=0x0055b5; 	T(ADD(di, 8));	// 11991 add     di, 8 ;~ 01A2:55B5
loc_155b8:
	// 5093 
cs=0x1a2;eip=0x0055b8; 	T(MOV(dl, *(raddr(es,si))));	// 11995 mov     dl, es:[si] ;~ 01A2:55B8
cs=0x1a2;eip=0x0055bb; 	T(ADD(cl, ch));	// 11996 add     cl, ch ;~ 01A2:55BB
cs=0x1a2;eip=0x0055bd; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 11997 mov     ax, [ebx+edx*2] ;~ 01A2:55BD
cs=0x1a2;eip=0x0055c1; 	T(ADC(si, bp));	// 11998 adc     si, bp ;~ 01A2:55C1
cs=0x1a2;eip=0x0055c3; 	X(ADD(*(dw*)(raddr(ds,di)), ax));	// 11999 add     [di], ax ;~ 01A2:55C3
cs=0x1a2;eip=0x0055c5; 	T(ADD(di, 8));	// 12000 add     di, 8 ;~ 01A2:55C5
loc_155c8:
	// 5094 
cs=0x1a2;eip=0x0055c8; 	T(MOV(dl, *(raddr(es,si))));	// 12004 mov     dl, es:[si] ;~ 01A2:55C8
cs=0x1a2;eip=0x0055cb; 	T(ADD(cl, ch));	// 12005 add     cl, ch ;~ 01A2:55CB
cs=0x1a2;eip=0x0055cd; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12006 mov     ax, [ebx+edx*2] ;~ 01A2:55CD
cs=0x1a2;eip=0x0055d1; 	T(ADC(si, bp));	// 12007 adc     si, bp ;~ 01A2:55D1
cs=0x1a2;eip=0x0055d3; 	X(ADD(*(dw*)(raddr(ds,di)), ax));	// 12008 add     [di], ax ;~ 01A2:55D3
cs=0x1a2;eip=0x0055d5; 	T(ADD(di, 8));	// 12009 add     di, 8 ;~ 01A2:55D5
loc_155d8:
	// 5095 
cs=0x1a2;eip=0x0055d8; 	T(MOV(dl, *(raddr(es,si))));	// 12013 mov     dl, es:[si] ;~ 01A2:55D8
cs=0x1a2;eip=0x0055db; 	T(ADD(cl, ch));	// 12014 add     cl, ch ;~ 01A2:55DB
cs=0x1a2;eip=0x0055dd; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12015 mov     ax, [ebx+edx*2] ;~ 01A2:55DD
cs=0x1a2;eip=0x0055e1; 	T(ADC(si, bp));	// 12016 adc     si, bp ;~ 01A2:55E1
cs=0x1a2;eip=0x0055e3; 	X(ADD(*(dw*)(raddr(ds,di)), ax));	// 12017 add     [di], ax ;~ 01A2:55E3
cs=0x1a2;eip=0x0055e5; 	T(ADD(di, 8));	// 12018 add     di, 8 ;~ 01A2:55E5
loc_155e8:
	// 5096 
cs=0x1a2;eip=0x0055e8; 	T(MOV(dl, *(raddr(es,si))));	// 12022 mov     dl, es:[si] ;~ 01A2:55E8
cs=0x1a2;eip=0x0055eb; 	T(ADD(cl, ch));	// 12023 add     cl, ch ;~ 01A2:55EB
cs=0x1a2;eip=0x0055ed; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12024 mov     ax, [ebx+edx*2] ;~ 01A2:55ED
cs=0x1a2;eip=0x0055f1; 	T(ADC(si, bp));	// 12025 adc     si, bp ;~ 01A2:55F1
cs=0x1a2;eip=0x0055f3; 	X(ADD(*(dw*)(raddr(ds,di)), ax));	// 12026 add     [di], ax ;~ 01A2:55F3
cs=0x1a2;eip=0x0055f5; 	T(ADD(di, 8));	// 12027 add     di, 8 ;~ 01A2:55F5
loc_155f8:
	// 5097 
cs=0x1a2;eip=0x0055f8; 	T(MOV(dl, *(raddr(es,si))));	// 12031 mov     dl, es:[si] ;~ 01A2:55F8
cs=0x1a2;eip=0x0055fb; 	T(ADD(cl, ch));	// 12032 add     cl, ch ;~ 01A2:55FB
cs=0x1a2;eip=0x0055fd; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12033 mov     ax, [ebx+edx*2] ;~ 01A2:55FD
cs=0x1a2;eip=0x005601; 	T(ADC(si, bp));	// 12034 adc     si, bp ;~ 01A2:5601
cs=0x1a2;eip=0x005603; 	X(ADD(*(dw*)(raddr(ds,di)), ax));	// 12035 add     [di], ax ;~ 01A2:5603
cs=0x1a2;eip=0x005605; 	T(ADD(di, 8));	// 12036 add     di, 8 ;~ 01A2:5605
loc_15608:
	// 5098 
cs=0x1a2;eip=0x005608; 	T(MOV(dl, *(raddr(es,si))));	// 12040 mov     dl, es:[si] ;~ 01A2:5608
cs=0x1a2;eip=0x00560b; 	T(ADD(cl, ch));	// 12041 add     cl, ch ;~ 01A2:560B
cs=0x1a2;eip=0x00560d; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12042 mov     ax, [ebx+edx*2] ;~ 01A2:560D
cs=0x1a2;eip=0x005611; 	T(ADC(si, bp));	// 12043 adc     si, bp ;~ 01A2:5611
cs=0x1a2;eip=0x005613; 	X(ADD(*(dw*)(raddr(ds,di)), ax));	// 12044 add     [di], ax ;~ 01A2:5613
cs=0x1a2;eip=0x005615; 	T(ADD(di, 8));	// 12045 add     di, 8 ;~ 01A2:5615
loc_15618:
	// 5099 
cs=0x1a2;eip=0x005618; 	T(MOV(dl, *(raddr(es,si))));	// 12049 mov     dl, es:[si] ;~ 01A2:5618
cs=0x1a2;eip=0x00561b; 	T(ADD(cl, ch));	// 12050 add     cl, ch ;~ 01A2:561B
cs=0x1a2;eip=0x00561d; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12051 mov     ax, [ebx+edx*2] ;~ 01A2:561D
cs=0x1a2;eip=0x005621; 	T(ADC(si, bp));	// 12052 adc     si, bp ;~ 01A2:5621
cs=0x1a2;eip=0x005623; 	X(ADD(*(dw*)(raddr(ds,di)), ax));	// 12053 add     [di], ax ;~ 01A2:5623
cs=0x1a2;eip=0x005625; 	T(ADD(di, 8));	// 12054 add     di, 8 ;~ 01A2:5625
loc_15628:
	// 5100 
cs=0x1a2;eip=0x005628; 	T(MOV(dl, *(raddr(es,si))));	// 12058 mov     dl, es:[si] ;~ 01A2:5628
cs=0x1a2;eip=0x00562b; 	T(ADD(cl, ch));	// 12059 add     cl, ch ;~ 01A2:562B
cs=0x1a2;eip=0x00562d; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12060 mov     ax, [ebx+edx*2] ;~ 01A2:562D
cs=0x1a2;eip=0x005631; 	T(ADC(si, bp));	// 12061 adc     si, bp ;~ 01A2:5631
cs=0x1a2;eip=0x005633; 	X(ADD(*(dw*)(raddr(ds,di)), ax));	// 12062 add     [di], ax ;~ 01A2:5633
cs=0x1a2;eip=0x005635; 	T(ADD(di, 8));	// 12063 add     di, 8 ;~ 01A2:5635
loc_15638:
	// 5101 
cs=0x1a2;eip=0x005638; 	T(MOV(dl, *(raddr(es,si))));	// 12067 mov     dl, es:[si] ;~ 01A2:5638
cs=0x1a2;eip=0x00563b; 	T(ADD(cl, ch));	// 12068 add     cl, ch ;~ 01A2:563B
cs=0x1a2;eip=0x00563d; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12069 mov     ax, [ebx+edx*2] ;~ 01A2:563D
cs=0x1a2;eip=0x005641; 	T(ADC(si, bp));	// 12070 adc     si, bp ;~ 01A2:5641
cs=0x1a2;eip=0x005643; 	X(ADD(*(dw*)(raddr(ds,di)), ax));	// 12071 add     [di], ax ;~ 01A2:5643
cs=0x1a2;eip=0x005645; 	T(ADD(di, 8));	// 12072 add     di, 8 ;~ 01A2:5645
loc_15648:
	// 5102 
cs=0x1a2;eip=0x005648; 	T(MOV(dl, *(raddr(es,si))));	// 12076 mov     dl, es:[si] ;~ 01A2:5648
cs=0x1a2;eip=0x00564b; 	T(ADD(cl, ch));	// 12077 add     cl, ch ;~ 01A2:564B
cs=0x1a2;eip=0x00564d; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12078 mov     ax, [ebx+edx*2] ;~ 01A2:564D
cs=0x1a2;eip=0x005651; 	T(ADC(si, bp));	// 12079 adc     si, bp ;~ 01A2:5651
cs=0x1a2;eip=0x005653; 	X(ADD(*(dw*)(raddr(ds,di)), ax));	// 12080 add     [di], ax ;~ 01A2:5653
cs=0x1a2;eip=0x005655; 	T(ADD(di, 8));	// 12081 add     di, 8 ;~ 01A2:5655
loc_15658:
	// 5103 
cs=0x1a2;eip=0x005658; 	T(MOV(dl, *(raddr(es,si))));	// 12085 mov     dl, es:[si] ;~ 01A2:5658
cs=0x1a2;eip=0x00565b; 	T(ADD(cl, ch));	// 12086 add     cl, ch ;~ 01A2:565B
cs=0x1a2;eip=0x00565d; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12087 mov     ax, [ebx+edx*2] ;~ 01A2:565D
cs=0x1a2;eip=0x005661; 	T(ADC(si, bp));	// 12088 adc     si, bp ;~ 01A2:5661
cs=0x1a2;eip=0x005663; 	X(ADD(*(dw*)(raddr(ds,di)), ax));	// 12089 add     [di], ax ;~ 01A2:5663
cs=0x1a2;eip=0x005665; 	T(ADD(di, 8));	// 12090 add     di, 8 ;~ 01A2:5665
loc_15668:
	// 5104 
cs=0x1a2;eip=0x005668; 	T(MOV(dl, *(raddr(es,si))));	// 12094 mov     dl, es:[si] ;~ 01A2:5668
cs=0x1a2;eip=0x00566b; 	T(ADD(cl, ch));	// 12095 add     cl, ch ;~ 01A2:566B
cs=0x1a2;eip=0x00566d; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12096 mov     ax, [ebx+edx*2] ;~ 01A2:566D
cs=0x1a2;eip=0x005671; 	T(ADC(si, bp));	// 12097 adc     si, bp ;~ 01A2:5671
cs=0x1a2;eip=0x005673; 	X(ADD(*(dw*)(raddr(ds,di)), ax));	// 12098 add     [di], ax ;~ 01A2:5673
cs=0x1a2;eip=0x005675; 	T(ADD(di, 8));	// 12099 add     di, 8 ;~ 01A2:5675
loc_15678:
	// 5105 
cs=0x1a2;eip=0x005678; 	T(MOV(dl, *(raddr(es,si))));	// 12103 mov     dl, es:[si] ;~ 01A2:5678
cs=0x1a2;eip=0x00567b; 	T(ADD(cl, ch));	// 12104 add     cl, ch ;~ 01A2:567B
cs=0x1a2;eip=0x00567d; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12105 mov     ax, [ebx+edx*2] ;~ 01A2:567D
cs=0x1a2;eip=0x005681; 	T(ADC(si, bp));	// 12106 adc     si, bp ;~ 01A2:5681
cs=0x1a2;eip=0x005683; 	X(ADD(*(dw*)(raddr(ds,di)), ax));	// 12107 add     [di], ax ;~ 01A2:5683
cs=0x1a2;eip=0x005685; 	T(ADD(di, 8));	// 12108 add     di, 8 ;~ 01A2:5685
loc_15688:
	// 5106 
cs=0x1a2;eip=0x005688; 	T(MOV(dl, *(raddr(es,si))));	// 12112 mov     dl, es:[si] ;~ 01A2:5688
cs=0x1a2;eip=0x00568b; 	T(ADD(cl, ch));	// 12113 add     cl, ch ;~ 01A2:568B
cs=0x1a2;eip=0x00568d; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12114 mov     ax, [ebx+edx*2] ;~ 01A2:568D
cs=0x1a2;eip=0x005691; 	T(ADC(si, bp));	// 12115 adc     si, bp ;~ 01A2:5691
cs=0x1a2;eip=0x005693; 	X(ADD(*(dw*)(raddr(ds,di)), ax));	// 12116 add     [di], ax ;~ 01A2:5693
cs=0x1a2;eip=0x005695; 	T(ADD(di, 8));	// 12117 add     di, 8 ;~ 01A2:5695
loc_15698:
	// 5107 
cs=0x1a2;eip=0x005698; 	T(CMP(byte_24683, 0));	// 12121 cmp     byte_24683, 0 ;~ 01A2:5698
cs=0x1a2;eip=0x00569d; 	J(JZ(loc_1578c));	// 12122 jz      loc_1578C ;~ 01A2:569D
loc_156a1:
	// 5108 
cs=0x1a2;eip=0x0056a1; 	T(MOV(dl, *(raddr(es,si))));	// 12125 mov     dl, es:[si] ;~ 01A2:56A1
cs=0x1a2;eip=0x0056a4; 	T(ADD(cl, ch));	// 12126 add     cl, ch ;~ 01A2:56A4
cs=0x1a2;eip=0x0056a6; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12127 mov     ax, [ebx+edx*2] ;~ 01A2:56A6
cs=0x1a2;eip=0x0056aa; 	T(ADC(si, bp));	// 12128 adc     si, bp ;~ 01A2:56AA
cs=0x1a2;eip=0x0056ac; 	X(ADD(*(dw*)(raddr(ds,di)), ax));	// 12129 add     [di], ax ;~ 01A2:56AC
cs=0x1a2;eip=0x0056ae; 	T(MOV(dl, *(raddr(es,si))));	// 12130 mov     dl, es:[si] ;~ 01A2:56AE
cs=0x1a2;eip=0x0056b1; 	T(ADD(cl, ch));	// 12131 add     cl, ch ;~ 01A2:56B1
cs=0x1a2;eip=0x0056b3; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12132 mov     ax, [ebx+edx*2] ;~ 01A2:56B3
cs=0x1a2;eip=0x0056b7; 	T(ADC(si, bp));	// 12133 adc     si, bp ;~ 01A2:56B7
cs=0x1a2;eip=0x0056b9; 	X(ADD(*(dw*)(raddr(ds,di+8)), ax));	// 12134 add     [di+8], ax ;~ 01A2:56B9
cs=0x1a2;eip=0x0056bc; 	T(MOV(dl, *(raddr(es,si))));	// 12135 mov     dl, es:[si] ;~ 01A2:56BC
cs=0x1a2;eip=0x0056bf; 	T(ADD(cl, ch));	// 12136 add     cl, ch ;~ 01A2:56BF
cs=0x1a2;eip=0x0056c1; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12137 mov     ax, [ebx+edx*2] ;~ 01A2:56C1
cs=0x1a2;eip=0x0056c5; 	T(ADC(si, bp));	// 12138 adc     si, bp ;~ 01A2:56C5
cs=0x1a2;eip=0x0056c7; 	X(ADD(*(dw*)(raddr(ds,di+0x10)), ax));	// 12139 add     [di+10h], ax ;~ 01A2:56C7
cs=0x1a2;eip=0x0056ca; 	T(MOV(dl, *(raddr(es,si))));	// 12140 mov     dl, es:[si] ;~ 01A2:56CA
cs=0x1a2;eip=0x0056cd; 	T(ADD(cl, ch));	// 12141 add     cl, ch ;~ 01A2:56CD
cs=0x1a2;eip=0x0056cf; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12142 mov     ax, [ebx+edx*2] ;~ 01A2:56CF
cs=0x1a2;eip=0x0056d3; 	T(ADC(si, bp));	// 12143 adc     si, bp ;~ 01A2:56D3
cs=0x1a2;eip=0x0056d5; 	X(ADD(*(dw*)(raddr(ds,di+0x18)), ax));	// 12144 add     [di+18h], ax ;~ 01A2:56D5
cs=0x1a2;eip=0x0056d8; 	T(MOV(dl, *(raddr(es,si))));	// 12145 mov     dl, es:[si] ;~ 01A2:56D8
cs=0x1a2;eip=0x0056db; 	T(ADD(cl, ch));	// 12146 add     cl, ch ;~ 01A2:56DB
cs=0x1a2;eip=0x0056dd; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12147 mov     ax, [ebx+edx*2] ;~ 01A2:56DD
cs=0x1a2;eip=0x0056e1; 	T(ADC(si, bp));	// 12148 adc     si, bp ;~ 01A2:56E1
cs=0x1a2;eip=0x0056e3; 	X(ADD(*(dw*)(raddr(ds,di+0x20)), ax));	// 12149 add     [di+20h], ax ;~ 01A2:56E3
cs=0x1a2;eip=0x0056e6; 	T(MOV(dl, *(raddr(es,si))));	// 12150 mov     dl, es:[si] ;~ 01A2:56E6
cs=0x1a2;eip=0x0056e9; 	T(ADD(cl, ch));	// 12151 add     cl, ch ;~ 01A2:56E9
cs=0x1a2;eip=0x0056eb; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12152 mov     ax, [ebx+edx*2] ;~ 01A2:56EB
cs=0x1a2;eip=0x0056ef; 	T(ADC(si, bp));	// 12153 adc     si, bp ;~ 01A2:56EF
cs=0x1a2;eip=0x0056f1; 	X(ADD(*(dw*)(raddr(ds,di+0x28)), ax));	// 12154 add     [di+28h], ax ;~ 01A2:56F1
cs=0x1a2;eip=0x0056f4; 	T(MOV(dl, *(raddr(es,si))));	// 12155 mov     dl, es:[si] ;~ 01A2:56F4
cs=0x1a2;eip=0x0056f7; 	T(ADD(cl, ch));	// 12156 add     cl, ch ;~ 01A2:56F7
cs=0x1a2;eip=0x0056f9; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12157 mov     ax, [ebx+edx*2] ;~ 01A2:56F9
cs=0x1a2;eip=0x0056fd; 	T(ADC(si, bp));	// 12158 adc     si, bp ;~ 01A2:56FD
cs=0x1a2;eip=0x0056ff; 	X(ADD(*(dw*)(raddr(ds,di+0x30)), ax));	// 12159 add     [di+30h], ax ;~ 01A2:56FF
cs=0x1a2;eip=0x005702; 	T(MOV(dl, *(raddr(es,si))));	// 12160 mov     dl, es:[si] ;~ 01A2:5702
cs=0x1a2;eip=0x005705; 	T(ADD(cl, ch));	// 12161 add     cl, ch ;~ 01A2:5705
cs=0x1a2;eip=0x005707; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12162 mov     ax, [ebx+edx*2] ;~ 01A2:5707
cs=0x1a2;eip=0x00570b; 	T(ADC(si, bp));	// 12163 adc     si, bp ;~ 01A2:570B
cs=0x1a2;eip=0x00570d; 	X(ADD(*(dw*)(raddr(ds,di+0x38)), ax));	// 12164 add     [di+38h], ax ;~ 01A2:570D
cs=0x1a2;eip=0x005710; 	T(MOV(dl, *(raddr(es,si))));	// 12165 mov     dl, es:[si] ;~ 01A2:5710
cs=0x1a2;eip=0x005713; 	T(ADD(cl, ch));	// 12166 add     cl, ch ;~ 01A2:5713
cs=0x1a2;eip=0x005715; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12167 mov     ax, [ebx+edx*2] ;~ 01A2:5715
cs=0x1a2;eip=0x005719; 	T(ADC(si, bp));	// 12168 adc     si, bp ;~ 01A2:5719
cs=0x1a2;eip=0x00571b; 	X(ADD(*(dw*)(raddr(ds,di+0x40)), ax));	// 12169 add     [di+40h], ax ;~ 01A2:571B
cs=0x1a2;eip=0x00571e; 	T(MOV(dl, *(raddr(es,si))));	// 12170 mov     dl, es:[si] ;~ 01A2:571E
cs=0x1a2;eip=0x005721; 	T(ADD(cl, ch));	// 12171 add     cl, ch ;~ 01A2:5721
cs=0x1a2;eip=0x005723; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12172 mov     ax, [ebx+edx*2] ;~ 01A2:5723
cs=0x1a2;eip=0x005727; 	T(ADC(si, bp));	// 12173 adc     si, bp ;~ 01A2:5727
cs=0x1a2;eip=0x005729; 	X(ADD(*(dw*)(raddr(ds,di+0x48)), ax));	// 12174 add     [di+48h], ax ;~ 01A2:5729
cs=0x1a2;eip=0x00572c; 	T(MOV(dl, *(raddr(es,si))));	// 12175 mov     dl, es:[si] ;~ 01A2:572C
cs=0x1a2;eip=0x00572f; 	T(ADD(cl, ch));	// 12176 add     cl, ch ;~ 01A2:572F
cs=0x1a2;eip=0x005731; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12177 mov     ax, [ebx+edx*2] ;~ 01A2:5731
cs=0x1a2;eip=0x005735; 	T(ADC(si, bp));	// 12178 adc     si, bp ;~ 01A2:5735
cs=0x1a2;eip=0x005737; 	X(ADD(*(dw*)(raddr(ds,di+0x50)), ax));	// 12179 add     [di+50h], ax ;~ 01A2:5737
cs=0x1a2;eip=0x00573a; 	T(MOV(dl, *(raddr(es,si))));	// 12180 mov     dl, es:[si] ;~ 01A2:573A
cs=0x1a2;eip=0x00573d; 	T(ADD(cl, ch));	// 12181 add     cl, ch ;~ 01A2:573D
cs=0x1a2;eip=0x00573f; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12182 mov     ax, [ebx+edx*2] ;~ 01A2:573F
cs=0x1a2;eip=0x005743; 	T(ADC(si, bp));	// 12183 adc     si, bp ;~ 01A2:5743
cs=0x1a2;eip=0x005745; 	X(ADD(*(dw*)(raddr(ds,di+0x58)), ax));	// 12184 add     [di+58h], ax ;~ 01A2:5745
cs=0x1a2;eip=0x005748; 	T(MOV(dl, *(raddr(es,si))));	// 12185 mov     dl, es:[si] ;~ 01A2:5748
cs=0x1a2;eip=0x00574b; 	T(ADD(cl, ch));	// 12186 add     cl, ch ;~ 01A2:574B
cs=0x1a2;eip=0x00574d; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12187 mov     ax, [ebx+edx*2] ;~ 01A2:574D
cs=0x1a2;eip=0x005751; 	T(ADC(si, bp));	// 12188 adc     si, bp ;~ 01A2:5751
cs=0x1a2;eip=0x005753; 	X(ADD(*(dw*)(raddr(ds,di+0x60)), ax));	// 12189 add     [di+60h], ax ;~ 01A2:5753
cs=0x1a2;eip=0x005756; 	T(MOV(dl, *(raddr(es,si))));	// 12190 mov     dl, es:[si] ;~ 01A2:5756
cs=0x1a2;eip=0x005759; 	T(ADD(cl, ch));	// 12191 add     cl, ch ;~ 01A2:5759
cs=0x1a2;eip=0x00575b; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12192 mov     ax, [ebx+edx*2] ;~ 01A2:575B
cs=0x1a2;eip=0x00575f; 	T(ADC(si, bp));	// 12193 adc     si, bp ;~ 01A2:575F
cs=0x1a2;eip=0x005761; 	X(ADD(*(dw*)(raddr(ds,di+0x68)), ax));	// 12194 add     [di+68h], ax ;~ 01A2:5761
cs=0x1a2;eip=0x005764; 	T(MOV(dl, *(raddr(es,si))));	// 12195 mov     dl, es:[si] ;~ 01A2:5764
cs=0x1a2;eip=0x005767; 	T(ADD(cl, ch));	// 12196 add     cl, ch ;~ 01A2:5767
cs=0x1a2;eip=0x005769; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12197 mov     ax, [ebx+edx*2] ;~ 01A2:5769
cs=0x1a2;eip=0x00576d; 	T(ADC(si, bp));	// 12198 adc     si, bp ;~ 01A2:576D
cs=0x1a2;eip=0x00576f; 	X(ADD(*(dw*)(raddr(ds,di+0x70)), ax));	// 12199 add     [di+70h], ax ;~ 01A2:576F
cs=0x1a2;eip=0x005772; 	T(MOV(dl, *(raddr(es,si))));	// 12200 mov     dl, es:[si] ;~ 01A2:5772
cs=0x1a2;eip=0x005775; 	T(ADD(cl, ch));	// 12201 add     cl, ch ;~ 01A2:5775
cs=0x1a2;eip=0x005777; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12202 mov     ax, [ebx+edx*2] ;~ 01A2:5777
cs=0x1a2;eip=0x00577b; 	T(ADC(si, bp));	// 12203 adc     si, bp ;~ 01A2:577B
cs=0x1a2;eip=0x00577d; 	X(ADD(*(dw*)(raddr(ds,di+0x78)), ax));	// 12204 add     [di+78h], ax ;~ 01A2:577D
cs=0x1a2;eip=0x005780; 	T(ADD(di, 0x80));	// 12205 add     di, 80h ; '€' ;~ 01A2:5780
cs=0x1a2;eip=0x005784; 	X(DEC(byte_24683));	// 12206 dec     byte_24683 ;~ 01A2:5784
cs=0x1a2;eip=0x005788; 	J(JNZ(loc_156a1));	// 12207 jnz     loc_156A1 ;~ 01A2:5788
loc_1578c:
	// 5109 
cs=0x1a2;eip=0x00578c; 	T(MOV(eax, esi));	// 12211 mov     eax, esi ;~ 01A2:578C
cs=0x1a2;eip=0x00578f; 	T(SHL(eax, 8));	// 12212 shl     eax, 8 ;~ 01A2:578F
cs=0x1a2;eip=0x005793; 	T(MOV(al, cl));	// 12213 mov     al, cl ;~ 01A2:5793
cs=0x1a2;eip=0x005795; 	X(POP(si));	// 12214 pop     si ;~ 01A2:5795
cs=0x1a2;eip=0x005796; 	T(MOV(cx, word_24614));	// 12215 mov     cx, word_24614 ;~ 01A2:5796
cs=0x1a2;eip=0x00579a; 	X(MOV(*(dw*)(raddr(ds,si+0x36)), cx));	// 12216 mov     [si+36h], cx ;~ 01A2:579A
cs=0x1a2;eip=0x00579d; 	X(MOV(*(raddr(ds,si+0x23)), ch));	// 12217 mov     [si+23h], ch ;~ 01A2:579D
cs=0x1a2;eip=0x0057a0; 	T(MOV(edx, *(dd*)(raddr(ds,si+4))));	// 12218 mov     edx, [si+4] ;~ 01A2:57A0
cs=0x1a2;eip=0x0057a4; 	T(AND(dx, 0x0F000));	// 12219 and     dx, 0F000h ;~ 01A2:57A4
cs=0x1a2;eip=0x0057a8; 	T(ADD(eax, edx));	// 12220 add     eax, edx ;~ 01A2:57A8
cs=0x1a2;eip=0x0057ab; 	T(MOV(edx, eax));	// 12221 mov     edx, eax ;~ 01A2:57AB
cs=0x1a2;eip=0x0057ae; 	T(SHR(edx, 8));	// 12222 shr     edx, 8 ;~ 01A2:57AE
cs=0x1a2;eip=0x0057b2; 	T(CMP(edx, *(dd*)(raddr(ds,si+0x48))));	// 12223 cmp     edx, [si+48h] ;~ 01A2:57B2
cs=0x1a2;eip=0x0057b6; 	J(JA(loc_157bd));	// 12224 ja      short loc_157BD ;~ 01A2:57B6
cs=0x1a2;eip=0x0057b8; 	X(MOV(*(dd*)(raddr(ds,si+4)), eax));	// 12225 mov     [si+4], eax ;~ 01A2:57B8
locret_157bc:
	// 5110 
cs=0x1a2;eip=0x0057bc; 	J(RETN(0));	// 12228 retn ;~ 01A2:57BC
loc_157bd:
	// 5111 
cs=0x1a2;eip=0x0057bd; 	T(MOV(edx, *(dd*)(raddr(ds,si+0x40))));	// 12232 mov     edx, [si+40h] ;~ 01A2:57BD
cs=0x1a2;eip=0x0057c1; 	T(SHL(edx, 8));	// 12233 shl     edx, 8 ;~ 01A2:57C1
cs=0x1a2;eip=0x0057c5; 	T(TEST(*(raddr(ds,si+0x19)), 8));	// 12234 test    byte ptr [si+19h], 8 ;~ 01A2:57C5
cs=0x1a2;eip=0x0057c9; 	J(JZ(loc_157e5));	// 12235 jz      short loc_157E5 ;~ 01A2:57C9
cs=0x1a2;eip=0x0057cb; 	T(MOV(ebx, *(dd*)(raddr(ds,si+0x44))));	// 12236 mov     ebx, [si+44h] ;~ 01A2:57CB
cs=0x1a2;eip=0x0057cf; 	T(SHL(ebx, 8));	// 12237 shl     ebx, 8 ;~ 01A2:57CF
loc_157d3:
	// 5112 
cs=0x1a2;eip=0x0057d3; 	T(SUB(eax, ebx));	// 12240 sub     eax, ebx ;~ 01A2:57D3
cs=0x1a2;eip=0x0057d6; 	J(JC(loc_157dd));	// 12241 jb      short loc_157DD ;~ 01A2:57D6
cs=0x1a2;eip=0x0057d8; 	T(CMP(eax, edx));	// 12242 cmp     eax, edx ;~ 01A2:57D8
cs=0x1a2;eip=0x0057db; 	J(JA(loc_157d3));	// 12243 ja      short loc_157D3 ;~ 01A2:57DB
loc_157dd:
	// 5113 
cs=0x1a2;eip=0x0057dd; 	T(ADD(eax, ebx));	// 12246 add     eax, ebx ;~ 01A2:57DD
cs=0x1a2;eip=0x0057e0; 	X(MOV(*(dd*)(raddr(ds,si+4)), eax));	// 12247 mov     [si+4], eax ;~ 01A2:57E0
cs=0x1a2;eip=0x0057e4; 	J(RETN(0));	// 12248 retn ;~ 01A2:57E4
loc_157e5:
	// 5114 
cs=0x1a2;eip=0x0057e5; 	X(MOV(*(dd*)(raddr(ds,si+4)), edx));	// 12252 mov     [si+4], edx ;~ 01A2:57E5
cs=0x1a2;eip=0x0057e9; 	X(AND(*(raddr(ds,si+0x17)), 0x0FE));	// 12253 and     byte ptr [si+17h], 0FEh ;~ 01A2:57E9
cs=0x1a2;eip=0x0057ed; 	X(MOV(*(raddr(ds,si+0x35)), 0));	// 12254 mov     byte ptr [si+35h], 0 ;~ 01A2:57ED
cs=0x1a2;eip=0x0057f1; 	J(RETN(0));	// 12255 retn ;~ 01A2:57F1
loc_157f2:
	// 5115 
cs=0x1a2;eip=0x0057f2; 	T(MOV(al, ch));	// 12259 mov     al, ch ;~ 01A2:57F2
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0057f4; 	T(CMP(al, *(&byte_158b4)));	// 12260 cmp     al, cs:byte_158B4 ;~ 01A2:57F4
cs=0x1a2;eip=0x0057f9; 	J(JZ(loc_15877));	// 12261 jz      short loc_15877 ;~ 01A2:57F9
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0057fb; 	X(MOV(*(&byte_158b4), al));	// 12262 mov     cs:byte_158B4, al ;~ 01A2:57FB
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0057ff; 	X(MOV(*(&byte_158e3), al));	// 12263 mov     cs:byte_158E3, al ;~ 01A2:57FF
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005803; 	X(MOV(*(&byte_15912), al));	// 12264 mov     cs:byte_15912, al ;~ 01A2:5803
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005807; 	X(MOV(*(&byte_15941), al));	// 12265 mov     cs:byte_15941, al ;~ 01A2:5807
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00580b; 	X(MOV(*(&byte_15970), al));	// 12266 mov     cs:byte_15970, al ;~ 01A2:580B
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00580f; 	X(MOV(*(&byte_1599f), al));	// 12267 mov     cs:byte_1599F, al ;~ 01A2:580F
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005813; 	X(MOV(*(&byte_159ce), al));	// 12268 mov     cs:byte_159CE, al ;~ 01A2:5813
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005817; 	X(MOV(*(&byte_159fd), al));	// 12269 mov     cs:byte_159FD, al ;~ 01A2:5817
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00581b; 	X(MOV(*(&byte_15a2c), al));	// 12270 mov     cs:byte_15A2C, al ;~ 01A2:581B
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00581f; 	X(MOV(*(&byte_15a5b), al));	// 12271 mov     cs:byte_15A5B, al ;~ 01A2:581F
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005823; 	X(MOV(*(&byte_15a8a), al));	// 12272 mov     cs:byte_15A8A, al ;~ 01A2:5823
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005827; 	X(MOV(*(&byte_15ab9), al));	// 12273 mov     cs:byte_15AB9, al ;~ 01A2:5827
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00582b; 	X(MOV(*(&byte_15ae8), al));	// 12274 mov     cs:byte_15AE8, al ;~ 01A2:582B
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00582f; 	X(MOV(*(&byte_15b17), al));	// 12275 mov     cs:byte_15B17, al ;~ 01A2:582F
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005833; 	X(MOV(*(&byte_15b46), al));	// 12276 mov     cs:byte_15B46, al ;~ 01A2:5833
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005837; 	X(MOV(*(&byte_15b81), al));	// 12277 mov     cs:byte_15B81, al ;~ 01A2:5837
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00583b; 	X(MOV(*(&byte_15bad), al));	// 12278 mov     cs:byte_15BAD, al ;~ 01A2:583B
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00583f; 	X(MOV(*(&byte_15bda), al));	// 12279 mov     cs:byte_15BDA, al ;~ 01A2:583F
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005843; 	X(MOV(*(&byte_15c07), al));	// 12280 mov     cs:byte_15C07, al ;~ 01A2:5843
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005847; 	X(MOV(*(&byte_15c34), al));	// 12281 mov     cs:byte_15C34, al ;~ 01A2:5847
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00584b; 	X(MOV(*(&byte_15c61), al));	// 12282 mov     cs:byte_15C61, al ;~ 01A2:584B
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00584f; 	X(MOV(*(&byte_15c8e), al));	// 12283 mov     cs:byte_15C8E, al ;~ 01A2:584F
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005853; 	X(MOV(*(&byte_15cbb), al));	// 12284 mov     cs:byte_15CBB, al ;~ 01A2:5853
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005857; 	X(MOV(*(&byte_15ce8), al));	// 12285 mov     cs:byte_15CE8, al ;~ 01A2:5857
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00585b; 	X(MOV(*(&byte_15d15), al));	// 12286 mov     cs:byte_15D15, al ;~ 01A2:585B
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00585f; 	X(MOV(*(&byte_15d42), al));	// 12287 mov     cs:byte_15D42, al ;~ 01A2:585F
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005863; 	X(MOV(*(&byte_15d6f), al));	// 12288 mov     cs:byte_15D6F, al ;~ 01A2:5863
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005867; 	X(MOV(*(&byte_15d9c), al));	// 12289 mov     cs:byte_15D9C, al ;~ 01A2:5867
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00586b; 	X(MOV(*(&byte_15dc9), al));	// 12290 mov     cs:byte_15DC9, al ;~ 01A2:586B
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00586f; 	X(MOV(*(&byte_15df6), al));	// 12291 mov     cs:byte_15DF6, al ;~ 01A2:586F
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005873; 	X(MOV(*(&byte_15e23), al));	// 12292 mov     cs:byte_15E23, al ;~ 01A2:5873
loc_15877:
	// 5116 
cs=0x1a2;eip=0x005877; 	T(AND(ecx, 0x0FF));	// 12295 and     ecx, 0FFh ;~ 01A2:5877
cs=0x1a2;eip=0x00587e; 	T(MOV(ax, word_245e4));	// 12296 mov     ax, word_245E4 ;~ 01A2:587E
cs=0x1a2;eip=0x005881; 	T(AND(eax, 0x0F));	// 12297 and     eax, 0Fh ;~ 01A2:5881
cs=0x1a2;eip=0x005885; 	T(XOR(edx, edx));	// 12298 xor     edx, edx ;~ 01A2:5885
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005888; __disp=*(dw*)(((db*)&_offs_interpol)+eax*2);
	J(return __dispatch_call(__disp, _state););	// 12299 jmp     cs:_offs_interpol[eax*2] ;~ 01A2:5888
loc_15891:
	// 5117 
cs=0x1a2;eip=0x005891; 	T(MOV(dl, *(raddr(es,si))));	// 12304 mov     dl, es:[si] ;~ 01A2:5891
cs=0x1a2;eip=0x005894; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12305 mov     ax, [ebx+edx*2] ;~ 01A2:5894
cs=0x1a2;eip=0x005898; 	T(MOV(dl, *(raddr(es,si+1))));	// 12306 mov     dl, es:[si+1] ;~ 01A2:5898
cs=0x1a2;eip=0x00589c; 	T(CWDE);	// 12307 cwde ;~ 01A2:589C
cs=0x1a2;eip=0x00589e; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12308 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:589E
cs=0x1a2;eip=0x0058a4; 	T(SUB(edx, eax));	// 12309 sub     edx, eax ;~ 01A2:58A4
cs=0x1a2;eip=0x0058a7; 	T(IMUL2_4(edx,ecx));	// 12310 imul    edx, ecx ;~ 01A2:58A7
cs=0x1a2;eip=0x0058ab; 	T(SAR(edx, 8));	// 12311 sar     edx, 8 ;~ 01A2:58AB
cs=0x1a2;eip=0x0058af; 	T(ADD(eax, edx));	// 12312 add     eax, edx ;~ 01A2:58AF
	S(JMP(seg000_58b5_proc));seg000_58b5_proc:
	// 12320 
cs=0x1a2;eip=0x0058b5; 	T(ADC(si, bp));	// 12320 adc     si, bp ;~ 01A2:58B5
cs=0x1a2;eip=0x0058b7; 	T(XOR(edx, edx));	// 12321 xor     edx, edx ;~ 01A2:58B7
cs=0x1a2;eip=0x0058ba; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 12322 add     [di], eax ;~ 01A2:58BA
cs=0x1a2;eip=0x0058bd; 	T(ADD(di, 8));	// 12323 add     di, 8 ;~ 01A2:58BD
loc_158c0:
	// 5118 
cs=0x1a2;eip=0x0058c0; 	T(MOV(dl, *(raddr(es,si))));	// 12328 mov     dl, es:[si] ;~ 01A2:58C0
cs=0x1a2;eip=0x0058c3; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12329 mov     ax, [ebx+edx*2] ;~ 01A2:58C3
cs=0x1a2;eip=0x0058c7; 	T(MOV(dl, *(raddr(es,si+1))));	// 12330 mov     dl, es:[si+1] ;~ 01A2:58C7
cs=0x1a2;eip=0x0058cb; 	T(CWDE);	// 12331 cwde ;~ 01A2:58CB
cs=0x1a2;eip=0x0058cd; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12332 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:58CD
cs=0x1a2;eip=0x0058d3; 	T(SUB(edx, eax));	// 12333 sub     edx, eax ;~ 01A2:58D3
cs=0x1a2;eip=0x0058d6; 	T(IMUL2_4(edx,ecx));	// 12334 imul    edx, ecx ;~ 01A2:58D6
cs=0x1a2;eip=0x0058da; 	T(SAR(edx, 8));	// 12335 sar     edx, 8 ;~ 01A2:58DA
cs=0x1a2;eip=0x0058de; 	T(ADD(eax, edx));	// 12336 add     eax, edx ;~ 01A2:58DE
cs=0x1a2;eip=0x0058e4; 	T(ADC(si, bp));	// 12342 adc     si, bp ;~ 01A2:58E4
cs=0x1a2;eip=0x0058e6; 	T(XOR(edx, edx));	// 12343 xor     edx, edx ;~ 01A2:58E6
cs=0x1a2;eip=0x0058e9; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 12344 add     [di], eax ;~ 01A2:58E9
cs=0x1a2;eip=0x0058ec; 	T(ADD(di, 8));	// 12345 add     di, 8 ;~ 01A2:58EC
loc_158ef:
	// 5119 
cs=0x1a2;eip=0x0058ef; 	T(MOV(dl, *(raddr(es,si))));	// 12350 mov     dl, es:[si] ;~ 01A2:58EF
cs=0x1a2;eip=0x0058f2; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12351 mov     ax, [ebx+edx*2] ;~ 01A2:58F2
cs=0x1a2;eip=0x0058f6; 	T(MOV(dl, *(raddr(es,si+1))));	// 12352 mov     dl, es:[si+1] ;~ 01A2:58F6
cs=0x1a2;eip=0x0058fa; 	T(CWDE);	// 12353 cwde ;~ 01A2:58FA
cs=0x1a2;eip=0x0058fc; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12354 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:58FC
cs=0x1a2;eip=0x005902; 	T(SUB(edx, eax));	// 12355 sub     edx, eax ;~ 01A2:5902
cs=0x1a2;eip=0x005905; 	T(IMUL2_4(edx,ecx));	// 12356 imul    edx, ecx ;~ 01A2:5905
cs=0x1a2;eip=0x005909; 	T(SAR(edx, 8));	// 12357 sar     edx, 8 ;~ 01A2:5909
cs=0x1a2;eip=0x00590d; 	T(ADD(eax, edx));	// 12358 add     eax, edx ;~ 01A2:590D
cs=0x1a2;eip=0x005913; 	T(ADC(si, bp));	// 12364 adc     si, bp ;~ 01A2:5913
cs=0x1a2;eip=0x005915; 	T(XOR(edx, edx));	// 12365 xor     edx, edx ;~ 01A2:5915
cs=0x1a2;eip=0x005918; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 12366 add     [di], eax ;~ 01A2:5918
cs=0x1a2;eip=0x00591b; 	T(ADD(di, 8));	// 12367 add     di, 8 ;~ 01A2:591B
loc_1591e:
	// 5120 
cs=0x1a2;eip=0x00591e; 	T(MOV(dl, *(raddr(es,si))));	// 12372 mov     dl, es:[si] ;~ 01A2:591E
cs=0x1a2;eip=0x005921; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12373 mov     ax, [ebx+edx*2] ;~ 01A2:5921
cs=0x1a2;eip=0x005925; 	T(MOV(dl, *(raddr(es,si+1))));	// 12374 mov     dl, es:[si+1] ;~ 01A2:5925
cs=0x1a2;eip=0x005929; 	T(CWDE);	// 12375 cwde ;~ 01A2:5929
cs=0x1a2;eip=0x00592b; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12376 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:592B
cs=0x1a2;eip=0x005931; 	T(SUB(edx, eax));	// 12377 sub     edx, eax ;~ 01A2:5931
cs=0x1a2;eip=0x005934; 	T(IMUL2_4(edx,ecx));	// 12378 imul    edx, ecx ;~ 01A2:5934
cs=0x1a2;eip=0x005938; 	T(SAR(edx, 8));	// 12379 sar     edx, 8 ;~ 01A2:5938
cs=0x1a2;eip=0x00593c; 	T(ADD(eax, edx));	// 12380 add     eax, edx ;~ 01A2:593C
cs=0x1a2;eip=0x005942; 	T(ADC(si, bp));	// 12386 adc     si, bp ;~ 01A2:5942
cs=0x1a2;eip=0x005944; 	T(XOR(edx, edx));	// 12387 xor     edx, edx ;~ 01A2:5944
cs=0x1a2;eip=0x005947; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 12388 add     [di], eax ;~ 01A2:5947
cs=0x1a2;eip=0x00594a; 	T(ADD(di, 8));	// 12389 add     di, 8 ;~ 01A2:594A
loc_1594d:
	// 5121 
cs=0x1a2;eip=0x00594d; 	T(MOV(dl, *(raddr(es,si))));	// 12394 mov     dl, es:[si] ;~ 01A2:594D
cs=0x1a2;eip=0x005950; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12395 mov     ax, [ebx+edx*2] ;~ 01A2:5950
cs=0x1a2;eip=0x005954; 	T(MOV(dl, *(raddr(es,si+1))));	// 12396 mov     dl, es:[si+1] ;~ 01A2:5954
cs=0x1a2;eip=0x005958; 	T(CWDE);	// 12397 cwde ;~ 01A2:5958
cs=0x1a2;eip=0x00595a; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12398 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:595A
cs=0x1a2;eip=0x005960; 	T(SUB(edx, eax));	// 12399 sub     edx, eax ;~ 01A2:5960
cs=0x1a2;eip=0x005963; 	T(IMUL2_4(edx,ecx));	// 12400 imul    edx, ecx ;~ 01A2:5963
cs=0x1a2;eip=0x005967; 	T(SAR(edx, 8));	// 12401 sar     edx, 8 ;~ 01A2:5967
cs=0x1a2;eip=0x00596b; 	T(ADD(eax, edx));	// 12402 add     eax, edx ;~ 01A2:596B
cs=0x1a2;eip=0x005971; 	T(ADC(si, bp));	// 12408 adc     si, bp ;~ 01A2:5971
cs=0x1a2;eip=0x005973; 	T(XOR(edx, edx));	// 12409 xor     edx, edx ;~ 01A2:5973
cs=0x1a2;eip=0x005976; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 12410 add     [di], eax ;~ 01A2:5976
cs=0x1a2;eip=0x005979; 	T(ADD(di, 8));	// 12411 add     di, 8 ;~ 01A2:5979
loc_1597c:
	// 5122 
cs=0x1a2;eip=0x00597c; 	T(MOV(dl, *(raddr(es,si))));	// 12416 mov     dl, es:[si] ;~ 01A2:597C
cs=0x1a2;eip=0x00597f; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12417 mov     ax, [ebx+edx*2] ;~ 01A2:597F
cs=0x1a2;eip=0x005983; 	T(MOV(dl, *(raddr(es,si+1))));	// 12418 mov     dl, es:[si+1] ;~ 01A2:5983
cs=0x1a2;eip=0x005987; 	T(CWDE);	// 12419 cwde ;~ 01A2:5987
cs=0x1a2;eip=0x005989; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12420 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:5989
cs=0x1a2;eip=0x00598f; 	T(SUB(edx, eax));	// 12421 sub     edx, eax ;~ 01A2:598F
cs=0x1a2;eip=0x005992; 	T(IMUL2_4(edx,ecx));	// 12422 imul    edx, ecx ;~ 01A2:5992
cs=0x1a2;eip=0x005996; 	T(SAR(edx, 8));	// 12423 sar     edx, 8 ;~ 01A2:5996
cs=0x1a2;eip=0x00599a; 	T(ADD(eax, edx));	// 12424 add     eax, edx ;~ 01A2:599A
cs=0x1a2;eip=0x0059a0; 	T(ADC(si, bp));	// 12430 adc     si, bp ;~ 01A2:59A0
cs=0x1a2;eip=0x0059a2; 	T(XOR(edx, edx));	// 12431 xor     edx, edx ;~ 01A2:59A2
cs=0x1a2;eip=0x0059a5; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 12432 add     [di], eax ;~ 01A2:59A5
cs=0x1a2;eip=0x0059a8; 	T(ADD(di, 8));	// 12433 add     di, 8 ;~ 01A2:59A8
loc_159ab:
	// 5123 
cs=0x1a2;eip=0x0059ab; 	T(MOV(dl, *(raddr(es,si))));	// 12438 mov     dl, es:[si] ;~ 01A2:59AB
cs=0x1a2;eip=0x0059ae; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12439 mov     ax, [ebx+edx*2] ;~ 01A2:59AE
cs=0x1a2;eip=0x0059b2; 	T(MOV(dl, *(raddr(es,si+1))));	// 12440 mov     dl, es:[si+1] ;~ 01A2:59B2
cs=0x1a2;eip=0x0059b6; 	T(CWDE);	// 12441 cwde ;~ 01A2:59B6
cs=0x1a2;eip=0x0059b8; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12442 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:59B8
cs=0x1a2;eip=0x0059be; 	T(SUB(edx, eax));	// 12443 sub     edx, eax ;~ 01A2:59BE
cs=0x1a2;eip=0x0059c1; 	T(IMUL2_4(edx,ecx));	// 12444 imul    edx, ecx ;~ 01A2:59C1
cs=0x1a2;eip=0x0059c5; 	T(SAR(edx, 8));	// 12445 sar     edx, 8 ;~ 01A2:59C5
cs=0x1a2;eip=0x0059c9; 	T(ADD(eax, edx));	// 12446 add     eax, edx ;~ 01A2:59C9
cs=0x1a2;eip=0x0059cf; 	T(ADC(si, bp));	// 12452 adc     si, bp ;~ 01A2:59CF
cs=0x1a2;eip=0x0059d1; 	T(XOR(edx, edx));	// 12453 xor     edx, edx ;~ 01A2:59D1
cs=0x1a2;eip=0x0059d4; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 12454 add     [di], eax ;~ 01A2:59D4
cs=0x1a2;eip=0x0059d7; 	T(ADD(di, 8));	// 12455 add     di, 8 ;~ 01A2:59D7
loc_159da:
	// 5124 
cs=0x1a2;eip=0x0059da; 	T(MOV(dl, *(raddr(es,si))));	// 12460 mov     dl, es:[si] ;~ 01A2:59DA
cs=0x1a2;eip=0x0059dd; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12461 mov     ax, [ebx+edx*2] ;~ 01A2:59DD
cs=0x1a2;eip=0x0059e1; 	T(MOV(dl, *(raddr(es,si+1))));	// 12462 mov     dl, es:[si+1] ;~ 01A2:59E1
cs=0x1a2;eip=0x0059e5; 	T(CWDE);	// 12463 cwde ;~ 01A2:59E5
cs=0x1a2;eip=0x0059e7; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12464 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:59E7
cs=0x1a2;eip=0x0059ed; 	T(SUB(edx, eax));	// 12465 sub     edx, eax ;~ 01A2:59ED
cs=0x1a2;eip=0x0059f0; 	T(IMUL2_4(edx,ecx));	// 12466 imul    edx, ecx ;~ 01A2:59F0
cs=0x1a2;eip=0x0059f4; 	T(SAR(edx, 8));	// 12467 sar     edx, 8 ;~ 01A2:59F4
cs=0x1a2;eip=0x0059f8; 	T(ADD(eax, edx));	// 12468 add     eax, edx ;~ 01A2:59F8
cs=0x1a2;eip=0x0059fe; 	T(ADC(si, bp));	// 12474 adc     si, bp ;~ 01A2:59FE
cs=0x1a2;eip=0x005a00; 	T(XOR(edx, edx));	// 12475 xor     edx, edx ;~ 01A2:5A00
cs=0x1a2;eip=0x005a03; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 12476 add     [di], eax ;~ 01A2:5A03
cs=0x1a2;eip=0x005a06; 	T(ADD(di, 8));	// 12477 add     di, 8 ;~ 01A2:5A06
loc_15a09:
	// 5125 
cs=0x1a2;eip=0x005a09; 	T(MOV(dl, *(raddr(es,si))));	// 12482 mov     dl, es:[si] ;~ 01A2:5A09
cs=0x1a2;eip=0x005a0c; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12483 mov     ax, [ebx+edx*2] ;~ 01A2:5A0C
cs=0x1a2;eip=0x005a10; 	T(MOV(dl, *(raddr(es,si+1))));	// 12484 mov     dl, es:[si+1] ;~ 01A2:5A10
cs=0x1a2;eip=0x005a14; 	T(CWDE);	// 12485 cwde ;~ 01A2:5A14
cs=0x1a2;eip=0x005a16; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12486 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:5A16
cs=0x1a2;eip=0x005a1c; 	T(SUB(edx, eax));	// 12487 sub     edx, eax ;~ 01A2:5A1C
cs=0x1a2;eip=0x005a1f; 	T(IMUL2_4(edx,ecx));	// 12488 imul    edx, ecx ;~ 01A2:5A1F
cs=0x1a2;eip=0x005a23; 	T(SAR(edx, 8));	// 12489 sar     edx, 8 ;~ 01A2:5A23
cs=0x1a2;eip=0x005a27; 	T(ADD(eax, edx));	// 12490 add     eax, edx ;~ 01A2:5A27
cs=0x1a2;eip=0x005a2d; 	T(ADC(si, bp));	// 12496 adc     si, bp ;~ 01A2:5A2D
cs=0x1a2;eip=0x005a2f; 	T(XOR(edx, edx));	// 12497 xor     edx, edx ;~ 01A2:5A2F
cs=0x1a2;eip=0x005a32; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 12498 add     [di], eax ;~ 01A2:5A32
cs=0x1a2;eip=0x005a35; 	T(ADD(di, 8));	// 12499 add     di, 8 ;~ 01A2:5A35
loc_15a38:
	// 5126 
cs=0x1a2;eip=0x005a38; 	T(MOV(dl, *(raddr(es,si))));	// 12504 mov     dl, es:[si] ;~ 01A2:5A38
cs=0x1a2;eip=0x005a3b; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12505 mov     ax, [ebx+edx*2] ;~ 01A2:5A3B
cs=0x1a2;eip=0x005a3f; 	T(MOV(dl, *(raddr(es,si+1))));	// 12506 mov     dl, es:[si+1] ;~ 01A2:5A3F
cs=0x1a2;eip=0x005a43; 	T(CWDE);	// 12507 cwde ;~ 01A2:5A43
cs=0x1a2;eip=0x005a45; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12508 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:5A45
cs=0x1a2;eip=0x005a4b; 	T(SUB(edx, eax));	// 12509 sub     edx, eax ;~ 01A2:5A4B
cs=0x1a2;eip=0x005a4e; 	T(IMUL2_4(edx,ecx));	// 12510 imul    edx, ecx ;~ 01A2:5A4E
cs=0x1a2;eip=0x005a52; 	T(SAR(edx, 8));	// 12511 sar     edx, 8 ;~ 01A2:5A52
cs=0x1a2;eip=0x005a56; 	T(ADD(eax, edx));	// 12512 add     eax, edx ;~ 01A2:5A56
cs=0x1a2;eip=0x005a5c; 	T(ADC(si, bp));	// 12518 adc     si, bp ;~ 01A2:5A5C
cs=0x1a2;eip=0x005a5e; 	T(XOR(edx, edx));	// 12519 xor     edx, edx ;~ 01A2:5A5E
cs=0x1a2;eip=0x005a61; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 12520 add     [di], eax ;~ 01A2:5A61
cs=0x1a2;eip=0x005a64; 	T(ADD(di, 8));	// 12521 add     di, 8 ;~ 01A2:5A64
loc_15a67:
	// 5127 
cs=0x1a2;eip=0x005a67; 	T(MOV(dl, *(raddr(es,si))));	// 12526 mov     dl, es:[si] ;~ 01A2:5A67
cs=0x1a2;eip=0x005a6a; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12527 mov     ax, [ebx+edx*2] ;~ 01A2:5A6A
cs=0x1a2;eip=0x005a6e; 	T(MOV(dl, *(raddr(es,si+1))));	// 12528 mov     dl, es:[si+1] ;~ 01A2:5A6E
cs=0x1a2;eip=0x005a72; 	T(CWDE);	// 12529 cwde ;~ 01A2:5A72
cs=0x1a2;eip=0x005a74; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12530 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:5A74
cs=0x1a2;eip=0x005a7a; 	T(SUB(edx, eax));	// 12531 sub     edx, eax ;~ 01A2:5A7A
cs=0x1a2;eip=0x005a7d; 	T(IMUL2_4(edx,ecx));	// 12532 imul    edx, ecx ;~ 01A2:5A7D
cs=0x1a2;eip=0x005a81; 	T(SAR(edx, 8));	// 12533 sar     edx, 8 ;~ 01A2:5A81
cs=0x1a2;eip=0x005a85; 	T(ADD(eax, edx));	// 12534 add     eax, edx ;~ 01A2:5A85
cs=0x1a2;eip=0x005a8b; 	T(ADC(si, bp));	// 12540 adc     si, bp ;~ 01A2:5A8B
cs=0x1a2;eip=0x005a8d; 	T(XOR(edx, edx));	// 12541 xor     edx, edx ;~ 01A2:5A8D
cs=0x1a2;eip=0x005a90; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 12542 add     [di], eax ;~ 01A2:5A90
cs=0x1a2;eip=0x005a93; 	T(ADD(di, 8));	// 12543 add     di, 8 ;~ 01A2:5A93
loc_15a96:
	// 5128 
cs=0x1a2;eip=0x005a96; 	T(MOV(dl, *(raddr(es,si))));	// 12548 mov     dl, es:[si] ;~ 01A2:5A96
cs=0x1a2;eip=0x005a99; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12549 mov     ax, [ebx+edx*2] ;~ 01A2:5A99
cs=0x1a2;eip=0x005a9d; 	T(MOV(dl, *(raddr(es,si+1))));	// 12550 mov     dl, es:[si+1] ;~ 01A2:5A9D
cs=0x1a2;eip=0x005aa1; 	T(CWDE);	// 12551 cwde ;~ 01A2:5AA1
cs=0x1a2;eip=0x005aa3; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12552 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:5AA3
cs=0x1a2;eip=0x005aa9; 	T(SUB(edx, eax));	// 12553 sub     edx, eax ;~ 01A2:5AA9
cs=0x1a2;eip=0x005aac; 	T(IMUL2_4(edx,ecx));	// 12554 imul    edx, ecx ;~ 01A2:5AAC
cs=0x1a2;eip=0x005ab0; 	T(SAR(edx, 8));	// 12555 sar     edx, 8 ;~ 01A2:5AB0
cs=0x1a2;eip=0x005ab4; 	T(ADD(eax, edx));	// 12556 add     eax, edx ;~ 01A2:5AB4
cs=0x1a2;eip=0x005aba; 	T(ADC(si, bp));	// 12562 adc     si, bp ;~ 01A2:5ABA
cs=0x1a2;eip=0x005abc; 	T(XOR(edx, edx));	// 12563 xor     edx, edx ;~ 01A2:5ABC
cs=0x1a2;eip=0x005abf; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 12564 add     [di], eax ;~ 01A2:5ABF
cs=0x1a2;eip=0x005ac2; 	T(ADD(di, 8));	// 12565 add     di, 8 ;~ 01A2:5AC2
loc_15ac5:
	// 5129 
cs=0x1a2;eip=0x005ac5; 	T(MOV(dl, *(raddr(es,si))));	// 12570 mov     dl, es:[si] ;~ 01A2:5AC5
cs=0x1a2;eip=0x005ac8; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12571 mov     ax, [ebx+edx*2] ;~ 01A2:5AC8
cs=0x1a2;eip=0x005acc; 	T(MOV(dl, *(raddr(es,si+1))));	// 12572 mov     dl, es:[si+1] ;~ 01A2:5ACC
cs=0x1a2;eip=0x005ad0; 	T(CWDE);	// 12573 cwde ;~ 01A2:5AD0
cs=0x1a2;eip=0x005ad2; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12574 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:5AD2
cs=0x1a2;eip=0x005ad8; 	T(SUB(edx, eax));	// 12575 sub     edx, eax ;~ 01A2:5AD8
cs=0x1a2;eip=0x005adb; 	T(IMUL2_4(edx,ecx));	// 12576 imul    edx, ecx ;~ 01A2:5ADB
cs=0x1a2;eip=0x005adf; 	T(SAR(edx, 8));	// 12577 sar     edx, 8 ;~ 01A2:5ADF
cs=0x1a2;eip=0x005ae3; 	T(ADD(eax, edx));	// 12578 add     eax, edx ;~ 01A2:5AE3
cs=0x1a2;eip=0x005ae9; 	T(ADC(si, bp));	// 12584 adc     si, bp ;~ 01A2:5AE9
cs=0x1a2;eip=0x005aeb; 	T(XOR(edx, edx));	// 12585 xor     edx, edx ;~ 01A2:5AEB
cs=0x1a2;eip=0x005aee; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 12586 add     [di], eax ;~ 01A2:5AEE
cs=0x1a2;eip=0x005af1; 	T(ADD(di, 8));	// 12587 add     di, 8 ;~ 01A2:5AF1
loc_15af4:
	// 5130 
cs=0x1a2;eip=0x005af4; 	T(MOV(dl, *(raddr(es,si))));	// 12592 mov     dl, es:[si] ;~ 01A2:5AF4
cs=0x1a2;eip=0x005af7; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12593 mov     ax, [ebx+edx*2] ;~ 01A2:5AF7
cs=0x1a2;eip=0x005afb; 	T(MOV(dl, *(raddr(es,si+1))));	// 12594 mov     dl, es:[si+1] ;~ 01A2:5AFB
cs=0x1a2;eip=0x005aff; 	T(CWDE);	// 12595 cwde ;~ 01A2:5AFF
cs=0x1a2;eip=0x005b01; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12596 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:5B01
cs=0x1a2;eip=0x005b07; 	T(SUB(edx, eax));	// 12597 sub     edx, eax ;~ 01A2:5B07
cs=0x1a2;eip=0x005b0a; 	T(IMUL2_4(edx,ecx));	// 12598 imul    edx, ecx ;~ 01A2:5B0A
cs=0x1a2;eip=0x005b0e; 	T(SAR(edx, 8));	// 12599 sar     edx, 8 ;~ 01A2:5B0E
cs=0x1a2;eip=0x005b12; 	T(ADD(eax, edx));	// 12600 add     eax, edx ;~ 01A2:5B12
cs=0x1a2;eip=0x005b18; 	T(ADC(si, bp));	// 12606 adc     si, bp ;~ 01A2:5B18
cs=0x1a2;eip=0x005b1a; 	T(XOR(edx, edx));	// 12607 xor     edx, edx ;~ 01A2:5B1A
cs=0x1a2;eip=0x005b1d; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 12608 add     [di], eax ;~ 01A2:5B1D
cs=0x1a2;eip=0x005b20; 	T(ADD(di, 8));	// 12609 add     di, 8 ;~ 01A2:5B20
loc_15b23:
	// 5131 
cs=0x1a2;eip=0x005b23; 	T(MOV(dl, *(raddr(es,si))));	// 12614 mov     dl, es:[si] ;~ 01A2:5B23
cs=0x1a2;eip=0x005b26; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12615 mov     ax, [ebx+edx*2] ;~ 01A2:5B26
cs=0x1a2;eip=0x005b2a; 	T(MOV(dl, *(raddr(es,si+1))));	// 12616 mov     dl, es:[si+1] ;~ 01A2:5B2A
cs=0x1a2;eip=0x005b2e; 	T(CWDE);	// 12617 cwde ;~ 01A2:5B2E
cs=0x1a2;eip=0x005b30; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12618 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:5B30
cs=0x1a2;eip=0x005b36; 	T(SUB(edx, eax));	// 12619 sub     edx, eax ;~ 01A2:5B36
cs=0x1a2;eip=0x005b39; 	T(IMUL2_4(edx,ecx));	// 12620 imul    edx, ecx ;~ 01A2:5B39
cs=0x1a2;eip=0x005b3d; 	T(SAR(edx, 8));	// 12621 sar     edx, 8 ;~ 01A2:5B3D
cs=0x1a2;eip=0x005b41; 	T(ADD(eax, edx));	// 12622 add     eax, edx ;~ 01A2:5B41
cs=0x1a2;eip=0x005b47; 	T(ADC(si, bp));	// 12628 adc     si, bp ;~ 01A2:5B47
cs=0x1a2;eip=0x005b49; 	T(XOR(edx, edx));	// 12629 xor     edx, edx ;~ 01A2:5B49
cs=0x1a2;eip=0x005b4c; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 12630 add     [di], eax ;~ 01A2:5B4C
cs=0x1a2;eip=0x005b4f; 	T(ADD(di, 8));	// 12631 add     di, 8 ;~ 01A2:5B4F
loc_15b52:
	// 5132 
cs=0x1a2;eip=0x005b52; 	T(CMP(byte_24683, 0));	// 12636 cmp     byte_24683, 0 ;~ 01A2:5B52
cs=0x1a2;eip=0x005b57; 	J(JZ(loc_1578c));	// 12637 jz      loc_1578C ;~ 01A2:5B57
loc_15b5b:
	// 5133 
cs=0x1a2;eip=0x005b5b; 	T(XOR(edx, edx));	// 12640 xor     edx, edx ;~ 01A2:5B5B
cs=0x1a2;eip=0x005b5e; 	T(MOV(dl, *(raddr(es,si))));	// 12641 mov     dl, es:[si] ;~ 01A2:5B5E
cs=0x1a2;eip=0x005b61; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12642 mov     ax, [ebx+edx*2] ;~ 01A2:5B61
cs=0x1a2;eip=0x005b65; 	T(MOV(dl, *(raddr(es,si+1))));	// 12643 mov     dl, es:[si+1] ;~ 01A2:5B65
cs=0x1a2;eip=0x005b69; 	T(CWDE);	// 12644 cwde ;~ 01A2:5B69
cs=0x1a2;eip=0x005b6b; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12645 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:5B6B
cs=0x1a2;eip=0x005b71; 	T(SUB(edx, eax));	// 12646 sub     edx, eax ;~ 01A2:5B71
cs=0x1a2;eip=0x005b74; 	T(IMUL2_4(edx,ecx));	// 12647 imul    edx, ecx ;~ 01A2:5B74
cs=0x1a2;eip=0x005b78; 	T(SAR(edx, 8));	// 12648 sar     edx, 8 ;~ 01A2:5B78
cs=0x1a2;eip=0x005b7c; 	T(ADD(eax, edx));	// 12649 add     eax, edx ;~ 01A2:5B7C
cs=0x1a2;eip=0x005b82; 	T(ADC(si, bp));	// 12655 adc     si, bp ;~ 01A2:5B82
cs=0x1a2;eip=0x005b84; 	T(XOR(edx, edx));	// 12656 xor     edx, edx ;~ 01A2:5B84
cs=0x1a2;eip=0x005b87; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 12657 add     [di], eax ;~ 01A2:5B87
cs=0x1a2;eip=0x005b8a; 	T(MOV(dl, *(raddr(es,si))));	// 12658 mov     dl, es:[si] ;~ 01A2:5B8A
cs=0x1a2;eip=0x005b8d; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12659 mov     ax, [ebx+edx*2] ;~ 01A2:5B8D
cs=0x1a2;eip=0x005b91; 	T(MOV(dl, *(raddr(es,si+1))));	// 12660 mov     dl, es:[si+1] ;~ 01A2:5B91
cs=0x1a2;eip=0x005b95; 	T(CWDE);	// 12661 cwde ;~ 01A2:5B95
cs=0x1a2;eip=0x005b97; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12662 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:5B97
cs=0x1a2;eip=0x005b9d; 	T(SUB(edx, eax));	// 12663 sub     edx, eax ;~ 01A2:5B9D
cs=0x1a2;eip=0x005ba0; 	T(IMUL2_4(edx,ecx));	// 12664 imul    edx, ecx ;~ 01A2:5BA0
cs=0x1a2;eip=0x005ba4; 	T(SAR(edx, 8));	// 12665 sar     edx, 8 ;~ 01A2:5BA4
cs=0x1a2;eip=0x005ba8; 	T(ADD(eax, edx));	// 12666 add     eax, edx ;~ 01A2:5BA8
cs=0x1a2;eip=0x005bae; 	T(ADC(si, bp));	// 12671 adc     si, bp ;~ 01A2:5BAE
cs=0x1a2;eip=0x005bb0; 	T(XOR(edx, edx));	// 12672 xor     edx, edx ;~ 01A2:5BB0
cs=0x1a2;eip=0x005bb3; 	X(ADD(*(dd*)(raddr(ds,di+8)), eax));	// 12673 add     [di+8], eax ;~ 01A2:5BB3
cs=0x1a2;eip=0x005bb7; 	T(MOV(dl, *(raddr(es,si))));	// 12674 mov     dl, es:[si] ;~ 01A2:5BB7
cs=0x1a2;eip=0x005bba; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12675 mov     ax, [ebx+edx*2] ;~ 01A2:5BBA
cs=0x1a2;eip=0x005bbe; 	T(MOV(dl, *(raddr(es,si+1))));	// 12676 mov     dl, es:[si+1] ;~ 01A2:5BBE
cs=0x1a2;eip=0x005bc2; 	T(CWDE);	// 12677 cwde ;~ 01A2:5BC2
cs=0x1a2;eip=0x005bc4; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12678 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:5BC4
cs=0x1a2;eip=0x005bca; 	T(SUB(edx, eax));	// 12679 sub     edx, eax ;~ 01A2:5BCA
cs=0x1a2;eip=0x005bcd; 	T(IMUL2_4(edx,ecx));	// 12680 imul    edx, ecx ;~ 01A2:5BCD
cs=0x1a2;eip=0x005bd1; 	T(SAR(edx, 8));	// 12681 sar     edx, 8 ;~ 01A2:5BD1
cs=0x1a2;eip=0x005bd5; 	T(ADD(eax, edx));	// 12682 add     eax, edx ;~ 01A2:5BD5
cs=0x1a2;eip=0x005bdb; 	T(ADC(si, bp));	// 12687 adc     si, bp ;~ 01A2:5BDB
cs=0x1a2;eip=0x005bdd; 	T(XOR(edx, edx));	// 12688 xor     edx, edx ;~ 01A2:5BDD
cs=0x1a2;eip=0x005be0; 	X(ADD(*(dd*)(raddr(ds,di+0x10)), eax));	// 12689 add     [di+10h], eax ;~ 01A2:5BE0
cs=0x1a2;eip=0x005be4; 	T(MOV(dl, *(raddr(es,si))));	// 12690 mov     dl, es:[si] ;~ 01A2:5BE4
cs=0x1a2;eip=0x005be7; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12691 mov     ax, [ebx+edx*2] ;~ 01A2:5BE7
cs=0x1a2;eip=0x005beb; 	T(MOV(dl, *(raddr(es,si+1))));	// 12692 mov     dl, es:[si+1] ;~ 01A2:5BEB
cs=0x1a2;eip=0x005bef; 	T(CWDE);	// 12693 cwde ;~ 01A2:5BEF
cs=0x1a2;eip=0x005bf1; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12694 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:5BF1
cs=0x1a2;eip=0x005bf7; 	T(SUB(edx, eax));	// 12695 sub     edx, eax ;~ 01A2:5BF7
cs=0x1a2;eip=0x005bfa; 	T(IMUL2_4(edx,ecx));	// 12696 imul    edx, ecx ;~ 01A2:5BFA
cs=0x1a2;eip=0x005bfe; 	T(SAR(edx, 8));	// 12697 sar     edx, 8 ;~ 01A2:5BFE
cs=0x1a2;eip=0x005c02; 	T(ADD(eax, edx));	// 12698 add     eax, edx ;~ 01A2:5C02
cs=0x1a2;eip=0x005c08; 	T(ADC(si, bp));	// 12703 adc     si, bp ;~ 01A2:5C08
cs=0x1a2;eip=0x005c0a; 	T(XOR(edx, edx));	// 12704 xor     edx, edx ;~ 01A2:5C0A
cs=0x1a2;eip=0x005c0d; 	X(ADD(*(dd*)(raddr(ds,di+0x18)), eax));	// 12705 add     [di+18h], eax ;~ 01A2:5C0D
cs=0x1a2;eip=0x005c11; 	T(MOV(dl, *(raddr(es,si))));	// 12706 mov     dl, es:[si] ;~ 01A2:5C11
cs=0x1a2;eip=0x005c14; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12707 mov     ax, [ebx+edx*2] ;~ 01A2:5C14
cs=0x1a2;eip=0x005c18; 	T(MOV(dl, *(raddr(es,si+1))));	// 12708 mov     dl, es:[si+1] ;~ 01A2:5C18
cs=0x1a2;eip=0x005c1c; 	T(CWDE);	// 12709 cwde ;~ 01A2:5C1C
cs=0x1a2;eip=0x005c1e; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12710 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:5C1E
cs=0x1a2;eip=0x005c24; 	T(SUB(edx, eax));	// 12711 sub     edx, eax ;~ 01A2:5C24
cs=0x1a2;eip=0x005c27; 	T(IMUL2_4(edx,ecx));	// 12712 imul    edx, ecx ;~ 01A2:5C27
cs=0x1a2;eip=0x005c2b; 	T(SAR(edx, 8));	// 12713 sar     edx, 8 ;~ 01A2:5C2B
cs=0x1a2;eip=0x005c2f; 	T(ADD(eax, edx));	// 12714 add     eax, edx ;~ 01A2:5C2F
cs=0x1a2;eip=0x005c35; 	T(ADC(si, bp));	// 12719 adc     si, bp ;~ 01A2:5C35
cs=0x1a2;eip=0x005c37; 	T(XOR(edx, edx));	// 12720 xor     edx, edx ;~ 01A2:5C37
cs=0x1a2;eip=0x005c3a; 	X(ADD(*(dd*)(raddr(ds,di+0x20)), eax));	// 12721 add     [di+20h], eax ;~ 01A2:5C3A
cs=0x1a2;eip=0x005c3e; 	T(MOV(dl, *(raddr(es,si))));	// 12722 mov     dl, es:[si] ;~ 01A2:5C3E
cs=0x1a2;eip=0x005c41; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12723 mov     ax, [ebx+edx*2] ;~ 01A2:5C41
cs=0x1a2;eip=0x005c45; 	T(MOV(dl, *(raddr(es,si+1))));	// 12724 mov     dl, es:[si+1] ;~ 01A2:5C45
cs=0x1a2;eip=0x005c49; 	T(CWDE);	// 12725 cwde ;~ 01A2:5C49
cs=0x1a2;eip=0x005c4b; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12726 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:5C4B
cs=0x1a2;eip=0x005c51; 	T(SUB(edx, eax));	// 12727 sub     edx, eax ;~ 01A2:5C51
cs=0x1a2;eip=0x005c54; 	T(IMUL2_4(edx,ecx));	// 12728 imul    edx, ecx ;~ 01A2:5C54
cs=0x1a2;eip=0x005c58; 	T(SAR(edx, 8));	// 12729 sar     edx, 8 ;~ 01A2:5C58
cs=0x1a2;eip=0x005c5c; 	T(ADD(eax, edx));	// 12730 add     eax, edx ;~ 01A2:5C5C
cs=0x1a2;eip=0x005c62; 	T(ADC(si, bp));	// 12735 adc     si, bp ;~ 01A2:5C62
cs=0x1a2;eip=0x005c64; 	T(XOR(edx, edx));	// 12736 xor     edx, edx ;~ 01A2:5C64
cs=0x1a2;eip=0x005c67; 	X(ADD(*(dd*)(raddr(ds,di+0x28)), eax));	// 12737 add     [di+28h], eax ;~ 01A2:5C67
cs=0x1a2;eip=0x005c6b; 	T(MOV(dl, *(raddr(es,si))));	// 12738 mov     dl, es:[si] ;~ 01A2:5C6B
cs=0x1a2;eip=0x005c6e; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12739 mov     ax, [ebx+edx*2] ;~ 01A2:5C6E
cs=0x1a2;eip=0x005c72; 	T(MOV(dl, *(raddr(es,si+1))));	// 12740 mov     dl, es:[si+1] ;~ 01A2:5C72
cs=0x1a2;eip=0x005c76; 	T(CWDE);	// 12741 cwde ;~ 01A2:5C76
cs=0x1a2;eip=0x005c78; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12742 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:5C78
cs=0x1a2;eip=0x005c7e; 	T(SUB(edx, eax));	// 12743 sub     edx, eax ;~ 01A2:5C7E
cs=0x1a2;eip=0x005c81; 	T(IMUL2_4(edx,ecx));	// 12744 imul    edx, ecx ;~ 01A2:5C81
cs=0x1a2;eip=0x005c85; 	T(SAR(edx, 8));	// 12745 sar     edx, 8 ;~ 01A2:5C85
cs=0x1a2;eip=0x005c89; 	T(ADD(eax, edx));	// 12746 add     eax, edx ;~ 01A2:5C89
cs=0x1a2;eip=0x005c8f; 	T(ADC(si, bp));	// 12751 adc     si, bp ;~ 01A2:5C8F
cs=0x1a2;eip=0x005c91; 	T(XOR(edx, edx));	// 12752 xor     edx, edx ;~ 01A2:5C91
cs=0x1a2;eip=0x005c94; 	X(ADD(*(dd*)(raddr(ds,di+0x30)), eax));	// 12753 add     [di+30h], eax ;~ 01A2:5C94
cs=0x1a2;eip=0x005c98; 	T(MOV(dl, *(raddr(es,si))));	// 12754 mov     dl, es:[si] ;~ 01A2:5C98
cs=0x1a2;eip=0x005c9b; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12755 mov     ax, [ebx+edx*2] ;~ 01A2:5C9B
cs=0x1a2;eip=0x005c9f; 	T(MOV(dl, *(raddr(es,si+1))));	// 12756 mov     dl, es:[si+1] ;~ 01A2:5C9F
cs=0x1a2;eip=0x005ca3; 	T(CWDE);	// 12757 cwde ;~ 01A2:5CA3
cs=0x1a2;eip=0x005ca5; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12758 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:5CA5
cs=0x1a2;eip=0x005cab; 	T(SUB(edx, eax));	// 12759 sub     edx, eax ;~ 01A2:5CAB
cs=0x1a2;eip=0x005cae; 	T(IMUL2_4(edx,ecx));	// 12760 imul    edx, ecx ;~ 01A2:5CAE
cs=0x1a2;eip=0x005cb2; 	T(SAR(edx, 8));	// 12761 sar     edx, 8 ;~ 01A2:5CB2
cs=0x1a2;eip=0x005cb6; 	T(ADD(eax, edx));	// 12762 add     eax, edx ;~ 01A2:5CB6
cs=0x1a2;eip=0x005cbc; 	T(ADC(si, bp));	// 12767 adc     si, bp ;~ 01A2:5CBC
cs=0x1a2;eip=0x005cbe; 	T(XOR(edx, edx));	// 12768 xor     edx, edx ;~ 01A2:5CBE
cs=0x1a2;eip=0x005cc1; 	X(ADD(*(dd*)(raddr(ds,di+0x38)), eax));	// 12769 add     [di+38h], eax ;~ 01A2:5CC1
cs=0x1a2;eip=0x005cc5; 	T(MOV(dl, *(raddr(es,si))));	// 12770 mov     dl, es:[si] ;~ 01A2:5CC5
cs=0x1a2;eip=0x005cc8; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12771 mov     ax, [ebx+edx*2] ;~ 01A2:5CC8
cs=0x1a2;eip=0x005ccc; 	T(MOV(dl, *(raddr(es,si+1))));	// 12772 mov     dl, es:[si+1] ;~ 01A2:5CCC
cs=0x1a2;eip=0x005cd0; 	T(CWDE);	// 12773 cwde ;~ 01A2:5CD0
cs=0x1a2;eip=0x005cd2; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12774 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:5CD2
cs=0x1a2;eip=0x005cd8; 	T(SUB(edx, eax));	// 12775 sub     edx, eax ;~ 01A2:5CD8
cs=0x1a2;eip=0x005cdb; 	T(IMUL2_4(edx,ecx));	// 12776 imul    edx, ecx ;~ 01A2:5CDB
cs=0x1a2;eip=0x005cdf; 	T(SAR(edx, 8));	// 12777 sar     edx, 8 ;~ 01A2:5CDF
cs=0x1a2;eip=0x005ce3; 	T(ADD(eax, edx));	// 12778 add     eax, edx ;~ 01A2:5CE3
cs=0x1a2;eip=0x005ce9; 	T(ADC(si, bp));	// 12783 adc     si, bp ;~ 01A2:5CE9
cs=0x1a2;eip=0x005ceb; 	T(XOR(edx, edx));	// 12784 xor     edx, edx ;~ 01A2:5CEB
cs=0x1a2;eip=0x005cee; 	X(ADD(*(dd*)(raddr(ds,di+0x40)), eax));	// 12785 add     [di+40h], eax ;~ 01A2:5CEE
cs=0x1a2;eip=0x005cf2; 	T(MOV(dl, *(raddr(es,si))));	// 12786 mov     dl, es:[si] ;~ 01A2:5CF2
cs=0x1a2;eip=0x005cf5; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12787 mov     ax, [ebx+edx*2] ;~ 01A2:5CF5
cs=0x1a2;eip=0x005cf9; 	T(MOV(dl, *(raddr(es,si+1))));	// 12788 mov     dl, es:[si+1] ;~ 01A2:5CF9
cs=0x1a2;eip=0x005cfd; 	T(CWDE);	// 12789 cwde ;~ 01A2:5CFD
cs=0x1a2;eip=0x005cff; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12790 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:5CFF
cs=0x1a2;eip=0x005d05; 	T(SUB(edx, eax));	// 12791 sub     edx, eax ;~ 01A2:5D05
cs=0x1a2;eip=0x005d08; 	T(IMUL2_4(edx,ecx));	// 12792 imul    edx, ecx ;~ 01A2:5D08
cs=0x1a2;eip=0x005d0c; 	T(SAR(edx, 8));	// 12793 sar     edx, 8 ;~ 01A2:5D0C
cs=0x1a2;eip=0x005d10; 	T(ADD(eax, edx));	// 12794 add     eax, edx ;~ 01A2:5D10
cs=0x1a2;eip=0x005d16; 	T(ADC(si, bp));	// 12799 adc     si, bp ;~ 01A2:5D16
cs=0x1a2;eip=0x005d18; 	T(XOR(edx, edx));	// 12800 xor     edx, edx ;~ 01A2:5D18
cs=0x1a2;eip=0x005d1b; 	X(ADD(*(dd*)(raddr(ds,di+0x48)), eax));	// 12801 add     [di+48h], eax ;~ 01A2:5D1B
cs=0x1a2;eip=0x005d1f; 	T(MOV(dl, *(raddr(es,si))));	// 12802 mov     dl, es:[si] ;~ 01A2:5D1F
cs=0x1a2;eip=0x005d22; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12803 mov     ax, [ebx+edx*2] ;~ 01A2:5D22
cs=0x1a2;eip=0x005d26; 	T(MOV(dl, *(raddr(es,si+1))));	// 12804 mov     dl, es:[si+1] ;~ 01A2:5D26
cs=0x1a2;eip=0x005d2a; 	T(CWDE);	// 12805 cwde ;~ 01A2:5D2A
cs=0x1a2;eip=0x005d2c; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12806 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:5D2C
cs=0x1a2;eip=0x005d32; 	T(SUB(edx, eax));	// 12807 sub     edx, eax ;~ 01A2:5D32
cs=0x1a2;eip=0x005d35; 	T(IMUL2_4(edx,ecx));	// 12808 imul    edx, ecx ;~ 01A2:5D35
cs=0x1a2;eip=0x005d39; 	T(SAR(edx, 8));	// 12809 sar     edx, 8 ;~ 01A2:5D39
cs=0x1a2;eip=0x005d3d; 	T(ADD(eax, edx));	// 12810 add     eax, edx ;~ 01A2:5D3D
cs=0x1a2;eip=0x005d43; 	T(ADC(si, bp));	// 12815 adc     si, bp ;~ 01A2:5D43
cs=0x1a2;eip=0x005d45; 	T(XOR(edx, edx));	// 12816 xor     edx, edx ;~ 01A2:5D45
cs=0x1a2;eip=0x005d48; 	X(ADD(*(dd*)(raddr(ds,di+0x50)), eax));	// 12817 add     [di+50h], eax ;~ 01A2:5D48
cs=0x1a2;eip=0x005d4c; 	T(MOV(dl, *(raddr(es,si))));	// 12818 mov     dl, es:[si] ;~ 01A2:5D4C
cs=0x1a2;eip=0x005d4f; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12819 mov     ax, [ebx+edx*2] ;~ 01A2:5D4F
cs=0x1a2;eip=0x005d53; 	T(MOV(dl, *(raddr(es,si+1))));	// 12820 mov     dl, es:[si+1] ;~ 01A2:5D53
cs=0x1a2;eip=0x005d57; 	T(CWDE);	// 12821 cwde ;~ 01A2:5D57
cs=0x1a2;eip=0x005d59; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12822 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:5D59
cs=0x1a2;eip=0x005d5f; 	T(SUB(edx, eax));	// 12823 sub     edx, eax ;~ 01A2:5D5F
cs=0x1a2;eip=0x005d62; 	T(IMUL2_4(edx,ecx));	// 12824 imul    edx, ecx ;~ 01A2:5D62
cs=0x1a2;eip=0x005d66; 	T(SAR(edx, 8));	// 12825 sar     edx, 8 ;~ 01A2:5D66
cs=0x1a2;eip=0x005d6a; 	T(ADD(eax, edx));	// 12826 add     eax, edx ;~ 01A2:5D6A
cs=0x1a2;eip=0x005d70; 	T(ADC(si, bp));	// 12831 adc     si, bp ;~ 01A2:5D70
cs=0x1a2;eip=0x005d72; 	T(XOR(edx, edx));	// 12832 xor     edx, edx ;~ 01A2:5D72
cs=0x1a2;eip=0x005d75; 	X(ADD(*(dd*)(raddr(ds,di+0x58)), eax));	// 12833 add     [di+58h], eax ;~ 01A2:5D75
cs=0x1a2;eip=0x005d79; 	T(MOV(dl, *(raddr(es,si))));	// 12834 mov     dl, es:[si] ;~ 01A2:5D79
cs=0x1a2;eip=0x005d7c; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12835 mov     ax, [ebx+edx*2] ;~ 01A2:5D7C
cs=0x1a2;eip=0x005d80; 	T(MOV(dl, *(raddr(es,si+1))));	// 12836 mov     dl, es:[si+1] ;~ 01A2:5D80
cs=0x1a2;eip=0x005d84; 	T(CWDE);	// 12837 cwde ;~ 01A2:5D84
cs=0x1a2;eip=0x005d86; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12838 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:5D86
cs=0x1a2;eip=0x005d8c; 	T(SUB(edx, eax));	// 12839 sub     edx, eax ;~ 01A2:5D8C
cs=0x1a2;eip=0x005d8f; 	T(IMUL2_4(edx,ecx));	// 12840 imul    edx, ecx ;~ 01A2:5D8F
cs=0x1a2;eip=0x005d93; 	T(SAR(edx, 8));	// 12841 sar     edx, 8 ;~ 01A2:5D93
cs=0x1a2;eip=0x005d97; 	T(ADD(eax, edx));	// 12842 add     eax, edx ;~ 01A2:5D97
cs=0x1a2;eip=0x005d9d; 	T(ADC(si, bp));	// 12847 adc     si, bp ;~ 01A2:5D9D
cs=0x1a2;eip=0x005d9f; 	T(XOR(edx, edx));	// 12848 xor     edx, edx ;~ 01A2:5D9F
cs=0x1a2;eip=0x005da2; 	X(ADD(*(dd*)(raddr(ds,di+0x60)), eax));	// 12849 add     [di+60h], eax ;~ 01A2:5DA2
cs=0x1a2;eip=0x005da6; 	T(MOV(dl, *(raddr(es,si))));	// 12850 mov     dl, es:[si] ;~ 01A2:5DA6
cs=0x1a2;eip=0x005da9; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12851 mov     ax, [ebx+edx*2] ;~ 01A2:5DA9
cs=0x1a2;eip=0x005dad; 	T(MOV(dl, *(raddr(es,si+1))));	// 12852 mov     dl, es:[si+1] ;~ 01A2:5DAD
cs=0x1a2;eip=0x005db1; 	T(CWDE);	// 12853 cwde ;~ 01A2:5DB1
cs=0x1a2;eip=0x005db3; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12854 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:5DB3
cs=0x1a2;eip=0x005db9; 	T(SUB(edx, eax));	// 12855 sub     edx, eax ;~ 01A2:5DB9
cs=0x1a2;eip=0x005dbc; 	T(IMUL2_4(edx,ecx));	// 12856 imul    edx, ecx ;~ 01A2:5DBC
cs=0x1a2;eip=0x005dc0; 	T(SAR(edx, 8));	// 12857 sar     edx, 8 ;~ 01A2:5DC0
cs=0x1a2;eip=0x005dc4; 	T(ADD(eax, edx));	// 12858 add     eax, edx ;~ 01A2:5DC4
cs=0x1a2;eip=0x005dca; 	T(ADC(si, bp));	// 12863 adc     si, bp ;~ 01A2:5DCA
cs=0x1a2;eip=0x005dcc; 	T(XOR(edx, edx));	// 12864 xor     edx, edx ;~ 01A2:5DCC
cs=0x1a2;eip=0x005dcf; 	X(ADD(*(dd*)(raddr(ds,di+0x68)), eax));	// 12865 add     [di+68h], eax ;~ 01A2:5DCF
cs=0x1a2;eip=0x005dd3; 	T(MOV(dl, *(raddr(es,si))));	// 12866 mov     dl, es:[si] ;~ 01A2:5DD3
cs=0x1a2;eip=0x005dd6; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12867 mov     ax, [ebx+edx*2] ;~ 01A2:5DD6
cs=0x1a2;eip=0x005dda; 	T(MOV(dl, *(raddr(es,si+1))));	// 12868 mov     dl, es:[si+1] ;~ 01A2:5DDA
cs=0x1a2;eip=0x005dde; 	T(CWDE);	// 12869 cwde ;~ 01A2:5DDE
cs=0x1a2;eip=0x005de0; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12870 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:5DE0
cs=0x1a2;eip=0x005de6; 	T(SUB(edx, eax));	// 12871 sub     edx, eax ;~ 01A2:5DE6
cs=0x1a2;eip=0x005de9; 	T(IMUL2_4(edx,ecx));	// 12872 imul    edx, ecx ;~ 01A2:5DE9
cs=0x1a2;eip=0x005ded; 	T(SAR(edx, 8));	// 12873 sar     edx, 8 ;~ 01A2:5DED
cs=0x1a2;eip=0x005df1; 	T(ADD(eax, edx));	// 12874 add     eax, edx ;~ 01A2:5DF1
cs=0x1a2;eip=0x005df7; 	T(ADC(si, bp));	// 12879 adc     si, bp ;~ 01A2:5DF7
cs=0x1a2;eip=0x005df9; 	T(XOR(edx, edx));	// 12880 xor     edx, edx ;~ 01A2:5DF9
cs=0x1a2;eip=0x005dfc; 	X(ADD(*(dd*)(raddr(ds,di+0x70)), eax));	// 12881 add     [di+70h], eax ;~ 01A2:5DFC
cs=0x1a2;eip=0x005e00; 	T(MOV(dl, *(raddr(es,si))));	// 12882 mov     dl, es:[si] ;~ 01A2:5E00
cs=0x1a2;eip=0x005e03; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12883 mov     ax, [ebx+edx*2] ;~ 01A2:5E03
cs=0x1a2;eip=0x005e07; 	T(MOV(dl, *(raddr(es,si+1))));	// 12884 mov     dl, es:[si+1] ;~ 01A2:5E07
cs=0x1a2;eip=0x005e0b; 	T(CWDE);	// 12885 cwde ;~ 01A2:5E0B
cs=0x1a2;eip=0x005e0d; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 12886 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:5E0D
cs=0x1a2;eip=0x005e13; 	T(SUB(edx, eax));	// 12887 sub     edx, eax ;~ 01A2:5E13
cs=0x1a2;eip=0x005e16; 	T(IMUL2_4(edx,ecx));	// 12888 imul    edx, ecx ;~ 01A2:5E16
cs=0x1a2;eip=0x005e1a; 	T(SAR(edx, 8));	// 12889 sar     edx, 8 ;~ 01A2:5E1A
cs=0x1a2;eip=0x005e1e; 	T(ADD(eax, edx));	// 12890 add     eax, edx ;~ 01A2:5E1E
cs=0x1a2;eip=0x005e24; 	T(ADC(si, bp));	// 12895 adc     si, bp ;~ 01A2:5E24
cs=0x1a2;eip=0x005e26; 	T(XOR(edx, edx));	// 12896 xor     edx, edx ;~ 01A2:5E26
cs=0x1a2;eip=0x005e29; 	X(ADD(*(dd*)(raddr(ds,di+0x78)), eax));	// 12897 add     [di+78h], eax ;~ 01A2:5E29
cs=0x1a2;eip=0x005e2d; 	T(ADD(di, 0x80));	// 12898 add     di, 80h ; '€' ;~ 01A2:5E2D
cs=0x1a2;eip=0x005e31; 	T(MOV(dx, m2c::kloc_15e3d));	// 12899 mov     dx, offset loc_15E3D ;~ 01A2:5E31
cs=0x1a2;eip=0x005e34; 	T(CMP(byte_24616, 1));	// 12900 cmp     byte_24616, 1 ;~ 01A2:5E34
cs=0x1a2;eip=0x005e39; 	J(JZ(loc_1690b));	// 12901 jz      loc_1690B ;~ 01A2:5E39
loc_15e3d:
	// 5134 
cs=0x1a2;eip=0x005e3d; 	X(DEC(byte_24683));	// 12904 dec     byte_24683 ;~ 01A2:5E3D
cs=0x1a2;eip=0x005e41; 	J(JNZ(loc_15b5b));	// 12905 jnz     loc_15B5B ;~ 01A2:5E41
cs=0x1a2;eip=0x005e45; 	J(JMP(loc_1578c));	// 12906 jmp     loc_1578C ;~ 01A2:5E45
loc_15e48:
	// 5135 
cs=0x1a2;eip=0x005e48; 	T(XOR(edx, edx));	// 12911 xor     edx, edx ;~ 01A2:5E48
cs=0x1a2;eip=0x005e4b; 	T(MOV(ax, word_245e4));	// 12912 mov     ax, word_245E4 ;~ 01A2:5E4B
cs=0x1a2;eip=0x005e4e; 	T(AND(eax, 0x0F));	// 12913 and     eax, 0Fh ;~ 01A2:5E4E
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x005e52; __disp=*(dw*)(((db*)&off_18e60)+eax*2);
	J(return __dispatch_call(__disp, _state););	// 12914 jmp     cs:off_18E60[eax*2] ;~ 01A2:5E52
loc_15e5b:
	// 5136 
cs=0x1a2;eip=0x005e5b; 	T(MOV(dl, *(raddr(es,si))));	// 12919 mov     dl, es:[si] ;~ 01A2:5E5B
cs=0x1a2;eip=0x005e5e; 	T(ADD(cl, ch));	// 12920 add     cl, ch ;~ 01A2:5E5E
cs=0x1a2;eip=0x005e60; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12921 mov     ax, [ebx+edx*2] ;~ 01A2:5E60
cs=0x1a2;eip=0x005e64; 	T(CWDE);	// 12922 cwde ;~ 01A2:5E64
cs=0x1a2;eip=0x005e66; 	T(ADC(si, bp));	// 12923 adc     si, bp ;~ 01A2:5E66
cs=0x1a2;eip=0x005e68; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 12924 add     [di], eax ;~ 01A2:5E68
cs=0x1a2;eip=0x005e6b; 	T(ADD(di, 8));	// 12925 add     di, 8 ;~ 01A2:5E6B
loc_15e6e:
	// 5137 
cs=0x1a2;eip=0x005e6e; 	T(MOV(dl, *(raddr(es,si))));	// 12929 mov     dl, es:[si] ;~ 01A2:5E6E
cs=0x1a2;eip=0x005e71; 	T(ADD(cl, ch));	// 12930 add     cl, ch ;~ 01A2:5E71
cs=0x1a2;eip=0x005e73; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12931 mov     ax, [ebx+edx*2] ;~ 01A2:5E73
cs=0x1a2;eip=0x005e77; 	T(CWDE);	// 12932 cwde ;~ 01A2:5E77
cs=0x1a2;eip=0x005e79; 	T(ADC(si, bp));	// 12933 adc     si, bp ;~ 01A2:5E79
cs=0x1a2;eip=0x005e7b; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 12934 add     [di], eax ;~ 01A2:5E7B
cs=0x1a2;eip=0x005e7e; 	T(ADD(di, 8));	// 12935 add     di, 8 ;~ 01A2:5E7E
loc_15e81:
	// 5138 
cs=0x1a2;eip=0x005e81; 	T(MOV(dl, *(raddr(es,si))));	// 12939 mov     dl, es:[si] ;~ 01A2:5E81
cs=0x1a2;eip=0x005e84; 	T(ADD(cl, ch));	// 12940 add     cl, ch ;~ 01A2:5E84
cs=0x1a2;eip=0x005e86; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12941 mov     ax, [ebx+edx*2] ;~ 01A2:5E86
cs=0x1a2;eip=0x005e8a; 	T(CWDE);	// 12942 cwde ;~ 01A2:5E8A
cs=0x1a2;eip=0x005e8c; 	T(ADC(si, bp));	// 12943 adc     si, bp ;~ 01A2:5E8C
cs=0x1a2;eip=0x005e8e; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 12944 add     [di], eax ;~ 01A2:5E8E
cs=0x1a2;eip=0x005e91; 	T(ADD(di, 8));	// 12945 add     di, 8 ;~ 01A2:5E91
loc_15e94:
	// 5139 
cs=0x1a2;eip=0x005e94; 	T(MOV(dl, *(raddr(es,si))));	// 12949 mov     dl, es:[si] ;~ 01A2:5E94
cs=0x1a2;eip=0x005e97; 	T(ADD(cl, ch));	// 12950 add     cl, ch ;~ 01A2:5E97
cs=0x1a2;eip=0x005e99; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12951 mov     ax, [ebx+edx*2] ;~ 01A2:5E99
cs=0x1a2;eip=0x005e9d; 	T(CWDE);	// 12952 cwde ;~ 01A2:5E9D
cs=0x1a2;eip=0x005e9f; 	T(ADC(si, bp));	// 12953 adc     si, bp ;~ 01A2:5E9F
cs=0x1a2;eip=0x005ea1; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 12954 add     [di], eax ;~ 01A2:5EA1
cs=0x1a2;eip=0x005ea4; 	T(ADD(di, 8));	// 12955 add     di, 8 ;~ 01A2:5EA4
loc_15ea7:
	// 5140 
cs=0x1a2;eip=0x005ea7; 	T(MOV(dl, *(raddr(es,si))));	// 12959 mov     dl, es:[si] ;~ 01A2:5EA7
cs=0x1a2;eip=0x005eaa; 	T(ADD(cl, ch));	// 12960 add     cl, ch ;~ 01A2:5EAA
cs=0x1a2;eip=0x005eac; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12961 mov     ax, [ebx+edx*2] ;~ 01A2:5EAC
cs=0x1a2;eip=0x005eb0; 	T(CWDE);	// 12962 cwde ;~ 01A2:5EB0
cs=0x1a2;eip=0x005eb2; 	T(ADC(si, bp));	// 12963 adc     si, bp ;~ 01A2:5EB2
cs=0x1a2;eip=0x005eb4; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 12964 add     [di], eax ;~ 01A2:5EB4
cs=0x1a2;eip=0x005eb7; 	T(ADD(di, 8));	// 12965 add     di, 8 ;~ 01A2:5EB7
loc_15eba:
	// 5141 
cs=0x1a2;eip=0x005eba; 	T(MOV(dl, *(raddr(es,si))));	// 12969 mov     dl, es:[si] ;~ 01A2:5EBA
cs=0x1a2;eip=0x005ebd; 	T(ADD(cl, ch));	// 12970 add     cl, ch ;~ 01A2:5EBD
cs=0x1a2;eip=0x005ebf; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12971 mov     ax, [ebx+edx*2] ;~ 01A2:5EBF
cs=0x1a2;eip=0x005ec3; 	T(CWDE);	// 12972 cwde ;~ 01A2:5EC3
cs=0x1a2;eip=0x005ec5; 	T(ADC(si, bp));	// 12973 adc     si, bp ;~ 01A2:5EC5
cs=0x1a2;eip=0x005ec7; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 12974 add     [di], eax ;~ 01A2:5EC7
cs=0x1a2;eip=0x005eca; 	T(ADD(di, 8));	// 12975 add     di, 8 ;~ 01A2:5ECA
loc_15ecd:
	// 5142 
cs=0x1a2;eip=0x005ecd; 	T(MOV(dl, *(raddr(es,si))));	// 12979 mov     dl, es:[si] ;~ 01A2:5ECD
cs=0x1a2;eip=0x005ed0; 	T(ADD(cl, ch));	// 12980 add     cl, ch ;~ 01A2:5ED0
cs=0x1a2;eip=0x005ed2; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12981 mov     ax, [ebx+edx*2] ;~ 01A2:5ED2
cs=0x1a2;eip=0x005ed6; 	T(CWDE);	// 12982 cwde ;~ 01A2:5ED6
cs=0x1a2;eip=0x005ed8; 	T(ADC(si, bp));	// 12983 adc     si, bp ;~ 01A2:5ED8
cs=0x1a2;eip=0x005eda; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 12984 add     [di], eax ;~ 01A2:5EDA
cs=0x1a2;eip=0x005edd; 	T(ADD(di, 8));	// 12985 add     di, 8 ;~ 01A2:5EDD
loc_15ee0:
	// 5143 
cs=0x1a2;eip=0x005ee0; 	T(MOV(dl, *(raddr(es,si))));	// 12989 mov     dl, es:[si] ;~ 01A2:5EE0
cs=0x1a2;eip=0x005ee3; 	T(ADD(cl, ch));	// 12990 add     cl, ch ;~ 01A2:5EE3
cs=0x1a2;eip=0x005ee5; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 12991 mov     ax, [ebx+edx*2] ;~ 01A2:5EE5
cs=0x1a2;eip=0x005ee9; 	T(CWDE);	// 12992 cwde ;~ 01A2:5EE9
cs=0x1a2;eip=0x005eeb; 	T(ADC(si, bp));	// 12993 adc     si, bp ;~ 01A2:5EEB
cs=0x1a2;eip=0x005eed; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 12994 add     [di], eax ;~ 01A2:5EED
cs=0x1a2;eip=0x005ef0; 	T(ADD(di, 8));	// 12995 add     di, 8 ;~ 01A2:5EF0
loc_15ef3:
	// 5144 
cs=0x1a2;eip=0x005ef3; 	T(MOV(dl, *(raddr(es,si))));	// 12999 mov     dl, es:[si] ;~ 01A2:5EF3
cs=0x1a2;eip=0x005ef6; 	T(ADD(cl, ch));	// 13000 add     cl, ch ;~ 01A2:5EF6
cs=0x1a2;eip=0x005ef8; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13001 mov     ax, [ebx+edx*2] ;~ 01A2:5EF8
cs=0x1a2;eip=0x005efc; 	T(CWDE);	// 13002 cwde ;~ 01A2:5EFC
cs=0x1a2;eip=0x005efe; 	T(ADC(si, bp));	// 13003 adc     si, bp ;~ 01A2:5EFE
cs=0x1a2;eip=0x005f00; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 13004 add     [di], eax ;~ 01A2:5F00
cs=0x1a2;eip=0x005f03; 	T(ADD(di, 8));	// 13005 add     di, 8 ;~ 01A2:5F03
loc_15f06:
	// 5145 
cs=0x1a2;eip=0x005f06; 	T(MOV(dl, *(raddr(es,si))));	// 13009 mov     dl, es:[si] ;~ 01A2:5F06
cs=0x1a2;eip=0x005f09; 	T(ADD(cl, ch));	// 13010 add     cl, ch ;~ 01A2:5F09
cs=0x1a2;eip=0x005f0b; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13011 mov     ax, [ebx+edx*2] ;~ 01A2:5F0B
cs=0x1a2;eip=0x005f0f; 	T(CWDE);	// 13012 cwde ;~ 01A2:5F0F
cs=0x1a2;eip=0x005f11; 	T(ADC(si, bp));	// 13013 adc     si, bp ;~ 01A2:5F11
cs=0x1a2;eip=0x005f13; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 13014 add     [di], eax ;~ 01A2:5F13
cs=0x1a2;eip=0x005f16; 	T(ADD(di, 8));	// 13015 add     di, 8 ;~ 01A2:5F16
loc_15f19:
	// 5146 
cs=0x1a2;eip=0x005f19; 	T(MOV(dl, *(raddr(es,si))));	// 13019 mov     dl, es:[si] ;~ 01A2:5F19
cs=0x1a2;eip=0x005f1c; 	T(ADD(cl, ch));	// 13020 add     cl, ch ;~ 01A2:5F1C
cs=0x1a2;eip=0x005f1e; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13021 mov     ax, [ebx+edx*2] ;~ 01A2:5F1E
cs=0x1a2;eip=0x005f22; 	T(CWDE);	// 13022 cwde ;~ 01A2:5F22
cs=0x1a2;eip=0x005f24; 	T(ADC(si, bp));	// 13023 adc     si, bp ;~ 01A2:5F24
cs=0x1a2;eip=0x005f26; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 13024 add     [di], eax ;~ 01A2:5F26
cs=0x1a2;eip=0x005f29; 	T(ADD(di, 8));	// 13025 add     di, 8 ;~ 01A2:5F29
loc_15f2c:
	// 5147 
cs=0x1a2;eip=0x005f2c; 	T(MOV(dl, *(raddr(es,si))));	// 13029 mov     dl, es:[si] ;~ 01A2:5F2C
cs=0x1a2;eip=0x005f2f; 	T(ADD(cl, ch));	// 13030 add     cl, ch ;~ 01A2:5F2F
cs=0x1a2;eip=0x005f31; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13031 mov     ax, [ebx+edx*2] ;~ 01A2:5F31
cs=0x1a2;eip=0x005f35; 	T(CWDE);	// 13032 cwde ;~ 01A2:5F35
cs=0x1a2;eip=0x005f37; 	T(ADC(si, bp));	// 13033 adc     si, bp ;~ 01A2:5F37
cs=0x1a2;eip=0x005f39; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 13034 add     [di], eax ;~ 01A2:5F39
cs=0x1a2;eip=0x005f3c; 	T(ADD(di, 8));	// 13035 add     di, 8 ;~ 01A2:5F3C
loc_15f3f:
	// 5148 
cs=0x1a2;eip=0x005f3f; 	T(MOV(dl, *(raddr(es,si))));	// 13039 mov     dl, es:[si] ;~ 01A2:5F3F
cs=0x1a2;eip=0x005f42; 	T(ADD(cl, ch));	// 13040 add     cl, ch ;~ 01A2:5F42
cs=0x1a2;eip=0x005f44; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13041 mov     ax, [ebx+edx*2] ;~ 01A2:5F44
cs=0x1a2;eip=0x005f48; 	T(CWDE);	// 13042 cwde ;~ 01A2:5F48
cs=0x1a2;eip=0x005f4a; 	T(ADC(si, bp));	// 13043 adc     si, bp ;~ 01A2:5F4A
cs=0x1a2;eip=0x005f4c; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 13044 add     [di], eax ;~ 01A2:5F4C
cs=0x1a2;eip=0x005f4f; 	T(ADD(di, 8));	// 13045 add     di, 8 ;~ 01A2:5F4F
loc_15f52:
	// 5149 
cs=0x1a2;eip=0x005f52; 	T(MOV(dl, *(raddr(es,si))));	// 13049 mov     dl, es:[si] ;~ 01A2:5F52
cs=0x1a2;eip=0x005f55; 	T(ADD(cl, ch));	// 13050 add     cl, ch ;~ 01A2:5F55
cs=0x1a2;eip=0x005f57; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13051 mov     ax, [ebx+edx*2] ;~ 01A2:5F57
cs=0x1a2;eip=0x005f5b; 	T(CWDE);	// 13052 cwde ;~ 01A2:5F5B
cs=0x1a2;eip=0x005f5d; 	T(ADC(si, bp));	// 13053 adc     si, bp ;~ 01A2:5F5D
cs=0x1a2;eip=0x005f5f; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 13054 add     [di], eax ;~ 01A2:5F5F
cs=0x1a2;eip=0x005f62; 	T(ADD(di, 8));	// 13055 add     di, 8 ;~ 01A2:5F62
loc_15f65:
	// 5150 
cs=0x1a2;eip=0x005f65; 	T(MOV(dl, *(raddr(es,si))));	// 13059 mov     dl, es:[si] ;~ 01A2:5F65
cs=0x1a2;eip=0x005f68; 	T(ADD(cl, ch));	// 13060 add     cl, ch ;~ 01A2:5F68
cs=0x1a2;eip=0x005f6a; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13061 mov     ax, [ebx+edx*2] ;~ 01A2:5F6A
cs=0x1a2;eip=0x005f6e; 	T(CWDE);	// 13062 cwde ;~ 01A2:5F6E
cs=0x1a2;eip=0x005f70; 	T(ADC(si, bp));	// 13063 adc     si, bp ;~ 01A2:5F70
cs=0x1a2;eip=0x005f72; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 13064 add     [di], eax ;~ 01A2:5F72
cs=0x1a2;eip=0x005f75; 	T(ADD(di, 8));	// 13065 add     di, 8 ;~ 01A2:5F75
loc_15f78:
	// 5151 
cs=0x1a2;eip=0x005f78; 	T(CMP(byte_24683, 0));	// 13069 cmp     byte_24683, 0 ;~ 01A2:5F78
cs=0x1a2;eip=0x005f7d; 	J(JZ(loc_1578c));	// 13070 jz      loc_1578C ;~ 01A2:5F7D
loc_15f81:
	// 5152 
cs=0x1a2;eip=0x005f81; 	T(MOV(dl, *(raddr(es,si))));	// 13073 mov     dl, es:[si] ;~ 01A2:5F81
cs=0x1a2;eip=0x005f84; 	T(ADD(cl, ch));	// 13074 add     cl, ch ;~ 01A2:5F84
cs=0x1a2;eip=0x005f86; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13075 mov     ax, [ebx+edx*2] ;~ 01A2:5F86
cs=0x1a2;eip=0x005f8a; 	T(CWDE);	// 13076 cwde ;~ 01A2:5F8A
cs=0x1a2;eip=0x005f8c; 	T(ADC(si, bp));	// 13077 adc     si, bp ;~ 01A2:5F8C
cs=0x1a2;eip=0x005f8e; 	X(ADD(*(dd*)(raddr(ds,di)), eax));	// 13078 add     [di], eax ;~ 01A2:5F8E
cs=0x1a2;eip=0x005f91; 	T(MOV(dl, *(raddr(es,si))));	// 13079 mov     dl, es:[si] ;~ 01A2:5F91
cs=0x1a2;eip=0x005f94; 	T(ADD(cl, ch));	// 13080 add     cl, ch ;~ 01A2:5F94
cs=0x1a2;eip=0x005f96; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13081 mov     ax, [ebx+edx*2] ;~ 01A2:5F96
cs=0x1a2;eip=0x005f9a; 	T(CWDE);	// 13082 cwde ;~ 01A2:5F9A
cs=0x1a2;eip=0x005f9c; 	T(ADC(si, bp));	// 13083 adc     si, bp ;~ 01A2:5F9C
cs=0x1a2;eip=0x005f9e; 	X(ADD(*(dd*)(raddr(ds,di+8)), eax));	// 13084 add     [di+8], eax ;~ 01A2:5F9E
cs=0x1a2;eip=0x005fa2; 	T(MOV(dl, *(raddr(es,si))));	// 13085 mov     dl, es:[si] ;~ 01A2:5FA2
cs=0x1a2;eip=0x005fa5; 	T(ADD(cl, ch));	// 13086 add     cl, ch ;~ 01A2:5FA5
cs=0x1a2;eip=0x005fa7; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13087 mov     ax, [ebx+edx*2] ;~ 01A2:5FA7
cs=0x1a2;eip=0x005fab; 	T(CWDE);	// 13088 cwde ;~ 01A2:5FAB
cs=0x1a2;eip=0x005fad; 	T(ADC(si, bp));	// 13089 adc     si, bp ;~ 01A2:5FAD
cs=0x1a2;eip=0x005faf; 	X(ADD(*(dd*)(raddr(ds,di+0x10)), eax));	// 13090 add     [di+10h], eax ;~ 01A2:5FAF
cs=0x1a2;eip=0x005fb3; 	T(MOV(dl, *(raddr(es,si))));	// 13091 mov     dl, es:[si] ;~ 01A2:5FB3
cs=0x1a2;eip=0x005fb6; 	T(ADD(cl, ch));	// 13092 add     cl, ch ;~ 01A2:5FB6
cs=0x1a2;eip=0x005fb8; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13093 mov     ax, [ebx+edx*2] ;~ 01A2:5FB8
cs=0x1a2;eip=0x005fbc; 	T(CWDE);	// 13094 cwde ;~ 01A2:5FBC
cs=0x1a2;eip=0x005fbe; 	T(ADC(si, bp));	// 13095 adc     si, bp ;~ 01A2:5FBE
cs=0x1a2;eip=0x005fc0; 	X(ADD(*(dd*)(raddr(ds,di+0x18)), eax));	// 13096 add     [di+18h], eax ;~ 01A2:5FC0
cs=0x1a2;eip=0x005fc4; 	T(MOV(dl, *(raddr(es,si))));	// 13097 mov     dl, es:[si] ;~ 01A2:5FC4
cs=0x1a2;eip=0x005fc7; 	T(ADD(cl, ch));	// 13098 add     cl, ch ;~ 01A2:5FC7
cs=0x1a2;eip=0x005fc9; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13099 mov     ax, [ebx+edx*2] ;~ 01A2:5FC9
cs=0x1a2;eip=0x005fcd; 	T(CWDE);	// 13100 cwde ;~ 01A2:5FCD
cs=0x1a2;eip=0x005fcf; 	T(ADC(si, bp));	// 13101 adc     si, bp ;~ 01A2:5FCF
cs=0x1a2;eip=0x005fd1; 	X(ADD(*(dd*)(raddr(ds,di+0x20)), eax));	// 13102 add     [di+20h], eax ;~ 01A2:5FD1
cs=0x1a2;eip=0x005fd5; 	T(MOV(dl, *(raddr(es,si))));	// 13103 mov     dl, es:[si] ;~ 01A2:5FD5
cs=0x1a2;eip=0x005fd8; 	T(ADD(cl, ch));	// 13104 add     cl, ch ;~ 01A2:5FD8
cs=0x1a2;eip=0x005fda; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13105 mov     ax, [ebx+edx*2] ;~ 01A2:5FDA
cs=0x1a2;eip=0x005fde; 	T(CWDE);	// 13106 cwde ;~ 01A2:5FDE
cs=0x1a2;eip=0x005fe0; 	T(ADC(si, bp));	// 13107 adc     si, bp ;~ 01A2:5FE0
cs=0x1a2;eip=0x005fe2; 	X(ADD(*(dd*)(raddr(ds,di+0x28)), eax));	// 13108 add     [di+28h], eax ;~ 01A2:5FE2
cs=0x1a2;eip=0x005fe6; 	T(MOV(dl, *(raddr(es,si))));	// 13109 mov     dl, es:[si] ;~ 01A2:5FE6
cs=0x1a2;eip=0x005fe9; 	T(ADD(cl, ch));	// 13110 add     cl, ch ;~ 01A2:5FE9
cs=0x1a2;eip=0x005feb; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13111 mov     ax, [ebx+edx*2] ;~ 01A2:5FEB
cs=0x1a2;eip=0x005fef; 	T(CWDE);	// 13112 cwde ;~ 01A2:5FEF
cs=0x1a2;eip=0x005ff1; 	T(ADC(si, bp));	// 13113 adc     si, bp ;~ 01A2:5FF1
cs=0x1a2;eip=0x005ff3; 	X(ADD(*(dd*)(raddr(ds,di+0x30)), eax));	// 13114 add     [di+30h], eax ;~ 01A2:5FF3
cs=0x1a2;eip=0x005ff7; 	T(MOV(dl, *(raddr(es,si))));	// 13115 mov     dl, es:[si] ;~ 01A2:5FF7
cs=0x1a2;eip=0x005ffa; 	T(ADD(cl, ch));	// 13116 add     cl, ch ;~ 01A2:5FFA
cs=0x1a2;eip=0x005ffc; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13117 mov     ax, [ebx+edx*2] ;~ 01A2:5FFC
cs=0x1a2;eip=0x006000; 	T(CWDE);	// 13118 cwde ;~ 01A2:6000
cs=0x1a2;eip=0x006002; 	T(ADC(si, bp));	// 13119 adc     si, bp ;~ 01A2:6002
cs=0x1a2;eip=0x006004; 	X(ADD(*(dd*)(raddr(ds,di+0x38)), eax));	// 13120 add     [di+38h], eax ;~ 01A2:6004
cs=0x1a2;eip=0x006008; 	T(MOV(dl, *(raddr(es,si))));	// 13121 mov     dl, es:[si] ;~ 01A2:6008
cs=0x1a2;eip=0x00600b; 	T(ADD(cl, ch));	// 13122 add     cl, ch ;~ 01A2:600B
cs=0x1a2;eip=0x00600d; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13123 mov     ax, [ebx+edx*2] ;~ 01A2:600D
cs=0x1a2;eip=0x006011; 	T(CWDE);	// 13124 cwde ;~ 01A2:6011
cs=0x1a2;eip=0x006013; 	T(ADC(si, bp));	// 13125 adc     si, bp ;~ 01A2:6013
cs=0x1a2;eip=0x006015; 	X(ADD(*(dd*)(raddr(ds,di+0x40)), eax));	// 13126 add     [di+40h], eax ;~ 01A2:6015
cs=0x1a2;eip=0x006019; 	T(MOV(dl, *(raddr(es,si))));	// 13127 mov     dl, es:[si] ;~ 01A2:6019
cs=0x1a2;eip=0x00601c; 	T(ADD(cl, ch));	// 13128 add     cl, ch ;~ 01A2:601C
cs=0x1a2;eip=0x00601e; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13129 mov     ax, [ebx+edx*2] ;~ 01A2:601E
cs=0x1a2;eip=0x006022; 	T(CWDE);	// 13130 cwde ;~ 01A2:6022
cs=0x1a2;eip=0x006024; 	T(ADC(si, bp));	// 13131 adc     si, bp ;~ 01A2:6024
cs=0x1a2;eip=0x006026; 	X(ADD(*(dd*)(raddr(ds,di+0x48)), eax));	// 13132 add     [di+48h], eax ;~ 01A2:6026
cs=0x1a2;eip=0x00602a; 	T(MOV(dl, *(raddr(es,si))));	// 13133 mov     dl, es:[si] ;~ 01A2:602A
cs=0x1a2;eip=0x00602d; 	T(ADD(cl, ch));	// 13134 add     cl, ch ;~ 01A2:602D
cs=0x1a2;eip=0x00602f; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13135 mov     ax, [ebx+edx*2] ;~ 01A2:602F
cs=0x1a2;eip=0x006033; 	T(CWDE);	// 13136 cwde ;~ 01A2:6033
cs=0x1a2;eip=0x006035; 	T(ADC(si, bp));	// 13137 adc     si, bp ;~ 01A2:6035
cs=0x1a2;eip=0x006037; 	X(ADD(*(dd*)(raddr(ds,di+0x50)), eax));	// 13138 add     [di+50h], eax ;~ 01A2:6037
cs=0x1a2;eip=0x00603b; 	T(MOV(dl, *(raddr(es,si))));	// 13139 mov     dl, es:[si] ;~ 01A2:603B
cs=0x1a2;eip=0x00603e; 	T(ADD(cl, ch));	// 13140 add     cl, ch ;~ 01A2:603E
cs=0x1a2;eip=0x006040; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13141 mov     ax, [ebx+edx*2] ;~ 01A2:6040
cs=0x1a2;eip=0x006044; 	T(CWDE);	// 13142 cwde ;~ 01A2:6044
cs=0x1a2;eip=0x006046; 	T(ADC(si, bp));	// 13143 adc     si, bp ;~ 01A2:6046
cs=0x1a2;eip=0x006048; 	X(ADD(*(dd*)(raddr(ds,di+0x58)), eax));	// 13144 add     [di+58h], eax ;~ 01A2:6048
cs=0x1a2;eip=0x00604c; 	T(MOV(dl, *(raddr(es,si))));	// 13145 mov     dl, es:[si] ;~ 01A2:604C
cs=0x1a2;eip=0x00604f; 	T(ADD(cl, ch));	// 13146 add     cl, ch ;~ 01A2:604F
cs=0x1a2;eip=0x006051; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13147 mov     ax, [ebx+edx*2] ;~ 01A2:6051
cs=0x1a2;eip=0x006055; 	T(CWDE);	// 13148 cwde ;~ 01A2:6055
cs=0x1a2;eip=0x006057; 	T(ADC(si, bp));	// 13149 adc     si, bp ;~ 01A2:6057
cs=0x1a2;eip=0x006059; 	X(ADD(*(dd*)(raddr(ds,di+0x60)), eax));	// 13150 add     [di+60h], eax ;~ 01A2:6059
cs=0x1a2;eip=0x00605d; 	T(MOV(dl, *(raddr(es,si))));	// 13151 mov     dl, es:[si] ;~ 01A2:605D
cs=0x1a2;eip=0x006060; 	T(ADD(cl, ch));	// 13152 add     cl, ch ;~ 01A2:6060
cs=0x1a2;eip=0x006062; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13153 mov     ax, [ebx+edx*2] ;~ 01A2:6062
cs=0x1a2;eip=0x006066; 	T(CWDE);	// 13154 cwde ;~ 01A2:6066
cs=0x1a2;eip=0x006068; 	T(ADC(si, bp));	// 13155 adc     si, bp ;~ 01A2:6068
cs=0x1a2;eip=0x00606a; 	X(ADD(*(dd*)(raddr(ds,di+0x68)), eax));	// 13156 add     [di+68h], eax ;~ 01A2:606A
cs=0x1a2;eip=0x00606e; 	T(MOV(dl, *(raddr(es,si))));	// 13157 mov     dl, es:[si] ;~ 01A2:606E
cs=0x1a2;eip=0x006071; 	T(ADD(cl, ch));	// 13158 add     cl, ch ;~ 01A2:6071
cs=0x1a2;eip=0x006073; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13159 mov     ax, [ebx+edx*2] ;~ 01A2:6073
cs=0x1a2;eip=0x006077; 	T(CWDE);	// 13160 cwde ;~ 01A2:6077
cs=0x1a2;eip=0x006079; 	T(ADC(si, bp));	// 13161 adc     si, bp ;~ 01A2:6079
cs=0x1a2;eip=0x00607b; 	X(ADD(*(dd*)(raddr(ds,di+0x70)), eax));	// 13162 add     [di+70h], eax ;~ 01A2:607B
cs=0x1a2;eip=0x00607f; 	T(MOV(dl, *(raddr(es,si))));	// 13163 mov     dl, es:[si] ;~ 01A2:607F
cs=0x1a2;eip=0x006082; 	T(ADD(cl, ch));	// 13164 add     cl, ch ;~ 01A2:6082
cs=0x1a2;eip=0x006084; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13165 mov     ax, [ebx+edx*2] ;~ 01A2:6084
cs=0x1a2;eip=0x006088; 	T(CWDE);	// 13166 cwde ;~ 01A2:6088
cs=0x1a2;eip=0x00608a; 	T(ADC(si, bp));	// 13167 adc     si, bp ;~ 01A2:608A
cs=0x1a2;eip=0x00608c; 	X(ADD(*(dd*)(raddr(ds,di+0x78)), eax));	// 13168 add     [di+78h], eax ;~ 01A2:608C
cs=0x1a2;eip=0x006090; 	T(ADD(di, 0x80));	// 13169 add     di, 80h ; '€' ;~ 01A2:6090
cs=0x1a2;eip=0x006094; 	X(DEC(byte_24683));	// 13170 dec     byte_24683 ;~ 01A2:6094
cs=0x1a2;eip=0x006098; 	J(JNZ(loc_15f81));	// 13171 jnz     loc_15F81 ;~ 01A2:6098
cs=0x1a2;eip=0x00609c; 	J(JMP(loc_1578c));	// 13172 jmp     loc_1578C ;~ 01A2:609C
sub_1609f:
	// 13178 
cs=0x1a2;eip=0x00609f; 	T(TEST(*(raddr(ds,si+0x17)), 1));	// 13202 test    byte ptr [si+17h], 1 ;~ 01A2:609F
cs=0x1a2;eip=0x0060a3; 	J(JZ(loc_16bb0));	// 13203 jz      loc_16BB0 ;~ 01A2:60A3
cs=0x1a2;eip=0x0060a7; 	X(PUSH(si));	// 13204 push    si ;~ 01A2:60A7
cs=0x1a2;eip=0x0060a8; 	J(CALL(sub_154f4,0));	// 13205 call    sub_154F4 ;~ 01A2:60A8
cs=0x1a2;eip=0x0060ab; 	T(TEST(_flag_playsetttings, 0x10));	// 13206 test    _flag_playsetttings, 10h ;~ 01A2:60AB
cs=0x1a2;eip=0x0060b0; 	J(JNZ(loc_162b7));	// 13207 jnz     loc_162B7 ;~ 01A2:60B0
cs=0x1a2;eip=0x0060b4; 	T(CMP(byte_24625, 1));	// 13208 cmp     byte_24625, 1 ;~ 01A2:60B4
cs=0x1a2;eip=0x0060b9; 	J(JZ(loc_16959));	// 13209 jz      loc_16959 ;~ 01A2:60B9
cs=0x1a2;eip=0x0060bd; 	T(XOR(edx, edx));	// 13210 xor     edx, edx ;~ 01A2:60BD
cs=0x1a2;eip=0x0060c0; 	T(MOV(ax, word_245e4));	// 13211 mov     ax, word_245E4 ;~ 01A2:60C0
cs=0x1a2;eip=0x0060c3; 	T(AND(eax, 0x0F));	// 13212 and     eax, 0Fh ;~ 01A2:60C3
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0060c7; __disp=*(dw*)(((db*)&_offs_noninterp2)+eax*2);
	J(return __dispatch_call(__disp, _state););	// 13213 jmp     cs:_offs_noninterp2[eax*2] ;~ 01A2:60C7
loc_160d0:
	// 5153 
cs=0x1a2;eip=0x0060d0; 	T(MOV(dl, *(raddr(es,si))));	// 13218 mov     dl, es:[si] ;~ 01A2:60D0
cs=0x1a2;eip=0x0060d3; 	T(ADD(cl, ch));	// 13219 add     cl, ch ;~ 01A2:60D3
cs=0x1a2;eip=0x0060d5; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13220 mov     ax, [ebx+edx*2] ;~ 01A2:60D5
cs=0x1a2;eip=0x0060d9; 	T(ADC(si, bp));	// 13221 adc     si, bp ;~ 01A2:60D9
cs=0x1a2;eip=0x0060db; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 13222 mov     [di], ax ;~ 01A2:60DB
cs=0x1a2;eip=0x0060dd; 	T(ADD(di, 8));	// 13223 add     di, 8 ;~ 01A2:60DD
loc_160e0:
	// 5154 
cs=0x1a2;eip=0x0060e0; 	T(MOV(dl, *(raddr(es,si))));	// 13227 mov     dl, es:[si] ;~ 01A2:60E0
cs=0x1a2;eip=0x0060e3; 	T(ADD(cl, ch));	// 13228 add     cl, ch ;~ 01A2:60E3
cs=0x1a2;eip=0x0060e5; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13229 mov     ax, [ebx+edx*2] ;~ 01A2:60E5
cs=0x1a2;eip=0x0060e9; 	T(ADC(si, bp));	// 13230 adc     si, bp ;~ 01A2:60E9
cs=0x1a2;eip=0x0060eb; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 13231 mov     [di], ax ;~ 01A2:60EB
cs=0x1a2;eip=0x0060ed; 	T(ADD(di, 8));	// 13232 add     di, 8 ;~ 01A2:60ED
loc_160f0:
	// 5155 
cs=0x1a2;eip=0x0060f0; 	T(MOV(dl, *(raddr(es,si))));	// 13236 mov     dl, es:[si] ;~ 01A2:60F0
cs=0x1a2;eip=0x0060f3; 	T(ADD(cl, ch));	// 13237 add     cl, ch ;~ 01A2:60F3
cs=0x1a2;eip=0x0060f5; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13238 mov     ax, [ebx+edx*2] ;~ 01A2:60F5
cs=0x1a2;eip=0x0060f9; 	T(ADC(si, bp));	// 13239 adc     si, bp ;~ 01A2:60F9
cs=0x1a2;eip=0x0060fb; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 13240 mov     [di], ax ;~ 01A2:60FB
cs=0x1a2;eip=0x0060fd; 	T(ADD(di, 8));	// 13241 add     di, 8 ;~ 01A2:60FD
loc_16100:
	// 5156 
cs=0x1a2;eip=0x006100; 	T(MOV(dl, *(raddr(es,si))));	// 13245 mov     dl, es:[si] ;~ 01A2:6100
cs=0x1a2;eip=0x006103; 	T(ADD(cl, ch));	// 13246 add     cl, ch ;~ 01A2:6103
cs=0x1a2;eip=0x006105; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13247 mov     ax, [ebx+edx*2] ;~ 01A2:6105
cs=0x1a2;eip=0x006109; 	T(ADC(si, bp));	// 13248 adc     si, bp ;~ 01A2:6109
cs=0x1a2;eip=0x00610b; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 13249 mov     [di], ax ;~ 01A2:610B
cs=0x1a2;eip=0x00610d; 	T(ADD(di, 8));	// 13250 add     di, 8 ;~ 01A2:610D
loc_16110:
	// 5157 
cs=0x1a2;eip=0x006110; 	T(MOV(dl, *(raddr(es,si))));	// 13254 mov     dl, es:[si] ;~ 01A2:6110
cs=0x1a2;eip=0x006113; 	T(ADD(cl, ch));	// 13255 add     cl, ch ;~ 01A2:6113
cs=0x1a2;eip=0x006115; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13256 mov     ax, [ebx+edx*2] ;~ 01A2:6115
cs=0x1a2;eip=0x006119; 	T(ADC(si, bp));	// 13257 adc     si, bp ;~ 01A2:6119
cs=0x1a2;eip=0x00611b; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 13258 mov     [di], ax ;~ 01A2:611B
cs=0x1a2;eip=0x00611d; 	T(ADD(di, 8));	// 13259 add     di, 8 ;~ 01A2:611D
loc_16120:
	// 5158 
cs=0x1a2;eip=0x006120; 	T(MOV(dl, *(raddr(es,si))));	// 13263 mov     dl, es:[si] ;~ 01A2:6120
cs=0x1a2;eip=0x006123; 	T(ADD(cl, ch));	// 13264 add     cl, ch ;~ 01A2:6123
cs=0x1a2;eip=0x006125; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13265 mov     ax, [ebx+edx*2] ;~ 01A2:6125
cs=0x1a2;eip=0x006129; 	T(ADC(si, bp));	// 13266 adc     si, bp ;~ 01A2:6129
cs=0x1a2;eip=0x00612b; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 13267 mov     [di], ax ;~ 01A2:612B
cs=0x1a2;eip=0x00612d; 	T(ADD(di, 8));	// 13268 add     di, 8 ;~ 01A2:612D
loc_16130:
	// 5159 
cs=0x1a2;eip=0x006130; 	T(MOV(dl, *(raddr(es,si))));	// 13272 mov     dl, es:[si] ;~ 01A2:6130
cs=0x1a2;eip=0x006133; 	T(ADD(cl, ch));	// 13273 add     cl, ch ;~ 01A2:6133
cs=0x1a2;eip=0x006135; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13274 mov     ax, [ebx+edx*2] ;~ 01A2:6135
cs=0x1a2;eip=0x006139; 	T(ADC(si, bp));	// 13275 adc     si, bp ;~ 01A2:6139
cs=0x1a2;eip=0x00613b; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 13276 mov     [di], ax ;~ 01A2:613B
cs=0x1a2;eip=0x00613d; 	T(ADD(di, 8));	// 13277 add     di, 8 ;~ 01A2:613D
loc_16140:
	// 5160 
cs=0x1a2;eip=0x006140; 	T(MOV(dl, *(raddr(es,si))));	// 13281 mov     dl, es:[si] ;~ 01A2:6140
cs=0x1a2;eip=0x006143; 	T(ADD(cl, ch));	// 13282 add     cl, ch ;~ 01A2:6143
cs=0x1a2;eip=0x006145; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13283 mov     ax, [ebx+edx*2] ;~ 01A2:6145
cs=0x1a2;eip=0x006149; 	T(ADC(si, bp));	// 13284 adc     si, bp ;~ 01A2:6149
cs=0x1a2;eip=0x00614b; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 13285 mov     [di], ax ;~ 01A2:614B
cs=0x1a2;eip=0x00614d; 	T(ADD(di, 8));	// 13286 add     di, 8 ;~ 01A2:614D
loc_16150:
	// 5161 
cs=0x1a2;eip=0x006150; 	T(MOV(dl, *(raddr(es,si))));	// 13290 mov     dl, es:[si] ;~ 01A2:6150
cs=0x1a2;eip=0x006153; 	T(ADD(cl, ch));	// 13291 add     cl, ch ;~ 01A2:6153
cs=0x1a2;eip=0x006155; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13292 mov     ax, [ebx+edx*2] ;~ 01A2:6155
cs=0x1a2;eip=0x006159; 	T(ADC(si, bp));	// 13293 adc     si, bp ;~ 01A2:6159
cs=0x1a2;eip=0x00615b; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 13294 mov     [di], ax ;~ 01A2:615B
cs=0x1a2;eip=0x00615d; 	T(ADD(di, 8));	// 13295 add     di, 8 ;~ 01A2:615D
loc_16160:
	// 5162 
cs=0x1a2;eip=0x006160; 	T(MOV(dl, *(raddr(es,si))));	// 13299 mov     dl, es:[si] ;~ 01A2:6160
cs=0x1a2;eip=0x006163; 	T(ADD(cl, ch));	// 13300 add     cl, ch ;~ 01A2:6163
cs=0x1a2;eip=0x006165; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13301 mov     ax, [ebx+edx*2] ;~ 01A2:6165
cs=0x1a2;eip=0x006169; 	T(ADC(si, bp));	// 13302 adc     si, bp ;~ 01A2:6169
cs=0x1a2;eip=0x00616b; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 13303 mov     [di], ax ;~ 01A2:616B
cs=0x1a2;eip=0x00616d; 	T(ADD(di, 8));	// 13304 add     di, 8 ;~ 01A2:616D
loc_16170:
	// 5163 
cs=0x1a2;eip=0x006170; 	T(MOV(dl, *(raddr(es,si))));	// 13308 mov     dl, es:[si] ;~ 01A2:6170
cs=0x1a2;eip=0x006173; 	T(ADD(cl, ch));	// 13309 add     cl, ch ;~ 01A2:6173
cs=0x1a2;eip=0x006175; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13310 mov     ax, [ebx+edx*2] ;~ 01A2:6175
cs=0x1a2;eip=0x006179; 	T(ADC(si, bp));	// 13311 adc     si, bp ;~ 01A2:6179
cs=0x1a2;eip=0x00617b; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 13312 mov     [di], ax ;~ 01A2:617B
cs=0x1a2;eip=0x00617d; 	T(ADD(di, 8));	// 13313 add     di, 8 ;~ 01A2:617D
loc_16180:
	// 5164 
cs=0x1a2;eip=0x006180; 	T(MOV(dl, *(raddr(es,si))));	// 13317 mov     dl, es:[si] ;~ 01A2:6180
cs=0x1a2;eip=0x006183; 	T(ADD(cl, ch));	// 13318 add     cl, ch ;~ 01A2:6183
cs=0x1a2;eip=0x006185; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13319 mov     ax, [ebx+edx*2] ;~ 01A2:6185
cs=0x1a2;eip=0x006189; 	T(ADC(si, bp));	// 13320 adc     si, bp ;~ 01A2:6189
cs=0x1a2;eip=0x00618b; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 13321 mov     [di], ax ;~ 01A2:618B
cs=0x1a2;eip=0x00618d; 	T(ADD(di, 8));	// 13322 add     di, 8 ;~ 01A2:618D
loc_16190:
	// 5165 
cs=0x1a2;eip=0x006190; 	T(MOV(dl, *(raddr(es,si))));	// 13326 mov     dl, es:[si] ;~ 01A2:6190
cs=0x1a2;eip=0x006193; 	T(ADD(cl, ch));	// 13327 add     cl, ch ;~ 01A2:6193
cs=0x1a2;eip=0x006195; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13328 mov     ax, [ebx+edx*2] ;~ 01A2:6195
cs=0x1a2;eip=0x006199; 	T(ADC(si, bp));	// 13329 adc     si, bp ;~ 01A2:6199
cs=0x1a2;eip=0x00619b; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 13330 mov     [di], ax ;~ 01A2:619B
cs=0x1a2;eip=0x00619d; 	T(ADD(di, 8));	// 13331 add     di, 8 ;~ 01A2:619D
loc_161a0:
	// 5166 
cs=0x1a2;eip=0x0061a0; 	T(MOV(dl, *(raddr(es,si))));	// 13335 mov     dl, es:[si] ;~ 01A2:61A0
cs=0x1a2;eip=0x0061a3; 	T(ADD(cl, ch));	// 13336 add     cl, ch ;~ 01A2:61A3
cs=0x1a2;eip=0x0061a5; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13337 mov     ax, [ebx+edx*2] ;~ 01A2:61A5
cs=0x1a2;eip=0x0061a9; 	T(ADC(si, bp));	// 13338 adc     si, bp ;~ 01A2:61A9
cs=0x1a2;eip=0x0061ab; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 13339 mov     [di], ax ;~ 01A2:61AB
cs=0x1a2;eip=0x0061ad; 	T(ADD(di, 8));	// 13340 add     di, 8 ;~ 01A2:61AD
loc_161b0:
	// 5167 
cs=0x1a2;eip=0x0061b0; 	T(MOV(dl, *(raddr(es,si))));	// 13344 mov     dl, es:[si] ;~ 01A2:61B0
cs=0x1a2;eip=0x0061b3; 	T(ADD(cl, ch));	// 13345 add     cl, ch ;~ 01A2:61B3
cs=0x1a2;eip=0x0061b5; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13346 mov     ax, [ebx+edx*2] ;~ 01A2:61B5
cs=0x1a2;eip=0x0061b9; 	T(ADC(si, bp));	// 13347 adc     si, bp ;~ 01A2:61B9
cs=0x1a2;eip=0x0061bb; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 13348 mov     [di], ax ;~ 01A2:61BB
cs=0x1a2;eip=0x0061bd; 	T(ADD(di, 8));	// 13349 add     di, 8 ;~ 01A2:61BD
loc_161c0:
	// 5168 
cs=0x1a2;eip=0x0061c0; 	T(CMP(byte_24683, 0));	// 13353 cmp     byte_24683, 0 ;~ 01A2:61C0
cs=0x1a2;eip=0x0061c5; 	J(JZ(loc_1578c));	// 13354 jz      loc_1578C ;~ 01A2:61C5
loc_161c9:
	// 5169 
cs=0x1a2;eip=0x0061c9; 	T(MOV(dl, *(raddr(es,si))));	// 13357 mov     dl, es:[si] ;~ 01A2:61C9
cs=0x1a2;eip=0x0061cc; 	T(ADD(cl, ch));	// 13358 add     cl, ch ;~ 01A2:61CC
cs=0x1a2;eip=0x0061ce; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13359 mov     ax, [ebx+edx*2] ;~ 01A2:61CE
cs=0x1a2;eip=0x0061d2; 	T(ADC(si, bp));	// 13360 adc     si, bp ;~ 01A2:61D2
cs=0x1a2;eip=0x0061d4; 	X(MOV(*(dw*)(raddr(ds,di)), ax));	// 13361 mov     [di], ax ;~ 01A2:61D4
cs=0x1a2;eip=0x0061d6; 	T(MOV(dl, *(raddr(es,si))));	// 13362 mov     dl, es:[si] ;~ 01A2:61D6
cs=0x1a2;eip=0x0061d9; 	T(ADD(cl, ch));	// 13363 add     cl, ch ;~ 01A2:61D9
cs=0x1a2;eip=0x0061db; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13364 mov     ax, [ebx+edx*2] ;~ 01A2:61DB
cs=0x1a2;eip=0x0061df; 	T(ADC(si, bp));	// 13365 adc     si, bp ;~ 01A2:61DF
cs=0x1a2;eip=0x0061e1; 	X(MOV(*(dw*)(raddr(ds,di+8)), ax));	// 13366 mov     [di+8], ax ;~ 01A2:61E1
cs=0x1a2;eip=0x0061e4; 	T(MOV(dl, *(raddr(es,si))));	// 13367 mov     dl, es:[si] ;~ 01A2:61E4
cs=0x1a2;eip=0x0061e7; 	T(ADD(cl, ch));	// 13368 add     cl, ch ;~ 01A2:61E7
cs=0x1a2;eip=0x0061e9; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13369 mov     ax, [ebx+edx*2] ;~ 01A2:61E9
cs=0x1a2;eip=0x0061ed; 	T(ADC(si, bp));	// 13370 adc     si, bp ;~ 01A2:61ED
cs=0x1a2;eip=0x0061ef; 	X(MOV(*(dw*)(raddr(ds,di+0x10)), ax));	// 13371 mov     [di+10h], ax ;~ 01A2:61EF
cs=0x1a2;eip=0x0061f2; 	T(MOV(dl, *(raddr(es,si))));	// 13372 mov     dl, es:[si] ;~ 01A2:61F2
cs=0x1a2;eip=0x0061f5; 	T(ADD(cl, ch));	// 13373 add     cl, ch ;~ 01A2:61F5
cs=0x1a2;eip=0x0061f7; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13374 mov     ax, [ebx+edx*2] ;~ 01A2:61F7
cs=0x1a2;eip=0x0061fb; 	T(ADC(si, bp));	// 13375 adc     si, bp ;~ 01A2:61FB
cs=0x1a2;eip=0x0061fd; 	X(MOV(*(dw*)(raddr(ds,di+0x18)), ax));	// 13376 mov     [di+18h], ax ;~ 01A2:61FD
cs=0x1a2;eip=0x006200; 	T(MOV(dl, *(raddr(es,si))));	// 13377 mov     dl, es:[si] ;~ 01A2:6200
cs=0x1a2;eip=0x006203; 	T(ADD(cl, ch));	// 13378 add     cl, ch ;~ 01A2:6203
cs=0x1a2;eip=0x006205; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13379 mov     ax, [ebx+edx*2] ;~ 01A2:6205
cs=0x1a2;eip=0x006209; 	T(ADC(si, bp));	// 13380 adc     si, bp ;~ 01A2:6209
cs=0x1a2;eip=0x00620b; 	X(MOV(*(dw*)(raddr(ds,di+0x20)), ax));	// 13381 mov     [di+20h], ax ;~ 01A2:620B
cs=0x1a2;eip=0x00620e; 	T(MOV(dl, *(raddr(es,si))));	// 13382 mov     dl, es:[si] ;~ 01A2:620E
cs=0x1a2;eip=0x006211; 	T(ADD(cl, ch));	// 13383 add     cl, ch ;~ 01A2:6211
cs=0x1a2;eip=0x006213; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13384 mov     ax, [ebx+edx*2] ;~ 01A2:6213
cs=0x1a2;eip=0x006217; 	T(ADC(si, bp));	// 13385 adc     si, bp ;~ 01A2:6217
cs=0x1a2;eip=0x006219; 	X(MOV(*(dw*)(raddr(ds,di+0x28)), ax));	// 13386 mov     [di+28h], ax ;~ 01A2:6219
cs=0x1a2;eip=0x00621c; 	T(MOV(dl, *(raddr(es,si))));	// 13387 mov     dl, es:[si] ;~ 01A2:621C
cs=0x1a2;eip=0x00621f; 	T(ADD(cl, ch));	// 13388 add     cl, ch ;~ 01A2:621F
cs=0x1a2;eip=0x006221; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13389 mov     ax, [ebx+edx*2] ;~ 01A2:6221
cs=0x1a2;eip=0x006225; 	T(ADC(si, bp));	// 13390 adc     si, bp ;~ 01A2:6225
cs=0x1a2;eip=0x006227; 	X(MOV(*(dw*)(raddr(ds,di+0x30)), ax));	// 13391 mov     [di+30h], ax ;~ 01A2:6227
cs=0x1a2;eip=0x00622a; 	T(MOV(dl, *(raddr(es,si))));	// 13392 mov     dl, es:[si] ;~ 01A2:622A
cs=0x1a2;eip=0x00622d; 	T(ADD(cl, ch));	// 13393 add     cl, ch ;~ 01A2:622D
cs=0x1a2;eip=0x00622f; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13394 mov     ax, [ebx+edx*2] ;~ 01A2:622F
cs=0x1a2;eip=0x006233; 	T(ADC(si, bp));	// 13395 adc     si, bp ;~ 01A2:6233
cs=0x1a2;eip=0x006235; 	X(MOV(*(dw*)(raddr(ds,di+0x38)), ax));	// 13396 mov     [di+38h], ax ;~ 01A2:6235
cs=0x1a2;eip=0x006238; 	T(MOV(dl, *(raddr(es,si))));	// 13397 mov     dl, es:[si] ;~ 01A2:6238
cs=0x1a2;eip=0x00623b; 	T(ADD(cl, ch));	// 13398 add     cl, ch ;~ 01A2:623B
cs=0x1a2;eip=0x00623d; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13399 mov     ax, [ebx+edx*2] ;~ 01A2:623D
cs=0x1a2;eip=0x006241; 	T(ADC(si, bp));	// 13400 adc     si, bp ;~ 01A2:6241
cs=0x1a2;eip=0x006243; 	X(MOV(*(dw*)(raddr(ds,di+0x40)), ax));	// 13401 mov     [di+40h], ax ;~ 01A2:6243
cs=0x1a2;eip=0x006246; 	T(MOV(dl, *(raddr(es,si))));	// 13402 mov     dl, es:[si] ;~ 01A2:6246
cs=0x1a2;eip=0x006249; 	T(ADD(cl, ch));	// 13403 add     cl, ch ;~ 01A2:6249
cs=0x1a2;eip=0x00624b; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13404 mov     ax, [ebx+edx*2] ;~ 01A2:624B
cs=0x1a2;eip=0x00624f; 	T(ADC(si, bp));	// 13405 adc     si, bp ;~ 01A2:624F
cs=0x1a2;eip=0x006251; 	X(MOV(*(dw*)(raddr(ds,di+0x48)), ax));	// 13406 mov     [di+48h], ax ;~ 01A2:6251
cs=0x1a2;eip=0x006254; 	T(MOV(dl, *(raddr(es,si))));	// 13407 mov     dl, es:[si] ;~ 01A2:6254
cs=0x1a2;eip=0x006257; 	T(ADD(cl, ch));	// 13408 add     cl, ch ;~ 01A2:6257
cs=0x1a2;eip=0x006259; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13409 mov     ax, [ebx+edx*2] ;~ 01A2:6259
cs=0x1a2;eip=0x00625d; 	T(ADC(si, bp));	// 13410 adc     si, bp ;~ 01A2:625D
cs=0x1a2;eip=0x00625f; 	X(MOV(*(dw*)(raddr(ds,di+0x50)), ax));	// 13411 mov     [di+50h], ax ;~ 01A2:625F
cs=0x1a2;eip=0x006262; 	T(MOV(dl, *(raddr(es,si))));	// 13412 mov     dl, es:[si] ;~ 01A2:6262
cs=0x1a2;eip=0x006265; 	T(ADD(cl, ch));	// 13413 add     cl, ch ;~ 01A2:6265
cs=0x1a2;eip=0x006267; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13414 mov     ax, [ebx+edx*2] ;~ 01A2:6267
cs=0x1a2;eip=0x00626b; 	T(ADC(si, bp));	// 13415 adc     si, bp ;~ 01A2:626B
cs=0x1a2;eip=0x00626d; 	X(MOV(*(dw*)(raddr(ds,di+0x58)), ax));	// 13416 mov     [di+58h], ax ;~ 01A2:626D
cs=0x1a2;eip=0x006270; 	T(MOV(dl, *(raddr(es,si))));	// 13417 mov     dl, es:[si] ;~ 01A2:6270
cs=0x1a2;eip=0x006273; 	T(ADD(cl, ch));	// 13418 add     cl, ch ;~ 01A2:6273
cs=0x1a2;eip=0x006275; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13419 mov     ax, [ebx+edx*2] ;~ 01A2:6275
cs=0x1a2;eip=0x006279; 	T(ADC(si, bp));	// 13420 adc     si, bp ;~ 01A2:6279
cs=0x1a2;eip=0x00627b; 	X(MOV(*(dw*)(raddr(ds,di+0x60)), ax));	// 13421 mov     [di+60h], ax ;~ 01A2:627B
cs=0x1a2;eip=0x00627e; 	T(MOV(dl, *(raddr(es,si))));	// 13422 mov     dl, es:[si] ;~ 01A2:627E
cs=0x1a2;eip=0x006281; 	T(ADD(cl, ch));	// 13423 add     cl, ch ;~ 01A2:6281
cs=0x1a2;eip=0x006283; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13424 mov     ax, [ebx+edx*2] ;~ 01A2:6283
cs=0x1a2;eip=0x006287; 	T(ADC(si, bp));	// 13425 adc     si, bp ;~ 01A2:6287
cs=0x1a2;eip=0x006289; 	X(MOV(*(dw*)(raddr(ds,di+0x68)), ax));	// 13426 mov     [di+68h], ax ;~ 01A2:6289
cs=0x1a2;eip=0x00628c; 	T(MOV(dl, *(raddr(es,si))));	// 13427 mov     dl, es:[si] ;~ 01A2:628C
cs=0x1a2;eip=0x00628f; 	T(ADD(cl, ch));	// 13428 add     cl, ch ;~ 01A2:628F
cs=0x1a2;eip=0x006291; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13429 mov     ax, [ebx+edx*2] ;~ 01A2:6291
cs=0x1a2;eip=0x006295; 	T(ADC(si, bp));	// 13430 adc     si, bp ;~ 01A2:6295
cs=0x1a2;eip=0x006297; 	X(MOV(*(dw*)(raddr(ds,di+0x70)), ax));	// 13431 mov     [di+70h], ax ;~ 01A2:6297
cs=0x1a2;eip=0x00629a; 	T(MOV(dl, *(raddr(es,si))));	// 13432 mov     dl, es:[si] ;~ 01A2:629A
cs=0x1a2;eip=0x00629d; 	T(ADD(cl, ch));	// 13433 add     cl, ch ;~ 01A2:629D
cs=0x1a2;eip=0x00629f; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13434 mov     ax, [ebx+edx*2] ;~ 01A2:629F
cs=0x1a2;eip=0x0062a3; 	T(ADC(si, bp));	// 13435 adc     si, bp ;~ 01A2:62A3
cs=0x1a2;eip=0x0062a5; 	X(MOV(*(dw*)(raddr(ds,di+0x78)), ax));	// 13436 mov     [di+78h], ax ;~ 01A2:62A5
cs=0x1a2;eip=0x0062a8; 	T(ADD(di, 0x80));	// 13437 add     di, 80h ; '€' ;~ 01A2:62A8
cs=0x1a2;eip=0x0062ac; 	X(DEC(byte_24683));	// 13438 dec     byte_24683 ;~ 01A2:62AC
cs=0x1a2;eip=0x0062b0; 	J(JNZ(loc_161c9));	// 13439 jnz     loc_161C9 ;~ 01A2:62B0
cs=0x1a2;eip=0x0062b4; 	J(JMP(loc_1578c));	// 13440 jmp     loc_1578C ;~ 01A2:62B4
loc_162b7:
	// 5170 
cs=0x1a2;eip=0x0062b7; 	T(MOV(al, ch));	// 13444 mov     al, ch ;~ 01A2:62B7
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0062b9; 	T(CMP(al, *(&byte_16379)));	// 13445 cmp     al, cs:byte_16379 ;~ 01A2:62B9
cs=0x1a2;eip=0x0062be; 	J(JZ(loc_1633c));	// 13446 jz      short loc_1633C ;~ 01A2:62BE
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0062c0; 	X(MOV(*(&byte_16379), al));	// 13447 mov     cs:byte_16379, al ;~ 01A2:62C0
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0062c4; 	X(MOV(*(&byte_163a8), al));	// 13448 mov     cs:byte_163A8, al ;~ 01A2:62C4
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0062c8; 	X(MOV(*(&byte_163d7), al));	// 13449 mov     cs:byte_163D7, al ;~ 01A2:62C8
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0062cc; 	X(MOV(*(&byte_16406), al));	// 13450 mov     cs:byte_16406, al ;~ 01A2:62CC
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0062d0; 	X(MOV(*(&byte_16435), al));	// 13451 mov     cs:byte_16435, al ;~ 01A2:62D0
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0062d4; 	X(MOV(*(&byte_16464), al));	// 13452 mov     cs:byte_16464, al ;~ 01A2:62D4
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0062d8; 	X(MOV(*(&byte_16493), al));	// 13453 mov     cs:byte_16493, al ;~ 01A2:62D8
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0062dc; 	X(MOV(*(&byte_164c2), al));	// 13454 mov     cs:byte_164C2, al ;~ 01A2:62DC
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0062e0; 	X(MOV(*(&byte_164f1), al));	// 13455 mov     cs:byte_164F1, al ;~ 01A2:62E0
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0062e4; 	X(MOV(*(&byte_16520), al));	// 13456 mov     cs:byte_16520, al ;~ 01A2:62E4
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0062e8; 	X(MOV(*(&byte_1654f), al));	// 13457 mov     cs:byte_1654F, al ;~ 01A2:62E8
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0062ec; 	X(MOV(*(&byte_1657e), al));	// 13458 mov     cs:byte_1657E, al ;~ 01A2:62EC
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0062f0; 	X(MOV(*(&byte_165ad), al));	// 13459 mov     cs:byte_165AD, al ;~ 01A2:62F0
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0062f4; 	X(MOV(*(&byte_165dc), al));	// 13460 mov     cs:byte_165DC, al ;~ 01A2:62F4
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0062f8; 	X(MOV(*(&byte_1660b), al));	// 13461 mov     cs:byte_1660B, al ;~ 01A2:62F8
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x0062fc; 	X(MOV(*(&byte_16646), al));	// 13462 mov     cs:byte_16646, al ;~ 01A2:62FC
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x006300; 	X(MOV(*(&byte_16672), al));	// 13463 mov     cs:byte_16672, al ;~ 01A2:6300
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x006304; 	X(MOV(*(&byte_1669f), al));	// 13464 mov     cs:byte_1669F, al ;~ 01A2:6304
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x006308; 	X(MOV(*(&byte_166cc), al));	// 13465 mov     cs:byte_166CC, al ;~ 01A2:6308
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00630c; 	X(MOV(*(&byte_166f9), al));	// 13466 mov     cs:byte_166F9, al ;~ 01A2:630C
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x006310; 	X(MOV(*(&byte_16726), al));	// 13467 mov     cs:byte_16726, al ;~ 01A2:6310
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x006314; 	X(MOV(*(&byte_16753), al));	// 13468 mov     cs:byte_16753, al ;~ 01A2:6314
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x006318; 	X(MOV(*(&byte_16780), al));	// 13469 mov     cs:byte_16780, al ;~ 01A2:6318
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00631c; 	X(MOV(*(&byte_167ad), al));	// 13470 mov     cs:byte_167AD, al ;~ 01A2:631C
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x006320; 	X(MOV(*(&byte_167da), al));	// 13471 mov     cs:byte_167DA, al ;~ 01A2:6320
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x006324; 	X(MOV(*(&byte_16807), al));	// 13472 mov     cs:byte_16807, al ;~ 01A2:6324
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x006328; 	X(MOV(*(&byte_16834), al));	// 13473 mov     cs:byte_16834, al ;~ 01A2:6328
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00632c; 	X(MOV(*(&byte_16861), al));	// 13474 mov     cs:byte_16861, al ;~ 01A2:632C
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x006330; 	X(MOV(*(&byte_1688e), al));	// 13475 mov     cs:byte_1688E, al ;~ 01A2:6330
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x006334; 	X(MOV(*(&byte_168bb), al));	// 13476 mov     cs:byte_168BB, al ;~ 01A2:6334
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x006338; 	X(MOV(*(&byte_168e8), al));	// 13477 mov     cs:byte_168E8, al ;~ 01A2:6338
loc_1633c:
	// 5171 
cs=0x1a2;eip=0x00633c; 	T(AND(ecx, 0x0FF));	// 13480 and     ecx, 0FFh ;~ 01A2:633C
cs=0x1a2;eip=0x006343; 	T(MOV(ax, word_245e4));	// 13481 mov     ax, word_245E4 ;~ 01A2:6343
cs=0x1a2;eip=0x006346; 	T(AND(eax, 0x0F));	// 13482 and     eax, 0Fh ;~ 01A2:6346
cs=0x1a2;eip=0x00634a; 	T(XOR(edx, edx));	// 13483 xor     edx, edx ;~ 01A2:634A
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00634d; __disp=*(dw*)(((db*)&_offs_interpol2)+eax*2);
	J(return __dispatch_call(__disp, _state););	// 13484 jmp     cs:_offs_interpol2[eax*2] ;~ 01A2:634D
loc_16356:
	// 5172 
cs=0x1a2;eip=0x006356; 	T(MOV(dl, *(raddr(es,si))));	// 13490 mov     dl, es:[si] ;~ 01A2:6356
cs=0x1a2;eip=0x006359; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13491 mov     ax, [ebx+edx*2] ;~ 01A2:6359
cs=0x1a2;eip=0x00635d; 	T(MOV(dl, *(raddr(es,si+1))));	// 13492 mov     dl, es:[si+1] ;~ 01A2:635D
cs=0x1a2;eip=0x006361; 	T(CWDE);	// 13493 cwde ;~ 01A2:6361
cs=0x1a2;eip=0x006363; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13494 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:6363
cs=0x1a2;eip=0x006369; 	T(SUB(edx, eax));	// 13495 sub     edx, eax ;~ 01A2:6369
cs=0x1a2;eip=0x00636c; 	T(IMUL2_4(edx,ecx));	// 13496 imul    edx, ecx ;~ 01A2:636C
cs=0x1a2;eip=0x006370; 	T(SAR(edx, 8));	// 13497 sar     edx, 8 ;~ 01A2:6370
cs=0x1a2;eip=0x006374; 	T(ADD(eax, edx));	// 13498 add     eax, edx ;~ 01A2:6374
	S(JMP(seg000_637a_proc));seg000_637a_proc:
	// 13506 
cs=0x1a2;eip=0x00637a; 	T(ADC(si, bp));	// 13506 adc     si, bp ;~ 01A2:637A
cs=0x1a2;eip=0x00637c; 	T(XOR(edx, edx));	// 13507 xor     edx, edx ;~ 01A2:637C
cs=0x1a2;eip=0x00637f; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 13508 mov     [di], eax ;~ 01A2:637F
cs=0x1a2;eip=0x006382; 	T(ADD(di, 8));	// 13509 add     di, 8 ;~ 01A2:6382
loc_16385:
	// 5173 
cs=0x1a2;eip=0x006385; 	T(MOV(dl, *(raddr(es,si))));	// 13515 mov     dl, es:[si] ;~ 01A2:6385
cs=0x1a2;eip=0x006388; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13516 mov     ax, [ebx+edx*2] ;~ 01A2:6388
cs=0x1a2;eip=0x00638c; 	T(MOV(dl, *(raddr(es,si+1))));	// 13517 mov     dl, es:[si+1] ;~ 01A2:638C
cs=0x1a2;eip=0x006390; 	T(CWDE);	// 13518 cwde ;~ 01A2:6390
cs=0x1a2;eip=0x006392; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13519 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:6392
cs=0x1a2;eip=0x006398; 	T(SUB(edx, eax));	// 13520 sub     edx, eax ;~ 01A2:6398
cs=0x1a2;eip=0x00639b; 	T(IMUL2_4(edx,ecx));	// 13521 imul    edx, ecx ;~ 01A2:639B
cs=0x1a2;eip=0x00639f; 	T(SAR(edx, 8));	// 13522 sar     edx, 8 ;~ 01A2:639F
cs=0x1a2;eip=0x0063a3; 	T(ADD(eax, edx));	// 13523 add     eax, edx ;~ 01A2:63A3
cs=0x1a2;eip=0x0063a9; 	T(ADC(si, bp));	// 13529 adc     si, bp ;~ 01A2:63A9
cs=0x1a2;eip=0x0063ab; 	T(XOR(edx, edx));	// 13530 xor     edx, edx ;~ 01A2:63AB
cs=0x1a2;eip=0x0063ae; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 13531 mov     [di], eax ;~ 01A2:63AE
cs=0x1a2;eip=0x0063b1; 	T(ADD(di, 8));	// 13532 add     di, 8 ;~ 01A2:63B1
loc_163b4:
	// 5174 
cs=0x1a2;eip=0x0063b4; 	T(MOV(dl, *(raddr(es,si))));	// 13538 mov     dl, es:[si] ;~ 01A2:63B4
cs=0x1a2;eip=0x0063b7; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13539 mov     ax, [ebx+edx*2] ;~ 01A2:63B7
cs=0x1a2;eip=0x0063bb; 	T(MOV(dl, *(raddr(es,si+1))));	// 13540 mov     dl, es:[si+1] ;~ 01A2:63BB
cs=0x1a2;eip=0x0063bf; 	T(CWDE);	// 13541 cwde ;~ 01A2:63BF
cs=0x1a2;eip=0x0063c1; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13542 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:63C1
cs=0x1a2;eip=0x0063c7; 	T(SUB(edx, eax));	// 13543 sub     edx, eax ;~ 01A2:63C7
cs=0x1a2;eip=0x0063ca; 	T(IMUL2_4(edx,ecx));	// 13544 imul    edx, ecx ;~ 01A2:63CA
cs=0x1a2;eip=0x0063ce; 	T(SAR(edx, 8));	// 13545 sar     edx, 8 ;~ 01A2:63CE
cs=0x1a2;eip=0x0063d2; 	T(ADD(eax, edx));	// 13546 add     eax, edx ;~ 01A2:63D2
cs=0x1a2;eip=0x0063d8; 	T(ADC(si, bp));	// 13552 adc     si, bp ;~ 01A2:63D8
cs=0x1a2;eip=0x0063da; 	T(XOR(edx, edx));	// 13553 xor     edx, edx ;~ 01A2:63DA
cs=0x1a2;eip=0x0063dd; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 13554 mov     [di], eax ;~ 01A2:63DD
cs=0x1a2;eip=0x0063e0; 	T(ADD(di, 8));	// 13555 add     di, 8 ;~ 01A2:63E0
loc_163e3:
	// 5175 
cs=0x1a2;eip=0x0063e3; 	T(MOV(dl, *(raddr(es,si))));	// 13561 mov     dl, es:[si] ;~ 01A2:63E3
cs=0x1a2;eip=0x0063e6; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13562 mov     ax, [ebx+edx*2] ;~ 01A2:63E6
cs=0x1a2;eip=0x0063ea; 	T(MOV(dl, *(raddr(es,si+1))));	// 13563 mov     dl, es:[si+1] ;~ 01A2:63EA
cs=0x1a2;eip=0x0063ee; 	T(CWDE);	// 13564 cwde ;~ 01A2:63EE
cs=0x1a2;eip=0x0063f0; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13565 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:63F0
cs=0x1a2;eip=0x0063f6; 	T(SUB(edx, eax));	// 13566 sub     edx, eax ;~ 01A2:63F6
cs=0x1a2;eip=0x0063f9; 	T(IMUL2_4(edx,ecx));	// 13567 imul    edx, ecx ;~ 01A2:63F9
cs=0x1a2;eip=0x0063fd; 	T(SAR(edx, 8));	// 13568 sar     edx, 8 ;~ 01A2:63FD
cs=0x1a2;eip=0x006401; 	T(ADD(eax, edx));	// 13569 add     eax, edx ;~ 01A2:6401
cs=0x1a2;eip=0x006407; 	T(ADC(si, bp));	// 13575 adc     si, bp ;~ 01A2:6407
cs=0x1a2;eip=0x006409; 	T(XOR(edx, edx));	// 13576 xor     edx, edx ;~ 01A2:6409
cs=0x1a2;eip=0x00640c; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 13577 mov     [di], eax ;~ 01A2:640C
cs=0x1a2;eip=0x00640f; 	T(ADD(di, 8));	// 13578 add     di, 8 ;~ 01A2:640F
loc_16412:
	// 5176 
cs=0x1a2;eip=0x006412; 	T(MOV(dl, *(raddr(es,si))));	// 13584 mov     dl, es:[si] ;~ 01A2:6412
cs=0x1a2;eip=0x006415; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13585 mov     ax, [ebx+edx*2] ;~ 01A2:6415
cs=0x1a2;eip=0x006419; 	T(MOV(dl, *(raddr(es,si+1))));	// 13586 mov     dl, es:[si+1] ;~ 01A2:6419
cs=0x1a2;eip=0x00641d; 	T(CWDE);	// 13587 cwde ;~ 01A2:641D
cs=0x1a2;eip=0x00641f; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13588 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:641F
cs=0x1a2;eip=0x006425; 	T(SUB(edx, eax));	// 13589 sub     edx, eax ;~ 01A2:6425
cs=0x1a2;eip=0x006428; 	T(IMUL2_4(edx,ecx));	// 13590 imul    edx, ecx ;~ 01A2:6428
cs=0x1a2;eip=0x00642c; 	T(SAR(edx, 8));	// 13591 sar     edx, 8 ;~ 01A2:642C
cs=0x1a2;eip=0x006430; 	T(ADD(eax, edx));	// 13592 add     eax, edx ;~ 01A2:6430
cs=0x1a2;eip=0x006436; 	T(ADC(si, bp));	// 13598 adc     si, bp ;~ 01A2:6436
cs=0x1a2;eip=0x006438; 	T(XOR(edx, edx));	// 13599 xor     edx, edx ;~ 01A2:6438
cs=0x1a2;eip=0x00643b; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 13600 mov     [di], eax ;~ 01A2:643B
cs=0x1a2;eip=0x00643e; 	T(ADD(di, 8));	// 13601 add     di, 8 ;~ 01A2:643E
loc_16441:
	// 5177 
cs=0x1a2;eip=0x006441; 	T(MOV(dl, *(raddr(es,si))));	// 13607 mov     dl, es:[si] ;~ 01A2:6441
cs=0x1a2;eip=0x006444; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13608 mov     ax, [ebx+edx*2] ;~ 01A2:6444
cs=0x1a2;eip=0x006448; 	T(MOV(dl, *(raddr(es,si+1))));	// 13609 mov     dl, es:[si+1] ;~ 01A2:6448
cs=0x1a2;eip=0x00644c; 	T(CWDE);	// 13610 cwde ;~ 01A2:644C
cs=0x1a2;eip=0x00644e; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13611 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:644E
cs=0x1a2;eip=0x006454; 	T(SUB(edx, eax));	// 13612 sub     edx, eax ;~ 01A2:6454
cs=0x1a2;eip=0x006457; 	T(IMUL2_4(edx,ecx));	// 13613 imul    edx, ecx ;~ 01A2:6457
cs=0x1a2;eip=0x00645b; 	T(SAR(edx, 8));	// 13614 sar     edx, 8 ;~ 01A2:645B
cs=0x1a2;eip=0x00645f; 	T(ADD(eax, edx));	// 13615 add     eax, edx ;~ 01A2:645F
cs=0x1a2;eip=0x006465; 	T(ADC(si, bp));	// 13622 adc     si, bp ;~ 01A2:6465
cs=0x1a2;eip=0x006467; 	T(XOR(edx, edx));	// 13623 xor     edx, edx ;~ 01A2:6467
cs=0x1a2;eip=0x00646a; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 13624 mov     [di], eax ;~ 01A2:646A
cs=0x1a2;eip=0x00646d; 	T(ADD(di, 8));	// 13625 add     di, 8 ;~ 01A2:646D
loc_16470:
	// 5178 
cs=0x1a2;eip=0x006470; 	T(MOV(dl, *(raddr(es,si))));	// 13631 mov     dl, es:[si] ;~ 01A2:6470
cs=0x1a2;eip=0x006473; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13632 mov     ax, [ebx+edx*2] ;~ 01A2:6473
cs=0x1a2;eip=0x006477; 	T(MOV(dl, *(raddr(es,si+1))));	// 13633 mov     dl, es:[si+1] ;~ 01A2:6477
cs=0x1a2;eip=0x00647b; 	T(CWDE);	// 13634 cwde ;~ 01A2:647B
cs=0x1a2;eip=0x00647d; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13635 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:647D
cs=0x1a2;eip=0x006483; 	T(SUB(edx, eax));	// 13636 sub     edx, eax ;~ 01A2:6483
cs=0x1a2;eip=0x006486; 	T(IMUL2_4(edx,ecx));	// 13637 imul    edx, ecx ;~ 01A2:6486
cs=0x1a2;eip=0x00648a; 	T(SAR(edx, 8));	// 13638 sar     edx, 8 ;~ 01A2:648A
cs=0x1a2;eip=0x00648e; 	T(ADD(eax, edx));	// 13639 add     eax, edx ;~ 01A2:648E
cs=0x1a2;eip=0x006494; 	T(ADC(si, bp));	// 13645 adc     si, bp ;~ 01A2:6494
cs=0x1a2;eip=0x006496; 	T(XOR(edx, edx));	// 13646 xor     edx, edx ;~ 01A2:6496
cs=0x1a2;eip=0x006499; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 13647 mov     [di], eax ;~ 01A2:6499
cs=0x1a2;eip=0x00649c; 	T(ADD(di, 8));	// 13648 add     di, 8 ;~ 01A2:649C
loc_1649f:
	// 5179 
cs=0x1a2;eip=0x00649f; 	T(MOV(dl, *(raddr(es,si))));	// 13654 mov     dl, es:[si] ;~ 01A2:649F
cs=0x1a2;eip=0x0064a2; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13655 mov     ax, [ebx+edx*2] ;~ 01A2:64A2
cs=0x1a2;eip=0x0064a6; 	T(MOV(dl, *(raddr(es,si+1))));	// 13656 mov     dl, es:[si+1] ;~ 01A2:64A6
cs=0x1a2;eip=0x0064aa; 	T(CWDE);	// 13657 cwde ;~ 01A2:64AA
cs=0x1a2;eip=0x0064ac; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13658 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:64AC
cs=0x1a2;eip=0x0064b2; 	T(SUB(edx, eax));	// 13659 sub     edx, eax ;~ 01A2:64B2
cs=0x1a2;eip=0x0064b5; 	T(IMUL2_4(edx,ecx));	// 13660 imul    edx, ecx ;~ 01A2:64B5
cs=0x1a2;eip=0x0064b9; 	T(SAR(edx, 8));	// 13661 sar     edx, 8 ;~ 01A2:64B9
cs=0x1a2;eip=0x0064bd; 	T(ADD(eax, edx));	// 13662 add     eax, edx ;~ 01A2:64BD
cs=0x1a2;eip=0x0064c3; 	T(ADC(si, bp));	// 13668 adc     si, bp ;~ 01A2:64C3
cs=0x1a2;eip=0x0064c5; 	T(XOR(edx, edx));	// 13669 xor     edx, edx ;~ 01A2:64C5
cs=0x1a2;eip=0x0064c8; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 13670 mov     [di], eax ;~ 01A2:64C8
cs=0x1a2;eip=0x0064cb; 	T(ADD(di, 8));	// 13671 add     di, 8 ;~ 01A2:64CB
loc_164ce:
	// 5180 
cs=0x1a2;eip=0x0064ce; 	T(MOV(dl, *(raddr(es,si))));	// 13677 mov     dl, es:[si] ;~ 01A2:64CE
cs=0x1a2;eip=0x0064d1; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13678 mov     ax, [ebx+edx*2] ;~ 01A2:64D1
cs=0x1a2;eip=0x0064d5; 	T(MOV(dl, *(raddr(es,si+1))));	// 13679 mov     dl, es:[si+1] ;~ 01A2:64D5
cs=0x1a2;eip=0x0064d9; 	T(CWDE);	// 13680 cwde ;~ 01A2:64D9
cs=0x1a2;eip=0x0064db; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13681 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:64DB
cs=0x1a2;eip=0x0064e1; 	T(SUB(edx, eax));	// 13682 sub     edx, eax ;~ 01A2:64E1
cs=0x1a2;eip=0x0064e4; 	T(IMUL2_4(edx,ecx));	// 13683 imul    edx, ecx ;~ 01A2:64E4
cs=0x1a2;eip=0x0064e8; 	T(SAR(edx, 8));	// 13684 sar     edx, 8 ;~ 01A2:64E8
cs=0x1a2;eip=0x0064ec; 	T(ADD(eax, edx));	// 13685 add     eax, edx ;~ 01A2:64EC
cs=0x1a2;eip=0x0064f2; 	T(ADC(si, bp));	// 13691 adc     si, bp ;~ 01A2:64F2
cs=0x1a2;eip=0x0064f4; 	T(XOR(edx, edx));	// 13692 xor     edx, edx ;~ 01A2:64F4
cs=0x1a2;eip=0x0064f7; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 13693 mov     [di], eax ;~ 01A2:64F7
cs=0x1a2;eip=0x0064fa; 	T(ADD(di, 8));	// 13694 add     di, 8 ;~ 01A2:64FA
loc_164fd:
	// 5181 
cs=0x1a2;eip=0x0064fd; 	T(MOV(dl, *(raddr(es,si))));	// 13700 mov     dl, es:[si] ;~ 01A2:64FD
cs=0x1a2;eip=0x006500; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13701 mov     ax, [ebx+edx*2] ;~ 01A2:6500
cs=0x1a2;eip=0x006504; 	T(MOV(dl, *(raddr(es,si+1))));	// 13702 mov     dl, es:[si+1] ;~ 01A2:6504
cs=0x1a2;eip=0x006508; 	T(CWDE);	// 13703 cwde ;~ 01A2:6508
cs=0x1a2;eip=0x00650a; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13704 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:650A
cs=0x1a2;eip=0x006510; 	T(SUB(edx, eax));	// 13705 sub     edx, eax ;~ 01A2:6510
cs=0x1a2;eip=0x006513; 	T(IMUL2_4(edx,ecx));	// 13706 imul    edx, ecx ;~ 01A2:6513
cs=0x1a2;eip=0x006517; 	T(SAR(edx, 8));	// 13707 sar     edx, 8 ;~ 01A2:6517
cs=0x1a2;eip=0x00651b; 	T(ADD(eax, edx));	// 13708 add     eax, edx ;~ 01A2:651B
cs=0x1a2;eip=0x006521; 	T(ADC(si, bp));	// 13714 adc     si, bp ;~ 01A2:6521
cs=0x1a2;eip=0x006523; 	T(XOR(edx, edx));	// 13715 xor     edx, edx ;~ 01A2:6523
cs=0x1a2;eip=0x006526; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 13716 mov     [di], eax ;~ 01A2:6526
cs=0x1a2;eip=0x006529; 	T(ADD(di, 8));	// 13717 add     di, 8 ;~ 01A2:6529
loc_1652c:
	// 5182 
cs=0x1a2;eip=0x00652c; 	T(MOV(dl, *(raddr(es,si))));	// 13723 mov     dl, es:[si] ;~ 01A2:652C
cs=0x1a2;eip=0x00652f; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13724 mov     ax, [ebx+edx*2] ;~ 01A2:652F
cs=0x1a2;eip=0x006533; 	T(MOV(dl, *(raddr(es,si+1))));	// 13725 mov     dl, es:[si+1] ;~ 01A2:6533
cs=0x1a2;eip=0x006537; 	T(CWDE);	// 13726 cwde ;~ 01A2:6537
cs=0x1a2;eip=0x006539; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13727 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:6539
cs=0x1a2;eip=0x00653f; 	T(SUB(edx, eax));	// 13728 sub     edx, eax ;~ 01A2:653F
cs=0x1a2;eip=0x006542; 	T(IMUL2_4(edx,ecx));	// 13729 imul    edx, ecx ;~ 01A2:6542
cs=0x1a2;eip=0x006546; 	T(SAR(edx, 8));	// 13730 sar     edx, 8 ;~ 01A2:6546
cs=0x1a2;eip=0x00654a; 	T(ADD(eax, edx));	// 13731 add     eax, edx ;~ 01A2:654A
cs=0x1a2;eip=0x006550; 	T(ADC(si, bp));	// 13737 adc     si, bp ;~ 01A2:6550
cs=0x1a2;eip=0x006552; 	T(XOR(edx, edx));	// 13738 xor     edx, edx ;~ 01A2:6552
cs=0x1a2;eip=0x006555; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 13739 mov     [di], eax ;~ 01A2:6555
cs=0x1a2;eip=0x006558; 	T(ADD(di, 8));	// 13740 add     di, 8 ;~ 01A2:6558
loc_1655b:
	// 5183 
cs=0x1a2;eip=0x00655b; 	T(MOV(dl, *(raddr(es,si))));	// 13746 mov     dl, es:[si] ;~ 01A2:655B
cs=0x1a2;eip=0x00655e; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13747 mov     ax, [ebx+edx*2] ;~ 01A2:655E
cs=0x1a2;eip=0x006562; 	T(MOV(dl, *(raddr(es,si+1))));	// 13748 mov     dl, es:[si+1] ;~ 01A2:6562
cs=0x1a2;eip=0x006566; 	T(CWDE);	// 13749 cwde ;~ 01A2:6566
cs=0x1a2;eip=0x006568; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13750 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:6568
cs=0x1a2;eip=0x00656e; 	T(SUB(edx, eax));	// 13751 sub     edx, eax ;~ 01A2:656E
cs=0x1a2;eip=0x006571; 	T(IMUL2_4(edx,ecx));	// 13752 imul    edx, ecx ;~ 01A2:6571
cs=0x1a2;eip=0x006575; 	T(SAR(edx, 8));	// 13753 sar     edx, 8 ;~ 01A2:6575
cs=0x1a2;eip=0x006579; 	T(ADD(eax, edx));	// 13754 add     eax, edx ;~ 01A2:6579
cs=0x1a2;eip=0x00657f; 	T(ADC(si, bp));	// 13760 adc     si, bp ;~ 01A2:657F
cs=0x1a2;eip=0x006581; 	T(XOR(edx, edx));	// 13761 xor     edx, edx ;~ 01A2:6581
cs=0x1a2;eip=0x006584; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 13762 mov     [di], eax ;~ 01A2:6584
cs=0x1a2;eip=0x006587; 	T(ADD(di, 8));	// 13763 add     di, 8 ;~ 01A2:6587
loc_1658a:
	// 5184 
cs=0x1a2;eip=0x00658a; 	T(MOV(dl, *(raddr(es,si))));	// 13769 mov     dl, es:[si] ;~ 01A2:658A
cs=0x1a2;eip=0x00658d; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13770 mov     ax, [ebx+edx*2] ;~ 01A2:658D
cs=0x1a2;eip=0x006591; 	T(MOV(dl, *(raddr(es,si+1))));	// 13771 mov     dl, es:[si+1] ;~ 01A2:6591
cs=0x1a2;eip=0x006595; 	T(CWDE);	// 13772 cwde ;~ 01A2:6595
cs=0x1a2;eip=0x006597; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13773 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:6597
cs=0x1a2;eip=0x00659d; 	T(SUB(edx, eax));	// 13774 sub     edx, eax ;~ 01A2:659D
cs=0x1a2;eip=0x0065a0; 	T(IMUL2_4(edx,ecx));	// 13775 imul    edx, ecx ;~ 01A2:65A0
cs=0x1a2;eip=0x0065a4; 	T(SAR(edx, 8));	// 13776 sar     edx, 8 ;~ 01A2:65A4
cs=0x1a2;eip=0x0065a8; 	T(ADD(eax, edx));	// 13777 add     eax, edx ;~ 01A2:65A8
cs=0x1a2;eip=0x0065ae; 	T(ADC(si, bp));	// 13784 adc     si, bp ;~ 01A2:65AE
cs=0x1a2;eip=0x0065b0; 	T(XOR(edx, edx));	// 13785 xor     edx, edx ;~ 01A2:65B0
cs=0x1a2;eip=0x0065b3; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 13786 mov     [di], eax ;~ 01A2:65B3
cs=0x1a2;eip=0x0065b6; 	T(ADD(di, 8));	// 13787 add     di, 8 ;~ 01A2:65B6
loc_165b9:
	// 5185 
cs=0x1a2;eip=0x0065b9; 	T(MOV(dl, *(raddr(es,si))));	// 13793 mov     dl, es:[si] ;~ 01A2:65B9
cs=0x1a2;eip=0x0065bc; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13794 mov     ax, [ebx+edx*2] ;~ 01A2:65BC
cs=0x1a2;eip=0x0065c0; 	T(MOV(dl, *(raddr(es,si+1))));	// 13795 mov     dl, es:[si+1] ;~ 01A2:65C0
cs=0x1a2;eip=0x0065c4; 	T(CWDE);	// 13796 cwde ;~ 01A2:65C4
cs=0x1a2;eip=0x0065c6; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13797 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:65C6
cs=0x1a2;eip=0x0065cc; 	T(SUB(edx, eax));	// 13798 sub     edx, eax ;~ 01A2:65CC
cs=0x1a2;eip=0x0065cf; 	T(IMUL2_4(edx,ecx));	// 13799 imul    edx, ecx ;~ 01A2:65CF
cs=0x1a2;eip=0x0065d3; 	T(SAR(edx, 8));	// 13800 sar     edx, 8 ;~ 01A2:65D3
cs=0x1a2;eip=0x0065d7; 	T(ADD(eax, edx));	// 13801 add     eax, edx ;~ 01A2:65D7
cs=0x1a2;eip=0x0065dd; 	T(ADC(si, bp));	// 13807 adc     si, bp ;~ 01A2:65DD
cs=0x1a2;eip=0x0065df; 	T(XOR(edx, edx));	// 13808 xor     edx, edx ;~ 01A2:65DF
cs=0x1a2;eip=0x0065e2; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 13809 mov     [di], eax ;~ 01A2:65E2
cs=0x1a2;eip=0x0065e5; 	T(ADD(di, 8));	// 13810 add     di, 8 ;~ 01A2:65E5
loc_165e8:
	// 5186 
cs=0x1a2;eip=0x0065e8; 	T(MOV(dl, *(raddr(es,si))));	// 13816 mov     dl, es:[si] ;~ 01A2:65E8
cs=0x1a2;eip=0x0065eb; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13817 mov     ax, [ebx+edx*2] ;~ 01A2:65EB
cs=0x1a2;eip=0x0065ef; 	T(MOV(dl, *(raddr(es,si+1))));	// 13818 mov     dl, es:[si+1] ;~ 01A2:65EF
cs=0x1a2;eip=0x0065f3; 	T(CWDE);	// 13819 cwde ;~ 01A2:65F3
cs=0x1a2;eip=0x0065f5; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13820 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:65F5
cs=0x1a2;eip=0x0065fb; 	T(SUB(edx, eax));	// 13821 sub     edx, eax ;~ 01A2:65FB
cs=0x1a2;eip=0x0065fe; 	T(IMUL2_4(edx,ecx));	// 13822 imul    edx, ecx ;~ 01A2:65FE
cs=0x1a2;eip=0x006602; 	T(SAR(edx, 8));	// 13823 sar     edx, 8 ;~ 01A2:6602
cs=0x1a2;eip=0x006606; 	T(ADD(eax, edx));	// 13824 add     eax, edx ;~ 01A2:6606
cs=0x1a2;eip=0x00660c; 	T(ADC(si, bp));	// 13830 adc     si, bp ;~ 01A2:660C
cs=0x1a2;eip=0x00660e; 	T(XOR(edx, edx));	// 13831 xor     edx, edx ;~ 01A2:660E
cs=0x1a2;eip=0x006611; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 13832 mov     [di], eax ;~ 01A2:6611
cs=0x1a2;eip=0x006614; 	T(ADD(di, 8));	// 13833 add     di, 8 ;~ 01A2:6614
loc_16617:
	// 5187 
cs=0x1a2;eip=0x006617; 	T(CMP(byte_24683, 0));	// 13839 cmp     byte_24683, 0 ;~ 01A2:6617
cs=0x1a2;eip=0x00661c; 	J(JZ(loc_1578c));	// 13840 jz      loc_1578C ;~ 01A2:661C
loc_16620:
	// 5188 
cs=0x1a2;eip=0x006620; 	T(XOR(edx, edx));	// 13843 xor     edx, edx ;~ 01A2:6620
cs=0x1a2;eip=0x006623; 	T(MOV(dl, *(raddr(es,si))));	// 13844 mov     dl, es:[si] ;~ 01A2:6623
cs=0x1a2;eip=0x006626; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13845 mov     ax, [ebx+edx*2] ;~ 01A2:6626
cs=0x1a2;eip=0x00662a; 	T(MOV(dl, *(raddr(es,si+1))));	// 13846 mov     dl, es:[si+1] ;~ 01A2:662A
cs=0x1a2;eip=0x00662e; 	T(CWDE);	// 13847 cwde ;~ 01A2:662E
cs=0x1a2;eip=0x006630; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13848 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:6630
cs=0x1a2;eip=0x006636; 	T(SUB(edx, eax));	// 13849 sub     edx, eax ;~ 01A2:6636
cs=0x1a2;eip=0x006639; 	T(IMUL2_4(edx,ecx));	// 13850 imul    edx, ecx ;~ 01A2:6639
cs=0x1a2;eip=0x00663d; 	T(SAR(edx, 8));	// 13851 sar     edx, 8 ;~ 01A2:663D
cs=0x1a2;eip=0x006641; 	T(ADD(eax, edx));	// 13852 add     eax, edx ;~ 01A2:6641
cs=0x1a2;eip=0x006647; 	T(ADC(si, bp));	// 13858 adc     si, bp ;~ 01A2:6647
cs=0x1a2;eip=0x006649; 	T(XOR(edx, edx));	// 13859 xor     edx, edx ;~ 01A2:6649
cs=0x1a2;eip=0x00664c; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 13860 mov     [di], eax ;~ 01A2:664C
cs=0x1a2;eip=0x00664f; 	T(MOV(dl, *(raddr(es,si))));	// 13861 mov     dl, es:[si] ;~ 01A2:664F
cs=0x1a2;eip=0x006652; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13862 mov     ax, [ebx+edx*2] ;~ 01A2:6652
cs=0x1a2;eip=0x006656; 	T(MOV(dl, *(raddr(es,si+1))));	// 13863 mov     dl, es:[si+1] ;~ 01A2:6656
cs=0x1a2;eip=0x00665a; 	T(CWDE);	// 13864 cwde ;~ 01A2:665A
cs=0x1a2;eip=0x00665c; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13865 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:665C
cs=0x1a2;eip=0x006662; 	T(SUB(edx, eax));	// 13866 sub     edx, eax ;~ 01A2:6662
cs=0x1a2;eip=0x006665; 	T(IMUL2_4(edx,ecx));	// 13867 imul    edx, ecx ;~ 01A2:6665
cs=0x1a2;eip=0x006669; 	T(SAR(edx, 8));	// 13868 sar     edx, 8 ;~ 01A2:6669
cs=0x1a2;eip=0x00666d; 	T(ADD(eax, edx));	// 13869 add     eax, edx ;~ 01A2:666D
cs=0x1a2;eip=0x006673; 	T(ADC(si, bp));	// 13874 adc     si, bp ;~ 01A2:6673
cs=0x1a2;eip=0x006675; 	T(XOR(edx, edx));	// 13875 xor     edx, edx ;~ 01A2:6675
cs=0x1a2;eip=0x006678; 	X(MOV(*(dd*)(raddr(ds,di+8)), eax));	// 13876 mov     [di+8], eax ;~ 01A2:6678
cs=0x1a2;eip=0x00667c; 	T(MOV(dl, *(raddr(es,si))));	// 13877 mov     dl, es:[si] ;~ 01A2:667C
cs=0x1a2;eip=0x00667f; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13878 mov     ax, [ebx+edx*2] ;~ 01A2:667F
cs=0x1a2;eip=0x006683; 	T(MOV(dl, *(raddr(es,si+1))));	// 13879 mov     dl, es:[si+1] ;~ 01A2:6683
cs=0x1a2;eip=0x006687; 	T(CWDE);	// 13880 cwde ;~ 01A2:6687
cs=0x1a2;eip=0x006689; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13881 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:6689
cs=0x1a2;eip=0x00668f; 	T(SUB(edx, eax));	// 13882 sub     edx, eax ;~ 01A2:668F
cs=0x1a2;eip=0x006692; 	T(IMUL2_4(edx,ecx));	// 13883 imul    edx, ecx ;~ 01A2:6692
cs=0x1a2;eip=0x006696; 	T(SAR(edx, 8));	// 13884 sar     edx, 8 ;~ 01A2:6696
cs=0x1a2;eip=0x00669a; 	T(ADD(eax, edx));	// 13885 add     eax, edx ;~ 01A2:669A
cs=0x1a2;eip=0x0066a0; 	T(ADC(si, bp));	// 13890 adc     si, bp ;~ 01A2:66A0
cs=0x1a2;eip=0x0066a2; 	T(XOR(edx, edx));	// 13891 xor     edx, edx ;~ 01A2:66A2
cs=0x1a2;eip=0x0066a5; 	X(MOV(*(dd*)(raddr(ds,di+0x10)), eax));	// 13892 mov     [di+10h], eax ;~ 01A2:66A5
cs=0x1a2;eip=0x0066a9; 	T(MOV(dl, *(raddr(es,si))));	// 13893 mov     dl, es:[si] ;~ 01A2:66A9
cs=0x1a2;eip=0x0066ac; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13894 mov     ax, [ebx+edx*2] ;~ 01A2:66AC
cs=0x1a2;eip=0x0066b0; 	T(MOV(dl, *(raddr(es,si+1))));	// 13895 mov     dl, es:[si+1] ;~ 01A2:66B0
cs=0x1a2;eip=0x0066b4; 	T(CWDE);	// 13896 cwde ;~ 01A2:66B4
cs=0x1a2;eip=0x0066b6; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13897 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:66B6
cs=0x1a2;eip=0x0066bc; 	T(SUB(edx, eax));	// 13898 sub     edx, eax ;~ 01A2:66BC
cs=0x1a2;eip=0x0066bf; 	T(IMUL2_4(edx,ecx));	// 13899 imul    edx, ecx ;~ 01A2:66BF
cs=0x1a2;eip=0x0066c3; 	T(SAR(edx, 8));	// 13900 sar     edx, 8 ;~ 01A2:66C3
cs=0x1a2;eip=0x0066c7; 	T(ADD(eax, edx));	// 13901 add     eax, edx ;~ 01A2:66C7
cs=0x1a2;eip=0x0066cd; 	T(ADC(si, bp));	// 13906 adc     si, bp ;~ 01A2:66CD
cs=0x1a2;eip=0x0066cf; 	T(XOR(edx, edx));	// 13907 xor     edx, edx ;~ 01A2:66CF
cs=0x1a2;eip=0x0066d2; 	X(MOV(*(dd*)(raddr(ds,di+0x18)), eax));	// 13908 mov     [di+18h], eax ;~ 01A2:66D2
cs=0x1a2;eip=0x0066d6; 	T(MOV(dl, *(raddr(es,si))));	// 13909 mov     dl, es:[si] ;~ 01A2:66D6
cs=0x1a2;eip=0x0066d9; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13910 mov     ax, [ebx+edx*2] ;~ 01A2:66D9
cs=0x1a2;eip=0x0066dd; 	T(MOV(dl, *(raddr(es,si+1))));	// 13911 mov     dl, es:[si+1] ;~ 01A2:66DD
cs=0x1a2;eip=0x0066e1; 	T(CWDE);	// 13912 cwde ;~ 01A2:66E1
cs=0x1a2;eip=0x0066e3; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13913 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:66E3
cs=0x1a2;eip=0x0066e9; 	T(SUB(edx, eax));	// 13914 sub     edx, eax ;~ 01A2:66E9
cs=0x1a2;eip=0x0066ec; 	T(IMUL2_4(edx,ecx));	// 13915 imul    edx, ecx ;~ 01A2:66EC
cs=0x1a2;eip=0x0066f0; 	T(SAR(edx, 8));	// 13916 sar     edx, 8 ;~ 01A2:66F0
cs=0x1a2;eip=0x0066f4; 	T(ADD(eax, edx));	// 13917 add     eax, edx ;~ 01A2:66F4
cs=0x1a2;eip=0x0066fa; 	T(ADC(si, bp));	// 13922 adc     si, bp ;~ 01A2:66FA
cs=0x1a2;eip=0x0066fc; 	T(XOR(edx, edx));	// 13923 xor     edx, edx ;~ 01A2:66FC
cs=0x1a2;eip=0x0066ff; 	X(MOV(*(dd*)(raddr(ds,di+0x20)), eax));	// 13924 mov     [di+20h], eax ;~ 01A2:66FF
cs=0x1a2;eip=0x006703; 	T(MOV(dl, *(raddr(es,si))));	// 13925 mov     dl, es:[si] ;~ 01A2:6703
cs=0x1a2;eip=0x006706; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13926 mov     ax, [ebx+edx*2] ;~ 01A2:6706
cs=0x1a2;eip=0x00670a; 	T(MOV(dl, *(raddr(es,si+1))));	// 13927 mov     dl, es:[si+1] ;~ 01A2:670A
cs=0x1a2;eip=0x00670e; 	T(CWDE);	// 13928 cwde ;~ 01A2:670E
cs=0x1a2;eip=0x006710; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13929 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:6710
cs=0x1a2;eip=0x006716; 	T(SUB(edx, eax));	// 13930 sub     edx, eax ;~ 01A2:6716
cs=0x1a2;eip=0x006719; 	T(IMUL2_4(edx,ecx));	// 13931 imul    edx, ecx ;~ 01A2:6719
cs=0x1a2;eip=0x00671d; 	T(SAR(edx, 8));	// 13932 sar     edx, 8 ;~ 01A2:671D
cs=0x1a2;eip=0x006721; 	T(ADD(eax, edx));	// 13933 add     eax, edx ;~ 01A2:6721
cs=0x1a2;eip=0x006727; 	T(ADC(si, bp));	// 13938 adc     si, bp ;~ 01A2:6727
cs=0x1a2;eip=0x006729; 	T(XOR(edx, edx));	// 13939 xor     edx, edx ;~ 01A2:6729
cs=0x1a2;eip=0x00672c; 	X(MOV(*(dd*)(raddr(ds,di+0x28)), eax));	// 13940 mov     [di+28h], eax ;~ 01A2:672C
cs=0x1a2;eip=0x006730; 	T(MOV(dl, *(raddr(es,si))));	// 13941 mov     dl, es:[si] ;~ 01A2:6730
cs=0x1a2;eip=0x006733; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13942 mov     ax, [ebx+edx*2] ;~ 01A2:6733
cs=0x1a2;eip=0x006737; 	T(MOV(dl, *(raddr(es,si+1))));	// 13943 mov     dl, es:[si+1] ;~ 01A2:6737
cs=0x1a2;eip=0x00673b; 	T(CWDE);	// 13944 cwde ;~ 01A2:673B
cs=0x1a2;eip=0x00673d; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13945 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:673D
cs=0x1a2;eip=0x006743; 	T(SUB(edx, eax));	// 13946 sub     edx, eax ;~ 01A2:6743
cs=0x1a2;eip=0x006746; 	T(IMUL2_4(edx,ecx));	// 13947 imul    edx, ecx ;~ 01A2:6746
cs=0x1a2;eip=0x00674a; 	T(SAR(edx, 8));	// 13948 sar     edx, 8 ;~ 01A2:674A
cs=0x1a2;eip=0x00674e; 	T(ADD(eax, edx));	// 13949 add     eax, edx ;~ 01A2:674E
cs=0x1a2;eip=0x006754; 	T(ADC(si, bp));	// 13954 adc     si, bp ;~ 01A2:6754
cs=0x1a2;eip=0x006756; 	T(XOR(edx, edx));	// 13955 xor     edx, edx ;~ 01A2:6756
cs=0x1a2;eip=0x006759; 	X(MOV(*(dd*)(raddr(ds,di+0x30)), eax));	// 13956 mov     [di+30h], eax ;~ 01A2:6759
cs=0x1a2;eip=0x00675d; 	T(MOV(dl, *(raddr(es,si))));	// 13957 mov     dl, es:[si] ;~ 01A2:675D
cs=0x1a2;eip=0x006760; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13958 mov     ax, [ebx+edx*2] ;~ 01A2:6760
cs=0x1a2;eip=0x006764; 	T(MOV(dl, *(raddr(es,si+1))));	// 13959 mov     dl, es:[si+1] ;~ 01A2:6764
cs=0x1a2;eip=0x006768; 	T(CWDE);	// 13960 cwde ;~ 01A2:6768
cs=0x1a2;eip=0x00676a; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13961 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:676A
cs=0x1a2;eip=0x006770; 	T(SUB(edx, eax));	// 13962 sub     edx, eax ;~ 01A2:6770
cs=0x1a2;eip=0x006773; 	T(IMUL2_4(edx,ecx));	// 13963 imul    edx, ecx ;~ 01A2:6773
cs=0x1a2;eip=0x006777; 	T(SAR(edx, 8));	// 13964 sar     edx, 8 ;~ 01A2:6777
cs=0x1a2;eip=0x00677b; 	T(ADD(eax, edx));	// 13965 add     eax, edx ;~ 01A2:677B
cs=0x1a2;eip=0x006781; 	T(ADC(si, bp));	// 13970 adc     si, bp ;~ 01A2:6781
cs=0x1a2;eip=0x006783; 	T(XOR(edx, edx));	// 13971 xor     edx, edx ;~ 01A2:6783
cs=0x1a2;eip=0x006786; 	X(MOV(*(dd*)(raddr(ds,di+0x38)), eax));	// 13972 mov     [di+38h], eax ;~ 01A2:6786
cs=0x1a2;eip=0x00678a; 	T(MOV(dl, *(raddr(es,si))));	// 13973 mov     dl, es:[si] ;~ 01A2:678A
cs=0x1a2;eip=0x00678d; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13974 mov     ax, [ebx+edx*2] ;~ 01A2:678D
cs=0x1a2;eip=0x006791; 	T(MOV(dl, *(raddr(es,si+1))));	// 13975 mov     dl, es:[si+1] ;~ 01A2:6791
cs=0x1a2;eip=0x006795; 	T(CWDE);	// 13976 cwde ;~ 01A2:6795
cs=0x1a2;eip=0x006797; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13977 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:6797
cs=0x1a2;eip=0x00679d; 	T(SUB(edx, eax));	// 13978 sub     edx, eax ;~ 01A2:679D
cs=0x1a2;eip=0x0067a0; 	T(IMUL2_4(edx,ecx));	// 13979 imul    edx, ecx ;~ 01A2:67A0
cs=0x1a2;eip=0x0067a4; 	T(SAR(edx, 8));	// 13980 sar     edx, 8 ;~ 01A2:67A4
cs=0x1a2;eip=0x0067a8; 	T(ADD(eax, edx));	// 13981 add     eax, edx ;~ 01A2:67A8
cs=0x1a2;eip=0x0067ae; 	T(ADC(si, bp));	// 13986 adc     si, bp ;~ 01A2:67AE
cs=0x1a2;eip=0x0067b0; 	T(XOR(edx, edx));	// 13987 xor     edx, edx ;~ 01A2:67B0
cs=0x1a2;eip=0x0067b3; 	X(MOV(*(dd*)(raddr(ds,di+0x40)), eax));	// 13988 mov     [di+40h], eax ;~ 01A2:67B3
cs=0x1a2;eip=0x0067b7; 	T(MOV(dl, *(raddr(es,si))));	// 13989 mov     dl, es:[si] ;~ 01A2:67B7
cs=0x1a2;eip=0x0067ba; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 13990 mov     ax, [ebx+edx*2] ;~ 01A2:67BA
cs=0x1a2;eip=0x0067be; 	T(MOV(dl, *(raddr(es,si+1))));	// 13991 mov     dl, es:[si+1] ;~ 01A2:67BE
cs=0x1a2;eip=0x0067c2; 	T(CWDE);	// 13992 cwde ;~ 01A2:67C2
cs=0x1a2;eip=0x0067c4; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 13993 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:67C4
cs=0x1a2;eip=0x0067ca; 	T(SUB(edx, eax));	// 13994 sub     edx, eax ;~ 01A2:67CA
cs=0x1a2;eip=0x0067cd; 	T(IMUL2_4(edx,ecx));	// 13995 imul    edx, ecx ;~ 01A2:67CD
cs=0x1a2;eip=0x0067d1; 	T(SAR(edx, 8));	// 13996 sar     edx, 8 ;~ 01A2:67D1
cs=0x1a2;eip=0x0067d5; 	T(ADD(eax, edx));	// 13997 add     eax, edx ;~ 01A2:67D5
cs=0x1a2;eip=0x0067db; 	T(ADC(si, bp));	// 14002 adc     si, bp ;~ 01A2:67DB
cs=0x1a2;eip=0x0067dd; 	T(XOR(edx, edx));	// 14003 xor     edx, edx ;~ 01A2:67DD
cs=0x1a2;eip=0x0067e0; 	X(MOV(*(dd*)(raddr(ds,di+0x48)), eax));	// 14004 mov     [di+48h], eax ;~ 01A2:67E0
cs=0x1a2;eip=0x0067e4; 	T(MOV(dl, *(raddr(es,si))));	// 14005 mov     dl, es:[si] ;~ 01A2:67E4
cs=0x1a2;eip=0x0067e7; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14006 mov     ax, [ebx+edx*2] ;~ 01A2:67E7
cs=0x1a2;eip=0x0067eb; 	T(MOV(dl, *(raddr(es,si+1))));	// 14007 mov     dl, es:[si+1] ;~ 01A2:67EB
cs=0x1a2;eip=0x0067ef; 	T(CWDE);	// 14008 cwde ;~ 01A2:67EF
cs=0x1a2;eip=0x0067f1; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 14009 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:67F1
cs=0x1a2;eip=0x0067f7; 	T(SUB(edx, eax));	// 14010 sub     edx, eax ;~ 01A2:67F7
cs=0x1a2;eip=0x0067fa; 	T(IMUL2_4(edx,ecx));	// 14011 imul    edx, ecx ;~ 01A2:67FA
cs=0x1a2;eip=0x0067fe; 	T(SAR(edx, 8));	// 14012 sar     edx, 8 ;~ 01A2:67FE
cs=0x1a2;eip=0x006802; 	T(ADD(eax, edx));	// 14013 add     eax, edx ;~ 01A2:6802
cs=0x1a2;eip=0x006808; 	T(ADC(si, bp));	// 14018 adc     si, bp ;~ 01A2:6808
cs=0x1a2;eip=0x00680a; 	T(XOR(edx, edx));	// 14019 xor     edx, edx ;~ 01A2:680A
cs=0x1a2;eip=0x00680d; 	X(MOV(*(dd*)(raddr(ds,di+0x50)), eax));	// 14020 mov     [di+50h], eax ;~ 01A2:680D
cs=0x1a2;eip=0x006811; 	T(MOV(dl, *(raddr(es,si))));	// 14021 mov     dl, es:[si] ;~ 01A2:6811
cs=0x1a2;eip=0x006814; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14022 mov     ax, [ebx+edx*2] ;~ 01A2:6814
cs=0x1a2;eip=0x006818; 	T(MOV(dl, *(raddr(es,si+1))));	// 14023 mov     dl, es:[si+1] ;~ 01A2:6818
cs=0x1a2;eip=0x00681c; 	T(CWDE);	// 14024 cwde ;~ 01A2:681C
cs=0x1a2;eip=0x00681e; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 14025 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:681E
cs=0x1a2;eip=0x006824; 	T(SUB(edx, eax));	// 14026 sub     edx, eax ;~ 01A2:6824
cs=0x1a2;eip=0x006827; 	T(IMUL2_4(edx,ecx));	// 14027 imul    edx, ecx ;~ 01A2:6827
cs=0x1a2;eip=0x00682b; 	T(SAR(edx, 8));	// 14028 sar     edx, 8 ;~ 01A2:682B
cs=0x1a2;eip=0x00682f; 	T(ADD(eax, edx));	// 14029 add     eax, edx ;~ 01A2:682F
cs=0x1a2;eip=0x006835; 	T(ADC(si, bp));	// 14034 adc     si, bp ;~ 01A2:6835
cs=0x1a2;eip=0x006837; 	T(XOR(edx, edx));	// 14035 xor     edx, edx ;~ 01A2:6837
cs=0x1a2;eip=0x00683a; 	X(MOV(*(dd*)(raddr(ds,di+0x58)), eax));	// 14036 mov     [di+58h], eax ;~ 01A2:683A
cs=0x1a2;eip=0x00683e; 	T(MOV(dl, *(raddr(es,si))));	// 14037 mov     dl, es:[si] ;~ 01A2:683E
cs=0x1a2;eip=0x006841; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14038 mov     ax, [ebx+edx*2] ;~ 01A2:6841
cs=0x1a2;eip=0x006845; 	T(MOV(dl, *(raddr(es,si+1))));	// 14039 mov     dl, es:[si+1] ;~ 01A2:6845
cs=0x1a2;eip=0x006849; 	T(CWDE);	// 14040 cwde ;~ 01A2:6849
cs=0x1a2;eip=0x00684b; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 14041 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:684B
cs=0x1a2;eip=0x006851; 	T(SUB(edx, eax));	// 14042 sub     edx, eax ;~ 01A2:6851
cs=0x1a2;eip=0x006854; 	T(IMUL2_4(edx,ecx));	// 14043 imul    edx, ecx ;~ 01A2:6854
cs=0x1a2;eip=0x006858; 	T(SAR(edx, 8));	// 14044 sar     edx, 8 ;~ 01A2:6858
cs=0x1a2;eip=0x00685c; 	T(ADD(eax, edx));	// 14045 add     eax, edx ;~ 01A2:685C
cs=0x1a2;eip=0x006862; 	T(ADC(si, bp));	// 14050 adc     si, bp ;~ 01A2:6862
cs=0x1a2;eip=0x006864; 	T(XOR(edx, edx));	// 14051 xor     edx, edx ;~ 01A2:6864
cs=0x1a2;eip=0x006867; 	X(MOV(*(dd*)(raddr(ds,di+0x60)), eax));	// 14052 mov     [di+60h], eax ;~ 01A2:6867
cs=0x1a2;eip=0x00686b; 	T(MOV(dl, *(raddr(es,si))));	// 14053 mov     dl, es:[si] ;~ 01A2:686B
cs=0x1a2;eip=0x00686e; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14054 mov     ax, [ebx+edx*2] ;~ 01A2:686E
cs=0x1a2;eip=0x006872; 	T(MOV(dl, *(raddr(es,si+1))));	// 14055 mov     dl, es:[si+1] ;~ 01A2:6872
cs=0x1a2;eip=0x006876; 	T(CWDE);	// 14056 cwde ;~ 01A2:6876
cs=0x1a2;eip=0x006878; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 14057 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:6878
cs=0x1a2;eip=0x00687e; 	T(SUB(edx, eax));	// 14058 sub     edx, eax ;~ 01A2:687E
cs=0x1a2;eip=0x006881; 	T(IMUL2_4(edx,ecx));	// 14059 imul    edx, ecx ;~ 01A2:6881
cs=0x1a2;eip=0x006885; 	T(SAR(edx, 8));	// 14060 sar     edx, 8 ;~ 01A2:6885
cs=0x1a2;eip=0x006889; 	T(ADD(eax, edx));	// 14061 add     eax, edx ;~ 01A2:6889
cs=0x1a2;eip=0x00688f; 	T(ADC(si, bp));	// 14066 adc     si, bp ;~ 01A2:688F
cs=0x1a2;eip=0x006891; 	T(XOR(edx, edx));	// 14067 xor     edx, edx ;~ 01A2:6891
cs=0x1a2;eip=0x006894; 	X(MOV(*(dd*)(raddr(ds,di+0x68)), eax));	// 14068 mov     [di+68h], eax ;~ 01A2:6894
cs=0x1a2;eip=0x006898; 	T(MOV(dl, *(raddr(es,si))));	// 14069 mov     dl, es:[si] ;~ 01A2:6898
cs=0x1a2;eip=0x00689b; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14070 mov     ax, [ebx+edx*2] ;~ 01A2:689B
cs=0x1a2;eip=0x00689f; 	T(MOV(dl, *(raddr(es,si+1))));	// 14071 mov     dl, es:[si+1] ;~ 01A2:689F
cs=0x1a2;eip=0x0068a3; 	T(CWDE);	// 14072 cwde ;~ 01A2:68A3
cs=0x1a2;eip=0x0068a5; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 14073 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:68A5
cs=0x1a2;eip=0x0068ab; 	T(SUB(edx, eax));	// 14074 sub     edx, eax ;~ 01A2:68AB
cs=0x1a2;eip=0x0068ae; 	T(IMUL2_4(edx,ecx));	// 14075 imul    edx, ecx ;~ 01A2:68AE
cs=0x1a2;eip=0x0068b2; 	T(SAR(edx, 8));	// 14076 sar     edx, 8 ;~ 01A2:68B2
cs=0x1a2;eip=0x0068b6; 	T(ADD(eax, edx));	// 14077 add     eax, edx ;~ 01A2:68B6
cs=0x1a2;eip=0x0068bc; 	T(ADC(si, bp));	// 14082 adc     si, bp ;~ 01A2:68BC
cs=0x1a2;eip=0x0068be; 	T(XOR(edx, edx));	// 14083 xor     edx, edx ;~ 01A2:68BE
cs=0x1a2;eip=0x0068c1; 	X(MOV(*(dd*)(raddr(ds,di+0x70)), eax));	// 14084 mov     [di+70h], eax ;~ 01A2:68C1
cs=0x1a2;eip=0x0068c5; 	T(MOV(dl, *(raddr(es,si))));	// 14085 mov     dl, es:[si] ;~ 01A2:68C5
cs=0x1a2;eip=0x0068c8; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14086 mov     ax, [ebx+edx*2] ;~ 01A2:68C8
cs=0x1a2;eip=0x0068cc; 	T(MOV(dl, *(raddr(es,si+1))));	// 14087 mov     dl, es:[si+1] ;~ 01A2:68CC
cs=0x1a2;eip=0x0068d0; 	T(CWDE);	// 14088 cwde ;~ 01A2:68D0
cs=0x1a2;eip=0x0068d2; 	X(MOVSX(edx, *(dw*)(raddr(ds,ebx+edx*2))));	// 14089 movsx   edx, word ptr [ebx+edx*2] ;~ 01A2:68D2
cs=0x1a2;eip=0x0068d8; 	T(SUB(edx, eax));	// 14090 sub     edx, eax ;~ 01A2:68D8
cs=0x1a2;eip=0x0068db; 	T(IMUL2_4(edx,ecx));	// 14091 imul    edx, ecx ;~ 01A2:68DB
cs=0x1a2;eip=0x0068df; 	T(SAR(edx, 8));	// 14092 sar     edx, 8 ;~ 01A2:68DF
cs=0x1a2;eip=0x0068e3; 	T(ADD(eax, edx));	// 14093 add     eax, edx ;~ 01A2:68E3
cs=0x1a2;eip=0x0068e9; 	T(ADC(si, bp));	// 14098 adc     si, bp ;~ 01A2:68E9
cs=0x1a2;eip=0x0068eb; 	T(XOR(edx, edx));	// 14099 xor     edx, edx ;~ 01A2:68EB
cs=0x1a2;eip=0x0068ee; 	X(MOV(*(dd*)(raddr(ds,di+0x78)), eax));	// 14100 mov     [di+78h], eax ;~ 01A2:68EE
cs=0x1a2;eip=0x0068f2; 	T(ADD(di, 0x80));	// 14101 add     di, 80h ; '€' ;~ 01A2:68F2
cs=0x1a2;eip=0x0068f6; 	T(MOV(dx, m2c::kloc_16900));	// 14102 mov     dx, offset loc_16900 ;~ 01A2:68F6
cs=0x1a2;eip=0x0068f9; 	T(CMP(byte_24616, 1));	// 14103 cmp     byte_24616, 1 ;~ 01A2:68F9
cs=0x1a2;eip=0x0068fe; 	J(JZ(loc_1690b));	// 14104 jz      short loc_1690B ;~ 01A2:68FE
loc_16900:
	// 5189 
cs=0x1a2;eip=0x006900; 	X(DEC(byte_24683));	// 14107 dec     byte_24683 ;~ 01A2:6900
cs=0x1a2;eip=0x006904; 	J(JNZ(loc_16620));	// 14108 jnz     loc_16620 ;~ 01A2:6904
cs=0x1a2;eip=0x006908; 	J(JMP(loc_1578c));	// 14109 jmp     loc_1578C ;~ 01A2:6908
loc_1690b:
	// 5190 
cs=0x1a2;eip=0x00690b; 	T(MOV(ax, word_24614));	// 14114 mov     ax, word_24614 ;~ 01A2:690B
cs=0x1a2;eip=0x00690e; 	T(CMP(al, ah));	// 14115 cmp     al, ah ;~ 01A2:690E
cs=0x1a2;eip=0x006910; 	J(JA(loc_16929));	// 14116 ja      short loc_16929 ;~ 01A2:6910
cs=0x1a2;eip=0x006912; 	T(ADD(al, 4));	// 14117 add     al, 4 ;~ 01A2:6912
cs=0x1a2;eip=0x006914; 	T(CMP(al, ah));	// 14118 cmp     al, ah ;~ 01A2:6914
cs=0x1a2;eip=0x006916; 	J(JNC(loc_16942));	// 14119 jnb     short loc_16942 ;~ 01A2:6916
cs=0x1a2;eip=0x006918; 	X(MOV(*(db*)(((db*)&word_24614)), al));	// 14120 mov     byte ptr word_24614, al ;~ 01A2:6918
cs=0x1a2;eip=0x00691b; 	T(MOVZX(ebx, al));	// 14121 movzx   ebx, al ;~ 01A2:691B
cs=0x1a2;eip=0x00691f; 	T(SHL(ebx, 9));	// 14122 shl     ebx, 9 ;~ 01A2:691F
cs=0x1a2;eip=0x006923; 	T(ADD(bx, offset(seg003,_vlm_byte_table)));	// 14123 add     bx, offset _vlm_byte_table ;~ 01A2:6923
cs=0x1a2;eip=0x006927; __disp=dx;
	J(return __dispatch_call(__disp, _state););	// 14124 jmp     dx ;~ 01A2:6927
loc_16929:
	// 5191 
cs=0x1a2;eip=0x006929; 	T(SUB(al, 4));	// 14128 sub     al, 4 ;~ 01A2:6929
cs=0x1a2;eip=0x00692b; 	J(JBE(loc_16942));	// 14129 jbe     short loc_16942 ;~ 01A2:692B
cs=0x1a2;eip=0x00692d; 	T(CMP(al, ah));	// 14130 cmp     al, ah ;~ 01A2:692D
cs=0x1a2;eip=0x00692f; 	J(JBE(loc_16942));	// 14131 jbe     short loc_16942 ;~ 01A2:692F
cs=0x1a2;eip=0x006931; 	X(MOV(*(db*)(((db*)&word_24614)), al));	// 14132 mov     byte ptr word_24614, al ;~ 01A2:6931
cs=0x1a2;eip=0x006934; 	T(MOVZX(ebx, al));	// 14133 movzx   ebx, al ;~ 01A2:6934
cs=0x1a2;eip=0x006938; 	T(SHL(ebx, 9));	// 14134 shl     ebx, 9 ;~ 01A2:6938
cs=0x1a2;eip=0x00693c; 	T(ADD(bx, offset(seg003,_vlm_byte_table)));	// 14135 add     bx, offset _vlm_byte_table ;~ 01A2:693C
cs=0x1a2;eip=0x006940; __disp=dx;
	J(return __dispatch_call(__disp, _state););	// 14136 jmp     dx ;~ 01A2:6940
loc_16942:
	// 5192 
cs=0x1a2;eip=0x006942; 	X(MOV(*(db*)(((db*)&word_24614)), ah));	// 14141 mov     byte ptr word_24614, ah ;~ 01A2:6942
cs=0x1a2;eip=0x006946; 	X(MOV(byte_24616, 0));	// 14142 mov     byte_24616, 0 ;~ 01A2:6946
cs=0x1a2;eip=0x00694b; 	T(MOVZX(ebx, ah));	// 14143 movzx   ebx, ah ;~ 01A2:694B
cs=0x1a2;eip=0x00694f; 	T(SHL(ebx, 9));	// 14144 shl     ebx, 9 ;~ 01A2:694F
cs=0x1a2;eip=0x006953; 	T(ADD(bx, offset(seg003,_vlm_byte_table)));	// 14145 add     bx, offset _vlm_byte_table ;~ 01A2:6953
cs=0x1a2;eip=0x006957; __disp=dx;
	J(return __dispatch_call(__disp, _state););	// 14146 jmp     dx ;~ 01A2:6957
loc_16959:
	// 5193 
cs=0x1a2;eip=0x006959; 	T(XOR(edx, edx));	// 14151 xor     edx, edx ;~ 01A2:6959
cs=0x1a2;eip=0x00695c; 	T(MOV(ax, word_245e4));	// 14152 mov     ax, word_245E4 ;~ 01A2:695C
cs=0x1a2;eip=0x00695f; 	T(AND(eax, 0x0F));	// 14153 and     eax, 0Fh ;~ 01A2:695F
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x006963; __disp=*(dw*)(((db*)&off_18e00)+eax*2);
	J(return __dispatch_call(__disp, _state););	// 14154 jmp     cs:off_18E00[eax*2] ;~ 01A2:6963
loc_1696c:
	// 5194 
cs=0x1a2;eip=0x00696c; 	T(MOV(dl, *(raddr(es,si))));	// 14159 mov     dl, es:[si] ;~ 01A2:696C
cs=0x1a2;eip=0x00696f; 	T(ADD(cl, ch));	// 14160 add     cl, ch ;~ 01A2:696F
cs=0x1a2;eip=0x006971; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14161 mov     ax, [ebx+edx*2] ;~ 01A2:6971
cs=0x1a2;eip=0x006975; 	T(CWDE);	// 14162 cwde ;~ 01A2:6975
cs=0x1a2;eip=0x006977; 	T(ADC(si, bp));	// 14163 adc     si, bp ;~ 01A2:6977
cs=0x1a2;eip=0x006979; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14164 mov     [di], eax ;~ 01A2:6979
cs=0x1a2;eip=0x00697c; 	T(ADD(di, 8));	// 14165 add     di, 8 ;~ 01A2:697C
loc_1697f:
	// 5195 
cs=0x1a2;eip=0x00697f; 	T(MOV(dl, *(raddr(es,si))));	// 14169 mov     dl, es:[si] ;~ 01A2:697F
cs=0x1a2;eip=0x006982; 	T(ADD(cl, ch));	// 14170 add     cl, ch ;~ 01A2:6982
cs=0x1a2;eip=0x006984; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14171 mov     ax, [ebx+edx*2] ;~ 01A2:6984
cs=0x1a2;eip=0x006988; 	T(CWDE);	// 14172 cwde ;~ 01A2:6988
cs=0x1a2;eip=0x00698a; 	T(ADC(si, bp));	// 14173 adc     si, bp ;~ 01A2:698A
cs=0x1a2;eip=0x00698c; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14174 mov     [di], eax ;~ 01A2:698C
cs=0x1a2;eip=0x00698f; 	T(ADD(di, 8));	// 14175 add     di, 8 ;~ 01A2:698F
loc_16992:
	// 5196 
cs=0x1a2;eip=0x006992; 	T(MOV(dl, *(raddr(es,si))));	// 14179 mov     dl, es:[si] ;~ 01A2:6992
cs=0x1a2;eip=0x006995; 	T(ADD(cl, ch));	// 14180 add     cl, ch ;~ 01A2:6995
cs=0x1a2;eip=0x006997; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14181 mov     ax, [ebx+edx*2] ;~ 01A2:6997
cs=0x1a2;eip=0x00699b; 	T(CWDE);	// 14182 cwde ;~ 01A2:699B
cs=0x1a2;eip=0x00699d; 	T(ADC(si, bp));	// 14183 adc     si, bp ;~ 01A2:699D
cs=0x1a2;eip=0x00699f; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14184 mov     [di], eax ;~ 01A2:699F
cs=0x1a2;eip=0x0069a2; 	T(ADD(di, 8));	// 14185 add     di, 8 ;~ 01A2:69A2
loc_169a5:
	// 5197 
cs=0x1a2;eip=0x0069a5; 	T(MOV(dl, *(raddr(es,si))));	// 14189 mov     dl, es:[si] ;~ 01A2:69A5
cs=0x1a2;eip=0x0069a8; 	T(ADD(cl, ch));	// 14190 add     cl, ch ;~ 01A2:69A8
cs=0x1a2;eip=0x0069aa; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14191 mov     ax, [ebx+edx*2] ;~ 01A2:69AA
cs=0x1a2;eip=0x0069ae; 	T(CWDE);	// 14192 cwde ;~ 01A2:69AE
cs=0x1a2;eip=0x0069b0; 	T(ADC(si, bp));	// 14193 adc     si, bp ;~ 01A2:69B0
cs=0x1a2;eip=0x0069b2; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14194 mov     [di], eax ;~ 01A2:69B2
cs=0x1a2;eip=0x0069b5; 	T(ADD(di, 8));	// 14195 add     di, 8 ;~ 01A2:69B5
loc_169b8:
	// 5198 
cs=0x1a2;eip=0x0069b8; 	T(MOV(dl, *(raddr(es,si))));	// 14199 mov     dl, es:[si] ;~ 01A2:69B8
cs=0x1a2;eip=0x0069bb; 	T(ADD(cl, ch));	// 14200 add     cl, ch ;~ 01A2:69BB
cs=0x1a2;eip=0x0069bd; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14201 mov     ax, [ebx+edx*2] ;~ 01A2:69BD
cs=0x1a2;eip=0x0069c1; 	T(CWDE);	// 14202 cwde ;~ 01A2:69C1
cs=0x1a2;eip=0x0069c3; 	T(ADC(si, bp));	// 14203 adc     si, bp ;~ 01A2:69C3
cs=0x1a2;eip=0x0069c5; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14204 mov     [di], eax ;~ 01A2:69C5
cs=0x1a2;eip=0x0069c8; 	T(ADD(di, 8));	// 14205 add     di, 8 ;~ 01A2:69C8
loc_169cb:
	// 5199 
cs=0x1a2;eip=0x0069cb; 	T(MOV(dl, *(raddr(es,si))));	// 14209 mov     dl, es:[si] ;~ 01A2:69CB
cs=0x1a2;eip=0x0069ce; 	T(ADD(cl, ch));	// 14210 add     cl, ch ;~ 01A2:69CE
cs=0x1a2;eip=0x0069d0; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14211 mov     ax, [ebx+edx*2] ;~ 01A2:69D0
cs=0x1a2;eip=0x0069d4; 	T(CWDE);	// 14212 cwde ;~ 01A2:69D4
cs=0x1a2;eip=0x0069d6; 	T(ADC(si, bp));	// 14213 adc     si, bp ;~ 01A2:69D6
cs=0x1a2;eip=0x0069d8; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14214 mov     [di], eax ;~ 01A2:69D8
cs=0x1a2;eip=0x0069db; 	T(ADD(di, 8));	// 14215 add     di, 8 ;~ 01A2:69DB
loc_169de:
	// 5200 
cs=0x1a2;eip=0x0069de; 	T(MOV(dl, *(raddr(es,si))));	// 14219 mov     dl, es:[si] ;~ 01A2:69DE
cs=0x1a2;eip=0x0069e1; 	T(ADD(cl, ch));	// 14220 add     cl, ch ;~ 01A2:69E1
cs=0x1a2;eip=0x0069e3; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14221 mov     ax, [ebx+edx*2] ;~ 01A2:69E3
cs=0x1a2;eip=0x0069e7; 	T(CWDE);	// 14222 cwde ;~ 01A2:69E7
cs=0x1a2;eip=0x0069e9; 	T(ADC(si, bp));	// 14223 adc     si, bp ;~ 01A2:69E9
cs=0x1a2;eip=0x0069eb; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14224 mov     [di], eax ;~ 01A2:69EB
cs=0x1a2;eip=0x0069ee; 	T(ADD(di, 8));	// 14225 add     di, 8 ;~ 01A2:69EE
loc_169f1:
	// 5201 
cs=0x1a2;eip=0x0069f1; 	T(MOV(dl, *(raddr(es,si))));	// 14229 mov     dl, es:[si] ;~ 01A2:69F1
cs=0x1a2;eip=0x0069f4; 	T(ADD(cl, ch));	// 14230 add     cl, ch ;~ 01A2:69F4
cs=0x1a2;eip=0x0069f6; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14231 mov     ax, [ebx+edx*2] ;~ 01A2:69F6
cs=0x1a2;eip=0x0069fa; 	T(CWDE);	// 14232 cwde ;~ 01A2:69FA
cs=0x1a2;eip=0x0069fc; 	T(ADC(si, bp));	// 14233 adc     si, bp ;~ 01A2:69FC
cs=0x1a2;eip=0x0069fe; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14234 mov     [di], eax ;~ 01A2:69FE
cs=0x1a2;eip=0x006a01; 	T(ADD(di, 8));	// 14235 add     di, 8 ;~ 01A2:6A01
loc_16a04:
	// 5202 
cs=0x1a2;eip=0x006a04; 	T(MOV(dl, *(raddr(es,si))));	// 14239 mov     dl, es:[si] ;~ 01A2:6A04
cs=0x1a2;eip=0x006a07; 	T(ADD(cl, ch));	// 14240 add     cl, ch ;~ 01A2:6A07
cs=0x1a2;eip=0x006a09; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14241 mov     ax, [ebx+edx*2] ;~ 01A2:6A09
cs=0x1a2;eip=0x006a0d; 	T(CWDE);	// 14242 cwde ;~ 01A2:6A0D
cs=0x1a2;eip=0x006a0f; 	T(ADC(si, bp));	// 14243 adc     si, bp ;~ 01A2:6A0F
cs=0x1a2;eip=0x006a11; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14244 mov     [di], eax ;~ 01A2:6A11
cs=0x1a2;eip=0x006a14; 	T(ADD(di, 8));	// 14245 add     di, 8 ;~ 01A2:6A14
loc_16a17:
	// 5203 
cs=0x1a2;eip=0x006a17; 	T(MOV(dl, *(raddr(es,si))));	// 14249 mov     dl, es:[si] ;~ 01A2:6A17
cs=0x1a2;eip=0x006a1a; 	T(ADD(cl, ch));	// 14250 add     cl, ch ;~ 01A2:6A1A
cs=0x1a2;eip=0x006a1c; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14251 mov     ax, [ebx+edx*2] ;~ 01A2:6A1C
cs=0x1a2;eip=0x006a20; 	T(CWDE);	// 14252 cwde ;~ 01A2:6A20
cs=0x1a2;eip=0x006a22; 	T(ADC(si, bp));	// 14253 adc     si, bp ;~ 01A2:6A22
cs=0x1a2;eip=0x006a24; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14254 mov     [di], eax ;~ 01A2:6A24
cs=0x1a2;eip=0x006a27; 	T(ADD(di, 8));	// 14255 add     di, 8 ;~ 01A2:6A27
loc_16a2a:
	// 5204 
cs=0x1a2;eip=0x006a2a; 	T(MOV(dl, *(raddr(es,si))));	// 14259 mov     dl, es:[si] ;~ 01A2:6A2A
cs=0x1a2;eip=0x006a2d; 	T(ADD(cl, ch));	// 14260 add     cl, ch ;~ 01A2:6A2D
cs=0x1a2;eip=0x006a2f; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14261 mov     ax, [ebx+edx*2] ;~ 01A2:6A2F
cs=0x1a2;eip=0x006a33; 	T(CWDE);	// 14262 cwde ;~ 01A2:6A33
cs=0x1a2;eip=0x006a35; 	T(ADC(si, bp));	// 14263 adc     si, bp ;~ 01A2:6A35
cs=0x1a2;eip=0x006a37; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14264 mov     [di], eax ;~ 01A2:6A37
cs=0x1a2;eip=0x006a3a; 	T(ADD(di, 8));	// 14265 add     di, 8 ;~ 01A2:6A3A
loc_16a3d:
	// 5205 
cs=0x1a2;eip=0x006a3d; 	T(MOV(dl, *(raddr(es,si))));	// 14269 mov     dl, es:[si] ;~ 01A2:6A3D
cs=0x1a2;eip=0x006a40; 	T(ADD(cl, ch));	// 14270 add     cl, ch ;~ 01A2:6A40
cs=0x1a2;eip=0x006a42; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14271 mov     ax, [ebx+edx*2] ;~ 01A2:6A42
cs=0x1a2;eip=0x006a46; 	T(CWDE);	// 14272 cwde ;~ 01A2:6A46
cs=0x1a2;eip=0x006a48; 	T(ADC(si, bp));	// 14273 adc     si, bp ;~ 01A2:6A48
cs=0x1a2;eip=0x006a4a; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14274 mov     [di], eax ;~ 01A2:6A4A
cs=0x1a2;eip=0x006a4d; 	T(ADD(di, 8));	// 14275 add     di, 8 ;~ 01A2:6A4D
loc_16a50:
	// 5206 
cs=0x1a2;eip=0x006a50; 	T(MOV(dl, *(raddr(es,si))));	// 14279 mov     dl, es:[si] ;~ 01A2:6A50
cs=0x1a2;eip=0x006a53; 	T(ADD(cl, ch));	// 14280 add     cl, ch ;~ 01A2:6A53
cs=0x1a2;eip=0x006a55; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14281 mov     ax, [ebx+edx*2] ;~ 01A2:6A55
cs=0x1a2;eip=0x006a59; 	T(CWDE);	// 14282 cwde ;~ 01A2:6A59
cs=0x1a2;eip=0x006a5b; 	T(ADC(si, bp));	// 14283 adc     si, bp ;~ 01A2:6A5B
cs=0x1a2;eip=0x006a5d; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14284 mov     [di], eax ;~ 01A2:6A5D
cs=0x1a2;eip=0x006a60; 	T(ADD(di, 8));	// 14285 add     di, 8 ;~ 01A2:6A60
loc_16a63:
	// 5207 
cs=0x1a2;eip=0x006a63; 	T(MOV(dl, *(raddr(es,si))));	// 14289 mov     dl, es:[si] ;~ 01A2:6A63
cs=0x1a2;eip=0x006a66; 	T(ADD(cl, ch));	// 14290 add     cl, ch ;~ 01A2:6A66
cs=0x1a2;eip=0x006a68; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14291 mov     ax, [ebx+edx*2] ;~ 01A2:6A68
cs=0x1a2;eip=0x006a6c; 	T(CWDE);	// 14292 cwde ;~ 01A2:6A6C
cs=0x1a2;eip=0x006a6e; 	T(ADC(si, bp));	// 14293 adc     si, bp ;~ 01A2:6A6E
cs=0x1a2;eip=0x006a70; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14294 mov     [di], eax ;~ 01A2:6A70
cs=0x1a2;eip=0x006a73; 	T(ADD(di, 8));	// 14295 add     di, 8 ;~ 01A2:6A73
loc_16a76:
	// 5208 
cs=0x1a2;eip=0x006a76; 	T(MOV(dl, *(raddr(es,si))));	// 14299 mov     dl, es:[si] ;~ 01A2:6A76
cs=0x1a2;eip=0x006a79; 	T(ADD(cl, ch));	// 14300 add     cl, ch ;~ 01A2:6A79
cs=0x1a2;eip=0x006a7b; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14301 mov     ax, [ebx+edx*2] ;~ 01A2:6A7B
cs=0x1a2;eip=0x006a7f; 	T(CWDE);	// 14302 cwde ;~ 01A2:6A7F
cs=0x1a2;eip=0x006a81; 	T(ADC(si, bp));	// 14303 adc     si, bp ;~ 01A2:6A81
cs=0x1a2;eip=0x006a83; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14304 mov     [di], eax ;~ 01A2:6A83
cs=0x1a2;eip=0x006a86; 	T(ADD(di, 8));	// 14305 add     di, 8 ;~ 01A2:6A86
loc_16a89:
	// 5209 
cs=0x1a2;eip=0x006a89; 	T(CMP(byte_24683, 0));	// 14309 cmp     byte_24683, 0 ;~ 01A2:6A89
cs=0x1a2;eip=0x006a8e; 	J(JZ(loc_1578c));	// 14310 jz      loc_1578C ;~ 01A2:6A8E
loc_16a92:
	// 5210 
cs=0x1a2;eip=0x006a92; 	T(MOV(dl, *(raddr(es,si))));	// 14313 mov     dl, es:[si] ;~ 01A2:6A92
cs=0x1a2;eip=0x006a95; 	T(ADD(cl, ch));	// 14314 add     cl, ch ;~ 01A2:6A95
cs=0x1a2;eip=0x006a97; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14315 mov     ax, [ebx+edx*2] ;~ 01A2:6A97
cs=0x1a2;eip=0x006a9b; 	T(CWDE);	// 14316 cwde ;~ 01A2:6A9B
cs=0x1a2;eip=0x006a9d; 	T(ADC(si, bp));	// 14317 adc     si, bp ;~ 01A2:6A9D
cs=0x1a2;eip=0x006a9f; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14318 mov     [di], eax ;~ 01A2:6A9F
cs=0x1a2;eip=0x006aa2; 	T(MOV(dl, *(raddr(es,si))));	// 14319 mov     dl, es:[si] ;~ 01A2:6AA2
cs=0x1a2;eip=0x006aa5; 	T(ADD(cl, ch));	// 14320 add     cl, ch ;~ 01A2:6AA5
cs=0x1a2;eip=0x006aa7; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14321 mov     ax, [ebx+edx*2] ;~ 01A2:6AA7
cs=0x1a2;eip=0x006aab; 	T(CWDE);	// 14322 cwde ;~ 01A2:6AAB
cs=0x1a2;eip=0x006aad; 	T(ADC(si, bp));	// 14323 adc     si, bp ;~ 01A2:6AAD
cs=0x1a2;eip=0x006aaf; 	X(MOV(*(dd*)(raddr(ds,di+8)), eax));	// 14324 mov     [di+8], eax ;~ 01A2:6AAF
cs=0x1a2;eip=0x006ab3; 	T(MOV(dl, *(raddr(es,si))));	// 14325 mov     dl, es:[si] ;~ 01A2:6AB3
cs=0x1a2;eip=0x006ab6; 	T(ADD(cl, ch));	// 14326 add     cl, ch ;~ 01A2:6AB6
cs=0x1a2;eip=0x006ab8; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14327 mov     ax, [ebx+edx*2] ;~ 01A2:6AB8
cs=0x1a2;eip=0x006abc; 	T(CWDE);	// 14328 cwde ;~ 01A2:6ABC
cs=0x1a2;eip=0x006abe; 	T(ADC(si, bp));	// 14329 adc     si, bp ;~ 01A2:6ABE
cs=0x1a2;eip=0x006ac0; 	X(MOV(*(dd*)(raddr(ds,di+0x10)), eax));	// 14330 mov     [di+10h], eax ;~ 01A2:6AC0
cs=0x1a2;eip=0x006ac4; 	T(MOV(dl, *(raddr(es,si))));	// 14331 mov     dl, es:[si] ;~ 01A2:6AC4
cs=0x1a2;eip=0x006ac7; 	T(ADD(cl, ch));	// 14332 add     cl, ch ;~ 01A2:6AC7
cs=0x1a2;eip=0x006ac9; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14333 mov     ax, [ebx+edx*2] ;~ 01A2:6AC9
cs=0x1a2;eip=0x006acd; 	T(CWDE);	// 14334 cwde ;~ 01A2:6ACD
cs=0x1a2;eip=0x006acf; 	T(ADC(si, bp));	// 14335 adc     si, bp ;~ 01A2:6ACF
cs=0x1a2;eip=0x006ad1; 	X(MOV(*(dd*)(raddr(ds,di+0x18)), eax));	// 14336 mov     [di+18h], eax ;~ 01A2:6AD1
cs=0x1a2;eip=0x006ad5; 	T(MOV(dl, *(raddr(es,si))));	// 14337 mov     dl, es:[si] ;~ 01A2:6AD5
cs=0x1a2;eip=0x006ad8; 	T(ADD(cl, ch));	// 14338 add     cl, ch ;~ 01A2:6AD8
cs=0x1a2;eip=0x006ada; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14339 mov     ax, [ebx+edx*2] ;~ 01A2:6ADA
cs=0x1a2;eip=0x006ade; 	T(CWDE);	// 14340 cwde ;~ 01A2:6ADE
cs=0x1a2;eip=0x006ae0; 	T(ADC(si, bp));	// 14341 adc     si, bp ;~ 01A2:6AE0
cs=0x1a2;eip=0x006ae2; 	X(MOV(*(dd*)(raddr(ds,di+0x20)), eax));	// 14342 mov     [di+20h], eax ;~ 01A2:6AE2
cs=0x1a2;eip=0x006ae6; 	T(MOV(dl, *(raddr(es,si))));	// 14343 mov     dl, es:[si] ;~ 01A2:6AE6
cs=0x1a2;eip=0x006ae9; 	T(ADD(cl, ch));	// 14344 add     cl, ch ;~ 01A2:6AE9
cs=0x1a2;eip=0x006aeb; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14345 mov     ax, [ebx+edx*2] ;~ 01A2:6AEB
cs=0x1a2;eip=0x006aef; 	T(CWDE);	// 14346 cwde ;~ 01A2:6AEF
cs=0x1a2;eip=0x006af1; 	T(ADC(si, bp));	// 14347 adc     si, bp ;~ 01A2:6AF1
cs=0x1a2;eip=0x006af3; 	X(MOV(*(dd*)(raddr(ds,di+0x28)), eax));	// 14348 mov     [di+28h], eax ;~ 01A2:6AF3
cs=0x1a2;eip=0x006af7; 	T(MOV(dl, *(raddr(es,si))));	// 14349 mov     dl, es:[si] ;~ 01A2:6AF7
cs=0x1a2;eip=0x006afa; 	T(ADD(cl, ch));	// 14350 add     cl, ch ;~ 01A2:6AFA
cs=0x1a2;eip=0x006afc; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14351 mov     ax, [ebx+edx*2] ;~ 01A2:6AFC
cs=0x1a2;eip=0x006b00; 	T(CWDE);	// 14352 cwde ;~ 01A2:6B00
cs=0x1a2;eip=0x006b02; 	T(ADC(si, bp));	// 14353 adc     si, bp ;~ 01A2:6B02
cs=0x1a2;eip=0x006b04; 	X(MOV(*(dd*)(raddr(ds,di+0x30)), eax));	// 14354 mov     [di+30h], eax ;~ 01A2:6B04
cs=0x1a2;eip=0x006b08; 	T(MOV(dl, *(raddr(es,si))));	// 14355 mov     dl, es:[si] ;~ 01A2:6B08
cs=0x1a2;eip=0x006b0b; 	T(ADD(cl, ch));	// 14356 add     cl, ch ;~ 01A2:6B0B
cs=0x1a2;eip=0x006b0d; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14357 mov     ax, [ebx+edx*2] ;~ 01A2:6B0D
cs=0x1a2;eip=0x006b11; 	T(CWDE);	// 14358 cwde ;~ 01A2:6B11
cs=0x1a2;eip=0x006b13; 	T(ADC(si, bp));	// 14359 adc     si, bp ;~ 01A2:6B13
cs=0x1a2;eip=0x006b15; 	X(MOV(*(dd*)(raddr(ds,di+0x38)), eax));	// 14360 mov     [di+38h], eax ;~ 01A2:6B15
cs=0x1a2;eip=0x006b19; 	T(MOV(dl, *(raddr(es,si))));	// 14361 mov     dl, es:[si] ;~ 01A2:6B19
cs=0x1a2;eip=0x006b1c; 	T(ADD(cl, ch));	// 14362 add     cl, ch ;~ 01A2:6B1C
cs=0x1a2;eip=0x006b1e; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14363 mov     ax, [ebx+edx*2] ;~ 01A2:6B1E
cs=0x1a2;eip=0x006b22; 	T(CWDE);	// 14364 cwde ;~ 01A2:6B22
cs=0x1a2;eip=0x006b24; 	T(ADC(si, bp));	// 14365 adc     si, bp ;~ 01A2:6B24
cs=0x1a2;eip=0x006b26; 	X(MOV(*(dd*)(raddr(ds,di+0x40)), eax));	// 14366 mov     [di+40h], eax ;~ 01A2:6B26
cs=0x1a2;eip=0x006b2a; 	T(MOV(dl, *(raddr(es,si))));	// 14367 mov     dl, es:[si] ;~ 01A2:6B2A
cs=0x1a2;eip=0x006b2d; 	T(ADD(cl, ch));	// 14368 add     cl, ch ;~ 01A2:6B2D
cs=0x1a2;eip=0x006b2f; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14369 mov     ax, [ebx+edx*2] ;~ 01A2:6B2F
cs=0x1a2;eip=0x006b33; 	T(CWDE);	// 14370 cwde ;~ 01A2:6B33
cs=0x1a2;eip=0x006b35; 	T(ADC(si, bp));	// 14371 adc     si, bp ;~ 01A2:6B35
cs=0x1a2;eip=0x006b37; 	X(MOV(*(dd*)(raddr(ds,di+0x48)), eax));	// 14372 mov     [di+48h], eax ;~ 01A2:6B37
cs=0x1a2;eip=0x006b3b; 	T(MOV(dl, *(raddr(es,si))));	// 14373 mov     dl, es:[si] ;~ 01A2:6B3B
cs=0x1a2;eip=0x006b3e; 	T(ADD(cl, ch));	// 14374 add     cl, ch ;~ 01A2:6B3E
cs=0x1a2;eip=0x006b40; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14375 mov     ax, [ebx+edx*2] ;~ 01A2:6B40
cs=0x1a2;eip=0x006b44; 	T(CWDE);	// 14376 cwde ;~ 01A2:6B44
cs=0x1a2;eip=0x006b46; 	T(ADC(si, bp));	// 14377 adc     si, bp ;~ 01A2:6B46
cs=0x1a2;eip=0x006b48; 	X(MOV(*(dd*)(raddr(ds,di+0x50)), eax));	// 14378 mov     [di+50h], eax ;~ 01A2:6B48
cs=0x1a2;eip=0x006b4c; 	T(MOV(dl, *(raddr(es,si))));	// 14379 mov     dl, es:[si] ;~ 01A2:6B4C
cs=0x1a2;eip=0x006b4f; 	T(ADD(cl, ch));	// 14380 add     cl, ch ;~ 01A2:6B4F
cs=0x1a2;eip=0x006b51; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14381 mov     ax, [ebx+edx*2] ;~ 01A2:6B51
cs=0x1a2;eip=0x006b55; 	T(CWDE);	// 14382 cwde ;~ 01A2:6B55
cs=0x1a2;eip=0x006b57; 	T(ADC(si, bp));	// 14383 adc     si, bp ;~ 01A2:6B57
cs=0x1a2;eip=0x006b59; 	X(MOV(*(dd*)(raddr(ds,di+0x58)), eax));	// 14384 mov     [di+58h], eax ;~ 01A2:6B59
cs=0x1a2;eip=0x006b5d; 	T(MOV(dl, *(raddr(es,si))));	// 14385 mov     dl, es:[si] ;~ 01A2:6B5D
cs=0x1a2;eip=0x006b60; 	T(ADD(cl, ch));	// 14386 add     cl, ch ;~ 01A2:6B60
cs=0x1a2;eip=0x006b62; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14387 mov     ax, [ebx+edx*2] ;~ 01A2:6B62
cs=0x1a2;eip=0x006b66; 	T(CWDE);	// 14388 cwde ;~ 01A2:6B66
cs=0x1a2;eip=0x006b68; 	T(ADC(si, bp));	// 14389 adc     si, bp ;~ 01A2:6B68
cs=0x1a2;eip=0x006b6a; 	X(MOV(*(dd*)(raddr(ds,di+0x60)), eax));	// 14390 mov     [di+60h], eax ;~ 01A2:6B6A
cs=0x1a2;eip=0x006b6e; 	T(MOV(dl, *(raddr(es,si))));	// 14391 mov     dl, es:[si] ;~ 01A2:6B6E
cs=0x1a2;eip=0x006b71; 	T(ADD(cl, ch));	// 14392 add     cl, ch ;~ 01A2:6B71
cs=0x1a2;eip=0x006b73; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14393 mov     ax, [ebx+edx*2] ;~ 01A2:6B73
cs=0x1a2;eip=0x006b77; 	T(CWDE);	// 14394 cwde ;~ 01A2:6B77
cs=0x1a2;eip=0x006b79; 	T(ADC(si, bp));	// 14395 adc     si, bp ;~ 01A2:6B79
cs=0x1a2;eip=0x006b7b; 	X(MOV(*(dd*)(raddr(ds,di+0x68)), eax));	// 14396 mov     [di+68h], eax ;~ 01A2:6B7B
cs=0x1a2;eip=0x006b7f; 	T(MOV(dl, *(raddr(es,si))));	// 14397 mov     dl, es:[si] ;~ 01A2:6B7F
cs=0x1a2;eip=0x006b82; 	T(ADD(cl, ch));	// 14398 add     cl, ch ;~ 01A2:6B82
cs=0x1a2;eip=0x006b84; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14399 mov     ax, [ebx+edx*2] ;~ 01A2:6B84
cs=0x1a2;eip=0x006b88; 	T(CWDE);	// 14400 cwde ;~ 01A2:6B88
cs=0x1a2;eip=0x006b8a; 	T(ADC(si, bp));	// 14401 adc     si, bp ;~ 01A2:6B8A
cs=0x1a2;eip=0x006b8c; 	X(MOV(*(dd*)(raddr(ds,di+0x70)), eax));	// 14402 mov     [di+70h], eax ;~ 01A2:6B8C
cs=0x1a2;eip=0x006b90; 	T(MOV(dl, *(raddr(es,si))));	// 14403 mov     dl, es:[si] ;~ 01A2:6B90
cs=0x1a2;eip=0x006b93; 	T(ADD(cl, ch));	// 14404 add     cl, ch ;~ 01A2:6B93
cs=0x1a2;eip=0x006b95; 	T(MOV(ax, *(dw*)(raddr(ds,ebx+edx*2))));	// 14405 mov     ax, [ebx+edx*2] ;~ 01A2:6B95
cs=0x1a2;eip=0x006b99; 	T(CWDE);	// 14406 cwde ;~ 01A2:6B99
cs=0x1a2;eip=0x006b9b; 	T(ADC(si, bp));	// 14407 adc     si, bp ;~ 01A2:6B9B
cs=0x1a2;eip=0x006b9d; 	X(MOV(*(dd*)(raddr(ds,di+0x78)), eax));	// 14408 mov     [di+78h], eax ;~ 01A2:6B9D
cs=0x1a2;eip=0x006ba1; 	T(ADD(di, 0x80));	// 14409 add     di, 80h ; '€' ;~ 01A2:6BA1
cs=0x1a2;eip=0x006ba5; 	X(DEC(byte_24683));	// 14410 dec     byte_24683 ;~ 01A2:6BA5
cs=0x1a2;eip=0x006ba9; 	J(JNZ(loc_16a92));	// 14411 jnz     loc_16A92 ;~ 01A2:6BA9
cs=0x1a2;eip=0x006bad; 	J(JMP(loc_1578c));	// 14412 jmp     loc_1578C ;~ 01A2:6BAD
loc_16bb0:
	// 5211 
cs=0x1a2;eip=0x006bb0; 	T(MOV(cx, word_245e4));	// 14416 mov     cx, word_245E4 ;~ 01A2:6BB0
cs=0x1a2;eip=0x006bb4; 	T(MOV(bx, cx));	// 14417 mov     bx, cx ;~ 01A2:6BB4
cs=0x1a2;eip=0x006bb6; 	T(SHR(cx, 4));	// 14418 shr     cx, 4 ;~ 01A2:6BB6
cs=0x1a2;eip=0x006bb9; 	T(XOR(eax, eax));	// 14419 xor     eax, eax ;~ 01A2:6BB9
cs=0x1a2;eip=0x006bbc; 	T(AND(bx, 0x0F));	// 14420 and     bx, 0Fh ;~ 01A2:6BBC
cs=0x1a2;eip=0x006bbf; 	T(SHL(bx, 1));	// 14421 shl     bx, 1 ;~ 01A2:6BBF
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x006bc1; __disp=*(dw*)(((db*)&off_18e80)+bx);
	J(return __dispatch_call(__disp, _state););	// 14422 jmp     cs:off_18E80[bx] ;~ 01A2:6BC1
loc_16bc6:
	// 5212 
cs=0x1a2;eip=0x006bc6; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14427 mov     [di], eax ;~ 01A2:6BC6
cs=0x1a2;eip=0x006bc9; 	T(ADD(di, 8));	// 14428 add     di, 8 ;~ 01A2:6BC9
loc_16bcc:
	// 5213 
cs=0x1a2;eip=0x006bcc; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14432 mov     [di], eax ;~ 01A2:6BCC
cs=0x1a2;eip=0x006bcf; 	T(ADD(di, 8));	// 14433 add     di, 8 ;~ 01A2:6BCF
loc_16bd2:
	// 5214 
cs=0x1a2;eip=0x006bd2; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14437 mov     [di], eax ;~ 01A2:6BD2
cs=0x1a2;eip=0x006bd5; 	T(ADD(di, 8));	// 14438 add     di, 8 ;~ 01A2:6BD5
loc_16bd8:
	// 5215 
cs=0x1a2;eip=0x006bd8; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14442 mov     [di], eax ;~ 01A2:6BD8
cs=0x1a2;eip=0x006bdb; 	T(ADD(di, 8));	// 14443 add     di, 8 ;~ 01A2:6BDB
loc_16bde:
	// 5216 
cs=0x1a2;eip=0x006bde; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14447 mov     [di], eax ;~ 01A2:6BDE
cs=0x1a2;eip=0x006be1; 	T(ADD(di, 8));	// 14448 add     di, 8 ;~ 01A2:6BE1
loc_16be4:
	// 5217 
cs=0x1a2;eip=0x006be4; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14452 mov     [di], eax ;~ 01A2:6BE4
cs=0x1a2;eip=0x006be7; 	T(ADD(di, 8));	// 14453 add     di, 8 ;~ 01A2:6BE7
loc_16bea:
	// 5218 
cs=0x1a2;eip=0x006bea; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14457 mov     [di], eax ;~ 01A2:6BEA
cs=0x1a2;eip=0x006bed; 	T(ADD(di, 8));	// 14458 add     di, 8 ;~ 01A2:6BED
loc_16bf0:
	// 5219 
cs=0x1a2;eip=0x006bf0; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14462 mov     [di], eax ;~ 01A2:6BF0
cs=0x1a2;eip=0x006bf3; 	T(ADD(di, 8));	// 14463 add     di, 8 ;~ 01A2:6BF3
loc_16bf6:
	// 5220 
cs=0x1a2;eip=0x006bf6; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14467 mov     [di], eax ;~ 01A2:6BF6
cs=0x1a2;eip=0x006bf9; 	T(ADD(di, 8));	// 14468 add     di, 8 ;~ 01A2:6BF9
loc_16bfc:
	// 5221 
cs=0x1a2;eip=0x006bfc; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14472 mov     [di], eax ;~ 01A2:6BFC
cs=0x1a2;eip=0x006bff; 	T(ADD(di, 8));	// 14473 add     di, 8 ;~ 01A2:6BFF
loc_16c02:
	// 5222 
cs=0x1a2;eip=0x006c02; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14477 mov     [di], eax ;~ 01A2:6C02
cs=0x1a2;eip=0x006c05; 	T(ADD(di, 8));	// 14478 add     di, 8 ;~ 01A2:6C05
loc_16c08:
	// 5223 
cs=0x1a2;eip=0x006c08; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14482 mov     [di], eax ;~ 01A2:6C08
cs=0x1a2;eip=0x006c0b; 	T(ADD(di, 8));	// 14483 add     di, 8 ;~ 01A2:6C0B
loc_16c0e:
	// 5224 
cs=0x1a2;eip=0x006c0e; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14487 mov     [di], eax ;~ 01A2:6C0E
cs=0x1a2;eip=0x006c11; 	T(ADD(di, 8));	// 14488 add     di, 8 ;~ 01A2:6C11
loc_16c14:
	// 5225 
cs=0x1a2;eip=0x006c14; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14492 mov     [di], eax ;~ 01A2:6C14
cs=0x1a2;eip=0x006c17; 	T(ADD(di, 8));	// 14493 add     di, 8 ;~ 01A2:6C17
loc_16c1a:
	// 5226 
cs=0x1a2;eip=0x006c1a; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14497 mov     [di], eax ;~ 01A2:6C1A
cs=0x1a2;eip=0x006c1d; 	T(ADD(di, 8));	// 14498 add     di, 8 ;~ 01A2:6C1D
loc_16c20:
	// 5227 
cs=0x1a2;eip=0x006c20; 	J(JCXZ(locret_16c68));	// 14502 jcxz    short locret_16C68 ;~ 01A2:6C20
loc_16c22:
	// 5228 
cs=0x1a2;eip=0x006c22; 	X(MOV(*(dd*)(raddr(ds,di)), eax));	// 14505 mov     [di], eax ;~ 01A2:6C22
cs=0x1a2;eip=0x006c25; 	X(MOV(*(dd*)(raddr(ds,di+8)), eax));	// 14506 mov     [di+8], eax ;~ 01A2:6C25
cs=0x1a2;eip=0x006c29; 	X(MOV(*(dd*)(raddr(ds,di+0x10)), eax));	// 14507 mov     [di+10h], eax ;~ 01A2:6C29
cs=0x1a2;eip=0x006c2d; 	X(MOV(*(dd*)(raddr(ds,di+0x18)), eax));	// 14508 mov     [di+18h], eax ;~ 01A2:6C2D
cs=0x1a2;eip=0x006c31; 	X(MOV(*(dd*)(raddr(ds,di+0x20)), eax));	// 14509 mov     [di+20h], eax ;~ 01A2:6C31
cs=0x1a2;eip=0x006c35; 	X(MOV(*(dd*)(raddr(ds,di+0x28)), eax));	// 14510 mov     [di+28h], eax ;~ 01A2:6C35
cs=0x1a2;eip=0x006c39; 	X(MOV(*(dd*)(raddr(ds,di+0x30)), eax));	// 14511 mov     [di+30h], eax ;~ 01A2:6C39
cs=0x1a2;eip=0x006c3d; 	X(MOV(*(dd*)(raddr(ds,di+0x38)), eax));	// 14512 mov     [di+38h], eax ;~ 01A2:6C3D
cs=0x1a2;eip=0x006c41; 	X(MOV(*(dd*)(raddr(ds,di+0x40)), eax));	// 14513 mov     [di+40h], eax ;~ 01A2:6C41
cs=0x1a2;eip=0x006c45; 	X(MOV(*(dd*)(raddr(ds,di+0x48)), eax));	// 14514 mov     [di+48h], eax ;~ 01A2:6C45
cs=0x1a2;eip=0x006c49; 	X(MOV(*(dd*)(raddr(ds,di+0x50)), eax));	// 14515 mov     [di+50h], eax ;~ 01A2:6C49
cs=0x1a2;eip=0x006c4d; 	X(MOV(*(dd*)(raddr(ds,di+0x58)), eax));	// 14516 mov     [di+58h], eax ;~ 01A2:6C4D
cs=0x1a2;eip=0x006c51; 	X(MOV(*(dd*)(raddr(ds,di+0x60)), eax));	// 14517 mov     [di+60h], eax ;~ 01A2:6C51
cs=0x1a2;eip=0x006c55; 	X(MOV(*(dd*)(raddr(ds,di+0x68)), eax));	// 14518 mov     [di+68h], eax ;~ 01A2:6C55
cs=0x1a2;eip=0x006c59; 	X(MOV(*(dd*)(raddr(ds,di+0x70)), eax));	// 14519 mov     [di+70h], eax ;~ 01A2:6C59
cs=0x1a2;eip=0x006c5d; 	X(MOV(*(dd*)(raddr(ds,di+0x78)), eax));	// 14520 mov     [di+78h], eax ;~ 01A2:6C5D
cs=0x1a2;eip=0x006c61; 	T(ADD(di, 0x80));	// 14521 add     di, 80h ; '€' ;~ 01A2:6C61
cs=0x1a2;eip=0x006c65; 	T(DEC(cx));	// 14522 dec     cx ;~ 01A2:6C65
cs=0x1a2;eip=0x006c66; 	J(JNZ(loc_16c22));	// 14523 jnz     short loc_16C22 ;~ 01A2:6C66
locret_16c68:
	// 5229 
cs=0x1a2;eip=0x006c68; 	J(RETN(0));	// 14526 retn ;~ 01A2:6C68

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::kloc_155a8: 	goto loc_155a8;
        case m2c::kloc_155b8: 	goto loc_155b8;
        case m2c::kloc_155c8: 	goto loc_155c8;
        case m2c::kloc_155d8: 	goto loc_155d8;
        case m2c::kloc_155e8: 	goto loc_155e8;
        case m2c::kloc_155f8: 	goto loc_155f8;
        case m2c::kloc_15608: 	goto loc_15608;
        case m2c::kloc_15618: 	goto loc_15618;
        case m2c::kloc_15628: 	goto loc_15628;
        case m2c::kloc_15638: 	goto loc_15638;
        case m2c::kloc_15648: 	goto loc_15648;
        case m2c::kloc_15658: 	goto loc_15658;
        case m2c::kloc_15668: 	goto loc_15668;
        case m2c::kloc_15678: 	goto loc_15678;
        case m2c::kloc_15688: 	goto loc_15688;
        case m2c::kloc_15698: 	goto loc_15698;
        case m2c::kloc_156a1: 	goto loc_156a1;
        case m2c::kloc_1578c: 	goto loc_1578c;
        case m2c::kloc_157bd: 	goto loc_157bd;
        case m2c::kloc_157d3: 	goto loc_157d3;
        case m2c::kloc_157dd: 	goto loc_157dd;
        case m2c::kloc_157e5: 	goto loc_157e5;
        case m2c::kloc_157f2: 	goto loc_157f2;
        case m2c::kloc_15877: 	goto loc_15877;
        case m2c::kloc_15891: 	goto loc_15891;
        case m2c::kloc_158c0: 	goto loc_158c0;
        case m2c::kloc_158ef: 	goto loc_158ef;
        case m2c::kloc_1591e: 	goto loc_1591e;
        case m2c::kloc_1594d: 	goto loc_1594d;
        case m2c::kloc_1597c: 	goto loc_1597c;
        case m2c::kloc_159ab: 	goto loc_159ab;
        case m2c::kloc_159da: 	goto loc_159da;
        case m2c::kloc_15a09: 	goto loc_15a09;
        case m2c::kloc_15a38: 	goto loc_15a38;
        case m2c::kloc_15a67: 	goto loc_15a67;
        case m2c::kloc_15a96: 	goto loc_15a96;
        case m2c::kloc_15ac5: 	goto loc_15ac5;
        case m2c::kloc_15af4: 	goto loc_15af4;
        case m2c::kloc_15b23: 	goto loc_15b23;
        case m2c::kloc_15b52: 	goto loc_15b52;
        case m2c::kloc_15b5b: 	goto loc_15b5b;
        case m2c::kloc_15e3d: 	goto loc_15e3d;
        case m2c::kloc_15e48: 	goto loc_15e48;
        case m2c::kloc_15e5b: 	goto loc_15e5b;
        case m2c::kloc_15e6e: 	goto loc_15e6e;
        case m2c::kloc_15e81: 	goto loc_15e81;
        case m2c::kloc_15e94: 	goto loc_15e94;
        case m2c::kloc_15ea7: 	goto loc_15ea7;
        case m2c::kloc_15eba: 	goto loc_15eba;
        case m2c::kloc_15ecd: 	goto loc_15ecd;
        case m2c::kloc_15ee0: 	goto loc_15ee0;
        case m2c::kloc_15ef3: 	goto loc_15ef3;
        case m2c::kloc_15f06: 	goto loc_15f06;
        case m2c::kloc_15f19: 	goto loc_15f19;
        case m2c::kloc_15f2c: 	goto loc_15f2c;
        case m2c::kloc_15f3f: 	goto loc_15f3f;
        case m2c::kloc_15f52: 	goto loc_15f52;
        case m2c::kloc_15f65: 	goto loc_15f65;
        case m2c::kloc_15f78: 	goto loc_15f78;
        case m2c::kloc_15f81: 	goto loc_15f81;
        case m2c::kloc_160d0: 	goto loc_160d0;
        case m2c::kloc_160e0: 	goto loc_160e0;
        case m2c::kloc_160f0: 	goto loc_160f0;
        case m2c::kloc_16100: 	goto loc_16100;
        case m2c::kloc_16110: 	goto loc_16110;
        case m2c::kloc_16120: 	goto loc_16120;
        case m2c::kloc_16130: 	goto loc_16130;
        case m2c::kloc_16140: 	goto loc_16140;
        case m2c::kloc_16150: 	goto loc_16150;
        case m2c::kloc_16160: 	goto loc_16160;
        case m2c::kloc_16170: 	goto loc_16170;
        case m2c::kloc_16180: 	goto loc_16180;
        case m2c::kloc_16190: 	goto loc_16190;
        case m2c::kloc_161a0: 	goto loc_161a0;
        case m2c::kloc_161b0: 	goto loc_161b0;
        case m2c::kloc_161c0: 	goto loc_161c0;
        case m2c::kloc_161c9: 	goto loc_161c9;
        case m2c::kloc_162b7: 	goto loc_162b7;
        case m2c::kloc_1633c: 	goto loc_1633c;
        case m2c::kloc_16356: 	goto loc_16356;
        case m2c::kloc_16385: 	goto loc_16385;
        case m2c::kloc_163b4: 	goto loc_163b4;
        case m2c::kloc_163e3: 	goto loc_163e3;
        case m2c::kloc_16412: 	goto loc_16412;
        case m2c::kloc_16441: 	goto loc_16441;
        case m2c::kloc_16470: 	goto loc_16470;
        case m2c::kloc_1649f: 	goto loc_1649f;
        case m2c::kloc_164ce: 	goto loc_164ce;
        case m2c::kloc_164fd: 	goto loc_164fd;
        case m2c::kloc_1652c: 	goto loc_1652c;
        case m2c::kloc_1655b: 	goto loc_1655b;
        case m2c::kloc_1658a: 	goto loc_1658a;
        case m2c::kloc_165b9: 	goto loc_165b9;
        case m2c::kloc_165e8: 	goto loc_165e8;
        case m2c::kloc_16617: 	goto loc_16617;
        case m2c::kloc_16620: 	goto loc_16620;
        case m2c::kloc_16900: 	goto loc_16900;
        case m2c::kloc_1690b: 	goto loc_1690b;
        case m2c::kloc_16929: 	goto loc_16929;
        case m2c::kloc_16942: 	goto loc_16942;
        case m2c::kloc_16959: 	goto loc_16959;
        case m2c::kloc_1696c: 	goto loc_1696c;
        case m2c::kloc_1697f: 	goto loc_1697f;
        case m2c::kloc_16992: 	goto loc_16992;
        case m2c::kloc_169a5: 	goto loc_169a5;
        case m2c::kloc_169b8: 	goto loc_169b8;
        case m2c::kloc_169cb: 	goto loc_169cb;
        case m2c::kloc_169de: 	goto loc_169de;
        case m2c::kloc_169f1: 	goto loc_169f1;
        case m2c::kloc_16a04: 	goto loc_16a04;
        case m2c::kloc_16a17: 	goto loc_16a17;
        case m2c::kloc_16a2a: 	goto loc_16a2a;
        case m2c::kloc_16a3d: 	goto loc_16a3d;
        case m2c::kloc_16a50: 	goto loc_16a50;
        case m2c::kloc_16a63: 	goto loc_16a63;
        case m2c::kloc_16a76: 	goto loc_16a76;
        case m2c::kloc_16a89: 	goto loc_16a89;
        case m2c::kloc_16a92: 	goto loc_16a92;
        case m2c::kloc_16bb0: 	goto loc_16bb0;
        case m2c::kloc_16bc6: 	goto loc_16bc6;
        case m2c::kloc_16bcc: 	goto loc_16bcc;
        case m2c::kloc_16bd2: 	goto loc_16bd2;
        case m2c::kloc_16bd8: 	goto loc_16bd8;
        case m2c::kloc_16bde: 	goto loc_16bde;
        case m2c::kloc_16be4: 	goto loc_16be4;
        case m2c::kloc_16bea: 	goto loc_16bea;
        case m2c::kloc_16bf0: 	goto loc_16bf0;
        case m2c::kloc_16bf6: 	goto loc_16bf6;
        case m2c::kloc_16bfc: 	goto loc_16bfc;
        case m2c::kloc_16c02: 	goto loc_16c02;
        case m2c::kloc_16c08: 	goto loc_16c08;
        case m2c::kloc_16c0e: 	goto loc_16c0e;
        case m2c::kloc_16c14: 	goto loc_16c14;
        case m2c::kloc_16c1a: 	goto loc_16c1a;
        case m2c::kloc_16c20: 	goto loc_16c20;
        case m2c::kloc_16c22: 	goto loc_16c22;
        case m2c::klocret_157bc: 	goto locret_157bc;
        case m2c::klocret_16c68: 	goto locret_16c68;
        case m2c::kseg000_58b5_proc: 	goto seg000_58b5_proc;
        case m2c::kseg000_637a_proc: 	goto seg000_637a_proc;
        case m2c::ksub_15577: 	goto sub_15577;
        case m2c::ksub_1609f: 	goto sub_1609f;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group26(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group26:
    _begin:
sub_16c69:
	// 14532 
cs=0x1a2;eip=0x006c69; 	J(CALL(_ems_save_mapctx,0));	// 14538 call    _ems_save_mapctx ;~ 01A2:6C69
cs=0x1a2;eip=0x006c6c; 	T(CLD);	// 14539 cld ;~ 01A2:6C6C
cs=0x1a2;eip=0x006c6d; 	T(MOV(ax, word_245e8));	// 14540 mov     ax, word_245E8 ;~ 01A2:6C6D
cs=0x1a2;eip=0x006c70; 	X(MOV(word_245e4, ax));	// 14541 mov     word_245E4, ax ;~ 01A2:6C70
cs=0x1a2;eip=0x006c73; 	X(DEC(word_245ee));	// 14542 dec     word_245EE ;~ 01A2:6C73
cs=0x1a2;eip=0x006c77; 	J(JNZ(loc_16c88));	// 14543 jnz     short loc_16C88 ;~ 01A2:6C77
cs=0x1a2;eip=0x006c79; 	J(CALL(sub_140b6,0));	// 14544 call    sub_140B6 ;~ 01A2:6C79
cs=0x1a2;eip=0x006c7c; 	T(MOV(ax, word_245ea));	// 14545 mov     ax, word_245EA ;~ 01A2:6C7C
cs=0x1a2;eip=0x006c7f; 	X(MOV(word_245e4, ax));	// 14546 mov     word_245E4, ax ;~ 01A2:6C7F
cs=0x1a2;eip=0x006c82; 	T(MOV(ax, word_245ec));	// 14547 mov     ax, word_245EC ;~ 01A2:6C82
cs=0x1a2;eip=0x006c85; 	X(MOV(word_245ee, ax));	// 14548 mov     word_245EE, ax ;~ 01A2:6C85
loc_16c88:
	// 5230 
cs=0x1a2;eip=0x006c88; 	X(MOV(byte_24682, 0));	// 14551 mov     byte_24682, 0 ;~ 01A2:6C88
cs=0x1a2;eip=0x006c8d; 	T(CMP(byte_24623, 1));	// 14552 cmp     byte_24623, 1 ;~ 01A2:6C8D
cs=0x1a2;eip=0x006c92; 	J(JZ(loc_171d3));	// 14553 jz      loc_171D3 ;~ 01A2:6C92
cs=0x1a2;eip=0x006c96; 	T(MOV(si, offset(seg003,_volume_25908)));	// 14554 mov     si, offset _volume_25908 ;~ 01A2:6C96
cs=0x1a2;eip=0x006c99; 	T(MOV(cx, word_245d4));	// 14555 mov     cx, word_245D4 ;~ 01A2:6C99
loc_16c9d:
	// 5231 
cs=0x1a2;eip=0x006c9d; 	T(CMP(*(raddr(ds,si+0x1D)), 0));	// 14558 cmp     byte ptr [si+1Dh], 0 ;~ 01A2:6C9D
cs=0x1a2;eip=0x006ca1; 	J(JNZ(loc_16cbe));	// 14559 jnz     short loc_16CBE ;~ 01A2:6CA1
cs=0x1a2;eip=0x006ca3; 	X(PUSH(cx));	// 14560 push    cx ;~ 01A2:6CA3
cs=0x1a2;eip=0x006ca4; 	X(PUSH(si));	// 14561 push    si ;~ 01A2:6CA4
cs=0x1a2;eip=0x006ca5; 	T(MOV(di, offset(seg003,_chrin)));	// 14562 mov     di, offset _chrin ;~ 01A2:6CA5
cs=0x1a2;eip=0x006ca8; 	T(TEST(byte_24682, 1));	// 14563 test    byte_24682, 1 ;~ 01A2:6CA8
cs=0x1a2;eip=0x006cad; 	J(JNZ(loc_16cb9));	// 14564 jnz     short loc_16CB9 ;~ 01A2:6CAD
cs=0x1a2;eip=0x006caf; 	X(OR(byte_24682, 1));	// 14565 or      byte_24682, 1 ;~ 01A2:6CAF
cs=0x1a2;eip=0x006cb4; 	J(CALL(sub_1609f,0));	// 14566 call    sub_1609F ;~ 01A2:6CB4
cs=0x1a2;eip=0x006cb7; 	J(JMP(loc_16cbc));	// 14567 jmp     short loc_16CBC ;~ 01A2:6CB7
loc_16cb9:
	// 5232 
cs=0x1a2;eip=0x006cb9; 	J(CALL(sub_15577,0));	// 14571 call    sub_15577 ;~ 01A2:6CB9
loc_16cbc:
	// 5233 
cs=0x1a2;eip=0x006cbc; 	X(POP(si));	// 14574 pop     si ;~ 01A2:6CBC
cs=0x1a2;eip=0x006cbd; 	X(POP(cx));	// 14575 pop     cx ;~ 01A2:6CBD
loc_16cbe:
	// 5234 
cs=0x1a2;eip=0x006cbe; 	T(ADD(si, 0x50));	// 14578 add     si, 50h ; 'P' ;~ 01A2:6CBE
cs=0x1a2;eip=0x006cc1; 	T(DEC(cx));	// 14579 dec     cx ;~ 01A2:6CC1
cs=0x1a2;eip=0x006cc2; 	J(JNZ(loc_16c9d));	// 14580 jnz     short loc_16C9D ;~ 01A2:6CC2
cs=0x1a2;eip=0x006cc4; 	T(MOV(di, word_24600));	// 14581 mov     di, word_24600 ;~ 01A2:6CC4
cs=0x1a2;eip=0x006cc8; 	T(MOV(cx, word_245e4));	// 14582 mov     cx, word_245E4 ;~ 01A2:6CC8
cs=0x1a2;eip=0x006ccc; 	T(MOV(si, offset(seg003,_chrin)+1));	// 14583 mov     si, (offset _chrin+1) ;~ 01A2:6CCC
cs=0x1a2;eip=0x006ccf; 	T(MOV(es, *(dw*)(((db*)&_audio_buf_pointer)+2)));	// 14584 mov     es, word ptr _audio_buf_pointer+2 ;~ 01A2:6CCF
cs=0x1a2;eip=0x006cd3; 	T(MOV(ax, 0x1000));	// 14586 mov     ax, 1000h ;~ 01A2:6CD3
cs=0x1a2;eip=0x006cd6; 	T(SUB(ax, di));	// 14587 sub     ax, di ;~ 01A2:6CD6
cs=0x1a2;eip=0x006cd8; 	T(CMP(ax, cx));	// 14588 cmp     ax, cx ;~ 01A2:6CD8
cs=0x1a2;eip=0x006cda; 	J(JA(loc_16ceb));	// 14589 ja      short loc_16CEB ;~ 01A2:6CDA
cs=0x1a2;eip=0x006cdc; 	T(MOV(bx, cx));	// 14590 mov     bx, cx ;~ 01A2:6CDC
cs=0x1a2;eip=0x006cde; 	T(SUB(bx, ax));	// 14591 sub     bx, ax ;~ 01A2:6CDE
cs=0x1a2;eip=0x006ce0; 	T(MOV(cx, ax));	// 14592 mov     cx, ax ;~ 01A2:6CE0
cs=0x1a2;eip=0x006ce2; 	X(PUSH(bx));	// 14593 push    bx ;~ 01A2:6CE2
cs=0x1a2;eip=0x006ce3; 	J(CALL(sub_16cf6,0));	// 14594 call    sub_16CF6 ;~ 01A2:6CE3
cs=0x1a2;eip=0x006ce6; 	X(POP(cx));	// 14595 pop     cx ;~ 01A2:6CE6
cs=0x1a2;eip=0x006ce7; 	T(XOR(di, di));	// 14596 xor     di, di ;~ 01A2:6CE7
cs=0x1a2;eip=0x006ce9; 	J(JCXZ(loc_16cee));	// 14597 jcxz    short loc_16CEE ;~ 01A2:6CE9
loc_16ceb:
	// 5235 
cs=0x1a2;eip=0x006ceb; 	J(CALL(sub_16cf6,0));	// 14600 call    sub_16CF6 ;~ 01A2:6CEB
loc_16cee:
	// 5236 
cs=0x1a2;eip=0x006cee; 	X(MOV(word_24600, di));	// 14603 mov     word_24600, di ;~ 01A2:6CEE
cs=0x1a2;eip=0x006cf2; 	J(CALL(_ems_restore_mapctx,0));	// 14604 call    _ems_restore_mapctx ;~ 01A2:6CF2
cs=0x1a2;eip=0x006cf5; 	J(RETN(0));	// 14605 retn ;~ 01A2:6CF5
sub_16cf6:
	// 14612 
cs=0x1a2;eip=0x006cf6; 	T(CMP(byte_24625, 1));	// 14614 cmp     byte_24625, 1 ;~ 01A2:6CF6
cs=0x1a2;eip=0x006cfb; 	J(JZ(loc_16e24));	// 14615 jz      loc_16E24 ;~ 01A2:6CFB
cs=0x1a2;eip=0x006cff; 	T(MOV(bx, cx));	// 14616 mov     bx, cx ;~ 01A2:6CFF
cs=0x1a2;eip=0x006d01; 	T(AND(bx, 0x0F));	// 14617 and     bx, 0Fh ;~ 01A2:6D01
cs=0x1a2;eip=0x006d04; 	T(SHL(bx, 1));	// 14618 shl     bx, 1 ;~ 01A2:6D04
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x006d06; __disp=*(dw*)(((db*)&off_18ea0)+bx);
	J(return __dispatch_call(__disp, _state););	// 14619 jmp     cs:off_18EA0[bx] ;~ 01A2:6D06
loc_16d0b:
	// 5237 
cs=0x1a2;eip=0x006d0b; 	T(MOV(al, *(raddr(ds,si))));	// 14624 mov     al, [si] ;~ 01A2:6D0B
cs=0x1a2;eip=0x006d0d; 	T(XOR(al, 0x80));	// 14625 xor     al, 80h ;~ 01A2:6D0D
cs=0x1a2;eip=0x006d0f; 	X(MOV(*(raddr(es,di)), al));	// 14626 mov     es:[di], al ;~ 01A2:6D0F
cs=0x1a2;eip=0x006d12; 	T(ADD(si, 8));	// 14627 add     si, 8 ;~ 01A2:6D12
cs=0x1a2;eip=0x006d15; 	T(INC(di));	// 14628 inc     di ;~ 01A2:6D15
loc_16d16:
	// 5238 
cs=0x1a2;eip=0x006d16; 	T(MOV(al, *(raddr(ds,si))));	// 14632 mov     al, [si] ;~ 01A2:6D16
cs=0x1a2;eip=0x006d18; 	T(XOR(al, 0x80));	// 14633 xor     al, 80h ;~ 01A2:6D18
cs=0x1a2;eip=0x006d1a; 	X(MOV(*(raddr(es,di)), al));	// 14634 mov     es:[di], al ;~ 01A2:6D1A
cs=0x1a2;eip=0x006d1d; 	T(ADD(si, 8));	// 14635 add     si, 8 ;~ 01A2:6D1D
cs=0x1a2;eip=0x006d20; 	T(INC(di));	// 14636 inc     di ;~ 01A2:6D20
loc_16d21:
	// 5239 
cs=0x1a2;eip=0x006d21; 	T(MOV(al, *(raddr(ds,si))));	// 14640 mov     al, [si] ;~ 01A2:6D21
cs=0x1a2;eip=0x006d23; 	T(XOR(al, 0x80));	// 14641 xor     al, 80h ;~ 01A2:6D23
cs=0x1a2;eip=0x006d25; 	X(MOV(*(raddr(es,di)), al));	// 14642 mov     es:[di], al ;~ 01A2:6D25
cs=0x1a2;eip=0x006d28; 	T(ADD(si, 8));	// 14643 add     si, 8 ;~ 01A2:6D28
cs=0x1a2;eip=0x006d2b; 	T(INC(di));	// 14644 inc     di ;~ 01A2:6D2B
loc_16d2c:
	// 5240 
cs=0x1a2;eip=0x006d2c; 	T(MOV(al, *(raddr(ds,si))));	// 14648 mov     al, [si] ;~ 01A2:6D2C
cs=0x1a2;eip=0x006d2e; 	T(XOR(al, 0x80));	// 14649 xor     al, 80h ;~ 01A2:6D2E
cs=0x1a2;eip=0x006d30; 	X(MOV(*(raddr(es,di)), al));	// 14650 mov     es:[di], al ;~ 01A2:6D30
cs=0x1a2;eip=0x006d33; 	T(ADD(si, 8));	// 14651 add     si, 8 ;~ 01A2:6D33
cs=0x1a2;eip=0x006d36; 	T(INC(di));	// 14652 inc     di ;~ 01A2:6D36
loc_16d37:
	// 5241 
cs=0x1a2;eip=0x006d37; 	T(MOV(al, *(raddr(ds,si))));	// 14656 mov     al, [si] ;~ 01A2:6D37
cs=0x1a2;eip=0x006d39; 	T(XOR(al, 0x80));	// 14657 xor     al, 80h ;~ 01A2:6D39
cs=0x1a2;eip=0x006d3b; 	X(MOV(*(raddr(es,di)), al));	// 14658 mov     es:[di], al ;~ 01A2:6D3B
cs=0x1a2;eip=0x006d3e; 	T(ADD(si, 8));	// 14659 add     si, 8 ;~ 01A2:6D3E
cs=0x1a2;eip=0x006d41; 	T(INC(di));	// 14660 inc     di ;~ 01A2:6D41
loc_16d42:
	// 5242 
cs=0x1a2;eip=0x006d42; 	T(MOV(al, *(raddr(ds,si))));	// 14664 mov     al, [si] ;~ 01A2:6D42
cs=0x1a2;eip=0x006d44; 	T(XOR(al, 0x80));	// 14665 xor     al, 80h ;~ 01A2:6D44
cs=0x1a2;eip=0x006d46; 	X(MOV(*(raddr(es,di)), al));	// 14666 mov     es:[di], al ;~ 01A2:6D46
cs=0x1a2;eip=0x006d49; 	T(ADD(si, 8));	// 14667 add     si, 8 ;~ 01A2:6D49
cs=0x1a2;eip=0x006d4c; 	T(INC(di));	// 14668 inc     di ;~ 01A2:6D4C
loc_16d4d:
	// 5243 
cs=0x1a2;eip=0x006d4d; 	T(MOV(al, *(raddr(ds,si))));	// 14672 mov     al, [si] ;~ 01A2:6D4D
cs=0x1a2;eip=0x006d4f; 	T(XOR(al, 0x80));	// 14673 xor     al, 80h ;~ 01A2:6D4F
cs=0x1a2;eip=0x006d51; 	X(MOV(*(raddr(es,di)), al));	// 14674 mov     es:[di], al ;~ 01A2:6D51
cs=0x1a2;eip=0x006d54; 	T(ADD(si, 8));	// 14675 add     si, 8 ;~ 01A2:6D54
cs=0x1a2;eip=0x006d57; 	T(INC(di));	// 14676 inc     di ;~ 01A2:6D57
loc_16d58:
	// 5244 
cs=0x1a2;eip=0x006d58; 	T(MOV(al, *(raddr(ds,si))));	// 14680 mov     al, [si] ;~ 01A2:6D58
cs=0x1a2;eip=0x006d5a; 	T(XOR(al, 0x80));	// 14681 xor     al, 80h ;~ 01A2:6D5A
cs=0x1a2;eip=0x006d5c; 	X(MOV(*(raddr(es,di)), al));	// 14682 mov     es:[di], al ;~ 01A2:6D5C
cs=0x1a2;eip=0x006d5f; 	T(ADD(si, 8));	// 14683 add     si, 8 ;~ 01A2:6D5F
cs=0x1a2;eip=0x006d62; 	T(INC(di));	// 14684 inc     di ;~ 01A2:6D62
loc_16d63:
	// 5245 
cs=0x1a2;eip=0x006d63; 	T(MOV(al, *(raddr(ds,si))));	// 14688 mov     al, [si] ;~ 01A2:6D63
cs=0x1a2;eip=0x006d65; 	T(XOR(al, 0x80));	// 14689 xor     al, 80h ;~ 01A2:6D65
cs=0x1a2;eip=0x006d67; 	X(MOV(*(raddr(es,di)), al));	// 14690 mov     es:[di], al ;~ 01A2:6D67
cs=0x1a2;eip=0x006d6a; 	T(ADD(si, 8));	// 14691 add     si, 8 ;~ 01A2:6D6A
cs=0x1a2;eip=0x006d6d; 	T(INC(di));	// 14692 inc     di ;~ 01A2:6D6D
loc_16d6e:
	// 5246 
cs=0x1a2;eip=0x006d6e; 	T(MOV(al, *(raddr(ds,si))));	// 14696 mov     al, [si] ;~ 01A2:6D6E
cs=0x1a2;eip=0x006d70; 	T(XOR(al, 0x80));	// 14697 xor     al, 80h ;~ 01A2:6D70
cs=0x1a2;eip=0x006d72; 	X(MOV(*(raddr(es,di)), al));	// 14698 mov     es:[di], al ;~ 01A2:6D72
cs=0x1a2;eip=0x006d75; 	T(ADD(si, 8));	// 14699 add     si, 8 ;~ 01A2:6D75
cs=0x1a2;eip=0x006d78; 	T(INC(di));	// 14700 inc     di ;~ 01A2:6D78
loc_16d79:
	// 5247 
cs=0x1a2;eip=0x006d79; 	T(MOV(al, *(raddr(ds,si))));	// 14704 mov     al, [si] ;~ 01A2:6D79
cs=0x1a2;eip=0x006d7b; 	T(XOR(al, 0x80));	// 14705 xor     al, 80h ;~ 01A2:6D7B
cs=0x1a2;eip=0x006d7d; 	X(MOV(*(raddr(es,di)), al));	// 14706 mov     es:[di], al ;~ 01A2:6D7D
cs=0x1a2;eip=0x006d80; 	T(ADD(si, 8));	// 14707 add     si, 8 ;~ 01A2:6D80
cs=0x1a2;eip=0x006d83; 	T(INC(di));	// 14708 inc     di ;~ 01A2:6D83
loc_16d84:
	// 5248 
cs=0x1a2;eip=0x006d84; 	T(MOV(al, *(raddr(ds,si))));	// 14712 mov     al, [si] ;~ 01A2:6D84
cs=0x1a2;eip=0x006d86; 	T(XOR(al, 0x80));	// 14713 xor     al, 80h ;~ 01A2:6D86
cs=0x1a2;eip=0x006d88; 	X(MOV(*(raddr(es,di)), al));	// 14714 mov     es:[di], al ;~ 01A2:6D88
cs=0x1a2;eip=0x006d8b; 	T(ADD(si, 8));	// 14715 add     si, 8 ;~ 01A2:6D8B
cs=0x1a2;eip=0x006d8e; 	T(INC(di));	// 14716 inc     di ;~ 01A2:6D8E
loc_16d8f:
	// 5249 
cs=0x1a2;eip=0x006d8f; 	T(MOV(al, *(raddr(ds,si))));	// 14720 mov     al, [si] ;~ 01A2:6D8F
cs=0x1a2;eip=0x006d91; 	T(XOR(al, 0x80));	// 14721 xor     al, 80h ;~ 01A2:6D91
cs=0x1a2;eip=0x006d93; 	X(MOV(*(raddr(es,di)), al));	// 14722 mov     es:[di], al ;~ 01A2:6D93
cs=0x1a2;eip=0x006d96; 	T(ADD(si, 8));	// 14723 add     si, 8 ;~ 01A2:6D96
cs=0x1a2;eip=0x006d99; 	T(INC(di));	// 14724 inc     di ;~ 01A2:6D99
loc_16d9a:
	// 5250 
cs=0x1a2;eip=0x006d9a; 	T(MOV(al, *(raddr(ds,si))));	// 14728 mov     al, [si] ;~ 01A2:6D9A
cs=0x1a2;eip=0x006d9c; 	T(XOR(al, 0x80));	// 14729 xor     al, 80h ;~ 01A2:6D9C
cs=0x1a2;eip=0x006d9e; 	X(MOV(*(raddr(es,di)), al));	// 14730 mov     es:[di], al ;~ 01A2:6D9E
cs=0x1a2;eip=0x006da1; 	T(ADD(si, 8));	// 14731 add     si, 8 ;~ 01A2:6DA1
cs=0x1a2;eip=0x006da4; 	T(INC(di));	// 14732 inc     di ;~ 01A2:6DA4
loc_16da5:
	// 5251 
cs=0x1a2;eip=0x006da5; 	T(MOV(al, *(raddr(ds,si))));	// 14736 mov     al, [si] ;~ 01A2:6DA5
cs=0x1a2;eip=0x006da7; 	T(XOR(al, 0x80));	// 14737 xor     al, 80h ;~ 01A2:6DA7
cs=0x1a2;eip=0x006da9; 	X(MOV(*(raddr(es,di)), al));	// 14738 mov     es:[di], al ;~ 01A2:6DA9
cs=0x1a2;eip=0x006dac; 	T(ADD(si, 8));	// 14739 add     si, 8 ;~ 01A2:6DAC
cs=0x1a2;eip=0x006daf; 	T(INC(di));	// 14740 inc     di ;~ 01A2:6DAF
loc_16db0:
	// 5252 
cs=0x1a2;eip=0x006db0; 	T(SHR(cx, 4));	// 14744 shr     cx, 4 ;~ 01A2:6DB0
cs=0x1a2;eip=0x006db3; 	J(JZ(locret_16e23));	// 14745 jz      short locret_16E23 ;~ 01A2:6DB3
cs=0x1a2;eip=0x006db5; 	T(MOV(edx, 0x80808080));	// 14746 mov     edx, 80808080h ;~ 01A2:6DB5
loc_16dbb:
	// 5253 
cs=0x1a2;eip=0x006dbb; 	T(MOV(al, *(raddr(ds,si+0x10))));	// 14749 mov     al, [si+10h] ;~ 01A2:6DBB
cs=0x1a2;eip=0x006dbe; 	T(MOV(ah, *(raddr(ds,si+0x18))));	// 14750 mov     ah, [si+18h] ;~ 01A2:6DBE
cs=0x1a2;eip=0x006dc1; 	T(SHL(eax, 0x10));	// 14751 shl     eax, 10h ;~ 01A2:6DC1
cs=0x1a2;eip=0x006dc5; 	T(MOV(al, *(raddr(ds,si))));	// 14752 mov     al, [si] ;~ 01A2:6DC5
cs=0x1a2;eip=0x006dc7; 	T(MOV(ah, *(raddr(ds,si+8))));	// 14753 mov     ah, [si+8] ;~ 01A2:6DC7
cs=0x1a2;eip=0x006dca; 	T(XOR(eax, edx));	// 14754 xor     eax, edx ;~ 01A2:6DCA
cs=0x1a2;eip=0x006dcd; 	X(MOV(*(dd*)(raddr(es,di)), eax));	// 14755 mov     es:[di], eax ;~ 01A2:6DCD
cs=0x1a2;eip=0x006dd1; 	T(MOV(al, *(raddr(ds,si+0x30))));	// 14756 mov     al, [si+30h] ;~ 01A2:6DD1
cs=0x1a2;eip=0x006dd4; 	T(MOV(ah, *(raddr(ds,si+0x38))));	// 14757 mov     ah, [si+38h] ;~ 01A2:6DD4
cs=0x1a2;eip=0x006dd7; 	T(SHL(eax, 0x10));	// 14758 shl     eax, 10h ;~ 01A2:6DD7
cs=0x1a2;eip=0x006ddb; 	T(MOV(al, *(raddr(ds,si+0x20))));	// 14759 mov     al, [si+20h] ;~ 01A2:6DDB
cs=0x1a2;eip=0x006dde; 	T(MOV(ah, *(raddr(ds,si+0x28))));	// 14760 mov     ah, [si+28h] ;~ 01A2:6DDE
cs=0x1a2;eip=0x006de1; 	T(XOR(eax, edx));	// 14761 xor     eax, edx ;~ 01A2:6DE1
cs=0x1a2;eip=0x006de4; 	X(MOV(*(dd*)(raddr(es,di+4)), eax));	// 14762 mov     es:[di+4], eax ;~ 01A2:6DE4
cs=0x1a2;eip=0x006de9; 	T(MOV(al, *(raddr(ds,si+0x50))));	// 14763 mov     al, [si+50h] ;~ 01A2:6DE9
cs=0x1a2;eip=0x006dec; 	T(MOV(ah, *(raddr(ds,si+0x58))));	// 14764 mov     ah, [si+58h] ;~ 01A2:6DEC
cs=0x1a2;eip=0x006def; 	T(SHL(eax, 0x10));	// 14765 shl     eax, 10h ;~ 01A2:6DEF
cs=0x1a2;eip=0x006df3; 	T(MOV(al, *(raddr(ds,si+0x40))));	// 14766 mov     al, [si+40h] ;~ 01A2:6DF3
cs=0x1a2;eip=0x006df6; 	T(MOV(ah, *(raddr(ds,si+0x48))));	// 14767 mov     ah, [si+48h] ;~ 01A2:6DF6
cs=0x1a2;eip=0x006df9; 	T(XOR(eax, edx));	// 14768 xor     eax, edx ;~ 01A2:6DF9
cs=0x1a2;eip=0x006dfc; 	X(MOV(*(dd*)(raddr(es,di+8)), eax));	// 14769 mov     es:[di+8], eax ;~ 01A2:6DFC
cs=0x1a2;eip=0x006e01; 	T(MOV(al, *(raddr(ds,si+0x70))));	// 14770 mov     al, [si+70h] ;~ 01A2:6E01
cs=0x1a2;eip=0x006e04; 	T(MOV(ah, *(raddr(ds,si+0x78))));	// 14771 mov     ah, [si+78h] ;~ 01A2:6E04
cs=0x1a2;eip=0x006e07; 	T(SHL(eax, 0x10));	// 14772 shl     eax, 10h ;~ 01A2:6E07
cs=0x1a2;eip=0x006e0b; 	T(MOV(al, *(raddr(ds,si+0x60))));	// 14773 mov     al, [si+60h] ;~ 01A2:6E0B
cs=0x1a2;eip=0x006e0e; 	T(MOV(ah, *(raddr(ds,si+0x68))));	// 14774 mov     ah, [si+68h] ;~ 01A2:6E0E
cs=0x1a2;eip=0x006e11; 	T(XOR(eax, edx));	// 14775 xor     eax, edx ;~ 01A2:6E11
cs=0x1a2;eip=0x006e14; 	X(MOV(*(dd*)(raddr(es,di+0x0C)), eax));	// 14776 mov     es:[di+0Ch], eax ;~ 01A2:6E14
cs=0x1a2;eip=0x006e19; 	T(ADD(si, 0x80));	// 14777 add     si, 80h ; '€' ;~ 01A2:6E19
cs=0x1a2;eip=0x006e1d; 	T(ADD(di, 0x10));	// 14778 add     di, 10h ;~ 01A2:6E1D
cs=0x1a2;eip=0x006e20; 	T(DEC(cx));	// 14779 dec     cx ;~ 01A2:6E20
cs=0x1a2;eip=0x006e21; 	J(JNZ(loc_16dbb));	// 14780 jnz     short loc_16DBB ;~ 01A2:6E21
locret_16e23:
	// 5254 
cs=0x1a2;eip=0x006e23; 	J(RETN(0));	// 14783 retn ;~ 01A2:6E23
loc_16e24:
	// 5255 
cs=0x1a2;eip=0x006e24; 	T(AND(si, 0x0FFFC));	// 14787 and     si, 0FFFCh ;~ 01A2:6E24
cs=0x1a2;eip=0x006e27; 	T(MOV(edx, 0x7FFF));	// 14788 mov     edx, 7FFFh ;~ 01A2:6E27
cs=0x1a2;eip=0x006e2d; 	T(MOV(ebp, 0x0FFFF8000));	// 14789 mov     ebp, 0FFFF8000h ;~ 01A2:6E2D
cs=0x1a2;eip=0x006e33; 	T(MOV(bx, cx));	// 14790 mov     bx, cx ;~ 01A2:6E33
cs=0x1a2;eip=0x006e35; 	T(AND(bx, 0x0F));	// 14791 and     bx, 0Fh ;~ 01A2:6E35
cs=0x1a2;eip=0x006e38; 	T(SHL(bx, 1));	// 14792 shl     bx, 1 ;~ 01A2:6E38
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x006e3a; __disp=*(dw*)(((db*)&off_18ec0)+bx);
	J(return __dispatch_call(__disp, _state););	// 14793 jmp     cs:off_18EC0[bx] ;~ 01A2:6E3A
loc_16e3f:
	// 5256 
cs=0x1a2;eip=0x006e3f; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 14798 mov     eax, [si] ;~ 01A2:6E3F
cs=0x1a2;eip=0x006e42; 	T(ADD(si, 8));	// 14799 add     si, 8 ;~ 01A2:6E42
cs=0x1a2;eip=0x006e45; 	T(MOV(bx, m2c::kloc_16e56));	// 14800 mov     bx, offset loc_16E56 ;~ 01A2:6E45
cs=0x1a2;eip=0x006e48; 	T(CMP(eax, ebp));	// 14801 cmp     eax, ebp ;~ 01A2:6E48
cs=0x1a2;eip=0x006e4b; 	J(JL(loc_18db0));	// 14802 jl      loc_18DB0 ;~ 01A2:6E4B
cs=0x1a2;eip=0x006e4f; 	T(CMP(eax, edx));	// 14803 cmp     eax, edx ;~ 01A2:6E4F
cs=0x1a2;eip=0x006e52; 	J(JG(loc_18db8));	// 14804 jg      loc_18DB8 ;~ 01A2:6E52
loc_16e56:
	// 5257 
cs=0x1a2;eip=0x006e56; 	T(XOR(ah, 0x80));	// 14807 xor     ah, 80h ;~ 01A2:6E56
cs=0x1a2;eip=0x006e59; 	X(MOV(*(raddr(es,di)), ah));	// 14808 mov     es:[di], ah ;~ 01A2:6E59
cs=0x1a2;eip=0x006e5c; 	T(INC(di));	// 14809 inc     di ;~ 01A2:6E5C
loc_16e5d:
	// 5258 
cs=0x1a2;eip=0x006e5d; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 14813 mov     eax, [si] ;~ 01A2:6E5D
cs=0x1a2;eip=0x006e60; 	T(ADD(si, 8));	// 14814 add     si, 8 ;~ 01A2:6E60
cs=0x1a2;eip=0x006e63; 	T(MOV(bx, m2c::kloc_16e74));	// 14815 mov     bx, offset loc_16E74 ;~ 01A2:6E63
cs=0x1a2;eip=0x006e66; 	T(CMP(eax, ebp));	// 14816 cmp     eax, ebp ;~ 01A2:6E66
cs=0x1a2;eip=0x006e69; 	J(JL(loc_18db0));	// 14817 jl      loc_18DB0 ;~ 01A2:6E69
cs=0x1a2;eip=0x006e6d; 	T(CMP(eax, edx));	// 14818 cmp     eax, edx ;~ 01A2:6E6D
cs=0x1a2;eip=0x006e70; 	J(JG(loc_18db8));	// 14819 jg      loc_18DB8 ;~ 01A2:6E70
loc_16e74:
	// 5259 
cs=0x1a2;eip=0x006e74; 	T(XOR(ah, 0x80));	// 14822 xor     ah, 80h ;~ 01A2:6E74
cs=0x1a2;eip=0x006e77; 	X(MOV(*(raddr(es,di)), ah));	// 14823 mov     es:[di], ah ;~ 01A2:6E77
cs=0x1a2;eip=0x006e7a; 	T(INC(di));	// 14824 inc     di ;~ 01A2:6E7A
loc_16e7b:
	// 5260 
cs=0x1a2;eip=0x006e7b; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 14828 mov     eax, [si] ;~ 01A2:6E7B
cs=0x1a2;eip=0x006e7e; 	T(ADD(si, 8));	// 14829 add     si, 8 ;~ 01A2:6E7E
cs=0x1a2;eip=0x006e81; 	T(MOV(bx, m2c::kloc_16e92));	// 14830 mov     bx, offset loc_16E92 ;~ 01A2:6E81
cs=0x1a2;eip=0x006e84; 	T(CMP(eax, ebp));	// 14831 cmp     eax, ebp ;~ 01A2:6E84
cs=0x1a2;eip=0x006e87; 	J(JL(loc_18db0));	// 14832 jl      loc_18DB0 ;~ 01A2:6E87
cs=0x1a2;eip=0x006e8b; 	T(CMP(eax, edx));	// 14833 cmp     eax, edx ;~ 01A2:6E8B
cs=0x1a2;eip=0x006e8e; 	J(JG(loc_18db8));	// 14834 jg      loc_18DB8 ;~ 01A2:6E8E
loc_16e92:
	// 5261 
cs=0x1a2;eip=0x006e92; 	T(XOR(ah, 0x80));	// 14837 xor     ah, 80h ;~ 01A2:6E92
cs=0x1a2;eip=0x006e95; 	X(MOV(*(raddr(es,di)), ah));	// 14838 mov     es:[di], ah ;~ 01A2:6E95
cs=0x1a2;eip=0x006e98; 	T(INC(di));	// 14839 inc     di ;~ 01A2:6E98
loc_16e99:
	// 5262 
cs=0x1a2;eip=0x006e99; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 14843 mov     eax, [si] ;~ 01A2:6E99
cs=0x1a2;eip=0x006e9c; 	T(ADD(si, 8));	// 14844 add     si, 8 ;~ 01A2:6E9C
cs=0x1a2;eip=0x006e9f; 	T(MOV(bx, m2c::kloc_16eb0));	// 14845 mov     bx, offset loc_16EB0 ;~ 01A2:6E9F
cs=0x1a2;eip=0x006ea2; 	T(CMP(eax, ebp));	// 14846 cmp     eax, ebp ;~ 01A2:6EA2
cs=0x1a2;eip=0x006ea5; 	J(JL(loc_18db0));	// 14847 jl      loc_18DB0 ;~ 01A2:6EA5
cs=0x1a2;eip=0x006ea9; 	T(CMP(eax, edx));	// 14848 cmp     eax, edx ;~ 01A2:6EA9
cs=0x1a2;eip=0x006eac; 	J(JG(loc_18db8));	// 14849 jg      loc_18DB8 ;~ 01A2:6EAC
loc_16eb0:
	// 5263 
cs=0x1a2;eip=0x006eb0; 	T(XOR(ah, 0x80));	// 14852 xor     ah, 80h ;~ 01A2:6EB0
cs=0x1a2;eip=0x006eb3; 	X(MOV(*(raddr(es,di)), ah));	// 14853 mov     es:[di], ah ;~ 01A2:6EB3
cs=0x1a2;eip=0x006eb6; 	T(INC(di));	// 14854 inc     di ;~ 01A2:6EB6
loc_16eb7:
	// 5264 
cs=0x1a2;eip=0x006eb7; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 14858 mov     eax, [si] ;~ 01A2:6EB7
cs=0x1a2;eip=0x006eba; 	T(ADD(si, 8));	// 14859 add     si, 8 ;~ 01A2:6EBA
cs=0x1a2;eip=0x006ebd; 	T(MOV(bx, m2c::kloc_16ece));	// 14860 mov     bx, offset loc_16ECE ;~ 01A2:6EBD
cs=0x1a2;eip=0x006ec0; 	T(CMP(eax, ebp));	// 14861 cmp     eax, ebp ;~ 01A2:6EC0
cs=0x1a2;eip=0x006ec3; 	J(JL(loc_18db0));	// 14862 jl      loc_18DB0 ;~ 01A2:6EC3
cs=0x1a2;eip=0x006ec7; 	T(CMP(eax, edx));	// 14863 cmp     eax, edx ;~ 01A2:6EC7
cs=0x1a2;eip=0x006eca; 	J(JG(loc_18db8));	// 14864 jg      loc_18DB8 ;~ 01A2:6ECA
loc_16ece:
	// 5265 
cs=0x1a2;eip=0x006ece; 	T(XOR(ah, 0x80));	// 14867 xor     ah, 80h ;~ 01A2:6ECE
cs=0x1a2;eip=0x006ed1; 	X(MOV(*(raddr(es,di)), ah));	// 14868 mov     es:[di], ah ;~ 01A2:6ED1
cs=0x1a2;eip=0x006ed4; 	T(INC(di));	// 14869 inc     di ;~ 01A2:6ED4
loc_16ed5:
	// 5266 
cs=0x1a2;eip=0x006ed5; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 14873 mov     eax, [si] ;~ 01A2:6ED5
cs=0x1a2;eip=0x006ed8; 	T(ADD(si, 8));	// 14874 add     si, 8 ;~ 01A2:6ED8
cs=0x1a2;eip=0x006edb; 	T(MOV(bx, m2c::kloc_16eec));	// 14875 mov     bx, offset loc_16EEC ;~ 01A2:6EDB
cs=0x1a2;eip=0x006ede; 	T(CMP(eax, ebp));	// 14876 cmp     eax, ebp ;~ 01A2:6EDE
cs=0x1a2;eip=0x006ee1; 	J(JL(loc_18db0));	// 14877 jl      loc_18DB0 ;~ 01A2:6EE1
cs=0x1a2;eip=0x006ee5; 	T(CMP(eax, edx));	// 14878 cmp     eax, edx ;~ 01A2:6EE5
cs=0x1a2;eip=0x006ee8; 	J(JG(loc_18db8));	// 14879 jg      loc_18DB8 ;~ 01A2:6EE8
loc_16eec:
	// 5267 
cs=0x1a2;eip=0x006eec; 	T(XOR(ah, 0x80));	// 14882 xor     ah, 80h ;~ 01A2:6EEC
cs=0x1a2;eip=0x006eef; 	X(MOV(*(raddr(es,di)), ah));	// 14883 mov     es:[di], ah ;~ 01A2:6EEF
cs=0x1a2;eip=0x006ef2; 	T(INC(di));	// 14884 inc     di ;~ 01A2:6EF2
loc_16ef3:
	// 5268 
cs=0x1a2;eip=0x006ef3; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 14888 mov     eax, [si] ;~ 01A2:6EF3
cs=0x1a2;eip=0x006ef6; 	T(ADD(si, 8));	// 14889 add     si, 8 ;~ 01A2:6EF6
cs=0x1a2;eip=0x006ef9; 	T(MOV(bx, m2c::kloc_16f0a));	// 14890 mov     bx, offset loc_16F0A ;~ 01A2:6EF9
cs=0x1a2;eip=0x006efc; 	T(CMP(eax, ebp));	// 14891 cmp     eax, ebp ;~ 01A2:6EFC
cs=0x1a2;eip=0x006eff; 	J(JL(loc_18db0));	// 14892 jl      loc_18DB0 ;~ 01A2:6EFF
cs=0x1a2;eip=0x006f03; 	T(CMP(eax, edx));	// 14893 cmp     eax, edx ;~ 01A2:6F03
cs=0x1a2;eip=0x006f06; 	J(JG(loc_18db8));	// 14894 jg      loc_18DB8 ;~ 01A2:6F06
loc_16f0a:
	// 5269 
cs=0x1a2;eip=0x006f0a; 	T(XOR(ah, 0x80));	// 14897 xor     ah, 80h ;~ 01A2:6F0A
cs=0x1a2;eip=0x006f0d; 	X(MOV(*(raddr(es,di)), ah));	// 14898 mov     es:[di], ah ;~ 01A2:6F0D
cs=0x1a2;eip=0x006f10; 	T(INC(di));	// 14899 inc     di ;~ 01A2:6F10
loc_16f11:
	// 5270 
cs=0x1a2;eip=0x006f11; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 14903 mov     eax, [si] ;~ 01A2:6F11
cs=0x1a2;eip=0x006f14; 	T(ADD(si, 8));	// 14904 add     si, 8 ;~ 01A2:6F14
cs=0x1a2;eip=0x006f17; 	T(MOV(bx, m2c::kloc_16f28));	// 14905 mov     bx, offset loc_16F28 ;~ 01A2:6F17
cs=0x1a2;eip=0x006f1a; 	T(CMP(eax, ebp));	// 14906 cmp     eax, ebp ;~ 01A2:6F1A
cs=0x1a2;eip=0x006f1d; 	J(JL(loc_18db0));	// 14907 jl      loc_18DB0 ;~ 01A2:6F1D
cs=0x1a2;eip=0x006f21; 	T(CMP(eax, edx));	// 14908 cmp     eax, edx ;~ 01A2:6F21
cs=0x1a2;eip=0x006f24; 	J(JG(loc_18db8));	// 14909 jg      loc_18DB8 ;~ 01A2:6F24
loc_16f28:
	// 5271 
cs=0x1a2;eip=0x006f28; 	T(XOR(ah, 0x80));	// 14912 xor     ah, 80h ;~ 01A2:6F28
cs=0x1a2;eip=0x006f2b; 	X(MOV(*(raddr(es,di)), ah));	// 14913 mov     es:[di], ah ;~ 01A2:6F2B
cs=0x1a2;eip=0x006f2e; 	T(INC(di));	// 14914 inc     di ;~ 01A2:6F2E
loc_16f2f:
	// 5272 
cs=0x1a2;eip=0x006f2f; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 14918 mov     eax, [si] ;~ 01A2:6F2F
cs=0x1a2;eip=0x006f32; 	T(ADD(si, 8));	// 14919 add     si, 8 ;~ 01A2:6F32
cs=0x1a2;eip=0x006f35; 	T(MOV(bx, m2c::kloc_16f46));	// 14920 mov     bx, offset loc_16F46 ;~ 01A2:6F35
cs=0x1a2;eip=0x006f38; 	T(CMP(eax, ebp));	// 14921 cmp     eax, ebp ;~ 01A2:6F38
cs=0x1a2;eip=0x006f3b; 	J(JL(loc_18db0));	// 14922 jl      loc_18DB0 ;~ 01A2:6F3B
cs=0x1a2;eip=0x006f3f; 	T(CMP(eax, edx));	// 14923 cmp     eax, edx ;~ 01A2:6F3F
cs=0x1a2;eip=0x006f42; 	J(JG(loc_18db8));	// 14924 jg      loc_18DB8 ;~ 01A2:6F42
loc_16f46:
	// 5273 
cs=0x1a2;eip=0x006f46; 	T(XOR(ah, 0x80));	// 14927 xor     ah, 80h ;~ 01A2:6F46
cs=0x1a2;eip=0x006f49; 	X(MOV(*(raddr(es,di)), ah));	// 14928 mov     es:[di], ah ;~ 01A2:6F49
cs=0x1a2;eip=0x006f4c; 	T(INC(di));	// 14929 inc     di ;~ 01A2:6F4C
loc_16f4d:
	// 5274 
cs=0x1a2;eip=0x006f4d; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 14933 mov     eax, [si] ;~ 01A2:6F4D
cs=0x1a2;eip=0x006f50; 	T(ADD(si, 8));	// 14934 add     si, 8 ;~ 01A2:6F50
cs=0x1a2;eip=0x006f53; 	T(MOV(bx, m2c::kloc_16f64));	// 14935 mov     bx, offset loc_16F64 ;~ 01A2:6F53
cs=0x1a2;eip=0x006f56; 	T(CMP(eax, ebp));	// 14936 cmp     eax, ebp ;~ 01A2:6F56
cs=0x1a2;eip=0x006f59; 	J(JL(loc_18db0));	// 14937 jl      loc_18DB0 ;~ 01A2:6F59
cs=0x1a2;eip=0x006f5d; 	T(CMP(eax, edx));	// 14938 cmp     eax, edx ;~ 01A2:6F5D
cs=0x1a2;eip=0x006f60; 	J(JG(loc_18db8));	// 14939 jg      loc_18DB8 ;~ 01A2:6F60
loc_16f64:
	// 5275 
cs=0x1a2;eip=0x006f64; 	T(XOR(ah, 0x80));	// 14942 xor     ah, 80h ;~ 01A2:6F64
cs=0x1a2;eip=0x006f67; 	X(MOV(*(raddr(es,di)), ah));	// 14943 mov     es:[di], ah ;~ 01A2:6F67
cs=0x1a2;eip=0x006f6a; 	T(INC(di));	// 14944 inc     di ;~ 01A2:6F6A
loc_16f6b:
	// 5276 
cs=0x1a2;eip=0x006f6b; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 14948 mov     eax, [si] ;~ 01A2:6F6B
cs=0x1a2;eip=0x006f6e; 	T(ADD(si, 8));	// 14949 add     si, 8 ;~ 01A2:6F6E
cs=0x1a2;eip=0x006f71; 	T(MOV(bx, m2c::kloc_16f82));	// 14950 mov     bx, offset loc_16F82 ;~ 01A2:6F71
cs=0x1a2;eip=0x006f74; 	T(CMP(eax, ebp));	// 14951 cmp     eax, ebp ;~ 01A2:6F74
cs=0x1a2;eip=0x006f77; 	J(JL(loc_18db0));	// 14952 jl      loc_18DB0 ;~ 01A2:6F77
cs=0x1a2;eip=0x006f7b; 	T(CMP(eax, edx));	// 14953 cmp     eax, edx ;~ 01A2:6F7B
cs=0x1a2;eip=0x006f7e; 	J(JG(loc_18db8));	// 14954 jg      loc_18DB8 ;~ 01A2:6F7E
loc_16f82:
	// 5277 
cs=0x1a2;eip=0x006f82; 	T(XOR(ah, 0x80));	// 14957 xor     ah, 80h ;~ 01A2:6F82
cs=0x1a2;eip=0x006f85; 	X(MOV(*(raddr(es,di)), ah));	// 14958 mov     es:[di], ah ;~ 01A2:6F85
cs=0x1a2;eip=0x006f88; 	T(INC(di));	// 14959 inc     di ;~ 01A2:6F88
loc_16f89:
	// 5278 
cs=0x1a2;eip=0x006f89; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 14963 mov     eax, [si] ;~ 01A2:6F89
cs=0x1a2;eip=0x006f8c; 	T(ADD(si, 8));	// 14964 add     si, 8 ;~ 01A2:6F8C
cs=0x1a2;eip=0x006f8f; 	T(MOV(bx, m2c::kloc_16fa0));	// 14965 mov     bx, offset loc_16FA0 ;~ 01A2:6F8F
cs=0x1a2;eip=0x006f92; 	T(CMP(eax, ebp));	// 14966 cmp     eax, ebp ;~ 01A2:6F92
cs=0x1a2;eip=0x006f95; 	J(JL(loc_18db0));	// 14967 jl      loc_18DB0 ;~ 01A2:6F95
cs=0x1a2;eip=0x006f99; 	T(CMP(eax, edx));	// 14968 cmp     eax, edx ;~ 01A2:6F99
cs=0x1a2;eip=0x006f9c; 	J(JG(loc_18db8));	// 14969 jg      loc_18DB8 ;~ 01A2:6F9C
loc_16fa0:
	// 5279 
cs=0x1a2;eip=0x006fa0; 	T(XOR(ah, 0x80));	// 14972 xor     ah, 80h ;~ 01A2:6FA0
cs=0x1a2;eip=0x006fa3; 	X(MOV(*(raddr(es,di)), ah));	// 14973 mov     es:[di], ah ;~ 01A2:6FA3
cs=0x1a2;eip=0x006fa6; 	T(INC(di));	// 14974 inc     di ;~ 01A2:6FA6
loc_16fa7:
	// 5280 
cs=0x1a2;eip=0x006fa7; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 14978 mov     eax, [si] ;~ 01A2:6FA7
cs=0x1a2;eip=0x006faa; 	T(ADD(si, 8));	// 14979 add     si, 8 ;~ 01A2:6FAA
cs=0x1a2;eip=0x006fad; 	T(MOV(bx, m2c::kloc_16fbe));	// 14980 mov     bx, offset loc_16FBE ;~ 01A2:6FAD
cs=0x1a2;eip=0x006fb0; 	T(CMP(eax, ebp));	// 14981 cmp     eax, ebp ;~ 01A2:6FB0
cs=0x1a2;eip=0x006fb3; 	J(JL(loc_18db0));	// 14982 jl      loc_18DB0 ;~ 01A2:6FB3
cs=0x1a2;eip=0x006fb7; 	T(CMP(eax, edx));	// 14983 cmp     eax, edx ;~ 01A2:6FB7
cs=0x1a2;eip=0x006fba; 	J(JG(loc_18db8));	// 14984 jg      loc_18DB8 ;~ 01A2:6FBA
loc_16fbe:
	// 5281 
cs=0x1a2;eip=0x006fbe; 	T(XOR(ah, 0x80));	// 14987 xor     ah, 80h ;~ 01A2:6FBE
cs=0x1a2;eip=0x006fc1; 	X(MOV(*(raddr(es,di)), ah));	// 14988 mov     es:[di], ah ;~ 01A2:6FC1
cs=0x1a2;eip=0x006fc4; 	T(INC(di));	// 14989 inc     di ;~ 01A2:6FC4
loc_16fc5:
	// 5282 
cs=0x1a2;eip=0x006fc5; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 14993 mov     eax, [si] ;~ 01A2:6FC5
cs=0x1a2;eip=0x006fc8; 	T(ADD(si, 8));	// 14994 add     si, 8 ;~ 01A2:6FC8
cs=0x1a2;eip=0x006fcb; 	T(MOV(bx, m2c::kloc_16fdc));	// 14995 mov     bx, offset loc_16FDC ;~ 01A2:6FCB
cs=0x1a2;eip=0x006fce; 	T(CMP(eax, ebp));	// 14996 cmp     eax, ebp ;~ 01A2:6FCE
cs=0x1a2;eip=0x006fd1; 	J(JL(loc_18db0));	// 14997 jl      loc_18DB0 ;~ 01A2:6FD1
cs=0x1a2;eip=0x006fd5; 	T(CMP(eax, edx));	// 14998 cmp     eax, edx ;~ 01A2:6FD5
cs=0x1a2;eip=0x006fd8; 	J(JG(loc_18db8));	// 14999 jg      loc_18DB8 ;~ 01A2:6FD8
loc_16fdc:
	// 5283 
cs=0x1a2;eip=0x006fdc; 	T(XOR(ah, 0x80));	// 15002 xor     ah, 80h ;~ 01A2:6FDC
cs=0x1a2;eip=0x006fdf; 	X(MOV(*(raddr(es,di)), ah));	// 15003 mov     es:[di], ah ;~ 01A2:6FDF
cs=0x1a2;eip=0x006fe2; 	T(INC(di));	// 15004 inc     di ;~ 01A2:6FE2
loc_16fe3:
	// 5284 
cs=0x1a2;eip=0x006fe3; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 15008 mov     eax, [si] ;~ 01A2:6FE3
cs=0x1a2;eip=0x006fe6; 	T(ADD(si, 8));	// 15009 add     si, 8 ;~ 01A2:6FE6
cs=0x1a2;eip=0x006fe9; 	T(MOV(bx, m2c::kloc_16ffa));	// 15010 mov     bx, offset loc_16FFA ;~ 01A2:6FE9
cs=0x1a2;eip=0x006fec; 	T(CMP(eax, ebp));	// 15011 cmp     eax, ebp ;~ 01A2:6FEC
cs=0x1a2;eip=0x006fef; 	J(JL(loc_18db0));	// 15012 jl      loc_18DB0 ;~ 01A2:6FEF
cs=0x1a2;eip=0x006ff3; 	T(CMP(eax, edx));	// 15013 cmp     eax, edx ;~ 01A2:6FF3
cs=0x1a2;eip=0x006ff6; 	J(JG(loc_18db8));	// 15014 jg      loc_18DB8 ;~ 01A2:6FF6
loc_16ffa:
	// 5285 
cs=0x1a2;eip=0x006ffa; 	T(XOR(ah, 0x80));	// 15017 xor     ah, 80h ;~ 01A2:6FFA
cs=0x1a2;eip=0x006ffd; 	X(MOV(*(raddr(es,di)), ah));	// 15018 mov     es:[di], ah ;~ 01A2:6FFD
cs=0x1a2;eip=0x007000; 	T(INC(di));	// 15019 inc     di ;~ 01A2:7000
loc_17001:
	// 5286 
cs=0x1a2;eip=0x007001; 	T(SHR(cx, 4));	// 15023 shr     cx, 4 ;~ 01A2:7001
cs=0x1a2;eip=0x007004; 	J(JZ(locret_171d2));	// 15024 jz      locret_171D2 ;~ 01A2:7004
loc_17008:
	// 5287 
cs=0x1a2;eip=0x007008; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 15027 mov     eax, [si] ;~ 01A2:7008
cs=0x1a2;eip=0x00700b; 	T(MOV(bx, m2c::kloc_1701c));	// 15028 mov     bx, offset loc_1701C ;~ 01A2:700B
cs=0x1a2;eip=0x00700e; 	T(CMP(eax, ebp));	// 15029 cmp     eax, ebp ;~ 01A2:700E
cs=0x1a2;eip=0x007011; 	J(JL(loc_18db0));	// 15030 jl      loc_18DB0 ;~ 01A2:7011
cs=0x1a2;eip=0x007015; 	T(CMP(eax, edx));	// 15031 cmp     eax, edx ;~ 01A2:7015
cs=0x1a2;eip=0x007018; 	J(JG(loc_18db8));	// 15032 jg      loc_18DB8 ;~ 01A2:7018
loc_1701c:
	// 5288 
cs=0x1a2;eip=0x00701c; 	T(XOR(ah, 0x80));	// 15035 xor     ah, 80h ;~ 01A2:701C
cs=0x1a2;eip=0x00701f; 	X(MOV(*(raddr(es,di)), ah));	// 15036 mov     es:[di], ah ;~ 01A2:701F
cs=0x1a2;eip=0x007022; 	T(MOV(eax, *(dd*)(raddr(ds,si+8))));	// 15037 mov     eax, [si+8] ;~ 01A2:7022
cs=0x1a2;eip=0x007026; 	T(MOV(bx, m2c::kloc_17037));	// 15038 mov     bx, offset loc_17037 ;~ 01A2:7026
cs=0x1a2;eip=0x007029; 	T(CMP(eax, ebp));	// 15039 cmp     eax, ebp ;~ 01A2:7029
cs=0x1a2;eip=0x00702c; 	J(JL(loc_18db0));	// 15040 jl      loc_18DB0 ;~ 01A2:702C
cs=0x1a2;eip=0x007030; 	T(CMP(eax, edx));	// 15041 cmp     eax, edx ;~ 01A2:7030
cs=0x1a2;eip=0x007033; 	J(JG(loc_18db8));	// 15042 jg      loc_18DB8 ;~ 01A2:7033
loc_17037:
	// 5289 
cs=0x1a2;eip=0x007037; 	T(XOR(ah, 0x80));	// 15045 xor     ah, 80h ;~ 01A2:7037
cs=0x1a2;eip=0x00703a; 	X(MOV(*(raddr(es,di+1)), ah));	// 15046 mov     es:[di+1], ah ;~ 01A2:703A
cs=0x1a2;eip=0x00703e; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x10))));	// 15047 mov     eax, [si+10h] ;~ 01A2:703E
cs=0x1a2;eip=0x007042; 	T(MOV(bx, m2c::kloc_17053));	// 15048 mov     bx, offset loc_17053 ;~ 01A2:7042
cs=0x1a2;eip=0x007045; 	T(CMP(eax, ebp));	// 15049 cmp     eax, ebp ;~ 01A2:7045
cs=0x1a2;eip=0x007048; 	J(JL(loc_18db0));	// 15050 jl      loc_18DB0 ;~ 01A2:7048
cs=0x1a2;eip=0x00704c; 	T(CMP(eax, edx));	// 15051 cmp     eax, edx ;~ 01A2:704C
cs=0x1a2;eip=0x00704f; 	J(JG(loc_18db8));	// 15052 jg      loc_18DB8 ;~ 01A2:704F
loc_17053:
	// 5290 
cs=0x1a2;eip=0x007053; 	T(XOR(ah, 0x80));	// 15055 xor     ah, 80h ;~ 01A2:7053
cs=0x1a2;eip=0x007056; 	X(MOV(*(raddr(es,di+2)), ah));	// 15056 mov     es:[di+2], ah ;~ 01A2:7056
cs=0x1a2;eip=0x00705a; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x18))));	// 15057 mov     eax, [si+18h] ;~ 01A2:705A
cs=0x1a2;eip=0x00705e; 	T(MOV(bx, m2c::kloc_1706f));	// 15058 mov     bx, offset loc_1706F ;~ 01A2:705E
cs=0x1a2;eip=0x007061; 	T(CMP(eax, ebp));	// 15059 cmp     eax, ebp ;~ 01A2:7061
cs=0x1a2;eip=0x007064; 	J(JL(loc_18db0));	// 15060 jl      loc_18DB0 ;~ 01A2:7064
cs=0x1a2;eip=0x007068; 	T(CMP(eax, edx));	// 15061 cmp     eax, edx ;~ 01A2:7068
cs=0x1a2;eip=0x00706b; 	J(JG(loc_18db8));	// 15062 jg      loc_18DB8 ;~ 01A2:706B
loc_1706f:
	// 5291 
cs=0x1a2;eip=0x00706f; 	T(XOR(ah, 0x80));	// 15065 xor     ah, 80h ;~ 01A2:706F
cs=0x1a2;eip=0x007072; 	X(MOV(*(raddr(es,di+3)), ah));	// 15066 mov     es:[di+3], ah ;~ 01A2:7072
cs=0x1a2;eip=0x007076; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x20))));	// 15067 mov     eax, [si+20h] ;~ 01A2:7076
cs=0x1a2;eip=0x00707a; 	T(MOV(bx, m2c::kloc_1708b));	// 15068 mov     bx, offset loc_1708B ;~ 01A2:707A
cs=0x1a2;eip=0x00707d; 	T(CMP(eax, ebp));	// 15069 cmp     eax, ebp ;~ 01A2:707D
cs=0x1a2;eip=0x007080; 	J(JL(loc_18db0));	// 15070 jl      loc_18DB0 ;~ 01A2:7080
cs=0x1a2;eip=0x007084; 	T(CMP(eax, edx));	// 15071 cmp     eax, edx ;~ 01A2:7084
cs=0x1a2;eip=0x007087; 	J(JG(loc_18db8));	// 15072 jg      loc_18DB8 ;~ 01A2:7087
loc_1708b:
	// 5292 
cs=0x1a2;eip=0x00708b; 	T(XOR(ah, 0x80));	// 15075 xor     ah, 80h ;~ 01A2:708B
cs=0x1a2;eip=0x00708e; 	X(MOV(*(raddr(es,di+4)), ah));	// 15076 mov     es:[di+4], ah ;~ 01A2:708E
cs=0x1a2;eip=0x007092; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x28))));	// 15077 mov     eax, [si+28h] ;~ 01A2:7092
cs=0x1a2;eip=0x007096; 	T(MOV(bx, m2c::kloc_170a7));	// 15078 mov     bx, offset loc_170A7 ;~ 01A2:7096
cs=0x1a2;eip=0x007099; 	T(CMP(eax, ebp));	// 15079 cmp     eax, ebp ;~ 01A2:7099
cs=0x1a2;eip=0x00709c; 	J(JL(loc_18db0));	// 15080 jl      loc_18DB0 ;~ 01A2:709C
cs=0x1a2;eip=0x0070a0; 	T(CMP(eax, edx));	// 15081 cmp     eax, edx ;~ 01A2:70A0
cs=0x1a2;eip=0x0070a3; 	J(JG(loc_18db8));	// 15082 jg      loc_18DB8 ;~ 01A2:70A3
loc_170a7:
	// 5293 
cs=0x1a2;eip=0x0070a7; 	T(XOR(ah, 0x80));	// 15085 xor     ah, 80h ;~ 01A2:70A7
cs=0x1a2;eip=0x0070aa; 	X(MOV(*(raddr(es,di+5)), ah));	// 15086 mov     es:[di+5], ah ;~ 01A2:70AA
cs=0x1a2;eip=0x0070ae; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x30))));	// 15087 mov     eax, [si+30h] ;~ 01A2:70AE
cs=0x1a2;eip=0x0070b2; 	T(MOV(bx, m2c::kloc_170c3));	// 15088 mov     bx, offset loc_170C3 ;~ 01A2:70B2
cs=0x1a2;eip=0x0070b5; 	T(CMP(eax, ebp));	// 15089 cmp     eax, ebp ;~ 01A2:70B5
cs=0x1a2;eip=0x0070b8; 	J(JL(loc_18db0));	// 15090 jl      loc_18DB0 ;~ 01A2:70B8
cs=0x1a2;eip=0x0070bc; 	T(CMP(eax, edx));	// 15091 cmp     eax, edx ;~ 01A2:70BC
cs=0x1a2;eip=0x0070bf; 	J(JG(loc_18db8));	// 15092 jg      loc_18DB8 ;~ 01A2:70BF
loc_170c3:
	// 5294 
cs=0x1a2;eip=0x0070c3; 	T(XOR(ah, 0x80));	// 15095 xor     ah, 80h ;~ 01A2:70C3
cs=0x1a2;eip=0x0070c6; 	X(MOV(*(raddr(es,di+6)), ah));	// 15096 mov     es:[di+6], ah ;~ 01A2:70C6
cs=0x1a2;eip=0x0070ca; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x38))));	// 15097 mov     eax, [si+38h] ;~ 01A2:70CA
cs=0x1a2;eip=0x0070ce; 	T(MOV(bx, m2c::kloc_170df));	// 15098 mov     bx, offset loc_170DF ;~ 01A2:70CE
cs=0x1a2;eip=0x0070d1; 	T(CMP(eax, ebp));	// 15099 cmp     eax, ebp ;~ 01A2:70D1
cs=0x1a2;eip=0x0070d4; 	J(JL(loc_18db0));	// 15100 jl      loc_18DB0 ;~ 01A2:70D4
cs=0x1a2;eip=0x0070d8; 	T(CMP(eax, edx));	// 15101 cmp     eax, edx ;~ 01A2:70D8
cs=0x1a2;eip=0x0070db; 	J(JG(loc_18db8));	// 15102 jg      loc_18DB8 ;~ 01A2:70DB
loc_170df:
	// 5295 
cs=0x1a2;eip=0x0070df; 	T(XOR(ah, 0x80));	// 15105 xor     ah, 80h ;~ 01A2:70DF
cs=0x1a2;eip=0x0070e2; 	X(MOV(*(raddr(es,di+7)), ah));	// 15106 mov     es:[di+7], ah ;~ 01A2:70E2
cs=0x1a2;eip=0x0070e6; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x40))));	// 15107 mov     eax, [si+40h] ;~ 01A2:70E6
cs=0x1a2;eip=0x0070ea; 	T(MOV(bx, m2c::kloc_170fb));	// 15108 mov     bx, offset loc_170FB ;~ 01A2:70EA
cs=0x1a2;eip=0x0070ed; 	T(CMP(eax, ebp));	// 15109 cmp     eax, ebp ;~ 01A2:70ED
cs=0x1a2;eip=0x0070f0; 	J(JL(loc_18db0));	// 15110 jl      loc_18DB0 ;~ 01A2:70F0
cs=0x1a2;eip=0x0070f4; 	T(CMP(eax, edx));	// 15111 cmp     eax, edx ;~ 01A2:70F4
cs=0x1a2;eip=0x0070f7; 	J(JG(loc_18db8));	// 15112 jg      loc_18DB8 ;~ 01A2:70F7
loc_170fb:
	// 5296 
cs=0x1a2;eip=0x0070fb; 	T(XOR(ah, 0x80));	// 15115 xor     ah, 80h ;~ 01A2:70FB
cs=0x1a2;eip=0x0070fe; 	X(MOV(*(raddr(es,di+8)), ah));	// 15116 mov     es:[di+8], ah ;~ 01A2:70FE
cs=0x1a2;eip=0x007102; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x48))));	// 15117 mov     eax, [si+48h] ;~ 01A2:7102
cs=0x1a2;eip=0x007106; 	T(MOV(bx, m2c::kloc_17117));	// 15118 mov     bx, offset loc_17117 ;~ 01A2:7106
cs=0x1a2;eip=0x007109; 	T(CMP(eax, ebp));	// 15119 cmp     eax, ebp ;~ 01A2:7109
cs=0x1a2;eip=0x00710c; 	J(JL(loc_18db0));	// 15120 jl      loc_18DB0 ;~ 01A2:710C
cs=0x1a2;eip=0x007110; 	T(CMP(eax, edx));	// 15121 cmp     eax, edx ;~ 01A2:7110
cs=0x1a2;eip=0x007113; 	J(JG(loc_18db8));	// 15122 jg      loc_18DB8 ;~ 01A2:7113
loc_17117:
	// 5297 
cs=0x1a2;eip=0x007117; 	T(XOR(ah, 0x80));	// 15125 xor     ah, 80h ;~ 01A2:7117
cs=0x1a2;eip=0x00711a; 	X(MOV(*(raddr(es,di+9)), ah));	// 15126 mov     es:[di+9], ah ;~ 01A2:711A
cs=0x1a2;eip=0x00711e; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x50))));	// 15127 mov     eax, [si+50h] ;~ 01A2:711E
cs=0x1a2;eip=0x007122; 	T(MOV(bx, m2c::kloc_17133));	// 15128 mov     bx, offset loc_17133 ;~ 01A2:7122
cs=0x1a2;eip=0x007125; 	T(CMP(eax, ebp));	// 15129 cmp     eax, ebp ;~ 01A2:7125
cs=0x1a2;eip=0x007128; 	J(JL(loc_18db0));	// 15130 jl      loc_18DB0 ;~ 01A2:7128
cs=0x1a2;eip=0x00712c; 	T(CMP(eax, edx));	// 15131 cmp     eax, edx ;~ 01A2:712C
cs=0x1a2;eip=0x00712f; 	J(JG(loc_18db8));	// 15132 jg      loc_18DB8 ;~ 01A2:712F
loc_17133:
	// 5298 
cs=0x1a2;eip=0x007133; 	T(XOR(ah, 0x80));	// 15135 xor     ah, 80h ;~ 01A2:7133
cs=0x1a2;eip=0x007136; 	X(MOV(*(raddr(es,di+0x0A)), ah));	// 15136 mov     es:[di+0Ah], ah ;~ 01A2:7136
cs=0x1a2;eip=0x00713a; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x58))));	// 15137 mov     eax, [si+58h] ;~ 01A2:713A
cs=0x1a2;eip=0x00713e; 	T(MOV(bx, m2c::kloc_1714f));	// 15138 mov     bx, offset loc_1714F ;~ 01A2:713E
cs=0x1a2;eip=0x007141; 	T(CMP(eax, ebp));	// 15139 cmp     eax, ebp ;~ 01A2:7141
cs=0x1a2;eip=0x007144; 	J(JL(loc_18db0));	// 15140 jl      loc_18DB0 ;~ 01A2:7144
cs=0x1a2;eip=0x007148; 	T(CMP(eax, edx));	// 15141 cmp     eax, edx ;~ 01A2:7148
cs=0x1a2;eip=0x00714b; 	J(JG(loc_18db8));	// 15142 jg      loc_18DB8 ;~ 01A2:714B
loc_1714f:
	// 5299 
cs=0x1a2;eip=0x00714f; 	T(XOR(ah, 0x80));	// 15145 xor     ah, 80h ;~ 01A2:714F
cs=0x1a2;eip=0x007152; 	X(MOV(*(raddr(es,di+0x0B)), ah));	// 15146 mov     es:[di+0Bh], ah ;~ 01A2:7152
cs=0x1a2;eip=0x007156; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x60))));	// 15147 mov     eax, [si+60h] ;~ 01A2:7156
cs=0x1a2;eip=0x00715a; 	T(MOV(bx, m2c::kloc_1716b));	// 15148 mov     bx, offset loc_1716B ;~ 01A2:715A
cs=0x1a2;eip=0x00715d; 	T(CMP(eax, ebp));	// 15149 cmp     eax, ebp ;~ 01A2:715D
cs=0x1a2;eip=0x007160; 	J(JL(loc_18db0));	// 15150 jl      loc_18DB0 ;~ 01A2:7160
cs=0x1a2;eip=0x007164; 	T(CMP(eax, edx));	// 15151 cmp     eax, edx ;~ 01A2:7164
cs=0x1a2;eip=0x007167; 	J(JG(loc_18db8));	// 15152 jg      loc_18DB8 ;~ 01A2:7167
loc_1716b:
	// 5300 
cs=0x1a2;eip=0x00716b; 	T(XOR(ah, 0x80));	// 15155 xor     ah, 80h ;~ 01A2:716B
cs=0x1a2;eip=0x00716e; 	X(MOV(*(raddr(es,di+0x0C)), ah));	// 15156 mov     es:[di+0Ch], ah ;~ 01A2:716E
cs=0x1a2;eip=0x007172; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x68))));	// 15157 mov     eax, [si+68h] ;~ 01A2:7172
cs=0x1a2;eip=0x007176; 	T(MOV(bx, m2c::kloc_17187));	// 15158 mov     bx, offset loc_17187 ;~ 01A2:7176
cs=0x1a2;eip=0x007179; 	T(CMP(eax, ebp));	// 15159 cmp     eax, ebp ;~ 01A2:7179
cs=0x1a2;eip=0x00717c; 	J(JL(loc_18db0));	// 15160 jl      loc_18DB0 ;~ 01A2:717C
cs=0x1a2;eip=0x007180; 	T(CMP(eax, edx));	// 15161 cmp     eax, edx ;~ 01A2:7180
cs=0x1a2;eip=0x007183; 	J(JG(loc_18db8));	// 15162 jg      loc_18DB8 ;~ 01A2:7183
loc_17187:
	// 5301 
cs=0x1a2;eip=0x007187; 	T(XOR(ah, 0x80));	// 15165 xor     ah, 80h ;~ 01A2:7187
cs=0x1a2;eip=0x00718a; 	X(MOV(*(raddr(es,di+0x0D)), ah));	// 15166 mov     es:[di+0Dh], ah ;~ 01A2:718A
cs=0x1a2;eip=0x00718e; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x70))));	// 15167 mov     eax, [si+70h] ;~ 01A2:718E
cs=0x1a2;eip=0x007192; 	T(MOV(bx, m2c::kloc_171a3));	// 15168 mov     bx, offset loc_171A3 ;~ 01A2:7192
cs=0x1a2;eip=0x007195; 	T(CMP(eax, ebp));	// 15169 cmp     eax, ebp ;~ 01A2:7195
cs=0x1a2;eip=0x007198; 	J(JL(loc_18db0));	// 15170 jl      loc_18DB0 ;~ 01A2:7198
cs=0x1a2;eip=0x00719c; 	T(CMP(eax, edx));	// 15171 cmp     eax, edx ;~ 01A2:719C
cs=0x1a2;eip=0x00719f; 	J(JG(loc_18db8));	// 15172 jg      loc_18DB8 ;~ 01A2:719F
loc_171a3:
	// 5302 
cs=0x1a2;eip=0x0071a3; 	T(XOR(ah, 0x80));	// 15175 xor     ah, 80h ;~ 01A2:71A3
cs=0x1a2;eip=0x0071a6; 	X(MOV(*(raddr(es,di+0x0E)), ah));	// 15176 mov     es:[di+0Eh], ah ;~ 01A2:71A6
cs=0x1a2;eip=0x0071aa; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x78))));	// 15177 mov     eax, [si+78h] ;~ 01A2:71AA
cs=0x1a2;eip=0x0071ae; 	T(MOV(bx, m2c::kloc_171bf));	// 15178 mov     bx, offset loc_171BF ;~ 01A2:71AE
cs=0x1a2;eip=0x0071b1; 	T(CMP(eax, ebp));	// 15179 cmp     eax, ebp ;~ 01A2:71B1
cs=0x1a2;eip=0x0071b4; 	J(JL(loc_18db0));	// 15180 jl      loc_18DB0 ;~ 01A2:71B4
cs=0x1a2;eip=0x0071b8; 	T(CMP(eax, edx));	// 15181 cmp     eax, edx ;~ 01A2:71B8
cs=0x1a2;eip=0x0071bb; 	J(JG(loc_18db8));	// 15182 jg      loc_18DB8 ;~ 01A2:71BB
loc_171bf:
	// 5303 
cs=0x1a2;eip=0x0071bf; 	T(XOR(ah, 0x80));	// 15185 xor     ah, 80h ;~ 01A2:71BF
cs=0x1a2;eip=0x0071c2; 	X(MOV(*(raddr(es,di+0x0F)), ah));	// 15186 mov     es:[di+0Fh], ah ;~ 01A2:71C2
cs=0x1a2;eip=0x0071c6; 	T(ADD(si, 0x80));	// 15187 add     si, 80h ; '€' ;~ 01A2:71C6
cs=0x1a2;eip=0x0071ca; 	T(ADD(di, 0x10));	// 15188 add     di, 10h ;~ 01A2:71CA
cs=0x1a2;eip=0x0071cd; 	T(DEC(cx));	// 15189 dec     cx ;~ 01A2:71CD
cs=0x1a2;eip=0x0071ce; 	J(JNZ(loc_17008));	// 15190 jnz     loc_17008 ;~ 01A2:71CE
locret_171d2:
	// 5304 
cs=0x1a2;eip=0x0071d2; 	J(RETN(0));	// 15193 retn ;~ 01A2:71D2
seg000_71d3_proc:
	// 15199 
loc_171d3:
	// 5305 
cs=0x1a2;eip=0x0071d3; 	T(MOV(cx, word_245d4));	// 15200 mov     cx, word_245D4 ;~ 01A2:71D3
cs=0x1a2;eip=0x0071d7; 	T(MOV(si, offset(seg003,_volume_25908)));	// 15201 mov     si, offset _volume_25908 ;~ 01A2:71D7
loc_171da:
	// 5306 
cs=0x1a2;eip=0x0071da; 	X(PUSH(cx));	// 15204 push    cx ;~ 01A2:71DA
cs=0x1a2;eip=0x0071db; 	X(PUSH(si));	// 15205 push    si ;~ 01A2:71DB
cs=0x1a2;eip=0x0071dc; 	T(CMP(*(raddr(ds,si+0x1D)), 0));	// 15206 cmp     byte ptr [si+1Dh], 0 ;~ 01A2:71DC
cs=0x1a2;eip=0x0071e0; 	J(JNZ(loc_1721a));	// 15207 jnz     short loc_1721A ;~ 01A2:71E0
cs=0x1a2;eip=0x0071e2; 	T(CMP(*(raddr(ds,si+0x3A)), 0));	// 15208 cmp     byte ptr [si+3Ah], 0 ;~ 01A2:71E2
cs=0x1a2;eip=0x0071e6; 	J(JZ(loc_17202));	// 15209 jz      short loc_17202 ;~ 01A2:71E6
cs=0x1a2;eip=0x0071e8; 	T(MOV(di, off_245e0));	// 15210 mov     di, off_245E0 ;~ 01A2:71E8
cs=0x1a2;eip=0x0071ec; 	T(TEST(byte_24682, 1));	// 15211 test    byte_24682, 1 ;~ 01A2:71EC
cs=0x1a2;eip=0x0071f1; 	J(JZ(loc_171f8));	// 15212 jz      short loc_171F8 ;~ 01A2:71F1
cs=0x1a2;eip=0x0071f3; 	J(CALL(sub_15577,0));	// 15213 call    sub_15577 ;~ 01A2:71F3
cs=0x1a2;eip=0x0071f6; 	J(JMP(loc_1721a));	// 15214 jmp     short loc_1721A ;~ 01A2:71F6
loc_171f8:
	// 5307 
cs=0x1a2;eip=0x0071f8; 	X(OR(byte_24682, 1));	// 15218 or      byte_24682, 1 ;~ 01A2:71F8
cs=0x1a2;eip=0x0071fd; 	J(CALL(sub_1609f,0));	// 15219 call    sub_1609F ;~ 01A2:71FD
cs=0x1a2;eip=0x007200; 	J(JMP(loc_1721a));	// 15220 jmp     short loc_1721A ;~ 01A2:7200
loc_17202:
	// 5308 
cs=0x1a2;eip=0x007202; 	T(MOV(di, off_245e2));	// 15224 mov     di, off_245E2 ;~ 01A2:7202
cs=0x1a2;eip=0x007206; 	T(TEST(byte_24682, 2));	// 15225 test    byte_24682, 2 ;~ 01A2:7206
cs=0x1a2;eip=0x00720b; 	J(JZ(loc_17212));	// 15226 jz      short loc_17212 ;~ 01A2:720B
cs=0x1a2;eip=0x00720d; 	J(CALL(sub_15577,0));	// 15227 call    sub_15577 ;~ 01A2:720D
cs=0x1a2;eip=0x007210; 	J(JMP(loc_1721a));	// 15228 jmp     short loc_1721A ;~ 01A2:7210
loc_17212:
	// 5309 
cs=0x1a2;eip=0x007212; 	X(OR(byte_24682, 2));	// 15232 or      byte_24682, 2 ;~ 01A2:7212
cs=0x1a2;eip=0x007217; 	J(CALL(sub_1609f,0));	// 15233 call    sub_1609F ;~ 01A2:7217
loc_1721a:
	// 5310 
cs=0x1a2;eip=0x00721a; 	X(POP(si));	// 15237 pop     si ;~ 01A2:721A
cs=0x1a2;eip=0x00721b; 	X(POP(cx));	// 15238 pop     cx ;~ 01A2:721B
cs=0x1a2;eip=0x00721c; 	T(ADD(si, 0x50));	// 15239 add     si, 50h ; 'P' ;~ 01A2:721C
cs=0x1a2;eip=0x00721f; 	T(DEC(cx));	// 15240 dec     cx ;~ 01A2:721F
cs=0x1a2;eip=0x007220; 	J(JNZ(loc_171da));	// 15241 jnz     short loc_171DA ;~ 01A2:7220
cs=0x1a2;eip=0x007222; 	T(CMP(_bit_mode, 16));	// 15242 cmp     _bit_mode, 16 ;~ 01A2:7222
cs=0x1a2;eip=0x007227; 	J(JZ(loc_177ef));	// 15243 jz      loc_177EF ;~ 01A2:7227
cs=0x1a2;eip=0x00722b; 	T(MOV(di, word_24600));	// 15244 mov     di, word_24600 ;~ 01A2:722B
cs=0x1a2;eip=0x00722f; 	T(MOV(cx, word_245e4));	// 15245 mov     cx, word_245E4 ;~ 01A2:722F
cs=0x1a2;eip=0x007233; 	T(MOV(si, offset(seg003,_chrin)+1));	// 15246 mov     si, (offset _chrin+1) ;~ 01A2:7233
cs=0x1a2;eip=0x007236; 	T(MOV(es, *(dw*)(((db*)&_audio_buf_pointer)+2)));	// 15247 mov     es, word ptr _audio_buf_pointer+2 ;~ 01A2:7236
cs=0x1a2;eip=0x00723a; 	T(MOV(ax, 0x1000));	// 15249 mov     ax, 1000h ;~ 01A2:723A
cs=0x1a2;eip=0x00723d; 	T(SUB(ax, di));	// 15250 sub     ax, di ;~ 01A2:723D
cs=0x1a2;eip=0x00723f; 	T(SHL(cx, 1));	// 15251 shl     cx, 1 ;~ 01A2:723F
cs=0x1a2;eip=0x007241; 	T(CMP(ax, cx));	// 15252 cmp     ax, cx ;~ 01A2:7241
cs=0x1a2;eip=0x007243; 	J(JA(loc_17254));	// 15253 ja      short loc_17254 ;~ 01A2:7243
cs=0x1a2;eip=0x007245; 	T(MOV(bx, cx));	// 15254 mov     bx, cx ;~ 01A2:7245
cs=0x1a2;eip=0x007247; 	T(SUB(bx, ax));	// 15255 sub     bx, ax ;~ 01A2:7247
cs=0x1a2;eip=0x007249; 	T(MOV(cx, ax));	// 15256 mov     cx, ax ;~ 01A2:7249
cs=0x1a2;eip=0x00724b; 	X(PUSH(bx));	// 15257 push    bx ;~ 01A2:724B
cs=0x1a2;eip=0x00724c; 	J(CALL(sub_1725f,0));	// 15258 call    sub_1725F ;~ 01A2:724C
cs=0x1a2;eip=0x00724f; 	X(POP(cx));	// 15259 pop     cx ;~ 01A2:724F
cs=0x1a2;eip=0x007250; 	T(XOR(di, di));	// 15260 xor     di, di ;~ 01A2:7250
cs=0x1a2;eip=0x007252; 	J(JCXZ(loc_17257));	// 15261 jcxz    short loc_17257 ;~ 01A2:7252
loc_17254:
	// 5311 
cs=0x1a2;eip=0x007254; 	J(CALL(sub_1725f,0));	// 15264 call    sub_1725F ;~ 01A2:7254
loc_17257:
	// 5312 
cs=0x1a2;eip=0x007257; 	X(MOV(word_24600, di));	// 15267 mov     word_24600, di ;~ 01A2:7257
cs=0x1a2;eip=0x00725b; 	J(CALL(_ems_restore_mapctx,0));	// 15268 call    _ems_restore_mapctx ;~ 01A2:725B
cs=0x1a2;eip=0x00725e; 	J(RETN(0));	// 15269 retn ;~ 01A2:725E
seg000_745c_proc:
	// 15507 
loc_1745c:
	// 5332 
cs=0x1a2;eip=0x00745c; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 15509 mov     eax, [si] ;~ 01A2:745C
cs=0x1a2;eip=0x00745f; 	T(ADD(si, 4));	// 15510 add     si, 4 ;~ 01A2:745F
cs=0x1a2;eip=0x007462; 	T(MOV(bx, m2c::kloc_17473));	// 15511 mov     bx, offset loc_17473 ;~ 01A2:7462
cs=0x1a2;eip=0x007465; 	T(CMP(eax, ebp));	// 15512 cmp     eax, ebp ;~ 01A2:7465
cs=0x1a2;eip=0x007468; 	J(JL(loc_18db0));	// 15513 jl      loc_18DB0 ;~ 01A2:7468
cs=0x1a2;eip=0x00746c; 	T(CMP(eax, edx));	// 15514 cmp     eax, edx ;~ 01A2:746C
cs=0x1a2;eip=0x00746f; 	J(JG(loc_18db8));	// 15515 jg      loc_18DB8 ;~ 01A2:746F
loc_17473:
	// 5333 
cs=0x1a2;eip=0x007473; 	T(XOR(ah, 0x80));	// 15518 xor     ah, 80h ;~ 01A2:7473
cs=0x1a2;eip=0x007476; 	X(MOV(*(raddr(es,di)), ah));	// 15519 mov     es:[di], ah ;~ 01A2:7476
cs=0x1a2;eip=0x007479; 	T(INC(di));	// 15520 inc     di ;~ 01A2:7479
loc_1747a:
	// 5334 
cs=0x1a2;eip=0x00747a; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 15524 mov     eax, [si] ;~ 01A2:747A
cs=0x1a2;eip=0x00747d; 	T(ADD(si, 4));	// 15525 add     si, 4 ;~ 01A2:747D
cs=0x1a2;eip=0x007480; 	T(MOV(bx, m2c::kloc_17491));	// 15526 mov     bx, offset loc_17491 ;~ 01A2:7480
cs=0x1a2;eip=0x007483; 	T(CMP(eax, ebp));	// 15527 cmp     eax, ebp ;~ 01A2:7483
cs=0x1a2;eip=0x007486; 	J(JL(loc_18db0));	// 15528 jl      loc_18DB0 ;~ 01A2:7486
cs=0x1a2;eip=0x00748a; 	T(CMP(eax, edx));	// 15529 cmp     eax, edx ;~ 01A2:748A
cs=0x1a2;eip=0x00748d; 	J(JG(loc_18db8));	// 15530 jg      loc_18DB8 ;~ 01A2:748D
loc_17491:
	// 5335 
cs=0x1a2;eip=0x007491; 	T(XOR(ah, 0x80));	// 15533 xor     ah, 80h ;~ 01A2:7491
cs=0x1a2;eip=0x007494; 	X(MOV(*(raddr(es,di)), ah));	// 15534 mov     es:[di], ah ;~ 01A2:7494
cs=0x1a2;eip=0x007497; 	T(INC(di));	// 15535 inc     di ;~ 01A2:7497
loc_17498:
	// 5336 
cs=0x1a2;eip=0x007498; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 15539 mov     eax, [si] ;~ 01A2:7498
cs=0x1a2;eip=0x00749b; 	T(ADD(si, 4));	// 15540 add     si, 4 ;~ 01A2:749B
cs=0x1a2;eip=0x00749e; 	T(MOV(bx, m2c::kloc_174af));	// 15541 mov     bx, offset loc_174AF ;~ 01A2:749E
cs=0x1a2;eip=0x0074a1; 	T(CMP(eax, ebp));	// 15542 cmp     eax, ebp ;~ 01A2:74A1
cs=0x1a2;eip=0x0074a4; 	J(JL(loc_18db0));	// 15543 jl      loc_18DB0 ;~ 01A2:74A4
cs=0x1a2;eip=0x0074a8; 	T(CMP(eax, edx));	// 15544 cmp     eax, edx ;~ 01A2:74A8
cs=0x1a2;eip=0x0074ab; 	J(JG(loc_18db8));	// 15545 jg      loc_18DB8 ;~ 01A2:74AB
loc_174af:
	// 5337 
cs=0x1a2;eip=0x0074af; 	T(XOR(ah, 0x80));	// 15548 xor     ah, 80h ;~ 01A2:74AF
cs=0x1a2;eip=0x0074b2; 	X(MOV(*(raddr(es,di)), ah));	// 15549 mov     es:[di], ah ;~ 01A2:74B2
cs=0x1a2;eip=0x0074b5; 	T(INC(di));	// 15550 inc     di ;~ 01A2:74B5
loc_174b6:
	// 5338 
cs=0x1a2;eip=0x0074b6; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 15554 mov     eax, [si] ;~ 01A2:74B6
cs=0x1a2;eip=0x0074b9; 	T(ADD(si, 4));	// 15555 add     si, 4 ;~ 01A2:74B9
cs=0x1a2;eip=0x0074bc; 	T(MOV(bx, m2c::kloc_174cd));	// 15556 mov     bx, offset loc_174CD ;~ 01A2:74BC
cs=0x1a2;eip=0x0074bf; 	T(CMP(eax, ebp));	// 15557 cmp     eax, ebp ;~ 01A2:74BF
cs=0x1a2;eip=0x0074c2; 	J(JL(loc_18db0));	// 15558 jl      loc_18DB0 ;~ 01A2:74C2
cs=0x1a2;eip=0x0074c6; 	T(CMP(eax, edx));	// 15559 cmp     eax, edx ;~ 01A2:74C6
cs=0x1a2;eip=0x0074c9; 	J(JG(loc_18db8));	// 15560 jg      loc_18DB8 ;~ 01A2:74C9
loc_174cd:
	// 5339 
cs=0x1a2;eip=0x0074cd; 	T(XOR(ah, 0x80));	// 15563 xor     ah, 80h ;~ 01A2:74CD
cs=0x1a2;eip=0x0074d0; 	X(MOV(*(raddr(es,di)), ah));	// 15564 mov     es:[di], ah ;~ 01A2:74D0
cs=0x1a2;eip=0x0074d3; 	T(INC(di));	// 15565 inc     di ;~ 01A2:74D3
loc_174d4:
	// 5340 
cs=0x1a2;eip=0x0074d4; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 15569 mov     eax, [si] ;~ 01A2:74D4
cs=0x1a2;eip=0x0074d7; 	T(ADD(si, 4));	// 15570 add     si, 4 ;~ 01A2:74D7
cs=0x1a2;eip=0x0074da; 	T(MOV(bx, m2c::kloc_174eb));	// 15571 mov     bx, offset loc_174EB ;~ 01A2:74DA
cs=0x1a2;eip=0x0074dd; 	T(CMP(eax, ebp));	// 15572 cmp     eax, ebp ;~ 01A2:74DD
cs=0x1a2;eip=0x0074e0; 	J(JL(loc_18db0));	// 15573 jl      loc_18DB0 ;~ 01A2:74E0
cs=0x1a2;eip=0x0074e4; 	T(CMP(eax, edx));	// 15574 cmp     eax, edx ;~ 01A2:74E4
cs=0x1a2;eip=0x0074e7; 	J(JG(loc_18db8));	// 15575 jg      loc_18DB8 ;~ 01A2:74E7
loc_174eb:
	// 5341 
cs=0x1a2;eip=0x0074eb; 	T(XOR(ah, 0x80));	// 15578 xor     ah, 80h ;~ 01A2:74EB
cs=0x1a2;eip=0x0074ee; 	X(MOV(*(raddr(es,di)), ah));	// 15579 mov     es:[di], ah ;~ 01A2:74EE
cs=0x1a2;eip=0x0074f1; 	T(INC(di));	// 15580 inc     di ;~ 01A2:74F1
loc_174f2:
	// 5342 
cs=0x1a2;eip=0x0074f2; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 15584 mov     eax, [si] ;~ 01A2:74F2
cs=0x1a2;eip=0x0074f5; 	T(ADD(si, 4));	// 15585 add     si, 4 ;~ 01A2:74F5
cs=0x1a2;eip=0x0074f8; 	T(MOV(bx, m2c::kloc_17509));	// 15586 mov     bx, offset loc_17509 ;~ 01A2:74F8
cs=0x1a2;eip=0x0074fb; 	T(CMP(eax, ebp));	// 15587 cmp     eax, ebp ;~ 01A2:74FB
cs=0x1a2;eip=0x0074fe; 	J(JL(loc_18db0));	// 15588 jl      loc_18DB0 ;~ 01A2:74FE
cs=0x1a2;eip=0x007502; 	T(CMP(eax, edx));	// 15589 cmp     eax, edx ;~ 01A2:7502
cs=0x1a2;eip=0x007505; 	J(JG(loc_18db8));	// 15590 jg      loc_18DB8 ;~ 01A2:7505
loc_17509:
	// 5343 
cs=0x1a2;eip=0x007509; 	T(XOR(ah, 0x80));	// 15593 xor     ah, 80h ;~ 01A2:7509
cs=0x1a2;eip=0x00750c; 	X(MOV(*(raddr(es,di)), ah));	// 15594 mov     es:[di], ah ;~ 01A2:750C
cs=0x1a2;eip=0x00750f; 	T(INC(di));	// 15595 inc     di ;~ 01A2:750F
loc_17510:
	// 5344 
cs=0x1a2;eip=0x007510; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 15599 mov     eax, [si] ;~ 01A2:7510
cs=0x1a2;eip=0x007513; 	T(ADD(si, 4));	// 15600 add     si, 4 ;~ 01A2:7513
cs=0x1a2;eip=0x007516; 	T(MOV(bx, m2c::kloc_17527));	// 15601 mov     bx, offset loc_17527 ;~ 01A2:7516
cs=0x1a2;eip=0x007519; 	T(CMP(eax, ebp));	// 15602 cmp     eax, ebp ;~ 01A2:7519
cs=0x1a2;eip=0x00751c; 	J(JL(loc_18db0));	// 15603 jl      loc_18DB0 ;~ 01A2:751C
cs=0x1a2;eip=0x007520; 	T(CMP(eax, edx));	// 15604 cmp     eax, edx ;~ 01A2:7520
cs=0x1a2;eip=0x007523; 	J(JG(loc_18db8));	// 15605 jg      loc_18DB8 ;~ 01A2:7523
loc_17527:
	// 5345 
cs=0x1a2;eip=0x007527; 	T(XOR(ah, 0x80));	// 15608 xor     ah, 80h ;~ 01A2:7527
cs=0x1a2;eip=0x00752a; 	X(MOV(*(raddr(es,di)), ah));	// 15609 mov     es:[di], ah ;~ 01A2:752A
cs=0x1a2;eip=0x00752d; 	T(INC(di));	// 15610 inc     di ;~ 01A2:752D
loc_1752e:
	// 5346 
cs=0x1a2;eip=0x00752e; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 15614 mov     eax, [si] ;~ 01A2:752E
cs=0x1a2;eip=0x007531; 	T(ADD(si, 4));	// 15615 add     si, 4 ;~ 01A2:7531
cs=0x1a2;eip=0x007534; 	T(MOV(bx, m2c::kloc_17545));	// 15616 mov     bx, offset loc_17545 ;~ 01A2:7534
cs=0x1a2;eip=0x007537; 	T(CMP(eax, ebp));	// 15617 cmp     eax, ebp ;~ 01A2:7537
cs=0x1a2;eip=0x00753a; 	J(JL(loc_18db0));	// 15618 jl      loc_18DB0 ;~ 01A2:753A
cs=0x1a2;eip=0x00753e; 	T(CMP(eax, edx));	// 15619 cmp     eax, edx ;~ 01A2:753E
cs=0x1a2;eip=0x007541; 	J(JG(loc_18db8));	// 15620 jg      loc_18DB8 ;~ 01A2:7541
loc_17545:
	// 5347 
cs=0x1a2;eip=0x007545; 	T(XOR(ah, 0x80));	// 15623 xor     ah, 80h ;~ 01A2:7545
cs=0x1a2;eip=0x007548; 	X(MOV(*(raddr(es,di)), ah));	// 15624 mov     es:[di], ah ;~ 01A2:7548
cs=0x1a2;eip=0x00754b; 	T(INC(di));	// 15625 inc     di ;~ 01A2:754B
loc_1754c:
	// 5348 
cs=0x1a2;eip=0x00754c; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 15629 mov     eax, [si] ;~ 01A2:754C
cs=0x1a2;eip=0x00754f; 	T(ADD(si, 4));	// 15630 add     si, 4 ;~ 01A2:754F
cs=0x1a2;eip=0x007552; 	T(MOV(bx, m2c::kloc_17563));	// 15631 mov     bx, offset loc_17563 ;~ 01A2:7552
cs=0x1a2;eip=0x007555; 	T(CMP(eax, ebp));	// 15632 cmp     eax, ebp ;~ 01A2:7555
cs=0x1a2;eip=0x007558; 	J(JL(loc_18db0));	// 15633 jl      loc_18DB0 ;~ 01A2:7558
cs=0x1a2;eip=0x00755c; 	T(CMP(eax, edx));	// 15634 cmp     eax, edx ;~ 01A2:755C
cs=0x1a2;eip=0x00755f; 	J(JG(loc_18db8));	// 15635 jg      loc_18DB8 ;~ 01A2:755F
loc_17563:
	// 5349 
cs=0x1a2;eip=0x007563; 	T(XOR(ah, 0x80));	// 15638 xor     ah, 80h ;~ 01A2:7563
cs=0x1a2;eip=0x007566; 	X(MOV(*(raddr(es,di)), ah));	// 15639 mov     es:[di], ah ;~ 01A2:7566
cs=0x1a2;eip=0x007569; 	T(INC(di));	// 15640 inc     di ;~ 01A2:7569
loc_1756a:
	// 5350 
cs=0x1a2;eip=0x00756a; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 15644 mov     eax, [si] ;~ 01A2:756A
cs=0x1a2;eip=0x00756d; 	T(ADD(si, 4));	// 15645 add     si, 4 ;~ 01A2:756D
cs=0x1a2;eip=0x007570; 	T(MOV(bx, m2c::kloc_17581));	// 15646 mov     bx, offset loc_17581 ;~ 01A2:7570
cs=0x1a2;eip=0x007573; 	T(CMP(eax, ebp));	// 15647 cmp     eax, ebp ;~ 01A2:7573
cs=0x1a2;eip=0x007576; 	J(JL(loc_18db0));	// 15648 jl      loc_18DB0 ;~ 01A2:7576
cs=0x1a2;eip=0x00757a; 	T(CMP(eax, edx));	// 15649 cmp     eax, edx ;~ 01A2:757A
cs=0x1a2;eip=0x00757d; 	J(JG(loc_18db8));	// 15650 jg      loc_18DB8 ;~ 01A2:757D
loc_17581:
	// 5351 
cs=0x1a2;eip=0x007581; 	T(XOR(ah, 0x80));	// 15653 xor     ah, 80h ;~ 01A2:7581
cs=0x1a2;eip=0x007584; 	X(MOV(*(raddr(es,di)), ah));	// 15654 mov     es:[di], ah ;~ 01A2:7584
cs=0x1a2;eip=0x007587; 	T(INC(di));	// 15655 inc     di ;~ 01A2:7587
loc_17588:
	// 5352 
cs=0x1a2;eip=0x007588; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 15659 mov     eax, [si] ;~ 01A2:7588
cs=0x1a2;eip=0x00758b; 	T(ADD(si, 4));	// 15660 add     si, 4 ;~ 01A2:758B
cs=0x1a2;eip=0x00758e; 	T(MOV(bx, m2c::kloc_1759f));	// 15661 mov     bx, offset loc_1759F ;~ 01A2:758E
cs=0x1a2;eip=0x007591; 	T(CMP(eax, ebp));	// 15662 cmp     eax, ebp ;~ 01A2:7591
cs=0x1a2;eip=0x007594; 	J(JL(loc_18db0));	// 15663 jl      loc_18DB0 ;~ 01A2:7594
cs=0x1a2;eip=0x007598; 	T(CMP(eax, edx));	// 15664 cmp     eax, edx ;~ 01A2:7598
cs=0x1a2;eip=0x00759b; 	J(JG(loc_18db8));	// 15665 jg      loc_18DB8 ;~ 01A2:759B
loc_1759f:
	// 5353 
cs=0x1a2;eip=0x00759f; 	T(XOR(ah, 0x80));	// 15668 xor     ah, 80h ;~ 01A2:759F
cs=0x1a2;eip=0x0075a2; 	X(MOV(*(raddr(es,di)), ah));	// 15669 mov     es:[di], ah ;~ 01A2:75A2
cs=0x1a2;eip=0x0075a5; 	T(INC(di));	// 15670 inc     di ;~ 01A2:75A5
loc_175a6:
	// 5354 
cs=0x1a2;eip=0x0075a6; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 15674 mov     eax, [si] ;~ 01A2:75A6
cs=0x1a2;eip=0x0075a9; 	T(ADD(si, 4));	// 15675 add     si, 4 ;~ 01A2:75A9
cs=0x1a2;eip=0x0075ac; 	T(MOV(bx, m2c::kloc_175bd));	// 15676 mov     bx, offset loc_175BD ;~ 01A2:75AC
cs=0x1a2;eip=0x0075af; 	T(CMP(eax, ebp));	// 15677 cmp     eax, ebp ;~ 01A2:75AF
cs=0x1a2;eip=0x0075b2; 	J(JL(loc_18db0));	// 15678 jl      loc_18DB0 ;~ 01A2:75B2
cs=0x1a2;eip=0x0075b6; 	T(CMP(eax, edx));	// 15679 cmp     eax, edx ;~ 01A2:75B6
cs=0x1a2;eip=0x0075b9; 	J(JG(loc_18db8));	// 15680 jg      loc_18DB8 ;~ 01A2:75B9
loc_175bd:
	// 5355 
cs=0x1a2;eip=0x0075bd; 	T(XOR(ah, 0x80));	// 15683 xor     ah, 80h ;~ 01A2:75BD
cs=0x1a2;eip=0x0075c0; 	X(MOV(*(raddr(es,di)), ah));	// 15684 mov     es:[di], ah ;~ 01A2:75C0
cs=0x1a2;eip=0x0075c3; 	T(INC(di));	// 15685 inc     di ;~ 01A2:75C3
loc_175c4:
	// 5356 
cs=0x1a2;eip=0x0075c4; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 15689 mov     eax, [si] ;~ 01A2:75C4
cs=0x1a2;eip=0x0075c7; 	T(ADD(si, 4));	// 15690 add     si, 4 ;~ 01A2:75C7
cs=0x1a2;eip=0x0075ca; 	T(MOV(bx, m2c::kloc_175db));	// 15691 mov     bx, offset loc_175DB ;~ 01A2:75CA
cs=0x1a2;eip=0x0075cd; 	T(CMP(eax, ebp));	// 15692 cmp     eax, ebp ;~ 01A2:75CD
cs=0x1a2;eip=0x0075d0; 	J(JL(loc_18db0));	// 15693 jl      loc_18DB0 ;~ 01A2:75D0
cs=0x1a2;eip=0x0075d4; 	T(CMP(eax, edx));	// 15694 cmp     eax, edx ;~ 01A2:75D4
cs=0x1a2;eip=0x0075d7; 	J(JG(loc_18db8));	// 15695 jg      loc_18DB8 ;~ 01A2:75D7
loc_175db:
	// 5357 
cs=0x1a2;eip=0x0075db; 	T(XOR(ah, 0x80));	// 15698 xor     ah, 80h ;~ 01A2:75DB
cs=0x1a2;eip=0x0075de; 	X(MOV(*(raddr(es,di)), ah));	// 15699 mov     es:[di], ah ;~ 01A2:75DE
cs=0x1a2;eip=0x0075e1; 	T(INC(di));	// 15700 inc     di ;~ 01A2:75E1
loc_175e2:
	// 5358 
cs=0x1a2;eip=0x0075e2; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 15704 mov     eax, [si] ;~ 01A2:75E2
cs=0x1a2;eip=0x0075e5; 	T(ADD(si, 4));	// 15705 add     si, 4 ;~ 01A2:75E5
cs=0x1a2;eip=0x0075e8; 	T(MOV(bx, m2c::kloc_175f9));	// 15706 mov     bx, offset loc_175F9 ;~ 01A2:75E8
cs=0x1a2;eip=0x0075eb; 	T(CMP(eax, ebp));	// 15707 cmp     eax, ebp ;~ 01A2:75EB
cs=0x1a2;eip=0x0075ee; 	J(JL(loc_18db0));	// 15708 jl      loc_18DB0 ;~ 01A2:75EE
cs=0x1a2;eip=0x0075f2; 	T(CMP(eax, edx));	// 15709 cmp     eax, edx ;~ 01A2:75F2
cs=0x1a2;eip=0x0075f5; 	J(JG(loc_18db8));	// 15710 jg      loc_18DB8 ;~ 01A2:75F5
loc_175f9:
	// 5359 
cs=0x1a2;eip=0x0075f9; 	T(XOR(ah, 0x80));	// 15713 xor     ah, 80h ;~ 01A2:75F9
cs=0x1a2;eip=0x0075fc; 	X(MOV(*(raddr(es,di)), ah));	// 15714 mov     es:[di], ah ;~ 01A2:75FC
cs=0x1a2;eip=0x0075ff; 	T(INC(di));	// 15715 inc     di ;~ 01A2:75FF
loc_17600:
	// 5360 
cs=0x1a2;eip=0x007600; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 15719 mov     eax, [si] ;~ 01A2:7600
cs=0x1a2;eip=0x007603; 	T(ADD(si, 4));	// 15720 add     si, 4 ;~ 01A2:7603
cs=0x1a2;eip=0x007606; 	T(MOV(bx, m2c::kloc_17617));	// 15721 mov     bx, offset loc_17617 ;~ 01A2:7606
cs=0x1a2;eip=0x007609; 	T(CMP(eax, ebp));	// 15722 cmp     eax, ebp ;~ 01A2:7609
cs=0x1a2;eip=0x00760c; 	J(JL(loc_18db0));	// 15723 jl      loc_18DB0 ;~ 01A2:760C
cs=0x1a2;eip=0x007610; 	T(CMP(eax, edx));	// 15724 cmp     eax, edx ;~ 01A2:7610
cs=0x1a2;eip=0x007613; 	J(JG(loc_18db8));	// 15725 jg      loc_18DB8 ;~ 01A2:7613
loc_17617:
	// 5361 
cs=0x1a2;eip=0x007617; 	T(XOR(ah, 0x80));	// 15728 xor     ah, 80h ;~ 01A2:7617
cs=0x1a2;eip=0x00761a; 	X(MOV(*(raddr(es,di)), ah));	// 15729 mov     es:[di], ah ;~ 01A2:761A
cs=0x1a2;eip=0x00761d; 	T(INC(di));	// 15730 inc     di ;~ 01A2:761D
loc_1761e:
	// 5362 
cs=0x1a2;eip=0x00761e; 	T(SHR(cx, 4));	// 15734 shr     cx, 4 ;~ 01A2:761E
cs=0x1a2;eip=0x007621; 	J(JZ(locret_177ee));	// 15735 jz      locret_177EE ;~ 01A2:7621
loc_17625:
	// 5363 
cs=0x1a2;eip=0x007625; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 15738 mov     eax, [si] ;~ 01A2:7625
cs=0x1a2;eip=0x007628; 	T(MOV(bx, m2c::kloc_17639));	// 15739 mov     bx, offset loc_17639 ;~ 01A2:7628
cs=0x1a2;eip=0x00762b; 	T(CMP(eax, ebp));	// 15740 cmp     eax, ebp ;~ 01A2:762B
cs=0x1a2;eip=0x00762e; 	J(JL(loc_18db0));	// 15741 jl      loc_18DB0 ;~ 01A2:762E
cs=0x1a2;eip=0x007632; 	T(CMP(eax, edx));	// 15742 cmp     eax, edx ;~ 01A2:7632
cs=0x1a2;eip=0x007635; 	J(JG(loc_18db8));	// 15743 jg      loc_18DB8 ;~ 01A2:7635
loc_17639:
	// 5364 
cs=0x1a2;eip=0x007639; 	T(XOR(ah, 0x80));	// 15746 xor     ah, 80h ;~ 01A2:7639
cs=0x1a2;eip=0x00763c; 	X(MOV(*(raddr(es,di)), ah));	// 15747 mov     es:[di], ah ;~ 01A2:763C
cs=0x1a2;eip=0x00763f; 	T(MOV(eax, *(dd*)(raddr(ds,si+4))));	// 15748 mov     eax, [si+4] ;~ 01A2:763F
cs=0x1a2;eip=0x007643; 	T(MOV(bx, m2c::kloc_17654));	// 15749 mov     bx, offset loc_17654 ;~ 01A2:7643
cs=0x1a2;eip=0x007646; 	T(CMP(eax, ebp));	// 15750 cmp     eax, ebp ;~ 01A2:7646
cs=0x1a2;eip=0x007649; 	J(JL(loc_18db0));	// 15751 jl      loc_18DB0 ;~ 01A2:7649
cs=0x1a2;eip=0x00764d; 	T(CMP(eax, edx));	// 15752 cmp     eax, edx ;~ 01A2:764D
cs=0x1a2;eip=0x007650; 	J(JG(loc_18db8));	// 15753 jg      loc_18DB8 ;~ 01A2:7650
loc_17654:
	// 5365 
cs=0x1a2;eip=0x007654; 	T(XOR(ah, 0x80));	// 15756 xor     ah, 80h ;~ 01A2:7654
cs=0x1a2;eip=0x007657; 	X(MOV(*(raddr(es,di+1)), ah));	// 15757 mov     es:[di+1], ah ;~ 01A2:7657
cs=0x1a2;eip=0x00765b; 	T(MOV(eax, *(dd*)(raddr(ds,si+8))));	// 15758 mov     eax, [si+8] ;~ 01A2:765B
cs=0x1a2;eip=0x00765f; 	T(MOV(bx, m2c::kloc_17670));	// 15759 mov     bx, offset loc_17670 ;~ 01A2:765F
cs=0x1a2;eip=0x007662; 	T(CMP(eax, ebp));	// 15760 cmp     eax, ebp ;~ 01A2:7662
cs=0x1a2;eip=0x007665; 	J(JL(loc_18db0));	// 15761 jl      loc_18DB0 ;~ 01A2:7665
cs=0x1a2;eip=0x007669; 	T(CMP(eax, edx));	// 15762 cmp     eax, edx ;~ 01A2:7669
cs=0x1a2;eip=0x00766c; 	J(JG(loc_18db8));	// 15763 jg      loc_18DB8 ;~ 01A2:766C
loc_17670:
	// 5366 
cs=0x1a2;eip=0x007670; 	T(XOR(ah, 0x80));	// 15766 xor     ah, 80h ;~ 01A2:7670
cs=0x1a2;eip=0x007673; 	X(MOV(*(raddr(es,di+2)), ah));	// 15767 mov     es:[di+2], ah ;~ 01A2:7673
cs=0x1a2;eip=0x007677; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x0C))));	// 15768 mov     eax, [si+0Ch] ;~ 01A2:7677
cs=0x1a2;eip=0x00767b; 	T(MOV(bx, m2c::kloc_1768c));	// 15769 mov     bx, offset loc_1768C ;~ 01A2:767B
cs=0x1a2;eip=0x00767e; 	T(CMP(eax, ebp));	// 15770 cmp     eax, ebp ;~ 01A2:767E
cs=0x1a2;eip=0x007681; 	J(JL(loc_18db0));	// 15771 jl      loc_18DB0 ;~ 01A2:7681
cs=0x1a2;eip=0x007685; 	T(CMP(eax, edx));	// 15772 cmp     eax, edx ;~ 01A2:7685
cs=0x1a2;eip=0x007688; 	J(JG(loc_18db8));	// 15773 jg      loc_18DB8 ;~ 01A2:7688
loc_1768c:
	// 5367 
cs=0x1a2;eip=0x00768c; 	T(XOR(ah, 0x80));	// 15776 xor     ah, 80h ;~ 01A2:768C
cs=0x1a2;eip=0x00768f; 	X(MOV(*(raddr(es,di+3)), ah));	// 15777 mov     es:[di+3], ah ;~ 01A2:768F
cs=0x1a2;eip=0x007693; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x10))));	// 15778 mov     eax, [si+10h] ;~ 01A2:7693
cs=0x1a2;eip=0x007697; 	T(MOV(bx, m2c::kloc_176a8));	// 15779 mov     bx, offset loc_176A8 ;~ 01A2:7697
cs=0x1a2;eip=0x00769a; 	T(CMP(eax, ebp));	// 15780 cmp     eax, ebp ;~ 01A2:769A
cs=0x1a2;eip=0x00769d; 	J(JL(loc_18db0));	// 15781 jl      loc_18DB0 ;~ 01A2:769D
cs=0x1a2;eip=0x0076a1; 	T(CMP(eax, edx));	// 15782 cmp     eax, edx ;~ 01A2:76A1
cs=0x1a2;eip=0x0076a4; 	J(JG(loc_18db8));	// 15783 jg      loc_18DB8 ;~ 01A2:76A4
loc_176a8:
	// 5368 
cs=0x1a2;eip=0x0076a8; 	T(XOR(ah, 0x80));	// 15786 xor     ah, 80h ;~ 01A2:76A8
cs=0x1a2;eip=0x0076ab; 	X(MOV(*(raddr(es,di+4)), ah));	// 15787 mov     es:[di+4], ah ;~ 01A2:76AB
cs=0x1a2;eip=0x0076af; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x14))));	// 15788 mov     eax, [si+14h] ;~ 01A2:76AF
cs=0x1a2;eip=0x0076b3; 	T(MOV(bx, m2c::kloc_176c4));	// 15789 mov     bx, offset loc_176C4 ;~ 01A2:76B3
cs=0x1a2;eip=0x0076b6; 	T(CMP(eax, ebp));	// 15790 cmp     eax, ebp ;~ 01A2:76B6
cs=0x1a2;eip=0x0076b9; 	J(JL(loc_18db0));	// 15791 jl      loc_18DB0 ;~ 01A2:76B9
cs=0x1a2;eip=0x0076bd; 	T(CMP(eax, edx));	// 15792 cmp     eax, edx ;~ 01A2:76BD
cs=0x1a2;eip=0x0076c0; 	J(JG(loc_18db8));	// 15793 jg      loc_18DB8 ;~ 01A2:76C0
loc_176c4:
	// 5369 
cs=0x1a2;eip=0x0076c4; 	T(XOR(ah, 0x80));	// 15796 xor     ah, 80h ;~ 01A2:76C4
cs=0x1a2;eip=0x0076c7; 	X(MOV(*(raddr(es,di+5)), ah));	// 15797 mov     es:[di+5], ah ;~ 01A2:76C7
cs=0x1a2;eip=0x0076cb; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x18))));	// 15798 mov     eax, [si+18h] ;~ 01A2:76CB
cs=0x1a2;eip=0x0076cf; 	T(MOV(bx, m2c::kloc_176e0));	// 15799 mov     bx, offset loc_176E0 ;~ 01A2:76CF
cs=0x1a2;eip=0x0076d2; 	T(CMP(eax, ebp));	// 15800 cmp     eax, ebp ;~ 01A2:76D2
cs=0x1a2;eip=0x0076d5; 	J(JL(loc_18db0));	// 15801 jl      loc_18DB0 ;~ 01A2:76D5
cs=0x1a2;eip=0x0076d9; 	T(CMP(eax, edx));	// 15802 cmp     eax, edx ;~ 01A2:76D9
cs=0x1a2;eip=0x0076dc; 	J(JG(loc_18db8));	// 15803 jg      loc_18DB8 ;~ 01A2:76DC
loc_176e0:
	// 5370 
cs=0x1a2;eip=0x0076e0; 	T(XOR(ah, 0x80));	// 15806 xor     ah, 80h ;~ 01A2:76E0
cs=0x1a2;eip=0x0076e3; 	X(MOV(*(raddr(es,di+6)), ah));	// 15807 mov     es:[di+6], ah ;~ 01A2:76E3
cs=0x1a2;eip=0x0076e7; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x1C))));	// 15808 mov     eax, [si+1Ch] ;~ 01A2:76E7
cs=0x1a2;eip=0x0076eb; 	T(MOV(bx, m2c::kloc_176fc));	// 15809 mov     bx, offset loc_176FC ;~ 01A2:76EB
cs=0x1a2;eip=0x0076ee; 	T(CMP(eax, ebp));	// 15810 cmp     eax, ebp ;~ 01A2:76EE
cs=0x1a2;eip=0x0076f1; 	J(JL(loc_18db0));	// 15811 jl      loc_18DB0 ;~ 01A2:76F1
cs=0x1a2;eip=0x0076f5; 	T(CMP(eax, edx));	// 15812 cmp     eax, edx ;~ 01A2:76F5
cs=0x1a2;eip=0x0076f8; 	J(JG(loc_18db8));	// 15813 jg      loc_18DB8 ;~ 01A2:76F8
loc_176fc:
	// 5371 
cs=0x1a2;eip=0x0076fc; 	T(XOR(ah, 0x80));	// 15816 xor     ah, 80h ;~ 01A2:76FC
cs=0x1a2;eip=0x0076ff; 	X(MOV(*(raddr(es,di+7)), ah));	// 15817 mov     es:[di+7], ah ;~ 01A2:76FF
cs=0x1a2;eip=0x007703; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x20))));	// 15818 mov     eax, [si+20h] ;~ 01A2:7703
cs=0x1a2;eip=0x007707; 	T(MOV(bx, m2c::kloc_17718));	// 15819 mov     bx, offset loc_17718 ;~ 01A2:7707
cs=0x1a2;eip=0x00770a; 	T(CMP(eax, ebp));	// 15820 cmp     eax, ebp ;~ 01A2:770A
cs=0x1a2;eip=0x00770d; 	J(JL(loc_18db0));	// 15821 jl      loc_18DB0 ;~ 01A2:770D
cs=0x1a2;eip=0x007711; 	T(CMP(eax, edx));	// 15822 cmp     eax, edx ;~ 01A2:7711
cs=0x1a2;eip=0x007714; 	J(JG(loc_18db8));	// 15823 jg      loc_18DB8 ;~ 01A2:7714
loc_17718:
	// 5372 
cs=0x1a2;eip=0x007718; 	T(XOR(ah, 0x80));	// 15826 xor     ah, 80h ;~ 01A2:7718
cs=0x1a2;eip=0x00771b; 	X(MOV(*(raddr(es,di+8)), ah));	// 15827 mov     es:[di+8], ah ;~ 01A2:771B
cs=0x1a2;eip=0x00771f; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x24))));	// 15828 mov     eax, [si+24h] ;~ 01A2:771F
cs=0x1a2;eip=0x007723; 	T(MOV(bx, m2c::kloc_17734));	// 15829 mov     bx, offset loc_17734 ;~ 01A2:7723
cs=0x1a2;eip=0x007726; 	T(CMP(eax, ebp));	// 15830 cmp     eax, ebp ;~ 01A2:7726
cs=0x1a2;eip=0x007729; 	J(JL(loc_18db0));	// 15831 jl      loc_18DB0 ;~ 01A2:7729
cs=0x1a2;eip=0x00772d; 	T(CMP(eax, edx));	// 15832 cmp     eax, edx ;~ 01A2:772D
cs=0x1a2;eip=0x007730; 	J(JG(loc_18db8));	// 15833 jg      loc_18DB8 ;~ 01A2:7730
loc_17734:
	// 5373 
cs=0x1a2;eip=0x007734; 	T(XOR(ah, 0x80));	// 15836 xor     ah, 80h ;~ 01A2:7734
cs=0x1a2;eip=0x007737; 	X(MOV(*(raddr(es,di+9)), ah));	// 15837 mov     es:[di+9], ah ;~ 01A2:7737
cs=0x1a2;eip=0x00773b; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x28))));	// 15838 mov     eax, [si+28h] ;~ 01A2:773B
cs=0x1a2;eip=0x00773f; 	T(MOV(bx, m2c::kloc_17750));	// 15839 mov     bx, offset loc_17750 ;~ 01A2:773F
cs=0x1a2;eip=0x007742; 	T(CMP(eax, ebp));	// 15840 cmp     eax, ebp ;~ 01A2:7742
cs=0x1a2;eip=0x007745; 	J(JL(loc_18db0));	// 15841 jl      loc_18DB0 ;~ 01A2:7745
cs=0x1a2;eip=0x007749; 	T(CMP(eax, edx));	// 15842 cmp     eax, edx ;~ 01A2:7749
cs=0x1a2;eip=0x00774c; 	J(JG(loc_18db8));	// 15843 jg      loc_18DB8 ;~ 01A2:774C
loc_17750:
	// 5374 
cs=0x1a2;eip=0x007750; 	T(XOR(ah, 0x80));	// 15846 xor     ah, 80h ;~ 01A2:7750
cs=0x1a2;eip=0x007753; 	X(MOV(*(raddr(es,di+0x0A)), ah));	// 15847 mov     es:[di+0Ah], ah ;~ 01A2:7753
cs=0x1a2;eip=0x007757; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x2C))));	// 15848 mov     eax, [si+2Ch] ;~ 01A2:7757
cs=0x1a2;eip=0x00775b; 	T(MOV(bx, m2c::kloc_1776c));	// 15849 mov     bx, offset loc_1776C ;~ 01A2:775B
cs=0x1a2;eip=0x00775e; 	T(CMP(eax, ebp));	// 15850 cmp     eax, ebp ;~ 01A2:775E
cs=0x1a2;eip=0x007761; 	J(JL(loc_18db0));	// 15851 jl      loc_18DB0 ;~ 01A2:7761
cs=0x1a2;eip=0x007765; 	T(CMP(eax, edx));	// 15852 cmp     eax, edx ;~ 01A2:7765
cs=0x1a2;eip=0x007768; 	J(JG(loc_18db8));	// 15853 jg      loc_18DB8 ;~ 01A2:7768
loc_1776c:
	// 5375 
cs=0x1a2;eip=0x00776c; 	T(XOR(ah, 0x80));	// 15856 xor     ah, 80h ;~ 01A2:776C
cs=0x1a2;eip=0x00776f; 	X(MOV(*(raddr(es,di+0x0B)), ah));	// 15857 mov     es:[di+0Bh], ah ;~ 01A2:776F
cs=0x1a2;eip=0x007773; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x30))));	// 15858 mov     eax, [si+30h] ;~ 01A2:7773
cs=0x1a2;eip=0x007777; 	T(MOV(bx, m2c::kloc_17788));	// 15859 mov     bx, offset loc_17788 ;~ 01A2:7777
cs=0x1a2;eip=0x00777a; 	T(CMP(eax, ebp));	// 15860 cmp     eax, ebp ;~ 01A2:777A
cs=0x1a2;eip=0x00777d; 	J(JL(loc_18db0));	// 15861 jl      loc_18DB0 ;~ 01A2:777D
cs=0x1a2;eip=0x007781; 	T(CMP(eax, edx));	// 15862 cmp     eax, edx ;~ 01A2:7781
cs=0x1a2;eip=0x007784; 	J(JG(loc_18db8));	// 15863 jg      loc_18DB8 ;~ 01A2:7784
loc_17788:
	// 5376 
cs=0x1a2;eip=0x007788; 	T(XOR(ah, 0x80));	// 15866 xor     ah, 80h ;~ 01A2:7788
cs=0x1a2;eip=0x00778b; 	X(MOV(*(raddr(es,di+0x0C)), ah));	// 15867 mov     es:[di+0Ch], ah ;~ 01A2:778B
cs=0x1a2;eip=0x00778f; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x34))));	// 15868 mov     eax, [si+34h] ;~ 01A2:778F
cs=0x1a2;eip=0x007793; 	T(MOV(bx, m2c::kloc_177a4));	// 15869 mov     bx, offset loc_177A4 ;~ 01A2:7793
cs=0x1a2;eip=0x007796; 	T(CMP(eax, ebp));	// 15870 cmp     eax, ebp ;~ 01A2:7796
cs=0x1a2;eip=0x007799; 	J(JL(loc_18db0));	// 15871 jl      loc_18DB0 ;~ 01A2:7799
cs=0x1a2;eip=0x00779d; 	T(CMP(eax, edx));	// 15872 cmp     eax, edx ;~ 01A2:779D
cs=0x1a2;eip=0x0077a0; 	J(JG(loc_18db8));	// 15873 jg      loc_18DB8 ;~ 01A2:77A0
loc_177a4:
	// 5377 
cs=0x1a2;eip=0x0077a4; 	T(XOR(ah, 0x80));	// 15876 xor     ah, 80h ;~ 01A2:77A4
cs=0x1a2;eip=0x0077a7; 	X(MOV(*(raddr(es,di+0x0D)), ah));	// 15877 mov     es:[di+0Dh], ah ;~ 01A2:77A7
cs=0x1a2;eip=0x0077ab; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x38))));	// 15878 mov     eax, [si+38h] ;~ 01A2:77AB
cs=0x1a2;eip=0x0077af; 	T(MOV(bx, m2c::kloc_177c0));	// 15879 mov     bx, offset loc_177C0 ;~ 01A2:77AF
cs=0x1a2;eip=0x0077b2; 	T(CMP(eax, ebp));	// 15880 cmp     eax, ebp ;~ 01A2:77B2
cs=0x1a2;eip=0x0077b5; 	J(JL(loc_18db0));	// 15881 jl      loc_18DB0 ;~ 01A2:77B5
cs=0x1a2;eip=0x0077b9; 	T(CMP(eax, edx));	// 15882 cmp     eax, edx ;~ 01A2:77B9
cs=0x1a2;eip=0x0077bc; 	J(JG(loc_18db8));	// 15883 jg      loc_18DB8 ;~ 01A2:77BC
loc_177c0:
	// 5378 
cs=0x1a2;eip=0x0077c0; 	T(XOR(ah, 0x80));	// 15886 xor     ah, 80h ;~ 01A2:77C0
cs=0x1a2;eip=0x0077c3; 	X(MOV(*(raddr(es,di+0x0E)), ah));	// 15887 mov     es:[di+0Eh], ah ;~ 01A2:77C3
cs=0x1a2;eip=0x0077c7; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x3C))));	// 15888 mov     eax, [si+3Ch] ;~ 01A2:77C7
cs=0x1a2;eip=0x0077cb; 	T(MOV(bx, m2c::kloc_177dc));	// 15889 mov     bx, offset loc_177DC ;~ 01A2:77CB
cs=0x1a2;eip=0x0077ce; 	T(CMP(eax, ebp));	// 15890 cmp     eax, ebp ;~ 01A2:77CE
cs=0x1a2;eip=0x0077d1; 	J(JL(loc_18db0));	// 15891 jl      loc_18DB0 ;~ 01A2:77D1
cs=0x1a2;eip=0x0077d5; 	T(CMP(eax, edx));	// 15892 cmp     eax, edx ;~ 01A2:77D5
cs=0x1a2;eip=0x0077d8; 	J(JG(loc_18db8));	// 15893 jg      loc_18DB8 ;~ 01A2:77D8
loc_177dc:
	// 5379 
cs=0x1a2;eip=0x0077dc; 	T(XOR(ah, 0x80));	// 15896 xor     ah, 80h ;~ 01A2:77DC
cs=0x1a2;eip=0x0077df; 	X(MOV(*(raddr(es,di+0x0F)), ah));	// 15897 mov     es:[di+0Fh], ah ;~ 01A2:77DF
cs=0x1a2;eip=0x0077e3; 	T(ADD(si, 0x40));	// 15898 add     si, 40h ; '@' ;~ 01A2:77E3
cs=0x1a2;eip=0x0077e6; 	T(ADD(di, 0x10));	// 15899 add     di, 10h ;~ 01A2:77E6
cs=0x1a2;eip=0x0077e9; 	T(DEC(cx));	// 15900 dec     cx ;~ 01A2:77E9
cs=0x1a2;eip=0x0077ea; 	J(JNZ(loc_17625));	// 15901 jnz     loc_17625 ;~ 01A2:77EA
locret_177ee:
	// 5380 
cs=0x1a2;eip=0x0077ee; 	J(RETN(0));	// 15904 retn ;~ 01A2:77EE
loc_177ef:
	// 5381 
cs=0x1a2;eip=0x0077ef; 	T(MOV(di, word_24600));	// 15910 mov     di, word_24600 ;~ 01A2:77EF
cs=0x1a2;eip=0x0077f3; 	T(MOV(cx, word_245e4));	// 15911 mov     cx, word_245E4 ;~ 01A2:77F3
cs=0x1a2;eip=0x0077f7; 	T(MOV(si, offset(seg003,_chrin)));	// 15912 mov     si, offset _chrin ;~ 01A2:77F7
cs=0x1a2;eip=0x0077fa; 	T(MOV(es, *(dw*)(((db*)&_audio_buf_pointer)+2)));	// 15913 mov     es, word ptr _audio_buf_pointer+2 ;~ 01A2:77FA
cs=0x1a2;eip=0x0077fe; 	T(MOV(ax, 0x1000));	// 15914 mov     ax, 1000h ;~ 01A2:77FE
cs=0x1a2;eip=0x007801; 	T(SUB(ax, di));	// 15915 sub     ax, di ;~ 01A2:7801
cs=0x1a2;eip=0x007803; 	T(SHR(ax, 2));	// 15916 shr     ax, 2 ;~ 01A2:7803
cs=0x1a2;eip=0x007806; 	T(CMP(cx, ax));	// 15917 cmp     cx, ax ;~ 01A2:7806
cs=0x1a2;eip=0x007808; 	J(JBE(loc_17819));	// 15918 jbe     short loc_17819 ;~ 01A2:7808
cs=0x1a2;eip=0x00780a; 	T(MOV(bx, cx));	// 15919 mov     bx, cx ;~ 01A2:780A
cs=0x1a2;eip=0x00780c; 	T(SUB(bx, ax));	// 15920 sub     bx, ax ;~ 01A2:780C
cs=0x1a2;eip=0x00780e; 	T(MOV(cx, ax));	// 15921 mov     cx, ax ;~ 01A2:780E
cs=0x1a2;eip=0x007810; 	X(PUSH(bx));	// 15922 push    bx ;~ 01A2:7810
cs=0x1a2;eip=0x007811; 	J(CALL(sub_17824,0));	// 15923 call    sub_17824 ;~ 01A2:7811
cs=0x1a2;eip=0x007814; 	X(POP(cx));	// 15924 pop     cx ;~ 01A2:7814
cs=0x1a2;eip=0x007815; 	T(XOR(di, di));	// 15925 xor     di, di ;~ 01A2:7815
cs=0x1a2;eip=0x007817; 	J(JCXZ(loc_1781c));	// 15926 jcxz    short loc_1781C ;~ 01A2:7817
loc_17819:
	// 5382 
cs=0x1a2;eip=0x007819; 	J(CALL(sub_17824,0));	// 15929 call    sub_17824 ;~ 01A2:7819
loc_1781c:
	// 5383 
cs=0x1a2;eip=0x00781c; 	X(MOV(word_24600, di));	// 15932 mov     word_24600, di ;~ 01A2:781C
cs=0x1a2;eip=0x007820; 	J(CALL(_ems_restore_mapctx,0));	// 15933 call    _ems_restore_mapctx ;~ 01A2:7820
cs=0x1a2;eip=0x007823; 	J(RETN(0));	// 15934 retn ;~ 01A2:7823
seg000_7a72_proc:
	// 16177 
loc_17a72:
	// 5403 
cs=0x1a2;eip=0x007a72; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 16179 mov     eax, [si] ;~ 01A2:7A72
cs=0x1a2;eip=0x007a75; 	T(ADD(si, 4));	// 16180 add     si, 4 ;~ 01A2:7A75
cs=0x1a2;eip=0x007a78; 	T(MOV(bx, m2c::kloc_17a89));	// 16181 mov     bx, offset loc_17A89 ;~ 01A2:7A78
cs=0x1a2;eip=0x007a7b; 	T(CMP(eax, ebp));	// 16182 cmp     eax, ebp ;~ 01A2:7A7B
cs=0x1a2;eip=0x007a7e; 	J(JL(loc_18db0));	// 16183 jl      loc_18DB0 ;~ 01A2:7A7E
cs=0x1a2;eip=0x007a82; 	T(CMP(eax, edx));	// 16184 cmp     eax, edx ;~ 01A2:7A82
cs=0x1a2;eip=0x007a85; 	J(JG(loc_18db8));	// 16185 jg      loc_18DB8 ;~ 01A2:7A85
loc_17a89:
	// 5404 
cs=0x1a2;eip=0x007a89; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 16188 mov     es:[di], ax ;~ 01A2:7A89
cs=0x1a2;eip=0x007a8c; 	T(ADD(di, 2));	// 16189 add     di, 2 ;~ 01A2:7A8C
loc_17a8f:
	// 5405 
cs=0x1a2;eip=0x007a8f; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 16193 mov     eax, [si] ;~ 01A2:7A8F
cs=0x1a2;eip=0x007a92; 	T(ADD(si, 4));	// 16194 add     si, 4 ;~ 01A2:7A92
cs=0x1a2;eip=0x007a95; 	T(MOV(bx, m2c::kloc_17aa6));	// 16195 mov     bx, offset loc_17AA6 ;~ 01A2:7A95
cs=0x1a2;eip=0x007a98; 	T(CMP(eax, ebp));	// 16196 cmp     eax, ebp ;~ 01A2:7A98
cs=0x1a2;eip=0x007a9b; 	J(JL(loc_18db0));	// 16197 jl      loc_18DB0 ;~ 01A2:7A9B
cs=0x1a2;eip=0x007a9f; 	T(CMP(eax, edx));	// 16198 cmp     eax, edx ;~ 01A2:7A9F
cs=0x1a2;eip=0x007aa2; 	J(JG(loc_18db8));	// 16199 jg      loc_18DB8 ;~ 01A2:7AA2
loc_17aa6:
	// 5406 
cs=0x1a2;eip=0x007aa6; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 16202 mov     es:[di], ax ;~ 01A2:7AA6
cs=0x1a2;eip=0x007aa9; 	T(ADD(di, 2));	// 16203 add     di, 2 ;~ 01A2:7AA9
loc_17aac:
	// 5407 
cs=0x1a2;eip=0x007aac; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 16207 mov     eax, [si] ;~ 01A2:7AAC
cs=0x1a2;eip=0x007aaf; 	T(ADD(si, 4));	// 16208 add     si, 4 ;~ 01A2:7AAF
cs=0x1a2;eip=0x007ab2; 	T(MOV(bx, m2c::kloc_17ac3));	// 16209 mov     bx, offset loc_17AC3 ;~ 01A2:7AB2
cs=0x1a2;eip=0x007ab5; 	T(CMP(eax, ebp));	// 16210 cmp     eax, ebp ;~ 01A2:7AB5
cs=0x1a2;eip=0x007ab8; 	J(JL(loc_18db0));	// 16211 jl      loc_18DB0 ;~ 01A2:7AB8
cs=0x1a2;eip=0x007abc; 	T(CMP(eax, edx));	// 16212 cmp     eax, edx ;~ 01A2:7ABC
cs=0x1a2;eip=0x007abf; 	J(JG(loc_18db8));	// 16213 jg      loc_18DB8 ;~ 01A2:7ABF
loc_17ac3:
	// 5408 
cs=0x1a2;eip=0x007ac3; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 16216 mov     es:[di], ax ;~ 01A2:7AC3
cs=0x1a2;eip=0x007ac6; 	T(ADD(di, 2));	// 16217 add     di, 2 ;~ 01A2:7AC6
loc_17ac9:
	// 5409 
cs=0x1a2;eip=0x007ac9; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 16221 mov     eax, [si] ;~ 01A2:7AC9
cs=0x1a2;eip=0x007acc; 	T(ADD(si, 4));	// 16222 add     si, 4 ;~ 01A2:7ACC
cs=0x1a2;eip=0x007acf; 	T(MOV(bx, m2c::kloc_17ae0));	// 16223 mov     bx, offset loc_17AE0 ;~ 01A2:7ACF
cs=0x1a2;eip=0x007ad2; 	T(CMP(eax, ebp));	// 16224 cmp     eax, ebp ;~ 01A2:7AD2
cs=0x1a2;eip=0x007ad5; 	J(JL(loc_18db0));	// 16225 jl      loc_18DB0 ;~ 01A2:7AD5
cs=0x1a2;eip=0x007ad9; 	T(CMP(eax, edx));	// 16226 cmp     eax, edx ;~ 01A2:7AD9
cs=0x1a2;eip=0x007adc; 	J(JG(loc_18db8));	// 16227 jg      loc_18DB8 ;~ 01A2:7ADC
loc_17ae0:
	// 5410 
cs=0x1a2;eip=0x007ae0; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 16230 mov     es:[di], ax ;~ 01A2:7AE0
cs=0x1a2;eip=0x007ae3; 	T(ADD(di, 2));	// 16231 add     di, 2 ;~ 01A2:7AE3
loc_17ae6:
	// 5411 
cs=0x1a2;eip=0x007ae6; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 16235 mov     eax, [si] ;~ 01A2:7AE6
cs=0x1a2;eip=0x007ae9; 	T(ADD(si, 4));	// 16236 add     si, 4 ;~ 01A2:7AE9
cs=0x1a2;eip=0x007aec; 	T(MOV(bx, m2c::kloc_17afd));	// 16237 mov     bx, offset loc_17AFD ;~ 01A2:7AEC
cs=0x1a2;eip=0x007aef; 	T(CMP(eax, ebp));	// 16238 cmp     eax, ebp ;~ 01A2:7AEF
cs=0x1a2;eip=0x007af2; 	J(JL(loc_18db0));	// 16239 jl      loc_18DB0 ;~ 01A2:7AF2
cs=0x1a2;eip=0x007af6; 	T(CMP(eax, edx));	// 16240 cmp     eax, edx ;~ 01A2:7AF6
cs=0x1a2;eip=0x007af9; 	J(JG(loc_18db8));	// 16241 jg      loc_18DB8 ;~ 01A2:7AF9
loc_17afd:
	// 5412 
cs=0x1a2;eip=0x007afd; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 16244 mov     es:[di], ax ;~ 01A2:7AFD
cs=0x1a2;eip=0x007b00; 	T(ADD(di, 2));	// 16245 add     di, 2 ;~ 01A2:7B00
loc_17b03:
	// 5413 
cs=0x1a2;eip=0x007b03; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 16249 mov     eax, [si] ;~ 01A2:7B03
cs=0x1a2;eip=0x007b06; 	T(ADD(si, 4));	// 16250 add     si, 4 ;~ 01A2:7B06
cs=0x1a2;eip=0x007b09; 	T(MOV(bx, m2c::kloc_17b1a));	// 16251 mov     bx, offset loc_17B1A ;~ 01A2:7B09
cs=0x1a2;eip=0x007b0c; 	T(CMP(eax, ebp));	// 16252 cmp     eax, ebp ;~ 01A2:7B0C
cs=0x1a2;eip=0x007b0f; 	J(JL(loc_18db0));	// 16253 jl      loc_18DB0 ;~ 01A2:7B0F
cs=0x1a2;eip=0x007b13; 	T(CMP(eax, edx));	// 16254 cmp     eax, edx ;~ 01A2:7B13
cs=0x1a2;eip=0x007b16; 	J(JG(loc_18db8));	// 16255 jg      loc_18DB8 ;~ 01A2:7B16
loc_17b1a:
	// 5414 
cs=0x1a2;eip=0x007b1a; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 16258 mov     es:[di], ax ;~ 01A2:7B1A
cs=0x1a2;eip=0x007b1d; 	T(ADD(di, 2));	// 16259 add     di, 2 ;~ 01A2:7B1D
loc_17b20:
	// 5415 
cs=0x1a2;eip=0x007b20; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 16263 mov     eax, [si] ;~ 01A2:7B20
cs=0x1a2;eip=0x007b23; 	T(ADD(si, 4));	// 16264 add     si, 4 ;~ 01A2:7B23
cs=0x1a2;eip=0x007b26; 	T(MOV(bx, m2c::kloc_17b37));	// 16265 mov     bx, offset loc_17B37 ;~ 01A2:7B26
cs=0x1a2;eip=0x007b29; 	T(CMP(eax, ebp));	// 16266 cmp     eax, ebp ;~ 01A2:7B29
cs=0x1a2;eip=0x007b2c; 	J(JL(loc_18db0));	// 16267 jl      loc_18DB0 ;~ 01A2:7B2C
cs=0x1a2;eip=0x007b30; 	T(CMP(eax, edx));	// 16268 cmp     eax, edx ;~ 01A2:7B30
cs=0x1a2;eip=0x007b33; 	J(JG(loc_18db8));	// 16269 jg      loc_18DB8 ;~ 01A2:7B33
loc_17b37:
	// 5416 
cs=0x1a2;eip=0x007b37; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 16272 mov     es:[di], ax ;~ 01A2:7B37
cs=0x1a2;eip=0x007b3a; 	T(ADD(di, 2));	// 16273 add     di, 2 ;~ 01A2:7B3A
loc_17b3d:
	// 5417 
cs=0x1a2;eip=0x007b3d; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 16277 mov     eax, [si] ;~ 01A2:7B3D
cs=0x1a2;eip=0x007b40; 	T(ADD(si, 4));	// 16278 add     si, 4 ;~ 01A2:7B40
cs=0x1a2;eip=0x007b43; 	T(MOV(bx, m2c::kloc_17b54));	// 16279 mov     bx, offset loc_17B54 ;~ 01A2:7B43
cs=0x1a2;eip=0x007b46; 	T(CMP(eax, ebp));	// 16280 cmp     eax, ebp ;~ 01A2:7B46
cs=0x1a2;eip=0x007b49; 	J(JL(loc_18db0));	// 16281 jl      loc_18DB0 ;~ 01A2:7B49
cs=0x1a2;eip=0x007b4d; 	T(CMP(eax, edx));	// 16282 cmp     eax, edx ;~ 01A2:7B4D
cs=0x1a2;eip=0x007b50; 	J(JG(loc_18db8));	// 16283 jg      loc_18DB8 ;~ 01A2:7B50
loc_17b54:
	// 5418 
cs=0x1a2;eip=0x007b54; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 16286 mov     es:[di], ax ;~ 01A2:7B54
cs=0x1a2;eip=0x007b57; 	T(ADD(di, 2));	// 16287 add     di, 2 ;~ 01A2:7B57
loc_17b5a:
	// 5419 
cs=0x1a2;eip=0x007b5a; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 16291 mov     eax, [si] ;~ 01A2:7B5A
cs=0x1a2;eip=0x007b5d; 	T(ADD(si, 4));	// 16292 add     si, 4 ;~ 01A2:7B5D
cs=0x1a2;eip=0x007b60; 	T(MOV(bx, m2c::kloc_17b71));	// 16293 mov     bx, offset loc_17B71 ;~ 01A2:7B60
cs=0x1a2;eip=0x007b63; 	T(CMP(eax, ebp));	// 16294 cmp     eax, ebp ;~ 01A2:7B63
cs=0x1a2;eip=0x007b66; 	J(JL(loc_18db0));	// 16295 jl      loc_18DB0 ;~ 01A2:7B66
cs=0x1a2;eip=0x007b6a; 	T(CMP(eax, edx));	// 16296 cmp     eax, edx ;~ 01A2:7B6A
cs=0x1a2;eip=0x007b6d; 	J(JG(loc_18db8));	// 16297 jg      loc_18DB8 ;~ 01A2:7B6D
loc_17b71:
	// 5420 
cs=0x1a2;eip=0x007b71; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 16300 mov     es:[di], ax ;~ 01A2:7B71
cs=0x1a2;eip=0x007b74; 	T(ADD(di, 2));	// 16301 add     di, 2 ;~ 01A2:7B74
loc_17b77:
	// 5421 
cs=0x1a2;eip=0x007b77; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 16305 mov     eax, [si] ;~ 01A2:7B77
cs=0x1a2;eip=0x007b7a; 	T(ADD(si, 4));	// 16306 add     si, 4 ;~ 01A2:7B7A
cs=0x1a2;eip=0x007b7d; 	T(MOV(bx, m2c::kloc_17b8e));	// 16307 mov     bx, offset loc_17B8E ;~ 01A2:7B7D
cs=0x1a2;eip=0x007b80; 	T(CMP(eax, ebp));	// 16308 cmp     eax, ebp ;~ 01A2:7B80
cs=0x1a2;eip=0x007b83; 	J(JL(loc_18db0));	// 16309 jl      loc_18DB0 ;~ 01A2:7B83
cs=0x1a2;eip=0x007b87; 	T(CMP(eax, edx));	// 16310 cmp     eax, edx ;~ 01A2:7B87
cs=0x1a2;eip=0x007b8a; 	J(JG(loc_18db8));	// 16311 jg      loc_18DB8 ;~ 01A2:7B8A
loc_17b8e:
	// 5422 
cs=0x1a2;eip=0x007b8e; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 16314 mov     es:[di], ax ;~ 01A2:7B8E
cs=0x1a2;eip=0x007b91; 	T(ADD(di, 2));	// 16315 add     di, 2 ;~ 01A2:7B91
loc_17b94:
	// 5423 
cs=0x1a2;eip=0x007b94; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 16319 mov     eax, [si] ;~ 01A2:7B94
cs=0x1a2;eip=0x007b97; 	T(ADD(si, 4));	// 16320 add     si, 4 ;~ 01A2:7B97
cs=0x1a2;eip=0x007b9a; 	T(MOV(bx, m2c::kloc_17bab));	// 16321 mov     bx, offset loc_17BAB ;~ 01A2:7B9A
cs=0x1a2;eip=0x007b9d; 	T(CMP(eax, ebp));	// 16322 cmp     eax, ebp ;~ 01A2:7B9D
cs=0x1a2;eip=0x007ba0; 	J(JL(loc_18db0));	// 16323 jl      loc_18DB0 ;~ 01A2:7BA0
cs=0x1a2;eip=0x007ba4; 	T(CMP(eax, edx));	// 16324 cmp     eax, edx ;~ 01A2:7BA4
cs=0x1a2;eip=0x007ba7; 	J(JG(loc_18db8));	// 16325 jg      loc_18DB8 ;~ 01A2:7BA7
loc_17bab:
	// 5424 
cs=0x1a2;eip=0x007bab; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 16328 mov     es:[di], ax ;~ 01A2:7BAB
cs=0x1a2;eip=0x007bae; 	T(ADD(di, 2));	// 16329 add     di, 2 ;~ 01A2:7BAE
loc_17bb1:
	// 5425 
cs=0x1a2;eip=0x007bb1; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 16333 mov     eax, [si] ;~ 01A2:7BB1
cs=0x1a2;eip=0x007bb4; 	T(ADD(si, 4));	// 16334 add     si, 4 ;~ 01A2:7BB4
cs=0x1a2;eip=0x007bb7; 	T(MOV(bx, m2c::kloc_17bc8));	// 16335 mov     bx, offset loc_17BC8 ;~ 01A2:7BB7
cs=0x1a2;eip=0x007bba; 	T(CMP(eax, ebp));	// 16336 cmp     eax, ebp ;~ 01A2:7BBA
cs=0x1a2;eip=0x007bbd; 	J(JL(loc_18db0));	// 16337 jl      loc_18DB0 ;~ 01A2:7BBD
cs=0x1a2;eip=0x007bc1; 	T(CMP(eax, edx));	// 16338 cmp     eax, edx ;~ 01A2:7BC1
cs=0x1a2;eip=0x007bc4; 	J(JG(loc_18db8));	// 16339 jg      loc_18DB8 ;~ 01A2:7BC4
loc_17bc8:
	// 5426 
cs=0x1a2;eip=0x007bc8; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 16342 mov     es:[di], ax ;~ 01A2:7BC8
cs=0x1a2;eip=0x007bcb; 	T(ADD(di, 2));	// 16343 add     di, 2 ;~ 01A2:7BCB
loc_17bce:
	// 5427 
cs=0x1a2;eip=0x007bce; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 16347 mov     eax, [si] ;~ 01A2:7BCE
cs=0x1a2;eip=0x007bd1; 	T(ADD(si, 4));	// 16348 add     si, 4 ;~ 01A2:7BD1
cs=0x1a2;eip=0x007bd4; 	T(MOV(bx, m2c::kloc_17be5));	// 16349 mov     bx, offset loc_17BE5 ;~ 01A2:7BD4
cs=0x1a2;eip=0x007bd7; 	T(CMP(eax, ebp));	// 16350 cmp     eax, ebp ;~ 01A2:7BD7
cs=0x1a2;eip=0x007bda; 	J(JL(loc_18db0));	// 16351 jl      loc_18DB0 ;~ 01A2:7BDA
cs=0x1a2;eip=0x007bde; 	T(CMP(eax, edx));	// 16352 cmp     eax, edx ;~ 01A2:7BDE
cs=0x1a2;eip=0x007be1; 	J(JG(loc_18db8));	// 16353 jg      loc_18DB8 ;~ 01A2:7BE1
loc_17be5:
	// 5428 
cs=0x1a2;eip=0x007be5; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 16356 mov     es:[di], ax ;~ 01A2:7BE5
cs=0x1a2;eip=0x007be8; 	T(ADD(di, 2));	// 16357 add     di, 2 ;~ 01A2:7BE8
loc_17beb:
	// 5429 
cs=0x1a2;eip=0x007beb; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 16361 mov     eax, [si] ;~ 01A2:7BEB
cs=0x1a2;eip=0x007bee; 	T(ADD(si, 4));	// 16362 add     si, 4 ;~ 01A2:7BEE
cs=0x1a2;eip=0x007bf1; 	T(MOV(bx, m2c::kloc_17c02));	// 16363 mov     bx, offset loc_17C02 ;~ 01A2:7BF1
cs=0x1a2;eip=0x007bf4; 	T(CMP(eax, ebp));	// 16364 cmp     eax, ebp ;~ 01A2:7BF4
cs=0x1a2;eip=0x007bf7; 	J(JL(loc_18db0));	// 16365 jl      loc_18DB0 ;~ 01A2:7BF7
cs=0x1a2;eip=0x007bfb; 	T(CMP(eax, edx));	// 16366 cmp     eax, edx ;~ 01A2:7BFB
cs=0x1a2;eip=0x007bfe; 	J(JG(loc_18db8));	// 16367 jg      loc_18DB8 ;~ 01A2:7BFE
loc_17c02:
	// 5430 
cs=0x1a2;eip=0x007c02; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 16370 mov     es:[di], ax ;~ 01A2:7C02
cs=0x1a2;eip=0x007c05; 	T(ADD(di, 2));	// 16371 add     di, 2 ;~ 01A2:7C05
loc_17c08:
	// 5431 
cs=0x1a2;eip=0x007c08; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 16375 mov     eax, [si] ;~ 01A2:7C08
cs=0x1a2;eip=0x007c0b; 	T(ADD(si, 4));	// 16376 add     si, 4 ;~ 01A2:7C0B
cs=0x1a2;eip=0x007c0e; 	T(MOV(bx, m2c::kloc_17c1f));	// 16377 mov     bx, offset loc_17C1F ;~ 01A2:7C0E
cs=0x1a2;eip=0x007c11; 	T(CMP(eax, ebp));	// 16378 cmp     eax, ebp ;~ 01A2:7C11
cs=0x1a2;eip=0x007c14; 	J(JL(loc_18db0));	// 16379 jl      loc_18DB0 ;~ 01A2:7C14
cs=0x1a2;eip=0x007c18; 	T(CMP(eax, edx));	// 16380 cmp     eax, edx ;~ 01A2:7C18
cs=0x1a2;eip=0x007c1b; 	J(JG(loc_18db8));	// 16381 jg      loc_18DB8 ;~ 01A2:7C1B
loc_17c1f:
	// 5432 
cs=0x1a2;eip=0x007c1f; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 16384 mov     es:[di], ax ;~ 01A2:7C1F
cs=0x1a2;eip=0x007c22; 	T(ADD(di, 2));	// 16385 add     di, 2 ;~ 01A2:7C22
loc_17c25:
	// 5433 
cs=0x1a2;eip=0x007c25; 	T(SHR(cx, 4));	// 16389 shr     cx, 4 ;~ 01A2:7C25
cs=0x1a2;eip=0x007c28; 	J(JZ(_nullsub_3));	// 16390 jz      _nullsub_3 ;~ 01A2:7C28
loc_17c2c:
	// 5434 
cs=0x1a2;eip=0x007c2c; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 16393 mov     eax, [si] ;~ 01A2:7C2C
cs=0x1a2;eip=0x007c2f; 	T(MOV(bx, m2c::kloc_17c40));	// 16394 mov     bx, offset loc_17C40 ;~ 01A2:7C2F
cs=0x1a2;eip=0x007c32; 	T(CMP(eax, ebp));	// 16395 cmp     eax, ebp ;~ 01A2:7C32
cs=0x1a2;eip=0x007c35; 	J(JL(loc_18db0));	// 16396 jl      loc_18DB0 ;~ 01A2:7C35
cs=0x1a2;eip=0x007c39; 	T(CMP(eax, edx));	// 16397 cmp     eax, edx ;~ 01A2:7C39
cs=0x1a2;eip=0x007c3c; 	J(JG(loc_18db8));	// 16398 jg      loc_18DB8 ;~ 01A2:7C3C
loc_17c40:
	// 5435 
cs=0x1a2;eip=0x007c40; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 16401 mov     es:[di], ax ;~ 01A2:7C40
cs=0x1a2;eip=0x007c43; 	T(MOV(eax, *(dd*)(raddr(ds,si+4))));	// 16402 mov     eax, [si+4] ;~ 01A2:7C43
cs=0x1a2;eip=0x007c47; 	T(MOV(bx, m2c::kloc_17c58));	// 16403 mov     bx, offset loc_17C58 ;~ 01A2:7C47
cs=0x1a2;eip=0x007c4a; 	T(CMP(eax, ebp));	// 16404 cmp     eax, ebp ;~ 01A2:7C4A
cs=0x1a2;eip=0x007c4d; 	J(JL(loc_18db0));	// 16405 jl      loc_18DB0 ;~ 01A2:7C4D
cs=0x1a2;eip=0x007c51; 	T(CMP(eax, edx));	// 16406 cmp     eax, edx ;~ 01A2:7C51
cs=0x1a2;eip=0x007c54; 	J(JG(loc_18db8));	// 16407 jg      loc_18DB8 ;~ 01A2:7C54
loc_17c58:
	// 5436 
cs=0x1a2;eip=0x007c58; 	X(MOV(*(dw*)(raddr(es,di+2)), ax));	// 16410 mov     es:[di+2], ax ;~ 01A2:7C58
cs=0x1a2;eip=0x007c5c; 	T(MOV(eax, *(dd*)(raddr(ds,si+8))));	// 16411 mov     eax, [si+8] ;~ 01A2:7C5C
cs=0x1a2;eip=0x007c60; 	T(MOV(bx, m2c::kloc_17c71));	// 16412 mov     bx, offset loc_17C71 ;~ 01A2:7C60
cs=0x1a2;eip=0x007c63; 	T(CMP(eax, ebp));	// 16413 cmp     eax, ebp ;~ 01A2:7C63
cs=0x1a2;eip=0x007c66; 	J(JL(loc_18db0));	// 16414 jl      loc_18DB0 ;~ 01A2:7C66
cs=0x1a2;eip=0x007c6a; 	T(CMP(eax, edx));	// 16415 cmp     eax, edx ;~ 01A2:7C6A
cs=0x1a2;eip=0x007c6d; 	J(JG(loc_18db8));	// 16416 jg      loc_18DB8 ;~ 01A2:7C6D
loc_17c71:
	// 5437 
cs=0x1a2;eip=0x007c71; 	X(MOV(*(dw*)(raddr(es,di+4)), ax));	// 16419 mov     es:[di+4], ax ;~ 01A2:7C71
cs=0x1a2;eip=0x007c75; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x0C))));	// 16420 mov     eax, [si+0Ch] ;~ 01A2:7C75
cs=0x1a2;eip=0x007c79; 	T(MOV(bx, m2c::kloc_17c8a));	// 16421 mov     bx, offset loc_17C8A ;~ 01A2:7C79
cs=0x1a2;eip=0x007c7c; 	T(CMP(eax, ebp));	// 16422 cmp     eax, ebp ;~ 01A2:7C7C
cs=0x1a2;eip=0x007c7f; 	J(JL(loc_18db0));	// 16423 jl      loc_18DB0 ;~ 01A2:7C7F
cs=0x1a2;eip=0x007c83; 	T(CMP(eax, edx));	// 16424 cmp     eax, edx ;~ 01A2:7C83
cs=0x1a2;eip=0x007c86; 	J(JG(loc_18db8));	// 16425 jg      loc_18DB8 ;~ 01A2:7C86
loc_17c8a:
	// 5438 
cs=0x1a2;eip=0x007c8a; 	X(MOV(*(dw*)(raddr(es,di+6)), ax));	// 16428 mov     es:[di+6], ax ;~ 01A2:7C8A
cs=0x1a2;eip=0x007c8e; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x10))));	// 16429 mov     eax, [si+10h] ;~ 01A2:7C8E
cs=0x1a2;eip=0x007c92; 	T(MOV(bx, m2c::kloc_17ca3));	// 16430 mov     bx, offset loc_17CA3 ;~ 01A2:7C92
cs=0x1a2;eip=0x007c95; 	T(CMP(eax, ebp));	// 16431 cmp     eax, ebp ;~ 01A2:7C95
cs=0x1a2;eip=0x007c98; 	J(JL(loc_18db0));	// 16432 jl      loc_18DB0 ;~ 01A2:7C98
cs=0x1a2;eip=0x007c9c; 	T(CMP(eax, edx));	// 16433 cmp     eax, edx ;~ 01A2:7C9C
cs=0x1a2;eip=0x007c9f; 	J(JG(loc_18db8));	// 16434 jg      loc_18DB8 ;~ 01A2:7C9F
loc_17ca3:
	// 5439 
cs=0x1a2;eip=0x007ca3; 	X(MOV(*(dw*)(raddr(es,di+8)), ax));	// 16437 mov     es:[di+8], ax ;~ 01A2:7CA3
cs=0x1a2;eip=0x007ca7; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x14))));	// 16438 mov     eax, [si+14h] ;~ 01A2:7CA7
cs=0x1a2;eip=0x007cab; 	T(MOV(bx, m2c::kloc_17cbc));	// 16439 mov     bx, offset loc_17CBC ;~ 01A2:7CAB
cs=0x1a2;eip=0x007cae; 	T(CMP(eax, ebp));	// 16440 cmp     eax, ebp ;~ 01A2:7CAE
cs=0x1a2;eip=0x007cb1; 	J(JL(loc_18db0));	// 16441 jl      loc_18DB0 ;~ 01A2:7CB1
cs=0x1a2;eip=0x007cb5; 	T(CMP(eax, edx));	// 16442 cmp     eax, edx ;~ 01A2:7CB5
cs=0x1a2;eip=0x007cb8; 	J(JG(loc_18db8));	// 16443 jg      loc_18DB8 ;~ 01A2:7CB8
loc_17cbc:
	// 5440 
cs=0x1a2;eip=0x007cbc; 	X(MOV(*(dw*)(raddr(es,di+0x0A)), ax));	// 16446 mov     es:[di+0Ah], ax ;~ 01A2:7CBC
cs=0x1a2;eip=0x007cc0; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x18))));	// 16447 mov     eax, [si+18h] ;~ 01A2:7CC0
cs=0x1a2;eip=0x007cc4; 	T(MOV(bx, m2c::kloc_17cd5));	// 16448 mov     bx, offset loc_17CD5 ;~ 01A2:7CC4
cs=0x1a2;eip=0x007cc7; 	T(CMP(eax, ebp));	// 16449 cmp     eax, ebp ;~ 01A2:7CC7
cs=0x1a2;eip=0x007cca; 	J(JL(loc_18db0));	// 16450 jl      loc_18DB0 ;~ 01A2:7CCA
cs=0x1a2;eip=0x007cce; 	T(CMP(eax, edx));	// 16451 cmp     eax, edx ;~ 01A2:7CCE
cs=0x1a2;eip=0x007cd1; 	J(JG(loc_18db8));	// 16452 jg      loc_18DB8 ;~ 01A2:7CD1
loc_17cd5:
	// 5441 
cs=0x1a2;eip=0x007cd5; 	X(MOV(*(dw*)(raddr(es,di+0x0C)), ax));	// 16455 mov     es:[di+0Ch], ax ;~ 01A2:7CD5
cs=0x1a2;eip=0x007cd9; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x1C))));	// 16456 mov     eax, [si+1Ch] ;~ 01A2:7CD9
cs=0x1a2;eip=0x007cdd; 	T(MOV(bx, m2c::kloc_17cee));	// 16457 mov     bx, offset loc_17CEE ;~ 01A2:7CDD
cs=0x1a2;eip=0x007ce0; 	T(CMP(eax, ebp));	// 16458 cmp     eax, ebp ;~ 01A2:7CE0
cs=0x1a2;eip=0x007ce3; 	J(JL(loc_18db0));	// 16459 jl      loc_18DB0 ;~ 01A2:7CE3
cs=0x1a2;eip=0x007ce7; 	T(CMP(eax, edx));	// 16460 cmp     eax, edx ;~ 01A2:7CE7
cs=0x1a2;eip=0x007cea; 	J(JG(loc_18db8));	// 16461 jg      loc_18DB8 ;~ 01A2:7CEA
loc_17cee:
	// 5442 
cs=0x1a2;eip=0x007cee; 	X(MOV(*(dw*)(raddr(es,di+0x0E)), ax));	// 16464 mov     es:[di+0Eh], ax ;~ 01A2:7CEE
cs=0x1a2;eip=0x007cf2; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x20))));	// 16465 mov     eax, [si+20h] ;~ 01A2:7CF2
cs=0x1a2;eip=0x007cf6; 	T(MOV(bx, m2c::kloc_17d07));	// 16466 mov     bx, offset loc_17D07 ;~ 01A2:7CF6
cs=0x1a2;eip=0x007cf9; 	T(CMP(eax, ebp));	// 16467 cmp     eax, ebp ;~ 01A2:7CF9
cs=0x1a2;eip=0x007cfc; 	J(JL(loc_18db0));	// 16468 jl      loc_18DB0 ;~ 01A2:7CFC
cs=0x1a2;eip=0x007d00; 	T(CMP(eax, edx));	// 16469 cmp     eax, edx ;~ 01A2:7D00
cs=0x1a2;eip=0x007d03; 	J(JG(loc_18db8));	// 16470 jg      loc_18DB8 ;~ 01A2:7D03
loc_17d07:
	// 5443 
cs=0x1a2;eip=0x007d07; 	X(MOV(*(dw*)(raddr(es,di+0x10)), ax));	// 16473 mov     es:[di+10h], ax ;~ 01A2:7D07
cs=0x1a2;eip=0x007d0b; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x24))));	// 16474 mov     eax, [si+24h] ;~ 01A2:7D0B
cs=0x1a2;eip=0x007d0f; 	T(MOV(bx, m2c::kloc_17d20));	// 16475 mov     bx, offset loc_17D20 ;~ 01A2:7D0F
cs=0x1a2;eip=0x007d12; 	T(CMP(eax, ebp));	// 16476 cmp     eax, ebp ;~ 01A2:7D12
cs=0x1a2;eip=0x007d15; 	J(JL(loc_18db0));	// 16477 jl      loc_18DB0 ;~ 01A2:7D15
cs=0x1a2;eip=0x007d19; 	T(CMP(eax, edx));	// 16478 cmp     eax, edx ;~ 01A2:7D19
cs=0x1a2;eip=0x007d1c; 	J(JG(loc_18db8));	// 16479 jg      loc_18DB8 ;~ 01A2:7D1C
loc_17d20:
	// 5444 
cs=0x1a2;eip=0x007d20; 	X(MOV(*(dw*)(raddr(es,di+0x12)), ax));	// 16482 mov     es:[di+12h], ax ;~ 01A2:7D20
cs=0x1a2;eip=0x007d24; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x28))));	// 16483 mov     eax, [si+28h] ;~ 01A2:7D24
cs=0x1a2;eip=0x007d28; 	T(MOV(bx, m2c::kloc_17d39));	// 16484 mov     bx, offset loc_17D39 ;~ 01A2:7D28
cs=0x1a2;eip=0x007d2b; 	T(CMP(eax, ebp));	// 16485 cmp     eax, ebp ;~ 01A2:7D2B
cs=0x1a2;eip=0x007d2e; 	J(JL(loc_18db0));	// 16486 jl      loc_18DB0 ;~ 01A2:7D2E
cs=0x1a2;eip=0x007d32; 	T(CMP(eax, edx));	// 16487 cmp     eax, edx ;~ 01A2:7D32
cs=0x1a2;eip=0x007d35; 	J(JG(loc_18db8));	// 16488 jg      loc_18DB8 ;~ 01A2:7D35
loc_17d39:
	// 5445 
cs=0x1a2;eip=0x007d39; 	X(MOV(*(dw*)(raddr(es,di+0x14)), ax));	// 16491 mov     es:[di+14h], ax ;~ 01A2:7D39
cs=0x1a2;eip=0x007d3d; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x2C))));	// 16492 mov     eax, [si+2Ch] ;~ 01A2:7D3D
cs=0x1a2;eip=0x007d41; 	T(MOV(bx, m2c::kloc_17d52));	// 16493 mov     bx, offset loc_17D52 ;~ 01A2:7D41
cs=0x1a2;eip=0x007d44; 	T(CMP(eax, ebp));	// 16494 cmp     eax, ebp ;~ 01A2:7D44
cs=0x1a2;eip=0x007d47; 	J(JL(loc_18db0));	// 16495 jl      loc_18DB0 ;~ 01A2:7D47
cs=0x1a2;eip=0x007d4b; 	T(CMP(eax, edx));	// 16496 cmp     eax, edx ;~ 01A2:7D4B
cs=0x1a2;eip=0x007d4e; 	J(JG(loc_18db8));	// 16497 jg      loc_18DB8 ;~ 01A2:7D4E
loc_17d52:
	// 5446 
cs=0x1a2;eip=0x007d52; 	X(MOV(*(dw*)(raddr(es,di+0x16)), ax));	// 16500 mov     es:[di+16h], ax ;~ 01A2:7D52
cs=0x1a2;eip=0x007d56; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x30))));	// 16501 mov     eax, [si+30h] ;~ 01A2:7D56
cs=0x1a2;eip=0x007d5a; 	T(MOV(bx, m2c::kloc_17d6b));	// 16502 mov     bx, offset loc_17D6B ;~ 01A2:7D5A
cs=0x1a2;eip=0x007d5d; 	T(CMP(eax, ebp));	// 16503 cmp     eax, ebp ;~ 01A2:7D5D
cs=0x1a2;eip=0x007d60; 	J(JL(loc_18db0));	// 16504 jl      loc_18DB0 ;~ 01A2:7D60
cs=0x1a2;eip=0x007d64; 	T(CMP(eax, edx));	// 16505 cmp     eax, edx ;~ 01A2:7D64
cs=0x1a2;eip=0x007d67; 	J(JG(loc_18db8));	// 16506 jg      loc_18DB8 ;~ 01A2:7D67
loc_17d6b:
	// 5447 
cs=0x1a2;eip=0x007d6b; 	X(MOV(*(dw*)(raddr(es,di+0x18)), ax));	// 16509 mov     es:[di+18h], ax ;~ 01A2:7D6B
cs=0x1a2;eip=0x007d6f; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x34))));	// 16510 mov     eax, [si+34h] ;~ 01A2:7D6F
cs=0x1a2;eip=0x007d73; 	T(MOV(bx, m2c::kloc_17d84));	// 16511 mov     bx, offset loc_17D84 ;~ 01A2:7D73
cs=0x1a2;eip=0x007d76; 	T(CMP(eax, ebp));	// 16512 cmp     eax, ebp ;~ 01A2:7D76
cs=0x1a2;eip=0x007d79; 	J(JL(loc_18db0));	// 16513 jl      loc_18DB0 ;~ 01A2:7D79
cs=0x1a2;eip=0x007d7d; 	T(CMP(eax, edx));	// 16514 cmp     eax, edx ;~ 01A2:7D7D
cs=0x1a2;eip=0x007d80; 	J(JG(loc_18db8));	// 16515 jg      loc_18DB8 ;~ 01A2:7D80
loc_17d84:
	// 5448 
cs=0x1a2;eip=0x007d84; 	X(MOV(*(dw*)(raddr(es,di+0x1A)), ax));	// 16518 mov     es:[di+1Ah], ax ;~ 01A2:7D84
cs=0x1a2;eip=0x007d88; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x38))));	// 16519 mov     eax, [si+38h] ;~ 01A2:7D88
cs=0x1a2;eip=0x007d8c; 	T(MOV(bx, m2c::kloc_17d9d));	// 16520 mov     bx, offset loc_17D9D ;~ 01A2:7D8C
cs=0x1a2;eip=0x007d8f; 	T(CMP(eax, ebp));	// 16521 cmp     eax, ebp ;~ 01A2:7D8F
cs=0x1a2;eip=0x007d92; 	J(JL(loc_18db0));	// 16522 jl      loc_18DB0 ;~ 01A2:7D92
cs=0x1a2;eip=0x007d96; 	T(CMP(eax, edx));	// 16523 cmp     eax, edx ;~ 01A2:7D96
cs=0x1a2;eip=0x007d99; 	J(JG(loc_18db8));	// 16524 jg      loc_18DB8 ;~ 01A2:7D99
loc_17d9d:
	// 5449 
cs=0x1a2;eip=0x007d9d; 	X(MOV(*(dw*)(raddr(es,di+0x1C)), ax));	// 16527 mov     es:[di+1Ch], ax ;~ 01A2:7D9D
cs=0x1a2;eip=0x007da1; 	T(MOV(eax, *(dd*)(raddr(ds,si+0x3C))));	// 16528 mov     eax, [si+3Ch] ;~ 01A2:7DA1
cs=0x1a2;eip=0x007da5; 	T(MOV(bx, m2c::kloc_17db6));	// 16529 mov     bx, offset loc_17DB6 ;~ 01A2:7DA5
cs=0x1a2;eip=0x007da8; 	T(CMP(eax, ebp));	// 16530 cmp     eax, ebp ;~ 01A2:7DA8
cs=0x1a2;eip=0x007dab; 	J(JL(loc_18db0));	// 16531 jl      loc_18DB0 ;~ 01A2:7DAB
cs=0x1a2;eip=0x007daf; 	T(CMP(eax, edx));	// 16532 cmp     eax, edx ;~ 01A2:7DAF
cs=0x1a2;eip=0x007db2; 	J(JG(loc_18db8));	// 16533 jg      loc_18DB8 ;~ 01A2:7DB2
loc_17db6:
	// 5450 
cs=0x1a2;eip=0x007db6; 	X(MOV(*(dw*)(raddr(es,di+0x1E)), ax));	// 16536 mov     es:[di+1Eh], ax ;~ 01A2:7DB6
cs=0x1a2;eip=0x007dba; 	T(ADD(si, 0x40));	// 16537 add     si, 40h ; '@' ;~ 01A2:7DBA
cs=0x1a2;eip=0x007dbd; 	T(ADD(di, 0x20));	// 16538 add     di, 20h ; ' ' ;~ 01A2:7DBD
cs=0x1a2;eip=0x007dc0; 	T(DEC(cx));	// 16539 dec     cx ;~ 01A2:7DC0
cs=0x1a2;eip=0x007dc1; 	J(JNZ(loc_17c2c));	// 16540 jnz     loc_17C2C ;~ 01A2:7DC1
_nullsub_3:
	// 5451 
cs=0x1a2;eip=0x007dc5; 	J(RETN(0));	// 16543 retn ;~ 01A2:7DC5
seg000_8dae_proc:
	// 19287 
cs=0x1a2;eip=0x008dae; 	T(XCHG(bx, bx));	// 19287 xchg    bx, bx ;~ 01A2:8DAE
loc_18db0:
	// 5556 
cs=0x1a2;eip=0x008db0; 	T(MOV(eax, ebp));	// 19292 mov     eax, ebp ;~ 01A2:8DB0
cs=0x1a2;eip=0x008db3; __disp=bx;
	J(return __dispatch_call(__disp, _state););	// 19293 jmp     bx ;~ 01A2:8DB3
ret_1a2_8db5:
	// 5557 
cs=0x1a2;eip=0x008db5; 	T(XCHG(bx, bx));	// 19296 xchg    bx, bx ;~ 01A2:8DB5
cs=0x1a2;eip=0x008db7; 	T(NOP);	// 19297 nop ;~ 01A2:8DB7
loc_18db8:
	// 5558 
cs=0x1a2;eip=0x008db8; 	T(MOV(eax, edx));	// 19302 mov     eax, edx ;~ 01A2:8DB8
cs=0x1a2;eip=0x008dbb; __disp=bx;
	J(return __dispatch_call(__disp, _state););	// 19303 jmp     bx ;~ 01A2:8DBB
ret_1a2_8dbd:
	// 5559 
cs=0x1a2;eip=0x008dbd; 	T(XCHG(bx, bx));	// 19306 xchg    bx, bx ;~ 01A2:8DBD
cs=0x1a2;eip=0x008dbf; 	T(NOP);	// 19307 nop ;~ 01A2:8DBF
	return _group32(m2c::kseg001_0_proc, _state);
    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_nullsub_3: 	goto _nullsub_3;
        case m2c::kloc_16c88: 	goto loc_16c88;
        case m2c::kloc_16c9d: 	goto loc_16c9d;
        case m2c::kloc_16cb9: 	goto loc_16cb9;
        case m2c::kloc_16cbc: 	goto loc_16cbc;
        case m2c::kloc_16cbe: 	goto loc_16cbe;
        case m2c::kloc_16ceb: 	goto loc_16ceb;
        case m2c::kloc_16cee: 	goto loc_16cee;
        case m2c::kloc_16d0b: 	goto loc_16d0b;
        case m2c::kloc_16d16: 	goto loc_16d16;
        case m2c::kloc_16d21: 	goto loc_16d21;
        case m2c::kloc_16d2c: 	goto loc_16d2c;
        case m2c::kloc_16d37: 	goto loc_16d37;
        case m2c::kloc_16d42: 	goto loc_16d42;
        case m2c::kloc_16d4d: 	goto loc_16d4d;
        case m2c::kloc_16d58: 	goto loc_16d58;
        case m2c::kloc_16d63: 	goto loc_16d63;
        case m2c::kloc_16d6e: 	goto loc_16d6e;
        case m2c::kloc_16d79: 	goto loc_16d79;
        case m2c::kloc_16d84: 	goto loc_16d84;
        case m2c::kloc_16d8f: 	goto loc_16d8f;
        case m2c::kloc_16d9a: 	goto loc_16d9a;
        case m2c::kloc_16da5: 	goto loc_16da5;
        case m2c::kloc_16db0: 	goto loc_16db0;
        case m2c::kloc_16dbb: 	goto loc_16dbb;
        case m2c::kloc_16e24: 	goto loc_16e24;
        case m2c::kloc_16e3f: 	goto loc_16e3f;
        case m2c::kloc_16e56: 	goto loc_16e56;
        case m2c::kloc_16e5d: 	goto loc_16e5d;
        case m2c::kloc_16e74: 	goto loc_16e74;
        case m2c::kloc_16e7b: 	goto loc_16e7b;
        case m2c::kloc_16e92: 	goto loc_16e92;
        case m2c::kloc_16e99: 	goto loc_16e99;
        case m2c::kloc_16eb0: 	goto loc_16eb0;
        case m2c::kloc_16eb7: 	goto loc_16eb7;
        case m2c::kloc_16ece: 	goto loc_16ece;
        case m2c::kloc_16ed5: 	goto loc_16ed5;
        case m2c::kloc_16eec: 	goto loc_16eec;
        case m2c::kloc_16ef3: 	goto loc_16ef3;
        case m2c::kloc_16f0a: 	goto loc_16f0a;
        case m2c::kloc_16f11: 	goto loc_16f11;
        case m2c::kloc_16f28: 	goto loc_16f28;
        case m2c::kloc_16f2f: 	goto loc_16f2f;
        case m2c::kloc_16f46: 	goto loc_16f46;
        case m2c::kloc_16f4d: 	goto loc_16f4d;
        case m2c::kloc_16f64: 	goto loc_16f64;
        case m2c::kloc_16f6b: 	goto loc_16f6b;
        case m2c::kloc_16f82: 	goto loc_16f82;
        case m2c::kloc_16f89: 	goto loc_16f89;
        case m2c::kloc_16fa0: 	goto loc_16fa0;
        case m2c::kloc_16fa7: 	goto loc_16fa7;
        case m2c::kloc_16fbe: 	goto loc_16fbe;
        case m2c::kloc_16fc5: 	goto loc_16fc5;
        case m2c::kloc_16fdc: 	goto loc_16fdc;
        case m2c::kloc_16fe3: 	goto loc_16fe3;
        case m2c::kloc_16ffa: 	goto loc_16ffa;
        case m2c::kloc_17001: 	goto loc_17001;
        case m2c::kloc_17008: 	goto loc_17008;
        case m2c::kloc_1701c: 	goto loc_1701c;
        case m2c::kloc_17037: 	goto loc_17037;
        case m2c::kloc_17053: 	goto loc_17053;
        case m2c::kloc_1706f: 	goto loc_1706f;
        case m2c::kloc_1708b: 	goto loc_1708b;
        case m2c::kloc_170a7: 	goto loc_170a7;
        case m2c::kloc_170c3: 	goto loc_170c3;
        case m2c::kloc_170df: 	goto loc_170df;
        case m2c::kloc_170fb: 	goto loc_170fb;
        case m2c::kloc_17117: 	goto loc_17117;
        case m2c::kloc_17133: 	goto loc_17133;
        case m2c::kloc_1714f: 	goto loc_1714f;
        case m2c::kloc_1716b: 	goto loc_1716b;
        case m2c::kloc_17187: 	goto loc_17187;
        case m2c::kloc_171a3: 	goto loc_171a3;
        case m2c::kloc_171bf: 	goto loc_171bf;
        case m2c::kloc_171d3: 	goto loc_171d3;
        case m2c::kloc_171da: 	goto loc_171da;
        case m2c::kloc_171f8: 	goto loc_171f8;
        case m2c::kloc_17202: 	goto loc_17202;
        case m2c::kloc_17212: 	goto loc_17212;
        case m2c::kloc_1721a: 	goto loc_1721a;
        case m2c::kloc_17254: 	goto loc_17254;
        case m2c::kloc_17257: 	goto loc_17257;
        case m2c::kloc_17473: 	goto loc_17473;
        case m2c::kloc_1747a: 	goto loc_1747a;
        case m2c::kloc_17491: 	goto loc_17491;
        case m2c::kloc_17498: 	goto loc_17498;
        case m2c::kloc_174af: 	goto loc_174af;
        case m2c::kloc_174b6: 	goto loc_174b6;
        case m2c::kloc_174cd: 	goto loc_174cd;
        case m2c::kloc_174d4: 	goto loc_174d4;
        case m2c::kloc_174eb: 	goto loc_174eb;
        case m2c::kloc_174f2: 	goto loc_174f2;
        case m2c::kloc_17509: 	goto loc_17509;
        case m2c::kloc_17510: 	goto loc_17510;
        case m2c::kloc_17527: 	goto loc_17527;
        case m2c::kloc_1752e: 	goto loc_1752e;
        case m2c::kloc_17545: 	goto loc_17545;
        case m2c::kloc_1754c: 	goto loc_1754c;
        case m2c::kloc_17563: 	goto loc_17563;
        case m2c::kloc_1756a: 	goto loc_1756a;
        case m2c::kloc_17581: 	goto loc_17581;
        case m2c::kloc_17588: 	goto loc_17588;
        case m2c::kloc_1759f: 	goto loc_1759f;
        case m2c::kloc_175a6: 	goto loc_175a6;
        case m2c::kloc_175bd: 	goto loc_175bd;
        case m2c::kloc_175c4: 	goto loc_175c4;
        case m2c::kloc_175db: 	goto loc_175db;
        case m2c::kloc_175e2: 	goto loc_175e2;
        case m2c::kloc_175f9: 	goto loc_175f9;
        case m2c::kloc_17600: 	goto loc_17600;
        case m2c::kloc_17617: 	goto loc_17617;
        case m2c::kloc_1761e: 	goto loc_1761e;
        case m2c::kloc_17625: 	goto loc_17625;
        case m2c::kloc_17639: 	goto loc_17639;
        case m2c::kloc_17654: 	goto loc_17654;
        case m2c::kloc_17670: 	goto loc_17670;
        case m2c::kloc_1768c: 	goto loc_1768c;
        case m2c::kloc_176a8: 	goto loc_176a8;
        case m2c::kloc_176c4: 	goto loc_176c4;
        case m2c::kloc_176e0: 	goto loc_176e0;
        case m2c::kloc_176fc: 	goto loc_176fc;
        case m2c::kloc_17718: 	goto loc_17718;
        case m2c::kloc_17734: 	goto loc_17734;
        case m2c::kloc_17750: 	goto loc_17750;
        case m2c::kloc_1776c: 	goto loc_1776c;
        case m2c::kloc_17788: 	goto loc_17788;
        case m2c::kloc_177a4: 	goto loc_177a4;
        case m2c::kloc_177c0: 	goto loc_177c0;
        case m2c::kloc_177dc: 	goto loc_177dc;
        case m2c::kloc_177ef: 	goto loc_177ef;
        case m2c::kloc_17819: 	goto loc_17819;
        case m2c::kloc_1781c: 	goto loc_1781c;
        case m2c::kloc_17a72: 	goto loc_17a72;
        case m2c::kloc_17a89: 	goto loc_17a89;
        case m2c::kloc_17a8f: 	goto loc_17a8f;
        case m2c::kloc_17aa6: 	goto loc_17aa6;
        case m2c::kloc_17aac: 	goto loc_17aac;
        case m2c::kloc_17ac3: 	goto loc_17ac3;
        case m2c::kloc_17ac9: 	goto loc_17ac9;
        case m2c::kloc_17ae0: 	goto loc_17ae0;
        case m2c::kloc_17ae6: 	goto loc_17ae6;
        case m2c::kloc_17afd: 	goto loc_17afd;
        case m2c::kloc_17b03: 	goto loc_17b03;
        case m2c::kloc_17b1a: 	goto loc_17b1a;
        case m2c::kloc_17b20: 	goto loc_17b20;
        case m2c::kloc_17b37: 	goto loc_17b37;
        case m2c::kloc_17b3d: 	goto loc_17b3d;
        case m2c::kloc_17b54: 	goto loc_17b54;
        case m2c::kloc_17b5a: 	goto loc_17b5a;
        case m2c::kloc_17b71: 	goto loc_17b71;
        case m2c::kloc_17b77: 	goto loc_17b77;
        case m2c::kloc_17b8e: 	goto loc_17b8e;
        case m2c::kloc_17b94: 	goto loc_17b94;
        case m2c::kloc_17bab: 	goto loc_17bab;
        case m2c::kloc_17bb1: 	goto loc_17bb1;
        case m2c::kloc_17bc8: 	goto loc_17bc8;
        case m2c::kloc_17bce: 	goto loc_17bce;
        case m2c::kloc_17be5: 	goto loc_17be5;
        case m2c::kloc_17beb: 	goto loc_17beb;
        case m2c::kloc_17c02: 	goto loc_17c02;
        case m2c::kloc_17c08: 	goto loc_17c08;
        case m2c::kloc_17c1f: 	goto loc_17c1f;
        case m2c::kloc_17c25: 	goto loc_17c25;
        case m2c::kloc_17c2c: 	goto loc_17c2c;
        case m2c::kloc_17c40: 	goto loc_17c40;
        case m2c::kloc_17c58: 	goto loc_17c58;
        case m2c::kloc_17c71: 	goto loc_17c71;
        case m2c::kloc_17c8a: 	goto loc_17c8a;
        case m2c::kloc_17ca3: 	goto loc_17ca3;
        case m2c::kloc_17cbc: 	goto loc_17cbc;
        case m2c::kloc_17cd5: 	goto loc_17cd5;
        case m2c::kloc_17cee: 	goto loc_17cee;
        case m2c::kloc_17d07: 	goto loc_17d07;
        case m2c::kloc_17d20: 	goto loc_17d20;
        case m2c::kloc_17d39: 	goto loc_17d39;
        case m2c::kloc_17d52: 	goto loc_17d52;
        case m2c::kloc_17d6b: 	goto loc_17d6b;
        case m2c::kloc_17d84: 	goto loc_17d84;
        case m2c::kloc_17d9d: 	goto loc_17d9d;
        case m2c::kloc_17db6: 	goto loc_17db6;
        case m2c::kloc_18db0: 	goto loc_18db0;
        case m2c::kloc_18db8: 	goto loc_18db8;
        case m2c::klocret_16e23: 	goto locret_16e23;
        case m2c::klocret_171d2: 	goto locret_171d2;
        case m2c::klocret_177ee: 	goto locret_177ee;
        case m2c::kret_1a2_8db5: 	goto ret_1a2_8db5;
        case m2c::kret_1a2_8dbd: 	goto ret_1a2_8dbd;
        case m2c::kseg000_745c_proc: 	goto seg000_745c_proc;
        case m2c::kseg000_8dae_proc: 	goto seg000_8dae_proc;
        case m2c::ksub_16c69: 	goto sub_16c69;
        case m2c::ksub_16cf6: 	goto sub_16cf6;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_1725f(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_1725f:
    _begin:
cs=0x1a2;eip=0x00725f; 	T(CMP(byte_24625, 1));	// 15277 cmp     byte_24625, 1 ;~ 01A2:725F
cs=0x1a2;eip=0x007264; 	J(JZ(loc_17441));	// 15278 jz      loc_17441 ;~ 01A2:7264
cs=0x1a2;eip=0x007268; 	T(OR(si, 1));	// 15279 or      si, 1 ;~ 01A2:7268
cs=0x1a2;eip=0x00726b; 	T(MOV(edx, 0x80808080));	// 15280 mov     edx, 80808080h ;~ 01A2:726B
cs=0x1a2;eip=0x007271; 	T(SHR(cx, 1));	// 15281 shr     cx, 1 ;~ 01A2:7271
cs=0x1a2;eip=0x007273; 	T(MOV(bx, cx));	// 15282 mov     bx, cx ;~ 01A2:7273
cs=0x1a2;eip=0x007275; 	T(AND(bx, 0x0F));	// 15283 and     bx, 0Fh ;~ 01A2:7275
cs=0x1a2;eip=0x007278; 	T(SHL(bx, 1));	// 15284 shl     bx, 1 ;~ 01A2:7278
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00727a; __disp=*(dw*)(((db*)&off_18ee0)+bx);
	J(return __dispatch_call(__disp, _state););	// 15285 jmp     cs:off_18EE0[bx] ;~ 01A2:727A
loc_1727f:
	// 5313 
cs=0x1a2;eip=0x00727f; 	T(MOV(al, *(raddr(ds,si))));	// 15290 mov     al, [si] ;~ 01A2:727F
cs=0x1a2;eip=0x007281; 	T(MOV(ah, *(raddr(ds,si+4))));	// 15291 mov     ah, [si+4] ;~ 01A2:7281
cs=0x1a2;eip=0x007284; 	T(ADD(si, 8));	// 15292 add     si, 8 ;~ 01A2:7284
cs=0x1a2;eip=0x007287; 	T(XOR(ax, dx));	// 15293 xor     ax, dx ;~ 01A2:7287
cs=0x1a2;eip=0x007289; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 15294 mov     es:[di], ax ;~ 01A2:7289
cs=0x1a2;eip=0x00728c; 	T(ADD(di, 2));	// 15295 add     di, 2 ;~ 01A2:728C
loc_1728f:
	// 5314 
cs=0x1a2;eip=0x00728f; 	T(MOV(al, *(raddr(ds,si))));	// 15299 mov     al, [si] ;~ 01A2:728F
cs=0x1a2;eip=0x007291; 	T(MOV(ah, *(raddr(ds,si+4))));	// 15300 mov     ah, [si+4] ;~ 01A2:7291
cs=0x1a2;eip=0x007294; 	T(ADD(si, 8));	// 15301 add     si, 8 ;~ 01A2:7294
cs=0x1a2;eip=0x007297; 	T(XOR(ax, dx));	// 15302 xor     ax, dx ;~ 01A2:7297
cs=0x1a2;eip=0x007299; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 15303 mov     es:[di], ax ;~ 01A2:7299
cs=0x1a2;eip=0x00729c; 	T(ADD(di, 2));	// 15304 add     di, 2 ;~ 01A2:729C
loc_1729f:
	// 5315 
cs=0x1a2;eip=0x00729f; 	T(MOV(al, *(raddr(ds,si))));	// 15308 mov     al, [si] ;~ 01A2:729F
cs=0x1a2;eip=0x0072a1; 	T(MOV(ah, *(raddr(ds,si+4))));	// 15309 mov     ah, [si+4] ;~ 01A2:72A1
cs=0x1a2;eip=0x0072a4; 	T(ADD(si, 8));	// 15310 add     si, 8 ;~ 01A2:72A4
cs=0x1a2;eip=0x0072a7; 	T(XOR(ax, dx));	// 15311 xor     ax, dx ;~ 01A2:72A7
cs=0x1a2;eip=0x0072a9; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 15312 mov     es:[di], ax ;~ 01A2:72A9
cs=0x1a2;eip=0x0072ac; 	T(ADD(di, 2));	// 15313 add     di, 2 ;~ 01A2:72AC
loc_172af:
	// 5316 
cs=0x1a2;eip=0x0072af; 	T(MOV(al, *(raddr(ds,si))));	// 15317 mov     al, [si] ;~ 01A2:72AF
cs=0x1a2;eip=0x0072b1; 	T(MOV(ah, *(raddr(ds,si+4))));	// 15318 mov     ah, [si+4] ;~ 01A2:72B1
cs=0x1a2;eip=0x0072b4; 	T(ADD(si, 8));	// 15319 add     si, 8 ;~ 01A2:72B4
cs=0x1a2;eip=0x0072b7; 	T(XOR(ax, dx));	// 15320 xor     ax, dx ;~ 01A2:72B7
cs=0x1a2;eip=0x0072b9; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 15321 mov     es:[di], ax ;~ 01A2:72B9
cs=0x1a2;eip=0x0072bc; 	T(ADD(di, 2));	// 15322 add     di, 2 ;~ 01A2:72BC
loc_172bf:
	// 5317 
cs=0x1a2;eip=0x0072bf; 	T(MOV(al, *(raddr(ds,si))));	// 15326 mov     al, [si] ;~ 01A2:72BF
cs=0x1a2;eip=0x0072c1; 	T(MOV(ah, *(raddr(ds,si+4))));	// 15327 mov     ah, [si+4] ;~ 01A2:72C1
cs=0x1a2;eip=0x0072c4; 	T(ADD(si, 8));	// 15328 add     si, 8 ;~ 01A2:72C4
cs=0x1a2;eip=0x0072c7; 	T(XOR(ax, dx));	// 15329 xor     ax, dx ;~ 01A2:72C7
cs=0x1a2;eip=0x0072c9; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 15330 mov     es:[di], ax ;~ 01A2:72C9
cs=0x1a2;eip=0x0072cc; 	T(ADD(di, 2));	// 15331 add     di, 2 ;~ 01A2:72CC
loc_172cf:
	// 5318 
cs=0x1a2;eip=0x0072cf; 	T(MOV(al, *(raddr(ds,si))));	// 15335 mov     al, [si] ;~ 01A2:72CF
cs=0x1a2;eip=0x0072d1; 	T(MOV(ah, *(raddr(ds,si+4))));	// 15336 mov     ah, [si+4] ;~ 01A2:72D1
cs=0x1a2;eip=0x0072d4; 	T(ADD(si, 8));	// 15337 add     si, 8 ;~ 01A2:72D4
cs=0x1a2;eip=0x0072d7; 	T(XOR(ax, dx));	// 15338 xor     ax, dx ;~ 01A2:72D7
cs=0x1a2;eip=0x0072d9; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 15339 mov     es:[di], ax ;~ 01A2:72D9
cs=0x1a2;eip=0x0072dc; 	T(ADD(di, 2));	// 15340 add     di, 2 ;~ 01A2:72DC
loc_172df:
	// 5319 
cs=0x1a2;eip=0x0072df; 	T(MOV(al, *(raddr(ds,si))));	// 15344 mov     al, [si] ;~ 01A2:72DF
cs=0x1a2;eip=0x0072e1; 	T(MOV(ah, *(raddr(ds,si+4))));	// 15345 mov     ah, [si+4] ;~ 01A2:72E1
cs=0x1a2;eip=0x0072e4; 	T(ADD(si, 8));	// 15346 add     si, 8 ;~ 01A2:72E4
cs=0x1a2;eip=0x0072e7; 	T(XOR(ax, dx));	// 15347 xor     ax, dx ;~ 01A2:72E7
cs=0x1a2;eip=0x0072e9; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 15348 mov     es:[di], ax ;~ 01A2:72E9
cs=0x1a2;eip=0x0072ec; 	T(ADD(di, 2));	// 15349 add     di, 2 ;~ 01A2:72EC
loc_172ef:
	// 5320 
cs=0x1a2;eip=0x0072ef; 	T(MOV(al, *(raddr(ds,si))));	// 15353 mov     al, [si] ;~ 01A2:72EF
cs=0x1a2;eip=0x0072f1; 	T(MOV(ah, *(raddr(ds,si+4))));	// 15354 mov     ah, [si+4] ;~ 01A2:72F1
cs=0x1a2;eip=0x0072f4; 	T(ADD(si, 8));	// 15355 add     si, 8 ;~ 01A2:72F4
cs=0x1a2;eip=0x0072f7; 	T(XOR(ax, dx));	// 15356 xor     ax, dx ;~ 01A2:72F7
cs=0x1a2;eip=0x0072f9; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 15357 mov     es:[di], ax ;~ 01A2:72F9
cs=0x1a2;eip=0x0072fc; 	T(ADD(di, 2));	// 15358 add     di, 2 ;~ 01A2:72FC
loc_172ff:
	// 5321 
cs=0x1a2;eip=0x0072ff; 	T(MOV(al, *(raddr(ds,si))));	// 15362 mov     al, [si] ;~ 01A2:72FF
cs=0x1a2;eip=0x007301; 	T(MOV(ah, *(raddr(ds,si+4))));	// 15363 mov     ah, [si+4] ;~ 01A2:7301
cs=0x1a2;eip=0x007304; 	T(ADD(si, 8));	// 15364 add     si, 8 ;~ 01A2:7304
cs=0x1a2;eip=0x007307; 	T(XOR(ax, dx));	// 15365 xor     ax, dx ;~ 01A2:7307
cs=0x1a2;eip=0x007309; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 15366 mov     es:[di], ax ;~ 01A2:7309
cs=0x1a2;eip=0x00730c; 	T(ADD(di, 2));	// 15367 add     di, 2 ;~ 01A2:730C
loc_1730f:
	// 5322 
cs=0x1a2;eip=0x00730f; 	T(MOV(al, *(raddr(ds,si))));	// 15371 mov     al, [si] ;~ 01A2:730F
cs=0x1a2;eip=0x007311; 	T(MOV(ah, *(raddr(ds,si+4))));	// 15372 mov     ah, [si+4] ;~ 01A2:7311
cs=0x1a2;eip=0x007314; 	T(ADD(si, 8));	// 15373 add     si, 8 ;~ 01A2:7314
cs=0x1a2;eip=0x007317; 	T(XOR(ax, dx));	// 15374 xor     ax, dx ;~ 01A2:7317
cs=0x1a2;eip=0x007319; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 15375 mov     es:[di], ax ;~ 01A2:7319
cs=0x1a2;eip=0x00731c; 	T(ADD(di, 2));	// 15376 add     di, 2 ;~ 01A2:731C
loc_1731f:
	// 5323 
cs=0x1a2;eip=0x00731f; 	T(MOV(al, *(raddr(ds,si))));	// 15380 mov     al, [si] ;~ 01A2:731F
cs=0x1a2;eip=0x007321; 	T(MOV(ah, *(raddr(ds,si+4))));	// 15381 mov     ah, [si+4] ;~ 01A2:7321
cs=0x1a2;eip=0x007324; 	T(ADD(si, 8));	// 15382 add     si, 8 ;~ 01A2:7324
cs=0x1a2;eip=0x007327; 	T(XOR(ax, dx));	// 15383 xor     ax, dx ;~ 01A2:7327
cs=0x1a2;eip=0x007329; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 15384 mov     es:[di], ax ;~ 01A2:7329
cs=0x1a2;eip=0x00732c; 	T(ADD(di, 2));	// 15385 add     di, 2 ;~ 01A2:732C
loc_1732f:
	// 5324 
cs=0x1a2;eip=0x00732f; 	T(MOV(al, *(raddr(ds,si))));	// 15389 mov     al, [si] ;~ 01A2:732F
cs=0x1a2;eip=0x007331; 	T(MOV(ah, *(raddr(ds,si+4))));	// 15390 mov     ah, [si+4] ;~ 01A2:7331
cs=0x1a2;eip=0x007334; 	T(ADD(si, 8));	// 15391 add     si, 8 ;~ 01A2:7334
cs=0x1a2;eip=0x007337; 	T(XOR(ax, dx));	// 15392 xor     ax, dx ;~ 01A2:7337
cs=0x1a2;eip=0x007339; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 15393 mov     es:[di], ax ;~ 01A2:7339
cs=0x1a2;eip=0x00733c; 	T(ADD(di, 2));	// 15394 add     di, 2 ;~ 01A2:733C
loc_1733f:
	// 5325 
cs=0x1a2;eip=0x00733f; 	T(MOV(al, *(raddr(ds,si))));	// 15398 mov     al, [si] ;~ 01A2:733F
cs=0x1a2;eip=0x007341; 	T(MOV(ah, *(raddr(ds,si+4))));	// 15399 mov     ah, [si+4] ;~ 01A2:7341
cs=0x1a2;eip=0x007344; 	T(ADD(si, 8));	// 15400 add     si, 8 ;~ 01A2:7344
cs=0x1a2;eip=0x007347; 	T(XOR(ax, dx));	// 15401 xor     ax, dx ;~ 01A2:7347
cs=0x1a2;eip=0x007349; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 15402 mov     es:[di], ax ;~ 01A2:7349
cs=0x1a2;eip=0x00734c; 	T(ADD(di, 2));	// 15403 add     di, 2 ;~ 01A2:734C
loc_1734f:
	// 5326 
cs=0x1a2;eip=0x00734f; 	T(MOV(al, *(raddr(ds,si))));	// 15407 mov     al, [si] ;~ 01A2:734F
cs=0x1a2;eip=0x007351; 	T(MOV(ah, *(raddr(ds,si+4))));	// 15408 mov     ah, [si+4] ;~ 01A2:7351
cs=0x1a2;eip=0x007354; 	T(ADD(si, 8));	// 15409 add     si, 8 ;~ 01A2:7354
cs=0x1a2;eip=0x007357; 	T(XOR(ax, dx));	// 15410 xor     ax, dx ;~ 01A2:7357
cs=0x1a2;eip=0x007359; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 15411 mov     es:[di], ax ;~ 01A2:7359
cs=0x1a2;eip=0x00735c; 	T(ADD(di, 2));	// 15412 add     di, 2 ;~ 01A2:735C
loc_1735f:
	// 5327 
cs=0x1a2;eip=0x00735f; 	T(MOV(al, *(raddr(ds,si))));	// 15416 mov     al, [si] ;~ 01A2:735F
cs=0x1a2;eip=0x007361; 	T(MOV(ah, *(raddr(ds,si+4))));	// 15417 mov     ah, [si+4] ;~ 01A2:7361
cs=0x1a2;eip=0x007364; 	T(ADD(si, 8));	// 15418 add     si, 8 ;~ 01A2:7364
cs=0x1a2;eip=0x007367; 	T(XOR(ax, dx));	// 15419 xor     ax, dx ;~ 01A2:7367
cs=0x1a2;eip=0x007369; 	X(MOV(*(dw*)(raddr(es,di)), ax));	// 15420 mov     es:[di], ax ;~ 01A2:7369
cs=0x1a2;eip=0x00736c; 	T(ADD(di, 2));	// 15421 add     di, 2 ;~ 01A2:736C
loc_1736f:
	// 5328 
cs=0x1a2;eip=0x00736f; 	T(SHR(cx, 4));	// 15425 shr     cx, 4 ;~ 01A2:736F
cs=0x1a2;eip=0x007372; 	J(JZ(locret_17440));	// 15426 jz      locret_17440 ;~ 01A2:7372
loc_17376:
	// 5329 
cs=0x1a2;eip=0x007376; 	T(MOV(al, *(raddr(ds,si+8))));	// 15429 mov     al, [si+8] ;~ 01A2:7376
cs=0x1a2;eip=0x007379; 	T(MOV(bl, *(raddr(ds,si+0x18))));	// 15430 mov     bl, [si+18h] ;~ 01A2:7379
cs=0x1a2;eip=0x00737c; 	T(MOV(ah, *(raddr(ds,si+0x0C))));	// 15431 mov     ah, [si+0Ch] ;~ 01A2:737C
cs=0x1a2;eip=0x00737f; 	T(MOV(bh, *(raddr(ds,si+0x1C))));	// 15432 mov     bh, [si+1Ch] ;~ 01A2:737F
cs=0x1a2;eip=0x007382; 	T(SHL(eax, 0x10));	// 15433 shl     eax, 10h ;~ 01A2:7382
cs=0x1a2;eip=0x007386; 	T(SHL(ebx, 0x10));	// 15434 shl     ebx, 10h ;~ 01A2:7386
cs=0x1a2;eip=0x00738a; 	T(MOV(al, *(raddr(ds,si))));	// 15435 mov     al, [si] ;~ 01A2:738A
cs=0x1a2;eip=0x00738c; 	T(MOV(bl, *(raddr(ds,si+0x10))));	// 15436 mov     bl, [si+10h] ;~ 01A2:738C
cs=0x1a2;eip=0x00738f; 	T(MOV(ah, *(raddr(ds,si+4))));	// 15437 mov     ah, [si+4] ;~ 01A2:738F
cs=0x1a2;eip=0x007392; 	T(MOV(bh, *(raddr(ds,si+0x14))));	// 15438 mov     bh, [si+14h] ;~ 01A2:7392
cs=0x1a2;eip=0x007395; 	T(XOR(eax, edx));	// 15439 xor     eax, edx ;~ 01A2:7395
cs=0x1a2;eip=0x007398; 	T(XOR(ebx, edx));	// 15440 xor     ebx, edx ;~ 01A2:7398
cs=0x1a2;eip=0x00739b; 	X(MOV(*(dd*)(raddr(es,di)), eax));	// 15441 mov     es:[di], eax ;~ 01A2:739B
cs=0x1a2;eip=0x00739f; 	X(MOV(*(dd*)(raddr(es,di+4)), ebx));	// 15442 mov     es:[di+4], ebx ;~ 01A2:739F
cs=0x1a2;eip=0x0073a4; 	T(MOV(al, *(raddr(ds,si+0x28))));	// 15443 mov     al, [si+28h] ;~ 01A2:73A4
cs=0x1a2;eip=0x0073a7; 	T(MOV(bl, *(raddr(ds,si+0x38))));	// 15444 mov     bl, [si+38h] ;~ 01A2:73A7
cs=0x1a2;eip=0x0073aa; 	T(MOV(ah, *(raddr(ds,si+0x2C))));	// 15445 mov     ah, [si+2Ch] ;~ 01A2:73AA
cs=0x1a2;eip=0x0073ad; 	T(MOV(bh, *(raddr(ds,si+0x3C))));	// 15446 mov     bh, [si+3Ch] ;~ 01A2:73AD
cs=0x1a2;eip=0x0073b0; 	T(SHL(eax, 0x10));	// 15447 shl     eax, 10h ;~ 01A2:73B0
cs=0x1a2;eip=0x0073b4; 	T(SHL(ebx, 0x10));	// 15448 shl     ebx, 10h ;~ 01A2:73B4
cs=0x1a2;eip=0x0073b8; 	T(MOV(al, *(raddr(ds,si+0x20))));	// 15449 mov     al, [si+20h] ;~ 01A2:73B8
cs=0x1a2;eip=0x0073bb; 	T(MOV(bl, *(raddr(ds,si+0x30))));	// 15450 mov     bl, [si+30h] ;~ 01A2:73BB
cs=0x1a2;eip=0x0073be; 	T(MOV(ah, *(raddr(ds,si+0x24))));	// 15451 mov     ah, [si+24h] ;~ 01A2:73BE
cs=0x1a2;eip=0x0073c1; 	T(MOV(bh, *(raddr(ds,si+0x34))));	// 15452 mov     bh, [si+34h] ;~ 01A2:73C1
cs=0x1a2;eip=0x0073c4; 	T(XOR(eax, edx));	// 15453 xor     eax, edx ;~ 01A2:73C4
cs=0x1a2;eip=0x0073c7; 	T(XOR(ebx, edx));	// 15454 xor     ebx, edx ;~ 01A2:73C7
cs=0x1a2;eip=0x0073ca; 	X(MOV(*(dd*)(raddr(es,di+8)), eax));	// 15455 mov     es:[di+8], eax ;~ 01A2:73CA
cs=0x1a2;eip=0x0073cf; 	X(MOV(*(dd*)(raddr(es,di+0x0C)), ebx));	// 15456 mov     es:[di+0Ch], ebx ;~ 01A2:73CF
cs=0x1a2;eip=0x0073d4; 	T(MOV(al, *(raddr(ds,si+0x48))));	// 15457 mov     al, [si+48h] ;~ 01A2:73D4
cs=0x1a2;eip=0x0073d7; 	T(MOV(bl, *(raddr(ds,si+0x58))));	// 15458 mov     bl, [si+58h] ;~ 01A2:73D7
cs=0x1a2;eip=0x0073da; 	T(MOV(ah, *(raddr(ds,si+0x4C))));	// 15459 mov     ah, [si+4Ch] ;~ 01A2:73DA
cs=0x1a2;eip=0x0073dd; 	T(MOV(bh, *(raddr(ds,si+0x5C))));	// 15460 mov     bh, [si+5Ch] ;~ 01A2:73DD
cs=0x1a2;eip=0x0073e0; 	T(SHL(eax, 0x10));	// 15461 shl     eax, 10h ;~ 01A2:73E0
cs=0x1a2;eip=0x0073e4; 	T(SHL(ebx, 0x10));	// 15462 shl     ebx, 10h ;~ 01A2:73E4
cs=0x1a2;eip=0x0073e8; 	T(MOV(al, *(raddr(ds,si+0x40))));	// 15463 mov     al, [si+40h] ;~ 01A2:73E8
cs=0x1a2;eip=0x0073eb; 	T(MOV(bl, *(raddr(ds,si+0x50))));	// 15464 mov     bl, [si+50h] ;~ 01A2:73EB
cs=0x1a2;eip=0x0073ee; 	T(MOV(ah, *(raddr(ds,si+0x44))));	// 15465 mov     ah, [si+44h] ;~ 01A2:73EE
cs=0x1a2;eip=0x0073f1; 	T(MOV(bh, *(raddr(ds,si+0x54))));	// 15466 mov     bh, [si+54h] ;~ 01A2:73F1
cs=0x1a2;eip=0x0073f4; 	T(XOR(eax, edx));	// 15467 xor     eax, edx ;~ 01A2:73F4
cs=0x1a2;eip=0x0073f7; 	T(XOR(ebx, edx));	// 15468 xor     ebx, edx ;~ 01A2:73F7
cs=0x1a2;eip=0x0073fa; 	X(MOV(*(dd*)(raddr(es,di+0x10)), eax));	// 15469 mov     es:[di+10h], eax ;~ 01A2:73FA
cs=0x1a2;eip=0x0073ff; 	X(MOV(*(dd*)(raddr(es,di+0x14)), ebx));	// 15470 mov     es:[di+14h], ebx ;~ 01A2:73FF
cs=0x1a2;eip=0x007404; 	T(MOV(al, *(raddr(ds,si+0x68))));	// 15471 mov     al, [si+68h] ;~ 01A2:7404
cs=0x1a2;eip=0x007407; 	T(MOV(bl, *(raddr(ds,si+0x78))));	// 15472 mov     bl, [si+78h] ;~ 01A2:7407
cs=0x1a2;eip=0x00740a; 	T(MOV(ah, *(raddr(ds,si+0x6C))));	// 15473 mov     ah, [si+6Ch] ;~ 01A2:740A
cs=0x1a2;eip=0x00740d; 	T(MOV(bh, *(raddr(ds,si+0x7C))));	// 15474 mov     bh, [si+7Ch] ;~ 01A2:740D
cs=0x1a2;eip=0x007410; 	T(SHL(eax, 0x10));	// 15475 shl     eax, 10h ;~ 01A2:7410
cs=0x1a2;eip=0x007414; 	T(SHL(ebx, 0x10));	// 15476 shl     ebx, 10h ;~ 01A2:7414
cs=0x1a2;eip=0x007418; 	T(MOV(al, *(raddr(ds,si+0x60))));	// 15477 mov     al, [si+60h] ;~ 01A2:7418
cs=0x1a2;eip=0x00741b; 	T(MOV(bl, *(raddr(ds,si+0x70))));	// 15478 mov     bl, [si+70h] ;~ 01A2:741B
cs=0x1a2;eip=0x00741e; 	T(MOV(ah, *(raddr(ds,si+0x64))));	// 15479 mov     ah, [si+64h] ;~ 01A2:741E
cs=0x1a2;eip=0x007421; 	T(MOV(bh, *(raddr(ds,si+0x74))));	// 15480 mov     bh, [si+74h] ;~ 01A2:7421
cs=0x1a2;eip=0x007424; 	T(XOR(eax, edx));	// 15481 xor     eax, edx ;~ 01A2:7424
cs=0x1a2;eip=0x007427; 	T(XOR(ebx, edx));	// 15482 xor     ebx, edx ;~ 01A2:7427
cs=0x1a2;eip=0x00742a; 	X(MOV(*(dd*)(raddr(es,di+0x18)), eax));	// 15483 mov     es:[di+18h], eax ;~ 01A2:742A
cs=0x1a2;eip=0x00742f; 	X(MOV(*(dd*)(raddr(es,di+0x1C)), ebx));	// 15484 mov     es:[di+1Ch], ebx ;~ 01A2:742F
cs=0x1a2;eip=0x007434; 	T(ADD(si, 0x80));	// 15485 add     si, 80h ; '€' ;~ 01A2:7434
cs=0x1a2;eip=0x007438; 	T(ADD(di, 0x20));	// 15486 add     di, 20h ; ' ' ;~ 01A2:7438
cs=0x1a2;eip=0x00743b; 	T(DEC(cx));	// 15487 dec     cx ;~ 01A2:743B
cs=0x1a2;eip=0x00743c; 	J(JNZ(loc_17376));	// 15488 jnz     loc_17376 ;~ 01A2:743C
locret_17440:
	// 5330 
cs=0x1a2;eip=0x007440; 	J(RETN(0));	// 15491 retn ;~ 01A2:7440
loc_17441:
	// 5331 
cs=0x1a2;eip=0x007441; 	T(AND(si, 0x0FFFC));	// 15495 and     si, 0FFFCh ;~ 01A2:7441
cs=0x1a2;eip=0x007444; 	T(MOV(edx, 0x7FFF));	// 15496 mov     edx, 7FFFh ;~ 01A2:7444
cs=0x1a2;eip=0x00744a; 	T(MOV(ebp, 0x0FFFF8000));	// 15497 mov     ebp, 0FFFF8000h ;~ 01A2:744A
cs=0x1a2;eip=0x007450; 	T(MOV(bx, cx));	// 15498 mov     bx, cx ;~ 01A2:7450
cs=0x1a2;eip=0x007452; 	T(AND(bx, 0x0F));	// 15499 and     bx, 0Fh ;~ 01A2:7452
cs=0x1a2;eip=0x007455; 	T(SHL(bx, 1));	// 15500 shl     bx, 1 ;~ 01A2:7455
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x007457; __disp=*(dw*)(((db*)&off_18f00)+bx);
	J(return __dispatch_call(__disp, _state););	// 15501 jmp     cs:off_18F00[bx] ;~ 01A2:7457

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::kloc_1727f: 	goto loc_1727f;
        case m2c::kloc_1728f: 	goto loc_1728f;
        case m2c::kloc_1729f: 	goto loc_1729f;
        case m2c::kloc_172af: 	goto loc_172af;
        case m2c::kloc_172bf: 	goto loc_172bf;
        case m2c::kloc_172cf: 	goto loc_172cf;
        case m2c::kloc_172df: 	goto loc_172df;
        case m2c::kloc_172ef: 	goto loc_172ef;
        case m2c::kloc_172ff: 	goto loc_172ff;
        case m2c::kloc_1730f: 	goto loc_1730f;
        case m2c::kloc_1731f: 	goto loc_1731f;
        case m2c::kloc_1732f: 	goto loc_1732f;
        case m2c::kloc_1733f: 	goto loc_1733f;
        case m2c::kloc_1734f: 	goto loc_1734f;
        case m2c::kloc_1735f: 	goto loc_1735f;
        case m2c::kloc_1736f: 	goto loc_1736f;
        case m2c::kloc_17376: 	goto loc_17376;
        case m2c::kloc_17441: 	goto loc_17441;
        case m2c::klocret_17440: 	goto locret_17440;
        case m2c::ksub_1725f: 	goto sub_1725f;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool sub_17824(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    sub_17824:
    _begin:
cs=0x1a2;eip=0x007824; 	T(CMP(byte_24625, 1));	// 15942 cmp     byte_24625, 1 ;~ 01A2:7824
cs=0x1a2;eip=0x007829; 	J(JZ(loc_17a58));	// 15943 jz      loc_17A58 ;~ 01A2:7829
cs=0x1a2;eip=0x00782d; 	T(MOV(bx, cx));	// 15944 mov     bx, cx ;~ 01A2:782D
cs=0x1a2;eip=0x00782f; 	T(AND(bx, 0x0F));	// 15945 and     bx, 0Fh ;~ 01A2:782F
cs=0x1a2;eip=0x007832; 	T(SHL(bx, 1));	// 15946 shl     bx, 1 ;~ 01A2:7832
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x007834; __disp=*(dw*)(((db*)&off_18f20)+bx);
	J(return __dispatch_call(__disp, _state););	// 15947 jmp     cs:off_18F20[bx] ;~ 01A2:7834
loc_17839:
	// 5384 
cs=0x1a2;eip=0x007839; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 15952 mov     ax, [si+4] ;~ 01A2:7839
cs=0x1a2;eip=0x00783c; 	T(SHL(eax, 0x10));	// 15953 shl     eax, 10h ;~ 01A2:783C
cs=0x1a2;eip=0x007840; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 15954 mov     ax, [si] ;~ 01A2:7840
cs=0x1a2;eip=0x007842; 	T(ADD(si, 8));	// 15955 add     si, 8 ;~ 01A2:7842
cs=0x1a2;eip=0x007845; 	X(MOV(*(dd*)(raddr(es,di)), eax));	// 15956 mov     es:[di], eax ;~ 01A2:7845
cs=0x1a2;eip=0x007849; 	T(ADD(di, 4));	// 15957 add     di, 4 ;~ 01A2:7849
loc_1784c:
	// 5385 
cs=0x1a2;eip=0x00784c; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 15961 mov     ax, [si+4] ;~ 01A2:784C
cs=0x1a2;eip=0x00784f; 	T(SHL(eax, 0x10));	// 15962 shl     eax, 10h ;~ 01A2:784F
cs=0x1a2;eip=0x007853; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 15963 mov     ax, [si] ;~ 01A2:7853
cs=0x1a2;eip=0x007855; 	T(ADD(si, 8));	// 15964 add     si, 8 ;~ 01A2:7855
cs=0x1a2;eip=0x007858; 	X(MOV(*(dd*)(raddr(es,di)), eax));	// 15965 mov     es:[di], eax ;~ 01A2:7858
cs=0x1a2;eip=0x00785c; 	T(ADD(di, 4));	// 15966 add     di, 4 ;~ 01A2:785C
loc_1785f:
	// 5386 
cs=0x1a2;eip=0x00785f; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 15970 mov     ax, [si+4] ;~ 01A2:785F
cs=0x1a2;eip=0x007862; 	T(SHL(eax, 0x10));	// 15971 shl     eax, 10h ;~ 01A2:7862
cs=0x1a2;eip=0x007866; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 15972 mov     ax, [si] ;~ 01A2:7866
cs=0x1a2;eip=0x007868; 	T(ADD(si, 8));	// 15973 add     si, 8 ;~ 01A2:7868
cs=0x1a2;eip=0x00786b; 	X(MOV(*(dd*)(raddr(es,di)), eax));	// 15974 mov     es:[di], eax ;~ 01A2:786B
cs=0x1a2;eip=0x00786f; 	T(ADD(di, 4));	// 15975 add     di, 4 ;~ 01A2:786F
loc_17872:
	// 5387 
cs=0x1a2;eip=0x007872; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 15979 mov     ax, [si+4] ;~ 01A2:7872
cs=0x1a2;eip=0x007875; 	T(SHL(eax, 0x10));	// 15980 shl     eax, 10h ;~ 01A2:7875
cs=0x1a2;eip=0x007879; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 15981 mov     ax, [si] ;~ 01A2:7879
cs=0x1a2;eip=0x00787b; 	T(ADD(si, 8));	// 15982 add     si, 8 ;~ 01A2:787B
cs=0x1a2;eip=0x00787e; 	X(MOV(*(dd*)(raddr(es,di)), eax));	// 15983 mov     es:[di], eax ;~ 01A2:787E
cs=0x1a2;eip=0x007882; 	T(ADD(di, 4));	// 15984 add     di, 4 ;~ 01A2:7882
loc_17885:
	// 5388 
cs=0x1a2;eip=0x007885; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 15988 mov     ax, [si+4] ;~ 01A2:7885
cs=0x1a2;eip=0x007888; 	T(SHL(eax, 0x10));	// 15989 shl     eax, 10h ;~ 01A2:7888
cs=0x1a2;eip=0x00788c; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 15990 mov     ax, [si] ;~ 01A2:788C
cs=0x1a2;eip=0x00788e; 	T(ADD(si, 8));	// 15991 add     si, 8 ;~ 01A2:788E
cs=0x1a2;eip=0x007891; 	X(MOV(*(dd*)(raddr(es,di)), eax));	// 15992 mov     es:[di], eax ;~ 01A2:7891
cs=0x1a2;eip=0x007895; 	T(ADD(di, 4));	// 15993 add     di, 4 ;~ 01A2:7895
loc_17898:
	// 5389 
cs=0x1a2;eip=0x007898; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 15997 mov     ax, [si+4] ;~ 01A2:7898
cs=0x1a2;eip=0x00789b; 	T(SHL(eax, 0x10));	// 15998 shl     eax, 10h ;~ 01A2:789B
cs=0x1a2;eip=0x00789f; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 15999 mov     ax, [si] ;~ 01A2:789F
cs=0x1a2;eip=0x0078a1; 	T(ADD(si, 8));	// 16000 add     si, 8 ;~ 01A2:78A1
cs=0x1a2;eip=0x0078a4; 	X(MOV(*(dd*)(raddr(es,di)), eax));	// 16001 mov     es:[di], eax ;~ 01A2:78A4
cs=0x1a2;eip=0x0078a8; 	T(ADD(di, 4));	// 16002 add     di, 4 ;~ 01A2:78A8
loc_178ab:
	// 5390 
cs=0x1a2;eip=0x0078ab; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 16006 mov     ax, [si+4] ;~ 01A2:78AB
cs=0x1a2;eip=0x0078ae; 	T(SHL(eax, 0x10));	// 16007 shl     eax, 10h ;~ 01A2:78AE
cs=0x1a2;eip=0x0078b2; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 16008 mov     ax, [si] ;~ 01A2:78B2
cs=0x1a2;eip=0x0078b4; 	T(ADD(si, 8));	// 16009 add     si, 8 ;~ 01A2:78B4
cs=0x1a2;eip=0x0078b7; 	X(MOV(*(dd*)(raddr(es,di)), eax));	// 16010 mov     es:[di], eax ;~ 01A2:78B7
cs=0x1a2;eip=0x0078bb; 	T(ADD(di, 4));	// 16011 add     di, 4 ;~ 01A2:78BB
loc_178be:
	// 5391 
cs=0x1a2;eip=0x0078be; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 16015 mov     ax, [si+4] ;~ 01A2:78BE
cs=0x1a2;eip=0x0078c1; 	T(SHL(eax, 0x10));	// 16016 shl     eax, 10h ;~ 01A2:78C1
cs=0x1a2;eip=0x0078c5; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 16017 mov     ax, [si] ;~ 01A2:78C5
cs=0x1a2;eip=0x0078c7; 	T(ADD(si, 8));	// 16018 add     si, 8 ;~ 01A2:78C7
cs=0x1a2;eip=0x0078ca; 	X(MOV(*(dd*)(raddr(es,di)), eax));	// 16019 mov     es:[di], eax ;~ 01A2:78CA
cs=0x1a2;eip=0x0078ce; 	T(ADD(di, 4));	// 16020 add     di, 4 ;~ 01A2:78CE
loc_178d1:
	// 5392 
cs=0x1a2;eip=0x0078d1; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 16024 mov     ax, [si+4] ;~ 01A2:78D1
cs=0x1a2;eip=0x0078d4; 	T(SHL(eax, 0x10));	// 16025 shl     eax, 10h ;~ 01A2:78D4
cs=0x1a2;eip=0x0078d8; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 16026 mov     ax, [si] ;~ 01A2:78D8
cs=0x1a2;eip=0x0078da; 	T(ADD(si, 8));	// 16027 add     si, 8 ;~ 01A2:78DA
cs=0x1a2;eip=0x0078dd; 	X(MOV(*(dd*)(raddr(es,di)), eax));	// 16028 mov     es:[di], eax ;~ 01A2:78DD
cs=0x1a2;eip=0x0078e1; 	T(ADD(di, 4));	// 16029 add     di, 4 ;~ 01A2:78E1
loc_178e4:
	// 5393 
cs=0x1a2;eip=0x0078e4; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 16033 mov     ax, [si+4] ;~ 01A2:78E4
cs=0x1a2;eip=0x0078e7; 	T(SHL(eax, 0x10));	// 16034 shl     eax, 10h ;~ 01A2:78E7
cs=0x1a2;eip=0x0078eb; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 16035 mov     ax, [si] ;~ 01A2:78EB
cs=0x1a2;eip=0x0078ed; 	T(ADD(si, 8));	// 16036 add     si, 8 ;~ 01A2:78ED
cs=0x1a2;eip=0x0078f0; 	X(MOV(*(dd*)(raddr(es,di)), eax));	// 16037 mov     es:[di], eax ;~ 01A2:78F0
cs=0x1a2;eip=0x0078f4; 	T(ADD(di, 4));	// 16038 add     di, 4 ;~ 01A2:78F4
loc_178f7:
	// 5394 
cs=0x1a2;eip=0x0078f7; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 16042 mov     ax, [si+4] ;~ 01A2:78F7
cs=0x1a2;eip=0x0078fa; 	T(SHL(eax, 0x10));	// 16043 shl     eax, 10h ;~ 01A2:78FA
cs=0x1a2;eip=0x0078fe; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 16044 mov     ax, [si] ;~ 01A2:78FE
cs=0x1a2;eip=0x007900; 	T(ADD(si, 8));	// 16045 add     si, 8 ;~ 01A2:7900
cs=0x1a2;eip=0x007903; 	X(MOV(*(dd*)(raddr(es,di)), eax));	// 16046 mov     es:[di], eax ;~ 01A2:7903
cs=0x1a2;eip=0x007907; 	T(ADD(di, 4));	// 16047 add     di, 4 ;~ 01A2:7907
loc_1790a:
	// 5395 
cs=0x1a2;eip=0x00790a; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 16051 mov     ax, [si+4] ;~ 01A2:790A
cs=0x1a2;eip=0x00790d; 	T(SHL(eax, 0x10));	// 16052 shl     eax, 10h ;~ 01A2:790D
cs=0x1a2;eip=0x007911; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 16053 mov     ax, [si] ;~ 01A2:7911
cs=0x1a2;eip=0x007913; 	T(ADD(si, 8));	// 16054 add     si, 8 ;~ 01A2:7913
cs=0x1a2;eip=0x007916; 	X(MOV(*(dd*)(raddr(es,di)), eax));	// 16055 mov     es:[di], eax ;~ 01A2:7916
cs=0x1a2;eip=0x00791a; 	T(ADD(di, 4));	// 16056 add     di, 4 ;~ 01A2:791A
loc_1791d:
	// 5396 
cs=0x1a2;eip=0x00791d; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 16060 mov     ax, [si+4] ;~ 01A2:791D
cs=0x1a2;eip=0x007920; 	T(SHL(eax, 0x10));	// 16061 shl     eax, 10h ;~ 01A2:7920
cs=0x1a2;eip=0x007924; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 16062 mov     ax, [si] ;~ 01A2:7924
cs=0x1a2;eip=0x007926; 	T(ADD(si, 8));	// 16063 add     si, 8 ;~ 01A2:7926
cs=0x1a2;eip=0x007929; 	X(MOV(*(dd*)(raddr(es,di)), eax));	// 16064 mov     es:[di], eax ;~ 01A2:7929
cs=0x1a2;eip=0x00792d; 	T(ADD(di, 4));	// 16065 add     di, 4 ;~ 01A2:792D
loc_17930:
	// 5397 
cs=0x1a2;eip=0x007930; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 16069 mov     ax, [si+4] ;~ 01A2:7930
cs=0x1a2;eip=0x007933; 	T(SHL(eax, 0x10));	// 16070 shl     eax, 10h ;~ 01A2:7933
cs=0x1a2;eip=0x007937; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 16071 mov     ax, [si] ;~ 01A2:7937
cs=0x1a2;eip=0x007939; 	T(ADD(si, 8));	// 16072 add     si, 8 ;~ 01A2:7939
cs=0x1a2;eip=0x00793c; 	X(MOV(*(dd*)(raddr(es,di)), eax));	// 16073 mov     es:[di], eax ;~ 01A2:793C
cs=0x1a2;eip=0x007940; 	T(ADD(di, 4));	// 16074 add     di, 4 ;~ 01A2:7940
loc_17943:
	// 5398 
cs=0x1a2;eip=0x007943; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 16078 mov     ax, [si+4] ;~ 01A2:7943
cs=0x1a2;eip=0x007946; 	T(SHL(eax, 0x10));	// 16079 shl     eax, 10h ;~ 01A2:7946
cs=0x1a2;eip=0x00794a; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 16080 mov     ax, [si] ;~ 01A2:794A
cs=0x1a2;eip=0x00794c; 	T(ADD(si, 8));	// 16081 add     si, 8 ;~ 01A2:794C
cs=0x1a2;eip=0x00794f; 	X(MOV(*(dd*)(raddr(es,di)), eax));	// 16082 mov     es:[di], eax ;~ 01A2:794F
cs=0x1a2;eip=0x007953; 	T(ADD(di, 4));	// 16083 add     di, 4 ;~ 01A2:7953
loc_17956:
	// 5399 
cs=0x1a2;eip=0x007956; 	T(SHR(cx, 4));	// 16087 shr     cx, 4 ;~ 01A2:7956
cs=0x1a2;eip=0x007959; 	J(JZ(locret_17a57));	// 16088 jz      locret_17A57 ;~ 01A2:7959
loc_1795d:
	// 5400 
cs=0x1a2;eip=0x00795d; 	T(MOV(ax, *(dw*)(raddr(ds,si+4))));	// 16091 mov     ax, [si+4] ;~ 01A2:795D
cs=0x1a2;eip=0x007960; 	T(SHL(eax, 0x10));	// 16092 shl     eax, 10h ;~ 01A2:7960
cs=0x1a2;eip=0x007964; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 16093 mov     ax, [si] ;~ 01A2:7964
cs=0x1a2;eip=0x007966; 	X(MOV(*(dd*)(raddr(es,di)), eax));	// 16094 mov     es:[di], eax ;~ 01A2:7966
cs=0x1a2;eip=0x00796a; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x0C))));	// 16095 mov     ax, [si+0Ch] ;~ 01A2:796A
cs=0x1a2;eip=0x00796d; 	T(SHL(eax, 0x10));	// 16096 shl     eax, 10h ;~ 01A2:796D
cs=0x1a2;eip=0x007971; 	T(MOV(ax, *(dw*)(raddr(ds,si+8))));	// 16097 mov     ax, [si+8] ;~ 01A2:7971
cs=0x1a2;eip=0x007974; 	X(MOV(*(dd*)(raddr(es,di+4)), eax));	// 16098 mov     es:[di+4], eax ;~ 01A2:7974
cs=0x1a2;eip=0x007979; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x14))));	// 16099 mov     ax, [si+14h] ;~ 01A2:7979
cs=0x1a2;eip=0x00797c; 	T(SHL(eax, 0x10));	// 16100 shl     eax, 10h ;~ 01A2:797C
cs=0x1a2;eip=0x007980; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x10))));	// 16101 mov     ax, [si+10h] ;~ 01A2:7980
cs=0x1a2;eip=0x007983; 	X(MOV(*(dd*)(raddr(es,di+8)), eax));	// 16102 mov     es:[di+8], eax ;~ 01A2:7983
cs=0x1a2;eip=0x007988; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x1C))));	// 16103 mov     ax, [si+1Ch] ;~ 01A2:7988
cs=0x1a2;eip=0x00798b; 	T(SHL(eax, 0x10));	// 16104 shl     eax, 10h ;~ 01A2:798B
cs=0x1a2;eip=0x00798f; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x18))));	// 16105 mov     ax, [si+18h] ;~ 01A2:798F
cs=0x1a2;eip=0x007992; 	X(MOV(*(dd*)(raddr(es,di+0x0C)), eax));	// 16106 mov     es:[di+0Ch], eax ;~ 01A2:7992
cs=0x1a2;eip=0x007997; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x24))));	// 16107 mov     ax, [si+24h] ;~ 01A2:7997
cs=0x1a2;eip=0x00799a; 	T(SHL(eax, 0x10));	// 16108 shl     eax, 10h ;~ 01A2:799A
cs=0x1a2;eip=0x00799e; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x20))));	// 16109 mov     ax, [si+20h] ;~ 01A2:799E
cs=0x1a2;eip=0x0079a1; 	X(MOV(*(dd*)(raddr(es,di+0x10)), eax));	// 16110 mov     es:[di+10h], eax ;~ 01A2:79A1
cs=0x1a2;eip=0x0079a6; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x2C))));	// 16111 mov     ax, [si+2Ch] ;~ 01A2:79A6
cs=0x1a2;eip=0x0079a9; 	T(SHL(eax, 0x10));	// 16112 shl     eax, 10h ;~ 01A2:79A9
cs=0x1a2;eip=0x0079ad; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x28))));	// 16113 mov     ax, [si+28h] ;~ 01A2:79AD
cs=0x1a2;eip=0x0079b0; 	X(MOV(*(dd*)(raddr(es,di+0x14)), eax));	// 16114 mov     es:[di+14h], eax ;~ 01A2:79B0
cs=0x1a2;eip=0x0079b5; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x34))));	// 16115 mov     ax, [si+34h] ;~ 01A2:79B5
cs=0x1a2;eip=0x0079b8; 	T(SHL(eax, 0x10));	// 16116 shl     eax, 10h ;~ 01A2:79B8
cs=0x1a2;eip=0x0079bc; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x30))));	// 16117 mov     ax, [si+30h] ;~ 01A2:79BC
cs=0x1a2;eip=0x0079bf; 	X(MOV(*(dd*)(raddr(es,di+0x18)), eax));	// 16118 mov     es:[di+18h], eax ;~ 01A2:79BF
cs=0x1a2;eip=0x0079c4; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x3C))));	// 16119 mov     ax, [si+3Ch] ;~ 01A2:79C4
cs=0x1a2;eip=0x0079c7; 	T(SHL(eax, 0x10));	// 16120 shl     eax, 10h ;~ 01A2:79C7
cs=0x1a2;eip=0x0079cb; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x38))));	// 16121 mov     ax, [si+38h] ;~ 01A2:79CB
cs=0x1a2;eip=0x0079ce; 	X(MOV(*(dd*)(raddr(es,di+0x1C)), eax));	// 16122 mov     es:[di+1Ch], eax ;~ 01A2:79CE
cs=0x1a2;eip=0x0079d3; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x44))));	// 16123 mov     ax, [si+44h] ;~ 01A2:79D3
cs=0x1a2;eip=0x0079d6; 	T(SHL(eax, 0x10));	// 16124 shl     eax, 10h ;~ 01A2:79D6
cs=0x1a2;eip=0x0079da; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x40))));	// 16125 mov     ax, [si+40h] ;~ 01A2:79DA
cs=0x1a2;eip=0x0079dd; 	X(MOV(*(dd*)(raddr(es,di+0x20)), eax));	// 16126 mov     es:[di+20h], eax ;~ 01A2:79DD
cs=0x1a2;eip=0x0079e2; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x4C))));	// 16127 mov     ax, [si+4Ch] ;~ 01A2:79E2
cs=0x1a2;eip=0x0079e5; 	T(SHL(eax, 0x10));	// 16128 shl     eax, 10h ;~ 01A2:79E5
cs=0x1a2;eip=0x0079e9; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x48))));	// 16129 mov     ax, [si+48h] ;~ 01A2:79E9
cs=0x1a2;eip=0x0079ec; 	X(MOV(*(dd*)(raddr(es,di+0x24)), eax));	// 16130 mov     es:[di+24h], eax ;~ 01A2:79EC
cs=0x1a2;eip=0x0079f1; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x54))));	// 16131 mov     ax, [si+54h] ;~ 01A2:79F1
cs=0x1a2;eip=0x0079f4; 	T(SHL(eax, 0x10));	// 16132 shl     eax, 10h ;~ 01A2:79F4
cs=0x1a2;eip=0x0079f8; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x50))));	// 16133 mov     ax, [si+50h] ;~ 01A2:79F8
cs=0x1a2;eip=0x0079fb; 	X(MOV(*(dd*)(raddr(es,di+0x28)), eax));	// 16134 mov     es:[di+28h], eax ;~ 01A2:79FB
cs=0x1a2;eip=0x007a00; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x5C))));	// 16135 mov     ax, [si+5Ch] ;~ 01A2:7A00
cs=0x1a2;eip=0x007a03; 	T(SHL(eax, 0x10));	// 16136 shl     eax, 10h ;~ 01A2:7A03
cs=0x1a2;eip=0x007a07; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x58))));	// 16137 mov     ax, [si+58h] ;~ 01A2:7A07
cs=0x1a2;eip=0x007a0a; 	X(MOV(*(dd*)(raddr(es,di+0x2C)), eax));	// 16138 mov     es:[di+2Ch], eax ;~ 01A2:7A0A
cs=0x1a2;eip=0x007a0f; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x64))));	// 16139 mov     ax, [si+64h] ;~ 01A2:7A0F
cs=0x1a2;eip=0x007a12; 	T(SHL(eax, 0x10));	// 16140 shl     eax, 10h ;~ 01A2:7A12
cs=0x1a2;eip=0x007a16; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x60))));	// 16141 mov     ax, [si+60h] ;~ 01A2:7A16
cs=0x1a2;eip=0x007a19; 	X(MOV(*(dd*)(raddr(es,di+0x30)), eax));	// 16142 mov     es:[di+30h], eax ;~ 01A2:7A19
cs=0x1a2;eip=0x007a1e; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x6C))));	// 16143 mov     ax, [si+6Ch] ;~ 01A2:7A1E
cs=0x1a2;eip=0x007a21; 	T(SHL(eax, 0x10));	// 16144 shl     eax, 10h ;~ 01A2:7A21
cs=0x1a2;eip=0x007a25; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x68))));	// 16145 mov     ax, [si+68h] ;~ 01A2:7A25
cs=0x1a2;eip=0x007a28; 	X(MOV(*(dd*)(raddr(es,di+0x34)), eax));	// 16146 mov     es:[di+34h], eax ;~ 01A2:7A28
cs=0x1a2;eip=0x007a2d; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x74))));	// 16147 mov     ax, [si+74h] ;~ 01A2:7A2D
cs=0x1a2;eip=0x007a30; 	T(SHL(eax, 0x10));	// 16148 shl     eax, 10h ;~ 01A2:7A30
cs=0x1a2;eip=0x007a34; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x70))));	// 16149 mov     ax, [si+70h] ;~ 01A2:7A34
cs=0x1a2;eip=0x007a37; 	X(MOV(*(dd*)(raddr(es,di+0x38)), eax));	// 16150 mov     es:[di+38h], eax ;~ 01A2:7A37
cs=0x1a2;eip=0x007a3c; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x7C))));	// 16151 mov     ax, [si+7Ch] ;~ 01A2:7A3C
cs=0x1a2;eip=0x007a3f; 	T(SHL(eax, 0x10));	// 16152 shl     eax, 10h ;~ 01A2:7A3F
cs=0x1a2;eip=0x007a43; 	T(MOV(ax, *(dw*)(raddr(ds,si+0x78))));	// 16153 mov     ax, [si+78h] ;~ 01A2:7A43
cs=0x1a2;eip=0x007a46; 	X(MOV(*(dd*)(raddr(es,di+0x3C)), eax));	// 16154 mov     es:[di+3Ch], eax ;~ 01A2:7A46
cs=0x1a2;eip=0x007a4b; 	T(ADD(si, 0x80));	// 16155 add     si, 80h ; '€' ;~ 01A2:7A4B
cs=0x1a2;eip=0x007a4f; 	T(ADD(di, 0x40));	// 16156 add     di, 40h ; '@' ;~ 01A2:7A4F
cs=0x1a2;eip=0x007a52; 	T(DEC(cx));	// 16157 dec     cx ;~ 01A2:7A52
cs=0x1a2;eip=0x007a53; 	J(JNZ(loc_1795d));	// 16158 jnz     loc_1795D ;~ 01A2:7A53
locret_17a57:
	// 5401 
cs=0x1a2;eip=0x007a57; 	J(RETN(0));	// 16161 retn ;~ 01A2:7A57
loc_17a58:
	// 5402 
cs=0x1a2;eip=0x007a58; 	T(MOV(edx, 0x7FFF));	// 16165 mov     edx, 7FFFh ;~ 01A2:7A58
cs=0x1a2;eip=0x007a5e; 	T(MOV(ebp, 0x0FFFF8000));	// 16166 mov     ebp, 0FFFF8000h ;~ 01A2:7A5E
cs=0x1a2;eip=0x007a64; 	T(SHL(cx, 1));	// 16167 shl     cx, 1 ;~ 01A2:7A64
cs=0x1a2;eip=0x007a66; 	T(MOV(bx, cx));	// 16168 mov     bx, cx ;~ 01A2:7A66
cs=0x1a2;eip=0x007a68; 	T(AND(bx, 0x0F));	// 16169 and     bx, 0Fh ;~ 01A2:7A68
cs=0x1a2;eip=0x007a6b; 	T(SHL(bx, 1));	// 16170 shl     bx, 1 ;~ 01A2:7A6B
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x007a6d; __disp=*(dw*)(((db*)&off_18f40)+bx);
	J(return __dispatch_call(__disp, _state););	// 16171 jmp     cs:off_18F40[bx] ;~ 01A2:7A6D

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::kloc_17839: 	goto loc_17839;
        case m2c::kloc_1784c: 	goto loc_1784c;
        case m2c::kloc_1785f: 	goto loc_1785f;
        case m2c::kloc_17872: 	goto loc_17872;
        case m2c::kloc_17885: 	goto loc_17885;
        case m2c::kloc_17898: 	goto loc_17898;
        case m2c::kloc_178ab: 	goto loc_178ab;
        case m2c::kloc_178be: 	goto loc_178be;
        case m2c::kloc_178d1: 	goto loc_178d1;
        case m2c::kloc_178e4: 	goto loc_178e4;
        case m2c::kloc_178f7: 	goto loc_178f7;
        case m2c::kloc_1790a: 	goto loc_1790a;
        case m2c::kloc_1791d: 	goto loc_1791d;
        case m2c::kloc_17930: 	goto loc_17930;
        case m2c::kloc_17943: 	goto loc_17943;
        case m2c::kloc_17956: 	goto loc_17956;
        case m2c::kloc_1795d: 	goto loc_1795d;
        case m2c::kloc_17a58: 	goto loc_17a58;
        case m2c::klocret_17a57: 	goto locret_17a57;
        case m2c::ksub_17824: 	goto sub_17824;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _gravis_17dc6(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _gravis_17dc6:
    _begin:
cs=0x1a2;eip=0x007dc6; 	X(PUSHF);	// 16551 pushf ;~ 01A2:7DC6
cs=0x1a2;eip=0x007dc7; 	T(CLI);	// 16552 cli ;~ 01A2:7DC7
cs=0x1a2;eip=0x007dc8; 	T(MOV(dx, _gravis_port));	// 16553 mov     dx, _gravis_port ;~ 01A2:7DC8
cs=0x1a2;eip=0x007dcc; 	T(MOV(al, 0x43));	// 16554 mov     al, 43h ; 'C' ;~ 01A2:7DCC
cs=0x1a2;eip=0x007dce; 	S(OUT(dx, al));	// 16555 out     dx, al ;~ 01A2:7DCE
cs=0x1a2;eip=0x007dcf; 	T(INC(dx));	// 16556 inc     dx ;~ 01A2:7DCF
cs=0x1a2;eip=0x007dd0; 	T(MOV(ax, di));	// 16557 mov     ax, di ;~ 01A2:7DD0
cs=0x1a2;eip=0x007dd2; 	S(OUT(dx, ax));	// 16558 out     dx, ax ;~ 01A2:7DD2
cs=0x1a2;eip=0x007dd3; 	T(DEC(dx));	// 16559 dec     dx ;~ 01A2:7DD3
cs=0x1a2;eip=0x007dd4; 	T(MOV(al, 0x44));	// 16560 mov     al, 44h ; 'D' ;~ 01A2:7DD4
cs=0x1a2;eip=0x007dd6; 	S(OUT(dx, al));	// 16561 out     dx, al ;~ 01A2:7DD6
cs=0x1a2;eip=0x007dd7; 	T(ADD(dl, 2));	// 16562 add     dl, 2 ;~ 01A2:7DD7
cs=0x1a2;eip=0x007dda; 	T(MOV(eax, edi));	// 16563 mov     eax, edi ;~ 01A2:7DDA
cs=0x1a2;eip=0x007ddd; 	T(SHR(eax, 0x10));	// 16564 shr     eax, 10h ;~ 01A2:7DDD
cs=0x1a2;eip=0x007de1; 	S(OUT(dx, al));	// 16565 out     dx, al ;~ 01A2:7DE1
cs=0x1a2;eip=0x007de2; 	T(ADD(dl, 2));	// 16566 add     dl, 2 ;~ 01A2:7DE2
cs=0x1a2;eip=0x007de5; 	S(IN(al, dx));	// 16567 in      al, dx ;~ 01A2:7DE5
cs=0x1a2;eip=0x007de6; 	X(POPF);	// 16568 popf ;~ 01A2:7DE6
cs=0x1a2;eip=0x007de7; 	J(RETN(0));	// 16569 retn ;~ 01A2:7DE7

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_gravis_17dc6: 	goto _gravis_17dc6;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _gravis_17de8(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _gravis_17de8:
    _begin:
cs=0x1a2;eip=0x007de8; 	X(PUSHF);	// 16578 pushf ;~ 01A2:7DE8
cs=0x1a2;eip=0x007de9; 	T(CLI);	// 16579 cli ;~ 01A2:7DE9
cs=0x1a2;eip=0x007dea; 	T(MOV(dx, _gravis_port));	// 16580 mov     dx, _gravis_port ;~ 01A2:7DEA
cs=0x1a2;eip=0x007dee; 	T(MOV(ch, al));	// 16581 mov     ch, al ;~ 01A2:7DEE
cs=0x1a2;eip=0x007df0; 	T(MOV(al, 0x43));	// 16582 mov     al, 43h ; 'C' ;~ 01A2:7DF0
cs=0x1a2;eip=0x007df2; 	S(OUT(dx, al));	// 16583 out     dx, al ;~ 01A2:7DF2
cs=0x1a2;eip=0x007df3; 	T(INC(dx));	// 16584 inc     dx ;~ 01A2:7DF3
cs=0x1a2;eip=0x007df4; 	T(MOV(ax, di));	// 16585 mov     ax, di ;~ 01A2:7DF4
cs=0x1a2;eip=0x007df6; 	S(OUT(dx, ax));	// 16586 out     dx, ax ;~ 01A2:7DF6
cs=0x1a2;eip=0x007df7; 	T(DEC(dx));	// 16587 dec     dx ;~ 01A2:7DF7
cs=0x1a2;eip=0x007df8; 	T(MOV(al, 0x44));	// 16588 mov     al, 44h ; 'D' ;~ 01A2:7DF8
cs=0x1a2;eip=0x007dfa; 	S(OUT(dx, al));	// 16589 out     dx, al ;~ 01A2:7DFA
cs=0x1a2;eip=0x007dfb; 	T(ADD(dl, 2));	// 16590 add     dl, 2 ;~ 01A2:7DFB
cs=0x1a2;eip=0x007dfe; 	T(MOV(eax, edi));	// 16591 mov     eax, edi ;~ 01A2:7DFE
cs=0x1a2;eip=0x007e01; 	T(SHR(eax, 0x10));	// 16592 shr     eax, 10h ;~ 01A2:7E01
cs=0x1a2;eip=0x007e05; 	S(OUT(dx, al));	// 16593 out     dx, al ;~ 01A2:7E05
cs=0x1a2;eip=0x007e06; 	T(ADD(dl, 2));	// 16594 add     dl, 2 ;~ 01A2:7E06
cs=0x1a2;eip=0x007e09; 	T(MOV(al, ch));	// 16595 mov     al, ch ;~ 01A2:7E09
cs=0x1a2;eip=0x007e0b; 	S(OUT(dx, al));	// 16596 out     dx, al ;~ 01A2:7E0B
cs=0x1a2;eip=0x007e0c; 	X(POPF);	// 16597 popf ;~ 01A2:7E0C
cs=0x1a2;eip=0x007e0d; 	J(RETN(0));	// 16598 retn ;~ 01A2:7E0D

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_gravis_17de8: 	goto _gravis_17de8;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _gravis_17e0e(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _gravis_17e0e:
    _begin:
cs=0x1a2;eip=0x007e0e; 	X(PUSHF);	// 16606 pushf ;~ 01A2:7E0E
cs=0x1a2;eip=0x007e0f; 	T(CLI);	// 16607 cli ;~ 01A2:7E0F
cs=0x1a2;eip=0x007e10; 	T(SHL(edi, 1));	// 16608 shl     edi, 1 ;~ 01A2:7E10
cs=0x1a2;eip=0x007e13; 	T(MOV(dx, _gravis_port));	// 16609 mov     dx, _gravis_port ;~ 01A2:7E13
cs=0x1a2;eip=0x007e17; 	T(MOV(al, 0x43));	// 16610 mov     al, 43h ; 'C' ;~ 01A2:7E17
cs=0x1a2;eip=0x007e19; 	S(OUT(dx, al));	// 16611 out     dx, al ;~ 01A2:7E19
cs=0x1a2;eip=0x007e1a; 	T(INC(dx));	// 16612 inc     dx ;~ 01A2:7E1A
cs=0x1a2;eip=0x007e1b; 	T(MOV(ax, di));	// 16613 mov     ax, di ;~ 01A2:7E1B
cs=0x1a2;eip=0x007e1d; 	T(INC(ax));	// 16614 inc     ax ;~ 01A2:7E1D
cs=0x1a2;eip=0x007e1e; 	S(OUT(dx, ax));	// 16615 out     dx, ax ;~ 01A2:7E1E
cs=0x1a2;eip=0x007e1f; 	T(DEC(dx));	// 16616 dec     dx ;~ 01A2:7E1F
cs=0x1a2;eip=0x007e20; 	T(MOV(al, 0x44));	// 16617 mov     al, 44h ; 'D' ;~ 01A2:7E20
cs=0x1a2;eip=0x007e22; 	S(OUT(dx, al));	// 16618 out     dx, al ;~ 01A2:7E22
cs=0x1a2;eip=0x007e23; 	T(ADD(dl, 2));	// 16619 add     dl, 2 ;~ 01A2:7E23
cs=0x1a2;eip=0x007e26; 	T(MOV(eax, edi));	// 16620 mov     eax, edi ;~ 01A2:7E26
cs=0x1a2;eip=0x007e29; 	T(SHR(eax, 0x10));	// 16621 shr     eax, 10h ;~ 01A2:7E29
cs=0x1a2;eip=0x007e2d; 	S(OUT(dx, al));	// 16622 out     dx, al ;~ 01A2:7E2D
cs=0x1a2;eip=0x007e2e; 	T(ADD(dl, 2));	// 16623 add     dl, 2 ;~ 01A2:7E2E
cs=0x1a2;eip=0x007e31; 	S(IN(al, dx));	// 16624 in      al, dx ;~ 01A2:7E31
cs=0x1a2;eip=0x007e32; 	T(SUB(dx, 4));	// 16625 sub     dx, 4 ;~ 01A2:7E32
cs=0x1a2;eip=0x007e35; 	T(MOV(ch, al));	// 16626 mov     ch, al ;~ 01A2:7E35
cs=0x1a2;eip=0x007e37; 	T(MOV(al, 0x43));	// 16627 mov     al, 43h ; 'C' ;~ 01A2:7E37
cs=0x1a2;eip=0x007e39; 	S(OUT(dx, al));	// 16628 out     dx, al ;~ 01A2:7E39
cs=0x1a2;eip=0x007e3a; 	T(INC(dx));	// 16629 inc     dx ;~ 01A2:7E3A
cs=0x1a2;eip=0x007e3b; 	T(MOV(ax, di));	// 16630 mov     ax, di ;~ 01A2:7E3B
cs=0x1a2;eip=0x007e3d; 	S(OUT(dx, ax));	// 16631 out     dx, ax ;~ 01A2:7E3D
cs=0x1a2;eip=0x007e3e; 	T(ADD(dx, 3));	// 16632 add     dx, 3 ;~ 01A2:7E3E
cs=0x1a2;eip=0x007e41; 	S(IN(al, dx));	// 16633 in      al, dx ;~ 01A2:7E41
cs=0x1a2;eip=0x007e42; 	T(MOV(ah, ch));	// 16634 mov     ah, ch ;~ 01A2:7E42
cs=0x1a2;eip=0x007e44; 	T(SHR(edi, 1));	// 16635 shr     edi, 1 ;~ 01A2:7E44
cs=0x1a2;eip=0x007e47; 	X(POPF);	// 16636 popf ;~ 01A2:7E47
cs=0x1a2;eip=0x007e48; 	J(RETN(0));	// 16637 retn ;~ 01A2:7E48

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_gravis_17e0e: 	goto _gravis_17e0e;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _gravis_17e49(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _gravis_17e49:
    _begin:
cs=0x1a2;eip=0x007e49; 	X(PUSHF);	// 16645 pushf ;~ 01A2:7E49
cs=0x1a2;eip=0x007e4a; 	T(CLI);	// 16646 cli ;~ 01A2:7E4A
cs=0x1a2;eip=0x007e4b; 	T(SHL(edi, 1));	// 16647 shl     edi, 1 ;~ 01A2:7E4B
cs=0x1a2;eip=0x007e4e; 	T(MOV(dx, _gravis_port));	// 16648 mov     dx, _gravis_port ;~ 01A2:7E4E
cs=0x1a2;eip=0x007e52; 	T(MOV(cx, ax));	// 16649 mov     cx, ax ;~ 01A2:7E52
cs=0x1a2;eip=0x007e54; 	T(MOV(al, 0x43));	// 16650 mov     al, 43h ; 'C' ;~ 01A2:7E54
cs=0x1a2;eip=0x007e56; 	S(OUT(dx, al));	// 16651 out     dx, al ;~ 01A2:7E56
cs=0x1a2;eip=0x007e57; 	T(INC(dx));	// 16652 inc     dx ;~ 01A2:7E57
cs=0x1a2;eip=0x007e58; 	T(MOV(ax, di));	// 16653 mov     ax, di ;~ 01A2:7E58
cs=0x1a2;eip=0x007e5a; 	S(OUT(dx, ax));	// 16654 out     dx, ax ;~ 01A2:7E5A
cs=0x1a2;eip=0x007e5b; 	T(DEC(dx));	// 16655 dec     dx ;~ 01A2:7E5B
cs=0x1a2;eip=0x007e5c; 	T(MOV(al, 0x44));	// 16656 mov     al, 44h ; 'D' ;~ 01A2:7E5C
cs=0x1a2;eip=0x007e5e; 	S(OUT(dx, al));	// 16657 out     dx, al ;~ 01A2:7E5E
cs=0x1a2;eip=0x007e5f; 	T(ADD(dl, 2));	// 16658 add     dl, 2 ;~ 01A2:7E5F
cs=0x1a2;eip=0x007e62; 	T(MOV(eax, edi));	// 16659 mov     eax, edi ;~ 01A2:7E62
cs=0x1a2;eip=0x007e65; 	T(SHR(eax, 0x10));	// 16660 shr     eax, 10h ;~ 01A2:7E65
cs=0x1a2;eip=0x007e69; 	S(OUT(dx, al));	// 16661 out     dx, al ;~ 01A2:7E69
cs=0x1a2;eip=0x007e6a; 	T(ADD(dl, 2));	// 16662 add     dl, 2 ;~ 01A2:7E6A
cs=0x1a2;eip=0x007e6d; 	T(MOV(al, cl));	// 16663 mov     al, cl ;~ 01A2:7E6D
cs=0x1a2;eip=0x007e6f; 	S(OUT(dx, al));	// 16664 out     dx, al ;~ 01A2:7E6F
cs=0x1a2;eip=0x007e70; 	T(SUB(dx, 4));	// 16665 sub     dx, 4 ;~ 01A2:7E70
cs=0x1a2;eip=0x007e73; 	T(MOV(al, 0x43));	// 16666 mov     al, 43h ; 'C' ;~ 01A2:7E73
cs=0x1a2;eip=0x007e75; 	S(OUT(dx, al));	// 16667 out     dx, al ;~ 01A2:7E75
cs=0x1a2;eip=0x007e76; 	T(INC(dx));	// 16668 inc     dx ;~ 01A2:7E76
cs=0x1a2;eip=0x007e77; 	T(MOV(ax, di));	// 16669 mov     ax, di ;~ 01A2:7E77
cs=0x1a2;eip=0x007e79; 	T(INC(ax));	// 16670 inc     ax ;~ 01A2:7E79
cs=0x1a2;eip=0x007e7a; 	S(OUT(dx, ax));	// 16671 out     dx, ax ;~ 01A2:7E7A
cs=0x1a2;eip=0x007e7b; 	T(ADD(dx, 3));	// 16672 add     dx, 3 ;~ 01A2:7E7B
cs=0x1a2;eip=0x007e7e; 	T(MOV(al, ch));	// 16673 mov     al, ch ;~ 01A2:7E7E
cs=0x1a2;eip=0x007e80; 	S(OUT(dx, al));	// 16674 out     dx, al ;~ 01A2:7E80
cs=0x1a2;eip=0x007e81; 	T(SHR(edi, 1));	// 16675 shr     edi, 1 ;~ 01A2:7E81
cs=0x1a2;eip=0x007e84; 	X(POPF);	// 16676 popf ;~ 01A2:7E84
cs=0x1a2;eip=0x007e85; 	J(RETN(0));	// 16677 retn ;~ 01A2:7E85

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_gravis_17e49: 	goto _gravis_17e49;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _gravis_17e86(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _gravis_17e86:
    _begin:
cs=0x1a2;eip=0x007e86; 	T(MOV(dx, _gravis_port));	// 16686 mov     dx, _gravis_port ;~ 01A2:7E86
cs=0x1a2;eip=0x007e8a; 	T(MOV(al, 0x4C));	// 16687 mov     al, 4Ch ; 'L' ;~ 01A2:7E8A
cs=0x1a2;eip=0x007e8c; 	S(OUT(dx, al));	// 16688 out     dx, al ;~ 01A2:7E8C
cs=0x1a2;eip=0x007e8d; 	T(ADD(dl, 2));	// 16689 add     dl, 2 ;~ 01A2:7E8D
cs=0x1a2;eip=0x007e90; 	T(XOR(al, al));	// 16690 xor     al, al ;~ 01A2:7E90
cs=0x1a2;eip=0x007e92; 	S(OUT(dx, al));	// 16691 out     dx, al ;~ 01A2:7E92
cs=0x1a2;eip=0x007e93; 	T(SUB(dl, 2));	// 16692 sub     dl, 2 ;~ 01A2:7E93
cs=0x1a2;eip=0x007e96; 	T(ADD(dl, 4));	// 16693 add     dl, 4 ;~ 01A2:7E96
cs=0x1a2;eip=0x007e99; 	S(IN(al, dx));	// 16694 in      al, dx ;~ 01A2:7E99
cs=0x1a2;eip=0x007e9a; 	S(IN(al, dx));	// 16695 in      al, dx ;~ 01A2:7E9A
cs=0x1a2;eip=0x007e9b; 	S(IN(al, dx));	// 16696 in      al, dx ;~ 01A2:7E9B
cs=0x1a2;eip=0x007e9c; 	S(IN(al, dx));	// 16697 in      al, dx ;~ 01A2:7E9C
cs=0x1a2;eip=0x007e9d; 	S(IN(al, dx));	// 16698 in      al, dx ;~ 01A2:7E9D
cs=0x1a2;eip=0x007e9e; 	S(IN(al, dx));	// 16699 in      al, dx ;~ 01A2:7E9E
cs=0x1a2;eip=0x007e9f; 	S(IN(al, dx));	// 16700 in      al, dx ;~ 01A2:7E9F
cs=0x1a2;eip=0x007ea0; 	S(IN(al, dx));	// 16701 in      al, dx ;~ 01A2:7EA0
cs=0x1a2;eip=0x007ea1; 	S(IN(al, dx));	// 16702 in      al, dx ;~ 01A2:7EA1
cs=0x1a2;eip=0x007ea2; 	S(IN(al, dx));	// 16703 in      al, dx ;~ 01A2:7EA2
cs=0x1a2;eip=0x007ea3; 	S(IN(al, dx));	// 16704 in      al, dx ;~ 01A2:7EA3
cs=0x1a2;eip=0x007ea4; 	S(IN(al, dx));	// 16705 in      al, dx ;~ 01A2:7EA4
cs=0x1a2;eip=0x007ea5; 	S(IN(al, dx));	// 16706 in      al, dx ;~ 01A2:7EA5
cs=0x1a2;eip=0x007ea6; 	S(IN(al, dx));	// 16707 in      al, dx ;~ 01A2:7EA6
cs=0x1a2;eip=0x007ea7; 	T(SUB(dl, 4));	// 16708 sub     dl, 4 ;~ 01A2:7EA7
cs=0x1a2;eip=0x007eaa; 	T(MOV(al, 0x4C));	// 16709 mov     al, 4Ch ; 'L' ;~ 01A2:7EAA
cs=0x1a2;eip=0x007eac; 	S(OUT(dx, al));	// 16710 out     dx, al ;~ 01A2:7EAC
cs=0x1a2;eip=0x007ead; 	T(ADD(dl, 2));	// 16711 add     dl, 2 ;~ 01A2:7EAD
cs=0x1a2;eip=0x007eb0; 	T(MOV(al, 1));	// 16712 mov     al, 1 ;~ 01A2:7EB0
cs=0x1a2;eip=0x007eb2; 	S(OUT(dx, al));	// 16713 out     dx, al ;~ 01A2:7EB2
cs=0x1a2;eip=0x007eb3; 	T(SUB(dl, 2));	// 16714 sub     dl, 2 ;~ 01A2:7EB3
cs=0x1a2;eip=0x007eb6; 	T(XOR(edi, edi));	// 16715 xor     edi, edi ;~ 01A2:7EB6
cs=0x1a2;eip=0x007eb9; 	T(MOV(al, 0x0AA));	// 16716 mov     al, 0AAh ; 'ª' ;~ 01A2:7EB9
cs=0x1a2;eip=0x007ebb; 	J(CALL(_gravis_17de8,0));	// 16717 call    _gravis_17DE8 ;~ 01A2:7EBB
cs=0x1a2;eip=0x007ebe; 	T(MOV(edi, 0x10000));	// 16718 mov     edi, 10000h ;~ 01A2:7EBE
cs=0x1a2;eip=0x007ec4; 	T(MOV(al, 0x55));	// 16719 mov     al, 55h ; 'U' ;~ 01A2:7EC4
cs=0x1a2;eip=0x007ec6; 	J(CALL(_gravis_17de8,0));	// 16720 call    _gravis_17DE8 ;~ 01A2:7EC6
cs=0x1a2;eip=0x007ec9; 	T(XOR(edi, edi));	// 16721 xor     edi, edi ;~ 01A2:7EC9
cs=0x1a2;eip=0x007ecc; 	J(CALL(_gravis_17dc6,0));	// 16722 call    _gravis_17DC6 ;~ 01A2:7ECC
cs=0x1a2;eip=0x007ecf; 	X(PUSH(ax));	// 16723 push    ax ;~ 01A2:7ECF
cs=0x1a2;eip=0x007ed0; 	T(XOR(al, al));	// 16724 xor     al, al ;~ 01A2:7ED0
cs=0x1a2;eip=0x007ed2; 	J(CALL(_gravis_17de8,0));	// 16725 call    _gravis_17DE8 ;~ 01A2:7ED2
cs=0x1a2;eip=0x007ed5; 	T(MOV(dx, _gravis_port));	// 16726 mov     dx, _gravis_port ;~ 01A2:7ED5
cs=0x1a2;eip=0x007ed9; 	T(MOV(al, 0x4C));	// 16727 mov     al, 4Ch ; 'L' ;~ 01A2:7ED9
cs=0x1a2;eip=0x007edb; 	S(OUT(dx, al));	// 16728 out     dx, al ;~ 01A2:7EDB
cs=0x1a2;eip=0x007edc; 	T(ADD(dl, 2));	// 16729 add     dl, 2 ;~ 01A2:7EDC
cs=0x1a2;eip=0x007edf; 	T(XOR(al, al));	// 16730 xor     al, al ;~ 01A2:7EDF
cs=0x1a2;eip=0x007ee1; 	S(OUT(dx, al));	// 16731 out     dx, al ;~ 01A2:7EE1
cs=0x1a2;eip=0x007ee2; 	T(SUB(dl, 2));	// 16732 sub     dl, 2 ;~ 01A2:7EE2
cs=0x1a2;eip=0x007ee5; 	X(POP(ax));	// 16733 pop     ax ;~ 01A2:7EE5
cs=0x1a2;eip=0x007ee6; 	T(CMP(al, 0x0AA));	// 16734 cmp     al, 0AAh ; 'ª' ;~ 01A2:7EE6
cs=0x1a2;eip=0x007ee8; 	J(JZ(locret_17eeb));	// 16735 jz      short locret_17EEB ;~ 01A2:7EE8
cs=0x1a2;eip=0x007eea; 	T(STC);	// 16736 stc ;~ 01A2:7EEA
locret_17eeb:
	// 5452 
cs=0x1a2;eip=0x007eeb; 	J(RETN(0));	// 16739 retn ;~ 01A2:7EEB

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_gravis_17e86: 	goto _gravis_17e86;
        case m2c::klocret_17eeb: 	goto locret_17eeb;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _useless_17eec(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _useless_17eec:
    _begin:
cs=0x1a2;eip=0x007eec; 	X(MOV(_gravis_port, 0x323));	// 16747 mov     _gravis_port, 323h ;~ 01A2:7EEC
cs=0x1a2;eip=0x007ef2; 	J(CALL(_gravis_17e86,0));	// 16748 call    _gravis_17E86 ;~ 01A2:7EF2
cs=0x1a2;eip=0x007ef5; 	J(JNC(locret_17f2f));	// 16749 jnb     short locret_17F2F ;~ 01A2:7EF5
cs=0x1a2;eip=0x007ef7; 	X(MOV(_gravis_port, 0x343));	// 16750 mov     _gravis_port, 343h ;~ 01A2:7EF7
cs=0x1a2;eip=0x007efd; 	J(CALL(_gravis_17e86,0));	// 16751 call    _gravis_17E86 ;~ 01A2:7EFD
cs=0x1a2;eip=0x007f00; 	J(JNC(locret_17f2f));	// 16752 jnb     short locret_17F2F ;~ 01A2:7F00
cs=0x1a2;eip=0x007f02; 	X(MOV(_gravis_port, 0x313));	// 16753 mov     _gravis_port, 313h ;~ 01A2:7F02
cs=0x1a2;eip=0x007f08; 	J(CALL(_gravis_17e86,0));	// 16754 call    _gravis_17E86 ;~ 01A2:7F08
cs=0x1a2;eip=0x007f0b; 	J(JNC(locret_17f2f));	// 16755 jnb     short locret_17F2F ;~ 01A2:7F0B
cs=0x1a2;eip=0x007f0d; 	X(MOV(_gravis_port, 0x333));	// 16756 mov     _gravis_port, 333h ;~ 01A2:7F0D
cs=0x1a2;eip=0x007f13; 	J(CALL(_gravis_17e86,0));	// 16757 call    _gravis_17E86 ;~ 01A2:7F13
cs=0x1a2;eip=0x007f16; 	J(JNC(locret_17f2f));	// 16758 jnb     short locret_17F2F ;~ 01A2:7F16
cs=0x1a2;eip=0x007f18; 	X(MOV(_gravis_port, 0x353));	// 16759 mov     _gravis_port, 353h ;~ 01A2:7F18
cs=0x1a2;eip=0x007f1e; 	J(CALL(_gravis_17e86,0));	// 16760 call    _gravis_17E86 ;~ 01A2:7F1E
cs=0x1a2;eip=0x007f21; 	J(JNC(locret_17f2f));	// 16761 jnb     short locret_17F2F ;~ 01A2:7F21
cs=0x1a2;eip=0x007f23; 	X(MOV(_gravis_port, 0x363));	// 16762 mov     _gravis_port, 363h ;~ 01A2:7F23
cs=0x1a2;eip=0x007f29; 	J(CALL(_gravis_17e86,0));	// 16763 call    _gravis_17E86 ;~ 01A2:7F29
cs=0x1a2;eip=0x007f2c; 	J(JNC(locret_17f2f));	// 16764 jnb     short locret_17F2F ;~ 01A2:7F2C
cs=0x1a2;eip=0x007f2e; 	T(STC);	// 16765 stc ;~ 01A2:7F2E
locret_17f2f:
	// 5453 
cs=0x1a2;eip=0x007f2f; 	J(RETN(0));	// 16769 retn ;~ 01A2:7F2F

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_useless_17eec: 	goto _useless_17eec;
        case m2c::klocret_17f2f: 	goto locret_17f2f;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _gravis_17f30(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _gravis_17f30:
    _begin:
cs=0x1a2;eip=0x007f30; 	T(MOV(dx, _gravis_port));	// 16777 mov     dx, _gravis_port ;~ 01A2:7F30
cs=0x1a2;eip=0x007f34; 	T(MOV(al, 0x4C));	// 16778 mov     al, 4Ch ; 'L' ;~ 01A2:7F34
cs=0x1a2;eip=0x007f36; 	S(OUT(dx, al));	// 16779 out     dx, al ;~ 01A2:7F36
cs=0x1a2;eip=0x007f37; 	T(ADD(dl, 2));	// 16780 add     dl, 2 ;~ 01A2:7F37
cs=0x1a2;eip=0x007f3a; 	T(MOV(al, 1));	// 16781 mov     al, 1 ;~ 01A2:7F3A
cs=0x1a2;eip=0x007f3c; 	S(OUT(dx, al));	// 16782 out     dx, al ;~ 01A2:7F3C
cs=0x1a2;eip=0x007f3d; 	T(SUB(dl, 2));	// 16783 sub     dl, 2 ;~ 01A2:7F3D
cs=0x1a2;eip=0x007f40; 	T(XOR(edi, edi));	// 16784 xor     edi, edi ;~ 01A2:7F40
cs=0x1a2;eip=0x007f43; 	T(MOV(al, 0x0AA));	// 16785 mov     al, 0AAh ; 'ª' ;~ 01A2:7F43
loc_17f45:
	// 5454 
cs=0x1a2;eip=0x007f45; 	J(CALL(_gravis_17de8,0));	// 16788 call    _gravis_17DE8 ;~ 01A2:7F45
cs=0x1a2;eip=0x007f48; 	J(CALL(_gravis_17dc6,0));	// 16789 call    _gravis_17DC6 ;~ 01A2:7F48
cs=0x1a2;eip=0x007f4b; 	T(CMP(al, 0x0AA));	// 16790 cmp     al, 0AAh ; 'ª' ;~ 01A2:7F4B
cs=0x1a2;eip=0x007f4d; 	J(JNZ(loc_17f65));	// 16791 jnz     short loc_17F65 ;~ 01A2:7F4D
cs=0x1a2;eip=0x007f4f; 	T(ADD(edi, 0x40000));	// 16792 add     edi, 40000h ;~ 01A2:7F4F
cs=0x1a2;eip=0x007f56; 	T(CMP(edi, 0x100000));	// 16793 cmp     edi, 100000h ;~ 01A2:7F56
cs=0x1a2;eip=0x007f5d; 	J(JBE(loc_17f45));	// 16794 jbe     short loc_17F45 ;~ 01A2:7F5D
cs=0x1a2;eip=0x007f5f; 	T(MOV(edi, 0x100000));	// 16795 mov     edi, 100000h ;~ 01A2:7F5F
loc_17f65:
	// 5455 
cs=0x1a2;eip=0x007f65; 	T(MOV(dx, _gravis_port));	// 16798 mov     dx, _gravis_port ;~ 01A2:7F65
cs=0x1a2;eip=0x007f69; 	T(MOV(al, 0x4C));	// 16799 mov     al, 4Ch ; 'L' ;~ 01A2:7F69
cs=0x1a2;eip=0x007f6b; 	S(OUT(dx, al));	// 16800 out     dx, al ;~ 01A2:7F6B
cs=0x1a2;eip=0x007f6c; 	T(ADD(dl, 2));	// 16801 add     dl, 2 ;~ 01A2:7F6C
cs=0x1a2;eip=0x007f6f; 	T(XOR(al, al));	// 16802 xor     al, al ;~ 01A2:7F6F
cs=0x1a2;eip=0x007f71; 	S(OUT(dx, al));	// 16803 out     dx, al ;~ 01A2:7F71
cs=0x1a2;eip=0x007f72; 	T(SUB(dl, 2));	// 16804 sub     dl, 2 ;~ 01A2:7F72
cs=0x1a2;eip=0x007f75; 	T(MOV(eax, edi));	// 16805 mov     eax, edi ;~ 01A2:7F75
cs=0x1a2;eip=0x007f78; 	T(SHR(eax, 0x12));	// 16806 shr     eax, 12h ;~ 01A2:7F78
cs=0x1a2;eip=0x007f7c; 	J(RETN(0));	// 16807 retn ;~ 01A2:7F7C

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_gravis_17f30: 	goto _gravis_17f30;
        case m2c::kloc_17f45: 	goto loc_17f45;
        case m2c::kloc_17f65: 	goto loc_17f65;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group27(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group27:
    _begin:
_gravis_17f7d:
	// 16814 
cs=0x1a2;eip=0x007f7d; 	T(MOV(ah, 0x62));	// 16818 mov     ah, 62h ;~ 01A2:7F7D
cs=0x1a2;eip=0x007f7f; 	S(_INT(0x21));	// 16819 int     21h             ; DOS - 3+ - GET PSP ADDRESS ;~ 01A2:7F7F
cs=0x1a2;eip=0x007f81; 	T(MOV(es, bx));	// 16820 mov     es, bx ;~ 01A2:7F81
cs=0x1a2;eip=0x007f83; 	T(MOV(es, *(dw*)(raddr(es,0x2C))));	// 16821 mov     es, word ptr es:2Ch ;~ 01A2:7F83
cs=0x1a2;eip=0x007f88; 	T(XOR(di, di));	// 16822 xor     di, di ;~ 01A2:7F88
loc_17f8a:
	// 5456 
cs=0x1a2;eip=0x007f8a; 	T(CMP(*(raddr(es,di)), 0));	// 16826 cmp     byte ptr es:[di], 0 ;~ 01A2:7F8A
cs=0x1a2;eip=0x007f8e; 	J(JZ(loc_18077));	// 16827 jz      loc_18077 ;~ 01A2:7F8E
cs=0x1a2;eip=0x007f92; 	T(CMP(*(dd*)(raddr(es,di)), 0x52544C55));	// 16828 cmp     dword ptr es:[di], 52544C55h ; ULTRSND= ;~ 01A2:7F92
cs=0x1a2;eip=0x007f9a; 	J(JNZ(loc_17fa7));	// 16829 jnz     short loc_17FA7 ;~ 01A2:7F9A
cs=0x1a2;eip=0x007f9c; 	T(CMP(*(dd*)(raddr(es,di+4)), 0x444E5341));	// 16830 cmp     dword ptr es:[di+4], 444E5341h ;~ 01A2:7F9C
cs=0x1a2;eip=0x007fa5; 	J(JZ(loc_17fb1));	// 16831 jz      short loc_17FB1 ;~ 01A2:7FA5
loc_17fa7:
	// 5457 
cs=0x1a2;eip=0x007fa7; 	T(INC(di));	// 16835 inc     di ;~ 01A2:7FA7
loc_17fa8:
	// 5458 
cs=0x1a2;eip=0x007fa8; 	T(CMP(*(raddr(es,di)), 0));	// 16839 cmp     byte ptr es:[di], 0 ;~ 01A2:7FA8
cs=0x1a2;eip=0x007fac; 	J(JNZ(loc_17fa7));	// 16840 jnz     short loc_17FA7 ;~ 01A2:7FAC
cs=0x1a2;eip=0x007fae; 	T(INC(di));	// 16841 inc     di ;~ 01A2:7FAE
cs=0x1a2;eip=0x007faf; 	J(JMP(loc_17f8a));	// 16842 jmp     short loc_17F8A ;~ 01A2:7FAF
loc_17fb1:
	// 5459 
cs=0x1a2;eip=0x007fb1; 	T(ADD(di, 8));	// 16846 add     di, 8 ;~ 01A2:7FB1
loc_17fb4:
	// 5460 
cs=0x1a2;eip=0x007fb4; 	T(MOV(al, *(raddr(es,di))));	// 16849 mov     al, es:[di] ;~ 01A2:7FB4
cs=0x1a2;eip=0x007fb7; 	T(INC(di));	// 16850 inc     di ;~ 01A2:7FB7
cs=0x1a2;eip=0x007fb8; 	T(CMP(al, 0x20));	// 16851 cmp     al, 20h ; ' ' ;~ 01A2:7FB8
cs=0x1a2;eip=0x007fba; 	J(JZ(loc_17fb4));	// 16852 jz      short loc_17FB4 ;~ 01A2:7FBA
cs=0x1a2;eip=0x007fbc; 	T(OR(al, al));	// 16853 or      al, al ;~ 01A2:7FBC
cs=0x1a2;eip=0x007fbe; 	J(JZ(loc_17f8a));	// 16854 jz      short loc_17F8A ;~ 01A2:7FBE
cs=0x1a2;eip=0x007fc0; 	T(CMP(al, 0x3D));	// 16855 cmp     al, 3Dh ; '=' ;~ 01A2:7FC0
cs=0x1a2;eip=0x007fc2; 	J(JNZ(loc_17fa8));	// 16856 jnz     short loc_17FA8 ;~ 01A2:7FC2
loc_17fc4:
	// 5461 
cs=0x1a2;eip=0x007fc4; 	T(MOV(al, *(raddr(es,di))));	// 16859 mov     al, es:[di] ;~ 01A2:7FC4
cs=0x1a2;eip=0x007fc7; 	T(OR(al, al));	// 16860 or      al, al ;~ 01A2:7FC7
cs=0x1a2;eip=0x007fc9; 	J(JZ(loc_17f8a));	// 16861 jz      short loc_17F8A ;~ 01A2:7FC9
cs=0x1a2;eip=0x007fcb; 	T(CMP(al, 0x20));	// 16862 cmp     al, 20h ; ' ' ;~ 01A2:7FCB
cs=0x1a2;eip=0x007fcd; 	J(JNZ(loc_17fd2));	// 16863 jnz     short loc_17FD2 ;~ 01A2:7FCD
cs=0x1a2;eip=0x007fcf; 	T(INC(di));	// 16864 inc     di ;~ 01A2:7FCF
cs=0x1a2;eip=0x007fd0; 	J(JMP(loc_17fc4));	// 16865 jmp     short loc_17FC4 ;~ 01A2:7FD0
loc_17fd2:
	// 5462 
cs=0x1a2;eip=0x007fd2; 	J(CALL(_gravis_18062,0));	// 16869 call    _gravis_18062 ;~ 01A2:7FD2
cs=0x1a2;eip=0x007fd5; 	T(MOV(dh, al));	// 16870 mov     dh, al ;~ 01A2:7FD5
cs=0x1a2;eip=0x007fd7; 	J(CALL(_gravis_18062,0));	// 16871 call    _gravis_18062 ;~ 01A2:7FD7
cs=0x1a2;eip=0x007fda; 	T(MOV(dl, al));	// 16872 mov     dl, al ;~ 01A2:7FDA
cs=0x1a2;eip=0x007fdc; 	T(SHL(dl, 4));	// 16873 shl     dl, 4 ;~ 01A2:7FDC
cs=0x1a2;eip=0x007fdf; 	J(CALL(_gravis_18062,0));	// 16874 call    _gravis_18062 ;~ 01A2:7FDF
cs=0x1a2;eip=0x007fe2; 	T(OR(dl, al));	// 16875 or      dl, al ;~ 01A2:7FE2
loc_17fe4:
	// 5463 
cs=0x1a2;eip=0x007fe4; 	T(MOV(al, *(raddr(es,di))));	// 16878 mov     al, es:[di] ;~ 01A2:7FE4
cs=0x1a2;eip=0x007fe7; 	T(INC(di));	// 16879 inc     di ;~ 01A2:7FE7
cs=0x1a2;eip=0x007fe8; 	T(CMP(al, 0x20));	// 16880 cmp     al, 20h ; ' ' ;~ 01A2:7FE8
cs=0x1a2;eip=0x007fea; 	J(JZ(loc_17fe4));	// 16881 jz      short loc_17FE4 ;~ 01A2:7FEA
cs=0x1a2;eip=0x007fec; 	T(OR(al, al));	// 16882 or      al, al ;~ 01A2:7FEC
cs=0x1a2;eip=0x007fee; 	J(JZ(loc_17f8a));	// 16883 jz      short loc_17F8A ;~ 01A2:7FEE
cs=0x1a2;eip=0x007ff0; 	T(CMP(al, 0x2C));	// 16884 cmp     al, 2Ch ; ',' ;~ 01A2:7FF0
cs=0x1a2;eip=0x007ff2; 	J(JNZ(loc_17fa8));	// 16885 jnz     short loc_17FA8 ;~ 01A2:7FF2
cs=0x1a2;eip=0x007ff4; 	J(CALL(_gravis_18062,0));	// 16886 call    _gravis_18062 ;~ 01A2:7FF4
cs=0x1a2;eip=0x007ff7; 	T(MOV(cl, al));	// 16887 mov     cl, al ;~ 01A2:7FF7
loc_17ff9:
	// 5464 
cs=0x1a2;eip=0x007ff9; 	T(MOV(al, *(raddr(es,di))));	// 16890 mov     al, es:[di] ;~ 01A2:7FF9
cs=0x1a2;eip=0x007ffc; 	T(INC(di));	// 16891 inc     di ;~ 01A2:7FFC
cs=0x1a2;eip=0x007ffd; 	T(CMP(al, 0x20));	// 16892 cmp     al, 20h ; ' ' ;~ 01A2:7FFD
cs=0x1a2;eip=0x007fff; 	J(JZ(loc_17ff9));	// 16893 jz      short loc_17FF9 ;~ 01A2:7FFF
cs=0x1a2;eip=0x008001; 	T(OR(al, al));	// 16894 or      al, al ;~ 01A2:8001
cs=0x1a2;eip=0x008003; 	J(JZ(loc_17f8a));	// 16895 jz      short loc_17F8A ;~ 01A2:8003
cs=0x1a2;eip=0x008005; 	T(CMP(al, 0x2C));	// 16896 cmp     al, 2Ch ; ',' ;~ 01A2:8005
cs=0x1a2;eip=0x008007; 	J(JNZ(loc_17fa8));	// 16897 jnz     short loc_17FA8 ;~ 01A2:8007
cs=0x1a2;eip=0x008009; 	J(CALL(_gravis_18062,0));	// 16898 call    _gravis_18062 ;~ 01A2:8009
cs=0x1a2;eip=0x00800c; 	T(MOV(ch, al));	// 16899 mov     ch, al ;~ 01A2:800C
loc_1800e:
	// 5465 
cs=0x1a2;eip=0x00800e; 	T(MOV(al, *(raddr(es,di))));	// 16902 mov     al, es:[di] ;~ 01A2:800E
cs=0x1a2;eip=0x008011; 	T(INC(di));	// 16903 inc     di ;~ 01A2:8011
cs=0x1a2;eip=0x008012; 	T(CMP(al, 0x20));	// 16904 cmp     al, 20h ; ' ' ;~ 01A2:8012
cs=0x1a2;eip=0x008014; 	J(JZ(loc_1800e));	// 16905 jz      short loc_1800E ;~ 01A2:8014
cs=0x1a2;eip=0x008016; 	T(OR(al, al));	// 16906 or      al, al ;~ 01A2:8016
cs=0x1a2;eip=0x008018; 	J(JZ(loc_17f8a));	// 16907 jz      loc_17F8A ;~ 01A2:8018
cs=0x1a2;eip=0x00801c; 	T(CMP(al, 0x2C));	// 16908 cmp     al, 2Ch ; ',' ;~ 01A2:801C
cs=0x1a2;eip=0x00801e; 	J(JNZ(loc_17fa8));	// 16909 jnz     short loc_17FA8 ;~ 01A2:801E
cs=0x1a2;eip=0x008020; 	J(CALL(_gravis_18062,0));	// 16910 call    _gravis_18062 ;~ 01A2:8020
cs=0x1a2;eip=0x008023; 	T(MOV(bl, al));	// 16911 mov     bl, al ;~ 01A2:8023
cs=0x1a2;eip=0x008025; 	T(CMP(*(raddr(es,di)), 0x2C));	// 16912 cmp     byte ptr es:[di], 2Ch ; ',' ;~ 01A2:8025
cs=0x1a2;eip=0x008029; 	J(JZ(loc_18036));	// 16913 jz      short loc_18036 ;~ 01A2:8029
cs=0x1a2;eip=0x00802b; 	T(MOV(al, 0x0A));	// 16914 mov     al, 0Ah ;~ 01A2:802B
cs=0x1a2;eip=0x00802d; 	T(MUL1_1(bl));	// 16915 mul     bl ;~ 01A2:802D
cs=0x1a2;eip=0x00802f; 	T(MOV(bl, al));	// 16916 mov     bl, al ;~ 01A2:802F
cs=0x1a2;eip=0x008031; 	J(CALL(_gravis_18062,0));	// 16917 call    _gravis_18062 ;~ 01A2:8031
cs=0x1a2;eip=0x008034; 	T(ADD(bl, al));	// 16918 add     bl, al ;~ 01A2:8034
loc_18036:
	// 5466 
cs=0x1a2;eip=0x008036; 	T(MOV(al, *(raddr(es,di))));	// 16922 mov     al, es:[di] ;~ 01A2:8036
cs=0x1a2;eip=0x008039; 	T(INC(di));	// 16923 inc     di ;~ 01A2:8039
cs=0x1a2;eip=0x00803a; 	T(CMP(al, 0x20));	// 16924 cmp     al, 20h ; ' ' ;~ 01A2:803A
cs=0x1a2;eip=0x00803c; 	J(JZ(loc_18036));	// 16925 jz      short loc_18036 ;~ 01A2:803C
cs=0x1a2;eip=0x00803e; 	T(OR(al, al));	// 16926 or      al, al ;~ 01A2:803E
cs=0x1a2;eip=0x008040; 	J(JZ(loc_17f8a));	// 16927 jz      loc_17F8A ;~ 01A2:8040
cs=0x1a2;eip=0x008044; 	T(CMP(al, 0x2C));	// 16928 cmp     al, 2Ch ; ',' ;~ 01A2:8044
cs=0x1a2;eip=0x008046; 	J(JNZ(loc_17fa8));	// 16929 jnz     loc_17FA8 ;~ 01A2:8046
cs=0x1a2;eip=0x00804a; 	J(CALL(_gravis_18062,0));	// 16930 call    _gravis_18062 ;~ 01A2:804A
cs=0x1a2;eip=0x00804d; 	T(MOV(bh, al));	// 16931 mov     bh, al ;~ 01A2:804D
cs=0x1a2;eip=0x00804f; 	T(CMP(*(raddr(es,di)), 0));	// 16932 cmp     byte ptr es:[di], 0 ;~ 01A2:804F
cs=0x1a2;eip=0x008053; 	J(JZ(loc_18060));	// 16933 jz      short loc_18060 ;~ 01A2:8053
cs=0x1a2;eip=0x008055; 	T(MOV(al, 0x0A));	// 16934 mov     al, 0Ah ;~ 01A2:8055
cs=0x1a2;eip=0x008057; 	T(MUL1_1(bh));	// 16935 mul     bh ;~ 01A2:8057
cs=0x1a2;eip=0x008059; 	T(MOV(bh, al));	// 16936 mov     bh, al ;~ 01A2:8059
cs=0x1a2;eip=0x00805b; 	J(CALL(_gravis_18062,0));	// 16937 call    _gravis_18062 ;~ 01A2:805B
cs=0x1a2;eip=0x00805e; 	T(ADD(bh, al));	// 16938 add     bh, al ;~ 01A2:805E
loc_18060:
	// 5467 
cs=0x1a2;eip=0x008060; 	T(CLC);	// 16941 clc ;~ 01A2:8060
cs=0x1a2;eip=0x008061; 	J(RETN(0));	// 16942 retn ;~ 01A2:8061
seg000_8077_proc:
	// 16971 
loc_18077:
	// 5469 
cs=0x1a2;eip=0x008077; 	T(STC);	// 16972 stc ;~ 01A2:8077
cs=0x1a2;eip=0x008078; 	J(RETN(0));	// 16973 retn ;~ 01A2:8078

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_gravis_17f7d: 	goto _gravis_17f7d;
        case m2c::kloc_17f8a: 	goto loc_17f8a;
        case m2c::kloc_17fa7: 	goto loc_17fa7;
        case m2c::kloc_17fa8: 	goto loc_17fa8;
        case m2c::kloc_17fb1: 	goto loc_17fb1;
        case m2c::kloc_17fb4: 	goto loc_17fb4;
        case m2c::kloc_17fc4: 	goto loc_17fc4;
        case m2c::kloc_17fd2: 	goto loc_17fd2;
        case m2c::kloc_17fe4: 	goto loc_17fe4;
        case m2c::kloc_17ff9: 	goto loc_17ff9;
        case m2c::kloc_1800e: 	goto loc_1800e;
        case m2c::kloc_18036: 	goto loc_18036;
        case m2c::kloc_18060: 	goto loc_18060;
        case m2c::kseg000_8077_proc: 	goto seg000_8077_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _gravis_18062(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _gravis_18062:
    _begin:
cs=0x1a2;eip=0x008062; 	T(MOV(al, *(raddr(es,di))));	// 16951 mov     al, es:[di] ;~ 01A2:8062
cs=0x1a2;eip=0x008065; 	T(INC(di));	// 16952 inc     di ;~ 01A2:8065
cs=0x1a2;eip=0x008066; 	T(OR(al, al));	// 16953 or      al, al ;~ 01A2:8066
cs=0x1a2;eip=0x008068; 	J(JZ(loc_18073));	// 16954 jz      short loc_18073 ;~ 01A2:8068
cs=0x1a2;eip=0x00806a; 	T(SUB(al, 0x30));	// 16955 sub     al, 30h ; '0' ;~ 01A2:806A
cs=0x1a2;eip=0x00806c; 	J(JC(loc_18073));	// 16956 jb      short loc_18073 ;~ 01A2:806C
cs=0x1a2;eip=0x00806e; 	T(CMP(al, 9));	// 16957 cmp     al, 9 ;~ 01A2:806E
cs=0x1a2;eip=0x008070; 	J(JA(loc_18073));	// 16958 ja      short loc_18073 ;~ 01A2:8070
cs=0x1a2;eip=0x008072; 	J(RETN(0));	// 16959 retn ;~ 01A2:8072
loc_18073:
	// 5468 
cs=0x1a2;eip=0x008073; 	X(POP(ax));	// 16964 pop     ax ;~ 01A2:8073
cs=0x1a2;eip=0x008074; 	J(return _group27(m2c::kloc_17f8a, _state););	// 16965 jmp     loc_17F8A ;~ 01A2:8074

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_gravis_18062: 	goto _gravis_18062;
        case m2c::kloc_18073: 	goto loc_18073;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _gravis_18079(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _gravis_18079:
    _begin:
cs=0x1a2;eip=0x008079; 	T(TEST(*(db*)(((db*)&_config_word)), 0x40));	// 16981 test    byte ptr _config_word, 40h ;~ 01A2:8079
cs=0x1a2;eip=0x00807e; 	J(JZ(loc_18082));	// 16982 jz      short loc_18082 ;~ 01A2:807E
cs=0x1a2;eip=0x008080; 	T(MOV(al, 0x20));	// 16983 mov     al, 20h ; ' ' ;~ 01A2:8080
loc_18082:
	// 5470 
cs=0x1a2;eip=0x008082; 	T(CMP(al, 0x0E));	// 16986 cmp     al, 0Eh ;~ 01A2:8082
cs=0x1a2;eip=0x008084; 	J(JA(loc_18088));	// 16987 ja      short loc_18088 ;~ 01A2:8084
cs=0x1a2;eip=0x008086; 	T(MOV(al, 0x0E));	// 16988 mov     al, 0Eh ;~ 01A2:8086
loc_18088:
	// 5471 
cs=0x1a2;eip=0x008088; 	X(MOV(byte_24629, al));	// 16991 mov     byte_24629, al ;~ 01A2:8088
cs=0x1a2;eip=0x00808b; 	T(MOVZX(cx, al));	// 16992 movzx   cx, al ;~ 01A2:808B
cs=0x1a2;eip=0x00808e; 	T(MOV(dx, 9));	// 16993 mov     dx, 9 ;~ 01A2:808E
cs=0x1a2;eip=0x008091; 	T(MOV(ax, 0x6BB8));	// 16994 mov     ax, 6BB8h ;~ 01A2:8091
cs=0x1a2;eip=0x008094; 	T(DIV2(cx));	// 16995 div     cx ;~ 01A2:8094
cs=0x1a2;eip=0x008096; 	X(MOV(_freq2, ax));	// 16996 mov     _freq2, ax ;~ 01A2:8096
cs=0x1a2;eip=0x008099; 	X(PUSHF);	// 16997 pushf ;~ 01A2:8099
cs=0x1a2;eip=0x00809a; 	T(CLI);	// 16998 cli ;~ 01A2:809A
cs=0x1a2;eip=0x00809b; 	T(MOV(dx, _gravis_port));	// 16999 mov     dx, _gravis_port ;~ 01A2:809B
cs=0x1a2;eip=0x00809f; 	T(MOV(al, 0x4C));	// 17000 mov     al, 4Ch ; 'L' ;~ 01A2:809F
cs=0x1a2;eip=0x0080a1; 	S(OUT(dx, al));	// 17001 out     dx, al ;~ 01A2:80A1
cs=0x1a2;eip=0x0080a2; 	T(ADD(dl, 2));	// 17002 add     dl, 2 ;~ 01A2:80A2
cs=0x1a2;eip=0x0080a5; 	T(XOR(al, al));	// 17003 xor     al, al ;~ 01A2:80A5
cs=0x1a2;eip=0x0080a7; 	S(OUT(dx, al));	// 17004 out     dx, al ;~ 01A2:80A7
cs=0x1a2;eip=0x0080a8; 	T(SUB(dl, 2));	// 17005 sub     dl, 2 ;~ 01A2:80A8
cs=0x1a2;eip=0x0080ab; 	T(MOV(cx, 0x10));	// 17006 mov     cx, 10h ;~ 01A2:80AB
cs=0x1a2;eip=0x0080ae; 	J(CALL(_gravis_18201,0));	// 17007 call    _gravis_18201 ;~ 01A2:80AE
cs=0x1a2;eip=0x0080b1; 	T(MOV(al, 0x4C));	// 17008 mov     al, 4Ch ; 'L' ;~ 01A2:80B1
cs=0x1a2;eip=0x0080b3; 	S(OUT(dx, al));	// 17009 out     dx, al ;~ 01A2:80B3
cs=0x1a2;eip=0x0080b4; 	T(ADD(dl, 2));	// 17010 add     dl, 2 ;~ 01A2:80B4
cs=0x1a2;eip=0x0080b7; 	T(MOV(al, 1));	// 17011 mov     al, 1 ;~ 01A2:80B7
cs=0x1a2;eip=0x0080b9; 	S(OUT(dx, al));	// 17012 out     dx, al ;~ 01A2:80B9
cs=0x1a2;eip=0x0080ba; 	T(SUB(dl, 2));	// 17013 sub     dl, 2 ;~ 01A2:80BA
cs=0x1a2;eip=0x0080bd; 	T(MOV(cx, 0x10));	// 17014 mov     cx, 10h ;~ 01A2:80BD
cs=0x1a2;eip=0x0080c0; 	J(CALL(_gravis_18201,0));	// 17015 call    _gravis_18201 ;~ 01A2:80C0
cs=0x1a2;eip=0x0080c3; 	T(SUB(dx, 3));	// 17016 sub     dx, 3 ;~ 01A2:80C3
cs=0x1a2;eip=0x0080c6; 	T(MOV(al, 3));	// 17017 mov     al, 3 ;~ 01A2:80C6
cs=0x1a2;eip=0x0080c8; 	S(OUT(dx, al));	// 17018 out     dx, al ;~ 01A2:80C8
cs=0x1a2;eip=0x0080c9; 	T(MOV(cx, 0x10));	// 17019 mov     cx, 10h ;~ 01A2:80C9
cs=0x1a2;eip=0x0080cc; 	J(CALL(_gravis_18201,0));	// 17020 call    _gravis_18201 ;~ 01A2:80CC
cs=0x1a2;eip=0x0080cf; 	T(XOR(al, al));	// 17021 xor     al, al ;~ 01A2:80CF
cs=0x1a2;eip=0x0080d1; 	S(OUT(dx, al));	// 17022 out     dx, al ;~ 01A2:80D1
cs=0x1a2;eip=0x0080d2; 	T(ADD(dx, 3));	// 17023 add     dx, 3 ;~ 01A2:80D2
cs=0x1a2;eip=0x0080d5; 	T(MOV(al, 0x41));	// 17024 mov     al, 41h ; 'A' ;~ 01A2:80D5
cs=0x1a2;eip=0x0080d7; 	S(OUT(dx, al));	// 17025 out     dx, al ;~ 01A2:80D7
cs=0x1a2;eip=0x0080d8; 	T(ADD(dl, 2));	// 17026 add     dl, 2 ;~ 01A2:80D8
cs=0x1a2;eip=0x0080db; 	T(XOR(al, al));	// 17027 xor     al, al ;~ 01A2:80DB
cs=0x1a2;eip=0x0080dd; 	S(OUT(dx, al));	// 17028 out     dx, al ;~ 01A2:80DD
cs=0x1a2;eip=0x0080de; 	T(SUB(dl, 2));	// 17029 sub     dl, 2 ;~ 01A2:80DE
cs=0x1a2;eip=0x0080e1; 	T(MOV(al, 0x45));	// 17030 mov     al, 45h ; 'E' ;~ 01A2:80E1
cs=0x1a2;eip=0x0080e3; 	S(OUT(dx, al));	// 17031 out     dx, al ;~ 01A2:80E3
cs=0x1a2;eip=0x0080e4; 	T(ADD(dl, 2));	// 17032 add     dl, 2 ;~ 01A2:80E4
cs=0x1a2;eip=0x0080e7; 	T(XOR(al, al));	// 17033 xor     al, al ;~ 01A2:80E7
cs=0x1a2;eip=0x0080e9; 	S(OUT(dx, al));	// 17034 out     dx, al ;~ 01A2:80E9
cs=0x1a2;eip=0x0080ea; 	T(SUB(dl, 2));	// 17035 sub     dl, 2 ;~ 01A2:80EA
cs=0x1a2;eip=0x0080ed; 	T(MOV(al, 0x49));	// 17036 mov     al, 49h ; 'I' ;~ 01A2:80ED
cs=0x1a2;eip=0x0080ef; 	S(OUT(dx, al));	// 17037 out     dx, al ;~ 01A2:80EF
cs=0x1a2;eip=0x0080f0; 	T(ADD(dl, 2));	// 17038 add     dl, 2 ;~ 01A2:80F0
cs=0x1a2;eip=0x0080f3; 	T(XOR(al, al));	// 17039 xor     al, al ;~ 01A2:80F3
cs=0x1a2;eip=0x0080f5; 	S(OUT(dx, al));	// 17040 out     dx, al ;~ 01A2:80F5
cs=0x1a2;eip=0x0080f6; 	T(SUB(dl, 2));	// 17041 sub     dl, 2 ;~ 01A2:80F6
cs=0x1a2;eip=0x0080f9; 	T(MOV(ah, byte_24629));	// 17042 mov     ah, byte_24629 ;~ 01A2:80F9
cs=0x1a2;eip=0x0080fd; 	T(DEC(ah));	// 17043 dec     ah ;~ 01A2:80FD
cs=0x1a2;eip=0x0080ff; 	T(AND(ah, 0x1F));	// 17044 and     ah, 1Fh ;~ 01A2:80FF
cs=0x1a2;eip=0x008102; 	T(OR(ah, 0x0C0));	// 17045 or      ah, 0C0h ;~ 01A2:8102
cs=0x1a2;eip=0x008105; 	T(MOV(al, 0x0E));	// 17046 mov     al, 0Eh ;~ 01A2:8105
cs=0x1a2;eip=0x008107; 	S(OUT(dx, al));	// 17047 out     dx, al ;~ 01A2:8107
cs=0x1a2;eip=0x008108; 	T(ADD(dl, 2));	// 17048 add     dl, 2 ;~ 01A2:8108
cs=0x1a2;eip=0x00810b; 	T(MOV(al, ah));	// 17049 mov     al, ah ;~ 01A2:810B
cs=0x1a2;eip=0x00810d; 	S(OUT(dx, al));	// 17050 out     dx, al ;~ 01A2:810D
cs=0x1a2;eip=0x00810e; 	T(SUB(dl, 2));	// 17051 sub     dl, 2 ;~ 01A2:810E
cs=0x1a2;eip=0x008111; 	T(SUB(dx, 0x0FD));	// 17052 sub     dx, 0FDh ; 'ý' ;~ 01A2:8111
cs=0x1a2;eip=0x008115; 	S(IN(al, dx));	// 17053 in      al, dx ;~ 01A2:8115
cs=0x1a2;eip=0x008116; 	T(ADD(dx, 0x0FD));	// 17054 add     dx, 0FDh ; 'ý' ;~ 01A2:8116
cs=0x1a2;eip=0x00811a; 	T(MOV(al, 0x41));	// 17055 mov     al, 41h ; 'A' ;~ 01A2:811A
cs=0x1a2;eip=0x00811c; 	S(OUT(dx, al));	// 17056 out     dx, al ;~ 01A2:811C
cs=0x1a2;eip=0x00811d; 	T(ADD(dl, 2));	// 17057 add     dl, 2 ;~ 01A2:811D
cs=0x1a2;eip=0x008120; 	S(IN(al, dx));	// 17058 in      al, dx ;~ 01A2:8120
cs=0x1a2;eip=0x008121; 	T(SUB(dl, 2));	// 17059 sub     dl, 2 ;~ 01A2:8121
cs=0x1a2;eip=0x008124; 	T(MOV(al, 0x49));	// 17060 mov     al, 49h ; 'I' ;~ 01A2:8124
cs=0x1a2;eip=0x008126; 	S(OUT(dx, al));	// 17061 out     dx, al ;~ 01A2:8126
cs=0x1a2;eip=0x008127; 	T(ADD(dl, 2));	// 17062 add     dl, 2 ;~ 01A2:8127
cs=0x1a2;eip=0x00812a; 	S(IN(al, dx));	// 17063 in      al, dx ;~ 01A2:812A
cs=0x1a2;eip=0x00812b; 	T(SUB(dl, 2));	// 17064 sub     dl, 2 ;~ 01A2:812B
cs=0x1a2;eip=0x00812e; 	T(MOV(al, 0x8F));	// 17065 mov     al, 8Fh ;~ 01A2:812E
cs=0x1a2;eip=0x008130; 	S(OUT(dx, al));	// 17066 out     dx, al ;~ 01A2:8130
cs=0x1a2;eip=0x008131; 	T(ADD(dl, 2));	// 17067 add     dl, 2 ;~ 01A2:8131
cs=0x1a2;eip=0x008134; 	S(IN(al, dx));	// 17068 in      al, dx ;~ 01A2:8134
cs=0x1a2;eip=0x008135; 	T(SUB(dl, 2));	// 17069 sub     dl, 2 ;~ 01A2:8135
cs=0x1a2;eip=0x008138; 	T(XOR(bl, bl));	// 17070 xor     bl, bl ;~ 01A2:8138
loc_1813a:
	// 5472 
cs=0x1a2;eip=0x00813a; 	T(DEC(dx));	// 17073 dec     dx ;~ 01A2:813A
cs=0x1a2;eip=0x00813b; 	T(MOV(al, bl));	// 17074 mov     al, bl ;~ 01A2:813B
cs=0x1a2;eip=0x00813d; 	S(OUT(dx, al));	// 17075 out     dx, al ;~ 01A2:813D
cs=0x1a2;eip=0x00813e; 	T(INC(dx));	// 17076 inc     dx ;~ 01A2:813E
cs=0x1a2;eip=0x00813f; 	T(MOV(al, 0));	// 17077 mov     al, 0 ;~ 01A2:813F
cs=0x1a2;eip=0x008141; 	S(OUT(dx, al));	// 17078 out     dx, al ;~ 01A2:8141
cs=0x1a2;eip=0x008142; 	T(ADD(dl, 2));	// 17079 add     dl, 2 ;~ 01A2:8142
cs=0x1a2;eip=0x008145; 	T(MOV(al, 3));	// 17080 mov     al, 3 ;~ 01A2:8145
cs=0x1a2;eip=0x008147; 	S(OUT(dx, al));	// 17081 out     dx, al ;~ 01A2:8147
cs=0x1a2;eip=0x008148; 	T(SUB(dl, 2));	// 17082 sub     dl, 2 ;~ 01A2:8148
cs=0x1a2;eip=0x00814b; 	T(MOV(al, 0x0D));	// 17083 mov     al, 0Dh ;~ 01A2:814B
cs=0x1a2;eip=0x00814d; 	S(OUT(dx, al));	// 17084 out     dx, al ;~ 01A2:814D
cs=0x1a2;eip=0x00814e; 	T(ADD(dl, 2));	// 17085 add     dl, 2 ;~ 01A2:814E
cs=0x1a2;eip=0x008151; 	T(MOV(al, 3));	// 17086 mov     al, 3 ;~ 01A2:8151
cs=0x1a2;eip=0x008153; 	S(OUT(dx, al));	// 17087 out     dx, al ;~ 01A2:8153
cs=0x1a2;eip=0x008154; 	T(SUB(dl, 2));	// 17088 sub     dl, 2 ;~ 01A2:8154
cs=0x1a2;eip=0x008157; 	T(MOV(cx, 8));	// 17089 mov     cx, 8 ;~ 01A2:8157
cs=0x1a2;eip=0x00815a; 	J(CALL(_gravis_18201,0));	// 17090 call    _gravis_18201 ;~ 01A2:815A
cs=0x1a2;eip=0x00815d; 	T(MOV(al, 1));	// 17091 mov     al, 1 ;~ 01A2:815D
cs=0x1a2;eip=0x00815f; 	S(OUT(dx, al));	// 17092 out     dx, al ;~ 01A2:815F
cs=0x1a2;eip=0x008160; 	T(INC(dx));	// 17093 inc     dx ;~ 01A2:8160
cs=0x1a2;eip=0x008161; 	T(MOV(ax, 0x400));	// 17094 mov     ax, 400h ;~ 01A2:8161
cs=0x1a2;eip=0x008164; 	S(OUT(dx, ax));	// 17095 out     dx, ax ;~ 01A2:8164
cs=0x1a2;eip=0x008165; 	T(DEC(dx));	// 17096 dec     dx ;~ 01A2:8165
cs=0x1a2;eip=0x008166; 	T(MOV(al, 2));	// 17097 mov     al, 2 ;~ 01A2:8166
cs=0x1a2;eip=0x008168; 	S(OUT(dx, al));	// 17098 out     dx, al ;~ 01A2:8168
cs=0x1a2;eip=0x008169; 	T(INC(dx));	// 17099 inc     dx ;~ 01A2:8169
cs=0x1a2;eip=0x00816a; 	T(XOR(ax, ax));	// 17100 xor     ax, ax ;~ 01A2:816A
cs=0x1a2;eip=0x00816c; 	S(OUT(dx, ax));	// 17101 out     dx, ax ;~ 01A2:816C
cs=0x1a2;eip=0x00816d; 	T(DEC(dx));	// 17102 dec     dx ;~ 01A2:816D
cs=0x1a2;eip=0x00816e; 	T(MOV(al, 3));	// 17103 mov     al, 3 ;~ 01A2:816E
cs=0x1a2;eip=0x008170; 	S(OUT(dx, al));	// 17104 out     dx, al ;~ 01A2:8170
cs=0x1a2;eip=0x008171; 	T(INC(dx));	// 17105 inc     dx ;~ 01A2:8171
cs=0x1a2;eip=0x008172; 	T(XOR(ax, ax));	// 17106 xor     ax, ax ;~ 01A2:8172
cs=0x1a2;eip=0x008174; 	S(OUT(dx, ax));	// 17107 out     dx, ax ;~ 01A2:8174
cs=0x1a2;eip=0x008175; 	T(DEC(dx));	// 17108 dec     dx ;~ 01A2:8175
cs=0x1a2;eip=0x008176; 	T(MOV(al, 4));	// 17109 mov     al, 4 ;~ 01A2:8176
cs=0x1a2;eip=0x008178; 	S(OUT(dx, al));	// 17110 out     dx, al ;~ 01A2:8178
cs=0x1a2;eip=0x008179; 	T(INC(dx));	// 17111 inc     dx ;~ 01A2:8179
cs=0x1a2;eip=0x00817a; 	T(XOR(ax, ax));	// 17112 xor     ax, ax ;~ 01A2:817A
cs=0x1a2;eip=0x00817c; 	S(OUT(dx, ax));	// 17113 out     dx, ax ;~ 01A2:817C
cs=0x1a2;eip=0x00817d; 	T(DEC(dx));	// 17114 dec     dx ;~ 01A2:817D
cs=0x1a2;eip=0x00817e; 	T(MOV(al, 5));	// 17115 mov     al, 5 ;~ 01A2:817E
cs=0x1a2;eip=0x008180; 	S(OUT(dx, al));	// 17116 out     dx, al ;~ 01A2:8180
cs=0x1a2;eip=0x008181; 	T(INC(dx));	// 17117 inc     dx ;~ 01A2:8181
cs=0x1a2;eip=0x008182; 	T(XOR(ax, ax));	// 17118 xor     ax, ax ;~ 01A2:8182
cs=0x1a2;eip=0x008184; 	S(OUT(dx, ax));	// 17119 out     dx, ax ;~ 01A2:8184
cs=0x1a2;eip=0x008185; 	T(DEC(dx));	// 17120 dec     dx ;~ 01A2:8185
cs=0x1a2;eip=0x008186; 	T(MOV(al, 6));	// 17121 mov     al, 6 ;~ 01A2:8186
cs=0x1a2;eip=0x008188; 	S(OUT(dx, al));	// 17122 out     dx, al ;~ 01A2:8188
cs=0x1a2;eip=0x008189; 	T(ADD(dl, 2));	// 17123 add     dl, 2 ;~ 01A2:8189
cs=0x1a2;eip=0x00818c; 	T(MOV(al, 0x30));	// 17124 mov     al, 30h ; '0' ;~ 01A2:818C
cs=0x1a2;eip=0x00818e; 	S(OUT(dx, al));	// 17125 out     dx, al ;~ 01A2:818E
cs=0x1a2;eip=0x00818f; 	T(SUB(dl, 2));	// 17126 sub     dl, 2 ;~ 01A2:818F
cs=0x1a2;eip=0x008192; 	T(MOV(al, 7));	// 17127 mov     al, 7 ;~ 01A2:8192
cs=0x1a2;eip=0x008194; 	S(OUT(dx, al));	// 17128 out     dx, al ;~ 01A2:8194
cs=0x1a2;eip=0x008195; 	T(ADD(dl, 2));	// 17129 add     dl, 2 ;~ 01A2:8195
cs=0x1a2;eip=0x008198; 	T(MOV(al, 0x10));	// 17130 mov     al, 10h ;~ 01A2:8198
cs=0x1a2;eip=0x00819a; 	S(OUT(dx, al));	// 17131 out     dx, al ;~ 01A2:819A
cs=0x1a2;eip=0x00819b; 	T(SUB(dl, 2));	// 17132 sub     dl, 2 ;~ 01A2:819B
cs=0x1a2;eip=0x00819e; 	T(MOV(al, 8));	// 17133 mov     al, 8 ;~ 01A2:819E
cs=0x1a2;eip=0x0081a0; 	S(OUT(dx, al));	// 17134 out     dx, al ;~ 01A2:81A0
cs=0x1a2;eip=0x0081a1; 	T(ADD(dl, 2));	// 17135 add     dl, 2 ;~ 01A2:81A1
cs=0x1a2;eip=0x0081a4; 	T(MOV(al, 0x0E0));	// 17136 mov     al, 0E0h ; 'à' ;~ 01A2:81A4
cs=0x1a2;eip=0x0081a6; 	S(OUT(dx, al));	// 17137 out     dx, al ;~ 01A2:81A6
cs=0x1a2;eip=0x0081a7; 	T(SUB(dl, 2));	// 17138 sub     dl, 2 ;~ 01A2:81A7
cs=0x1a2;eip=0x0081aa; 	T(MOV(al, 9));	// 17139 mov     al, 9 ;~ 01A2:81AA
cs=0x1a2;eip=0x0081ac; 	S(OUT(dx, al));	// 17140 out     dx, al ;~ 01A2:81AC
cs=0x1a2;eip=0x0081ad; 	T(INC(dx));	// 17141 inc     dx ;~ 01A2:81AD
cs=0x1a2;eip=0x0081ae; 	T(XOR(ax, ax));	// 17142 xor     ax, ax ;~ 01A2:81AE
cs=0x1a2;eip=0x0081b0; 	S(OUT(dx, ax));	// 17143 out     dx, ax ;~ 01A2:81B0
cs=0x1a2;eip=0x0081b1; 	T(DEC(dx));	// 17144 dec     dx ;~ 01A2:81B1
cs=0x1a2;eip=0x0081b2; 	T(MOV(al, 0x0A));	// 17145 mov     al, 0Ah ;~ 01A2:81B2
cs=0x1a2;eip=0x0081b4; 	S(OUT(dx, al));	// 17146 out     dx, al ;~ 01A2:81B4
cs=0x1a2;eip=0x0081b5; 	T(INC(dx));	// 17147 inc     dx ;~ 01A2:81B5
cs=0x1a2;eip=0x0081b6; 	T(XOR(ax, ax));	// 17148 xor     ax, ax ;~ 01A2:81B6
cs=0x1a2;eip=0x0081b8; 	S(OUT(dx, ax));	// 17149 out     dx, ax ;~ 01A2:81B8
cs=0x1a2;eip=0x0081b9; 	T(DEC(dx));	// 17150 dec     dx ;~ 01A2:81B9
cs=0x1a2;eip=0x0081ba; 	T(MOV(al, 0x0B));	// 17151 mov     al, 0Bh ;~ 01A2:81BA
cs=0x1a2;eip=0x0081bc; 	S(OUT(dx, al));	// 17152 out     dx, al ;~ 01A2:81BC
cs=0x1a2;eip=0x0081bd; 	T(INC(dx));	// 17153 inc     dx ;~ 01A2:81BD
cs=0x1a2;eip=0x0081be; 	T(XOR(ax, ax));	// 17154 xor     ax, ax ;~ 01A2:81BE
cs=0x1a2;eip=0x0081c0; 	S(OUT(dx, ax));	// 17155 out     dx, ax ;~ 01A2:81C0
cs=0x1a2;eip=0x0081c1; 	T(DEC(dx));	// 17156 dec     dx ;~ 01A2:81C1
cs=0x1a2;eip=0x0081c2; 	T(INC(bl));	// 17157 inc     bl ;~ 01A2:81C2
cs=0x1a2;eip=0x0081c4; 	T(CMP(bl, byte_24629));	// 17158 cmp     bl, byte_24629 ;~ 01A2:81C4
cs=0x1a2;eip=0x0081c8; 	J(JC(loc_1813a));	// 17159 jb      loc_1813A ;~ 01A2:81C8
cs=0x1a2;eip=0x0081cc; 	T(SUB(dx, 0x0FD));	// 17160 sub     dx, 0FDh ; 'ý' ;~ 01A2:81CC
cs=0x1a2;eip=0x0081d0; 	S(IN(al, dx));	// 17161 in      al, dx ;~ 01A2:81D0
cs=0x1a2;eip=0x0081d1; 	T(ADD(dx, 0x0FD));	// 17162 add     dx, 0FDh ; 'ý' ;~ 01A2:81D1
cs=0x1a2;eip=0x0081d5; 	T(MOV(al, 0x41));	// 17163 mov     al, 41h ; 'A' ;~ 01A2:81D5
cs=0x1a2;eip=0x0081d7; 	S(OUT(dx, al));	// 17164 out     dx, al ;~ 01A2:81D7
cs=0x1a2;eip=0x0081d8; 	T(ADD(dl, 2));	// 17165 add     dl, 2 ;~ 01A2:81D8
cs=0x1a2;eip=0x0081db; 	S(IN(al, dx));	// 17166 in      al, dx ;~ 01A2:81DB
cs=0x1a2;eip=0x0081dc; 	T(SUB(dl, 2));	// 17167 sub     dl, 2 ;~ 01A2:81DC
cs=0x1a2;eip=0x0081df; 	T(MOV(al, 0x49));	// 17168 mov     al, 49h ; 'I' ;~ 01A2:81DF
cs=0x1a2;eip=0x0081e1; 	S(OUT(dx, al));	// 17169 out     dx, al ;~ 01A2:81E1
cs=0x1a2;eip=0x0081e2; 	T(ADD(dl, 2));	// 17170 add     dl, 2 ;~ 01A2:81E2
cs=0x1a2;eip=0x0081e5; 	S(IN(al, dx));	// 17171 in      al, dx ;~ 01A2:81E5
cs=0x1a2;eip=0x0081e6; 	T(SUB(dl, 2));	// 17172 sub     dl, 2 ;~ 01A2:81E6
cs=0x1a2;eip=0x0081e9; 	T(MOV(al, 0x8F));	// 17173 mov     al, 8Fh ;~ 01A2:81E9
cs=0x1a2;eip=0x0081eb; 	S(OUT(dx, al));	// 17174 out     dx, al ;~ 01A2:81EB
cs=0x1a2;eip=0x0081ec; 	T(ADD(dl, 2));	// 17175 add     dl, 2 ;~ 01A2:81EC
cs=0x1a2;eip=0x0081ef; 	S(IN(al, dx));	// 17176 in      al, dx ;~ 01A2:81EF
cs=0x1a2;eip=0x0081f0; 	T(SUB(dl, 2));	// 17177 sub     dl, 2 ;~ 01A2:81F0
cs=0x1a2;eip=0x0081f3; 	T(MOV(al, 0x4C));	// 17178 mov     al, 4Ch ; 'L' ;~ 01A2:81F3
cs=0x1a2;eip=0x0081f5; 	S(OUT(dx, al));	// 17179 out     dx, al ;~ 01A2:81F5
cs=0x1a2;eip=0x0081f6; 	T(ADD(dl, 2));	// 17180 add     dl, 2 ;~ 01A2:81F6
cs=0x1a2;eip=0x0081f9; 	T(MOV(al, 7));	// 17181 mov     al, 7 ;~ 01A2:81F9
cs=0x1a2;eip=0x0081fb; 	S(OUT(dx, al));	// 17182 out     dx, al ;~ 01A2:81FB
cs=0x1a2;eip=0x0081fc; 	T(SUB(dl, 2));	// 17183 sub     dl, 2 ;~ 01A2:81FC
cs=0x1a2;eip=0x0081ff; 	X(POPF);	// 17184 popf ;~ 01A2:81FF
cs=0x1a2;eip=0x008200; 	J(RETN(0));	// 17185 retn ;~ 01A2:8200

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_gravis_18079: 	goto _gravis_18079;
        case m2c::kloc_18082: 	goto loc_18082;
        case m2c::kloc_18088: 	goto loc_18088;
        case m2c::kloc_1813a: 	goto loc_1813a;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _gravis_18201(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _gravis_18201:
    _begin:
cs=0x1a2;eip=0x008201; 	X(PUSH(dx));	// 17194 push    dx ;~ 01A2:8201
cs=0x1a2;eip=0x008202; 	T(MOV(dx, _gravis_port));	// 17195 mov     dx, _gravis_port ;~ 01A2:8202
cs=0x1a2;eip=0x008206; 	T(ADD(dx, 4));	// 17196 add     dx, 4 ;~ 01A2:8206
loc_18209:
	// 5473 
cs=0x1a2;eip=0x008209; 	S(IN(al, dx));	// 17199 in      al, dx ;~ 01A2:8209
cs=0x1a2;eip=0x00820a; 	S(IN(al, dx));	// 17200 in      al, dx ;~ 01A2:820A
cs=0x1a2;eip=0x00820b; 	S(IN(al, dx));	// 17201 in      al, dx ;~ 01A2:820B
cs=0x1a2;eip=0x00820c; 	S(IN(al, dx));	// 17202 in      al, dx ;~ 01A2:820C
cs=0x1a2;eip=0x00820d; 	S(IN(al, dx));	// 17203 in      al, dx ;~ 01A2:820D
cs=0x1a2;eip=0x00820e; 	S(IN(al, dx));	// 17204 in      al, dx ;~ 01A2:820E
cs=0x1a2;eip=0x00820f; 	S(IN(al, dx));	// 17205 in      al, dx ;~ 01A2:820F
cs=0x1a2;eip=0x008210; 	S(IN(al, dx));	// 17206 in      al, dx ;~ 01A2:8210
cs=0x1a2;eip=0x008211; 	T(DEC(cx));	// 17207 dec     cx ;~ 01A2:8211
cs=0x1a2;eip=0x008212; 	J(JNZ(loc_18209));	// 17208 jnz     short loc_18209 ;~ 01A2:8212
cs=0x1a2;eip=0x008214; 	X(POP(dx));	// 17209 pop     dx ;~ 01A2:8214
cs=0x1a2;eip=0x008215; 	J(RETN(0));	// 17210 retn ;~ 01A2:8215

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_gravis_18201: 	goto _gravis_18201;
        case m2c::kloc_18209: 	goto loc_18209;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _gravis_18216(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _gravis_18216:
    _begin:
cs=0x1a2;eip=0x008216; 	T(MOVZX(si, _irq_number_0));	// 17218 movzx   si, _irq_number_0 ;~ 01A2:8216
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00821b; 	T(MOV(bl, *((asc_182c3)+si)));	// 17219 mov     bl, byte ptr cs:asc_182C3[si] ; "\x00\x00\x01\x03\x00\x02\x00\x04\x00"... ;~ 01A2:821B
cs=0x1a2;eip=0x008220; 	T(MOVZX(si, byte_2462b));	// 17220 movzx   si, byte_2462B ;~ 01A2:8220
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x008225; 	T(MOV(bh, *((asc_182c3)+si)));	// 17221 mov     bh, byte ptr cs:asc_182C3[si] ; "\x00\x00\x01\x03\x00\x02\x00\x04\x00"... ;~ 01A2:8225
cs=0x1a2;eip=0x00822a; 	T(MOVZX(si, _dma_channel_0));	// 17222 movzx   si, _dma_channel_0 ;~ 01A2:822A
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x00822f; 	T(MOV(cl, *((asc_182d3)+si)));	// 17223 mov     cl, byte ptr cs:asc_182D3[si] ; "\x00\x01\x00\x02\x00\x03\x04\x05" ;~ 01A2:822F
cs=0x1a2;eip=0x008234; 	T(MOVZX(si, byte_2462d));	// 17224 movzx   si, byte_2462D ;~ 01A2:8234
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x008239; 	T(MOV(ch, *((asc_182d3)+si)));	// 17225 mov     ch, byte ptr cs:asc_182D3[si] ; "\x00\x01\x00\x02\x00\x03\x04\x05" ;~ 01A2:8239
cs=0x1a2;eip=0x00823e; 	T(CMP(bl, bh));	// 17226 cmp     bl, bh ;~ 01A2:823E
cs=0x1a2;eip=0x008240; 	J(JNZ(loc_18244));	// 17227 jnz     short loc_18244 ;~ 01A2:8240
cs=0x1a2;eip=0x008242; 	T(MOV(bh, 8));	// 17228 mov     bh, 8 ;~ 01A2:8242
loc_18244:
	// 5474 
cs=0x1a2;eip=0x008244; 	T(SHL(bh, 3));	// 17231 shl     bh, 3 ;~ 01A2:8244
cs=0x1a2;eip=0x008247; 	T(OR(bl, bh));	// 17232 or      bl, bh ;~ 01A2:8247
cs=0x1a2;eip=0x008249; 	T(CMP(cl, ch));	// 17233 cmp     cl, ch ;~ 01A2:8249
cs=0x1a2;eip=0x00824b; 	J(JNZ(loc_1824f));	// 17234 jnz     short loc_1824F ;~ 01A2:824B
cs=0x1a2;eip=0x00824d; 	T(MOV(ch, 8));	// 17235 mov     ch, 8 ;~ 01A2:824D
loc_1824f:
	// 5475 
cs=0x1a2;eip=0x00824f; 	T(SHL(ch, 3));	// 17238 shl     ch, 3 ;~ 01A2:824F
cs=0x1a2;eip=0x008252; 	T(OR(cl, ch));	// 17239 or      cl, ch ;~ 01A2:8252
cs=0x1a2;eip=0x008254; 	T(MOV(ah, byte_2463b));	// 17240 mov     ah, byte_2463B ;~ 01A2:8254
cs=0x1a2;eip=0x008258; 	T(AND(ah, 0x0AF));	// 17241 and     ah, 0AFh ;~ 01A2:8258
cs=0x1a2;eip=0x00825b; 	X(PUSHF);	// 17242 pushf ;~ 01A2:825B
cs=0x1a2;eip=0x00825c; 	T(CLI);	// 17243 cli ;~ 01A2:825C
cs=0x1a2;eip=0x00825d; 	T(MOV(dx, _gravis_port));	// 17244 mov     dx, _gravis_port ;~ 01A2:825D
cs=0x1a2;eip=0x008261; 	T(SUB(dx, 0x103));	// 17245 sub     dx, 103h ;~ 01A2:8261
cs=0x1a2;eip=0x008265; 	T(MOV(si, dx));	// 17246 mov     si, dx ;~ 01A2:8265
cs=0x1a2;eip=0x008267; 	T(di = si+0x0B);	// 17247 lea     di, [si+0Bh] ;~ 01A2:8267
cs=0x1a2;eip=0x00826a; 	T(dx = si+0x0F);	// 17248 lea     dx, [si+0Fh] ;~ 01A2:826A
cs=0x1a2;eip=0x00826d; 	T(MOV(al, 5));	// 17249 mov     al, 5 ;~ 01A2:826D
cs=0x1a2;eip=0x00826f; 	S(OUT(dx, al));	// 17250 out     dx, al ;~ 01A2:826F
cs=0x1a2;eip=0x008270; 	T(MOV(dx, si));	// 17251 mov     dx, si ;~ 01A2:8270
cs=0x1a2;eip=0x008272; 	T(MOV(al, ah));	// 17252 mov     al, ah ;~ 01A2:8272
cs=0x1a2;eip=0x008274; 	S(OUT(dx, al));	// 17253 out     dx, al ;~ 01A2:8274
cs=0x1a2;eip=0x008275; 	T(MOV(dx, di));	// 17254 mov     dx, di ;~ 01A2:8275
cs=0x1a2;eip=0x008277; 	T(XOR(al, al));	// 17255 xor     al, al ;~ 01A2:8277
cs=0x1a2;eip=0x008279; 	S(OUT(dx, al));	// 17256 out     dx, al ;~ 01A2:8279
cs=0x1a2;eip=0x00827a; 	T(dx = si+0x0F);	// 17257 lea     dx, [si+0Fh] ;~ 01A2:827A
cs=0x1a2;eip=0x00827d; 	T(XOR(al, al));	// 17258 xor     al, al ;~ 01A2:827D
cs=0x1a2;eip=0x00827f; 	S(OUT(dx, al));	// 17259 out     dx, al ;~ 01A2:827F
cs=0x1a2;eip=0x008280; 	T(MOV(dx, si));	// 17260 mov     dx, si ;~ 01A2:8280
cs=0x1a2;eip=0x008282; 	T(MOV(al, ah));	// 17261 mov     al, ah ;~ 01A2:8282
cs=0x1a2;eip=0x008284; 	S(OUT(dx, al));	// 17262 out     dx, al ;~ 01A2:8284
cs=0x1a2;eip=0x008285; 	T(MOV(dx, di));	// 17263 mov     dx, di ;~ 01A2:8285
cs=0x1a2;eip=0x008287; 	T(MOV(al, cl));	// 17264 mov     al, cl ;~ 01A2:8287
cs=0x1a2;eip=0x008289; 	T(OR(al, 0x80));	// 17265 or      al, 80h ;~ 01A2:8289
cs=0x1a2;eip=0x00828b; 	S(OUT(dx, al));	// 17266 out     dx, al ;~ 01A2:828B
cs=0x1a2;eip=0x00828c; 	T(MOV(dx, si));	// 17267 mov     dx, si ;~ 01A2:828C
cs=0x1a2;eip=0x00828e; 	T(MOV(al, ah));	// 17268 mov     al, ah ;~ 01A2:828E
cs=0x1a2;eip=0x008290; 	T(OR(al, 0x40));	// 17269 or      al, 40h ;~ 01A2:8290
cs=0x1a2;eip=0x008292; 	S(OUT(dx, al));	// 17270 out     dx, al ;~ 01A2:8292
cs=0x1a2;eip=0x008293; 	T(MOV(dx, di));	// 17271 mov     dx, di ;~ 01A2:8293
cs=0x1a2;eip=0x008295; 	T(MOV(al, bl));	// 17272 mov     al, bl ;~ 01A2:8295
cs=0x1a2;eip=0x008297; 	S(OUT(dx, al));	// 17273 out     dx, al ;~ 01A2:8297
cs=0x1a2;eip=0x008298; 	T(MOV(dx, si));	// 17274 mov     dx, si ;~ 01A2:8298
cs=0x1a2;eip=0x00829a; 	T(MOV(al, ah));	// 17275 mov     al, ah ;~ 01A2:829A
cs=0x1a2;eip=0x00829c; 	S(OUT(dx, al));	// 17276 out     dx, al ;~ 01A2:829C
cs=0x1a2;eip=0x00829d; 	T(MOV(dx, di));	// 17277 mov     dx, di ;~ 01A2:829D
cs=0x1a2;eip=0x00829f; 	T(MOV(al, cl));	// 17278 mov     al, cl ;~ 01A2:829F
cs=0x1a2;eip=0x0082a1; 	S(OUT(dx, al));	// 17279 out     dx, al ;~ 01A2:82A1
cs=0x1a2;eip=0x0082a2; 	T(MOV(dx, si));	// 17280 mov     dx, si ;~ 01A2:82A2
cs=0x1a2;eip=0x0082a4; 	T(MOV(al, ah));	// 17281 mov     al, ah ;~ 01A2:82A4
cs=0x1a2;eip=0x0082a6; 	T(OR(al, 0x40));	// 17282 or      al, 40h ;~ 01A2:82A6
cs=0x1a2;eip=0x0082a8; 	S(OUT(dx, al));	// 17283 out     dx, al ;~ 01A2:82A8
cs=0x1a2;eip=0x0082a9; 	T(MOV(dx, di));	// 17284 mov     dx, di ;~ 01A2:82A9
cs=0x1a2;eip=0x0082ab; 	T(MOV(al, bl));	// 17285 mov     al, bl ;~ 01A2:82AB
cs=0x1a2;eip=0x0082ad; 	S(OUT(dx, al));	// 17286 out     dx, al ;~ 01A2:82AD
cs=0x1a2;eip=0x0082ae; 	T(dx = si+0x102);	// 17287 lea     dx, [si+102h] ;~ 01A2:82AE
cs=0x1a2;eip=0x0082b2; 	T(XOR(al, al));	// 17288 xor     al, al ;~ 01A2:82B2
cs=0x1a2;eip=0x0082b4; 	S(OUT(dx, al));	// 17289 out     dx, al ;~ 01A2:82B4
cs=0x1a2;eip=0x0082b5; 	T(MOV(dx, si));	// 17290 mov     dx, si ;~ 01A2:82B5
cs=0x1a2;eip=0x0082b7; 	T(MOV(al, ah));	// 17291 mov     al, ah ;~ 01A2:82B7
cs=0x1a2;eip=0x0082b9; 	S(OUT(dx, al));	// 17292 out     dx, al ;~ 01A2:82B9
cs=0x1a2;eip=0x0082ba; 	T(dx = si+0x102);	// 17293 lea     dx, [si+102h] ;~ 01A2:82BA
cs=0x1a2;eip=0x0082be; 	T(XOR(al, al));	// 17294 xor     al, al ;~ 01A2:82BE
cs=0x1a2;eip=0x0082c0; 	S(OUT(dx, al));	// 17295 out     dx, al ;~ 01A2:82C0
cs=0x1a2;eip=0x0082c1; 	X(POPF);	// 17296 popf ;~ 01A2:82C1
cs=0x1a2;eip=0x0082c2; 	J(RETN(0));	// 17297 retn ;~ 01A2:82C2

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_gravis_18216: 	goto _gravis_18216;
        case m2c::kloc_18244: 	goto loc_18244;
        case m2c::kloc_1824f: 	goto loc_1824f;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _nongravis_182e7(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _nongravis_182e7:
    _begin:
cs=0x1a2;eip=0x0082e7; 	X(MOV(_dma_mode, 0x48));	// 17323 mov     _dma_mode, 48h ; 'H' ;~ 01A2:82E7
cs=0x1a2;eip=0x0082ec; 	T(MOV(bl, byte_24673));	// 17324 mov     bl, byte_24673 ;~ 01A2:82EC
cs=0x1a2;eip=0x0082f0; 	T(AND(bl, 0x80));	// 17325 and     bl, 80h ;~ 01A2:82F0
cs=0x1a2;eip=0x0082f3; 	X(MOV(byte_24645, bl));	// 17326 mov     byte_24645, bl ;~ 01A2:82F3
loc_182f7:
	// 5476 
cs=0x1a2;eip=0x0082f7; 	T(CMP(byte_2466e, 1));	// 17330 cmp     byte_2466E, 1 ;~ 01A2:82F7
cs=0x1a2;eip=0x0082fc; 	J(JZ(loc_182f7));	// 17331 jz      short loc_182F7 ;~ 01A2:82FC
cs=0x1a2;eip=0x0082fe; 	X(MOV(word_24636, 0));	// 17332 mov     word_24636, 0 ;~ 01A2:82FE
cs=0x1a2;eip=0x008304; 	T(MOV(bp, ax));	// 17333 mov     bp, ax ;~ 01A2:8304
cs=0x1a2;eip=0x008306; 	T(SHL(ax, 2));	// 17334 shl     ax, 2 ;~ 01A2:8306
cs=0x1a2;eip=0x008309; 	X(MOV(word_2460e, cx));	// 17335 mov     word_2460E, cx ;~ 01A2:8309
cs=0x1a2;eip=0x00830d; 	T(MOV(bx, cx));	// 17336 mov     bx, cx ;~ 01A2:830D
cs=0x1a2;eip=0x00830f; 	T(SHR(cx, 2));	// 17337 shr     cx, 2 ;~ 01A2:830F
cs=0x1a2;eip=0x008312; 	T(ADD(cx, ax));	// 17338 add     cx, ax ;~ 01A2:8312
cs=0x1a2;eip=0x008314; 	J(JNC(loc_18338));	// 17339 jnb     short loc_18338 ;~ 01A2:8314
cs=0x1a2;eip=0x008316; 	J(JZ(loc_18338));	// 17340 jz      short loc_18338 ;~ 01A2:8316
cs=0x1a2;eip=0x008318; 	T(NEG(ax));	// 17341 neg     ax ;~ 01A2:8318
cs=0x1a2;eip=0x00831a; 	T(SHL(ax, 2));	// 17342 shl     ax, 2 ;~ 01A2:831A
cs=0x1a2;eip=0x00831d; 	X(MOV(word_2460e, ax));	// 17343 mov     word_2460E, ax ;~ 01A2:831D
cs=0x1a2;eip=0x008320; 	T(MOV(cx, ax));	// 17344 mov     cx, ax ;~ 01A2:8320
cs=0x1a2;eip=0x008322; 	T(SUB(bx, ax));	// 17345 sub     bx, ax ;~ 01A2:8322
cs=0x1a2;eip=0x008324; 	X(MOV(word_24636, bx));	// 17346 mov     word_24636, bx ;~ 01A2:8324
cs=0x1a2;eip=0x008328; 	T(ADD(ax, *(dw*)(((db*)&_audio_buf_pointer))));	// 17347 add     ax, word ptr _audio_buf_pointer ;~ 01A2:8328
cs=0x1a2;eip=0x00832c; 	X(MOV(word_24634, ax));	// 17348 mov     word_24634, ax ;~ 01A2:832C
cs=0x1a2;eip=0x00832f; 	T(SHR(cx, 4));	// 17349 shr     cx, 4 ;~ 01A2:832F
cs=0x1a2;eip=0x008332; 	T(ADD(cx, bp));	// 17350 add     cx, bp ;~ 01A2:8332
cs=0x1a2;eip=0x008334; 	X(MOV(word_24632, cx));	// 17351 mov     word_24632, cx ;~ 01A2:8334
loc_18338:
	// 5477 
cs=0x1a2;eip=0x008338; 	X(PUSHF);	// 17355 pushf ;~ 01A2:8338
cs=0x1a2;eip=0x008339; 	T(CLI);	// 17356 cli ;~ 01A2:8339
cs=0x1a2;eip=0x00833a; 	X(PUSH(bp));	// 17357 push    bp ;~ 01A2:833A
cs=0x1a2;eip=0x00833b; 	T(MOV(cl, _dma_channel_0));	// 17358 mov     cl, _dma_channel_0 ;~ 01A2:833B
cs=0x1a2;eip=0x00833f; 	J(CALL(_dma_186e3,0));	// 17359 call    _dma_186E3 ;~ 01A2:833F
cs=0x1a2;eip=0x008342; 	X(POP(bp));	// 17360 pop     bp ;~ 01A2:8342
cs=0x1a2;eip=0x008343; 	T(MOV(bl, 0x21));	// 17361 mov     bl, 21h ; '!' ;~ 01A2:8343
cs=0x1a2;eip=0x008345; 	T(OR(bl, byte_24645));	// 17362 or      bl, byte_24645 ;~ 01A2:8345
cs=0x1a2;eip=0x008349; 	T(CMP(_dma_channel_0, 4));	// 17363 cmp     _dma_channel_0, 4 ;~ 01A2:8349
cs=0x1a2;eip=0x00834e; 	J(JC(loc_18360));	// 17364 jb      short loc_18360 ;~ 01A2:834E
cs=0x1a2;eip=0x008350; 	T(OR(bl, 4));	// 17365 or      bl, 4 ;~ 01A2:8350
cs=0x1a2;eip=0x008353; 	T(MOV(ax, bp));	// 17366 mov     ax, bp ;~ 01A2:8353
cs=0x1a2;eip=0x008355; 	T(AND(ax, 0x0C000));	// 17367 and     ax, 0C000h ;~ 01A2:8355
cs=0x1a2;eip=0x008358; 	T(SHR(bp, 1));	// 17368 shr     bp, 1 ;~ 01A2:8358
cs=0x1a2;eip=0x00835a; 	T(AND(bp, 0x1FFF));	// 17369 and     bp, 1FFFh ;~ 01A2:835A
cs=0x1a2;eip=0x00835e; 	T(OR(bp, ax));	// 17370 or      bp, ax ;~ 01A2:835E
loc_18360:
	// 5478 
cs=0x1a2;eip=0x008360; 	T(MOV(dx, _gravis_port));	// 17373 mov     dx, _gravis_port ;~ 01A2:8360
cs=0x1a2;eip=0x008364; 	T(MOV(al, 0x41));	// 17374 mov     al, 41h ; 'A' ;~ 01A2:8364
cs=0x1a2;eip=0x008366; 	S(OUT(dx, al));	// 17375 out     dx, al ;~ 01A2:8366
cs=0x1a2;eip=0x008367; 	T(ADD(dl, 2));	// 17376 add     dl, 2 ;~ 01A2:8367
cs=0x1a2;eip=0x00836a; 	S(IN(al, dx));	// 17377 in      al, dx ;~ 01A2:836A
cs=0x1a2;eip=0x00836b; 	T(SUB(dl, 2));	// 17378 sub     dl, 2 ;~ 01A2:836B
cs=0x1a2;eip=0x00836e; 	T(MOV(al, 0x42));	// 17379 mov     al, 42h ; 'B' ;~ 01A2:836E
cs=0x1a2;eip=0x008370; 	S(OUT(dx, al));	// 17380 out     dx, al ;~ 01A2:8370
cs=0x1a2;eip=0x008371; 	T(INC(dx));	// 17381 inc     dx ;~ 01A2:8371
cs=0x1a2;eip=0x008372; 	T(MOV(ax, bp));	// 17382 mov     ax, bp ;~ 01A2:8372
cs=0x1a2;eip=0x008374; 	S(OUT(dx, ax));	// 17383 out     dx, ax ;~ 01A2:8374
cs=0x1a2;eip=0x008375; 	T(DEC(dx));	// 17384 dec     dx ;~ 01A2:8375
cs=0x1a2;eip=0x008376; 	X(MOV(byte_2466e, 1));	// 17385 mov     byte_2466E, 1 ;~ 01A2:8376
cs=0x1a2;eip=0x00837b; 	T(MOV(al, 0x41));	// 17386 mov     al, 41h ; 'A' ;~ 01A2:837B
cs=0x1a2;eip=0x00837d; 	S(OUT(dx, al));	// 17387 out     dx, al ;~ 01A2:837D
cs=0x1a2;eip=0x00837e; 	T(ADD(dl, 2));	// 17388 add     dl, 2 ;~ 01A2:837E
cs=0x1a2;eip=0x008381; 	T(MOV(al, bl));	// 17389 mov     al, bl ;~ 01A2:8381
cs=0x1a2;eip=0x008383; 	S(OUT(dx, al));	// 17390 out     dx, al ;~ 01A2:8383
cs=0x1a2;eip=0x008384; 	T(SUB(dl, 2));	// 17391 sub     dl, 2 ;~ 01A2:8384
cs=0x1a2;eip=0x008387; 	X(POPF);	// 17392 popf ;~ 01A2:8387
cs=0x1a2;eip=0x008388; 	J(RETN(0));	// 17393 retn ;~ 01A2:8388

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_nongravis_182e7: 	goto _nongravis_182e7;
        case m2c::kloc_182f7: 	goto loc_182f7;
        case m2c::kloc_18338: 	goto loc_18338;
        case m2c::kloc_18360: 	goto loc_18360;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _adlib_18389(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _adlib_18389:
    _begin:
cs=0x1a2;eip=0x008389; 	T(XOR(ax, ax));	// 17402 xor     ax, ax ;~ 01A2:8389
loc_1838b:
	// 5479 
cs=0x1a2;eip=0x00838b; 	J(CALL(_adlib_18395,0));	// 17405 call    _adlib_18395 ;~ 01A2:838B
cs=0x1a2;eip=0x00838e; 	T(INC(al));	// 17406 inc     al ;~ 01A2:838E
cs=0x1a2;eip=0x008390; 	T(CMP(al, 0x0E8));	// 17407 cmp     al, 0E8h ; 'è' ;~ 01A2:8390
cs=0x1a2;eip=0x008392; 	J(JBE(loc_1838b));	// 17408 jbe     short loc_1838B ;~ 01A2:8392
cs=0x1a2;eip=0x008394; 	J(RETN(0));	// 17409 retn ;~ 01A2:8394

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_adlib_18389: 	goto _adlib_18389;
        case m2c::kloc_1838b: 	goto loc_1838b;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _adlib_18395(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _adlib_18395:
    _begin:
cs=0x1a2;eip=0x008395; 	X(PUSH(ax));	// 17418 push    ax ;~ 01A2:8395
cs=0x1a2;eip=0x008396; 	X(PUSH(dx));	// 17419 push    dx ;~ 01A2:8396
cs=0x1a2;eip=0x008397; 	T(MOV(dx, 0x388));	// 17420 mov     dx, 388h ;~ 01A2:8397
cs=0x1a2;eip=0x00839a; 	S(OUT(dx, al));	// 17421 out     dx, al ;~ 01A2:839A
cs=0x1a2;eip=0x00839b; 	S(IN(al, dx));	// 17422 in      al, dx ;~ 01A2:839B
cs=0x1a2;eip=0x00839c; 	S(IN(al, dx));	// 17423 in      al, dx ;~ 01A2:839C
cs=0x1a2;eip=0x00839d; 	S(IN(al, dx));	// 17424 in      al, dx ;~ 01A2:839D
cs=0x1a2;eip=0x00839e; 	S(IN(al, dx));	// 17425 in      al, dx ;~ 01A2:839E
cs=0x1a2;eip=0x00839f; 	S(IN(al, dx));	// 17426 in      al, dx ;~ 01A2:839F
cs=0x1a2;eip=0x0083a0; 	S(IN(al, dx));	// 17427 in      al, dx ;~ 01A2:83A0
cs=0x1a2;eip=0x0083a1; 	T(INC(dx));	// 17428 inc     dx ;~ 01A2:83A1
cs=0x1a2;eip=0x0083a2; 	T(MOV(al, ah));	// 17429 mov     al, ah ;~ 01A2:83A2
cs=0x1a2;eip=0x0083a4; 	S(OUT(dx, al));	// 17430 out     dx, al ;~ 01A2:83A4
cs=0x1a2;eip=0x0083a5; 	T(DEC(dx));	// 17431 dec     dx ;~ 01A2:83A5
cs=0x1a2;eip=0x0083a6; 	S(IN(al, dx));	// 17432 in      al, dx ;~ 01A2:83A6
cs=0x1a2;eip=0x0083a7; 	S(IN(al, dx));	// 17433 in      al, dx ;~ 01A2:83A7
cs=0x1a2;eip=0x0083a8; 	S(IN(al, dx));	// 17434 in      al, dx ;~ 01A2:83A8
cs=0x1a2;eip=0x0083a9; 	S(IN(al, dx));	// 17435 in      al, dx ;~ 01A2:83A9
cs=0x1a2;eip=0x0083aa; 	S(IN(al, dx));	// 17436 in      al, dx ;~ 01A2:83AA
cs=0x1a2;eip=0x0083ab; 	S(IN(al, dx));	// 17437 in      al, dx ;~ 01A2:83AB
cs=0x1a2;eip=0x0083ac; 	S(IN(al, dx));	// 17438 in      al, dx ;~ 01A2:83AC
cs=0x1a2;eip=0x0083ad; 	S(IN(al, dx));	// 17439 in      al, dx ;~ 01A2:83AD
cs=0x1a2;eip=0x0083ae; 	S(IN(al, dx));	// 17440 in      al, dx ;~ 01A2:83AE
cs=0x1a2;eip=0x0083af; 	S(IN(al, dx));	// 17441 in      al, dx ;~ 01A2:83AF
cs=0x1a2;eip=0x0083b0; 	S(IN(al, dx));	// 17442 in      al, dx ;~ 01A2:83B0
cs=0x1a2;eip=0x0083b1; 	S(IN(al, dx));	// 17443 in      al, dx ;~ 01A2:83B1
cs=0x1a2;eip=0x0083b2; 	S(IN(al, dx));	// 17444 in      al, dx ;~ 01A2:83B2
cs=0x1a2;eip=0x0083b3; 	S(IN(al, dx));	// 17445 in      al, dx ;~ 01A2:83B3
cs=0x1a2;eip=0x0083b4; 	S(IN(al, dx));	// 17446 in      al, dx ;~ 01A2:83B4
cs=0x1a2;eip=0x0083b5; 	S(IN(al, dx));	// 17447 in      al, dx ;~ 01A2:83B5
cs=0x1a2;eip=0x0083b6; 	S(IN(al, dx));	// 17448 in      al, dx ;~ 01A2:83B6
cs=0x1a2;eip=0x0083b7; 	S(IN(al, dx));	// 17449 in      al, dx ;~ 01A2:83B7
cs=0x1a2;eip=0x0083b8; 	S(IN(al, dx));	// 17450 in      al, dx ;~ 01A2:83B8
cs=0x1a2;eip=0x0083b9; 	S(IN(al, dx));	// 17451 in      al, dx ;~ 01A2:83B9
cs=0x1a2;eip=0x0083ba; 	S(IN(al, dx));	// 17452 in      al, dx ;~ 01A2:83BA
cs=0x1a2;eip=0x0083bb; 	S(IN(al, dx));	// 17453 in      al, dx ;~ 01A2:83BB
cs=0x1a2;eip=0x0083bc; 	S(IN(al, dx));	// 17454 in      al, dx ;~ 01A2:83BC
cs=0x1a2;eip=0x0083bd; 	S(IN(al, dx));	// 17455 in      al, dx ;~ 01A2:83BD
cs=0x1a2;eip=0x0083be; 	S(IN(al, dx));	// 17456 in      al, dx ;~ 01A2:83BE
cs=0x1a2;eip=0x0083bf; 	S(IN(al, dx));	// 17457 in      al, dx ;~ 01A2:83BF
cs=0x1a2;eip=0x0083c0; 	S(IN(al, dx));	// 17458 in      al, dx ;~ 01A2:83C0
cs=0x1a2;eip=0x0083c1; 	S(IN(al, dx));	// 17459 in      al, dx ;~ 01A2:83C1
cs=0x1a2;eip=0x0083c2; 	S(IN(al, dx));	// 17460 in      al, dx ;~ 01A2:83C2
cs=0x1a2;eip=0x0083c3; 	S(IN(al, dx));	// 17461 in      al, dx ;~ 01A2:83C3
cs=0x1a2;eip=0x0083c4; 	S(IN(al, dx));	// 17462 in      al, dx ;~ 01A2:83C4
cs=0x1a2;eip=0x0083c5; 	S(IN(al, dx));	// 17463 in      al, dx ;~ 01A2:83C5
cs=0x1a2;eip=0x0083c6; 	S(IN(al, dx));	// 17464 in      al, dx ;~ 01A2:83C6
cs=0x1a2;eip=0x0083c7; 	S(IN(al, dx));	// 17465 in      al, dx ;~ 01A2:83C7
cs=0x1a2;eip=0x0083c8; 	S(IN(al, dx));	// 17466 in      al, dx ;~ 01A2:83C8
cs=0x1a2;eip=0x0083c9; 	X(POP(dx));	// 17467 pop     dx ;~ 01A2:83C9
cs=0x1a2;eip=0x0083ca; 	X(POP(ax));	// 17468 pop     ax ;~ 01A2:83CA
cs=0x1a2;eip=0x0083cb; 	J(RETN(0));	// 17469 retn ;~ 01A2:83CB

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_adlib_18395: 	goto _adlib_18395;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _sb16_detect_port(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _sb16_detect_port:
    _begin:
cs=0x1a2;eip=0x0083cc; 	T(CMP(_snd_base_port, 0x0FFFF));	// 17478 cmp     _snd_base_port, 0FFFFh ;~ 01A2:83CC
cs=0x1a2;eip=0x0083d1; 	J(JZ(loc_183de));	// 17479 jz      short loc_183DE ;~ 01A2:83D1
cs=0x1a2;eip=0x0083d3; 	T(MOV(ax, _snd_base_port));	// 17480 mov     ax, _snd_base_port ;~ 01A2:83D3
cs=0x1a2;eip=0x0083d6; 	X(MOV(_sb_base_port, ax));	// 17481 mov     _sb_base_port, ax ;~ 01A2:83D6
cs=0x1a2;eip=0x0083d9; 	J(CALL(_checksb,0));	// 17482 call    _CheckSB ;~ 01A2:83D9
cs=0x1a2;eip=0x0083dc; 	J(JNC(loc_1842d));	// 17483 jnb     short loc_1842D ;~ 01A2:83DC
loc_183de:
	// 5480 
cs=0x1a2;eip=0x0083de; 	X(MOV(_sb_base_port, 0x220));	// 17486 mov     _sb_base_port, 220h ;~ 01A2:83DE
cs=0x1a2;eip=0x0083e4; 	J(CALL(_checksb,0));	// 17487 call    _CheckSB ;~ 01A2:83E4
cs=0x1a2;eip=0x0083e7; 	J(JNC(loc_1842d));	// 17488 jnb     short loc_1842D ;~ 01A2:83E7
cs=0x1a2;eip=0x0083e9; 	X(MOV(_sb_base_port, 0x240));	// 17489 mov     _sb_base_port, 240h ;~ 01A2:83E9
cs=0x1a2;eip=0x0083ef; 	J(CALL(_checksb,0));	// 17490 call    _CheckSB ;~ 01A2:83EF
cs=0x1a2;eip=0x0083f2; 	J(JNC(loc_1842d));	// 17491 jnb     short loc_1842D ;~ 01A2:83F2
cs=0x1a2;eip=0x0083f4; 	X(MOV(_sb_base_port, 0x210));	// 17492 mov     _sb_base_port, 210h ;~ 01A2:83F4
cs=0x1a2;eip=0x0083fa; 	J(CALL(_checksb,0));	// 17493 call    _CheckSB ;~ 01A2:83FA
cs=0x1a2;eip=0x0083fd; 	J(JNC(loc_1842d));	// 17494 jnb     short loc_1842D ;~ 01A2:83FD
cs=0x1a2;eip=0x0083ff; 	X(MOV(_sb_base_port, 0x230));	// 17495 mov     _sb_base_port, 230h ;~ 01A2:83FF
cs=0x1a2;eip=0x008405; 	J(CALL(_checksb,0));	// 17496 call    _CheckSB ;~ 01A2:8405
cs=0x1a2;eip=0x008408; 	J(JNC(loc_1842d));	// 17497 jnb     short loc_1842D ;~ 01A2:8408
cs=0x1a2;eip=0x00840a; 	X(MOV(_sb_base_port, 0x250));	// 17498 mov     _sb_base_port, 250h ;~ 01A2:840A
cs=0x1a2;eip=0x008410; 	J(CALL(_checksb,0));	// 17499 call    _CheckSB ;~ 01A2:8410
cs=0x1a2;eip=0x008413; 	J(JNC(loc_1842d));	// 17500 jnb     short loc_1842D ;~ 01A2:8413
cs=0x1a2;eip=0x008415; 	X(MOV(_sb_base_port, 0x260));	// 17501 mov     _sb_base_port, 260h ;~ 01A2:8415
cs=0x1a2;eip=0x00841b; 	J(CALL(_checksb,0));	// 17502 call    _CheckSB ;~ 01A2:841B
cs=0x1a2;eip=0x00841e; 	J(JNC(loc_1842d));	// 17503 jnb     short loc_1842D ;~ 01A2:841E
cs=0x1a2;eip=0x008420; 	X(MOV(_sb_base_port, 0x280));	// 17504 mov     _sb_base_port, 280h ;~ 01A2:8420
cs=0x1a2;eip=0x008426; 	J(CALL(_checksb,0));	// 17505 call    _CheckSB ;~ 01A2:8426
cs=0x1a2;eip=0x008429; 	J(JNC(loc_1842d));	// 17506 jnb     short loc_1842D ;~ 01A2:8429
cs=0x1a2;eip=0x00842b; 	T(STC);	// 17507 stc ;~ 01A2:842B
cs=0x1a2;eip=0x00842c; 	J(RETN(0));	// 17508 retn ;~ 01A2:842C
loc_1842d:
	// 5481 
cs=0x1a2;eip=0x00842d; 	T(MOV(al, 0x10));	// 17513 mov     al, 10h ;~ 01A2:842D
cs=0x1a2;eip=0x00842f; 	J(CALL(_writesb,0));	// 17514 call    _WriteSB ;~ 01A2:842F
cs=0x1a2;eip=0x008432; 	T(MOV(al, 0x80));	// 17515 mov     al, 80h ; '€' ;~ 01A2:8432
cs=0x1a2;eip=0x008434; 	J(CALL(_writesb,0));	// 17516 call    _WriteSB ;~ 01A2:8434
cs=0x1a2;eip=0x008437; 	T(MOV(al, 0x0E1));	// 17517 mov     al, 0E1h ; 'á' ;~ 01A2:8437
cs=0x1a2;eip=0x008439; 	J(CALL(_writesb,0));	// 17518 call    _WriteSB ;~ 01A2:8439
cs=0x1a2;eip=0x00843c; 	J(CALL(_readsb,0));	// 17519 call    _ReadSB ;~ 01A2:843C
cs=0x1a2;eip=0x00843f; 	T(MOV(ah, al));	// 17520 mov     ah, al ;~ 01A2:843F
cs=0x1a2;eip=0x008441; 	J(CALL(_readsb,0));	// 17521 call    _ReadSB ;~ 01A2:8441
cs=0x1a2;eip=0x008444; 	X(MOV(word_24654, ax));	// 17522 mov     word_24654, ax ;~ 01A2:8444
cs=0x1a2;eip=0x008447; 	T(CLC);	// 17523 clc ;~ 01A2:8447
cs=0x1a2;eip=0x008448; 	J(RETN(0));	// 17524 retn ;~ 01A2:8448

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_sb16_detect_port: 	goto _sb16_detect_port;
        case m2c::kloc_183de: 	goto loc_183de;
        case m2c::kloc_1842d: 	goto loc_1842d;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group28(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group28:
    _begin:
_sb_detect_irq:
	// 17531 
cs=0x1a2;eip=0x008449; 	J(CALL(_sb16_detect_port,0));	// 17536 call    _sb16_detect_port ;~ 01A2:8449
cs=0x1a2;eip=0x00844c; 	T(MOV(dx, 0x0FF6));	// 17537 mov     dx, 0FF6h ;~ 01A2:844C
cs=0x1a2;eip=0x00844f; 	J(JC(loc_18498));	// 17538 jb      short loc_18498 ;~ 01A2:844F
cs=0x1a2;eip=0x008451; 	T(CMP(_irq_number, 0x0FF));	// 17539 cmp     _irq_number, 0FFh ;~ 01A2:8451
cs=0x1a2;eip=0x008456; 	J(JZ(loc_18463));	// 17540 jz      short loc_18463 ;~ 01A2:8456
cs=0x1a2;eip=0x008458; 	T(MOV(al, _irq_number));	// 17541 mov     al, _irq_number ;~ 01A2:8458
cs=0x1a2;eip=0x00845b; 	X(MOV(_sb_irq_number, al));	// 17542 mov     _sb_irq_number, al ;~ 01A2:845B
cs=0x1a2;eip=0x00845e; 	J(CALL(_sb_test_interrupt,0));	// 17543 call    _sb_test_interrupt ;~ 01A2:845E
cs=0x1a2;eip=0x008461; 	J(JNC(loc_184c3));	// 17544 jnb     short loc_184C3 ;~ 01A2:8461
loc_18463:
	// 5482 
cs=0x1a2;eip=0x008463; 	X(MOV(_sb_irq_number, 7));	// 17547 mov     _sb_irq_number, 7 ;~ 01A2:8463
cs=0x1a2;eip=0x008468; 	J(CALL(_sb_test_interrupt,0));	// 17548 call    _sb_test_interrupt ;~ 01A2:8468
cs=0x1a2;eip=0x00846b; 	J(JNC(loc_184c3));	// 17549 jnb     short loc_184C3 ;~ 01A2:846B
cs=0x1a2;eip=0x00846d; 	X(MOV(_sb_irq_number, 5));	// 17550 mov     _sb_irq_number, 5 ;~ 01A2:846D
cs=0x1a2;eip=0x008472; 	J(CALL(_sb_test_interrupt,0));	// 17551 call    _sb_test_interrupt ;~ 01A2:8472
cs=0x1a2;eip=0x008475; 	J(JNC(loc_184c3));	// 17552 jnb     short loc_184C3 ;~ 01A2:8475
cs=0x1a2;eip=0x008477; 	X(MOV(_sb_irq_number, 3));	// 17553 mov     _sb_irq_number, 3 ;~ 01A2:8477
cs=0x1a2;eip=0x00847c; 	J(CALL(_sb_test_interrupt,0));	// 17554 call    _sb_test_interrupt ;~ 01A2:847C
cs=0x1a2;eip=0x00847f; 	J(JNC(loc_184c3));	// 17555 jnb     short loc_184C3 ;~ 01A2:847F
cs=0x1a2;eip=0x008481; 	X(MOV(_sb_irq_number, 0x0A));	// 17556 mov     _sb_irq_number, 0Ah ;~ 01A2:8481
cs=0x1a2;eip=0x008486; 	J(CALL(_sb_test_interrupt,0));	// 17557 call    _sb_test_interrupt ;~ 01A2:8486
cs=0x1a2;eip=0x008489; 	J(JNC(loc_184c3));	// 17558 jnb     short loc_184C3 ;~ 01A2:8489
cs=0x1a2;eip=0x00848b; 	X(MOV(_sb_irq_number, 9));	// 17559 mov     _sb_irq_number, 9 ;~ 01A2:848B
cs=0x1a2;eip=0x008490; 	J(CALL(_sb_test_interrupt,0));	// 17560 call    _sb_test_interrupt ;~ 01A2:8490
cs=0x1a2;eip=0x008493; 	J(JNC(loc_184c3));	// 17561 jnb     short loc_184C3 ;~ 01A2:8493
cs=0x1a2;eip=0x008495; 	T(MOV(dx, offset(seg003,_aerrorcouldnot_0)));	// 17562 mov     dx, offset _aErrorCouldNot_0 ; "Error: Could not find IRQ!\r\n" ;~ 01A2:8495
loc_18498:
	// 5483 
cs=0x1a2;eip=0x008498; 	T(STC);	// 17565 stc ;~ 01A2:8498
cs=0x1a2;eip=0x008499; 	J(RETN(0));	// 17566 retn ;~ 01A2:8499
seg000_84c3_proc:
	// 17602 
loc_184c3:
	// 5486 
cs=0x1a2;eip=0x0084c3; 	T(CMP(_dma_channel, 0x0FF));	// 17604 cmp     _dma_channel, 0FFh ;~ 01A2:84C3
cs=0x1a2;eip=0x0084c8; 	J(JZ(loc_184dc));	// 17605 jz      short loc_184DC ;~ 01A2:84C8
cs=0x1a2;eip=0x0084ca; 	T(MOV(al, _dma_channel));	// 17606 mov     al, _dma_channel ;~ 01A2:84CA
cs=0x1a2;eip=0x0084cd; 	X(MOV(_dma_chn_mask, al));	// 17607 mov     _dma_chn_mask, al ;~ 01A2:84CD
cs=0x1a2;eip=0x0084d0; 	T(CMP(_bit_mode, 16));	// 17608 cmp     _bit_mode, 16 ;~ 01A2:84D0
cs=0x1a2;eip=0x0084d5; 	J(JZ(_sb16_sound_on));	// 17609 jz      short _sb16_sound_on ;~ 01A2:84D5
cs=0x1a2;eip=0x0084d7; 	J(CALL(_sb16_18540,0));	// 17610 call    _sb16_18540 ;~ 01A2:84D7
cs=0x1a2;eip=0x0084da; 	J(JNC(_sb16_sound_on));	// 17611 jnb     short _sb16_sound_on ;~ 01A2:84DA
loc_184dc:
	// 5487 
cs=0x1a2;eip=0x0084dc; 	T(CMP(_bit_mode, 8));	// 17614 cmp     _bit_mode, 8 ;~ 01A2:84DC
cs=0x1a2;eip=0x0084e1; 	J(JZ(loc_18501));	// 17615 jz      short loc_18501 ;~ 01A2:84E1
cs=0x1a2;eip=0x0084e3; 	X(MOV(_dma_chn_mask, 5));	// 17616 mov     _dma_chn_mask, 5 ;~ 01A2:84E3
cs=0x1a2;eip=0x0084e8; 	J(CALL(_sb16_18540,0));	// 17617 call    _sb16_18540 ;~ 01A2:84E8
cs=0x1a2;eip=0x0084eb; 	J(JNC(_sb16_sound_on));	// 17618 jnb     short _sb16_sound_on ;~ 01A2:84EB
cs=0x1a2;eip=0x0084ed; 	X(MOV(_dma_chn_mask, 6));	// 17619 mov     _dma_chn_mask, 6 ;~ 01A2:84ED
cs=0x1a2;eip=0x0084f2; 	J(CALL(_sb16_18540,0));	// 17620 call    _sb16_18540 ;~ 01A2:84F2
cs=0x1a2;eip=0x0084f5; 	J(JNC(_sb16_sound_on));	// 17621 jnb     short _sb16_sound_on ;~ 01A2:84F5
cs=0x1a2;eip=0x0084f7; 	X(MOV(_dma_chn_mask, 7));	// 17622 mov     _dma_chn_mask, 7 ;~ 01A2:84F7
cs=0x1a2;eip=0x0084fc; 	J(CALL(_sb16_18540,0));	// 17623 call    _sb16_18540 ;~ 01A2:84FC
cs=0x1a2;eip=0x0084ff; 	J(JNC(_sb16_sound_on));	// 17624 jnb     short _sb16_sound_on ;~ 01A2:84FF
loc_18501:
	// 5488 
cs=0x1a2;eip=0x008501; 	X(MOV(_dma_chn_mask, 1));	// 17627 mov     _dma_chn_mask, 1 ;~ 01A2:8501
cs=0x1a2;eip=0x008506; 	J(CALL(_sb16_18540,0));	// 17628 call    _sb16_18540 ;~ 01A2:8506
cs=0x1a2;eip=0x008509; 	J(JNC(_sb16_sound_on));	// 17629 jnb     short _sb16_sound_on ;~ 01A2:8509
cs=0x1a2;eip=0x00850b; 	X(MOV(_dma_chn_mask, 3));	// 17630 mov     _dma_chn_mask, 3 ;~ 01A2:850B
cs=0x1a2;eip=0x008510; 	J(CALL(_sb16_18540,0));	// 17631 call    _sb16_18540 ;~ 01A2:8510
cs=0x1a2;eip=0x008513; 	J(JNC(_sb16_sound_on));	// 17632 jnb     short _sb16_sound_on ;~ 01A2:8513
cs=0x1a2;eip=0x008515; 	X(MOV(_dma_chn_mask, 0));	// 17633 mov     _dma_chn_mask, 0 ;~ 01A2:8515
cs=0x1a2;eip=0x00851a; 	J(CALL(_sb16_18540,0));	// 17634 call    _sb16_18540 ;~ 01A2:851A
cs=0x1a2;eip=0x00851d; 	J(JNC(_sb16_sound_on));	// 17635 jnb     short _sb16_sound_on ;~ 01A2:851D
cs=0x1a2;eip=0x00851f; 	T(MOV(dx, offset(seg003,_aerrorcouldnot_1)));	// 17636 mov     dx, offset _aErrorCouldNot_1 ; "Error: Could not find DMA!\r\n" ;~ 01A2:851F
cs=0x1a2;eip=0x008522; 	T(STC);	// 17637 stc ;~ 01A2:8522
cs=0x1a2;eip=0x008523; 	J(RETN(0));	// 17638 retn ;~ 01A2:8523
_sb16_sound_on:
	// 17644 
cs=0x1a2;eip=0x008524; 	J(CALL(_checksb,0));	// 17646 call    _CheckSB ;~ 01A2:8524
cs=0x1a2;eip=0x008527; 	T(MOV(al, 0x0D1));	// 17647 mov     al, 0D1h ; 'Ñ' ;~ 01A2:8527
cs=0x1a2;eip=0x008529; 	J(CALL(_writesb,0));	// 17648 call    _WriteSB ;~ 01A2:8529
cs=0x1a2;eip=0x00852c; 	T(MOV(ax, _sb_base_port));	// 17649 mov     ax, _sb_base_port ;~ 01A2:852C
cs=0x1a2;eip=0x00852f; 	X(MOV(_snd_base_port, ax));	// 17650 mov     _snd_base_port, ax ;~ 01A2:852F
cs=0x1a2;eip=0x008532; 	T(MOV(al, _sb_irq_number));	// 17651 mov     al, _sb_irq_number ;~ 01A2:8532
cs=0x1a2;eip=0x008535; 	X(MOV(_irq_number, al));	// 17652 mov     _irq_number, al ;~ 01A2:8535
cs=0x1a2;eip=0x008538; 	T(MOV(al, _dma_chn_mask));	// 17653 mov     al, _dma_chn_mask ;~ 01A2:8538
cs=0x1a2;eip=0x00853b; 	X(MOV(_dma_channel, al));	// 17654 mov     _dma_channel, al ;~ 01A2:853B
cs=0x1a2;eip=0x00853e; 	T(CLC);	// 17655 clc ;~ 01A2:853E
cs=0x1a2;eip=0x00853f; 	J(RETN(0));	// 17656 retn ;~ 01A2:853F

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_sb16_sound_on: 	goto _sb16_sound_on;
        case m2c::k_sb_detect_irq: 	goto _sb_detect_irq;
        case m2c::kloc_18463: 	goto loc_18463;
        case m2c::kloc_18498: 	goto loc_18498;
        case m2c::kloc_184dc: 	goto loc_184dc;
        case m2c::kloc_18501: 	goto loc_18501;
        case m2c::kseg000_84c3_proc: 	goto seg000_84c3_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group29(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group29:
    _begin:
_sb_test_interrupt:
	// 17573 
cs=0x1a2;eip=0x00849a; 	X(MOV(_sb_int_counter, 0));	// 17575 mov     _sb_int_counter, 0 ;~ 01A2:849A
cs=0x1a2;eip=0x00849f; 	T(MOV(si, m2c::k_sb16_handler_int));	// 17576 mov     si, offset _sb16_handler_int ; myfunc ;~ 01A2:849F
cs=0x1a2;eip=0x0084a2; 	T(MOV(al, _sb_irq_number));	// 17577 mov     al, _sb_irq_number ;~ 01A2:84A2
cs=0x1a2;eip=0x0084a5; 	J(CALL(_setsnd_handler,0));	// 17578 call    _setsnd_handler ;~ 01A2:84A5
cs=0x1a2;eip=0x0084a8; 	T(MOV(al, 0x0F2));	// 17579 mov     al, 0F2h ; 'ò' ;~ 01A2:84A8
cs=0x1a2;eip=0x0084aa; 	J(CALL(_writesb,0));	// 17580 call    _WriteSB ;~ 01A2:84AA
cs=0x1a2;eip=0x0084ad; 	T(STI);	// 17581 sti ;~ 01A2:84AD
cs=0x1a2;eip=0x0084ae; 	T(XOR(cx, cx));	// 17582 xor     cx, cx ;~ 01A2:84AE
loc_184b0:
	// 5484 
cs=0x1a2;eip=0x0084b0; 	T(CMP(_sb_int_counter, 0));	// 17585 cmp     _sb_int_counter, 0 ;~ 01A2:84B0
cs=0x1a2;eip=0x0084b5; 	J(JNZ(loc_184be));	// 17586 jnz     short loc_184BE ;~ 01A2:84B5
cs=0x1a2;eip=0x0084b7; 	J(LOOP(loc_184b0));	// 17587 loop    loc_184B0 ;~ 01A2:84B7
cs=0x1a2;eip=0x0084b9; 	J(CALL(_restore_intvector,0));	// 17588 call    _restore_intvector ;~ 01A2:84B9
cs=0x1a2;eip=0x0084bc; 	T(STC);	// 17589 stc ;~ 01A2:84BC
cs=0x1a2;eip=0x0084bd; 	J(RETN(0));	// 17590 retn ;~ 01A2:84BD
loc_184be:
	// 5485 
cs=0x1a2;eip=0x0084be; 	J(CALL(_restore_intvector,0));	// 17594 call    _restore_intvector ;~ 01A2:84BE
cs=0x1a2;eip=0x0084c1; 	T(CLC);	// 17595 clc ;~ 01A2:84C1
cs=0x1a2;eip=0x0084c2; 	J(RETN(0));	// 17596 retn ;~ 01A2:84C2
_sb16_18540:
	// 17663 
cs=0x1a2;eip=0x008540; 	X(MOV(_dma_mode, 0x48));	// 17665 mov     _dma_mode, 48h ; 'H' ;~ 01A2:8540
cs=0x1a2;eip=0x008545; 	T(CLI);	// 17666 cli ;~ 01A2:8545
cs=0x1a2;eip=0x008546; 	J(CALL(_checksb,0));	// 17667 call    _CheckSB ;~ 01A2:8546
cs=0x1a2;eip=0x008549; 	X(MOV(word_2460e, 2));	// 17668 mov     word_2460E, 2 ;~ 01A2:8549
cs=0x1a2;eip=0x00854f; 	X(MOV(_audio_buf_pointer, 0));	// 17669 mov     _audio_buf_pointer, 0 ;~ 01A2:854F
cs=0x1a2;eip=0x008558; 	T(MOV(cl, _dma_chn_mask));	// 17670 mov     cl, _dma_chn_mask ;~ 01A2:8558
cs=0x1a2;eip=0x00855c; 	J(CALL(_dma_186e3,0));	// 17671 call    _dma_186E3 ;~ 01A2:855C
cs=0x1a2;eip=0x00855f; 	X(MOV(_sb_int_counter, 1));	// 17672 mov     _sb_int_counter, 1 ;~ 01A2:855F
cs=0x1a2;eip=0x008564; 	T(MOV(si, m2c::k_sb16_handler_int));	// 17673 mov     si, offset _sb16_handler_int ; myfunc ;~ 01A2:8564
cs=0x1a2;eip=0x008567; 	T(MOV(al, _sb_irq_number));	// 17674 mov     al, _sb_irq_number ;~ 01A2:8567
cs=0x1a2;eip=0x00856a; 	J(CALL(_setsnd_handler,0));	// 17675 call    _setsnd_handler ;~ 01A2:856A
cs=0x1a2;eip=0x00856d; 	T(CMP(_dma_chn_mask, 4));	// 17676 cmp     _dma_chn_mask, 4 ;~ 01A2:856D
cs=0x1a2;eip=0x008572; 	J(JNC(loc_18591));	// 17677 jnb     short loc_18591 ;~ 01A2:8572
cs=0x1a2;eip=0x008574; 	T(MOV(al, 0x40));	// 17678 mov     al, 40h ; '@' ;~ 01A2:8574
cs=0x1a2;eip=0x008576; 	J(CALL(_writesb,0));	// 17679 call    _WriteSB ;~ 01A2:8576
cs=0x1a2;eip=0x008579; 	T(MOV(al, 0x0D3));	// 17680 mov     al, 0D3h ; 'Ó' ;~ 01A2:8579
cs=0x1a2;eip=0x00857b; 	J(CALL(_writesb,0));	// 17681 call    _WriteSB ;~ 01A2:857B
cs=0x1a2;eip=0x00857e; 	T(MOV(al, 0x14));	// 17682 mov     al, 14h ;~ 01A2:857E
cs=0x1a2;eip=0x008580; 	J(CALL(_writesb,0));	// 17683 call    _WriteSB ;~ 01A2:8580
cs=0x1a2;eip=0x008583; 	T(MOV(ax, word_2460e));	// 17684 mov     ax, word_2460E ;~ 01A2:8583
cs=0x1a2;eip=0x008586; 	T(DEC(ax));	// 17685 dec     ax ;~ 01A2:8586
cs=0x1a2;eip=0x008587; 	J(CALL(_writesb,0));	// 17686 call    _WriteSB ;~ 01A2:8587
cs=0x1a2;eip=0x00858a; 	T(MOV(al, ah));	// 17687 mov     al, ah ;~ 01A2:858A
cs=0x1a2;eip=0x00858c; 	J(CALL(_writesb,0));	// 17688 call    _WriteSB ;~ 01A2:858C
cs=0x1a2;eip=0x00858f; 	J(JMP(loc_185b5));	// 17689 jmp     short loc_185B5 ;~ 01A2:858F
loc_18591:
	// 5489 
cs=0x1a2;eip=0x008591; 	T(MOV(al, 0x42));	// 17693 mov     al, 42h ; 'B' ;~ 01A2:8591
cs=0x1a2;eip=0x008593; 	J(CALL(_writesb,0));	// 17694 call    _WriteSB ;~ 01A2:8593
cs=0x1a2;eip=0x008596; 	T(MOV(al, 0x0AC));	// 17695 mov     al, 0ACh ; '¬' ;~ 01A2:8596
cs=0x1a2;eip=0x008598; 	J(CALL(_writesb,0));	// 17696 call    _WriteSB ;~ 01A2:8598
cs=0x1a2;eip=0x00859b; 	T(MOV(al, 0x44));	// 17697 mov     al, 44h ; 'D' ;~ 01A2:859B
cs=0x1a2;eip=0x00859d; 	J(CALL(_writesb,0));	// 17698 call    _WriteSB ;~ 01A2:859D
cs=0x1a2;eip=0x0085a0; 	T(MOV(al, 0x0B6));	// 17699 mov     al, 0B6h ; '¶' ;~ 01A2:85A0
cs=0x1a2;eip=0x0085a2; 	J(CALL(_writesb,0));	// 17700 call    _WriteSB ;~ 01A2:85A2
cs=0x1a2;eip=0x0085a5; 	T(MOV(al, 0x30));	// 17701 mov     al, 30h ; '0' ;~ 01A2:85A5
cs=0x1a2;eip=0x0085a7; 	J(CALL(_writesb,0));	// 17702 call    _WriteSB ;~ 01A2:85A7
cs=0x1a2;eip=0x0085aa; 	T(MOV(ax, word_2460e));	// 17703 mov     ax, word_2460E ;~ 01A2:85AA
cs=0x1a2;eip=0x0085ad; 	J(CALL(_writesb,0));	// 17704 call    _WriteSB ;~ 01A2:85AD
cs=0x1a2;eip=0x0085b0; 	T(MOV(al, ah));	// 17705 mov     al, ah ;~ 01A2:85B0
cs=0x1a2;eip=0x0085b2; 	J(CALL(_writesb,0));	// 17706 call    _WriteSB ;~ 01A2:85B2
loc_185b5:
	// 5490 
cs=0x1a2;eip=0x0085b5; 	T(STI);	// 17709 sti ;~ 01A2:85B5
cs=0x1a2;eip=0x0085b6; 	T(XOR(cx, cx));	// 17710 xor     cx, cx ;~ 01A2:85B6
loc_185b8:
	// 5491 
cs=0x1a2;eip=0x0085b8; 	T(CMP(_sb_int_counter, 1));	// 17713 cmp     _sb_int_counter, 1 ;~ 01A2:85B8
cs=0x1a2;eip=0x0085bd; 	J(JNZ(loc_185cd));	// 17714 jnz     short loc_185CD ;~ 01A2:85BD
cs=0x1a2;eip=0x0085bf; 	J(LOOP(loc_185b8));	// 17715 loop    loc_185B8 ;~ 01A2:85BF
cs=0x1a2;eip=0x0085c1; 	J(CALL(_restore_intvector,0));	// 17716 call    _restore_intvector ;~ 01A2:85C1
cs=0x1a2;eip=0x0085c4; 	T(MOV(cl, _dma_chn_mask));	// 17717 mov     cl, _dma_chn_mask ;~ 01A2:85C4
cs=0x1a2;eip=0x0085c8; 	J(CALL(_set_dmachn_mask,0));	// 17718 call    _set_dmachn_mask ;~ 01A2:85C8
cs=0x1a2;eip=0x0085cb; 	T(STC);	// 17719 stc ;~ 01A2:85CB
cs=0x1a2;eip=0x0085cc; 	J(RETN(0));	// 17720 retn ;~ 01A2:85CC
loc_185cd:
	// 5492 
cs=0x1a2;eip=0x0085cd; 	J(CALL(_restore_intvector,0));	// 17724 call    _restore_intvector ;~ 01A2:85CD
cs=0x1a2;eip=0x0085d0; 	T(MOV(cl, _dma_chn_mask));	// 17725 mov     cl, _dma_chn_mask ;~ 01A2:85D0
cs=0x1a2;eip=0x0085d4; 	J(CALL(_set_dmachn_mask,0));	// 17726 call    _set_dmachn_mask ;~ 01A2:85D4
cs=0x1a2;eip=0x0085d7; 	T(CLC);	// 17727 clc ;~ 01A2:85D7
cs=0x1a2;eip=0x0085d8; 	J(RETN(0));	// 17728 retn ;~ 01A2:85D8
_sb16_handler_int:
	// 17736 
cs=0x1a2;eip=0x0085d9; 	X(PUSH(ax));	// 17738 push    ax ;~ 01A2:85D9
cs=0x1a2;eip=0x0085da; 	X(PUSH(dx));	// 17739 push    dx ;~ 01A2:85DA
cs=0x1a2;eip=0x0085db; 	X(PUSH(ds));	// 17740 push    ds ;~ 01A2:85DB
cs=0x1a2;eip=0x0085dc; 	T(MOV(ax, seg_offset(seg003)));	// 17741 mov     ax, seg seg003 ;~ 01A2:85DC
cs=0x1a2;eip=0x0085df; 	T(MOV(ds, ax));	// 17742 mov     ds, ax ;~ 01A2:85DF
cs=0x1a2;eip=0x0085e1; 	T(MOV(dx, _sb_base_port));	// 17743 mov     dx, _sb_base_port ;~ 01A2:85E1
cs=0x1a2;eip=0x0085e5; 	T(ADD(dl, 0x0E));	// 17744 add     dl, 0Eh ;~ 01A2:85E5
cs=0x1a2;eip=0x0085e8; 	S(IN(al, dx));	// 17745 in      al, dx          ; DMA controller, 8237A-5. ;~ 01A2:85E8
cs=0x1a2;eip=0x0085e9; 	X(INC(_sb_int_counter));	// 17748 inc     _sb_int_counter ;~ 01A2:85E9
cs=0x1a2;eip=0x0085ed; 	T(MOV(al, 0x20));	// 17749 mov     al, 20h ; ' ' ;~ 01A2:85ED
cs=0x1a2;eip=0x0085ef; 	S(OUT(0x20, al));	// 17750 out     20h, al         ; Interrupt controller, 8259A. ;~ 01A2:85EF
cs=0x1a2;eip=0x0085f1; 	X(POP(ds));	// 17751 pop     ds ;~ 01A2:85F1
cs=0x1a2;eip=0x0085f2; 	X(POP(dx));	// 17752 pop     dx ;~ 01A2:85F2
cs=0x1a2;eip=0x0085f3; 	X(POP(ax));	// 17753 pop     ax ;~ 01A2:85F3
cs=0x1a2;eip=0x0085f4; 	J(IRET);	// 17754 iret ;~ 01A2:85F4

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_sb16_18540: 	goto _sb16_18540;
        case m2c::k_sb16_handler_int: 	goto _sb16_handler_int;
        case m2c::k_sb_test_interrupt: 	goto _sb_test_interrupt;
        case m2c::kloc_184b0: 	goto loc_184b0;
        case m2c::kloc_184be: 	goto loc_184be;
        case m2c::kloc_18591: 	goto loc_18591;
        case m2c::kloc_185b5: 	goto loc_185b5;
        case m2c::kloc_185b8: 	goto loc_185b8;
        case m2c::kloc_185cd: 	goto loc_185cd;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool seg000_85f5_proc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    seg000_85f5_proc:
    _begin:
cs=0x1a2;eip=0x0085f5; 	T(CMP(cl, 4));	// 17758 cmp     cl, 4 ;~ 01A2:85F5
cs=0x1a2;eip=0x0085f8; 	J(JNC(loc_18631));	// 17759 jnb     short loc_18631 ;~ 01A2:85F8
cs=0x1a2;eip=0x0085fa; 	T(XOR(al, al));	// 17760 xor     al, al ;~ 01A2:85FA
cs=0x1a2;eip=0x0085fc; 	S(OUT(0x0C, al));	// 17761 out     0Ch, al         ; DMA controller, 8237A-5. ;~ 01A2:85FC
cs=0x1a2;eip=0x0085fe; 	T(CMP(cl, 1));	// 17763 cmp     cl, 1 ;~ 01A2:85FE
cs=0x1a2;eip=0x008601; 	J(JZ(loc_18616));	// 17764 jz      short loc_18616 ;~ 01A2:8601
cs=0x1a2;eip=0x008603; 	T(CMP(cl, 2));	// 17765 cmp     cl, 2 ;~ 01A2:8603
cs=0x1a2;eip=0x008606; 	J(JZ(loc_1861f));	// 17766 jz      short loc_1861F ;~ 01A2:8606
cs=0x1a2;eip=0x008608; 	T(CMP(cl, 3));	// 17767 cmp     cl, 3 ;~ 01A2:8608
cs=0x1a2;eip=0x00860b; 	J(JZ(loc_18628));	// 17768 jz      short loc_18628 ;~ 01A2:860B
cs=0x1a2;eip=0x00860d; 	S(IN(al, 1));	// 17769 in      al, 1           ; DMA controller, 8237A-5. ;~ 01A2:860D
cs=0x1a2;eip=0x00860f; 	T(MOV(ah, al));	// 17771 mov     ah, al ;~ 01A2:860F
cs=0x1a2;eip=0x008611; 	S(IN(al, 1));	// 17772 in      al, 1           ; DMA controller, 8237A-5. ;~ 01A2:8611
cs=0x1a2;eip=0x008613; 	T(XCHG(al, ah));	// 17774 xchg    al, ah ;~ 01A2:8613
cs=0x1a2;eip=0x008615; 	J(RETN(0));	// 17775 retn ;~ 01A2:8615
loc_18616:
	// 5493 
cs=0x1a2;eip=0x008616; 	S(IN(al, 3));	// 17779 in      al, 3           ; DMA controller, 8237A-5. ;~ 01A2:8616
cs=0x1a2;eip=0x008618; 	T(MOV(ah, al));	// 17781 mov     ah, al ;~ 01A2:8618
cs=0x1a2;eip=0x00861a; 	S(IN(al, 3));	// 17782 in      al, 3           ; DMA controller, 8237A-5. ;~ 01A2:861A
cs=0x1a2;eip=0x00861c; 	T(XCHG(al, ah));	// 17784 xchg    al, ah ;~ 01A2:861C
cs=0x1a2;eip=0x00861e; 	J(RETN(0));	// 17785 retn ;~ 01A2:861E
loc_1861f:
	// 5494 
cs=0x1a2;eip=0x00861f; 	S(IN(al, 5));	// 17789 in      al, 5           ; DMA controller, 8237A-5. ;~ 01A2:861F
cs=0x1a2;eip=0x008621; 	T(MOV(ah, al));	// 17791 mov     ah, al ;~ 01A2:8621
cs=0x1a2;eip=0x008623; 	S(IN(al, 5));	// 17792 in      al, 5           ; DMA controller, 8237A-5. ;~ 01A2:8623
cs=0x1a2;eip=0x008625; 	T(XCHG(al, ah));	// 17794 xchg    al, ah ;~ 01A2:8625
cs=0x1a2;eip=0x008627; 	J(RETN(0));	// 17795 retn ;~ 01A2:8627
loc_18628:
	// 5495 
cs=0x1a2;eip=0x008628; 	S(IN(al, 7));	// 17799 in      al, 7           ; DMA controller, 8237A-5. ;~ 01A2:8628
cs=0x1a2;eip=0x00862a; 	T(MOV(ah, al));	// 17801 mov     ah, al ;~ 01A2:862A
cs=0x1a2;eip=0x00862c; 	S(IN(al, 7));	// 17802 in      al, 7           ; DMA controller, 8237A-5. ;~ 01A2:862C
cs=0x1a2;eip=0x00862e; 	T(XCHG(al, ah));	// 17804 xchg    al, ah ;~ 01A2:862E
cs=0x1a2;eip=0x008630; 	J(RETN(0));	// 17805 retn ;~ 01A2:8630
loc_18631:
	// 5496 
cs=0x1a2;eip=0x008631; 	T(XOR(al, al));	// 17809 xor     al, al ;~ 01A2:8631
cs=0x1a2;eip=0x008633; 	S(OUT(0x0D8, al));	// 17810 out     0D8h, al ;~ 01A2:8633
cs=0x1a2;eip=0x008635; 	T(CMP(cl, 5));	// 17811 cmp     cl, 5 ;~ 01A2:8635
cs=0x1a2;eip=0x008638; 	J(JZ(loc_1864d));	// 17812 jz      short loc_1864D ;~ 01A2:8638
cs=0x1a2;eip=0x00863a; 	T(CMP(cl, 6));	// 17813 cmp     cl, 6 ;~ 01A2:863A
cs=0x1a2;eip=0x00863d; 	J(JZ(loc_18656));	// 17814 jz      short loc_18656 ;~ 01A2:863D
cs=0x1a2;eip=0x00863f; 	T(CMP(cl, 7));	// 17815 cmp     cl, 7 ;~ 01A2:863F
cs=0x1a2;eip=0x008642; 	J(JZ(loc_1865f));	// 17816 jz      short loc_1865F ;~ 01A2:8642
cs=0x1a2;eip=0x008644; 	S(IN(al, 0x0C2));	// 17817 in      al, 0C2h        ; DMA controller, 8237A-5. ;~ 01A2:8644
cs=0x1a2;eip=0x008646; 	T(MOV(ah, al));	// 17819 mov     ah, al ;~ 01A2:8646
cs=0x1a2;eip=0x008648; 	S(IN(al, 0x0C2));	// 17820 in      al, 0C2h        ; DMA controller, 8237A-5. ;~ 01A2:8648
cs=0x1a2;eip=0x00864a; 	T(XCHG(al, ah));	// 17822 xchg    al, ah ;~ 01A2:864A
cs=0x1a2;eip=0x00864c; 	J(RETN(0));	// 17823 retn ;~ 01A2:864C
loc_1864d:
	// 5497 
cs=0x1a2;eip=0x00864d; 	S(IN(al, 0x0C6));	// 17827 in      al, 0C6h        ; DMA controller, 8237A-5. ;~ 01A2:864D
cs=0x1a2;eip=0x00864f; 	T(MOV(ah, al));	// 17829 mov     ah, al ;~ 01A2:864F
cs=0x1a2;eip=0x008651; 	S(IN(al, 0x0C6));	// 17830 in      al, 0C6h        ; DMA controller, 8237A-5. ;~ 01A2:8651
cs=0x1a2;eip=0x008653; 	T(XCHG(al, ah));	// 17832 xchg    al, ah ;~ 01A2:8653
cs=0x1a2;eip=0x008655; 	J(RETN(0));	// 17833 retn ;~ 01A2:8655
loc_18656:
	// 5498 
cs=0x1a2;eip=0x008656; 	S(IN(al, 0x0CA));	// 17837 in      al, 0CAh        ; DMA controller, 8237A-5. ;~ 01A2:8656
cs=0x1a2;eip=0x008658; 	T(MOV(ah, al));	// 17841 mov     ah, al ;~ 01A2:8658
cs=0x1a2;eip=0x00865a; 	S(IN(al, 0x0CA));	// 17842 in      al, 0CAh        ; DMA controller, 8237A-5. ;~ 01A2:865A
cs=0x1a2;eip=0x00865c; 	T(XCHG(al, ah));	// 17846 xchg    al, ah ;~ 01A2:865C
cs=0x1a2;eip=0x00865e; 	J(RETN(0));	// 17847 retn ;~ 01A2:865E
loc_1865f:
	// 5499 
cs=0x1a2;eip=0x00865f; 	S(IN(al, 0x0CE));	// 17851 in      al, 0CEh        ; DMA controller, 8237A-5. ;~ 01A2:865F
cs=0x1a2;eip=0x008661; 	T(MOV(ah, al));	// 17854 mov     ah, al ;~ 01A2:8661
cs=0x1a2;eip=0x008663; 	S(IN(al, 0x0CE));	// 17855 in      al, 0CEh        ; DMA controller, 8237A-5. ;~ 01A2:8663
cs=0x1a2;eip=0x008665; 	T(XCHG(al, ah));	// 17858 xchg    al, ah ;~ 01A2:8665
cs=0x1a2;eip=0x008667; 	J(RETN(0));	// 17859 retn ;~ 01A2:8667
ret_1a2_8668:
	// 5500 
cs=0x1a2;eip=0x008668; 	T(CMP(cl, 4));	// 17861 cmp     cl, 4 ;~ 01A2:8668
cs=0x1a2;eip=0x00866b; 	J(JNC(loc_186a4));	// 17862 jnb     short loc_186A4 ;~ 01A2:866B
cs=0x1a2;eip=0x00866d; 	T(XOR(al, al));	// 17863 xor     al, al ;~ 01A2:866D
cs=0x1a2;eip=0x00866f; 	S(OUT(0x0C, al));	// 17864 out     0Ch, al         ; DMA controller, 8237A-5. ;~ 01A2:866F
cs=0x1a2;eip=0x008671; 	T(CMP(cl, 1));	// 17866 cmp     cl, 1 ;~ 01A2:8671
cs=0x1a2;eip=0x008674; 	J(JZ(loc_18689));	// 17867 jz      short loc_18689 ;~ 01A2:8674
cs=0x1a2;eip=0x008676; 	T(CMP(cl, 2));	// 17868 cmp     cl, 2 ;~ 01A2:8676
cs=0x1a2;eip=0x008679; 	J(JZ(loc_18692));	// 17869 jz      short loc_18692 ;~ 01A2:8679
cs=0x1a2;eip=0x00867b; 	T(CMP(cl, 3));	// 17870 cmp     cl, 3 ;~ 01A2:867B
cs=0x1a2;eip=0x00867e; 	J(JZ(loc_1869b));	// 17871 jz      short loc_1869B ;~ 01A2:867E
cs=0x1a2;eip=0x008680; 	S(IN(al, 0));	// 17872 in      al, 0 ;~ 01A2:8680
cs=0x1a2;eip=0x008682; 	T(MOV(ah, al));	// 17873 mov     ah, al ;~ 01A2:8682
cs=0x1a2;eip=0x008684; 	S(IN(al, 0));	// 17874 in      al, 0 ;~ 01A2:8684
cs=0x1a2;eip=0x008686; 	T(XCHG(al, ah));	// 17875 xchg    al, ah ;~ 01A2:8686
cs=0x1a2;eip=0x008688; 	J(RETN(0));	// 17876 retn ;~ 01A2:8688
loc_18689:
	// 5501 
cs=0x1a2;eip=0x008689; 	S(IN(al, 2));	// 17880 in      al, 2           ; DMA controller, 8237A-5. ;~ 01A2:8689
cs=0x1a2;eip=0x00868b; 	T(MOV(ah, al));	// 17882 mov     ah, al ;~ 01A2:868B
cs=0x1a2;eip=0x00868d; 	S(IN(al, 2));	// 17883 in      al, 2           ; DMA controller, 8237A-5. ;~ 01A2:868D
cs=0x1a2;eip=0x00868f; 	T(XCHG(al, ah));	// 17885 xchg    al, ah ;~ 01A2:868F
cs=0x1a2;eip=0x008691; 	J(RETN(0));	// 17886 retn ;~ 01A2:8691
loc_18692:
	// 5502 
cs=0x1a2;eip=0x008692; 	S(IN(al, 4));	// 17890 in      al, 4           ; DMA controller, 8237A-5. ;~ 01A2:8692
cs=0x1a2;eip=0x008694; 	T(MOV(ah, al));	// 17892 mov     ah, al ;~ 01A2:8694
cs=0x1a2;eip=0x008696; 	S(IN(al, 4));	// 17893 in      al, 4           ; DMA controller, 8237A-5. ;~ 01A2:8696
cs=0x1a2;eip=0x008698; 	T(XCHG(al, ah));	// 17895 xchg    al, ah ;~ 01A2:8698
cs=0x1a2;eip=0x00869a; 	J(RETN(0));	// 17896 retn ;~ 01A2:869A
loc_1869b:
	// 5503 
cs=0x1a2;eip=0x00869b; 	S(IN(al, 6));	// 17900 in      al, 6           ; DMA controller, 8237A-5. ;~ 01A2:869B
cs=0x1a2;eip=0x00869d; 	T(MOV(ah, al));	// 17902 mov     ah, al ;~ 01A2:869D
cs=0x1a2;eip=0x00869f; 	S(IN(al, 6));	// 17903 in      al, 6           ; DMA controller, 8237A-5. ;~ 01A2:869F
cs=0x1a2;eip=0x0086a1; 	T(XCHG(al, ah));	// 17905 xchg    al, ah ;~ 01A2:86A1
cs=0x1a2;eip=0x0086a3; 	J(RETN(0));	// 17906 retn ;~ 01A2:86A3
loc_186a4:
	// 5504 
cs=0x1a2;eip=0x0086a4; 	T(XOR(al, al));	// 17910 xor     al, al ;~ 01A2:86A4
cs=0x1a2;eip=0x0086a6; 	S(OUT(0x0D8, al));	// 17911 out     0D8h, al ;~ 01A2:86A6
cs=0x1a2;eip=0x0086a8; 	T(CMP(cl, 5));	// 17912 cmp     cl, 5 ;~ 01A2:86A8
cs=0x1a2;eip=0x0086ab; 	J(JZ(loc_186c2));	// 17913 jz      short loc_186C2 ;~ 01A2:86AB
cs=0x1a2;eip=0x0086ad; 	T(CMP(cl, 6));	// 17914 cmp     cl, 6 ;~ 01A2:86AD
cs=0x1a2;eip=0x0086b0; 	J(JZ(loc_186cd));	// 17915 jz      short loc_186CD ;~ 01A2:86B0
cs=0x1a2;eip=0x0086b2; 	T(CMP(cl, 7));	// 17916 cmp     cl, 7 ;~ 01A2:86B2
cs=0x1a2;eip=0x0086b5; 	J(JZ(loc_186d8));	// 17917 jz      short loc_186D8 ;~ 01A2:86B5
cs=0x1a2;eip=0x0086b7; 	S(IN(al, 0x0C0));	// 17918 in      al, 0C0h        ; DMA controller, 8237A-5. ;~ 01A2:86B7
cs=0x1a2;eip=0x0086b9; 	T(MOV(ah, al));	// 17920 mov     ah, al ;~ 01A2:86B9
cs=0x1a2;eip=0x0086bb; 	S(IN(al, 0x0C0));	// 17921 in      al, 0C0h        ; DMA controller, 8237A-5. ;~ 01A2:86BB
cs=0x1a2;eip=0x0086bd; 	T(XCHG(al, ah));	// 17923 xchg    al, ah ;~ 01A2:86BD
cs=0x1a2;eip=0x0086bf; 	T(SHL(ax, 1));	// 17924 shl     ax, 1 ;~ 01A2:86BF
cs=0x1a2;eip=0x0086c1; 	J(RETN(0));	// 17925 retn ;~ 01A2:86C1
loc_186c2:
	// 5505 
cs=0x1a2;eip=0x0086c2; 	S(IN(al, 0x0C4));	// 17929 in      al, 0C4h        ; DMA controller, 8237A-5. ;~ 01A2:86C2
cs=0x1a2;eip=0x0086c4; 	T(MOV(ah, al));	// 17931 mov     ah, al ;~ 01A2:86C4
cs=0x1a2;eip=0x0086c6; 	S(IN(al, 0x0C4));	// 17932 in      al, 0C4h        ; DMA controller, 8237A-5. ;~ 01A2:86C6
cs=0x1a2;eip=0x0086c8; 	T(XCHG(al, ah));	// 17934 xchg    al, ah ;~ 01A2:86C8
cs=0x1a2;eip=0x0086ca; 	T(SHL(ax, 1));	// 17935 shl     ax, 1 ;~ 01A2:86CA
cs=0x1a2;eip=0x0086cc; 	J(RETN(0));	// 17936 retn ;~ 01A2:86CC
loc_186cd:
	// 5506 
cs=0x1a2;eip=0x0086cd; 	S(IN(al, 0x0C8));	// 17940 in      al, 0C8h        ; DMA 8237A-5. status register bits: ;~ 01A2:86CD
cs=0x1a2;eip=0x0086cf; 	T(MOV(ah, al));	// 17943 mov     ah, al ;~ 01A2:86CF
cs=0x1a2;eip=0x0086d1; 	S(IN(al, 0x0C8));	// 17944 in      al, 0C8h        ; DMA 8237A-5. status register bits: ;~ 01A2:86D1
cs=0x1a2;eip=0x0086d3; 	T(XCHG(al, ah));	// 17947 xchg    al, ah ;~ 01A2:86D3
cs=0x1a2;eip=0x0086d5; 	T(SHL(ax, 1));	// 17948 shl     ax, 1 ;~ 01A2:86D5
cs=0x1a2;eip=0x0086d7; 	J(RETN(0));	// 17949 retn ;~ 01A2:86D7
loc_186d8:
	// 5507 
cs=0x1a2;eip=0x0086d8; 	S(IN(al, 0x0CC));	// 17953 in      al, 0CCh        ; DMA controller, 8237A-5. ;~ 01A2:86D8
cs=0x1a2;eip=0x0086da; 	T(MOV(ah, al));	// 17955 mov     ah, al ;~ 01A2:86DA
cs=0x1a2;eip=0x0086dc; 	S(IN(al, 0x0CC));	// 17956 in      al, 0CCh        ; DMA controller, 8237A-5. ;~ 01A2:86DC
cs=0x1a2;eip=0x0086de; 	T(XCHG(al, ah));	// 17958 xchg    al, ah ;~ 01A2:86DE
cs=0x1a2;eip=0x0086e0; 	T(SHL(ax, 1));	// 17959 shl     ax, 1 ;~ 01A2:86E0
cs=0x1a2;eip=0x0086e2; 	J(RETN(0));	// 17960 retn ;~ 01A2:86E2

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::kloc_18616: 	goto loc_18616;
        case m2c::kloc_1861f: 	goto loc_1861f;
        case m2c::kloc_18628: 	goto loc_18628;
        case m2c::kloc_18631: 	goto loc_18631;
        case m2c::kloc_1864d: 	goto loc_1864d;
        case m2c::kloc_18656: 	goto loc_18656;
        case m2c::kloc_1865f: 	goto loc_1865f;
        case m2c::kloc_18689: 	goto loc_18689;
        case m2c::kloc_18692: 	goto loc_18692;
        case m2c::kloc_1869b: 	goto loc_1869b;
        case m2c::kloc_186a4: 	goto loc_186a4;
        case m2c::kloc_186c2: 	goto loc_186c2;
        case m2c::kloc_186cd: 	goto loc_186cd;
        case m2c::kloc_186d8: 	goto loc_186d8;
        case m2c::kret_1a2_8668: 	goto ret_1a2_8668;
        case m2c::kseg000_85f5_proc: 	goto seg000_85f5_proc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _dma_186e3(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _dma_186e3:
    _begin:
cs=0x1a2;eip=0x0086e3; 	T(TEST(*(db*)(((db*)&_config_word)+1), 0x10));	// 17967 test    byte ptr _config_word+1, 10h ;~ 01A2:86E3
cs=0x1a2;eip=0x0086e8; 	J(JZ(loc_186ef));	// 17968 jz      short loc_186EF ;~ 01A2:86E8
cs=0x1a2;eip=0x0086ea; 	X(AND(_dma_mode, 0x0EF));	// 17969 and     _dma_mode, 0EFh ;~ 01A2:86EA
loc_186ef:
	// 5508 
cs=0x1a2;eip=0x0086ef; 	T(CMP(cl, 1));	// 17972 cmp     cl, 1 ;~ 01A2:86EF
cs=0x1a2;eip=0x0086f2; 	J(JZ(loc_18761));	// 17973 jz      short loc_18761 ;~ 01A2:86F2
cs=0x1a2;eip=0x0086f4; 	T(CMP(cl, 2));	// 17974 cmp     cl, 2 ;~ 01A2:86F4
cs=0x1a2;eip=0x0086f7; 	J(JZ(loc_187a6));	// 17975 jz      loc_187A6 ;~ 01A2:86F7
cs=0x1a2;eip=0x0086fb; 	T(CMP(cl, 3));	// 17976 cmp     cl, 3 ;~ 01A2:86FB
cs=0x1a2;eip=0x0086fe; 	J(JZ(loc_187eb));	// 17977 jz      loc_187EB ;~ 01A2:86FE
cs=0x1a2;eip=0x008702; 	T(CMP(cl, 4));	// 17978 cmp     cl, 4 ;~ 01A2:8702
cs=0x1a2;eip=0x008705; 	J(JZ(loc_18830));	// 17979 jz      loc_18830 ;~ 01A2:8705
cs=0x1a2;eip=0x008709; 	T(CMP(cl, 5));	// 17980 cmp     cl, 5 ;~ 01A2:8709
cs=0x1a2;eip=0x00870c; 	J(JZ(loc_18878));	// 17981 jz      loc_18878 ;~ 01A2:870C
cs=0x1a2;eip=0x008710; 	T(CMP(cl, 6));	// 17982 cmp     cl, 6 ;~ 01A2:8710
cs=0x1a2;eip=0x008713; 	J(JZ(loc_188c2));	// 17983 jz      loc_188C2 ;~ 01A2:8713
cs=0x1a2;eip=0x008717; 	T(CMP(cl, 7));	// 17984 cmp     cl, 7 ;~ 01A2:8717
cs=0x1a2;eip=0x00871a; 	J(JZ(loc_1890c));	// 17985 jz      loc_1890C ;~ 01A2:871A
cs=0x1a2;eip=0x00871e; 	T(MOV(al, 4));	// 17986 mov     al, 4 ;~ 01A2:871E
cs=0x1a2;eip=0x008720; 	S(OUT(0x0A, al));	// 17987 out     0Ah, al         ; DMA controller, 8237A-5. ;~ 01A2:8720
cs=0x1a2;eip=0x008722; 	T(XOR(al, al));	// 17991 xor     al, al ;~ 01A2:8722
cs=0x1a2;eip=0x008724; 	S(OUT(0x0C, al));	// 17992 out     0Ch, al         ; DMA controller, 8237A-5. ;~ 01A2:8724
cs=0x1a2;eip=0x008726; 	T(MOV(al, _dma_mode));	// 17994 mov     al, _dma_mode ;~ 01A2:8726
cs=0x1a2;eip=0x008729; 	S(OUT(0x0B, al));	// 17995 out     0Bh, al         ; DMA 8237A-5. mode register bits: ;~ 01A2:8729
cs=0x1a2;eip=0x00872b; 	T(MOV(dx, *(dw*)(((db*)&_audio_buf_pointer)+2)));	// 18001 mov     dx, word ptr _audio_buf_pointer+2 ;~ 01A2:872B
cs=0x1a2;eip=0x00872f; 	T(ROL(dx, 4));	// 18002 rol     dx, 4 ;~ 01A2:872F
cs=0x1a2;eip=0x008732; 	T(MOV(ax, dx));	// 18003 mov     ax, dx ;~ 01A2:8732
cs=0x1a2;eip=0x008734; 	T(AND(al, 0x0F0));	// 18004 and     al, 0F0h ;~ 01A2:8734
cs=0x1a2;eip=0x008736; 	T(AND(dx, 0x0F));	// 18005 and     dx, 0Fh ;~ 01A2:8736
cs=0x1a2;eip=0x008739; 	T(ADD(ax, *(dw*)(((db*)&_audio_buf_pointer))));	// 18006 add     ax, word ptr _audio_buf_pointer ;~ 01A2:8739
cs=0x1a2;eip=0x00873d; 	T(ADC(dx, 0));	// 18007 adc     dx, 0 ;~ 01A2:873D
cs=0x1a2;eip=0x008740; 	T(ADD(ax, *(dw*)(((db*)&dword_24694))));	// 18008 add     ax, word ptr dword_24694 ;~ 01A2:8740
cs=0x1a2;eip=0x008744; 	T(ADC(dx, *(dw*)(((db*)&dword_24694)+2)));	// 18009 adc     dx, word ptr dword_24694+2 ;~ 01A2:8744
cs=0x1a2;eip=0x008748; 	S(OUT(0, al));	// 18010 out     0, al ;~ 01A2:8748
cs=0x1a2;eip=0x00874a; 	T(MOV(al, ah));	// 18011 mov     al, ah ;~ 01A2:874A
cs=0x1a2;eip=0x00874c; 	S(OUT(0, al));	// 18012 out     0, al ;~ 01A2:874C
cs=0x1a2;eip=0x00874e; 	T(MOV(al, dl));	// 18013 mov     al, dl ;~ 01A2:874E
cs=0x1a2;eip=0x008750; 	S(OUT(0x87, al));	// 18014 out     87h, al         ; DMA page register 74LS612: ;~ 01A2:8750
cs=0x1a2;eip=0x008752; 	T(MOV(ax, word_2460e));	// 18016 mov     ax, word_2460E ;~ 01A2:8752
cs=0x1a2;eip=0x008755; 	T(DEC(ax));	// 18017 dec     ax ;~ 01A2:8755
cs=0x1a2;eip=0x008756; 	S(OUT(1, al));	// 18018 out     1, al           ; DMA controller, 8237A-5. ;~ 01A2:8756
cs=0x1a2;eip=0x008758; 	T(MOV(al, ah));	// 18020 mov     al, ah ;~ 01A2:8758
cs=0x1a2;eip=0x00875a; 	S(OUT(1, al));	// 18021 out     1, al           ; DMA controller, 8237A-5. ;~ 01A2:875A
cs=0x1a2;eip=0x00875c; 	T(XOR(al, al));	// 18023 xor     al, al ;~ 01A2:875C
cs=0x1a2;eip=0x00875e; 	S(OUT(0x0A, al));	// 18024 out     0Ah, al         ; DMA controller, 8237A-5. ;~ 01A2:875E
cs=0x1a2;eip=0x008760; 	J(RETN(0));	// 18028 retn ;~ 01A2:8760
loc_18761:
	// 5509 
cs=0x1a2;eip=0x008761; 	T(MOV(al, 5));	// 18032 mov     al, 5 ;~ 01A2:8761
cs=0x1a2;eip=0x008763; 	S(OUT(0x0A, al));	// 18033 out     0Ah, al         ; DMA controller, 8237A-5. ;~ 01A2:8763
cs=0x1a2;eip=0x008765; 	T(XOR(al, al));	// 18037 xor     al, al ;~ 01A2:8765
cs=0x1a2;eip=0x008767; 	S(OUT(0x0C, al));	// 18038 out     0Ch, al         ; DMA controller, 8237A-5. ;~ 01A2:8767
cs=0x1a2;eip=0x008769; 	T(MOV(al, _dma_mode));	// 18040 mov     al, _dma_mode ;~ 01A2:8769
cs=0x1a2;eip=0x00876c; 	T(OR(al, 1));	// 18041 or      al, 1 ;~ 01A2:876C
cs=0x1a2;eip=0x00876e; 	S(OUT(0x0B, al));	// 18042 out     0Bh, al         ; DMA 8237A-5. mode register bits: ;~ 01A2:876E
cs=0x1a2;eip=0x008770; 	T(MOV(dx, *(dw*)(((db*)&_audio_buf_pointer)+2)));	// 18048 mov     dx, word ptr _audio_buf_pointer+2 ;~ 01A2:8770
cs=0x1a2;eip=0x008774; 	T(ROL(dx, 4));	// 18049 rol     dx, 4 ;~ 01A2:8774
cs=0x1a2;eip=0x008777; 	T(MOV(ax, dx));	// 18050 mov     ax, dx ;~ 01A2:8777
cs=0x1a2;eip=0x008779; 	T(AND(al, 0x0F0));	// 18051 and     al, 0F0h ;~ 01A2:8779
cs=0x1a2;eip=0x00877b; 	T(AND(dx, 0x0F));	// 18052 and     dx, 0Fh ;~ 01A2:877B
cs=0x1a2;eip=0x00877e; 	T(ADD(ax, *(dw*)(((db*)&_audio_buf_pointer))));	// 18053 add     ax, word ptr _audio_buf_pointer ;~ 01A2:877E
cs=0x1a2;eip=0x008782; 	T(ADC(dx, 0));	// 18054 adc     dx, 0 ;~ 01A2:8782
cs=0x1a2;eip=0x008785; 	T(ADD(ax, *(dw*)(((db*)&dword_24694))));	// 18055 add     ax, word ptr dword_24694 ;~ 01A2:8785
cs=0x1a2;eip=0x008789; 	T(ADC(dx, *(dw*)(((db*)&dword_24694)+2)));	// 18056 adc     dx, word ptr dword_24694+2 ;~ 01A2:8789
cs=0x1a2;eip=0x00878d; 	S(OUT(2, al));	// 18057 out     2, al           ; DMA controller, 8237A-5. ;~ 01A2:878D
cs=0x1a2;eip=0x00878f; 	T(MOV(al, ah));	// 18060 mov     al, ah ;~ 01A2:878F
cs=0x1a2;eip=0x008791; 	S(OUT(2, al));	// 18061 out     2, al           ; DMA controller, 8237A-5. ;~ 01A2:8791
cs=0x1a2;eip=0x008793; 	T(MOV(al, dl));	// 18064 mov     al, dl ;~ 01A2:8793
cs=0x1a2;eip=0x008795; 	S(OUT(0x83, al));	// 18065 out     83h, al         ; DMA page register 74LS612: ;~ 01A2:8795
cs=0x1a2;eip=0x008797; 	T(MOV(ax, word_2460e));	// 18067 mov     ax, word_2460E ;~ 01A2:8797
cs=0x1a2;eip=0x00879a; 	T(DEC(ax));	// 18068 dec     ax ;~ 01A2:879A
cs=0x1a2;eip=0x00879b; 	S(OUT(3, al));	// 18069 out     3, al           ; DMA controller, 8237A-5. ;~ 01A2:879B
cs=0x1a2;eip=0x00879d; 	T(MOV(al, ah));	// 18071 mov     al, ah ;~ 01A2:879D
cs=0x1a2;eip=0x00879f; 	S(OUT(3, al));	// 18072 out     3, al           ; DMA controller, 8237A-5. ;~ 01A2:879F
cs=0x1a2;eip=0x0087a1; 	T(MOV(al, 1));	// 18074 mov     al, 1 ;~ 01A2:87A1
cs=0x1a2;eip=0x0087a3; 	S(OUT(0x0A, al));	// 18075 out     0Ah, al         ; DMA controller, 8237A-5. ;~ 01A2:87A3
cs=0x1a2;eip=0x0087a5; 	J(RETN(0));	// 18079 retn ;~ 01A2:87A5
loc_187a6:
	// 5510 
cs=0x1a2;eip=0x0087a6; 	T(MOV(al, 6));	// 18083 mov     al, 6 ;~ 01A2:87A6
cs=0x1a2;eip=0x0087a8; 	S(OUT(0x0A, al));	// 18084 out     0Ah, al         ; DMA controller, 8237A-5. ;~ 01A2:87A8
cs=0x1a2;eip=0x0087aa; 	T(XOR(al, al));	// 18088 xor     al, al ;~ 01A2:87AA
cs=0x1a2;eip=0x0087ac; 	S(OUT(0x0C, al));	// 18089 out     0Ch, al         ; DMA controller, 8237A-5. ;~ 01A2:87AC
cs=0x1a2;eip=0x0087ae; 	T(MOV(al, _dma_mode));	// 18091 mov     al, _dma_mode ;~ 01A2:87AE
cs=0x1a2;eip=0x0087b1; 	T(OR(al, 2));	// 18092 or      al, 2 ;~ 01A2:87B1
cs=0x1a2;eip=0x0087b3; 	S(OUT(0x0B, al));	// 18093 out     0Bh, al         ; DMA 8237A-5. mode register bits: ;~ 01A2:87B3
cs=0x1a2;eip=0x0087b5; 	T(MOV(dx, *(dw*)(((db*)&_audio_buf_pointer)+2)));	// 18099 mov     dx, word ptr _audio_buf_pointer+2 ;~ 01A2:87B5
cs=0x1a2;eip=0x0087b9; 	T(ROL(dx, 4));	// 18100 rol     dx, 4 ;~ 01A2:87B9
cs=0x1a2;eip=0x0087bc; 	T(MOV(ax, dx));	// 18101 mov     ax, dx ;~ 01A2:87BC
cs=0x1a2;eip=0x0087be; 	T(AND(al, 0x0F0));	// 18102 and     al, 0F0h ;~ 01A2:87BE
cs=0x1a2;eip=0x0087c0; 	T(AND(dx, 0x0F));	// 18103 and     dx, 0Fh ;~ 01A2:87C0
cs=0x1a2;eip=0x0087c3; 	T(ADD(ax, *(dw*)(((db*)&_audio_buf_pointer))));	// 18104 add     ax, word ptr _audio_buf_pointer ;~ 01A2:87C3
cs=0x1a2;eip=0x0087c7; 	T(ADC(dx, 0));	// 18105 adc     dx, 0 ;~ 01A2:87C7
cs=0x1a2;eip=0x0087ca; 	T(ADD(ax, *(dw*)(((db*)&dword_24694))));	// 18106 add     ax, word ptr dword_24694 ;~ 01A2:87CA
cs=0x1a2;eip=0x0087ce; 	T(ADC(dx, *(dw*)(((db*)&dword_24694)+2)));	// 18107 adc     dx, word ptr dword_24694+2 ;~ 01A2:87CE
cs=0x1a2;eip=0x0087d2; 	S(OUT(4, al));	// 18108 out     4, al           ; DMA controller, 8237A-5. ;~ 01A2:87D2
cs=0x1a2;eip=0x0087d4; 	T(MOV(al, ah));	// 18111 mov     al, ah ;~ 01A2:87D4
cs=0x1a2;eip=0x0087d6; 	S(OUT(4, al));	// 18112 out     4, al           ; DMA controller, 8237A-5. ;~ 01A2:87D6
cs=0x1a2;eip=0x0087d8; 	T(MOV(al, dl));	// 18115 mov     al, dl ;~ 01A2:87D8
cs=0x1a2;eip=0x0087da; 	S(OUT(0x81, al));	// 18116 out     81h, al         ; DMA page register 74LS612: ;~ 01A2:87DA
cs=0x1a2;eip=0x0087dc; 	T(MOV(ax, word_2460e));	// 18118 mov     ax, word_2460E ;~ 01A2:87DC
cs=0x1a2;eip=0x0087df; 	T(DEC(ax));	// 18119 dec     ax ;~ 01A2:87DF
cs=0x1a2;eip=0x0087e0; 	S(OUT(5, al));	// 18120 out     5, al           ; DMA controller, 8237A-5. ;~ 01A2:87E0
cs=0x1a2;eip=0x0087e2; 	T(MOV(al, ah));	// 18122 mov     al, ah ;~ 01A2:87E2
cs=0x1a2;eip=0x0087e4; 	S(OUT(5, al));	// 18123 out     5, al           ; DMA controller, 8237A-5. ;~ 01A2:87E4
cs=0x1a2;eip=0x0087e6; 	T(MOV(al, 2));	// 18125 mov     al, 2 ;~ 01A2:87E6
cs=0x1a2;eip=0x0087e8; 	S(OUT(0x0A, al));	// 18126 out     0Ah, al         ; DMA controller, 8237A-5. ;~ 01A2:87E8
cs=0x1a2;eip=0x0087ea; 	J(RETN(0));	// 18130 retn ;~ 01A2:87EA
loc_187eb:
	// 5511 
cs=0x1a2;eip=0x0087eb; 	T(MOV(al, 7));	// 18134 mov     al, 7 ;~ 01A2:87EB
cs=0x1a2;eip=0x0087ed; 	S(OUT(0x0A, al));	// 18135 out     0Ah, al         ; DMA controller, 8237A-5. ;~ 01A2:87ED
cs=0x1a2;eip=0x0087ef; 	T(XOR(al, al));	// 18139 xor     al, al ;~ 01A2:87EF
cs=0x1a2;eip=0x0087f1; 	S(OUT(0x0C, al));	// 18140 out     0Ch, al         ; DMA controller, 8237A-5. ;~ 01A2:87F1
cs=0x1a2;eip=0x0087f3; 	T(MOV(al, _dma_mode));	// 18142 mov     al, _dma_mode ;~ 01A2:87F3
cs=0x1a2;eip=0x0087f6; 	T(OR(al, 3));	// 18143 or      al, 3 ;~ 01A2:87F6
cs=0x1a2;eip=0x0087f8; 	S(OUT(0x0B, al));	// 18144 out     0Bh, al         ; DMA 8237A-5. mode register bits: ;~ 01A2:87F8
cs=0x1a2;eip=0x0087fa; 	T(MOV(dx, *(dw*)(((db*)&_audio_buf_pointer)+2)));	// 18150 mov     dx, word ptr _audio_buf_pointer+2 ;~ 01A2:87FA
cs=0x1a2;eip=0x0087fe; 	T(ROL(dx, 4));	// 18151 rol     dx, 4 ;~ 01A2:87FE
cs=0x1a2;eip=0x008801; 	T(MOV(ax, dx));	// 18152 mov     ax, dx ;~ 01A2:8801
cs=0x1a2;eip=0x008803; 	T(AND(al, 0x0F0));	// 18153 and     al, 0F0h ;~ 01A2:8803
cs=0x1a2;eip=0x008805; 	T(AND(dx, 0x0F));	// 18154 and     dx, 0Fh ;~ 01A2:8805
cs=0x1a2;eip=0x008808; 	T(ADD(ax, *(dw*)(((db*)&_audio_buf_pointer))));	// 18155 add     ax, word ptr _audio_buf_pointer ;~ 01A2:8808
cs=0x1a2;eip=0x00880c; 	T(ADC(dx, 0));	// 18156 adc     dx, 0 ;~ 01A2:880C
cs=0x1a2;eip=0x00880f; 	T(ADD(ax, *(dw*)(((db*)&dword_24694))));	// 18157 add     ax, word ptr dword_24694 ;~ 01A2:880F
cs=0x1a2;eip=0x008813; 	T(ADC(dx, *(dw*)(((db*)&dword_24694)+2)));	// 18158 adc     dx, word ptr dword_24694+2 ;~ 01A2:8813
cs=0x1a2;eip=0x008817; 	S(OUT(6, al));	// 18159 out     6, al           ; DMA controller, 8237A-5. ;~ 01A2:8817
cs=0x1a2;eip=0x008819; 	T(MOV(al, ah));	// 18162 mov     al, ah ;~ 01A2:8819
cs=0x1a2;eip=0x00881b; 	S(OUT(6, al));	// 18163 out     6, al           ; DMA controller, 8237A-5. ;~ 01A2:881B
cs=0x1a2;eip=0x00881d; 	T(MOV(al, dl));	// 18166 mov     al, dl ;~ 01A2:881D
cs=0x1a2;eip=0x00881f; 	S(OUT(0x82, al));	// 18167 out     82h, al         ; DMA page register 74LS612: ;~ 01A2:881F
cs=0x1a2;eip=0x008821; 	T(MOV(ax, word_2460e));	// 18169 mov     ax, word_2460E ;~ 01A2:8821
cs=0x1a2;eip=0x008824; 	T(DEC(ax));	// 18170 dec     ax ;~ 01A2:8824
cs=0x1a2;eip=0x008825; 	S(OUT(7, al));	// 18171 out     7, al           ; DMA controller, 8237A-5. ;~ 01A2:8825
cs=0x1a2;eip=0x008827; 	T(MOV(al, ah));	// 18173 mov     al, ah ;~ 01A2:8827
cs=0x1a2;eip=0x008829; 	S(OUT(7, al));	// 18174 out     7, al           ; DMA controller, 8237A-5. ;~ 01A2:8829
cs=0x1a2;eip=0x00882b; 	T(MOV(al, 3));	// 18176 mov     al, 3 ;~ 01A2:882B
cs=0x1a2;eip=0x00882d; 	S(OUT(0x0A, al));	// 18177 out     0Ah, al         ; DMA controller, 8237A-5. ;~ 01A2:882D
cs=0x1a2;eip=0x00882f; 	J(RETN(0));	// 18181 retn ;~ 01A2:882F
loc_18830:
	// 5512 
cs=0x1a2;eip=0x008830; 	T(MOV(al, 4));	// 18185 mov     al, 4 ;~ 01A2:8830
cs=0x1a2;eip=0x008832; 	S(OUT(0x0D4, al));	// 18186 out     0D4h, al ;~ 01A2:8832
cs=0x1a2;eip=0x008834; 	T(XOR(al, al));	// 18187 xor     al, al ;~ 01A2:8834
cs=0x1a2;eip=0x008836; 	S(OUT(0x0D8, al));	// 18188 out     0D8h, al ;~ 01A2:8836
cs=0x1a2;eip=0x008838; 	T(MOV(al, _dma_mode));	// 18189 mov     al, _dma_mode ;~ 01A2:8838
cs=0x1a2;eip=0x00883b; 	S(OUT(0x0D6, al));	// 18190 out     0D6h, al ;~ 01A2:883B
cs=0x1a2;eip=0x00883d; 	T(MOVZX(edx, *(dw*)(((db*)&_audio_buf_pointer)+2)));	// 18191 movzx   edx, word ptr _audio_buf_pointer+2 ;~ 01A2:883D
cs=0x1a2;eip=0x008843; 	T(SHL(edx, 4));	// 18192 shl     edx, 4 ;~ 01A2:8843
cs=0x1a2;eip=0x008847; 	T(MOVZX(eax, *(dw*)(((db*)&_audio_buf_pointer))));	// 18193 movzx   eax, word ptr _audio_buf_pointer ;~ 01A2:8847
cs=0x1a2;eip=0x00884d; 	T(ADD(eax, edx));	// 18194 add     eax, edx ;~ 01A2:884D
cs=0x1a2;eip=0x008850; 	T(ADD(eax, dword_24694));	// 18195 add     eax, dword_24694 ;~ 01A2:8850
cs=0x1a2;eip=0x008855; 	T(SHR(eax, 1));	// 18196 shr     eax, 1 ;~ 01A2:8855
cs=0x1a2;eip=0x008858; 	S(OUT(0x0C0, al));	// 18197 out     0C0h, al        ; DMA controller, 8237A-5. ;~ 01A2:8858
cs=0x1a2;eip=0x00885a; 	T(MOV(al, ah));	// 18200 mov     al, ah ;~ 01A2:885A
cs=0x1a2;eip=0x00885c; 	S(OUT(0x0C0, al));	// 18201 out     0C0h, al        ; DMA controller, 8237A-5. ;~ 01A2:885C
cs=0x1a2;eip=0x00885e; 	T(SHR(eax, 0x0F));	// 18204 shr     eax, 0Fh ;~ 01A2:885E
cs=0x1a2;eip=0x008862; 	S(OUT(0x8F, al));	// 18205 out     8Fh, al         ; DMA page register 74LS612: ;~ 01A2:8862
cs=0x1a2;eip=0x008864; 	T(MOV(ax, word_2460e));	// 18207 mov     ax, word_2460E ;~ 01A2:8864
cs=0x1a2;eip=0x008867; 	T(SHR(ax, 1));	// 18208 shr     ax, 1 ;~ 01A2:8867
cs=0x1a2;eip=0x008869; 	T(ADC(ax, 0));	// 18209 adc     ax, 0 ;~ 01A2:8869
cs=0x1a2;eip=0x00886c; 	T(DEC(ax));	// 18210 dec     ax ;~ 01A2:886C
cs=0x1a2;eip=0x00886d; 	S(OUT(0x0C2, al));	// 18211 out     0C2h, al        ; DMA controller, 8237A-5. ;~ 01A2:886D
cs=0x1a2;eip=0x00886f; 	T(MOV(al, ah));	// 18214 mov     al, ah ;~ 01A2:886F
cs=0x1a2;eip=0x008871; 	S(OUT(0x0C2, al));	// 18215 out     0C2h, al        ; DMA controller, 8237A-5. ;~ 01A2:8871
cs=0x1a2;eip=0x008873; 	T(XOR(al, al));	// 18218 xor     al, al ;~ 01A2:8873
cs=0x1a2;eip=0x008875; 	S(OUT(0x0D4, al));	// 18219 out     0D4h, al ;~ 01A2:8875
cs=0x1a2;eip=0x008877; 	J(RETN(0));	// 18220 retn ;~ 01A2:8877
loc_18878:
	// 5513 
cs=0x1a2;eip=0x008878; 	T(MOV(al, 5));	// 18224 mov     al, 5 ;~ 01A2:8878
cs=0x1a2;eip=0x00887a; 	S(OUT(0x0D4, al));	// 18225 out     0D4h, al ;~ 01A2:887A
cs=0x1a2;eip=0x00887c; 	T(XOR(al, al));	// 18226 xor     al, al ;~ 01A2:887C
cs=0x1a2;eip=0x00887e; 	S(OUT(0x0D8, al));	// 18227 out     0D8h, al ;~ 01A2:887E
cs=0x1a2;eip=0x008880; 	T(MOV(al, _dma_mode));	// 18228 mov     al, _dma_mode ;~ 01A2:8880
cs=0x1a2;eip=0x008883; 	T(OR(al, 1));	// 18229 or      al, 1 ;~ 01A2:8883
cs=0x1a2;eip=0x008885; 	S(OUT(0x0D6, al));	// 18230 out     0D6h, al ;~ 01A2:8885
cs=0x1a2;eip=0x008887; 	T(MOVZX(edx, *(dw*)(((db*)&_audio_buf_pointer)+2)));	// 18231 movzx   edx, word ptr _audio_buf_pointer+2 ;~ 01A2:8887
cs=0x1a2;eip=0x00888d; 	T(SHL(edx, 4));	// 18232 shl     edx, 4 ;~ 01A2:888D
cs=0x1a2;eip=0x008891; 	T(MOVZX(eax, *(dw*)(((db*)&_audio_buf_pointer))));	// 18233 movzx   eax, word ptr _audio_buf_pointer ;~ 01A2:8891
cs=0x1a2;eip=0x008897; 	T(ADD(eax, edx));	// 18234 add     eax, edx ;~ 01A2:8897
cs=0x1a2;eip=0x00889a; 	T(ADD(eax, dword_24694));	// 18235 add     eax, dword_24694 ;~ 01A2:889A
cs=0x1a2;eip=0x00889f; 	T(SHR(eax, 1));	// 18236 shr     eax, 1 ;~ 01A2:889F
cs=0x1a2;eip=0x0088a2; 	S(OUT(0x0C4, al));	// 18237 out     0C4h, al        ; DMA controller, 8237A-5. ;~ 01A2:88A2
cs=0x1a2;eip=0x0088a4; 	T(MOV(al, ah));	// 18240 mov     al, ah ;~ 01A2:88A4
cs=0x1a2;eip=0x0088a6; 	S(OUT(0x0C4, al));	// 18241 out     0C4h, al        ; DMA controller, 8237A-5. ;~ 01A2:88A6
cs=0x1a2;eip=0x0088a8; 	T(SHR(eax, 0x0F));	// 18244 shr     eax, 0Fh ;~ 01A2:88A8
cs=0x1a2;eip=0x0088ac; 	S(OUT(0x8B, al));	// 18245 out     8Bh, al         ; DMA page register 74LS612: ;~ 01A2:88AC
cs=0x1a2;eip=0x0088ae; 	T(MOV(ax, word_2460e));	// 18247 mov     ax, word_2460E ;~ 01A2:88AE
cs=0x1a2;eip=0x0088b1; 	T(SHR(ax, 1));	// 18248 shr     ax, 1 ;~ 01A2:88B1
cs=0x1a2;eip=0x0088b3; 	T(ADC(ax, 0));	// 18249 adc     ax, 0 ;~ 01A2:88B3
cs=0x1a2;eip=0x0088b6; 	T(DEC(ax));	// 18250 dec     ax ;~ 01A2:88B6
cs=0x1a2;eip=0x0088b7; 	S(OUT(0x0C6, al));	// 18251 out     0C6h, al        ; DMA controller, 8237A-5. ;~ 01A2:88B7
cs=0x1a2;eip=0x0088b9; 	T(MOV(al, ah));	// 18254 mov     al, ah ;~ 01A2:88B9
cs=0x1a2;eip=0x0088bb; 	S(OUT(0x0C6, al));	// 18255 out     0C6h, al        ; DMA controller, 8237A-5. ;~ 01A2:88BB
cs=0x1a2;eip=0x0088bd; 	T(MOV(al, 1));	// 18258 mov     al, 1 ;~ 01A2:88BD
cs=0x1a2;eip=0x0088bf; 	S(OUT(0x0D4, al));	// 18259 out     0D4h, al ;~ 01A2:88BF
cs=0x1a2;eip=0x0088c1; 	J(RETN(0));	// 18260 retn ;~ 01A2:88C1
loc_188c2:
	// 5514 
cs=0x1a2;eip=0x0088c2; 	T(MOV(al, 6));	// 18264 mov     al, 6 ;~ 01A2:88C2
cs=0x1a2;eip=0x0088c4; 	S(OUT(0x0D4, al));	// 18265 out     0D4h, al ;~ 01A2:88C4
cs=0x1a2;eip=0x0088c6; 	T(XOR(al, al));	// 18266 xor     al, al ;~ 01A2:88C6
cs=0x1a2;eip=0x0088c8; 	S(OUT(0x0D8, al));	// 18267 out     0D8h, al ;~ 01A2:88C8
cs=0x1a2;eip=0x0088ca; 	T(MOV(al, _dma_mode));	// 18268 mov     al, _dma_mode ;~ 01A2:88CA
cs=0x1a2;eip=0x0088cd; 	T(OR(al, 2));	// 18269 or      al, 2 ;~ 01A2:88CD
cs=0x1a2;eip=0x0088cf; 	S(OUT(0x0D6, al));	// 18270 out     0D6h, al ;~ 01A2:88CF
cs=0x1a2;eip=0x0088d1; 	T(MOVZX(edx, *(dw*)(((db*)&_audio_buf_pointer)+2)));	// 18271 movzx   edx, word ptr _audio_buf_pointer+2 ;~ 01A2:88D1
cs=0x1a2;eip=0x0088d7; 	T(SHL(edx, 4));	// 18272 shl     edx, 4 ;~ 01A2:88D7
cs=0x1a2;eip=0x0088db; 	T(MOVZX(eax, *(dw*)(((db*)&_audio_buf_pointer))));	// 18273 movzx   eax, word ptr _audio_buf_pointer ;~ 01A2:88DB
cs=0x1a2;eip=0x0088e1; 	T(ADD(eax, edx));	// 18274 add     eax, edx ;~ 01A2:88E1
cs=0x1a2;eip=0x0088e4; 	T(ADD(eax, dword_24694));	// 18275 add     eax, dword_24694 ;~ 01A2:88E4
cs=0x1a2;eip=0x0088e9; 	T(SHR(eax, 1));	// 18276 shr     eax, 1 ;~ 01A2:88E9
cs=0x1a2;eip=0x0088ec; 	S(OUT(0x0C8, al));	// 18277 out     0C8h, al        ; DMA 8237A-5. cmd reg bits: ;~ 01A2:88EC
cs=0x1a2;eip=0x0088ee; 	T(MOV(al, ah));	// 18286 mov     al, ah ;~ 01A2:88EE
cs=0x1a2;eip=0x0088f0; 	S(OUT(0x0C8, al));	// 18287 out     0C8h, al        ; DMA 8237A-5. cmd reg bits: ;~ 01A2:88F0
cs=0x1a2;eip=0x0088f2; 	T(SHR(eax, 0x0F));	// 18296 shr     eax, 0Fh ;~ 01A2:88F2
cs=0x1a2;eip=0x0088f6; 	S(OUT(0x89, al));	// 18297 out     89h, al         ; DMA page register 74LS612: ;~ 01A2:88F6
cs=0x1a2;eip=0x0088f8; 	T(MOV(ax, word_2460e));	// 18299 mov     ax, word_2460E ;~ 01A2:88F8
cs=0x1a2;eip=0x0088fb; 	T(SHR(ax, 1));	// 18300 shr     ax, 1 ;~ 01A2:88FB
cs=0x1a2;eip=0x0088fd; 	T(ADC(ax, 0));	// 18301 adc     ax, 0 ;~ 01A2:88FD
cs=0x1a2;eip=0x008900; 	T(DEC(ax));	// 18302 dec     ax ;~ 01A2:8900
cs=0x1a2;eip=0x008901; 	S(OUT(0x0CA, al));	// 18303 out     0CAh, al        ; DMA controller, 8237A-5. ;~ 01A2:8901
cs=0x1a2;eip=0x008903; 	T(MOV(al, ah));	// 18307 mov     al, ah ;~ 01A2:8903
cs=0x1a2;eip=0x008905; 	S(OUT(0x0CA, al));	// 18308 out     0CAh, al        ; DMA controller, 8237A-5. ;~ 01A2:8905
cs=0x1a2;eip=0x008907; 	T(MOV(al, 2));	// 18312 mov     al, 2 ;~ 01A2:8907
cs=0x1a2;eip=0x008909; 	S(OUT(0x0D4, al));	// 18313 out     0D4h, al ;~ 01A2:8909
cs=0x1a2;eip=0x00890b; 	J(RETN(0));	// 18314 retn ;~ 01A2:890B
loc_1890c:
	// 5515 
cs=0x1a2;eip=0x00890c; 	T(MOV(al, 7));	// 18318 mov     al, 7 ;~ 01A2:890C
cs=0x1a2;eip=0x00890e; 	S(OUT(0x0D4, al));	// 18319 out     0D4h, al ;~ 01A2:890E
cs=0x1a2;eip=0x008910; 	T(MOV(al, _dma_mode));	// 18320 mov     al, _dma_mode ;~ 01A2:8910
cs=0x1a2;eip=0x008913; 	T(OR(al, 3));	// 18321 or      al, 3 ;~ 01A2:8913
cs=0x1a2;eip=0x008915; 	S(OUT(0x0D6, al));	// 18322 out     0D6h, al ;~ 01A2:8915
cs=0x1a2;eip=0x008917; 	T(XOR(al, al));	// 18323 xor     al, al ;~ 01A2:8917
cs=0x1a2;eip=0x008919; 	S(OUT(0x0D8, al));	// 18324 out     0D8h, al ;~ 01A2:8919
cs=0x1a2;eip=0x00891b; 	T(MOVZX(edx, *(dw*)(((db*)&_audio_buf_pointer)+2)));	// 18325 movzx   edx, word ptr _audio_buf_pointer+2 ;~ 01A2:891B
cs=0x1a2;eip=0x008921; 	T(SHL(edx, 4));	// 18326 shl     edx, 4 ;~ 01A2:8921
cs=0x1a2;eip=0x008925; 	T(MOVZX(eax, *(dw*)(((db*)&_audio_buf_pointer))));	// 18327 movzx   eax, word ptr _audio_buf_pointer ;~ 01A2:8925
cs=0x1a2;eip=0x00892b; 	T(ADD(eax, edx));	// 18328 add     eax, edx ;~ 01A2:892B
cs=0x1a2;eip=0x00892e; 	T(ADD(eax, dword_24694));	// 18329 add     eax, dword_24694 ;~ 01A2:892E
cs=0x1a2;eip=0x008933; 	T(SHR(eax, 1));	// 18330 shr     eax, 1 ;~ 01A2:8933
cs=0x1a2;eip=0x008936; 	S(OUT(0x0CC, al));	// 18331 out     0CCh, al        ; DMA controller, 8237A-5. ;~ 01A2:8936
cs=0x1a2;eip=0x008938; 	T(MOV(al, ah));	// 18333 mov     al, ah ;~ 01A2:8938
cs=0x1a2;eip=0x00893a; 	S(OUT(0x0CC, al));	// 18334 out     0CCh, al        ; DMA controller, 8237A-5. ;~ 01A2:893A
cs=0x1a2;eip=0x00893c; 	T(SHR(eax, 0x0F));	// 18336 shr     eax, 0Fh ;~ 01A2:893C
cs=0x1a2;eip=0x008940; 	S(OUT(0x8A, al));	// 18337 out     8Ah, al         ; DMA page register 74LS612: ;~ 01A2:8940
cs=0x1a2;eip=0x008942; 	T(MOV(ax, word_2460e));	// 18339 mov     ax, word_2460E ;~ 01A2:8942
cs=0x1a2;eip=0x008945; 	T(SHR(ax, 1));	// 18340 shr     ax, 1 ;~ 01A2:8945
cs=0x1a2;eip=0x008947; 	T(ADC(ax, 0));	// 18341 adc     ax, 0 ;~ 01A2:8947
cs=0x1a2;eip=0x00894a; 	T(DEC(ax));	// 18342 dec     ax ;~ 01A2:894A
cs=0x1a2;eip=0x00894b; 	S(OUT(0x0CE, al));	// 18343 out     0CEh, al        ; DMA controller, 8237A-5. ;~ 01A2:894B
cs=0x1a2;eip=0x00894d; 	T(MOV(al, ah));	// 18346 mov     al, ah ;~ 01A2:894D
cs=0x1a2;eip=0x00894f; 	S(OUT(0x0CE, al));	// 18347 out     0CEh, al        ; DMA controller, 8237A-5. ;~ 01A2:894F
cs=0x1a2;eip=0x008951; 	T(MOV(al, 3));	// 18350 mov     al, 3 ;~ 01A2:8951
cs=0x1a2;eip=0x008953; 	S(OUT(0x0D4, al));	// 18351 out     0D4h, al ;~ 01A2:8953
cs=0x1a2;eip=0x008955; 	J(RETN(0));	// 18352 retn ;~ 01A2:8955

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_dma_186e3: 	goto _dma_186e3;
        case m2c::kloc_186ef: 	goto loc_186ef;
        case m2c::kloc_18761: 	goto loc_18761;
        case m2c::kloc_187a6: 	goto loc_187a6;
        case m2c::kloc_187eb: 	goto loc_187eb;
        case m2c::kloc_18830: 	goto loc_18830;
        case m2c::kloc_18878: 	goto loc_18878;
        case m2c::kloc_188c2: 	goto loc_188c2;
        case m2c::kloc_1890c: 	goto loc_1890c;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _set_dmachn_mask(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _set_dmachn_mask:
    _begin:
cs=0x1a2;eip=0x008956; 	T(MOV(al, cl));	// 18361 mov     al, cl ;~ 01A2:8956
cs=0x1a2;eip=0x008958; 	T(CMP(al, 4));	// 18362 cmp     al, 4 ;~ 01A2:8958
cs=0x1a2;eip=0x00895a; 	J(JNC(loc_18961));	// 18363 jnb     short loc_18961 ;~ 01A2:895A
cs=0x1a2;eip=0x00895c; 	T(OR(al, 4));	// 18364 or      al, 4 ;~ 01A2:895C
cs=0x1a2;eip=0x00895e; 	S(OUT(0x0A, al));	// 18365 out     0Ah, al         ; DMA controller, 8237A-5. ;~ 01A2:895E
cs=0x1a2;eip=0x008960; 	J(RETN(0));	// 18369 retn ;~ 01A2:8960
loc_18961:
	// 5516 
cs=0x1a2;eip=0x008961; 	T(AND(al, 3));	// 18373 and     al, 3 ;~ 01A2:8961
cs=0x1a2;eip=0x008963; 	T(OR(al, 4));	// 18374 or      al, 4 ;~ 01A2:8963
cs=0x1a2;eip=0x008965; 	S(OUT(0x0D4, al));	// 18375 out     0D4h, al ;~ 01A2:8965
cs=0x1a2;eip=0x008967; 	J(RETN(0));	// 18376 retn ;~ 01A2:8967

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_set_dmachn_mask: 	goto _set_dmachn_mask;
        case m2c::kloc_18961: 	goto loc_18961;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _alloc_dma_buf(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _alloc_dma_buf:
    _begin:
cs=0x1a2;eip=0x008968; 	X(MOV(dword_24684, eax));	// 18385 mov     dword_24684, eax ;~ 01A2:8968
cs=0x1a2;eip=0x00896c; 	X(MOV(byte_2469c, cl));	// 18386 mov     byte_2469C, cl ;~ 01A2:896C
cs=0x1a2;eip=0x008970; 	X(MOV(_memflg_2469a, 0));	// 18387 mov     _memflg_2469A, 0 ;~ 01A2:8970
cs=0x1a2;eip=0x008975; 	X(MOV(byte_2469b, 0));	// 18388 mov     byte_2469B, 0 ;~ 01A2:8975
cs=0x1a2;eip=0x00897a; 	X(MOV(dword_24694, 0));	// 18389 mov     dword_24694, 0 ;~ 01A2:897A
cs=0x1a2;eip=0x008983; 	J(CALL(_getmemallocstrat,0));	// 18390 call    _getmemallocstrat ;~ 01A2:8983
cs=0x1a2;eip=0x008986; 	X(PUSH(ax));	// 18391 push    ax ;~ 01A2:8986
cs=0x1a2;eip=0x008987; 	J(CALL(_setmemalloc2,0));	// 18392 call    _setmemalloc2 ;~ 01A2:8987
cs=0x1a2;eip=0x00898a; 	T(MOV(ebx, dword_24684));	// 18393 mov     ebx, dword_24684 ;~ 01A2:898A
cs=0x1a2;eip=0x00898f; 	T(SHL(ebx, 1));	// 18394 shl     ebx, 1          ; bytes ;~ 01A2:898F
cs=0x1a2;eip=0x008992; 	J(CALL(_memalloc,0));	// 18395 call    _memalloc ;~ 01A2:8992
cs=0x1a2;eip=0x008995; 	J(JC(loc_18a22));	// 18396 jb      loc_18A22 ;~ 01A2:8995
cs=0x1a2;eip=0x008999; 	X(MOV(_myseg_24698, ax));	// 18397 mov     _myseg_24698, ax ;~ 01A2:8999
cs=0x1a2;eip=0x00899c; 	T(MOV(dx, ax));	// 18398 mov     dx, ax ;~ 01A2:899C
cs=0x1a2;eip=0x00899e; 	T(MOV(ebx, dword_24684));	// 18399 mov     ebx, dword_24684 ;~ 01A2:899E
cs=0x1a2;eip=0x0089a3; 	T(CMP(byte_2469c, 4));	// 18400 cmp     byte_2469C, 4 ;~ 01A2:89A3
cs=0x1a2;eip=0x0089a8; 	J(JC(loc_189db));	// 18401 jb      short loc_189DB ;~ 01A2:89A8
cs=0x1a2;eip=0x0089aa; 	T(MOVZX(eax, ax));	// 18402 movzx   eax, ax ;~ 01A2:89AA
cs=0x1a2;eip=0x0089ae; 	T(SHL(eax, 4));	// 18403 shl     eax, 4 ;~ 01A2:89AE
cs=0x1a2;eip=0x0089b2; 	T(AND(eax, 0x1FFFF));	// 18404 and     eax, 1FFFFh ;~ 01A2:89B2
cs=0x1a2;eip=0x0089b8; 	T(ADD(eax, ebx));	// 18405 add     eax, ebx ;~ 01A2:89B8
cs=0x1a2;eip=0x0089bb; 	T(CMP(eax, 0x20000));	// 18406 cmp     eax, 20000h ;~ 01A2:89BB
cs=0x1a2;eip=0x0089c1; 	J(JBE(loc_18a0a));	// 18407 jbe     short loc_18A0A ;~ 01A2:89C1
cs=0x1a2;eip=0x0089c3; 	T(SUB(eax, ebx));	// 18408 sub     eax, ebx ;~ 01A2:89C3
cs=0x1a2;eip=0x0089c6; 	T(NEG(eax));	// 18409 neg     eax ;~ 01A2:89C6
cs=0x1a2;eip=0x0089c9; 	T(ADD(eax, 0x20000));	// 18410 add     eax, 20000h ;~ 01A2:89C9
cs=0x1a2;eip=0x0089cf; 	T(ADD(ebx, eax));	// 18411 add     ebx, eax ;~ 01A2:89CF
cs=0x1a2;eip=0x0089d2; 	T(AND(dx, 0x0E000));	// 18412 and     dx, 0E000h ;~ 01A2:89D2
cs=0x1a2;eip=0x0089d6; 	T(ADD(dh, 0x20));	// 18413 add     dh, 20h ; ' ' ;~ 01A2:89D6
cs=0x1a2;eip=0x0089d9; 	J(JMP(loc_18a0a));	// 18414 jmp     short loc_18A0A ;~ 01A2:89D9
loc_189db:
	// 5517 
cs=0x1a2;eip=0x0089db; 	T(MOVZX(eax, ax));	// 18418 movzx   eax, ax ;~ 01A2:89DB
cs=0x1a2;eip=0x0089df; 	T(SHL(eax, 4));	// 18419 shl     eax, 4 ;~ 01A2:89DF
cs=0x1a2;eip=0x0089e3; 	T(AND(eax, 0x0FFFF));	// 18420 and     eax, 0FFFFh ;~ 01A2:89E3
cs=0x1a2;eip=0x0089e9; 	T(ADD(eax, ebx));	// 18421 add     eax, ebx ;~ 01A2:89E9
cs=0x1a2;eip=0x0089ec; 	T(CMP(eax, 0x10000));	// 18422 cmp     eax, 10000h ;~ 01A2:89EC
cs=0x1a2;eip=0x0089f2; 	J(JBE(loc_18a0a));	// 18423 jbe     short loc_18A0A ;~ 01A2:89F2
cs=0x1a2;eip=0x0089f4; 	T(SUB(eax, ebx));	// 18424 sub     eax, ebx ;~ 01A2:89F4
cs=0x1a2;eip=0x0089f7; 	T(NEG(eax));	// 18425 neg     eax ;~ 01A2:89F7
cs=0x1a2;eip=0x0089fa; 	T(ADD(eax, 0x10000));	// 18426 add     eax, 10000h ;~ 01A2:89FA
cs=0x1a2;eip=0x008a00; 	T(ADD(ebx, eax));	// 18427 add     ebx, eax ;~ 01A2:8A00
cs=0x1a2;eip=0x008a03; 	T(AND(dx, 0x0F000));	// 18428 and     dx, 0F000h ;~ 01A2:8A03
cs=0x1a2;eip=0x008a07; 	T(ADD(dh, 0x10));	// 18429 add     dh, 10h ;~ 01A2:8A07
loc_18a0a:
	// 5518 
cs=0x1a2;eip=0x008a0a; 	X(MOV(word_2468c, dx));	// 18433 mov     word_2468C, dx ;~ 01A2:8A0A
cs=0x1a2;eip=0x008a0e; 	T(MOV(ax, _myseg_24698));	// 18434 mov     ax, _myseg_24698 ;~ 01A2:8A0E
cs=0x1a2;eip=0x008a11; 	J(CALL(_memrealloc,0));	// 18435 call    _memrealloc ;~ 01A2:8A11
cs=0x1a2;eip=0x008a14; 	X(POP(ax));	// 18436 pop     ax ;~ 01A2:8A14
cs=0x1a2;eip=0x008a15; 	J(CALL(_setmemallocstrat,0));	// 18437 call    _setmemallocstrat ;~ 01A2:8A15
cs=0x1a2;eip=0x008a18; 	X(MOV(_memflg_2469a, 1));	// 18438 mov     _memflg_2469A, 1 ;~ 01A2:8A18
cs=0x1a2;eip=0x008a1d; 	T(MOV(ax, word_2468c));	// 18439 mov     ax, word_2468C ;~ 01A2:8A1D
cs=0x1a2;eip=0x008a20; 	T(CLC);	// 18440 clc ;~ 01A2:8A20
cs=0x1a2;eip=0x008a21; 	J(RETN(0));	// 18441 retn ;~ 01A2:8A21
loc_18a22:
	// 5519 
cs=0x1a2;eip=0x008a22; 	X(POP(ax));	// 18445 pop     ax ;~ 01A2:8A22
cs=0x1a2;eip=0x008a23; 	J(CALL(_setmemallocstrat,0));	// 18446 call    _setmemallocstrat ;~ 01A2:8A23
cs=0x1a2;eip=0x008a26; 	T(STC);	// 18447 stc ;~ 01A2:8A26
cs=0x1a2;eip=0x008a27; 	J(RETN(0));	// 18448 retn ;~ 01A2:8A27

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_alloc_dma_buf: 	goto _alloc_dma_buf;
        case m2c::kloc_189db: 	goto loc_189db;
        case m2c::kloc_18a0a: 	goto loc_18a0a;
        case m2c::kloc_18a22: 	goto loc_18a22;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _memfree_18a28(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _memfree_18a28:
    _begin:
cs=0x1a2;eip=0x008a28; 	T(CMP(_memflg_2469a, 1));	// 18457 cmp     _memflg_2469A, 1 ;~ 01A2:8A28
cs=0x1a2;eip=0x008a2d; 	J(JNZ(loc_18a3b));	// 18458 jnz     short loc_18A3B ;~ 01A2:8A2D
cs=0x1a2;eip=0x008a2f; 	X(MOV(_memflg_2469a, 0));	// 18459 mov     _memflg_2469A, 0 ;~ 01A2:8A2F
cs=0x1a2;eip=0x008a34; 	T(MOV(ax, _myseg_24698));	// 18460 mov     ax, _myseg_24698 ;~ 01A2:8A34
cs=0x1a2;eip=0x008a37; 	J(CALL(_memfree,0));	// 18461 call    _memfree ;~ 01A2:8A37
cs=0x1a2;eip=0x008a3a; 	J(RETN(0));	// 18462 retn ;~ 01A2:8A3A
loc_18a3b:
	// 5520 
cs=0x1a2;eip=0x008a3b; 	T(CLC);	// 18466 clc ;~ 01A2:8A3B
cs=0x1a2;eip=0x008a3c; 	J(RETN(0));	// 18467 retn ;~ 01A2:8A3C

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_memfree_18a28: 	goto _memfree_18a28;
        case m2c::kloc_18a3b: 	goto loc_18a3b;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _setsnd_handler(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _setsnd_handler:
    _begin:
cs=0x1a2;eip=0x008a3d; 	X(PUSHF);	// 18477 pushf ;~ 01A2:8A3D
cs=0x1a2;eip=0x008a3e; 	X(PUSH(es));	// 18478 push    es ;~ 01A2:8A3E
cs=0x1a2;eip=0x008a3f; 	T(CLI);	// 18479 cli ;~ 01A2:8A3F
cs=0x1a2;eip=0x008a40; 	T(MOVZX(cx, al));	// 18480 movzx   cx, al ;~ 01A2:8A40
cs=0x1a2;eip=0x008a43; 	S(IN(al, 0x0A1));	// 18481 in      al, 0A1h        ; Interrupt Controller #2, 8259A ;~ 01A2:8A43
cs=0x1a2;eip=0x008a45; 	T(MOV(ah, al));	// 18482 mov     ah, al ;~ 01A2:8A45
cs=0x1a2;eip=0x008a47; 	S(IN(al, 0x21));	// 18483 in      al, 21h         ; Interrupt controller, 8259A. ;~ 01A2:8A47
cs=0x1a2;eip=0x008a49; 	X(MOV(_interrupt_mask, ax));	// 18484 mov     _interrupt_mask, ax ;~ 01A2:8A49
cs=0x1a2;eip=0x008a4c; 	T(MOV(bx, 0x0FFFE));	// 18485 mov     bx, 0FFFEh ;~ 01A2:8A4C
cs=0x1a2;eip=0x008a4f; 	T(ROL(bx, cl));	// 18486 rol     bx, cl ;~ 01A2:8A4F
cs=0x1a2;eip=0x008a51; 	T(CMP(cl, 8));	// 18487 cmp     cl, 8 ;~ 01A2:8A51
cs=0x1a2;eip=0x008a54; 	J(JC(loc_18a5c));	// 18488 jb      short loc_18A5C ;~ 01A2:8A54
cs=0x1a2;eip=0x008a56; 	T(AND(bl, 0x0FB));	// 18489 and     bl, 0FBh ;~ 01A2:8A56
cs=0x1a2;eip=0x008a59; 	T(ADD(cl, 0x60));	// 18490 add     cl, 60h ; '`' ;~ 01A2:8A59
loc_18a5c:
	// 5521 
cs=0x1a2;eip=0x008a5c; 	T(ADD(cl, 8));	// 18493 add     cl, 8 ;~ 01A2:8A5C
cs=0x1a2;eip=0x008a5f; 	T(SHL(cx, 2));	// 18494 shl     cx, 2 ;~ 01A2:8A5F
cs=0x1a2;eip=0x008a62; 	T(AND(ax, bx));	// 18495 and     ax, bx ;~ 01A2:8A62
cs=0x1a2;eip=0x008a64; 	S(OUT(0x21, al));	// 18496 out     21h, al         ; Interrupt controller, 8259A. ;~ 01A2:8A64
cs=0x1a2;eip=0x008a66; 	T(MOV(al, ah));	// 18497 mov     al, ah ;~ 01A2:8A66
cs=0x1a2;eip=0x008a68; 	S(OUT(0x0A1, al));	// 18498 out     0A1h, al        ; Interrupt Controller #2, 8259A ;~ 01A2:8A68
cs=0x1a2;eip=0x008a6a; 	X(MOV(_intvectoffset, cx));	// 18499 mov     _intvectoffset, cx ;~ 01A2:8A6A
cs=0x1a2;eip=0x008a6e; 	T(MOV(bx, cx));	// 18500 mov     bx, cx ;~ 01A2:8A6E
cs=0x1a2;eip=0x008a70; 	T(XOR(ax, ax));	// 18501 xor     ax, ax ;~ 01A2:8A70
cs=0x1a2;eip=0x008a72; 	T(MOV(es, ax));	// 18502 mov     es, ax ;~ 01A2:8A72
cs=0x1a2;eip=0x008a74; 	T(LES(cx, *(dw*)(raddr(es,bx))));	// 18504 les     cx, es:[bx] ;~ 01A2:8A74
cs=0x1a2;eip=0x008a77; 	X(MOV(_old_intprocoffset, cx));	// 18506 mov     _old_intprocoffset, cx ;~ 01A2:8A77
cs=0x1a2;eip=0x008a7b; 	X(MOV(_old_intprocseg, es));	// 18507 mov     _old_intprocseg, es ;~ 01A2:8A7B
cs=0x1a2;eip=0x008a7f; 	T(MOV(es, ax));	// 18508 mov     es, ax ;~ 01A2:8A7F
cs=0x1a2;eip=0x008a81; 	X(MOV(*(dw*)(raddr(es,bx)), si));	// 18510 mov     es:[bx], si ;~ 01A2:8A81
cs=0x1a2;eip=0x008a84; 	X(MOV(*(dw*)(raddr(es,bx+2)), cs));	// 18511 mov     word ptr es:[bx+2], cs ;~ 01A2:8A84
cs=0x1a2;eip=0x008a88; 	X(POP(es));	// 18512 pop     es ;~ 01A2:8A88
cs=0x1a2;eip=0x008a89; 	X(POPF);	// 18514 popf ;~ 01A2:8A89
cs=0x1a2;eip=0x008a8a; 	J(RETN(0));	// 18515 retn ;~ 01A2:8A8A

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_setsnd_handler: 	goto _setsnd_handler;
        case m2c::kloc_18a5c: 	goto loc_18a5c;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _restore_intvector(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _restore_intvector:
    _begin:
cs=0x1a2;eip=0x008a8b; 	X(PUSHF);	// 18524 pushf ;~ 01A2:8A8B
cs=0x1a2;eip=0x008a8c; 	X(PUSH(es));	// 18525 push    es ;~ 01A2:8A8C
cs=0x1a2;eip=0x008a8d; 	T(CLI);	// 18526 cli ;~ 01A2:8A8D
cs=0x1a2;eip=0x008a8e; 	T(MOV(ax, _interrupt_mask));	// 18527 mov     ax, _interrupt_mask ;~ 01A2:8A8E
cs=0x1a2;eip=0x008a91; 	S(OUT(0x21, al));	// 18528 out     21h, al         ; Interrupt controller, 8259A. ;~ 01A2:8A91
cs=0x1a2;eip=0x008a93; 	T(MOV(al, ah));	// 18529 mov     al, ah ;~ 01A2:8A93
cs=0x1a2;eip=0x008a95; 	S(OUT(0x0A1, al));	// 18530 out     0A1h, al        ; Interrupt Controller #2, 8259A ;~ 01A2:8A95
cs=0x1a2;eip=0x008a97; 	T(MOV(bx, _intvectoffset));	// 18531 mov     bx, _intvectoffset ;~ 01A2:8A97
cs=0x1a2;eip=0x008a9b; 	T(XOR(ax, ax));	// 18532 xor     ax, ax ;~ 01A2:8A9B
cs=0x1a2;eip=0x008a9d; 	T(MOV(es, ax));	// 18533 mov     es, ax ;~ 01A2:8A9D
cs=0x1a2;eip=0x008a9f; 	T(MOV(ax, _old_intprocoffset));	// 18535 mov     ax, _old_intprocoffset ;~ 01A2:8A9F
cs=0x1a2;eip=0x008aa2; 	X(MOV(*(dw*)(raddr(es,bx)), ax));	// 18536 mov     es:[bx], ax ;~ 01A2:8AA2
cs=0x1a2;eip=0x008aa5; 	T(MOV(ax, _old_intprocseg));	// 18537 mov     ax, _old_intprocseg ;~ 01A2:8AA5
cs=0x1a2;eip=0x008aa8; 	X(MOV(*(dw*)(raddr(es,bx+2)), ax));	// 18538 mov     es:[bx+2], ax ;~ 01A2:8AA8
cs=0x1a2;eip=0x008aac; 	X(POP(es));	// 18539 pop     es ;~ 01A2:8AAC
cs=0x1a2;eip=0x008aad; 	X(POPF);	// 18541 popf ;~ 01A2:8AAD
cs=0x1a2;eip=0x008aae; 	J(RETN(0));	// 18542 retn ;~ 01A2:8AAE

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_restore_intvector: 	goto _restore_intvector;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _getint_vect(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _getint_vect:
    _begin:
cs=0x1a2;eip=0x008aaf; 	X(PUSH(es));	// 18550 push    es ;~ 01A2:8AAF
cs=0x1a2;eip=0x008ab0; 	T(MOV(ah, 0x35));	// 18551 mov     ah, 35h ;~ 01A2:8AB0
cs=0x1a2;eip=0x008ab2; 	S(_INT(0x21));	// 18552 int     21h             ; DOS - 2+ - GET INTERRUPT VECTOR ;~ 01A2:8AB2
cs=0x1a2;eip=0x008ab4; 	T(MOV(dx, es));	// 18555 mov     dx, es ;~ 01A2:8AB4
cs=0x1a2;eip=0x008ab6; 	X(POP(es));	// 18556 pop     es ;~ 01A2:8AB6
cs=0x1a2;eip=0x008ab7; 	J(RETN(0));	// 18558 retn ;~ 01A2:8AB7

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_getint_vect: 	goto _getint_vect;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _setint_vect(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _setint_vect:
    _begin:
cs=0x1a2;eip=0x008ab8; 	X(PUSH(ds));	// 18567 push    ds ;~ 01A2:8AB8
cs=0x1a2;eip=0x008ab9; 	T(MOV(ds, dx));	// 18568 mov     ds, dx ;~ 01A2:8AB9
cs=0x1a2;eip=0x008abb; 	T(MOV(dx, bx));	// 18569 mov     dx, bx ;~ 01A2:8ABB
cs=0x1a2;eip=0x008abd; 	T(MOV(ah, 0x25));	// 18570 mov     ah, 25h ;~ 01A2:8ABD
cs=0x1a2;eip=0x008abf; 	S(_INT(0x21));	// 18571 int     21h             ; DOS - SET INTERRUPT VECTOR ;~ 01A2:8ABF
cs=0x1a2;eip=0x008ac1; 	X(POP(ds));	// 18574 pop     ds ;~ 01A2:8AC1
cs=0x1a2;eip=0x008ac2; 	J(RETN(0));	// 18575 retn ;~ 01A2:8AC2

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_setint_vect: 	goto _setint_vect;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _memalloc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _memalloc:
    _begin:
cs=0x1a2;eip=0x008ac3; 	T(ADD(ebx, 0x0F));	// 18585 add     ebx, 0Fh ;~ 01A2:8AC3
cs=0x1a2;eip=0x008ac7; 	T(SHR(ebx, 4));	// 18586 shr     ebx, 4 ;~ 01A2:8AC7
cs=0x1a2;eip=0x008acb; 	T(CMP(ebx, 0x10000));	// 18587 cmp     ebx, 10000h ;~ 01A2:8ACB
cs=0x1a2;eip=0x008ad2; 	J(JNC(loc_18ad9));	// 18588 jnb     short loc_18AD9 ;~ 01A2:8AD2
cs=0x1a2;eip=0x008ad4; 	T(MOV(ah, 0x48));	// 18589 mov     ah, 48h ;~ 01A2:8AD4
cs=0x1a2;eip=0x008ad6; 	S(_INT(0x21));	// 18590 int     21h             ; DOS - 2+ - ALLOCATE MEMORY ;~ 01A2:8AD6
cs=0x1a2;eip=0x008ad8; 	J(RETN(0));	// 18592 retn ;~ 01A2:8AD8
loc_18ad9:
	// 5522 
cs=0x1a2;eip=0x008ad9; 	T(MOV(ax, 8));	// 18596 mov     ax, 8 ;~ 01A2:8AD9
cs=0x1a2;eip=0x008adc; 	T(STC);	// 18597 stc ;~ 01A2:8ADC
cs=0x1a2;eip=0x008add; 	J(RETN(0));	// 18598 retn ;~ 01A2:8ADD

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_memalloc: 	goto _memalloc;
        case m2c::kloc_18ad9: 	goto loc_18ad9;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _memfree(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _memfree:
    _begin:
cs=0x1a2;eip=0x008ade; 	X(PUSH(es));	// 18607 push    es ;~ 01A2:8ADE
cs=0x1a2;eip=0x008adf; 	T(MOV(es, ax));	// 18608 mov     es, ax ;~ 01A2:8ADF
cs=0x1a2;eip=0x008ae1; 	T(MOV(ah, 0x49));	// 18610 mov     ah, 49h ;~ 01A2:8AE1
cs=0x1a2;eip=0x008ae3; 	S(_INT(0x21));	// 18611 int     21h             ; DOS - 2+ - FREE MEMORY ;~ 01A2:8AE3
cs=0x1a2;eip=0x008ae5; 	X(POP(es));	// 18613 pop     es ;~ 01A2:8AE5
cs=0x1a2;eip=0x008ae6; 	J(RETN(0));	// 18614 retn ;~ 01A2:8AE6

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_memfree: 	goto _memfree;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _memrealloc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _memrealloc:
    _begin:
cs=0x1a2;eip=0x008ae7; 	T(ADD(ebx, 0x0F));	// 18623 add     ebx, 0Fh ;~ 01A2:8AE7
cs=0x1a2;eip=0x008aeb; 	T(SHR(ebx, 4));	// 18624 shr     ebx, 4 ;~ 01A2:8AEB
cs=0x1a2;eip=0x008aef; 	T(CMP(ebx, 0x10000));	// 18625 cmp     ebx, 10000h ;~ 01A2:8AEF
cs=0x1a2;eip=0x008af6; 	J(JNC(loc_18aff));	// 18626 jnb     short loc_18AFF ;~ 01A2:8AF6
cs=0x1a2;eip=0x008af8; 	T(MOV(es, ax));	// 18627 mov     es, ax ;~ 01A2:8AF8
cs=0x1a2;eip=0x008afa; 	T(MOV(ah, 0x4A));	// 18628 mov     ah, 4Ah ;~ 01A2:8AFA
cs=0x1a2;eip=0x008afc; 	S(_INT(0x21));	// 18629 int     21h             ; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK) ;~ 01A2:8AFC
cs=0x1a2;eip=0x008afe; 	J(RETN(0));	// 18632 retn ;~ 01A2:8AFE
loc_18aff:
	// 5523 
cs=0x1a2;eip=0x008aff; 	T(MOV(ax, 8));	// 18636 mov     ax, 8 ;~ 01A2:8AFF
cs=0x1a2;eip=0x008b02; 	T(STC);	// 18637 stc ;~ 01A2:8B02
cs=0x1a2;eip=0x008b03; 	J(RETN(0));	// 18638 retn ;~ 01A2:8B03

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_memrealloc: 	goto _memrealloc;
        case m2c::kloc_18aff: 	goto loc_18aff;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _setmemallocstrat(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _setmemallocstrat:
    _begin:
cs=0x1a2;eip=0x008b04; 	X(PUSH(ax));	// 18647 push    ax ;~ 01A2:8B04
cs=0x1a2;eip=0x008b05; 	T(MOVZX(bx, al));	// 18648 movzx   bx, al ;~ 01A2:8B05
cs=0x1a2;eip=0x008b08; 	T(MOV(ax, 0x5801));	// 18649 mov     ax, 5801h ;~ 01A2:8B08
cs=0x1a2;eip=0x008b0b; 	S(_INT(0x21));	// 18650 int     21h             ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY ;~ 01A2:8B0B
cs=0x1a2;eip=0x008b0d; 	X(POP(bx));	// 18652 pop     bx ;~ 01A2:8B0D
cs=0x1a2;eip=0x008b0e; 	T(SHR(bx, 8));	// 18653 shr     bx, 8 ;~ 01A2:8B0E
cs=0x1a2;eip=0x008b11; 	T(MOV(ax, 0x5803));	// 18654 mov     ax, 5803h ;~ 01A2:8B11
cs=0x1a2;eip=0x008b14; 	S(_INT(0x21));	// 18655 int     21h             ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY ;~ 01A2:8B14
cs=0x1a2;eip=0x008b16; 	J(RETN(0));	// 18657 retn ;~ 01A2:8B16

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_setmemallocstrat: 	goto _setmemallocstrat;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _getmemallocstrat(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _getmemallocstrat:
    _begin:
cs=0x1a2;eip=0x008b17; 	T(MOV(ax, 0x5800));	// 18666 mov     ax, 5800h ;~ 01A2:8B17
cs=0x1a2;eip=0x008b1a; 	S(_INT(0x21));	// 18667 int     21h             ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY ;~ 01A2:8B1A
cs=0x1a2;eip=0x008b1c; 	X(PUSH(ax));	// 18669 push    ax ;~ 01A2:8B1C
cs=0x1a2;eip=0x008b1d; 	T(MOV(ax, 0x5802));	// 18670 mov     ax, 5802h ;~ 01A2:8B1D
cs=0x1a2;eip=0x008b20; 	S(_INT(0x21));	// 18671 int     21h             ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY ;~ 01A2:8B20
cs=0x1a2;eip=0x008b22; 	X(POP(bx));	// 18673 pop     bx ;~ 01A2:8B22
cs=0x1a2;eip=0x008b23; 	T(MOV(ah, al));	// 18674 mov     ah, al ;~ 01A2:8B23
cs=0x1a2;eip=0x008b25; 	T(MOV(al, bl));	// 18675 mov     al, bl ;~ 01A2:8B25
cs=0x1a2;eip=0x008b27; 	J(RETN(0));	// 18676 retn ;~ 01A2:8B27

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_getmemallocstrat: 	goto _getmemallocstrat;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group30(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group30:
    _begin:
_setmemalloc1:
	// 18683 
cs=0x1a2;eip=0x008b28; 	T(TEST(*(db*)(((db*)&_config_word)), 1));	// 18685 test    byte ptr _config_word, 1 ;~ 01A2:8B28
cs=0x1a2;eip=0x008b2d; 	J(JZ(_setmemalloc2));	// 18686 jz      short _setmemalloc2 ;~ 01A2:8B2D
cs=0x1a2;eip=0x008b2f; 	T(MOV(ax, 0x181));	// 18687 mov     ax, 181h ;~ 01A2:8B2F
cs=0x1a2;eip=0x008b32; 	J(return _setmemallocstrat(0, _state););	// 18688 jmp     short _setmemallocstrat ;~ 01A2:8B32
_setmemalloc2:
	// 18695 
cs=0x1a2;eip=0x008b34; 	T(MOV(ax, 1));	// 18697 mov     ax, 1 ;~ 01A2:8B34
cs=0x1a2;eip=0x008b37; 	J(return _setmemallocstrat(0, _state););	// 18698 jmp     short _setmemallocstrat ;~ 01A2:8B37

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_setmemalloc1: 	goto _setmemalloc1;
        case m2c::k_setmemalloc2: 	goto _setmemalloc2;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _writemixersb(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _writemixersb:
    _begin:
cs=0x1a2;eip=0x008b39; 	X(PUSH(ax));	// 18707 push    ax ;~ 01A2:8B39
cs=0x1a2;eip=0x008b3a; 	X(PUSH(dx));	// 18708 push    dx ;~ 01A2:8B3A
cs=0x1a2;eip=0x008b3b; 	T(MOV(dx, _sb_base_port));	// 18709 mov     dx, _sb_base_port ;~ 01A2:8B3B
cs=0x1a2;eip=0x008b3f; 	T(ADD(dl, 4));	// 18710 add     dl, 4 ;~ 01A2:8B3F
cs=0x1a2;eip=0x008b42; 	T(XCHG(al, ah));	// 18711 xchg    al, ah ;~ 01A2:8B42
cs=0x1a2;eip=0x008b44; 	S(OUT(dx, al));	// 18712 out     dx, al ;~ 01A2:8B44
cs=0x1a2;eip=0x008b45; 	J({;});	// 18713 jmp     short $+2 ;~ 01A2:8B45
loc_18b47:
	// 5524 
cs=0x1a2;eip=0x008b47; 	J({;});	// 18717 jmp     short $+2 ;~ 01A2:8B47
loc_18b49:
	// 5525 
cs=0x1a2;eip=0x008b49; 	T(INC(dx));	// 18721 inc     dx ;~ 01A2:8B49
cs=0x1a2;eip=0x008b4a; 	T(MOV(al, ah));	// 18722 mov     al, ah ;~ 01A2:8B4A
cs=0x1a2;eip=0x008b4c; 	S(OUT(dx, al));	// 18723 out     dx, al ;~ 01A2:8B4C
cs=0x1a2;eip=0x008b4d; 	X(POP(dx));	// 18724 pop     dx ;~ 01A2:8B4D
cs=0x1a2;eip=0x008b4e; 	X(POP(ax));	// 18725 pop     ax ;~ 01A2:8B4E
cs=0x1a2;eip=0x008b4f; 	J(RETN(0));	// 18726 retn ;~ 01A2:8B4F

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_writemixersb: 	goto _writemixersb;
        case m2c::kloc_18b47: 	goto loc_18b47;
        case m2c::kloc_18b49: 	goto loc_18b49;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _readmixersb(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _readmixersb:
    _begin:
cs=0x1a2;eip=0x008b50; 	X(PUSH(dx));	// 18735 push    dx ;~ 01A2:8B50
cs=0x1a2;eip=0x008b51; 	T(MOV(dx, _sb_base_port));	// 18736 mov     dx, _sb_base_port ;~ 01A2:8B51
cs=0x1a2;eip=0x008b55; 	T(ADD(dl, 4));	// 18737 add     dl, 4 ;~ 01A2:8B55
cs=0x1a2;eip=0x008b58; 	T(MOV(al, ah));	// 18738 mov     al, ah ;~ 01A2:8B58
cs=0x1a2;eip=0x008b5a; 	S(OUT(dx, al));	// 18739 out     dx, al ;~ 01A2:8B5A
cs=0x1a2;eip=0x008b5b; 	J({;});	// 18740 jmp     short $+2 ;~ 01A2:8B5B
loc_18b5d:
	// 5526 
cs=0x1a2;eip=0x008b5d; 	J({;});	// 18744 jmp     short $+2 ;~ 01A2:8B5D
loc_18b5f:
	// 5527 
cs=0x1a2;eip=0x008b5f; 	T(INC(dx));	// 18748 inc     dx ;~ 01A2:8B5F
cs=0x1a2;eip=0x008b60; 	S(IN(al, dx));	// 18749 in      al, dx ;~ 01A2:8B60
cs=0x1a2;eip=0x008b61; 	X(POP(dx));	// 18750 pop     dx ;~ 01A2:8B61
cs=0x1a2;eip=0x008b62; 	J(RETN(0));	// 18751 retn ;~ 01A2:8B62

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_readmixersb: 	goto _readmixersb;
        case m2c::kloc_18b5d: 	goto loc_18b5d;
        case m2c::kloc_18b5f: 	goto loc_18b5f;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _writesb(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _writesb:
    _begin:
cs=0x1a2;eip=0x008b63; 	X(PUSH(dx));	// 18760 push    dx ;~ 01A2:8B63
cs=0x1a2;eip=0x008b64; 	X(PUSH(cx));	// 18761 push    cx ;~ 01A2:8B64
cs=0x1a2;eip=0x008b65; 	X(PUSH(ax));	// 18762 push    ax ;~ 01A2:8B65
cs=0x1a2;eip=0x008b66; 	T(MOV(dx, _sb_base_port));	// 18763 mov     dx, _sb_base_port ;~ 01A2:8B66
cs=0x1a2;eip=0x008b6a; 	T(ADD(dl, 0x0C));	// 18764 add     dl, 0Ch ;~ 01A2:8B6A
cs=0x1a2;eip=0x008b6d; 	T(MOV(cx, 0x1000));	// 18765 mov     cx, 1000h ;~ 01A2:8B6D
loc_18b70:
	// 5528 
cs=0x1a2;eip=0x008b70; 	S(IN(al, dx));	// 18768 in      al, dx ;~ 01A2:8B70
cs=0x1a2;eip=0x008b71; 	T(OR(al, al));	// 18769 or      al, al ;~ 01A2:8B71
cs=0x1a2;eip=0x008b73; 	J(JNS(loc_18b7c));	// 18770 jns     short loc_18B7C ;~ 01A2:8B73
cs=0x1a2;eip=0x008b75; 	T(DEC(cx));	// 18771 dec     cx ;~ 01A2:8B75
cs=0x1a2;eip=0x008b76; 	J(JNZ(loc_18b70));	// 18772 jnz     short loc_18B70 ;~ 01A2:8B76
cs=0x1a2;eip=0x008b78; 	X(POP(ax));	// 18773 pop     ax ;~ 01A2:8B78
cs=0x1a2;eip=0x008b79; 	X(POP(cx));	// 18774 pop     cx ;~ 01A2:8B79
cs=0x1a2;eip=0x008b7a; 	X(POP(dx));	// 18775 pop     dx ;~ 01A2:8B7A
cs=0x1a2;eip=0x008b7b; 	J(RETN(0));	// 18776 retn ;~ 01A2:8B7B
loc_18b7c:
	// 5529 
cs=0x1a2;eip=0x008b7c; 	X(POP(ax));	// 18780 pop     ax ;~ 01A2:8B7C
cs=0x1a2;eip=0x008b7d; 	S(OUT(dx, al));	// 18781 out     dx, al ;~ 01A2:8B7D
cs=0x1a2;eip=0x008b7e; 	X(POP(cx));	// 18782 pop     cx ;~ 01A2:8B7E
cs=0x1a2;eip=0x008b7f; 	X(POP(dx));	// 18783 pop     dx ;~ 01A2:8B7F
cs=0x1a2;eip=0x008b80; 	J(RETN(0));	// 18784 retn ;~ 01A2:8B80

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_writesb: 	goto _writesb;
        case m2c::kloc_18b70: 	goto loc_18b70;
        case m2c::kloc_18b7c: 	goto loc_18b7c;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _readsb(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _readsb:
    _begin:
cs=0x1a2;eip=0x008b81; 	X(PUSH(dx));	// 18793 push    dx ;~ 01A2:8B81
cs=0x1a2;eip=0x008b82; 	X(PUSH(cx));	// 18794 push    cx ;~ 01A2:8B82
cs=0x1a2;eip=0x008b83; 	X(PUSH(ax));	// 18795 push    ax ;~ 01A2:8B83
cs=0x1a2;eip=0x008b84; 	T(MOV(dx, _sb_base_port));	// 18796 mov     dx, _sb_base_port ;~ 01A2:8B84
cs=0x1a2;eip=0x008b88; 	T(ADD(dl, 0x0E));	// 18797 add     dl, 0Eh ;~ 01A2:8B88
cs=0x1a2;eip=0x008b8b; 	T(MOV(cx, 0x1000));	// 18798 mov     cx, 1000h ;~ 01A2:8B8B
loc_18b8e:
	// 5530 
cs=0x1a2;eip=0x008b8e; 	S(IN(al, dx));	// 18801 in      al, dx ;~ 01A2:8B8E
cs=0x1a2;eip=0x008b8f; 	T(OR(al, al));	// 18802 or      al, al ;~ 01A2:8B8F
cs=0x1a2;eip=0x008b91; 	J(JS(loc_18b9c));	// 18803 js      short loc_18B9C ;~ 01A2:8B91
cs=0x1a2;eip=0x008b93; 	T(DEC(cx));	// 18804 dec     cx ;~ 01A2:8B93
cs=0x1a2;eip=0x008b94; 	J(JNZ(loc_18b8e));	// 18805 jnz     short loc_18B8E ;~ 01A2:8B94
cs=0x1a2;eip=0x008b96; 	X(POP(ax));	// 18806 pop     ax ;~ 01A2:8B96
cs=0x1a2;eip=0x008b97; 	X(POP(cx));	// 18807 pop     cx ;~ 01A2:8B97
cs=0x1a2;eip=0x008b98; 	X(POP(dx));	// 18808 pop     dx ;~ 01A2:8B98
cs=0x1a2;eip=0x008b99; 	T(XOR(al, al));	// 18809 xor     al, al ;~ 01A2:8B99
cs=0x1a2;eip=0x008b9b; 	J(RETN(0));	// 18810 retn ;~ 01A2:8B9B
loc_18b9c:
	// 5531 
cs=0x1a2;eip=0x008b9c; 	X(POP(ax));	// 18814 pop     ax ;~ 01A2:8B9C
cs=0x1a2;eip=0x008b9d; 	T(SUB(dl, 4));	// 18815 sub     dl, 4 ;~ 01A2:8B9D
cs=0x1a2;eip=0x008ba0; 	S(IN(al, dx));	// 18816 in      al, dx ;~ 01A2:8BA0
cs=0x1a2;eip=0x008ba1; 	X(POP(cx));	// 18817 pop     cx ;~ 01A2:8BA1
cs=0x1a2;eip=0x008ba2; 	X(POP(dx));	// 18818 pop     dx ;~ 01A2:8BA2
cs=0x1a2;eip=0x008ba3; 	J(RETN(0));	// 18819 retn ;~ 01A2:8BA3

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_readsb: 	goto _readsb;
        case m2c::kloc_18b8e: 	goto loc_18b8e;
        case m2c::kloc_18b9c: 	goto loc_18b9c;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _checksb(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _checksb:
    _begin:
cs=0x1a2;eip=0x008ba4; 	T(MOV(dx, _sb_base_port));	// 18828 mov     dx, _sb_base_port ;~ 01A2:8BA4
cs=0x1a2;eip=0x008ba8; 	T(ADD(dl, 6));	// 18829 add     dl, 6 ;~ 01A2:8BA8
cs=0x1a2;eip=0x008bab; 	T(MOV(al, 1));	// 18830 mov     al, 1 ;~ 01A2:8BAB
cs=0x1a2;eip=0x008bad; 	S(OUT(dx, al));	// 18831 out     dx, al ;~ 01A2:8BAD
cs=0x1a2;eip=0x008bae; 	T(MOV(ax, 0x400));	// 18832 mov     ax, 400h ;~ 01A2:8BAE
loc_18bb1:
	// 5532 
cs=0x1a2;eip=0x008bb1; 	T(DEC(ax));	// 18835 dec     ax ;~ 01A2:8BB1
cs=0x1a2;eip=0x008bb2; 	J(JNZ(loc_18bb1));	// 18836 jnz     short loc_18BB1 ;~ 01A2:8BB2
cs=0x1a2;eip=0x008bb4; 	S(OUT(dx, al));	// 18837 out     dx, al ;~ 01A2:8BB4
cs=0x1a2;eip=0x008bb5; 	J(CALL(_readsb,0));	// 18838 call    _ReadSB ;~ 01A2:8BB5
cs=0x1a2;eip=0x008bb8; 	T(CMP(al, 0x0AA));	// 18839 cmp     al, 0AAh ; 'ª' ;~ 01A2:8BB8
cs=0x1a2;eip=0x008bba; 	J(JNZ(loc_18bbe));	// 18840 jnz     short loc_18BBE ;~ 01A2:8BBA
cs=0x1a2;eip=0x008bbc; 	T(CLC);	// 18841 clc ;~ 01A2:8BBC
cs=0x1a2;eip=0x008bbd; 	J(RETN(0));	// 18842 retn ;~ 01A2:8BBD
loc_18bbe:
	// 5533 
cs=0x1a2;eip=0x008bbe; 	T(STC);	// 18846 stc ;~ 01A2:8BBE
cs=0x1a2;eip=0x008bbf; 	J(RETN(0));	// 18847 retn ;~ 01A2:8BBF

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_checksb: 	goto _checksb;
        case m2c::kloc_18bb1: 	goto loc_18bb1;
        case m2c::kloc_18bbe: 	goto loc_18bbe;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _sb16_sound_off(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _sb16_sound_off:
    _begin:
cs=0x1a2;eip=0x008bc0; 	J(CALL(_checksb,0));	// 18856 call    _CheckSB ;~ 01A2:8BC0
cs=0x1a2;eip=0x008bc3; 	T(MOV(al, 0x0D3));	// 18857 mov     al, 0D3h ; 'Ó' ;~ 01A2:8BC3
cs=0x1a2;eip=0x008bc5; 	J(CALL(_writesb,0));	// 18858 call    _WriteSB ;~ 01A2:8BC5
cs=0x1a2;eip=0x008bc8; 	J(RETN(0));	// 18859 retn ;~ 01A2:8BC8

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_sb16_sound_off: 	goto _sb16_sound_off;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _initclockfromrtc(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _initclockfromrtc:
    _begin:
cs=0x1a2;eip=0x008bc9; 	T(MOV(ah, 2));	// 18868 mov     ah, 2 ;~ 01A2:8BC9
cs=0x1a2;eip=0x008bcb; 	S(_INT(0x1A));	// 18869 int     1Ah             ; CLOCK - READ REAL TIME CLOCK (AT,XT286,CONV,PS) ;~ 01A2:8BCB
cs=0x1a2;eip=0x008bcd; 	T(XOR(eax, eax));	// 18873 xor     eax, eax ;~ 01A2:8BCD
cs=0x1a2;eip=0x008bd0; 	T(MOV(al, dh));	// 18874 mov     al, dh ;~ 01A2:8BD0
cs=0x1a2;eip=0x008bd2; 	T(MOV(ah, al));	// 18875 mov     ah, al ;~ 01A2:8BD2
cs=0x1a2;eip=0x008bd4; 	T(SHR(ah, 4));	// 18876 shr     ah, 4 ;~ 01A2:8BD4
cs=0x1a2;eip=0x008bd7; 	T(AND(al, 0x0F));	// 18877 and     al, 0Fh ;~ 01A2:8BD7
cs=0x1a2;eip=0x008bd9; 	T(AAD);	// 18878 aad ;~ 01A2:8BD9
cs=0x1a2;eip=0x008bdb; 	T(MOV(ebx, eax));	// 18879 mov     ebx, eax ;~ 01A2:8BDB
cs=0x1a2;eip=0x008bde; 	T(MOV(al, ch));	// 18880 mov     al, ch ;~ 01A2:8BDE
cs=0x1a2;eip=0x008be0; 	T(MOV(ah, al));	// 18881 mov     ah, al ;~ 01A2:8BE0
cs=0x1a2;eip=0x008be2; 	T(SHR(ah, 4));	// 18882 shr     ah, 4 ;~ 01A2:8BE2
cs=0x1a2;eip=0x008be5; 	T(AND(al, 0x0F));	// 18883 and     al, 0Fh ;~ 01A2:8BE5
cs=0x1a2;eip=0x008be7; 	T(AAD);	// 18884 aad ;~ 01A2:8BE7
cs=0x1a2;eip=0x008be9; 	T(IMUL3_4(edx,eax,60));	// 18885 imul    edx, eax, 60 ;~ 01A2:8BE9
cs=0x1a2;eip=0x008bed; 	T(MOV(al, cl));	// 18886 mov     al, cl ;~ 01A2:8BED
cs=0x1a2;eip=0x008bef; 	T(MOV(ah, al));	// 18887 mov     ah, al ;~ 01A2:8BEF
cs=0x1a2;eip=0x008bf1; 	T(SHR(ah, 4));	// 18888 shr     ah, 4 ;~ 01A2:8BF1
cs=0x1a2;eip=0x008bf4; 	T(AND(al, 0x0F));	// 18889 and     al, 0Fh ;~ 01A2:8BF4
cs=0x1a2;eip=0x008bf6; 	T(AAD);	// 18890 aad ;~ 01A2:8BF6
cs=0x1a2;eip=0x008bf8; 	T(ADD(dx, ax));	// 18891 add     dx, ax ;~ 01A2:8BF8
cs=0x1a2;eip=0x008bfa; 	T(IMUL3_4(eax,edx,60));	// 18892 imul    eax, edx, 60 ;~ 01A2:8BFA
cs=0x1a2;eip=0x008bfe; 	T(ADD(eax, ebx));	// 18893 add     eax, ebx ;~ 01A2:8BFE
cs=0x1a2;eip=0x008c01; 	T(MOV(edx, 1193180));	// 18894 mov     edx, 1193180 ;~ 01A2:8C01
cs=0x1a2;eip=0x008c07; 	T(MUL1_4(edx));	// 18895 mul     edx ;~ 01A2:8C07
cs=0x1a2;eip=0x008c0a; 	T(SHRD(eax, edx, 0x10));	// 18896 shrd    eax, edx, 10h ;~ 01A2:8C0A
cs=0x1a2;eip=0x008c0f; 	T(XOR(dx, dx));	// 18897 xor     dx, dx ;~ 01A2:8C0F
cs=0x1a2;eip=0x008c11; 	T(MOV(es, dx));	// 18898 mov     es, dx ;~ 01A2:8C11
cs=0x1a2;eip=0x008c13; 	X(MOV(*(dd*)(raddr(es,0x46C)), eax));	// 18900 mov     es:46Ch, eax ;~ 01A2:8C13
cs=0x1a2;eip=0x008c18; 	J(RETN(0));	// 18901 retn ;~ 01A2:8C18

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_initclockfromrtc: 	goto _initclockfromrtc;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _u32tox(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _u32tox:
    _begin:
cs=0x1a2;eip=0x008c19; 	T(ROR(eax, 0x10));	// 18909 ror     eax, 10h ;~ 01A2:8C19
cs=0x1a2;eip=0x008c1d; 	J(CALL(_u16tox,0));	// 18910 call    _u16tox ;~ 01A2:8C1D
cs=0x1a2;eip=0x008c20; 	T(ROR(eax, 0x10));	// 18911 ror     eax, 10h ;~ 01A2:8C20
	return _u16tox(0, _state);
    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_u32tox: 	goto _u32tox;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _u16tox(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _u16tox:
    _begin:
cs=0x1a2;eip=0x008c24; 	T(XCHG(al, ah));	// 18920 xchg    al, ah ;~ 01A2:8C24
cs=0x1a2;eip=0x008c26; 	J(CALL(_u8tox,0));	// 18921 call    _u8tox ;~ 01A2:8C26
cs=0x1a2;eip=0x008c29; 	T(MOV(al, ah));	// 18922 mov     al, ah ;~ 01A2:8C29
	return _u8tox(0, _state);
    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_u16tox: 	goto _u16tox;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _u8tox(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _u8tox:
    _begin:
cs=0x1a2;eip=0x008c2b; 	X(PUSH(ax));	// 18931 push    ax ;~ 01A2:8C2B
cs=0x1a2;eip=0x008c2c; 	T(SHR(al, 4));	// 18932 shr     al, 4 ;~ 01A2:8C2C
cs=0x1a2;eip=0x008c2f; 	J(CALL(_u4tox,0));	// 18933 call    _u4tox ;~ 01A2:8C2F
cs=0x1a2;eip=0x008c32; 	X(POP(ax));	// 18934 pop     ax ;~ 01A2:8C32
	return _u4tox(0, _state);
    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_u8tox: 	goto _u8tox;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _u4tox(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _u4tox:
    _begin:
cs=0x1a2;eip=0x008c33; 	T(AND(al, 0x0F));	// 18942 and     al, 0Fh ;~ 01A2:8C33
cs=0x1a2;eip=0x008c35; 	T(OR(al, '0'));	// 18943 or      al, '0' ;~ 01A2:8C35
cs=0x1a2;eip=0x008c37; 	T(CMP(al, '9'));	// 18944 cmp     al, '9' ;~ 01A2:8C37
cs=0x1a2;eip=0x008c39; 	J(JBE(loc_18c3d));	// 18945 jbe     short loc_18C3D ;~ 01A2:8C39
cs=0x1a2;eip=0x008c3b; 	T(ADD(al, 7));	// 18946 add     al, 7 ;~ 01A2:8C3B
loc_18c3d:
	// 5534 
cs=0x1a2;eip=0x008c3d; 	X(MOV(*(raddr(ds,si)), al));	// 18949 mov     [si], al ;~ 01A2:8C3D
cs=0x1a2;eip=0x008c3f; 	T(INC(si));	// 18950 inc     si ;~ 01A2:8C3F
cs=0x1a2;eip=0x008c40; 	J(RETN(0));	// 18951 retn ;~ 01A2:8C40

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_u4tox: 	goto _u4tox;
        case m2c::kloc_18c3d: 	goto loc_18c3d;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _my_i8toa10_0(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _my_i8toa10_0:
    _begin:
cs=0x1a2;eip=0x008c41; 	T(CBW);	// 18959 cbw ;~ 01A2:8C41
	return _my_i16toa10_0(0, _state);
    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_my_i8toa10_0: 	goto _my_i8toa10_0;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _my_i16toa10_0(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _my_i16toa10_0:
    _begin:
cs=0x1a2;eip=0x008c42; 	T(CWDE);	// 18967 cwde ;~ 01A2:8C42
	return _group31(m2c::k_my_i32toa10_0, _state);
    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_my_i16toa10_0: 	goto _my_i16toa10_0;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _group31(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _group31:
    _begin:
_my_i32toa10_0:
	// 18974 
cs=0x1a2;eip=0x008c44; 	T(XOR(cx, cx));	// 18975 xor     cx, cx ;~ 01A2:8C44
cs=0x1a2;eip=0x008c46; 	T(OR(eax, eax));	// 18976 or      eax, eax ;~ 01A2:8C46
cs=0x1a2;eip=0x008c49; 	J(JNS(_my_i32toa10_1));	// 18977 jns     short _my_i32toa10_1 ;~ 01A2:8C49
cs=0x1a2;eip=0x008c4b; 	T(MOV(dl, '-'));	// 18978 mov     dl, '-' ;~ 01A2:8C4B
cs=0x1a2;eip=0x008c4d; 	J(CALL(_my_putdigit,0));	// 18979 call    _my_putdigit ;~ 01A2:8C4D
cs=0x1a2;eip=0x008c50; 	T(NEG(eax));	// 18980 neg     eax ;~ 01A2:8C50
cs=0x1a2;eip=0x008c53; 	J(JMP(_my_i32toa10_1));	// 18981 jmp     short _my_i32toa10_1 ;~ 01A2:8C53
_my_u32toa10_0:
	// 19004 
cs=0x1a2;eip=0x008c5b; 	T(XOR(cx, cx));	// 19005 xor     cx, cx ;~ 01A2:8C5B
_my_i32toa10_1:
	// 5535 
cs=0x1a2;eip=0x008c5d; 	T(MOV(ebx, 10));	// 19009 mov     ebx, 10 ;~ 01A2:8C5D
	return _my_u32toa_0(0, _state);
    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_my_i32toa10_0: 	goto _my_i32toa10_0;
        case m2c::k_my_i32toa10_1: 	goto _my_i32toa10_1;
        case m2c::k_my_u32toa10_0: 	goto _my_u32toa10_0;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _my_u8toa_10(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _my_u8toa_10:
    _begin:
cs=0x1a2;eip=0x008c55; 	T(XOR(ah, ah));	// 18989 xor     ah, ah ;~ 01A2:8C55
	return _my_u16toa_10(0, _state);
    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_my_u8toa_10: 	goto _my_u8toa_10;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _my_u16toa_10(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _my_u16toa_10:
    _begin:
cs=0x1a2;eip=0x008c57; 	T(MOVZX(eax, ax));	// 18997 movzx   eax, ax ;~ 01A2:8C57
	return _group31(m2c::k_my_u32toa10_0, _state);
    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_my_u16toa_10: 	goto _my_u16toa_10;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _my_u32toa_0(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _my_u32toa_0:
    _begin:
cs=0x1a2;eip=0x008c63; 	T(XOR(edx, edx));	// 19017 xor     edx, edx ;~ 01A2:8C63
cs=0x1a2;eip=0x008c66; 	T(DIV4(ebx));	// 19018 div     ebx ;~ 01A2:8C66
cs=0x1a2;eip=0x008c69; 	T(OR(eax, eax));	// 19019 or      eax, eax ;~ 01A2:8C69
cs=0x1a2;eip=0x008c6c; 	J(JZ(loc_18c75));	// 19020 jz      short loc_18C75 ;~ 01A2:8C6C
cs=0x1a2;eip=0x008c6e; 	X(PUSH(edx));	// 19021 push    edx ;~ 01A2:8C6E
cs=0x1a2;eip=0x008c70; 	J(CALL(_my_u32toa_0,0));	// 19022 call    _my_u32toa_0 ;~ 01A2:8C70
cs=0x1a2;eip=0x008c73; 	X(POP(edx));	// 19023 pop     edx ;~ 01A2:8C73
loc_18c75:
	// 5536 
cs=0x1a2;eip=0x008c75; 	T(OR(dl, '0'));	// 19026 or      dl, '0' ;~ 01A2:8C75
	return _my_putdigit(0, _state);
    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_my_u32toa_0: 	goto _my_u32toa_0;
        case m2c::kloc_18c75: 	goto loc_18c75;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _my_putdigit(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _my_putdigit:
    _begin:
cs=0x1a2;eip=0x008c78; 	X(MOV(*(raddr(ds,si)), dl));	// 19034 mov     [si], dl ;~ 01A2:8C78
cs=0x1a2;eip=0x008c7a; 	T(INC(si));	// 19035 inc     si ;~ 01A2:8C7A
cs=0x1a2;eip=0x008c7b; 	T(INC(cx));	// 19036 inc     cx ;~ 01A2:8C7B
cs=0x1a2;eip=0x008c7c; 	J(RETN(0));	// 19037 retn ;~ 01A2:8C7C

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_my_putdigit: 	goto _my_putdigit;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _myasmsprintf(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _myasmsprintf:
    _begin:
cs=0x1a2;eip=0x008c98; 	X(PUSH(es));	// 19061 push    es ;~ 01A2:8C98
cs=0x1a2;eip=0x008c99; 	T(MOV(ax, ds));	// 19062 mov     ax, ds ;~ 01A2:8C99
cs=0x1a2;eip=0x008c9b; 	T(MOV(es, ax));	// 19063 mov     es, ax ;~ 01A2:8C9B
cs=0x1a2;eip=0x008c9d; 	J(JMP(loc_18ca2));	// 19065 jmp     short loc_18CA2 ;~ 01A2:8C9D
loc_18c9f:
	// 5537 
cs=0x1a2;eip=0x008c9f; 	X(MOV(*(raddr(ds,di)), al));	// 19069 mov     [di], al ;~ 01A2:8C9F
cs=0x1a2;eip=0x008ca1; 	T(INC(di));	// 19070 inc     di ;~ 01A2:8CA1
loc_18ca2:
	// 5538 
cs=0x1a2;eip=0x008ca2; 	T(MOV(al, *(raddr(ds,si))));	// 19074 mov     al, [si] ;~ 01A2:8CA2
cs=0x1a2;eip=0x008ca4; 	T(INC(si));	// 19075 inc     si ;~ 01A2:8CA4
cs=0x1a2;eip=0x008ca5; 	T(CMP(al, 0x20));	// 19076 cmp     al, 20h ; ' ' ;~ 01A2:8CA5
cs=0x1a2;eip=0x008ca7; 	J(JNC(loc_18c9f));	// 19077 jnb     short loc_18C9F ;~ 01A2:8CA7
cs=0x1a2;eip=0x008ca9; 	T(CMP(al, 0x0C));	// 19078 cmp     al, 0Ch ;~ 01A2:8CA9
cs=0x1a2;eip=0x008cab; 	J(JA(_mysprintf_0_nop));	// 19079 ja      short _mysprintf_0_nop ;~ 01A2:8CAB
cs=0x1a2;eip=0x008cad; 	T(INC(si));	// 19080 inc     si ;~ 01A2:8CAD
cs=0x1a2;eip=0x008cae; 	T(MOV(bl, al));	// 19081 mov     bl, al ;~ 01A2:8CAE
cs=0x1a2;eip=0x008cb0; 	T(XOR(bh, bh));	// 19082 xor     bh, bh ;~ 01A2:8CB0
cs=0x1a2;eip=0x008cb2; 	T(SHL(bx, 1));	// 19083 shl     bx, 1 ;~ 01A2:8CB2
	cs=seg_offset(seg000);
cs=0x1a2;eip=0x008cb4; __disp=*(dw*)(((db*)&_asmprintf_tbl)+bx);
	J(return __dispatch_call(__disp, _state););	// 19084 jmp     cs:_asmprintf_tbl[bx] ;~ 01A2:8CB4
_mysprintf_0_nop:
	// 5539 
cs=0x1a2;eip=0x008cb9; 	X(POP(es));	// 19090 pop     es ;~ 01A2:8CB9
cs=0x1a2;eip=0x008cba; 	J(RETN(0));	// 19092 retn ;~ 01A2:8CBA
_mysprintf_1_offstr:
	// 5540 
cs=0x1a2;eip=0x008cbb; 	X(PUSH(si));	// 19097 push    si ;~ 01A2:8CBB
cs=0x1a2;eip=0x008cbc; 	T(MOV(si, *(dw*)(raddr(ds,si))));	// 19098 mov     si, [si] ;~ 01A2:8CBC
cs=0x1a2;eip=0x008cbe; 	J(CALL(_strcpy_count_0,0));	// 19099 call    _strcpy_count_0 ;~ 01A2:8CBE
cs=0x1a2;eip=0x008cc1; 	X(POP(si));	// 19100 pop     si ;~ 01A2:8CC1
cs=0x1a2;eip=0x008cc2; 	T(ADD(si, 2));	// 19101 add     si, 2 ;~ 01A2:8CC2
cs=0x1a2;eip=0x008cc5; 	J(JMP(loc_18ca2));	// 19102 jmp     short loc_18CA2 ;~ 01A2:8CC5
_mysprintf_2_off8str:
	// 5541 
cs=0x1a2;eip=0x008cc7; 	T(MOV(bx, *(dw*)(raddr(ds,si))));	// 19107 mov     bx, [si] ;~ 01A2:8CC7
cs=0x1a2;eip=0x008cc9; 	T(MOV(bl, *(raddr(ds,bx))));	// 19108 mov     bl, [bx] ;~ 01A2:8CC9
cs=0x1a2;eip=0x008ccb; 	T(XOR(bh, bh));	// 19109 xor     bh, bh ;~ 01A2:8CCB
cs=0x1a2;eip=0x008ccd; 	J(JMP(loc_18cd3));	// 19110 jmp     short loc_18CD3 ;~ 01A2:8CCD
_mysprintf_3_off16str:
	// 5542 
cs=0x1a2;eip=0x008ccf; 	T(MOV(bx, *(dw*)(raddr(ds,si))));	// 19115 mov     bx, [si] ;~ 01A2:8CCF
cs=0x1a2;eip=0x008cd1; 	T(MOV(bx, *(dw*)(raddr(ds,bx))));	// 19116 mov     bx, [bx] ;~ 01A2:8CD1
loc_18cd3:
	// 5543 
cs=0x1a2;eip=0x008cd3; 	X(PUSH(si));	// 19119 push    si ;~ 01A2:8CD3
cs=0x1a2;eip=0x008cd4; 	T(SHL(bx, 1));	// 19120 shl     bx, 1 ;~ 01A2:8CD4
cs=0x1a2;eip=0x008cd6; 	T(MOV(si, *(dw*)(raddr(ds,si+2))));	// 19121 mov     si, [si+2] ;~ 01A2:8CD6
cs=0x1a2;eip=0x008cd9; 	T(MOV(si, *(dw*)(raddr(ds,bx+si))));	// 19122 mov     si, [bx+si] ;~ 01A2:8CD9
cs=0x1a2;eip=0x008cdb; 	J(CALL(_strcpy_count_0,0));	// 19123 call    _strcpy_count_0 ;~ 01A2:8CDB
cs=0x1a2;eip=0x008cde; 	X(POP(si));	// 19124 pop     si ;~ 01A2:8CDE
cs=0x1a2;eip=0x008cdf; 	T(ADD(si, 4));	// 19125 add     si, 4 ;~ 01A2:8CDF
cs=0x1a2;eip=0x008ce2; 	J(JMP(loc_18ca2));	// 19126 jmp     short loc_18CA2 ;~ 01A2:8CE2
_mysprintf_4_u8toa:
	// 5544 
cs=0x1a2;eip=0x008ce4; 	X(PUSH(si));	// 19131 push    si ;~ 01A2:8CE4
cs=0x1a2;eip=0x008ce5; 	T(MOV(si, *(dw*)(raddr(ds,si))));	// 19132 mov     si, [si] ;~ 01A2:8CE5
cs=0x1a2;eip=0x008ce7; 	T(MOV(al, *(raddr(ds,si))));	// 19133 mov     al, [si] ;~ 01A2:8CE7
cs=0x1a2;eip=0x008ce9; 	T(MOV(si, di));	// 19134 mov     si, di ;~ 01A2:8CE9
cs=0x1a2;eip=0x008ceb; 	J(CALL(_my_u8toa_10,0));	// 19135 call    _my_u8toa_10 ;~ 01A2:8CEB
cs=0x1a2;eip=0x008cee; 	T(MOV(di, si));	// 19136 mov     di, si ;~ 01A2:8CEE
cs=0x1a2;eip=0x008cf0; 	X(POP(si));	// 19137 pop     si ;~ 01A2:8CF0
cs=0x1a2;eip=0x008cf1; 	T(ADD(si, 2));	// 19138 add     si, 2 ;~ 01A2:8CF1
cs=0x1a2;eip=0x008cf4; 	J(JMP(loc_18ca2));	// 19139 jmp     short loc_18CA2 ;~ 01A2:8CF4
_mysprintf_5_u16toa:
	// 5545 
cs=0x1a2;eip=0x008cf6; 	X(PUSH(si));	// 19144 push    si ;~ 01A2:8CF6
cs=0x1a2;eip=0x008cf7; 	T(MOV(si, *(dw*)(raddr(ds,si))));	// 19145 mov     si, [si] ;~ 01A2:8CF7
cs=0x1a2;eip=0x008cf9; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 19146 mov     ax, [si] ;~ 01A2:8CF9
cs=0x1a2;eip=0x008cfb; 	T(MOV(si, di));	// 19147 mov     si, di ;~ 01A2:8CFB
cs=0x1a2;eip=0x008cfd; 	J(CALL(_my_u16toa_10,0));	// 19148 call    _my_u16toa_10 ;~ 01A2:8CFD
cs=0x1a2;eip=0x008d00; 	T(MOV(di, si));	// 19149 mov     di, si ;~ 01A2:8D00
cs=0x1a2;eip=0x008d02; 	X(POP(si));	// 19150 pop     si ;~ 01A2:8D02
cs=0x1a2;eip=0x008d03; 	T(ADD(si, 2));	// 19151 add     si, 2 ;~ 01A2:8D03
cs=0x1a2;eip=0x008d06; 	J(JMP(loc_18ca2));	// 19152 jmp     short loc_18CA2 ;~ 01A2:8D06
_mysprintf_6_u32toa:
	// 5546 
cs=0x1a2;eip=0x008d08; 	X(PUSH(si));	// 19157 push    si ;~ 01A2:8D08
cs=0x1a2;eip=0x008d09; 	T(MOV(si, *(dw*)(raddr(ds,si))));	// 19158 mov     si, [si] ;~ 01A2:8D09
cs=0x1a2;eip=0x008d0b; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 19159 mov     eax, [si] ;~ 01A2:8D0B
cs=0x1a2;eip=0x008d0e; 	T(MOV(si, di));	// 19160 mov     si, di ;~ 01A2:8D0E
cs=0x1a2;eip=0x008d10; 	J(CALL(_my_u32toa10_0,0));	// 19161 call    _my_u32toa10_0 ;~ 01A2:8D10
cs=0x1a2;eip=0x008d13; 	T(MOV(di, si));	// 19162 mov     di, si ;~ 01A2:8D13
cs=0x1a2;eip=0x008d15; 	X(POP(si));	// 19163 pop     si ;~ 01A2:8D15
cs=0x1a2;eip=0x008d16; 	T(ADD(si, 2));	// 19164 add     si, 2 ;~ 01A2:8D16
cs=0x1a2;eip=0x008d19; 	J(JMP(loc_18ca2));	// 19165 jmp     short loc_18CA2 ;~ 01A2:8D19
_mysprintf_7_i8toa:
	// 5547 
cs=0x1a2;eip=0x008d1b; 	X(PUSH(si));	// 19170 push    si ;~ 01A2:8D1B
cs=0x1a2;eip=0x008d1c; 	T(MOV(si, *(dw*)(raddr(ds,si))));	// 19171 mov     si, [si] ;~ 01A2:8D1C
cs=0x1a2;eip=0x008d1e; 	T(MOV(al, *(raddr(ds,si))));	// 19172 mov     al, [si] ;~ 01A2:8D1E
cs=0x1a2;eip=0x008d20; 	T(MOV(si, di));	// 19173 mov     si, di ;~ 01A2:8D20
cs=0x1a2;eip=0x008d22; 	J(CALL(_my_i8toa10_0,0));	// 19174 call    _my_i8toa10_0 ;~ 01A2:8D22
cs=0x1a2;eip=0x008d25; 	T(MOV(di, si));	// 19175 mov     di, si ;~ 01A2:8D25
cs=0x1a2;eip=0x008d27; 	X(POP(si));	// 19176 pop     si ;~ 01A2:8D27
cs=0x1a2;eip=0x008d28; 	T(ADD(si, 2));	// 19177 add     si, 2 ;~ 01A2:8D28
cs=0x1a2;eip=0x008d2b; 	J(JMP(loc_18ca2));	// 19178 jmp     loc_18CA2 ;~ 01A2:8D2B
_mysprintf_8_i16toa:
	// 5548 
cs=0x1a2;eip=0x008d2e; 	X(PUSH(si));	// 19183 push    si ;~ 01A2:8D2E
cs=0x1a2;eip=0x008d2f; 	T(MOV(si, *(dw*)(raddr(ds,si))));	// 19184 mov     si, [si] ;~ 01A2:8D2F
cs=0x1a2;eip=0x008d31; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 19185 mov     ax, [si] ;~ 01A2:8D31
cs=0x1a2;eip=0x008d33; 	T(MOV(si, di));	// 19186 mov     si, di ;~ 01A2:8D33
cs=0x1a2;eip=0x008d35; 	J(CALL(_my_i16toa10_0,0));	// 19187 call    _my_i16toa10_0 ;~ 01A2:8D35
cs=0x1a2;eip=0x008d38; 	T(MOV(di, si));	// 19188 mov     di, si ;~ 01A2:8D38
cs=0x1a2;eip=0x008d3a; 	X(POP(si));	// 19189 pop     si ;~ 01A2:8D3A
cs=0x1a2;eip=0x008d3b; 	T(ADD(si, 2));	// 19190 add     si, 2 ;~ 01A2:8D3B
cs=0x1a2;eip=0x008d3e; 	J(JMP(loc_18ca2));	// 19191 jmp     loc_18CA2 ;~ 01A2:8D3E
_mysprintf_9_i32toa:
	// 5549 
cs=0x1a2;eip=0x008d41; 	X(PUSH(si));	// 19196 push    si ;~ 01A2:8D41
cs=0x1a2;eip=0x008d42; 	T(MOV(si, *(dw*)(raddr(ds,si))));	// 19197 mov     si, [si] ;~ 01A2:8D42
cs=0x1a2;eip=0x008d44; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 19198 mov     eax, [si] ;~ 01A2:8D44
cs=0x1a2;eip=0x008d47; 	T(MOV(si, di));	// 19199 mov     si, di ;~ 01A2:8D47
cs=0x1a2;eip=0x008d49; 	J(CALL(_my_i32toa10_0,0));	// 19200 call    _my_i32toa10_0 ;~ 01A2:8D49
cs=0x1a2;eip=0x008d4c; 	T(MOV(di, si));	// 19201 mov     di, si ;~ 01A2:8D4C
cs=0x1a2;eip=0x008d4e; 	X(POP(si));	// 19202 pop     si ;~ 01A2:8D4E
cs=0x1a2;eip=0x008d4f; 	T(ADD(si, 2));	// 19203 add     si, 2 ;~ 01A2:8D4F
cs=0x1a2;eip=0x008d52; 	J(JMP(loc_18ca2));	// 19204 jmp     loc_18CA2 ;~ 01A2:8D52
_mysprintf_10_u8tox:
	// 5550 
cs=0x1a2;eip=0x008d55; 	X(PUSH(si));	// 19209 push    si ;~ 01A2:8D55
cs=0x1a2;eip=0x008d56; 	T(MOV(si, *(dw*)(raddr(ds,si))));	// 19210 mov     si, [si] ;~ 01A2:8D56
cs=0x1a2;eip=0x008d58; 	T(MOV(al, *(raddr(ds,si))));	// 19211 mov     al, [si] ;~ 01A2:8D58
cs=0x1a2;eip=0x008d5a; 	T(MOV(si, di));	// 19212 mov     si, di ;~ 01A2:8D5A
cs=0x1a2;eip=0x008d5c; 	J(CALL(_u8tox,0));	// 19213 call    _u8tox ;~ 01A2:8D5C
cs=0x1a2;eip=0x008d5f; 	T(MOV(di, si));	// 19214 mov     di, si ;~ 01A2:8D5F
cs=0x1a2;eip=0x008d61; 	X(POP(si));	// 19215 pop     si ;~ 01A2:8D61
cs=0x1a2;eip=0x008d62; 	T(ADD(si, 2));	// 19216 add     si, 2 ;~ 01A2:8D62
cs=0x1a2;eip=0x008d65; 	J(JMP(loc_18ca2));	// 19217 jmp     loc_18CA2 ;~ 01A2:8D65
_mysprintf_11_u16tox:
	// 5551 
cs=0x1a2;eip=0x008d68; 	X(PUSH(si));	// 19222 push    si ;~ 01A2:8D68
cs=0x1a2;eip=0x008d69; 	T(MOV(si, *(dw*)(raddr(ds,si))));	// 19223 mov     si, [si] ;~ 01A2:8D69
cs=0x1a2;eip=0x008d6b; 	T(MOV(ax, *(dw*)(raddr(ds,si))));	// 19224 mov     ax, [si] ;~ 01A2:8D6B
cs=0x1a2;eip=0x008d6d; 	T(MOV(si, di));	// 19225 mov     si, di ;~ 01A2:8D6D
cs=0x1a2;eip=0x008d6f; 	J(CALL(_u16tox,0));	// 19226 call    _u16tox ;~ 01A2:8D6F
cs=0x1a2;eip=0x008d72; 	T(MOV(di, si));	// 19227 mov     di, si ;~ 01A2:8D72
cs=0x1a2;eip=0x008d74; 	X(POP(si));	// 19228 pop     si ;~ 01A2:8D74
cs=0x1a2;eip=0x008d75; 	T(ADD(si, 2));	// 19229 add     si, 2 ;~ 01A2:8D75
cs=0x1a2;eip=0x008d78; 	J(JMP(loc_18ca2));	// 19230 jmp     loc_18CA2 ;~ 01A2:8D78
_mysprintf_12_u32tox:
	// 5552 
cs=0x1a2;eip=0x008d7b; 	X(PUSH(si));	// 19235 push    si ;~ 01A2:8D7B
cs=0x1a2;eip=0x008d7c; 	T(MOV(si, *(dw*)(raddr(ds,si))));	// 19236 mov     si, [si] ;~ 01A2:8D7C
cs=0x1a2;eip=0x008d7e; 	T(MOV(eax, *(dd*)(raddr(ds,si))));	// 19237 mov     eax, [si] ;~ 01A2:8D7E
cs=0x1a2;eip=0x008d81; 	T(MOV(si, di));	// 19238 mov     si, di ;~ 01A2:8D81
cs=0x1a2;eip=0x008d83; 	J(CALL(_u32tox,0));	// 19239 call    _u32tox ;~ 01A2:8D83
cs=0x1a2;eip=0x008d86; 	T(MOV(di, si));	// 19240 mov     di, si ;~ 01A2:8D86
cs=0x1a2;eip=0x008d88; 	X(POP(si));	// 19241 pop     si ;~ 01A2:8D88
cs=0x1a2;eip=0x008d89; 	T(ADD(si, 2));	// 19242 add     si, 2 ;~ 01A2:8D89
cs=0x1a2;eip=0x008d8c; 	J(JMP(loc_18ca2));	// 19243 jmp     loc_18CA2 ;~ 01A2:8D8C

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_myasmsprintf: 	goto _myasmsprintf;
        case m2c::k_mysprintf_0_nop: 	goto _mysprintf_0_nop;
        case m2c::k_mysprintf_10_u8tox: 	goto _mysprintf_10_u8tox;
        case m2c::k_mysprintf_11_u16tox: 	goto _mysprintf_11_u16tox;
        case m2c::k_mysprintf_12_u32tox: 	goto _mysprintf_12_u32tox;
        case m2c::k_mysprintf_1_offstr: 	goto _mysprintf_1_offstr;
        case m2c::k_mysprintf_2_off8str: 	goto _mysprintf_2_off8str;
        case m2c::k_mysprintf_3_off16str: 	goto _mysprintf_3_off16str;
        case m2c::k_mysprintf_4_u8toa: 	goto _mysprintf_4_u8toa;
        case m2c::k_mysprintf_5_u16toa: 	goto _mysprintf_5_u16toa;
        case m2c::k_mysprintf_6_u32toa: 	goto _mysprintf_6_u32toa;
        case m2c::k_mysprintf_7_i8toa: 	goto _mysprintf_7_i8toa;
        case m2c::k_mysprintf_8_i16toa: 	goto _mysprintf_8_i16toa;
        case m2c::k_mysprintf_9_i32toa: 	goto _mysprintf_9_i32toa;
        case m2c::kloc_18c9f: 	goto loc_18c9f;
        case m2c::kloc_18ca2: 	goto loc_18ca2;
        case m2c::kloc_18cd3: 	goto loc_18cd3;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _mystrlen_0(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _mystrlen_0:
    _begin:
cs=0x1a2;eip=0x008d8f; 	T(MOV(ax, -1));	// 19251 mov     ax, -1 ;~ 01A2:8D8F
cs=0x1a2;eip=0x008d92; 	T(DEC(si));	// 19252 dec     si ;~ 01A2:8D92
loc_18d93:
	// 5553 
cs=0x1a2;eip=0x008d93; 	T(INC(ax));	// 19255 inc     ax ;~ 01A2:8D93
cs=0x1a2;eip=0x008d94; 	T(INC(si));	// 19256 inc     si ;~ 01A2:8D94
cs=0x1a2;eip=0x008d95; 	T(CMP(*(raddr(ds,si)), 0));	// 19257 cmp     byte ptr [si], 0 ;~ 01A2:8D95
cs=0x1a2;eip=0x008d98; 	J(JNZ(loc_18d93));	// 19258 jnz     short loc_18D93 ;~ 01A2:8D98
cs=0x1a2;eip=0x008d9a; 	T(SUB(si, ax));	// 19259 sub     si, ax ;~ 01A2:8D9A
cs=0x1a2;eip=0x008d9c; 	J(RETN(0));	// 19260 retn ;~ 01A2:8D9C

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_mystrlen_0: 	goto _mystrlen_0;
        case m2c::kloc_18d93: 	goto loc_18d93;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}



 bool _strcpy_count_0(m2c::_offsets _i, struct m2c::_STATE* _state){
    X86_REGREF
    __disp = _i;

    if (__disp == 0) goto _begin;
    else goto __dispatch_call;
    _strcpy_count_0:
    _begin:
cs=0x1a2;eip=0x008d9d; 	T(XOR(cx, cx));	// 19269 xor     cx, cx ;~ 01A2:8D9D
cs=0x1a2;eip=0x008d9f; 	J(JMP(loc_18da6));	// 19270 jmp     short loc_18DA6 ;~ 01A2:8D9F
loc_18da1:
	// 5554 
cs=0x1a2;eip=0x008da1; 	X(MOV(*(raddr(es,di)), al));	// 19274 mov     es:[di], al ;~ 01A2:8DA1
cs=0x1a2;eip=0x008da4; 	T(INC(si));	// 19275 inc     si ;~ 01A2:8DA4
cs=0x1a2;eip=0x008da5; 	T(INC(di));	// 19276 inc     di ;~ 01A2:8DA5
loc_18da6:
	// 5555 
cs=0x1a2;eip=0x008da6; 	T(MOV(al, *(raddr(ds,si))));	// 19279 mov     al, [si] ;~ 01A2:8DA6
cs=0x1a2;eip=0x008da8; 	T(INC(cx));	// 19280 inc     cx ;~ 01A2:8DA8
cs=0x1a2;eip=0x008da9; 	T(OR(al, al));	// 19281 or      al, al ;~ 01A2:8DA9
cs=0x1a2;eip=0x008dab; 	J(JNZ(loc_18da1));	// 19282 jnz     short loc_18DA1 ;~ 01A2:8DAB
cs=0x1a2;eip=0x008dad; 	J(RETN(0));	// 19283 retn ;~ 01A2:8DAD

    assert(0);
    __dispatch_call:
#ifdef DOSBOX_CUSTOM
    if ((__disp >> 16) == 0xf000)
	{cs=0xf000;eip=__disp&0xffff;m2c::fix_segs();return false;}  // Jumping to BIOS
#endif
    if ((__disp>>16) == 0) {__disp |= ((dd)cs) << 16;}
    switch (__disp) {
        case m2c::k_strcpy_count_0: 	goto _strcpy_count_0;
        case m2c::kloc_18da1: 	goto loc_18da1;
        case m2c::kloc_18da6: 	goto loc_18da6;
        default: m2c::log_error("Don't know how to jump to 0x%x. See " __FILE__ " line %d\n", __disp, __LINE__);m2c::stackDump(); abort();
    };
}

